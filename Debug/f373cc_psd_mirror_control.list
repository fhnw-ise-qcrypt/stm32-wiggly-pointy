
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008020  08008020  00018020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b4  080084b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080084b4  080084b4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084b4  080084b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080084bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001dc  08008698  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08008698  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143f1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256e  00000000  00000000  000345fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00036b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00037a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d71c  00000000  00000000  00038868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001232d  00000000  00000000  00055f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab800  00000000  00000000  000682b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113ab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000500c  00000000  00000000  00113b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008004 	.word	0x08008004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008004 	.word	0x08008004

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f001 f80e 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f850 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fa92 	bl	80010dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bb8:	f000 f8a6 	bl	8000d08 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bbc:	f000 f8e2 	bl	8000d84 <MX_SPI2_Init>
  MX_TIM17_Init();
 8000bc0:	f000 f9e4 	bl	8000f8c <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000bc4:	f000 fa5a 	bl	800107c <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc8:	f000 f91a 	bl	8000e00 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bcc:	f000 f966 	bl	8000e9c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  printf("boink\n");
 8000bd0:	481a      	ldr	r0, [pc, #104]	; (8000c3c <main+0x94>)
 8000bd2:	f005 f961 	bl	8005e98 <puts>
  HAL_TIM_Base_Start(&htim17);
 8000bd6:	481a      	ldr	r0, [pc, #104]	; (8000c40 <main+0x98>)
 8000bd8:	f003 fbd0 	bl	800437c <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4818      	ldr	r0, [pc, #96]	; (8000c40 <main+0x98>)
 8000be0:	f003 fc86 	bl	80044f0 <HAL_TIM_OC_Start>
  HAL_Delay(10);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f001 f857 	bl	8001c98 <HAL_Delay>

  MCP3561_Reset(&hspi1);
 8000bea:	4816      	ldr	r0, [pc, #88]	; (8000c44 <main+0x9c>)
 8000bec:	f000 fcc8 	bl	8001580 <MCP3561_Reset>
  HAL_Delay(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f001 f851 	bl	8001c98 <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000bf6:	4813      	ldr	r0, [pc, #76]	; (8000c44 <main+0x9c>)
 8000bf8:	f000 fc48 	bl	800148c <MCP3561_PrintRegisters>
  printf("\n");
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f005 f8c7 	bl	8005d90 <putchar>

  MCP3561_Init(&hspi1);
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <main+0x9c>)
 8000c04:	f000 fbc9 	bl	800139a <MCP3561_Init>
  printf("\n");
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f005 f8c1 	bl	8005d90 <putchar>
  HAL_Delay(10);
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f001 f842 	bl	8001c98 <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <main+0x9c>)
 8000c16:	f000 fc39 	bl	800148c <MCP3561_PrintRegisters>
  printf("\n");
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f005 f8b8 	bl	8005d90 <putchar>

  setup_done = true;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <main+0xa0>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //MCP3561_PrintRegisters();
	  //printf("\n");
	  HAL_Delay(100);
 8000c26:	2064      	movs	r0, #100	; 0x64
 8000c28:	f001 f836 	bl	8001c98 <HAL_Delay>
	  printf("%d\n", (int)adc_val);  // updated in ISR
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <main+0xa4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <main+0xa8>)
 8000c34:	f005 f894 	bl	8005d60 <iprintf>
	  HAL_Delay(100);
 8000c38:	e7f5      	b.n	8000c26 <main+0x7e>
 8000c3a:	bf00      	nop
 8000c3c:	08008020 	.word	0x08008020
 8000c40:	20000270 	.word	0x20000270
 8000c44:	200002bc 	.word	0x200002bc
 8000c48:	20000208 	.word	0x20000208
 8000c4c:	20000204 	.word	0x20000204
 8000c50:	08008028 	.word	0x08008028

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09a      	sub	sp, #104	; 0x68
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5e:	2228      	movs	r2, #40	; 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 fc0a 	bl	800547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	222c      	movs	r2, #44	; 0x2c
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fbfc 	bl	800547c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c92:	2301      	movs	r3, #1
 8000c94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000ca0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000ca4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fad4 	bl	8002258 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cb6:	f000 fb2f 	bl	8001318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 f9c6 	bl	8003068 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ce2:	f000 fb19 	bl	8001318 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fbef 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cfc:	f000 fb0c 	bl	8001318 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3768      	adds	r7, #104	; 0x68
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <MX_SPI1_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d3e:	2210      	movs	r2, #16
 8000d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d56:	2207      	movs	r2, #7
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_SPI1_Init+0x74>)
 8000d68:	f002 fd28 	bl	80037bc <HAL_SPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f000 fad1 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200002bc 	.word	0x200002bc
 8000d80:	40013000 	.word	0x40013000

08000d84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <MX_SPI2_Init+0x78>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000d98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d9c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000da0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000de6:	f002 fce9 	bl	80037bc <HAL_SPI_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000df0:	f000 fa92 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000020c 	.word	0x2000020c
 8000dfc:	40003800 	.word	0x40003800

08000e00 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <MX_TIM14_Init+0x98>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e30:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e3e:	4815      	ldr	r0, [pc, #84]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e40:	f003 fa4c 	bl	80042dc <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000e4a:	f000 fa65 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000e4e:	4811      	ldr	r0, [pc, #68]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e50:	f003 faf4 	bl	800443c <HAL_TIM_OC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000e5a:	f000 fa5d 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e76:	f003 fc05 	bl	8004684 <HAL_TIM_OC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000e80:	f000 fa4a 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <MX_TIM14_Init+0x94>)
 8000e86:	f000 fca9 	bl	80017dc <HAL_TIM_MspPostInit>

}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200003a4 	.word	0x200003a4
 8000e98:	40002000 	.word	0x40002000

08000e9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b090      	sub	sp, #64	; 0x40
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2220      	movs	r2, #32
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fadd 	bl	800547c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000ec4:	4a30      	ldr	r2, [pc, #192]	; (8000f88 <MX_TIM16_Init+0xec>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eda:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000eee:	4825      	ldr	r0, [pc, #148]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000ef0:	f003 f9f4 	bl	80042dc <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000efa:	f000 fa0d 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000efe:	4821      	ldr	r0, [pc, #132]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000f00:	f003 fa9c 	bl	800443c <HAL_TIM_OC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000f0a:	f000 fa05 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	4814      	ldr	r0, [pc, #80]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000f34:	f003 fba6 	bl	8004684 <HAL_TIM_OC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000f3e:	f000 f9eb 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000f66:	f003 fe01 	bl	8004b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000f70:	f000 f9d2 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM16_Init+0xe8>)
 8000f76:	f000 fc31 	bl	80017dc <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3740      	adds	r7, #64	; 0x40
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200003f0 	.word	0x200003f0
 8000f88:	40014400 	.word	0x40014400

08000f8c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fa65 	bl	800547c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fb4:	4a30      	ldr	r2, [pc, #192]	; (8001078 <MX_TIM17_Init+0xec>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fde:	4825      	ldr	r0, [pc, #148]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000fe0:	f003 f97c 	bl	80042dc <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000fea:	f000 f995 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000fee:	4821      	ldr	r0, [pc, #132]	; (8001074 <MX_TIM17_Init+0xe8>)
 8000ff0:	f003 fa24 	bl	800443c <HAL_TIM_OC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000ffa:	f000 f98d 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	4814      	ldr	r0, [pc, #80]	; (8001074 <MX_TIM17_Init+0xe8>)
 8001024:	f003 fb2e 	bl	8004684 <HAL_TIM_OC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800102e:	f000 f973 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <MX_TIM17_Init+0xe8>)
 8001056:	f003 fd89 	bl	8004b6c <HAL_TIMEx_ConfigBreakDeadTime>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001060:	f000 f95a 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <MX_TIM17_Init+0xe8>)
 8001066:	f000 fbb9 	bl	80017dc <HAL_TIM_MspPostInit>

}
 800106a:	bf00      	nop
 800106c:	3740      	adds	r7, #64	; 0x40
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000270 	.word	0x20000270
 8001078:	40014800 	.word	0x40014800

0800107c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <MX_USART2_UART_Init+0x5c>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010c0:	f003 fda6 	bl	8004c10 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ca:	f000 f925 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000320 	.word	0x20000320
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <MX_GPIO_Init+0xfc>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <MX_GPIO_Init+0xfc>)
 80010f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <MX_GPIO_Init+0xfc>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <MX_GPIO_Init+0xfc>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <MX_GPIO_Init+0xfc>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f001 f84d 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	481d      	ldr	r0, [pc, #116]	; (80011dc <MX_GPIO_Init+0x100>)
 8001166:	f001 f847 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800116a:	2310      	movs	r3, #16
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f000 febe 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001188:	2302      	movs	r3, #2
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	480f      	ldr	r0, [pc, #60]	; (80011dc <MX_GPIO_Init+0x100>)
 800119e:	f000 feb1 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80011a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <MX_GPIO_Init+0x100>)
 80011bc:	f000 fea2 	bl	8001f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2007      	movs	r0, #7
 80011c6:	f000 fe66 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f000 fe7f 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000400 	.word	0x48000400

080011e0 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 80011e8:	1d39      	adds	r1, r7, #4
 80011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ee:	2201      	movs	r2, #1
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <__io_putchar+0x20>)
 80011f2:	f003 fd5b 	bl	8004cac <HAL_UART_Transmit>

    return ch;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000320 	.word	0x20000320

08001204 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
	/* @todo correct EXTI pin */
    if ( GPIO_Pin == GPIO_PIN_6) {
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	2b40      	cmp	r3, #64	; 0x40
 8001212:	d171      	bne.n	80012f8 <HAL_GPIO_EXTI_Callback+0xf4>
    	if(setup_done){
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d06c      	beq.n	80012f8 <HAL_GPIO_EXTI_Callback+0xf4>
    		uint8_t val[5] = {0,0,0,0,0};
 800121e:	4a39      	ldr	r2, [pc, #228]	; (8001304 <HAL_GPIO_EXTI_Callback+0x100>)
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001228:	6018      	str	r0, [r3, #0]
 800122a:	3304      	adds	r3, #4
 800122c:	7019      	strb	r1, [r3, #0]
    		uint8_t cmd[5] = {0,0,0,0,0};
 800122e:	4a35      	ldr	r2, [pc, #212]	; (8001304 <HAL_GPIO_EXTI_Callback+0x100>)
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001238:	6018      	str	r0, [r3, #0]
 800123a:	3304      	adds	r3, #4
 800123c:	7019      	strb	r1, [r3, #0]
    		cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 800123e:	2341      	movs	r3, #65	; 0x41
 8001240:	753b      	strb	r3, [r7, #20]
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 ffd5 	bl	80021f8 <HAL_GPIO_WritePin>
    		// non-blocking "HAL_SPI_TransmitReceive_IT" does not work
    		// because we need to create CS signal manually
    		// the timout therefore must not be greater than 1/fs
    		// e.g. at 300 Hz --> 3ms
    		HAL_SPI_TransmitReceive(&hspi1, &cmd[0], &val[0], 5, 1);
 800124e:	f107 021c 	add.w	r2, r7, #28
 8001252:	f107 0114 	add.w	r1, r7, #20
 8001256:	2301      	movs	r3, #1
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2305      	movs	r3, #5
 800125c:	482a      	ldr	r0, [pc, #168]	; (8001308 <HAL_GPIO_EXTI_Callback+0x104>)
 800125e:	f002 fcc6 	bl	8003bee <HAL_SPI_TransmitReceive>
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	2110      	movs	r1, #16
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f000 ffc5 	bl	80021f8 <HAL_GPIO_WritePin>
    		adc_val = (val[1] << 16) | (val[2] << 8) | val[3];
 800126e:	7f7b      	ldrb	r3, [r7, #29]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	4313      	orrs	r3, r2
 8001278:	7ffa      	ldrb	r2, [r7, #31]
 800127a:	4313      	orrs	r3, r2
 800127c:	461a      	mov	r2, r3
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <HAL_GPIO_EXTI_Callback+0x108>)
 8001280:	601a      	str	r2, [r3, #0]

    		float volts = (float)adc_val/(8388607.0f)*3.3f;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_GPIO_EXTI_Callback+0x108>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800128e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001310 <HAL_GPIO_EXTI_Callback+0x10c>
 8001292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001296:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001314 <HAL_GPIO_EXTI_Callback+0x110>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    		uint8_t str[11];
    		for(int i=0; i<10; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a6:	e008      	b.n	80012ba <HAL_GPIO_EXTI_Callback+0xb6>
    			str[i] = ' ';
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	4413      	add	r3, r2
 80012b0:	2220      	movs	r2, #32
 80012b2:	701a      	strb	r2, [r3, #0]
    		for(int i=0; i<10; i++)
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3301      	adds	r3, #1
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012bc:	2b09      	cmp	r3, #9
 80012be:	ddf3      	ble.n	80012a8 <HAL_GPIO_EXTI_Callback+0xa4>
    		int i = (int)(volts*9.0f/3.3f);
 80012c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012c4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80012c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012cc:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001314 <HAL_GPIO_EXTI_Callback+0x110>
 80012d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    		str[i] = '#';
 80012de:	f107 0208 	add.w	r2, r7, #8
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	4413      	add	r3, r2
 80012e6:	2223      	movs	r2, #35	; 0x23
 80012e8:	701a      	strb	r2, [r3, #0]
    		str[11] = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	74fb      	strb	r3, [r7, #19]
    		printf("%s\n", str);
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fdd0 	bl	8005e98 <puts>
    		//printf("%03f\n", volts);
    		//printf("%d\n", (int)adc_val);  // updated in ISR
    	}
    }
}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000208 	.word	0x20000208
 8001304:	0800802c 	.word	0x0800802c
 8001308:	200002bc 	.word	0x200002bc
 800130c:	20000204 	.word	0x20000204
 8001310:	4afffffe 	.word	0x4afffffe
 8001314:	40533333 	.word	0x40533333

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>

08001322 <_MCP3561_write>:
*/

#include "main.h"
#include "mcp3564.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	4613      	mov	r3, r2
 800132e:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2110      	movs	r1, #16
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f000 ff5e 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	2303      	movs	r3, #3
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f002 fae5 	bl	8003912 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2110      	movs	r1, #16
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 ff52 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_MCP3561_sread>:

uint8_t _MCP3561_sread(SPI_HandleTypeDef *hspi, uint8_t *cmd){
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af02      	add	r7, sp, #8
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	uint8_t reg8[2];
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2110      	movs	r1, #16
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f000 ff43 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
 8001372:	f107 020c 	add.w	r2, r7, #12
 8001376:	2303      	movs	r3, #3
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2302      	movs	r3, #2
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f002 fc35 	bl	8003bee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2110      	movs	r1, #16
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f000 ff34 	bl	80021f8 <HAL_GPIO_WritePin>
	return reg8[1];
 8001390:	7b7b      	ldrb	r3, [r7, #13]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]

	// be careful with the bitwise or operator "|"
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 80013a6:	2346      	movs	r3, #70	; 0x46
 80013a8:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG0_CLK_SEL_EXT;   // clock selection
 80013aa:	2300      	movs	r3, #0
 80013ac:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_ADC_MODE_CONV; // standby or converting
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	f043 0303 	orr.w	r3, r3, #3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_CS_SEL_NONE;   // input current
 80013b8:	7b7b      	ldrb	r3, [r7, #13]
 80013ba:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2202      	movs	r2, #2
 80013c2:	4619      	mov	r1, r3
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffac 	bl	8001322 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 80013ca:	234a      	movs	r3, #74	; 0x4a
 80013cc:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG1_OSR_512;       // over sampling rate
 80013ce:	2310      	movs	r3, #16
 80013d0:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG1_AMCLK_DIV8;    // sampling clock prescaler
 80013d2:	7b7b      	ldrb	r3, [r7, #13]
 80013d4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2202      	movs	r2, #2
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff9c 	bl	8001322 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 80013ea:	234e      	movs	r3, #78	; 0x4e
 80013ec:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG2_BOOST_x1;   // Boost
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_GAIN_x1;    // Gain
 80013f2:	7b7b      	ldrb	r3, [r7, #13]
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_AZ_MUX_OFF; // offset cancellation algorithm
 80013fc:	7b7b      	ldrb	r3, [r7, #13]
 80013fe:	737b      	strb	r3, [r7, #13]
	cmd[1] += 3; // last two bytes must always be '11'
 8001400:	7b7b      	ldrb	r3, [r7, #13]
 8001402:	3303      	adds	r3, #3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2202      	movs	r2, #2
 800140e:	4619      	mov	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff86 	bl	8001322 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8001416:	2352      	movs	r3, #82	; 0x52
 8001418:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG3_CONV_MODE_CONTINUOUS; // conversion mode
 800141a:	23c0      	movs	r3, #192	; 0xc0
 800141c:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_DATA_FORMAT_32BIT;    // SPI output data format, (32 and 24 bit available)
 800141e:	7b7b      	ldrb	r3, [r7, #13]
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	b2db      	uxtb	r3, r3
 8001426:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_CRCCOM_OFF;           // CRC
 8001428:	7b7b      	ldrb	r3, [r7, #13]
 800142a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_GAINCAL_OFF;          // gain calibration
 800142c:	7b7b      	ldrb	r3, [r7, #13]
 800142e:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_OFFCAL_OFF;           // offset calibration
 8001430:	7b7b      	ldrb	r3, [r7, #13]
 8001432:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2202      	movs	r2, #2
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff70 	bl	8001322 <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 8001442:	2356      	movs	r3, #86	; 0x56
 8001444:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_IRQ_MODE_IRQ_HIGH;  // IRQ default pin state
 8001446:	2304      	movs	r3, #4
 8001448:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_FASTCMD_ON;     // fast commands
 800144a:	7b7b      	ldrb	r3, [r7, #13]
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_STP_ON;         // start of conversion IRQ
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2202      	movs	r2, #2
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff5b 	bl	8001322 <_MCP3561_write>

	cmd[0]  = MCP3561_MUX_WRITE;
 800146c:	235a      	movs	r3, #90	; 0x5a
 800146e:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (MCP3561_MUX_CH0 << 4) | MCP3561_MUX_CH1;   // [7..4] VIN+ / [3..0] VIN-
 8001470:	2301      	movs	r3, #1
 8001472:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2202      	movs	r2, #2
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff50 	bl	8001322 <_MCP3561_write>
	cmd[3] = 0;
	_MCP3561_write(hspi, cmd, 4);
	*/


}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <MCP3561_PrintRegisters>:

/**
 * @brief prints the configuration registers content
 */
void MCP3561_PrintRegisters(SPI_HandleTypeDef *hspi){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	uint8_t reg8 = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd [5] = {0,0,0,0,0};
 8001498:	4a32      	ldr	r2, [pc, #200]	; (8001564 <MCP3561_PrintRegisters+0xd8>)
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a2:	6018      	str	r0, [r3, #0]
 80014a4:	3304      	adds	r3, #4
 80014a6:	7019      	strb	r1, [r3, #0]

	cmd[0] = MCP3561_CONFIG0_SREAD;
 80014a8:	2345      	movs	r3, #69	; 0x45
 80014aa:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff52 	bl	800135c <_MCP3561_sread>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
	printf("CONF0: %02x\n", reg8);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	4619      	mov	r1, r3
 80014c0:	4829      	ldr	r0, [pc, #164]	; (8001568 <MCP3561_PrintRegisters+0xdc>)
 80014c2:	f004 fc4d 	bl	8005d60 <iprintf>

	cmd[0] = MCP3561_CONFIG1_SREAD;
 80014c6:	2349      	movs	r3, #73	; 0x49
 80014c8:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff43 	bl	800135c <_MCP3561_sread>
 80014d6:	4603      	mov	r3, r0
 80014d8:	73fb      	strb	r3, [r7, #15]
	printf("CONF1: %02x\n", reg8);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4619      	mov	r1, r3
 80014de:	4823      	ldr	r0, [pc, #140]	; (800156c <MCP3561_PrintRegisters+0xe0>)
 80014e0:	f004 fc3e 	bl	8005d60 <iprintf>

	cmd[0] = MCP3561_CONFIG2_SREAD;
 80014e4:	234d      	movs	r3, #77	; 0x4d
 80014e6:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff34 	bl	800135c <_MCP3561_sread>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
	printf("CONF2: %02x\n", reg8);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	4619      	mov	r1, r3
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <MCP3561_PrintRegisters+0xe4>)
 80014fe:	f004 fc2f 	bl	8005d60 <iprintf>

	cmd[0] = MCP3561_CONFIG3_SREAD;
 8001502:	2351      	movs	r3, #81	; 0x51
 8001504:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff25 	bl	800135c <_MCP3561_sread>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
	printf("CONF3: %02x\n", reg8);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	4619      	mov	r1, r3
 800151a:	4816      	ldr	r0, [pc, #88]	; (8001574 <MCP3561_PrintRegisters+0xe8>)
 800151c:	f004 fc20 	bl	8005d60 <iprintf>

	cmd[0] = MCP3561_IRQ_SREAD;
 8001520:	2355      	movs	r3, #85	; 0x55
 8001522:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4619      	mov	r1, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff16 	bl	800135c <_MCP3561_sread>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
	printf("IRQ  : %02x\n", reg8);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MCP3561_PrintRegisters+0xec>)
 800153a:	f004 fc11 	bl	8005d60 <iprintf>

	cmd[0] = MCP3561_MUX_SREAD;
 800153e:	2359      	movs	r3, #89	; 0x59
 8001540:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4619      	mov	r1, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff07 	bl	800135c <_MCP3561_sread>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
	printf("MUX  : %02x\n", reg8);
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	4619      	mov	r1, r3
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <MCP3561_PrintRegisters+0xf0>)
 8001558:	f004 fc02 	bl	8005d60 <iprintf>

	/* @todo all the remaining registers */
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	08008094 	.word	0x08008094
 8001568:	08008034 	.word	0x08008034
 800156c:	08008044 	.word	0x08008044
 8001570:	08008054 	.word	0x08008054
 8001574:	08008064 	.word	0x08008064
 8001578:	08008074 	.word	0x08008074
 800157c:	08008084 	.word	0x08008084

08001580 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8001588:	237a      	movs	r3, #122	; 0x7a
 800158a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 800158c:	f107 010f 	add.w	r1, r7, #15
 8001590:	230a      	movs	r3, #10
 8001592:	2201      	movs	r2, #1
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f002 f9bc 	bl	8003912 <HAL_SPI_Transmit>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x44>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x44>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x44>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x44>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x44>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x44>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08e      	sub	sp, #56	; 0x38
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <HAL_SPI_MspInit+0x14c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d145      	bne.n	800169a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800160e:	4b4b      	ldr	r3, [pc, #300]	; (800173c <HAL_SPI_MspInit+0x150>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a4a      	ldr	r2, [pc, #296]	; (800173c <HAL_SPI_MspInit+0x150>)
 8001614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b48      	ldr	r3, [pc, #288]	; (800173c <HAL_SPI_MspInit+0x150>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001622:	623b      	str	r3, [r7, #32]
 8001624:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b45      	ldr	r3, [pc, #276]	; (800173c <HAL_SPI_MspInit+0x150>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a44      	ldr	r2, [pc, #272]	; (800173c <HAL_SPI_MspInit+0x150>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b42      	ldr	r3, [pc, #264]	; (800173c <HAL_SPI_MspInit+0x150>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b3f      	ldr	r3, [pc, #252]	; (800173c <HAL_SPI_MspInit+0x150>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a3e      	ldr	r2, [pc, #248]	; (800173c <HAL_SPI_MspInit+0x150>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6153      	str	r3, [r2, #20]
 800164a:	4b3c      	ldr	r3, [pc, #240]	; (800173c <HAL_SPI_MspInit+0x150>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001656:	2360      	movs	r3, #96	; 0x60
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001666:	2305      	movs	r3, #5
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f000 fc46 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001678:	2301      	movs	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001688:	2305      	movs	r3, #5
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	482b      	ldr	r0, [pc, #172]	; (8001740 <HAL_SPI_MspInit+0x154>)
 8001694:	f000 fc36 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001698:	e04a      	b.n	8001730 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a29      	ldr	r2, [pc, #164]	; (8001744 <HAL_SPI_MspInit+0x158>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d145      	bne.n	8001730 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4a24      	ldr	r2, [pc, #144]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ae:	61d3      	str	r3, [r2, #28]
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c6:	6153      	str	r3, [r2, #20]
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016de:	6153      	str	r3, [r2, #20]
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_SPI_MspInit+0x150>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016fe:	2305      	movs	r3, #5
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <HAL_SPI_MspInit+0x154>)
 800170a:	f000 fbfb 	bl	8001f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800170e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001720:	2305      	movs	r3, #5
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	4807      	ldr	r0, [pc, #28]	; (8001748 <HAL_SPI_MspInit+0x15c>)
 800172c:	f000 fbea 	bl	8001f04 <HAL_GPIO_Init>
}
 8001730:	bf00      	nop
 8001732:	3738      	adds	r7, #56	; 0x38
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40013000 	.word	0x40013000
 800173c:	40021000 	.word	0x40021000
 8001740:	48000400 	.word	0x48000400
 8001744:	40003800 	.word	0x40003800
 8001748:	48000c00 	.word	0x48000c00

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <HAL_TIM_Base_MspInit+0x80>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10c      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001776:	e022      	b.n	80017be <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_TIM_Base_MspInit+0x88>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10c      	bne.n	800179c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	6193      	str	r3, [r2, #24]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
}
 800179a:	e010      	b.n	80017be <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_TIM_Base_MspInit+0x8c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10b      	bne.n	80017be <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_TIM_Base_MspInit+0x84>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40002000 	.word	0x40002000
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40014400 	.word	0x40014400
 80017d8:	40014800 	.word	0x40014800

080017dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a35      	ldr	r2, [pc, #212]	; (80018d0 <HAL_TIM_MspPostInit+0xf4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d11e      	bne.n	800183c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6153      	str	r3, [r2, #20]
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001828:	2309      	movs	r3, #9
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f000 fb65 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800183a:	e045      	b.n	80018c8 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM16)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <HAL_TIM_MspPostInit+0xfc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11e      	bne.n	8001884 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	6153      	str	r3, [r2, #20]
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001870:	2301      	movs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f000 fb41 	bl	8001f04 <HAL_GPIO_Init>
}
 8001882:	e021      	b.n	80018c8 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM17)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_TIM_MspPostInit+0x100>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d11c      	bne.n	80018c8 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6153      	str	r3, [r2, #20]
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_TIM_MspPostInit+0xf8>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80018b8:	2301      	movs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <HAL_TIM_MspPostInit+0x104>)
 80018c4:	f000 fb1e 	bl	8001f04 <HAL_GPIO_Init>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40002000 	.word	0x40002000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40014400 	.word	0x40014400
 80018dc:	40014800 	.word	0x40014800
 80018e0:	48000400 	.word	0x48000400

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_UART_MspInit+0x7c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d128      	bne.n	8001958 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_UART_MspInit+0x80>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_UART_MspInit+0x80>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001936:	230c      	movs	r3, #12
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001946:	2307      	movs	r3, #7
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001954:	f000 fad6 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40004400 	.word	0x40004400
 8001964:	40021000 	.word	0x40021000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 f950 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f000 fc31 	bl	8002228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
	return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_kill>:

int _kill(int pid, int sig)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e4:	f003 fd20 	bl	8005428 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2216      	movs	r2, #22
 80019ec:	601a      	str	r2, [r3, #0]
	return -1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_exit>:

void _exit (int status)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a02:	f04f 31ff 	mov.w	r1, #4294967295
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffe7 	bl	80019da <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0c:	e7fe      	b.n	8001a0c <_exit+0x12>

08001a0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e00a      	b.n	8001a36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a20:	f3af 8000 	nop.w
 8001a24:	4601      	mov	r1, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	60ba      	str	r2, [r7, #8]
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbf0      	blt.n	8001a20 <_read+0x12>
	}

return len;
 8001a3e:	687b      	ldr	r3, [r7, #4]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e009      	b.n	8001a6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	60ba      	str	r2, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fbbc 	bl	80011e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbf1      	blt.n	8001a5a <_write+0x12>
	}
	return len;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_close>:

int _close(int file)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa8:	605a      	str	r2, [r3, #4]
	return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_isatty>:

int _isatty(int file)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
	return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f003 fc86 	bl	8005428 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20008000 	.word	0x20008000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	200001f8 	.word	0x200001f8
 8001b50:	20000450 	.word	0x20000450

08001b54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7e:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <LoopForever+0xe>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b94:	4c0b      	ldr	r4, [pc, #44]	; (8001bc4 <LoopForever+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ba2:	f7ff ffd7 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f003 fc45 	bl	8005434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001baa:	f7fe fffd 	bl	8000ba8 <main>

08001bae <LoopForever>:

LoopForever:
    b LoopForever
 8001bae:	e7fe      	b.n	8001bae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bbc:	080084bc 	.word	0x080084bc
  ldr r2, =_sbss
 8001bc0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001bc4:	20000450 	.word	0x20000450

08001bc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC1_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_Init+0x28>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_Init+0x28>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 f94f 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	200f      	movs	r0, #15
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fcdc 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f967 	bl	8001eea <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f000 f92f 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	2000043c 	.word	0x2000043c

08001c80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	2000043c 	.word	0x2000043c

08001c98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	e154      	b.n	80021be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8146 	beq.w	80021b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d005      	beq.n	8001f44 <HAL_GPIO_Init+0x40>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d130      	bne.n	8001fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 0201 	and.w	r2, r3, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d017      	beq.n	8001fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d123      	bne.n	8002036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	6939      	ldr	r1, [r7, #16]
 8002032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0203 	and.w	r2, r3, #3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a0 	beq.w	80021b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002078:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_GPIO_Init+0x2d8>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_GPIO_Init+0x2d8>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b55      	ldr	r3, [pc, #340]	; (80021dc <HAL_GPIO_Init+0x2d8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002090:	4a53      	ldr	r2, [pc, #332]	; (80021e0 <HAL_GPIO_Init+0x2dc>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ba:	d019      	beq.n	80020f0 <HAL_GPIO_Init+0x1ec>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a49      	ldr	r2, [pc, #292]	; (80021e4 <HAL_GPIO_Init+0x2e0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_GPIO_Init+0x1e8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_GPIO_Init+0x2e4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00d      	beq.n	80020e8 <HAL_GPIO_Init+0x1e4>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <HAL_GPIO_Init+0x2ec>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_GPIO_Init+0x1dc>
 80020dc:	2304      	movs	r3, #4
 80020de:	e008      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e0:	2305      	movs	r3, #5
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_GPIO_Init+0x2dc>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002110:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002134:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800215e:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f aea3 	bne.w	8001f14 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	48001000 	.word	0x48001000
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002214:	e002      	b.n	800221c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe ffdc 	bl	8001204 <HAL_GPIO_EXTI_Callback>
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800225e:	af00      	add	r7, sp, #0
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	f000 bef4 	b.w	800305a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 816a 	beq.w	8002556 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002282:	4bb3      	ldr	r3, [pc, #716]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b04      	cmp	r3, #4
 800228c:	d00c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800228e:	4bb0      	ldr	r3, [pc, #704]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b08      	cmp	r3, #8
 8002298:	d159      	bne.n	800234e <HAL_RCC_OscConfig+0xf6>
 800229a:	4bad      	ldr	r3, [pc, #692]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d152      	bne.n	800234e <HAL_RCC_OscConfig+0xf6>
 80022a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d102      	bne.n	80022da <HAL_RCC_OscConfig+0x82>
 80022d4:	4b9e      	ldr	r3, [pc, #632]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0xae>
 80022da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022de:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022f6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002302:	4b93      	ldr	r3, [pc, #588]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800230e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002312:	fa92 f2a2 	rbit	r2, r2
 8002316:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800231a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 810c 	beq.w	8002554 <HAL_RCC_OscConfig+0x2fc>
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 8106 	bne.w	8002554 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	f000 be86 	b.w	800305a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x110>
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e030      	b.n	80023ca <HAL_RCC_OscConfig+0x172>
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x134>
 8002372:	4b77      	ldr	r3, [pc, #476]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a76      	ldr	r2, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b74      	ldr	r3, [pc, #464]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01e      	b.n	80023ca <HAL_RCC_OscConfig+0x172>
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x15a>
 8002398:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a6c      	ldr	r2, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a69      	ldr	r2, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0x172>
 80023b2:	4b67      	ldr	r3, [pc, #412]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a66      	ldr	r2, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	f023 020f 	bic.w	r2, r3, #15
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	495d      	ldr	r1, [pc, #372]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d059      	beq.n	800249c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fc4a 	bl	8001c80 <HAL_GetTick>
 80023ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f2:	f7ff fc45 	bl	8001c80 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d902      	bls.n	8002408 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	f000 be29 	b.w	800305a <HAL_RCC_OscConfig+0xe02>
 8002408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800241c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <HAL_RCC_OscConfig+0x1e2>
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x20e>
 800243a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800244e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002452:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002456:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800246e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002472:	fa92 f2a2 	rbit	r2, r2
 8002476:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800247a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800247e:	fab2 f282 	clz	r2, r2
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f042 0220 	orr.w	r2, r2, #32
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f002 021f 	and.w	r2, r2, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f202 	lsl.w	r2, r1, r2
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ab      	beq.n	80023f2 <HAL_RCC_OscConfig+0x19a>
 800249a:	e05c      	b.n	8002556 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fbf0 	bl	8001c80 <HAL_GetTick>
 80024a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a6:	f7ff fbeb 	bl	8001c80 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d902      	bls.n	80024bc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f000 bdcf 	b.w	800305a <HAL_RCC_OscConfig+0xe02>
 80024bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_OscConfig+0x296>
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x2c2>
 80024ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002506:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800250a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCC_OscConfig+0x2f8>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002522:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800252e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002532:	fab2 f282 	clz	r2, r2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f042 0220 	orr.w	r2, r2, #32
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f002 021f 	and.w	r2, r2, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ab      	bne.n	80024a6 <HAL_RCC_OscConfig+0x24e>
 800254e:	e002      	b.n	8002556 <HAL_RCC_OscConfig+0x2fe>
 8002550:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 816f 	beq.w	8002844 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002566:	4bd0      	ldr	r3, [pc, #832]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002572:	4bcd      	ldr	r3, [pc, #820]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b08      	cmp	r3, #8
 800257c:	d16c      	bne.n	8002658 <HAL_RCC_OscConfig+0x400>
 800257e:	4bca      	ldr	r3, [pc, #808]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d166      	bne.n	8002658 <HAL_RCC_OscConfig+0x400>
 800258a:	2302      	movs	r3, #2
 800258c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800259c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d102      	bne.n	80025ba <HAL_RCC_OscConfig+0x362>
 80025b4:	4bbc      	ldr	r3, [pc, #752]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	e013      	b.n	80025e2 <HAL_RCC_OscConfig+0x38a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025de:	4bb2      	ldr	r3, [pc, #712]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2202      	movs	r2, #2
 80025e4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025ec:	fa92 f2a2 	rbit	r2, r2
 80025f0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f002 021f 	and.w	r2, r2, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_RCC_OscConfig+0x3cc>
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d002      	beq.n	8002624 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f000 bd1b 	b.w	800305a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4ba0      	ldr	r3, [pc, #640]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	21f8      	movs	r1, #248	; 0xf8
 8002634:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800263c:	fa91 f1a1 	rbit	r1, r1
 8002640:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002644:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002648:	fab1 f181 	clz	r1, r1
 800264c:	b2c9      	uxtb	r1, r1
 800264e:	408b      	lsls	r3, r1
 8002650:	4995      	ldr	r1, [pc, #596]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	e0f5      	b.n	8002844 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8085 	beq.w	800276e <HAL_RCC_OscConfig+0x516>
 8002664:	2301      	movs	r3, #1
 8002666:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002676:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002684:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	461a      	mov	r2, r3
 800268c:	2301      	movs	r3, #1
 800268e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff faf6 	bl	8001c80 <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269a:	f7ff faf1 	bl	8001c80 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d902      	bls.n	80026b0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f000 bcd5 	b.w	800305a <HAL_RCC_OscConfig+0xe02>
 80026b0:	2302      	movs	r3, #2
 80026b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d102      	bne.n	80026e0 <HAL_RCC_OscConfig+0x488>
 80026da:	4b73      	ldr	r3, [pc, #460]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	e013      	b.n	8002708 <HAL_RCC_OscConfig+0x4b0>
 80026e0:	2302      	movs	r3, #2
 80026e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026f2:	2302      	movs	r3, #2
 80026f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2202      	movs	r2, #2
 800270a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800270e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002712:	fa92 f2a2 	rbit	r2, r2
 8002716:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800271a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	f042 0220 	orr.w	r2, r2, #32
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f002 021f 	and.w	r2, r2, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0af      	beq.n	800269a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	21f8      	movs	r1, #248	; 0xf8
 800274a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002752:	fa91 f1a1 	rbit	r1, r1
 8002756:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800275a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800275e:	fab1 f181 	clz	r1, r1
 8002762:	b2c9      	uxtb	r1, r1
 8002764:	408b      	lsls	r3, r1
 8002766:	4950      	ldr	r1, [pc, #320]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
 800276c:	e06a      	b.n	8002844 <HAL_RCC_OscConfig+0x5ec>
 800276e:	2301      	movs	r3, #1
 8002770:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002780:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800278e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	461a      	mov	r2, r3
 8002796:	2300      	movs	r3, #0
 8002798:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7ff fa71 	bl	8001c80 <HAL_GetTick>
 800279e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a4:	f7ff fa6c 	bl	8001c80 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d902      	bls.n	80027ba <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f000 bc50 	b.w	800305a <HAL_RCC_OscConfig+0xe02>
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_OscConfig+0x592>
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	e013      	b.n	8002812 <HAL_RCC_OscConfig+0x5ba>
 80027ea:	2302      	movs	r3, #2
 80027ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002802:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_RCC_OscConfig+0x650>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2202      	movs	r2, #2
 8002814:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002818:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800281c:	fa92 f2a2 	rbit	r2, r2
 8002820:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002824:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1af      	bne.n	80027a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80da 	beq.w	8002a08 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d069      	beq.n	8002932 <HAL_RCC_OscConfig+0x6da>
 800285e:	2301      	movs	r3, #1
 8002860:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_OscConfig+0x654>)
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	461a      	mov	r2, r3
 8002884:	2301      	movs	r3, #1
 8002886:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7ff f9fa 	bl	8001c80 <HAL_GetTick>
 800288c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002890:	e00e      	b.n	80028b0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002892:	f7ff f9f5 	bl	8001c80 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d906      	bls.n	80028b0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e3d9      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	10908120 	.word	0x10908120
 80028b0:	2302      	movs	r3, #2
 80028b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028c6:	2202      	movs	r2, #2
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fa93 f2a3 	rbit	r2, r3
 80028d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028de:	2202      	movs	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	4ba5      	ldr	r3, [pc, #660]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 80028f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028fa:	2102      	movs	r1, #2
 80028fc:	6019      	str	r1, [r3, #0]
 80028fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f1a3 	rbit	r1, r3
 8002908:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800290c:	6019      	str	r1, [r3, #0]
  return result;
 800290e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0b0      	beq.n	8002892 <HAL_RCC_OscConfig+0x63a>
 8002930:	e06a      	b.n	8002a08 <HAL_RCC_OscConfig+0x7b0>
 8002932:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002948:	601a      	str	r2, [r3, #0]
  return result;
 800294a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800294e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	4b8c      	ldr	r3, [pc, #560]	; (8002b8c <HAL_RCC_OscConfig+0x934>)
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	461a      	mov	r2, r3
 8002960:	2300      	movs	r3, #0
 8002962:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7ff f98c 	bl	8001c80 <HAL_GetTick>
 8002968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e009      	b.n	8002982 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7ff f987 	bl	8001c80 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e36b      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
 8002982:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002986:	2202      	movs	r2, #2
 8002988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029b6:	2202      	movs	r2, #2
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ca:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 80029cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029d2:	2102      	movs	r1, #2
 80029d4:	6019      	str	r1, [r3, #0]
 80029d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f1a3 	rbit	r1, r3
 80029e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029e4:	6019      	str	r1, [r3, #0]
  return result;
 80029e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1b2      	bne.n	800296e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8158 	beq.w	8002cc8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4a56      	ldr	r2, [pc, #344]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	61d3      	str	r3, [r2, #28]
 8002a36:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f107 0308 	add.w	r3, r7, #8
 8002a48:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_RCC_OscConfig+0x938>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11a      	bne.n	8002a92 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5c:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_OscConfig+0x938>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <HAL_RCC_OscConfig+0x938>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a68:	f7ff f90a 	bl	8001c80 <HAL_GetTick>
 8002a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7ff f905 	bl	8001c80 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e2e9      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_RCC_OscConfig+0x938>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0ef      	beq.n	8002a72 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x852>
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e02f      	b.n	8002b0a <HAL_RCC_OscConfig+0x8b2>
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0x876>
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a33      	ldr	r2, [pc, #204]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e01d      	b.n	8002b0a <HAL_RCC_OscConfig+0x8b2>
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x89a>
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6213      	str	r3, [r2, #32]
 8002af0:	e00b      	b.n	8002b0a <HAL_RCC_OscConfig+0x8b2>
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d06b      	beq.n	8002bec <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7ff f8b4 	bl	8001c80 <HAL_GetTick>
 8002b18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7ff f8af 	bl	8001c80 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e291      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
 8002b36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b52:	2202      	movs	r2, #2
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fa93 f2a3 	rbit	r2, r3
 8002b60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b64:	601a      	str	r2, [r3, #0]
  return result;
 8002b66:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d109      	bne.n	8002b94 <HAL_RCC_OscConfig+0x93c>
 8002b80:	4b01      	ldr	r3, [pc, #4]	; (8002b88 <HAL_RCC_OscConfig+0x930>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_OscConfig+0x958>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	10908120 	.word	0x10908120
 8002b90:	40007000 	.word	0x40007000
 8002b94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	fa93 f2a3 	rbit	r2, r3
 8002ba6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	4bbb      	ldr	r3, [pc, #748]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	6011      	str	r1, [r2, #0]
 8002bb8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	fa92 f1a2 	rbit	r1, r2
 8002bc2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bc6:	6011      	str	r1, [r2, #0]
  return result;
 8002bc8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f002 021f 	and.w	r2, r2, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f202 	lsl.w	r2, r1, r2
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d099      	beq.n	8002b1e <HAL_RCC_OscConfig+0x8c6>
 8002bea:	e063      	b.n	8002cb4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7ff f848 	bl	8001c80 <HAL_GetTick>
 8002bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7ff f843 	bl	8001c80 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e225      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
 8002c0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c3c:	601a      	str	r2, [r3, #0]
  return result;
 8002c3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_OscConfig+0xa06>
 8002c58:	4b90      	ldr	r3, [pc, #576]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	e00d      	b.n	8002c7a <HAL_RCC_OscConfig+0xa22>
 8002c5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c62:	2202      	movs	r2, #2
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	fa93 f2a3 	rbit	r2, r3
 8002c70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	4b89      	ldr	r3, [pc, #548]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c7e:	2102      	movs	r1, #2
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fa92 f1a2 	rbit	r1, r2
 8002c8c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c90:	6011      	str	r1, [r2, #0]
  return result;
 8002c92:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f002 021f 	and.w	r2, r2, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1a0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b77      	ldr	r3, [pc, #476]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	4a76      	ldr	r2, [pc, #472]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 81c2 	beq.w	8003058 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd4:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	f000 819c 	beq.w	800301a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	f040 8114 	bne.w	8002f16 <HAL_RCC_OscConfig+0xcbe>
 8002cee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d06:	601a      	str	r2, [r3, #0]
  return result;
 8002d08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2300      	movs	r3, #0
 8002d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe ffac 	bl	8001c80 <HAL_GetTick>
 8002d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	e009      	b.n	8002d42 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe ffa7 	bl	8001c80 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e18b      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
 8002d42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d5a:	601a      	str	r2, [r3, #0]
  return result;
 8002d5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_OscConfig+0xb24>
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0xb5c>
 8002d7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dbc:	6011      	str	r1, [r2, #0]
 8002dbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	fa92 f1a2 	rbit	r1, r2
 8002dc8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dcc:	6011      	str	r1, [r2, #0]
  return result;
 8002dce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d19e      	bne.n	8002d2e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	4925      	ldr	r1, [pc, #148]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
 8002e0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	fa93 f2a3 	rbit	r2, r3
 8002e20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e24:	601a      	str	r2, [r3, #0]
  return result;
 8002e26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e2a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2301      	movs	r3, #1
 8002e40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe ff1d 	bl	8001c80 <HAL_GetTick>
 8002e46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4a:	e009      	b.n	8002e60 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe ff18 	bl	8001c80 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0fc      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
 8002e60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e78:	601a      	str	r2, [r3, #0]
  return result;
 8002e7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xc48>
 8002e94:	4b01      	ldr	r3, [pc, #4]	; (8002e9c <HAL_RCC_OscConfig+0xc44>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	e01e      	b.n	8002ed8 <HAL_RCC_OscConfig+0xc80>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_RCC_OscConfig+0xe0c>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002edc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ee0:	6011      	str	r1, [r2, #0]
 8002ee2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	fa92 f1a2 	rbit	r1, r2
 8002eec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ef0:	6011      	str	r1, [r2, #0]
  return result;
 8002ef2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d09b      	beq.n	8002e4c <HAL_RCC_OscConfig+0xbf4>
 8002f14:	e0a0      	b.n	8003058 <HAL_RCC_OscConfig+0xe00>
 8002f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2e:	601a      	str	r2, [r3, #0]
  return result;
 8002f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe98 	bl	8001c80 <HAL_GetTick>
 8002f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	e009      	b.n	8002f6a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe fe93 	bl	8001c80 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e077      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
 8002f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	fa93 f2a3 	rbit	r2, r3
 8002f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f82:	601a      	str	r2, [r3, #0]
  return result;
 8002f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xd4c>
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0xe0c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e01b      	b.n	8002fdc <HAL_RCC_OscConfig+0xd84>
 8002fa4:	f107 0320 	add.w	r3, r7, #32
 8002fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f107 0320 	add.w	r3, r7, #32
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f107 0318 	add.w	r3, r7, #24
 8002fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f107 0318 	add.w	r3, r7, #24
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_RCC_OscConfig+0xe0c>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f107 0210 	add.w	r2, r7, #16
 8002fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	f107 0210 	add.w	r2, r7, #16
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	fa92 f1a2 	rbit	r1, r2
 8002ff0:	f107 020c 	add.w	r2, r7, #12
 8002ff4:	6011      	str	r1, [r2, #0]
  return result;
 8002ff6:	f107 020c 	add.w	r2, r7, #12
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d19e      	bne.n	8002f56 <HAL_RCC_OscConfig+0xcfe>
 8003018:	e01e      	b.n	8003058 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e018      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_RCC_OscConfig+0xe0c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003030:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	429a      	cmp	r2, r3
 8003040:	d108      	bne.n	8003054 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003042:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b09e      	sub	sp, #120	; 0x78
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e162      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b90      	ldr	r3, [pc, #576]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d910      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	498b      	ldr	r1, [pc, #556]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e14a      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	497f      	ldr	r1, [pc, #508]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80dc 	beq.w	8003294 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d13c      	bne.n	800315e <HAL_RCC_ClockConfig+0xf6>
 80030e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d102      	bne.n	800310e <HAL_RCC_ClockConfig+0xa6>
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	e00f      	b.n	800312e <HAL_RCC_ClockConfig+0xc6>
 800310e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003112:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	667b      	str	r3, [r7, #100]	; 0x64
 800311c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003120:	663b      	str	r3, [r7, #96]	; 0x60
 8003122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003132:	65ba      	str	r2, [r7, #88]	; 0x58
 8003134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003136:	fa92 f2a2 	rbit	r2, r2
 800313a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800313c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800313e:	fab2 f282 	clz	r2, r2
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f042 0220 	orr.w	r2, r2, #32
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f002 021f 	and.w	r2, r2, #31
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d17b      	bne.n	8003252 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0f3      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d13c      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x178>
 8003166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <HAL_RCC_ClockConfig+0x128>
 800318a:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e00f      	b.n	80031b0 <HAL_RCC_ClockConfig+0x148>
 8003190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003194:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	647b      	str	r3, [r7, #68]	; 0x44
 800319e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
 80031a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ac:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80031b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b8:	fa92 f2a2 	rbit	r2, r2
 80031bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c0:	fab2 f282 	clz	r2, r2
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f042 0220 	orr.w	r2, r2, #32
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f002 021f 	and.w	r2, r2, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d13a      	bne.n	8003252 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b2      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
 80031e0:	2302      	movs	r3, #2
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_RCC_ClockConfig+0x1a0>
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e00d      	b.n	8003224 <HAL_RCC_ClockConfig+0x1bc>
 8003208:	2302      	movs	r3, #2
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
 8003214:	2302      	movs	r3, #2
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2202      	movs	r2, #2
 8003226:	61ba      	str	r2, [r7, #24]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	fa92 f2a2 	rbit	r2, r2
 800322e:	617a      	str	r2, [r7, #20]
  return result;
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	fab2 f282 	clz	r2, r2
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f042 0220 	orr.w	r2, r2, #32
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f002 021f 	and.w	r2, r2, #31
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e079      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f023 0203 	bic.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	491a      	ldr	r1, [pc, #104]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003264:	f7fe fd0c 	bl	8001c80 <HAL_GetTick>
 8003268:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	e00a      	b.n	8003282 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326c:	f7fe fd08 	bl	8001c80 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e061      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 020c 	and.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	429a      	cmp	r2, r3
 8003292:	d1eb      	bne.n	800326c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d214      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 0207 	bic.w	r2, r3, #7
 80032aa:	4906      	ldr	r1, [pc, #24]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e040      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
 80032c4:	40022000 	.word	0x40022000
 80032c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	491a      	ldr	r1, [pc, #104]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4912      	ldr	r1, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800330a:	f000 f829 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800330e:	4601      	mov	r1, r0
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003318:	22f0      	movs	r2, #240	; 0xf0
 800331a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	fa92 f2a2 	rbit	r2, r2
 8003322:	60fa      	str	r2, [r7, #12]
  return result;
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	40d3      	lsrs	r3, r2
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x2ec>)
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	fa21 f303 	lsr.w	r3, r1, r3
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x2f0>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_RCC_ClockConfig+0x2f4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fc5a 	bl	8001bf8 <HAL_InitTick>
  
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3778      	adds	r7, #120	; 0x78
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	0800809c 	.word	0x0800809c
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b08b      	sub	sp, #44	; 0x2c
 8003364:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc0>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x30>
 800338a:	2b08      	cmp	r3, #8
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x36>
 800338e:	e03c      	b.n	800340a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003392:	623b      	str	r3, [r7, #32]
      break;
 8003394:	e03c      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800339c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	fa92 f2a2 	rbit	r2, r2
 80033a8:	607a      	str	r2, [r7, #4]
  return result;
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	40d3      	lsrs	r3, r2
 80033b4:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033ba:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	220f      	movs	r2, #15
 80033c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	fa92 f2a2 	rbit	r2, r2
 80033cc:	60fa      	str	r2, [r7, #12]
  return result;
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	40d3      	lsrs	r3, r2
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <HAL_RCC_GetSysClockFreq+0xcc>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e8:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	e004      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	623b      	str	r3, [r7, #32]
      break;
 8003408:	e002      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc4>)
 800340c:	623b      	str	r3, [r7, #32]
      break;
 800340e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003410:	6a3b      	ldr	r3, [r7, #32]
}
 8003412:	4618      	mov	r0, r3
 8003414:	372c      	adds	r7, #44	; 0x2c
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	007a1200 	.word	0x007a1200
 8003428:	080080b4 	.word	0x080080b4
 800342c:	080080c4 	.word	0x080080c4
 8003430:	003d0900 	.word	0x003d0900

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003452:	f7ff ffef 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003456:	4601      	mov	r1, r0
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003460:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003464:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	fa92 f2a2 	rbit	r2, r2
 800346c:	603a      	str	r2, [r7, #0]
  return result;
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	fab2 f282 	clz	r2, r2
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	40d3      	lsrs	r3, r2
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <HAL_RCC_GetPCLK1Freq+0x40>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	080080ac 	.word	0x080080ac

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003496:	f7ff ffcd 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800349a:	4601      	mov	r1, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	fa92 f2a2 	rbit	r2, r2
 80034b0:	603a      	str	r2, [r7, #0]
  return result;
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	40d3      	lsrs	r3, r2
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	080080ac 	.word	0x080080ac

080034d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b092      	sub	sp, #72	; 0x48
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80d4 	beq.w	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f8:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10e      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	61d3      	str	r3, [r2, #28]
 8003510:	4b48      	ldr	r3, [pc, #288]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b45      	ldr	r3, [pc, #276]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b42      	ldr	r3, [pc, #264]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a41      	ldr	r2, [pc, #260]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe fba1 	bl	8001c80 <HAL_GetTick>
 800353e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe fb9d 	bl	8001c80 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b64      	cmp	r3, #100	; 0x64
 800354e:	d901      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e12d      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b38      	ldr	r3, [pc, #224]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003568:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800356a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8084 	beq.w	800367a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800357c:	429a      	cmp	r2, r3
 800357e:	d07c      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003580:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	461a      	mov	r2, r3
 80035aa:	2301      	movs	r3, #1
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	461a      	mov	r2, r3
 80035ce:	2300      	movs	r3, #0
 80035d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035d2:	4a18      	ldr	r2, [pc, #96]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d04b      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe fb4d 	bl	8001c80 <HAL_GetTick>
 80035e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe fb49 	bl	8001c80 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0d7      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003600:	2302      	movs	r3, #2
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	2302      	movs	r3, #2
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	61fb      	str	r3, [r7, #28]
  return result;
 8003618:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d108      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800362e:	4b01      	ldr	r3, [pc, #4]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	e00d      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003634:	40021000 	.word	0x40021000
 8003638:	40007000 	.word	0x40007000
 800363c:	10908100 	.word	0x10908100
 8003640:	2302      	movs	r3, #2
 8003642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2202      	movs	r2, #2
 8003652:	613a      	str	r2, [r7, #16]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	fa92 f2a2 	rbit	r2, r2
 800365a:	60fa      	str	r2, [r7, #12]
  return result;
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	fab2 f282 	clz	r2, r2
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f002 021f 	and.w	r2, r2, #31
 800366e:	2101      	movs	r1, #1
 8003670:	fa01 f202 	lsl.w	r2, r1, r2
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0b7      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	494c      	ldr	r1, [pc, #304]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800368c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	4a47      	ldr	r2, [pc, #284]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f023 0203 	bic.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	493f      	ldr	r1, [pc, #252]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4938      	ldr	r1, [pc, #224]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4930      	ldr	r1, [pc, #192]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003706:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f023 0210 	bic.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4929      	ldr	r1, [pc, #164]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	4921      	ldr	r1, [pc, #132]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f023 0220 	bic.w	r2, r3, #32
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	491a      	ldr	r1, [pc, #104]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4912      	ldr	r1, [pc, #72]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	490b      	ldr	r1, [pc, #44]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3748      	adds	r7, #72	; 0x48
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e09d      	b.n	800390a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037de:	d009      	beq.n	80037f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	61da      	str	r2, [r3, #28]
 80037e6:	e005      	b.n	80037f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd feec 	bl	80015ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003834:	d902      	bls.n	800383c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e002      	b.n	8003842 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800383c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003840:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800384a:	d007      	beq.n	800385c <HAL_SPI_Init+0xa0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003854:	d002      	beq.n	800385c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	ea42 0103 	orr.w	r1, r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0204 	and.w	r2, r3, #4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038d8:	ea42 0103 	orr.w	r1, r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_SPI_Transmit+0x22>
 8003930:	2302      	movs	r3, #2
 8003932:	e158      	b.n	8003be6 <HAL_SPI_Transmit+0x2d4>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800393c:	f7fe f9a0 	bl	8001c80 <HAL_GetTick>
 8003940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d002      	beq.n	8003958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003952:	2302      	movs	r3, #2
 8003954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003956:	e13d      	b.n	8003bd4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x52>
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003968:	e134      	b.n	8003bd4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2203      	movs	r2, #3
 800396e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b4:	d10f      	bne.n	80039d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d007      	beq.n	80039f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039fc:	d94b      	bls.n	8003a96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_Transmit+0xfa>
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d13e      	bne.n	8003a8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a30:	e02b      	b.n	8003a8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d112      	bne.n	8003a66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	881a      	ldrh	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	1c9a      	adds	r2, r3, #2
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a64:	e011      	b.n	8003a8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a66:	f7fe f90b 	bl	8001c80 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d803      	bhi.n	8003a7e <HAL_SPI_Transmit+0x16c>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d102      	bne.n	8003a84 <HAL_SPI_Transmit+0x172>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a88:	e0a4      	b.n	8003bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ce      	bne.n	8003a32 <HAL_SPI_Transmit+0x120>
 8003a94:	e07c      	b.n	8003b90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SPI_Transmit+0x192>
 8003a9e:	8afb      	ldrh	r3, [r7, #22]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d170      	bne.n	8003b86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d912      	bls.n	8003ad4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b02      	subs	r3, #2
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ad2:	e058      	b.n	8003b86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003afa:	e044      	b.n	8003b86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d12b      	bne.n	8003b62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d912      	bls.n	8003b3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	1c9a      	adds	r2, r3, #2
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b02      	subs	r3, #2
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b38:	e025      	b.n	8003b86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b60:	e011      	b.n	8003b86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b62:	f7fe f88d 	bl	8001c80 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d803      	bhi.n	8003b7a <HAL_SPI_Transmit+0x268>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d102      	bne.n	8003b80 <HAL_SPI_Transmit+0x26e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b84:	e026      	b.n	8003bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1b5      	bne.n	8003afc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fb5b 	bl	8004250 <SPI_EndRxTxTransaction>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e000      	b.n	8003bd4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b08a      	sub	sp, #40	; 0x28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x26>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e1fb      	b.n	800400c <HAL_SPI_TransmitReceive+0x41e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1c:	f7fe f830 	bl	8001c80 <HAL_GetTick>
 8003c20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c38:	7efb      	ldrb	r3, [r7, #27]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d00e      	beq.n	8003c5c <HAL_SPI_TransmitReceive+0x6e>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c44:	d106      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x66>
 8003c4e:	7efb      	ldrb	r3, [r7, #27]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d003      	beq.n	8003c5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c5a:	e1cd      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_SPI_TransmitReceive+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_SPI_TransmitReceive+0x80>
 8003c68:	887b      	ldrh	r3, [r7, #2]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c74:	e1c0      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d003      	beq.n	8003c8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2205      	movs	r2, #5
 8003c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	887a      	ldrh	r2, [r7, #2]
 8003c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	887a      	ldrh	r2, [r7, #2]
 8003ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ccc:	d802      	bhi.n	8003cd4 <HAL_SPI_TransmitReceive+0xe6>
 8003cce:	8a3b      	ldrh	r3, [r7, #16]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d908      	bls.n	8003ce6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	e007      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cf4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d007      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d1c:	d97c      	bls.n	8003e18 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x13e>
 8003d26:	8a7b      	ldrh	r3, [r7, #18]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d169      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d50:	e056      	b.n	8003e00 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d11b      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x1aa>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x1aa>
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d113      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d11c      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x1f2>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003de0:	f7fd ff4e 	bl	8001c80 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d807      	bhi.n	8003e00 <HAL_SPI_TransmitReceive+0x212>
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d003      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003dfe:	e0fb      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1a3      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x164>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d19d      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x164>
 8003e16:	e0df      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x23a>
 8003e20:	8a7b      	ldrh	r3, [r7, #18]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	f040 80cb 	bne.w	8003fbe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d912      	bls.n	8003e58 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b02      	subs	r3, #2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e56:	e0b2      	b.n	8003fbe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7e:	e09e      	b.n	8003fbe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d134      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x30a>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02f      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x30a>
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d12c      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d912      	bls.n	8003ece <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	881a      	ldrh	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	1c9a      	adds	r2, r3, #2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b02      	subs	r3, #2
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ecc:	e012      	b.n	8003ef4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d148      	bne.n	8003f98 <HAL_SPI_TransmitReceive+0x3aa>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d042      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d923      	bls.n	8003f66 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b02      	subs	r3, #2
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d81f      	bhi.n	8003f94 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	e016      	b.n	8003f94 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f103 020c 	add.w	r2, r3, #12
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	7812      	ldrb	r2, [r2, #0]
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f94:	2301      	movs	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f98:	f7fd fe72 	bl	8001c80 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d803      	bhi.n	8003fb0 <HAL_SPI_TransmitReceive+0x3c2>
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d102      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x3c8>
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003fbc:	e01c      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f47f af5b 	bne.w	8003e80 <HAL_SPI_TransmitReceive+0x292>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f47f af54 	bne.w	8003e80 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f937 	bl	8004250 <SPI_EndRxTxTransaction>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60
 8003ff4:	e000      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ff6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800400c:	4618      	mov	r0, r3
 800400e:	3728      	adds	r7, #40	; 0x28
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004024:	f7fd fe2c 	bl	8001c80 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4413      	add	r3, r2
 8004032:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004034:	f7fd fe24 	bl	8001c80 <HAL_GetTick>
 8004038:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800403a:	4b39      	ldr	r3, [pc, #228]	; (8004120 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	0d1b      	lsrs	r3, r3, #20
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800404a:	e054      	b.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d050      	beq.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004054:	f7fd fe14 	bl	8001c80 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d902      	bls.n	800406a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d13d      	bne.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004082:	d111      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	d004      	beq.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d107      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b0:	d10f      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e017      	b.n	8004116 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	429a      	cmp	r2, r3
 8004112:	d19b      	bne.n	800404c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004136:	f7fd fda3 	bl	8001c80 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4413      	add	r3, r2
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004146:	f7fd fd9b 	bl	8001c80 <HAL_GetTick>
 800414a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004154:	4b3d      	ldr	r3, [pc, #244]	; (800424c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00da      	lsls	r2, r3, #3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	0d1b      	lsrs	r3, r3, #20
 8004164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800416c:	e060      	b.n	8004230 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004174:	d107      	bne.n	8004186 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004184:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d050      	beq.n	8004230 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800418e:	f7fd fd77 	bl	8001c80 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	429a      	cmp	r2, r3
 800419c:	d902      	bls.n	80041a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d13d      	bne.n	8004220 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041bc:	d111      	bne.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c6:	d004      	beq.n	80041d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d0:	d107      	bne.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ea:	d10f      	bne.n	800420c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e010      	b.n	8004242 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3b01      	subs	r3, #1
 800422e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d196      	bne.n	800416e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000000 	.word	0x20000000

08004250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff ff5b 	bl	8004124 <SPI_WaitFifoStateUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e027      	b.n	80042d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fec0 	bl	8004014 <SPI_WaitFlagStateUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e014      	b.n	80042d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff ff34 	bl	8004124 <SPI_WaitFifoStateUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c6:	f043 0220 	orr.w	r2, r3, #32
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e000      	b.n	80042d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e041      	b.n	8004372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd fa22 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fa0e 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e041      	b.n	8004418 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d01d      	beq.n	80043e2 <HAL_TIM_Base_Start+0x66>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_TIM_Base_Start+0xa8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_TIM_Base_Start+0x66>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_TIM_Base_Start+0xac>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_TIM_Base_Start+0x66>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_TIM_Base_Start+0xb0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_TIM_Base_Start+0x66>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_TIM_Base_Start+0xb4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_TIM_Base_Start+0x66>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIM_Base_Start+0xb8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_TIM_Base_Start+0x66>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_TIM_Base_Start+0xbc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d111      	bne.n	8004406 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d010      	beq.n	8004416 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	e007      	b.n	8004416 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40001800 	.word	0x40001800
 8004434:	40014000 	.word	0x40014000
 8004438:	40015c00 	.word	0x40015c00

0800443c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e041      	b.n	80044d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f839 	bl	80044da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f000 f95e 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_TIM_OC_Start+0x24>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e022      	b.n	800455a <HAL_TIM_OC_Start+0x6a>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d109      	bne.n	800452e <HAL_TIM_OC_Start+0x3e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	bf14      	ite	ne
 8004526:	2301      	movne	r3, #1
 8004528:	2300      	moveq	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e015      	b.n	800455a <HAL_TIM_OC_Start+0x6a>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d109      	bne.n	8004548 <HAL_TIM_OC_Start+0x58>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e008      	b.n	800455a <HAL_TIM_OC_Start+0x6a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07c      	b.n	800465c <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_TIM_OC_Start+0x82>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	e013      	b.n	800459a <HAL_TIM_OC_Start+0xaa>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d104      	bne.n	8004582 <HAL_TIM_OC_Start+0x92>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004580:	e00b      	b.n	800459a <HAL_TIM_OC_Start+0xaa>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d104      	bne.n	8004592 <HAL_TIM_OC_Start+0xa2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004590:	e003      	b.n	800459a <HAL_TIM_OC_Start+0xaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fabd 	bl	8004b22 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <HAL_TIM_OC_Start+0x174>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d009      	beq.n	80045c6 <HAL_TIM_OC_Start+0xd6>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <HAL_TIM_OC_Start+0x178>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <HAL_TIM_OC_Start+0xd6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2a      	ldr	r2, [pc, #168]	; (800466c <HAL_TIM_OC_Start+0x17c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_OC_Start+0xda>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_TIM_OC_Start+0xdc>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d01d      	beq.n	8004626 <HAL_TIM_OC_Start+0x136>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <HAL_TIM_OC_Start+0x180>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d018      	beq.n	8004626 <HAL_TIM_OC_Start+0x136>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_TIM_OC_Start+0x184>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_TIM_OC_Start+0x136>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <HAL_TIM_OC_Start+0x188>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_TIM_OC_Start+0x136>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1b      	ldr	r2, [pc, #108]	; (800467c <HAL_TIM_OC_Start+0x18c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_TIM_OC_Start+0x136>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <HAL_TIM_OC_Start+0x174>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_TIM_OC_Start+0x136>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a17      	ldr	r2, [pc, #92]	; (8004680 <HAL_TIM_OC_Start+0x190>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d111      	bne.n	800464a <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b06      	cmp	r3, #6
 8004636:	d010      	beq.n	800465a <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	e007      	b.n	800465a <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40001800 	.word	0x40001800
 8004680:	40015c00 	.word	0x40015c00

08004684 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800469e:	2302      	movs	r3, #2
 80046a0:	e048      	b.n	8004734 <HAL_TIM_OC_ConfigChannel+0xb0>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	d839      	bhi.n	8004724 <HAL_TIM_OC_ConfigChannel+0xa0>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	08004725 	.word	0x08004725
 80046c0:	08004725 	.word	0x08004725
 80046c4:	08004725 	.word	0x08004725
 80046c8:	080046fb 	.word	0x080046fb
 80046cc:	08004725 	.word	0x08004725
 80046d0:	08004725 	.word	0x08004725
 80046d4:	08004725 	.word	0x08004725
 80046d8:	08004709 	.word	0x08004709
 80046dc:	08004725 	.word	0x08004725
 80046e0:	08004725 	.word	0x08004725
 80046e4:	08004725 	.word	0x08004725
 80046e8:	08004717 	.word	0x08004717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f8bc 	bl	8004870 <TIM_OC1_SetConfig>
      break;
 80046f8:	e017      	b.n	800472a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f92f 	bl	8004964 <TIM_OC2_SetConfig>
      break;
 8004706:	e010      	b.n	800472a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f98a 	bl	8004a28 <TIM_OC3_SetConfig>
      break;
 8004714:	e009      	b.n	800472a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f9c1 	bl	8004aa4 <TIM_OC4_SetConfig>
      break;
 8004722:	e002      	b.n	800472a <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	75fb      	strb	r3, [r7, #23]
      break;
 8004728:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d00f      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <TIM_Base_SetConfig+0x10c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00b      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3b      	ldr	r2, [pc, #236]	; (800484c <TIM_Base_SetConfig+0x110>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3a      	ldr	r2, [pc, #232]	; (8004850 <TIM_Base_SetConfig+0x114>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a39      	ldr	r2, [pc, #228]	; (8004854 <TIM_Base_SetConfig+0x118>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d108      	bne.n	8004786 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d027      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <TIM_Base_SetConfig+0x10c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d023      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2c      	ldr	r2, [pc, #176]	; (800484c <TIM_Base_SetConfig+0x110>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01f      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2b      	ldr	r2, [pc, #172]	; (8004850 <TIM_Base_SetConfig+0x114>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01b      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2b      	ldr	r2, [pc, #172]	; (8004858 <TIM_Base_SetConfig+0x11c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d017      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	; (800485c <TIM_Base_SetConfig+0x120>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a29      	ldr	r2, [pc, #164]	; (8004860 <TIM_Base_SetConfig+0x124>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00f      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a28      	ldr	r2, [pc, #160]	; (8004864 <TIM_Base_SetConfig+0x128>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <TIM_Base_SetConfig+0x12c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <TIM_Base_SetConfig+0x130>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_Base_SetConfig+0xa2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <TIM_Base_SetConfig+0x118>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a13      	ldr	r2, [pc, #76]	; (8004864 <TIM_Base_SetConfig+0x128>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0xf0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <TIM_Base_SetConfig+0x12c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0xf0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a11      	ldr	r2, [pc, #68]	; (800486c <TIM_Base_SetConfig+0x130>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	615a      	str	r2, [r3, #20]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40000c00 	.word	0x40000c00
 8004854:	40015c00 	.word	0x40015c00
 8004858:	40001800 	.word	0x40001800
 800485c:	40001c00 	.word	0x40001c00
 8004860:	40002000 	.word	0x40002000
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0201 	bic.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f023 0302 	bic.w	r3, r3, #2
 80048b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a24      	ldr	r2, [pc, #144]	; (8004958 <TIM_OC1_SetConfig+0xe8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_OC1_SetConfig+0x6c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a23      	ldr	r2, [pc, #140]	; (800495c <TIM_OC1_SetConfig+0xec>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC1_SetConfig+0x6c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a22      	ldr	r2, [pc, #136]	; (8004960 <TIM_OC1_SetConfig+0xf0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10c      	bne.n	80048f6 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0308 	bic.w	r3, r3, #8
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a17      	ldr	r2, [pc, #92]	; (8004958 <TIM_OC1_SetConfig+0xe8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_OC1_SetConfig+0x9e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a16      	ldr	r2, [pc, #88]	; (800495c <TIM_OC1_SetConfig+0xec>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_OC1_SetConfig+0x9e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <TIM_OC1_SetConfig+0xf0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f023 0320 	bic.w	r3, r3, #32
 80049ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <TIM_OC2_SetConfig+0xb8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_OC2_SetConfig+0x70>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <TIM_OC2_SetConfig+0xbc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_OC2_SetConfig+0x70>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <TIM_OC2_SetConfig+0xc0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10f      	bne.n	80049f4 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049da:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800

08004a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	621a      	str	r2, [r3, #32]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	031b      	lsls	r3, r3, #12
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	2201      	movs	r2, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	401a      	ands	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	621a      	str	r2, [r3, #32]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e03d      	b.n	8004c04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e040      	b.n	8004ca4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc fe56 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2224      	movs	r2, #36	; 0x24
 8004c3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f8c0 	bl	8004dd4 <UART_SetConfig>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e022      	b.n	8004ca4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa2e 	bl	80050c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fab5 	bl	800520c <UART_CheckIdleState>
 8004ca2:	4603      	mov	r3, r0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	f040 8082 	bne.w	8004dca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_UART_Transmit+0x26>
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e07a      	b.n	8004dcc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_UART_Transmit+0x38>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e073      	b.n	8004dcc <HAL_UART_Transmit+0x120>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2221      	movs	r2, #33	; 0x21
 8004cf8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cfa:	f7fc ffc1 	bl	8001c80 <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d18:	d108      	bne.n	8004d2c <HAL_UART_Transmit+0x80>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e003      	b.n	8004d34 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d3c:	e02d      	b.n	8004d9a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 faa8 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e039      	b.n	8004dcc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	881a      	ldrh	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	3302      	adds	r3, #2
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	e008      	b.n	8004d88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b292      	uxth	r2, r2
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1cb      	bne.n	8004d3e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2140      	movs	r1, #64	; 0x40
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fa74 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e005      	b.n	8004dcc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e02:	f023 030c 	bic.w	r3, r3, #12
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	6979      	ldr	r1, [r7, #20]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a99      	ldr	r2, [pc, #612]	; (80050b4 <UART_SetConfig+0x2e0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d120      	bne.n	8004e96 <UART_SetConfig+0xc2>
 8004e54:	4b98      	ldr	r3, [pc, #608]	; (80050b8 <UART_SetConfig+0x2e4>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d817      	bhi.n	8004e90 <UART_SetConfig+0xbc>
 8004e60:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0x94>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e8b 	.word	0x08004e8b
 8004e74:	08004e7f 	.word	0x08004e7f
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e061      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e05e      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004e84:	2304      	movs	r3, #4
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e05b      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e058      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004e90:	2310      	movs	r3, #16
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e055      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a88      	ldr	r2, [pc, #544]	; (80050bc <UART_SetConfig+0x2e8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d124      	bne.n	8004eea <UART_SetConfig+0x116>
 8004ea0:	4b85      	ldr	r3, [pc, #532]	; (80050b8 <UART_SetConfig+0x2e4>)
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eac:	d011      	beq.n	8004ed2 <UART_SetConfig+0xfe>
 8004eae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eb2:	d817      	bhi.n	8004ee4 <UART_SetConfig+0x110>
 8004eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb8:	d011      	beq.n	8004ede <UART_SetConfig+0x10a>
 8004eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ebe:	d811      	bhi.n	8004ee4 <UART_SetConfig+0x110>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <UART_SetConfig+0xf8>
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec8:	d006      	beq.n	8004ed8 <UART_SetConfig+0x104>
 8004eca:	e00b      	b.n	8004ee4 <UART_SetConfig+0x110>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e037      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e034      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e031      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e02e      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e02b      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a74      	ldr	r2, [pc, #464]	; (80050c0 <UART_SetConfig+0x2ec>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d124      	bne.n	8004f3e <UART_SetConfig+0x16a>
 8004ef4:	4b70      	ldr	r3, [pc, #448]	; (80050b8 <UART_SetConfig+0x2e4>)
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004efc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f00:	d011      	beq.n	8004f26 <UART_SetConfig+0x152>
 8004f02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f06:	d817      	bhi.n	8004f38 <UART_SetConfig+0x164>
 8004f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f0c:	d011      	beq.n	8004f32 <UART_SetConfig+0x15e>
 8004f0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f12:	d811      	bhi.n	8004f38 <UART_SetConfig+0x164>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <UART_SetConfig+0x14c>
 8004f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f1c:	d006      	beq.n	8004f2c <UART_SetConfig+0x158>
 8004f1e:	e00b      	b.n	8004f38 <UART_SetConfig+0x164>
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e00d      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e00a      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e007      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004f32:	2308      	movs	r3, #8
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e004      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e001      	b.n	8004f42 <UART_SetConfig+0x16e>
 8004f3e:	2310      	movs	r3, #16
 8004f40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4a:	d15b      	bne.n	8005004 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8004f4c:	7ffb      	ldrb	r3, [r7, #31]
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d827      	bhi.n	8004fa2 <UART_SetConfig+0x1ce>
 8004f52:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0x184>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	08004fa3 	.word	0x08004fa3
 8004f68:	08004f93 	.word	0x08004f93
 8004f6c:	08004fa3 	.word	0x08004fa3
 8004f70:	08004fa3 	.word	0x08004fa3
 8004f74:	08004fa3 	.word	0x08004fa3
 8004f78:	08004f9b 	.word	0x08004f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe fa66 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004f80:	61b8      	str	r0, [r7, #24]
        break;
 8004f82:	e013      	b.n	8004fac <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f84:	f7fe fa84 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8004f88:	61b8      	str	r0, [r7, #24]
        break;
 8004f8a:	e00f      	b.n	8004fac <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f8c:	4b4d      	ldr	r3, [pc, #308]	; (80050c4 <UART_SetConfig+0x2f0>)
 8004f8e:	61bb      	str	r3, [r7, #24]
        break;
 8004f90:	e00c      	b.n	8004fac <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f92:	f7fe f9e5 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8004f96:	61b8      	str	r0, [r7, #24]
        break;
 8004f98:	e008      	b.n	8004fac <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9e:	61bb      	str	r3, [r7, #24]
        break;
 8004fa0:	e004      	b.n	8004fac <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8004faa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d074      	beq.n	800509c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	005a      	lsls	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	441a      	add	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	d916      	bls.n	8004ffe <UART_SetConfig+0x22a>
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d212      	bcs.n	8004ffe <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f023 030f 	bic.w	r3, r3, #15
 8004fe0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	89fb      	ldrh	r3, [r7, #14]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	89fa      	ldrh	r2, [r7, #14]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	e04e      	b.n	800509c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	77bb      	strb	r3, [r7, #30]
 8005002:	e04b      	b.n	800509c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005004:	7ffb      	ldrb	r3, [r7, #31]
 8005006:	2b08      	cmp	r3, #8
 8005008:	d827      	bhi.n	800505a <UART_SetConfig+0x286>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x23c>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005035 	.word	0x08005035
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005045 	.word	0x08005045
 800501c:	0800505b 	.word	0x0800505b
 8005020:	0800504b 	.word	0x0800504b
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800505b 	.word	0x0800505b
 800502c:	0800505b 	.word	0x0800505b
 8005030:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005034:	f7fe fa0a 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8005038:	61b8      	str	r0, [r7, #24]
        break;
 800503a:	e013      	b.n	8005064 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7fe fa28 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8005040:	61b8      	str	r0, [r7, #24]
        break;
 8005042:	e00f      	b.n	8005064 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <UART_SetConfig+0x2f0>)
 8005046:	61bb      	str	r3, [r7, #24]
        break;
 8005048:	e00c      	b.n	8005064 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fe f989 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800504e:	61b8      	str	r0, [r7, #24]
        break;
 8005050:	e008      	b.n	8005064 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005056:	61bb      	str	r3, [r7, #24]
        break;
 8005058:	e004      	b.n	8005064 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	77bb      	strb	r3, [r7, #30]
        break;
 8005062:	bf00      	nop
    }

    if (pclk != 0U)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	085a      	lsrs	r2, r3, #1
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b0f      	cmp	r3, #15
 8005084:	d908      	bls.n	8005098 <UART_SetConfig+0x2c4>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d204      	bcs.n	8005098 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e001      	b.n	800509c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40013800 	.word	0x40013800
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40004400 	.word	0x40004400
 80050c0:	40004800 	.word	0x40004800
 80050c4:	007a1200 	.word	0x007a1200

080050c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c6:	d10a      	bne.n	80051de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800521c:	f7fc fd30 	bl	8001c80 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d10e      	bne.n	800524e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f82d 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e023      	b.n	8005296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b04      	cmp	r3, #4
 800525a:	d10e      	bne.n	800527a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f817 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e00d      	b.n	8005296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b09c      	sub	sp, #112	; 0x70
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	e0a5      	b.n	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	f000 80a1 	beq.w	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fc fce1 	bl	8001c80 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80052ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d13e      	bne.n	800534e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052e4:	667b      	str	r3, [r7, #100]	; 0x64
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e6      	bne.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	663b      	str	r3, [r7, #96]	; 0x60
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005322:	64ba      	str	r2, [r7, #72]	; 0x48
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e067      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d04f      	beq.n	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536a:	d147      	bne.n	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005374:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800538a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
 8005396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800539a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	613b      	str	r3, [r7, #16]
   return(result);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053c8:	623a      	str	r2, [r7, #32]
 80053ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	69f9      	ldr	r1, [r7, #28]
 80053ce:	6a3a      	ldr	r2, [r7, #32]
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e5      	bne.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e010      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4013      	ands	r3, r2
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	429a      	cmp	r2, r3
 8005418:	f43f af4a 	beq.w	80052b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3770      	adds	r7, #112	; 0x70
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <__errno>:
 8005428:	4b01      	ldr	r3, [pc, #4]	; (8005430 <__errno+0x8>)
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	2000000c 	.word	0x2000000c

08005434 <__libc_init_array>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4d0d      	ldr	r5, [pc, #52]	; (800546c <__libc_init_array+0x38>)
 8005438:	4c0d      	ldr	r4, [pc, #52]	; (8005470 <__libc_init_array+0x3c>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	2600      	movs	r6, #0
 8005440:	42a6      	cmp	r6, r4
 8005442:	d109      	bne.n	8005458 <__libc_init_array+0x24>
 8005444:	4d0b      	ldr	r5, [pc, #44]	; (8005474 <__libc_init_array+0x40>)
 8005446:	4c0c      	ldr	r4, [pc, #48]	; (8005478 <__libc_init_array+0x44>)
 8005448:	f002 fddc 	bl	8008004 <_init>
 800544c:	1b64      	subs	r4, r4, r5
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	2600      	movs	r6, #0
 8005452:	42a6      	cmp	r6, r4
 8005454:	d105      	bne.n	8005462 <__libc_init_array+0x2e>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	f855 3b04 	ldr.w	r3, [r5], #4
 800545c:	4798      	blx	r3
 800545e:	3601      	adds	r6, #1
 8005460:	e7ee      	b.n	8005440 <__libc_init_array+0xc>
 8005462:	f855 3b04 	ldr.w	r3, [r5], #4
 8005466:	4798      	blx	r3
 8005468:	3601      	adds	r6, #1
 800546a:	e7f2      	b.n	8005452 <__libc_init_array+0x1e>
 800546c:	080084b4 	.word	0x080084b4
 8005470:	080084b4 	.word	0x080084b4
 8005474:	080084b4 	.word	0x080084b4
 8005478:	080084b8 	.word	0x080084b8

0800547c <memset>:
 800547c:	4402      	add	r2, r0
 800547e:	4603      	mov	r3, r0
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	f803 1b01 	strb.w	r1, [r3], #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <__cvt>:
 800548c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005490:	ec55 4b10 	vmov	r4, r5, d0
 8005494:	2d00      	cmp	r5, #0
 8005496:	460e      	mov	r6, r1
 8005498:	4619      	mov	r1, r3
 800549a:	462b      	mov	r3, r5
 800549c:	bfbb      	ittet	lt
 800549e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054a2:	461d      	movlt	r5, r3
 80054a4:	2300      	movge	r3, #0
 80054a6:	232d      	movlt	r3, #45	; 0x2d
 80054a8:	700b      	strb	r3, [r1, #0]
 80054aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054b0:	4691      	mov	r9, r2
 80054b2:	f023 0820 	bic.w	r8, r3, #32
 80054b6:	bfbc      	itt	lt
 80054b8:	4622      	movlt	r2, r4
 80054ba:	4614      	movlt	r4, r2
 80054bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054c0:	d005      	beq.n	80054ce <__cvt+0x42>
 80054c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054c6:	d100      	bne.n	80054ca <__cvt+0x3e>
 80054c8:	3601      	adds	r6, #1
 80054ca:	2102      	movs	r1, #2
 80054cc:	e000      	b.n	80054d0 <__cvt+0x44>
 80054ce:	2103      	movs	r1, #3
 80054d0:	ab03      	add	r3, sp, #12
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	ab02      	add	r3, sp, #8
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	ec45 4b10 	vmov	d0, r4, r5
 80054dc:	4653      	mov	r3, sl
 80054de:	4632      	mov	r2, r6
 80054e0:	f000 fe2e 	bl	8006140 <_dtoa_r>
 80054e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054e8:	4607      	mov	r7, r0
 80054ea:	d102      	bne.n	80054f2 <__cvt+0x66>
 80054ec:	f019 0f01 	tst.w	r9, #1
 80054f0:	d022      	beq.n	8005538 <__cvt+0xac>
 80054f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054f6:	eb07 0906 	add.w	r9, r7, r6
 80054fa:	d110      	bne.n	800551e <__cvt+0x92>
 80054fc:	783b      	ldrb	r3, [r7, #0]
 80054fe:	2b30      	cmp	r3, #48	; 0x30
 8005500:	d10a      	bne.n	8005518 <__cvt+0x8c>
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f7fb fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800550e:	b918      	cbnz	r0, 8005518 <__cvt+0x8c>
 8005510:	f1c6 0601 	rsb	r6, r6, #1
 8005514:	f8ca 6000 	str.w	r6, [sl]
 8005518:	f8da 3000 	ldr.w	r3, [sl]
 800551c:	4499      	add	r9, r3
 800551e:	2200      	movs	r2, #0
 8005520:	2300      	movs	r3, #0
 8005522:	4620      	mov	r0, r4
 8005524:	4629      	mov	r1, r5
 8005526:	f7fb facf 	bl	8000ac8 <__aeabi_dcmpeq>
 800552a:	b108      	cbz	r0, 8005530 <__cvt+0xa4>
 800552c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005530:	2230      	movs	r2, #48	; 0x30
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	454b      	cmp	r3, r9
 8005536:	d307      	bcc.n	8005548 <__cvt+0xbc>
 8005538:	9b03      	ldr	r3, [sp, #12]
 800553a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800553c:	1bdb      	subs	r3, r3, r7
 800553e:	4638      	mov	r0, r7
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	b004      	add	sp, #16
 8005544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005548:	1c59      	adds	r1, r3, #1
 800554a:	9103      	str	r1, [sp, #12]
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e7f0      	b.n	8005532 <__cvt+0xa6>

08005550 <__exponent>:
 8005550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005552:	4603      	mov	r3, r0
 8005554:	2900      	cmp	r1, #0
 8005556:	bfb8      	it	lt
 8005558:	4249      	neglt	r1, r1
 800555a:	f803 2b02 	strb.w	r2, [r3], #2
 800555e:	bfb4      	ite	lt
 8005560:	222d      	movlt	r2, #45	; 0x2d
 8005562:	222b      	movge	r2, #43	; 0x2b
 8005564:	2909      	cmp	r1, #9
 8005566:	7042      	strb	r2, [r0, #1]
 8005568:	dd2a      	ble.n	80055c0 <__exponent+0x70>
 800556a:	f10d 0407 	add.w	r4, sp, #7
 800556e:	46a4      	mov	ip, r4
 8005570:	270a      	movs	r7, #10
 8005572:	46a6      	mov	lr, r4
 8005574:	460a      	mov	r2, r1
 8005576:	fb91 f6f7 	sdiv	r6, r1, r7
 800557a:	fb07 1516 	mls	r5, r7, r6, r1
 800557e:	3530      	adds	r5, #48	; 0x30
 8005580:	2a63      	cmp	r2, #99	; 0x63
 8005582:	f104 34ff 	add.w	r4, r4, #4294967295
 8005586:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800558a:	4631      	mov	r1, r6
 800558c:	dcf1      	bgt.n	8005572 <__exponent+0x22>
 800558e:	3130      	adds	r1, #48	; 0x30
 8005590:	f1ae 0502 	sub.w	r5, lr, #2
 8005594:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005598:	1c44      	adds	r4, r0, #1
 800559a:	4629      	mov	r1, r5
 800559c:	4561      	cmp	r1, ip
 800559e:	d30a      	bcc.n	80055b6 <__exponent+0x66>
 80055a0:	f10d 0209 	add.w	r2, sp, #9
 80055a4:	eba2 020e 	sub.w	r2, r2, lr
 80055a8:	4565      	cmp	r5, ip
 80055aa:	bf88      	it	hi
 80055ac:	2200      	movhi	r2, #0
 80055ae:	4413      	add	r3, r2
 80055b0:	1a18      	subs	r0, r3, r0
 80055b2:	b003      	add	sp, #12
 80055b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055be:	e7ed      	b.n	800559c <__exponent+0x4c>
 80055c0:	2330      	movs	r3, #48	; 0x30
 80055c2:	3130      	adds	r1, #48	; 0x30
 80055c4:	7083      	strb	r3, [r0, #2]
 80055c6:	70c1      	strb	r1, [r0, #3]
 80055c8:	1d03      	adds	r3, r0, #4
 80055ca:	e7f1      	b.n	80055b0 <__exponent+0x60>

080055cc <_printf_float>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	ed2d 8b02 	vpush	{d8}
 80055d4:	b08d      	sub	sp, #52	; 0x34
 80055d6:	460c      	mov	r4, r1
 80055d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055dc:	4616      	mov	r6, r2
 80055de:	461f      	mov	r7, r3
 80055e0:	4605      	mov	r5, r0
 80055e2:	f001 fd51 	bl	8007088 <_localeconv_r>
 80055e6:	f8d0 a000 	ldr.w	sl, [r0]
 80055ea:	4650      	mov	r0, sl
 80055ec:	f7fa fdf0 	bl	80001d0 <strlen>
 80055f0:	2300      	movs	r3, #0
 80055f2:	930a      	str	r3, [sp, #40]	; 0x28
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	9305      	str	r3, [sp, #20]
 80055f8:	f8d8 3000 	ldr.w	r3, [r8]
 80055fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005600:	3307      	adds	r3, #7
 8005602:	f023 0307 	bic.w	r3, r3, #7
 8005606:	f103 0208 	add.w	r2, r3, #8
 800560a:	f8c8 2000 	str.w	r2, [r8]
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005616:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800561a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800561e:	9307      	str	r3, [sp, #28]
 8005620:	f8cd 8018 	str.w	r8, [sp, #24]
 8005624:	ee08 0a10 	vmov	s16, r0
 8005628:	4b9f      	ldr	r3, [pc, #636]	; (80058a8 <_printf_float+0x2dc>)
 800562a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800562e:	f04f 32ff 	mov.w	r2, #4294967295
 8005632:	f7fb fa7b 	bl	8000b2c <__aeabi_dcmpun>
 8005636:	bb88      	cbnz	r0, 800569c <_printf_float+0xd0>
 8005638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800563c:	4b9a      	ldr	r3, [pc, #616]	; (80058a8 <_printf_float+0x2dc>)
 800563e:	f04f 32ff 	mov.w	r2, #4294967295
 8005642:	f7fb fa55 	bl	8000af0 <__aeabi_dcmple>
 8005646:	bb48      	cbnz	r0, 800569c <_printf_float+0xd0>
 8005648:	2200      	movs	r2, #0
 800564a:	2300      	movs	r3, #0
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	f7fb fa44 	bl	8000adc <__aeabi_dcmplt>
 8005654:	b110      	cbz	r0, 800565c <_printf_float+0x90>
 8005656:	232d      	movs	r3, #45	; 0x2d
 8005658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800565c:	4b93      	ldr	r3, [pc, #588]	; (80058ac <_printf_float+0x2e0>)
 800565e:	4894      	ldr	r0, [pc, #592]	; (80058b0 <_printf_float+0x2e4>)
 8005660:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005664:	bf94      	ite	ls
 8005666:	4698      	movls	r8, r3
 8005668:	4680      	movhi	r8, r0
 800566a:	2303      	movs	r3, #3
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	9b05      	ldr	r3, [sp, #20]
 8005670:	f023 0204 	bic.w	r2, r3, #4
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	f04f 0900 	mov.w	r9, #0
 800567a:	9700      	str	r7, [sp, #0]
 800567c:	4633      	mov	r3, r6
 800567e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f9d8 	bl	8005a38 <_printf_common>
 8005688:	3001      	adds	r0, #1
 800568a:	f040 8090 	bne.w	80057ae <_printf_float+0x1e2>
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	b00d      	add	sp, #52	; 0x34
 8005694:	ecbd 8b02 	vpop	{d8}
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	4642      	mov	r2, r8
 800569e:	464b      	mov	r3, r9
 80056a0:	4640      	mov	r0, r8
 80056a2:	4649      	mov	r1, r9
 80056a4:	f7fb fa42 	bl	8000b2c <__aeabi_dcmpun>
 80056a8:	b140      	cbz	r0, 80056bc <_printf_float+0xf0>
 80056aa:	464b      	mov	r3, r9
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bfbc      	itt	lt
 80056b0:	232d      	movlt	r3, #45	; 0x2d
 80056b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056b6:	487f      	ldr	r0, [pc, #508]	; (80058b4 <_printf_float+0x2e8>)
 80056b8:	4b7f      	ldr	r3, [pc, #508]	; (80058b8 <_printf_float+0x2ec>)
 80056ba:	e7d1      	b.n	8005660 <_printf_float+0x94>
 80056bc:	6863      	ldr	r3, [r4, #4]
 80056be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056c2:	9206      	str	r2, [sp, #24]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	d13f      	bne.n	8005748 <_printf_float+0x17c>
 80056c8:	2306      	movs	r3, #6
 80056ca:	6063      	str	r3, [r4, #4]
 80056cc:	9b05      	ldr	r3, [sp, #20]
 80056ce:	6861      	ldr	r1, [r4, #4]
 80056d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056d4:	2300      	movs	r3, #0
 80056d6:	9303      	str	r3, [sp, #12]
 80056d8:	ab0a      	add	r3, sp, #40	; 0x28
 80056da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056de:	ab09      	add	r3, sp, #36	; 0x24
 80056e0:	ec49 8b10 	vmov	d0, r8, r9
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	6022      	str	r2, [r4, #0]
 80056e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056ec:	4628      	mov	r0, r5
 80056ee:	f7ff fecd 	bl	800548c <__cvt>
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056f6:	2b47      	cmp	r3, #71	; 0x47
 80056f8:	4680      	mov	r8, r0
 80056fa:	d108      	bne.n	800570e <_printf_float+0x142>
 80056fc:	1cc8      	adds	r0, r1, #3
 80056fe:	db02      	blt.n	8005706 <_printf_float+0x13a>
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	4299      	cmp	r1, r3
 8005704:	dd41      	ble.n	800578a <_printf_float+0x1be>
 8005706:	f1ab 0b02 	sub.w	fp, fp, #2
 800570a:	fa5f fb8b 	uxtb.w	fp, fp
 800570e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005712:	d820      	bhi.n	8005756 <_printf_float+0x18a>
 8005714:	3901      	subs	r1, #1
 8005716:	465a      	mov	r2, fp
 8005718:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800571c:	9109      	str	r1, [sp, #36]	; 0x24
 800571e:	f7ff ff17 	bl	8005550 <__exponent>
 8005722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005724:	1813      	adds	r3, r2, r0
 8005726:	2a01      	cmp	r2, #1
 8005728:	4681      	mov	r9, r0
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	dc02      	bgt.n	8005734 <_printf_float+0x168>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	07d2      	lsls	r2, r2, #31
 8005732:	d501      	bpl.n	8005738 <_printf_float+0x16c>
 8005734:	3301      	adds	r3, #1
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800573c:	2b00      	cmp	r3, #0
 800573e:	d09c      	beq.n	800567a <_printf_float+0xae>
 8005740:	232d      	movs	r3, #45	; 0x2d
 8005742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005746:	e798      	b.n	800567a <_printf_float+0xae>
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	2a47      	cmp	r2, #71	; 0x47
 800574c:	d1be      	bne.n	80056cc <_printf_float+0x100>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1bc      	bne.n	80056cc <_printf_float+0x100>
 8005752:	2301      	movs	r3, #1
 8005754:	e7b9      	b.n	80056ca <_printf_float+0xfe>
 8005756:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800575a:	d118      	bne.n	800578e <_printf_float+0x1c2>
 800575c:	2900      	cmp	r1, #0
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	dd0b      	ble.n	800577a <_printf_float+0x1ae>
 8005762:	6121      	str	r1, [r4, #16]
 8005764:	b913      	cbnz	r3, 800576c <_printf_float+0x1a0>
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	07d0      	lsls	r0, r2, #31
 800576a:	d502      	bpl.n	8005772 <_printf_float+0x1a6>
 800576c:	3301      	adds	r3, #1
 800576e:	440b      	add	r3, r1
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	65a1      	str	r1, [r4, #88]	; 0x58
 8005774:	f04f 0900 	mov.w	r9, #0
 8005778:	e7de      	b.n	8005738 <_printf_float+0x16c>
 800577a:	b913      	cbnz	r3, 8005782 <_printf_float+0x1b6>
 800577c:	6822      	ldr	r2, [r4, #0]
 800577e:	07d2      	lsls	r2, r2, #31
 8005780:	d501      	bpl.n	8005786 <_printf_float+0x1ba>
 8005782:	3302      	adds	r3, #2
 8005784:	e7f4      	b.n	8005770 <_printf_float+0x1a4>
 8005786:	2301      	movs	r3, #1
 8005788:	e7f2      	b.n	8005770 <_printf_float+0x1a4>
 800578a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005790:	4299      	cmp	r1, r3
 8005792:	db05      	blt.n	80057a0 <_printf_float+0x1d4>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	6121      	str	r1, [r4, #16]
 8005798:	07d8      	lsls	r0, r3, #31
 800579a:	d5ea      	bpl.n	8005772 <_printf_float+0x1a6>
 800579c:	1c4b      	adds	r3, r1, #1
 800579e:	e7e7      	b.n	8005770 <_printf_float+0x1a4>
 80057a0:	2900      	cmp	r1, #0
 80057a2:	bfd4      	ite	le
 80057a4:	f1c1 0202 	rsble	r2, r1, #2
 80057a8:	2201      	movgt	r2, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	e7e0      	b.n	8005770 <_printf_float+0x1a4>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	055a      	lsls	r2, r3, #21
 80057b2:	d407      	bmi.n	80057c4 <_printf_float+0x1f8>
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	4642      	mov	r2, r8
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d12c      	bne.n	800581c <_printf_float+0x250>
 80057c2:	e764      	b.n	800568e <_printf_float+0xc2>
 80057c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057c8:	f240 80e0 	bls.w	800598c <_printf_float+0x3c0>
 80057cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f7fb f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d034      	beq.n	8005846 <_printf_float+0x27a>
 80057dc:	4a37      	ldr	r2, [pc, #220]	; (80058bc <_printf_float+0x2f0>)
 80057de:	2301      	movs	r3, #1
 80057e0:	4631      	mov	r1, r6
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f af51 	beq.w	800568e <_printf_float+0xc2>
 80057ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f0:	429a      	cmp	r2, r3
 80057f2:	db02      	blt.n	80057fa <_printf_float+0x22e>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07d8      	lsls	r0, r3, #31
 80057f8:	d510      	bpl.n	800581c <_printf_float+0x250>
 80057fa:	ee18 3a10 	vmov	r3, s16
 80057fe:	4652      	mov	r2, sl
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f af41 	beq.w	800568e <_printf_float+0xc2>
 800580c:	f04f 0800 	mov.w	r8, #0
 8005810:	f104 091a 	add.w	r9, r4, #26
 8005814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005816:	3b01      	subs	r3, #1
 8005818:	4543      	cmp	r3, r8
 800581a:	dc09      	bgt.n	8005830 <_printf_float+0x264>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	079b      	lsls	r3, r3, #30
 8005820:	f100 8105 	bmi.w	8005a2e <_printf_float+0x462>
 8005824:	68e0      	ldr	r0, [r4, #12]
 8005826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005828:	4298      	cmp	r0, r3
 800582a:	bfb8      	it	lt
 800582c:	4618      	movlt	r0, r3
 800582e:	e730      	b.n	8005692 <_printf_float+0xc6>
 8005830:	2301      	movs	r3, #1
 8005832:	464a      	mov	r2, r9
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	f43f af27 	beq.w	800568e <_printf_float+0xc2>
 8005840:	f108 0801 	add.w	r8, r8, #1
 8005844:	e7e6      	b.n	8005814 <_printf_float+0x248>
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	dc39      	bgt.n	80058c0 <_printf_float+0x2f4>
 800584c:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <_printf_float+0x2f0>)
 800584e:	2301      	movs	r3, #1
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f af19 	beq.w	800568e <_printf_float+0xc2>
 800585c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005860:	4313      	orrs	r3, r2
 8005862:	d102      	bne.n	800586a <_printf_float+0x29e>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07d9      	lsls	r1, r3, #31
 8005868:	d5d8      	bpl.n	800581c <_printf_float+0x250>
 800586a:	ee18 3a10 	vmov	r3, s16
 800586e:	4652      	mov	r2, sl
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f af09 	beq.w	800568e <_printf_float+0xc2>
 800587c:	f04f 0900 	mov.w	r9, #0
 8005880:	f104 0a1a 	add.w	sl, r4, #26
 8005884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005886:	425b      	negs	r3, r3
 8005888:	454b      	cmp	r3, r9
 800588a:	dc01      	bgt.n	8005890 <_printf_float+0x2c4>
 800588c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588e:	e792      	b.n	80057b6 <_printf_float+0x1ea>
 8005890:	2301      	movs	r3, #1
 8005892:	4652      	mov	r2, sl
 8005894:	4631      	mov	r1, r6
 8005896:	4628      	mov	r0, r5
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	f43f aef7 	beq.w	800568e <_printf_float+0xc2>
 80058a0:	f109 0901 	add.w	r9, r9, #1
 80058a4:	e7ee      	b.n	8005884 <_printf_float+0x2b8>
 80058a6:	bf00      	nop
 80058a8:	7fefffff 	.word	0x7fefffff
 80058ac:	080080d8 	.word	0x080080d8
 80058b0:	080080dc 	.word	0x080080dc
 80058b4:	080080e4 	.word	0x080080e4
 80058b8:	080080e0 	.word	0x080080e0
 80058bc:	080080e8 	.word	0x080080e8
 80058c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c4:	429a      	cmp	r2, r3
 80058c6:	bfa8      	it	ge
 80058c8:	461a      	movge	r2, r3
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	4691      	mov	r9, r2
 80058ce:	dc37      	bgt.n	8005940 <_printf_float+0x374>
 80058d0:	f04f 0b00 	mov.w	fp, #0
 80058d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058d8:	f104 021a 	add.w	r2, r4, #26
 80058dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	eba3 0309 	sub.w	r3, r3, r9
 80058e4:	455b      	cmp	r3, fp
 80058e6:	dc33      	bgt.n	8005950 <_printf_float+0x384>
 80058e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ec:	429a      	cmp	r2, r3
 80058ee:	db3b      	blt.n	8005968 <_printf_float+0x39c>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	07da      	lsls	r2, r3, #31
 80058f4:	d438      	bmi.n	8005968 <_printf_float+0x39c>
 80058f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058f8:	9b05      	ldr	r3, [sp, #20]
 80058fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	eba2 0901 	sub.w	r9, r2, r1
 8005902:	4599      	cmp	r9, r3
 8005904:	bfa8      	it	ge
 8005906:	4699      	movge	r9, r3
 8005908:	f1b9 0f00 	cmp.w	r9, #0
 800590c:	dc35      	bgt.n	800597a <_printf_float+0x3ae>
 800590e:	f04f 0800 	mov.w	r8, #0
 8005912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005916:	f104 0a1a 	add.w	sl, r4, #26
 800591a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	eba3 0309 	sub.w	r3, r3, r9
 8005924:	4543      	cmp	r3, r8
 8005926:	f77f af79 	ble.w	800581c <_printf_float+0x250>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f aeaa 	beq.w	800568e <_printf_float+0xc2>
 800593a:	f108 0801 	add.w	r8, r8, #1
 800593e:	e7ec      	b.n	800591a <_printf_float+0x34e>
 8005940:	4613      	mov	r3, r2
 8005942:	4631      	mov	r1, r6
 8005944:	4642      	mov	r2, r8
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	d1c0      	bne.n	80058d0 <_printf_float+0x304>
 800594e:	e69e      	b.n	800568e <_printf_float+0xc2>
 8005950:	2301      	movs	r3, #1
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	9205      	str	r2, [sp, #20]
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f ae97 	beq.w	800568e <_printf_float+0xc2>
 8005960:	9a05      	ldr	r2, [sp, #20]
 8005962:	f10b 0b01 	add.w	fp, fp, #1
 8005966:	e7b9      	b.n	80058dc <_printf_float+0x310>
 8005968:	ee18 3a10 	vmov	r3, s16
 800596c:	4652      	mov	r2, sl
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	d1be      	bne.n	80058f6 <_printf_float+0x32a>
 8005978:	e689      	b.n	800568e <_printf_float+0xc2>
 800597a:	9a05      	ldr	r2, [sp, #20]
 800597c:	464b      	mov	r3, r9
 800597e:	4442      	add	r2, r8
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	d1c1      	bne.n	800590e <_printf_float+0x342>
 800598a:	e680      	b.n	800568e <_printf_float+0xc2>
 800598c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800598e:	2a01      	cmp	r2, #1
 8005990:	dc01      	bgt.n	8005996 <_printf_float+0x3ca>
 8005992:	07db      	lsls	r3, r3, #31
 8005994:	d538      	bpl.n	8005a08 <_printf_float+0x43c>
 8005996:	2301      	movs	r3, #1
 8005998:	4642      	mov	r2, r8
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	f43f ae74 	beq.w	800568e <_printf_float+0xc2>
 80059a6:	ee18 3a10 	vmov	r3, s16
 80059aa:	4652      	mov	r2, sl
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f ae6b 	beq.w	800568e <_printf_float+0xc2>
 80059b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	f7fb f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80059c4:	b9d8      	cbnz	r0, 80059fe <_printf_float+0x432>
 80059c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c8:	f108 0201 	add.w	r2, r8, #1
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d10e      	bne.n	80059f6 <_printf_float+0x42a>
 80059d8:	e659      	b.n	800568e <_printf_float+0xc2>
 80059da:	2301      	movs	r3, #1
 80059dc:	4652      	mov	r2, sl
 80059de:	4631      	mov	r1, r6
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	f43f ae52 	beq.w	800568e <_printf_float+0xc2>
 80059ea:	f108 0801 	add.w	r8, r8, #1
 80059ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f0:	3b01      	subs	r3, #1
 80059f2:	4543      	cmp	r3, r8
 80059f4:	dcf1      	bgt.n	80059da <_printf_float+0x40e>
 80059f6:	464b      	mov	r3, r9
 80059f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059fc:	e6dc      	b.n	80057b8 <_printf_float+0x1ec>
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	f104 0a1a 	add.w	sl, r4, #26
 8005a06:	e7f2      	b.n	80059ee <_printf_float+0x422>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	e7df      	b.n	80059ce <_printf_float+0x402>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	464a      	mov	r2, r9
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f ae38 	beq.w	800568e <_printf_float+0xc2>
 8005a1e:	f108 0801 	add.w	r8, r8, #1
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	dcf0      	bgt.n	8005a0e <_printf_float+0x442>
 8005a2c:	e6fa      	b.n	8005824 <_printf_float+0x258>
 8005a2e:	f04f 0800 	mov.w	r8, #0
 8005a32:	f104 0919 	add.w	r9, r4, #25
 8005a36:	e7f4      	b.n	8005a22 <_printf_float+0x456>

08005a38 <_printf_common>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	4699      	mov	r9, r3
 8005a40:	688a      	ldr	r2, [r1, #8]
 8005a42:	690b      	ldr	r3, [r1, #16]
 8005a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bfb8      	it	lt
 8005a4c:	4613      	movlt	r3, r2
 8005a4e:	6033      	str	r3, [r6, #0]
 8005a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a54:	4607      	mov	r7, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	b10a      	cbz	r2, 8005a5e <_printf_common+0x26>
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	0699      	lsls	r1, r3, #26
 8005a62:	bf42      	ittt	mi
 8005a64:	6833      	ldrmi	r3, [r6, #0]
 8005a66:	3302      	addmi	r3, #2
 8005a68:	6033      	strmi	r3, [r6, #0]
 8005a6a:	6825      	ldr	r5, [r4, #0]
 8005a6c:	f015 0506 	ands.w	r5, r5, #6
 8005a70:	d106      	bne.n	8005a80 <_printf_common+0x48>
 8005a72:	f104 0a19 	add.w	sl, r4, #25
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	6832      	ldr	r2, [r6, #0]
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	42ab      	cmp	r3, r5
 8005a7e:	dc26      	bgt.n	8005ace <_printf_common+0x96>
 8005a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a84:	1e13      	subs	r3, r2, #0
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	bf18      	it	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	0692      	lsls	r2, r2, #26
 8005a8e:	d42b      	bmi.n	8005ae8 <_printf_common+0xb0>
 8005a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a94:	4649      	mov	r1, r9
 8005a96:	4638      	mov	r0, r7
 8005a98:	47c0      	blx	r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d01e      	beq.n	8005adc <_printf_common+0xa4>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	68e5      	ldr	r5, [r4, #12]
 8005aa2:	6832      	ldr	r2, [r6, #0]
 8005aa4:	f003 0306 	and.w	r3, r3, #6
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	bf08      	it	eq
 8005aac:	1aad      	subeq	r5, r5, r2
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	6922      	ldr	r2, [r4, #16]
 8005ab2:	bf0c      	ite	eq
 8005ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab8:	2500      	movne	r5, #0
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bfc4      	itt	gt
 8005abe:	1a9b      	subgt	r3, r3, r2
 8005ac0:	18ed      	addgt	r5, r5, r3
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	341a      	adds	r4, #26
 8005ac6:	42b5      	cmp	r5, r6
 8005ac8:	d11a      	bne.n	8005b00 <_printf_common+0xc8>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e008      	b.n	8005ae0 <_printf_common+0xa8>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	47c0      	blx	r8
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d103      	bne.n	8005ae4 <_printf_common+0xac>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7c6      	b.n	8005a76 <_printf_common+0x3e>
 8005ae8:	18e1      	adds	r1, r4, r3
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	2030      	movs	r0, #48	; 0x30
 8005aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af2:	4422      	add	r2, r4
 8005af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005afc:	3302      	adds	r3, #2
 8005afe:	e7c7      	b.n	8005a90 <_printf_common+0x58>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4622      	mov	r2, r4
 8005b04:	4649      	mov	r1, r9
 8005b06:	4638      	mov	r0, r7
 8005b08:	47c0      	blx	r8
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d0e6      	beq.n	8005adc <_printf_common+0xa4>
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7d9      	b.n	8005ac6 <_printf_common+0x8e>
	...

08005b14 <_printf_i>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	460c      	mov	r4, r1
 8005b1a:	4691      	mov	r9, r2
 8005b1c:	7e27      	ldrb	r7, [r4, #24]
 8005b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b20:	2f78      	cmp	r7, #120	; 0x78
 8005b22:	4680      	mov	r8, r0
 8005b24:	469a      	mov	sl, r3
 8005b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b2a:	d807      	bhi.n	8005b3c <_printf_i+0x28>
 8005b2c:	2f62      	cmp	r7, #98	; 0x62
 8005b2e:	d80a      	bhi.n	8005b46 <_printf_i+0x32>
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	f000 80d8 	beq.w	8005ce6 <_printf_i+0x1d2>
 8005b36:	2f58      	cmp	r7, #88	; 0x58
 8005b38:	f000 80a3 	beq.w	8005c82 <_printf_i+0x16e>
 8005b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b44:	e03a      	b.n	8005bbc <_printf_i+0xa8>
 8005b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b4a:	2b15      	cmp	r3, #21
 8005b4c:	d8f6      	bhi.n	8005b3c <_printf_i+0x28>
 8005b4e:	a001      	add	r0, pc, #4	; (adr r0, 8005b54 <_printf_i+0x40>)
 8005b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bc1 	.word	0x08005bc1
 8005b5c:	08005b3d 	.word	0x08005b3d
 8005b60:	08005b3d 	.word	0x08005b3d
 8005b64:	08005b3d 	.word	0x08005b3d
 8005b68:	08005b3d 	.word	0x08005b3d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b3d 	.word	0x08005b3d
 8005b74:	08005b3d 	.word	0x08005b3d
 8005b78:	08005b3d 	.word	0x08005b3d
 8005b7c:	08005b3d 	.word	0x08005b3d
 8005b80:	08005ccd 	.word	0x08005ccd
 8005b84:	08005bf1 	.word	0x08005bf1
 8005b88:	08005caf 	.word	0x08005caf
 8005b8c:	08005b3d 	.word	0x08005b3d
 8005b90:	08005b3d 	.word	0x08005b3d
 8005b94:	08005cef 	.word	0x08005cef
 8005b98:	08005b3d 	.word	0x08005b3d
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005b3d 	.word	0x08005b3d
 8005ba4:	08005b3d 	.word	0x08005b3d
 8005ba8:	08005cb7 	.word	0x08005cb7
 8005bac:	680b      	ldr	r3, [r1, #0]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	600a      	str	r2, [r1, #0]
 8005bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0a3      	b.n	8005d08 <_printf_i+0x1f4>
 8005bc0:	6825      	ldr	r5, [r4, #0]
 8005bc2:	6808      	ldr	r0, [r1, #0]
 8005bc4:	062e      	lsls	r6, r5, #24
 8005bc6:	f100 0304 	add.w	r3, r0, #4
 8005bca:	d50a      	bpl.n	8005be2 <_printf_i+0xce>
 8005bcc:	6805      	ldr	r5, [r0, #0]
 8005bce:	600b      	str	r3, [r1, #0]
 8005bd0:	2d00      	cmp	r5, #0
 8005bd2:	da03      	bge.n	8005bdc <_printf_i+0xc8>
 8005bd4:	232d      	movs	r3, #45	; 0x2d
 8005bd6:	426d      	negs	r5, r5
 8005bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bdc:	485e      	ldr	r0, [pc, #376]	; (8005d58 <_printf_i+0x244>)
 8005bde:	230a      	movs	r3, #10
 8005be0:	e019      	b.n	8005c16 <_printf_i+0x102>
 8005be2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005be6:	6805      	ldr	r5, [r0, #0]
 8005be8:	600b      	str	r3, [r1, #0]
 8005bea:	bf18      	it	ne
 8005bec:	b22d      	sxthne	r5, r5
 8005bee:	e7ef      	b.n	8005bd0 <_printf_i+0xbc>
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	6825      	ldr	r5, [r4, #0]
 8005bf4:	1d18      	adds	r0, r3, #4
 8005bf6:	6008      	str	r0, [r1, #0]
 8005bf8:	0628      	lsls	r0, r5, #24
 8005bfa:	d501      	bpl.n	8005c00 <_printf_i+0xec>
 8005bfc:	681d      	ldr	r5, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <_printf_i+0xf2>
 8005c00:	0669      	lsls	r1, r5, #25
 8005c02:	d5fb      	bpl.n	8005bfc <_printf_i+0xe8>
 8005c04:	881d      	ldrh	r5, [r3, #0]
 8005c06:	4854      	ldr	r0, [pc, #336]	; (8005d58 <_printf_i+0x244>)
 8005c08:	2f6f      	cmp	r7, #111	; 0x6f
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2308      	moveq	r3, #8
 8005c0e:	230a      	movne	r3, #10
 8005c10:	2100      	movs	r1, #0
 8005c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c16:	6866      	ldr	r6, [r4, #4]
 8005c18:	60a6      	str	r6, [r4, #8]
 8005c1a:	2e00      	cmp	r6, #0
 8005c1c:	bfa2      	ittt	ge
 8005c1e:	6821      	ldrge	r1, [r4, #0]
 8005c20:	f021 0104 	bicge.w	r1, r1, #4
 8005c24:	6021      	strge	r1, [r4, #0]
 8005c26:	b90d      	cbnz	r5, 8005c2c <_printf_i+0x118>
 8005c28:	2e00      	cmp	r6, #0
 8005c2a:	d04d      	beq.n	8005cc8 <_printf_i+0x1b4>
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c32:	fb03 5711 	mls	r7, r3, r1, r5
 8005c36:	5dc7      	ldrb	r7, [r0, r7]
 8005c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c3c:	462f      	mov	r7, r5
 8005c3e:	42bb      	cmp	r3, r7
 8005c40:	460d      	mov	r5, r1
 8005c42:	d9f4      	bls.n	8005c2e <_printf_i+0x11a>
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d10b      	bne.n	8005c60 <_printf_i+0x14c>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	07df      	lsls	r7, r3, #31
 8005c4c:	d508      	bpl.n	8005c60 <_printf_i+0x14c>
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	6861      	ldr	r1, [r4, #4]
 8005c52:	4299      	cmp	r1, r3
 8005c54:	bfde      	ittt	le
 8005c56:	2330      	movle	r3, #48	; 0x30
 8005c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c60:	1b92      	subs	r2, r2, r6
 8005c62:	6122      	str	r2, [r4, #16]
 8005c64:	f8cd a000 	str.w	sl, [sp]
 8005c68:	464b      	mov	r3, r9
 8005c6a:	aa03      	add	r2, sp, #12
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4640      	mov	r0, r8
 8005c70:	f7ff fee2 	bl	8005a38 <_printf_common>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d14c      	bne.n	8005d12 <_printf_i+0x1fe>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	b004      	add	sp, #16
 8005c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c82:	4835      	ldr	r0, [pc, #212]	; (8005d58 <_printf_i+0x244>)
 8005c84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	680e      	ldr	r6, [r1, #0]
 8005c8c:	061f      	lsls	r7, r3, #24
 8005c8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c92:	600e      	str	r6, [r1, #0]
 8005c94:	d514      	bpl.n	8005cc0 <_printf_i+0x1ac>
 8005c96:	07d9      	lsls	r1, r3, #31
 8005c98:	bf44      	itt	mi
 8005c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c9e:	6023      	strmi	r3, [r4, #0]
 8005ca0:	b91d      	cbnz	r5, 8005caa <_printf_i+0x196>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f023 0320 	bic.w	r3, r3, #32
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	2310      	movs	r3, #16
 8005cac:	e7b0      	b.n	8005c10 <_printf_i+0xfc>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	f043 0320 	orr.w	r3, r3, #32
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	2378      	movs	r3, #120	; 0x78
 8005cb8:	4828      	ldr	r0, [pc, #160]	; (8005d5c <_printf_i+0x248>)
 8005cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cbe:	e7e3      	b.n	8005c88 <_printf_i+0x174>
 8005cc0:	065e      	lsls	r6, r3, #25
 8005cc2:	bf48      	it	mi
 8005cc4:	b2ad      	uxthmi	r5, r5
 8005cc6:	e7e6      	b.n	8005c96 <_printf_i+0x182>
 8005cc8:	4616      	mov	r6, r2
 8005cca:	e7bb      	b.n	8005c44 <_printf_i+0x130>
 8005ccc:	680b      	ldr	r3, [r1, #0]
 8005cce:	6826      	ldr	r6, [r4, #0]
 8005cd0:	6960      	ldr	r0, [r4, #20]
 8005cd2:	1d1d      	adds	r5, r3, #4
 8005cd4:	600d      	str	r5, [r1, #0]
 8005cd6:	0635      	lsls	r5, r6, #24
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0x1cc>
 8005cdc:	6018      	str	r0, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0x1d2>
 8005ce0:	0671      	lsls	r1, r6, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0x1c8>
 8005ce4:	8018      	strh	r0, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	4616      	mov	r6, r2
 8005cec:	e7ba      	b.n	8005c64 <_printf_i+0x150>
 8005cee:	680b      	ldr	r3, [r1, #0]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	600a      	str	r2, [r1, #0]
 8005cf4:	681e      	ldr	r6, [r3, #0]
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7fa fa70 	bl	80001e0 <memchr>
 8005d00:	b108      	cbz	r0, 8005d06 <_printf_i+0x1f2>
 8005d02:	1b80      	subs	r0, r0, r6
 8005d04:	6060      	str	r0, [r4, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d10:	e7a8      	b.n	8005c64 <_printf_i+0x150>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	4632      	mov	r2, r6
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	47d0      	blx	sl
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d0ab      	beq.n	8005c78 <_printf_i+0x164>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	d413      	bmi.n	8005d4e <_printf_i+0x23a>
 8005d26:	68e0      	ldr	r0, [r4, #12]
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	bfb8      	it	lt
 8005d2e:	4618      	movlt	r0, r3
 8005d30:	e7a4      	b.n	8005c7c <_printf_i+0x168>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4632      	mov	r2, r6
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	47d0      	blx	sl
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d09b      	beq.n	8005c78 <_printf_i+0x164>
 8005d40:	3501      	adds	r5, #1
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	9903      	ldr	r1, [sp, #12]
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	dcf2      	bgt.n	8005d32 <_printf_i+0x21e>
 8005d4c:	e7eb      	b.n	8005d26 <_printf_i+0x212>
 8005d4e:	2500      	movs	r5, #0
 8005d50:	f104 0619 	add.w	r6, r4, #25
 8005d54:	e7f5      	b.n	8005d42 <_printf_i+0x22e>
 8005d56:	bf00      	nop
 8005d58:	080080ea 	.word	0x080080ea
 8005d5c:	080080fb 	.word	0x080080fb

08005d60 <iprintf>:
 8005d60:	b40f      	push	{r0, r1, r2, r3}
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <iprintf+0x2c>)
 8005d64:	b513      	push	{r0, r1, r4, lr}
 8005d66:	681c      	ldr	r4, [r3, #0]
 8005d68:	b124      	cbz	r4, 8005d74 <iprintf+0x14>
 8005d6a:	69a3      	ldr	r3, [r4, #24]
 8005d6c:	b913      	cbnz	r3, 8005d74 <iprintf+0x14>
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f001 f8ec 	bl	8006f4c <__sinit>
 8005d74:	ab05      	add	r3, sp, #20
 8005d76:	9a04      	ldr	r2, [sp, #16]
 8005d78:	68a1      	ldr	r1, [r4, #8]
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f001 fe67 	bl	8007a50 <_vfiprintf_r>
 8005d82:	b002      	add	sp, #8
 8005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d88:	b004      	add	sp, #16
 8005d8a:	4770      	bx	lr
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <putchar>:
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <putchar+0x28>)
 8005d92:	b513      	push	{r0, r1, r4, lr}
 8005d94:	681c      	ldr	r4, [r3, #0]
 8005d96:	4601      	mov	r1, r0
 8005d98:	b134      	cbz	r4, 8005da8 <putchar+0x18>
 8005d9a:	69a3      	ldr	r3, [r4, #24]
 8005d9c:	b923      	cbnz	r3, 8005da8 <putchar+0x18>
 8005d9e:	9001      	str	r0, [sp, #4]
 8005da0:	4620      	mov	r0, r4
 8005da2:	f001 f8d3 	bl	8006f4c <__sinit>
 8005da6:	9901      	ldr	r1, [sp, #4]
 8005da8:	68a2      	ldr	r2, [r4, #8]
 8005daa:	4620      	mov	r0, r4
 8005dac:	b002      	add	sp, #8
 8005dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db2:	f001 bf7d 	b.w	8007cb0 <_putc_r>
 8005db6:	bf00      	nop
 8005db8:	2000000c 	.word	0x2000000c

08005dbc <_puts_r>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	460e      	mov	r6, r1
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	b118      	cbz	r0, 8005dcc <_puts_r+0x10>
 8005dc4:	6983      	ldr	r3, [r0, #24]
 8005dc6:	b90b      	cbnz	r3, 8005dcc <_puts_r+0x10>
 8005dc8:	f001 f8c0 	bl	8006f4c <__sinit>
 8005dcc:	69ab      	ldr	r3, [r5, #24]
 8005dce:	68ac      	ldr	r4, [r5, #8]
 8005dd0:	b913      	cbnz	r3, 8005dd8 <_puts_r+0x1c>
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f001 f8ba 	bl	8006f4c <__sinit>
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <_puts_r+0xd0>)
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	d120      	bne.n	8005e20 <_puts_r+0x64>
 8005dde:	686c      	ldr	r4, [r5, #4]
 8005de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005de2:	07db      	lsls	r3, r3, #31
 8005de4:	d405      	bmi.n	8005df2 <_puts_r+0x36>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	0598      	lsls	r0, r3, #22
 8005dea:	d402      	bmi.n	8005df2 <_puts_r+0x36>
 8005dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dee:	f001 f950 	bl	8007092 <__retarget_lock_acquire_recursive>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	0719      	lsls	r1, r3, #28
 8005df6:	d51d      	bpl.n	8005e34 <_puts_r+0x78>
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	b1db      	cbz	r3, 8005e34 <_puts_r+0x78>
 8005dfc:	3e01      	subs	r6, #1
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e04:	3b01      	subs	r3, #1
 8005e06:	60a3      	str	r3, [r4, #8]
 8005e08:	bb39      	cbnz	r1, 8005e5a <_puts_r+0x9e>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da38      	bge.n	8005e80 <_puts_r+0xc4>
 8005e0e:	4622      	mov	r2, r4
 8005e10:	210a      	movs	r1, #10
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f848 	bl	8005ea8 <__swbuf_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d011      	beq.n	8005e40 <_puts_r+0x84>
 8005e1c:	250a      	movs	r5, #10
 8005e1e:	e011      	b.n	8005e44 <_puts_r+0x88>
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <_puts_r+0xd4>)
 8005e22:	429c      	cmp	r4, r3
 8005e24:	d101      	bne.n	8005e2a <_puts_r+0x6e>
 8005e26:	68ac      	ldr	r4, [r5, #8]
 8005e28:	e7da      	b.n	8005de0 <_puts_r+0x24>
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <_puts_r+0xd8>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	bf08      	it	eq
 8005e30:	68ec      	ldreq	r4, [r5, #12]
 8005e32:	e7d5      	b.n	8005de0 <_puts_r+0x24>
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 f888 	bl	8005f4c <__swsetup_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d0dd      	beq.n	8005dfc <_puts_r+0x40>
 8005e40:	f04f 35ff 	mov.w	r5, #4294967295
 8005e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e46:	07da      	lsls	r2, r3, #31
 8005e48:	d405      	bmi.n	8005e56 <_puts_r+0x9a>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	059b      	lsls	r3, r3, #22
 8005e4e:	d402      	bmi.n	8005e56 <_puts_r+0x9a>
 8005e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e52:	f001 f91f 	bl	8007094 <__retarget_lock_release_recursive>
 8005e56:	4628      	mov	r0, r5
 8005e58:	bd70      	pop	{r4, r5, r6, pc}
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da04      	bge.n	8005e68 <_puts_r+0xac>
 8005e5e:	69a2      	ldr	r2, [r4, #24]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	dc06      	bgt.n	8005e72 <_puts_r+0xb6>
 8005e64:	290a      	cmp	r1, #10
 8005e66:	d004      	beq.n	8005e72 <_puts_r+0xb6>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	6022      	str	r2, [r4, #0]
 8005e6e:	7019      	strb	r1, [r3, #0]
 8005e70:	e7c5      	b.n	8005dfe <_puts_r+0x42>
 8005e72:	4622      	mov	r2, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 f817 	bl	8005ea8 <__swbuf_r>
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d1bf      	bne.n	8005dfe <_puts_r+0x42>
 8005e7e:	e7df      	b.n	8005e40 <_puts_r+0x84>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	250a      	movs	r5, #10
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	701d      	strb	r5, [r3, #0]
 8005e8a:	e7db      	b.n	8005e44 <_puts_r+0x88>
 8005e8c:	080081c0 	.word	0x080081c0
 8005e90:	080081e0 	.word	0x080081e0
 8005e94:	080081a0 	.word	0x080081a0

08005e98 <puts>:
 8005e98:	4b02      	ldr	r3, [pc, #8]	; (8005ea4 <puts+0xc>)
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f7ff bf8d 	b.w	8005dbc <_puts_r>
 8005ea2:	bf00      	nop
 8005ea4:	2000000c 	.word	0x2000000c

08005ea8 <__swbuf_r>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	460e      	mov	r6, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b118      	cbz	r0, 8005eba <__swbuf_r+0x12>
 8005eb2:	6983      	ldr	r3, [r0, #24]
 8005eb4:	b90b      	cbnz	r3, 8005eba <__swbuf_r+0x12>
 8005eb6:	f001 f849 	bl	8006f4c <__sinit>
 8005eba:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <__swbuf_r+0x98>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d12b      	bne.n	8005f18 <__swbuf_r+0x70>
 8005ec0:	686c      	ldr	r4, [r5, #4]
 8005ec2:	69a3      	ldr	r3, [r4, #24]
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	071a      	lsls	r2, r3, #28
 8005eca:	d52f      	bpl.n	8005f2c <__swbuf_r+0x84>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	b36b      	cbz	r3, 8005f2c <__swbuf_r+0x84>
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	1ac0      	subs	r0, r0, r3
 8005ed6:	6963      	ldr	r3, [r4, #20]
 8005ed8:	b2f6      	uxtb	r6, r6
 8005eda:	4283      	cmp	r3, r0
 8005edc:	4637      	mov	r7, r6
 8005ede:	dc04      	bgt.n	8005eea <__swbuf_r+0x42>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 ff9e 	bl	8006e24 <_fflush_r>
 8005ee8:	bb30      	cbnz	r0, 8005f38 <__swbuf_r+0x90>
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	60a3      	str	r3, [r4, #8]
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	701e      	strb	r6, [r3, #0]
 8005ef8:	6963      	ldr	r3, [r4, #20]
 8005efa:	3001      	adds	r0, #1
 8005efc:	4283      	cmp	r3, r0
 8005efe:	d004      	beq.n	8005f0a <__swbuf_r+0x62>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d506      	bpl.n	8005f14 <__swbuf_r+0x6c>
 8005f06:	2e0a      	cmp	r6, #10
 8005f08:	d104      	bne.n	8005f14 <__swbuf_r+0x6c>
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 ff89 	bl	8006e24 <_fflush_r>
 8005f12:	b988      	cbnz	r0, 8005f38 <__swbuf_r+0x90>
 8005f14:	4638      	mov	r0, r7
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <__swbuf_r+0x9c>)
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	d101      	bne.n	8005f22 <__swbuf_r+0x7a>
 8005f1e:	68ac      	ldr	r4, [r5, #8]
 8005f20:	e7cf      	b.n	8005ec2 <__swbuf_r+0x1a>
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <__swbuf_r+0xa0>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	bf08      	it	eq
 8005f28:	68ec      	ldreq	r4, [r5, #12]
 8005f2a:	e7ca      	b.n	8005ec2 <__swbuf_r+0x1a>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 f80c 	bl	8005f4c <__swsetup_r>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0cb      	beq.n	8005ed0 <__swbuf_r+0x28>
 8005f38:	f04f 37ff 	mov.w	r7, #4294967295
 8005f3c:	e7ea      	b.n	8005f14 <__swbuf_r+0x6c>
 8005f3e:	bf00      	nop
 8005f40:	080081c0 	.word	0x080081c0
 8005f44:	080081e0 	.word	0x080081e0
 8005f48:	080081a0 	.word	0x080081a0

08005f4c <__swsetup_r>:
 8005f4c:	4b32      	ldr	r3, [pc, #200]	; (8006018 <__swsetup_r+0xcc>)
 8005f4e:	b570      	push	{r4, r5, r6, lr}
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	4606      	mov	r6, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	b125      	cbz	r5, 8005f62 <__swsetup_r+0x16>
 8005f58:	69ab      	ldr	r3, [r5, #24]
 8005f5a:	b913      	cbnz	r3, 8005f62 <__swsetup_r+0x16>
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 fff5 	bl	8006f4c <__sinit>
 8005f62:	4b2e      	ldr	r3, [pc, #184]	; (800601c <__swsetup_r+0xd0>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d10f      	bne.n	8005f88 <__swsetup_r+0x3c>
 8005f68:	686c      	ldr	r4, [r5, #4]
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f70:	0719      	lsls	r1, r3, #28
 8005f72:	d42c      	bmi.n	8005fce <__swsetup_r+0x82>
 8005f74:	06dd      	lsls	r5, r3, #27
 8005f76:	d411      	bmi.n	8005f9c <__swsetup_r+0x50>
 8005f78:	2309      	movs	r3, #9
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	e03e      	b.n	8006006 <__swsetup_r+0xba>
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <__swsetup_r+0xd4>)
 8005f8a:	429c      	cmp	r4, r3
 8005f8c:	d101      	bne.n	8005f92 <__swsetup_r+0x46>
 8005f8e:	68ac      	ldr	r4, [r5, #8]
 8005f90:	e7eb      	b.n	8005f6a <__swsetup_r+0x1e>
 8005f92:	4b24      	ldr	r3, [pc, #144]	; (8006024 <__swsetup_r+0xd8>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	bf08      	it	eq
 8005f98:	68ec      	ldreq	r4, [r5, #12]
 8005f9a:	e7e6      	b.n	8005f6a <__swsetup_r+0x1e>
 8005f9c:	0758      	lsls	r0, r3, #29
 8005f9e:	d512      	bpl.n	8005fc6 <__swsetup_r+0x7a>
 8005fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa2:	b141      	cbz	r1, 8005fb6 <__swsetup_r+0x6a>
 8005fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa8:	4299      	cmp	r1, r3
 8005faa:	d002      	beq.n	8005fb2 <__swsetup_r+0x66>
 8005fac:	4630      	mov	r0, r6
 8005fae:	f001 fc7b 	bl	80078a8 <_free_r>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6063      	str	r3, [r4, #4]
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	b94b      	cbnz	r3, 8005fe6 <__swsetup_r+0x9a>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fdc:	d003      	beq.n	8005fe6 <__swsetup_r+0x9a>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f001 f87d 	bl	80070e0 <__smakebuf_r>
 8005fe6:	89a0      	ldrh	r0, [r4, #12]
 8005fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fec:	f010 0301 	ands.w	r3, r0, #1
 8005ff0:	d00a      	beq.n	8006008 <__swsetup_r+0xbc>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60a3      	str	r3, [r4, #8]
 8005ff6:	6963      	ldr	r3, [r4, #20]
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	61a3      	str	r3, [r4, #24]
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	b943      	cbnz	r3, 8006012 <__swsetup_r+0xc6>
 8006000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006004:	d1ba      	bne.n	8005f7c <__swsetup_r+0x30>
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	0781      	lsls	r1, r0, #30
 800600a:	bf58      	it	pl
 800600c:	6963      	ldrpl	r3, [r4, #20]
 800600e:	60a3      	str	r3, [r4, #8]
 8006010:	e7f4      	b.n	8005ffc <__swsetup_r+0xb0>
 8006012:	2000      	movs	r0, #0
 8006014:	e7f7      	b.n	8006006 <__swsetup_r+0xba>
 8006016:	bf00      	nop
 8006018:	2000000c 	.word	0x2000000c
 800601c:	080081c0 	.word	0x080081c0
 8006020:	080081e0 	.word	0x080081e0
 8006024:	080081a0 	.word	0x080081a0

08006028 <quorem>:
 8006028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	6903      	ldr	r3, [r0, #16]
 800602e:	690c      	ldr	r4, [r1, #16]
 8006030:	42a3      	cmp	r3, r4
 8006032:	4607      	mov	r7, r0
 8006034:	f2c0 8081 	blt.w	800613a <quorem+0x112>
 8006038:	3c01      	subs	r4, #1
 800603a:	f101 0814 	add.w	r8, r1, #20
 800603e:	f100 0514 	add.w	r5, r0, #20
 8006042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800604c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006050:	3301      	adds	r3, #1
 8006052:	429a      	cmp	r2, r3
 8006054:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006058:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800605c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006060:	d331      	bcc.n	80060c6 <quorem+0x9e>
 8006062:	f04f 0e00 	mov.w	lr, #0
 8006066:	4640      	mov	r0, r8
 8006068:	46ac      	mov	ip, r5
 800606a:	46f2      	mov	sl, lr
 800606c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006070:	b293      	uxth	r3, r2
 8006072:	fb06 e303 	mla	r3, r6, r3, lr
 8006076:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800607a:	b29b      	uxth	r3, r3
 800607c:	ebaa 0303 	sub.w	r3, sl, r3
 8006080:	0c12      	lsrs	r2, r2, #16
 8006082:	f8dc a000 	ldr.w	sl, [ip]
 8006086:	fb06 e202 	mla	r2, r6, r2, lr
 800608a:	fa13 f38a 	uxtah	r3, r3, sl
 800608e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006092:	fa1f fa82 	uxth.w	sl, r2
 8006096:	f8dc 2000 	ldr.w	r2, [ip]
 800609a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800609e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060a8:	4581      	cmp	r9, r0
 80060aa:	f84c 3b04 	str.w	r3, [ip], #4
 80060ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060b2:	d2db      	bcs.n	800606c <quorem+0x44>
 80060b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80060b8:	b92b      	cbnz	r3, 80060c6 <quorem+0x9e>
 80060ba:	9b01      	ldr	r3, [sp, #4]
 80060bc:	3b04      	subs	r3, #4
 80060be:	429d      	cmp	r5, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	d32e      	bcc.n	8006122 <quorem+0xfa>
 80060c4:	613c      	str	r4, [r7, #16]
 80060c6:	4638      	mov	r0, r7
 80060c8:	f001 fade 	bl	8007688 <__mcmp>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	db24      	blt.n	800611a <quorem+0xf2>
 80060d0:	3601      	adds	r6, #1
 80060d2:	4628      	mov	r0, r5
 80060d4:	f04f 0c00 	mov.w	ip, #0
 80060d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80060dc:	f8d0 e000 	ldr.w	lr, [r0]
 80060e0:	b293      	uxth	r3, r2
 80060e2:	ebac 0303 	sub.w	r3, ip, r3
 80060e6:	0c12      	lsrs	r2, r2, #16
 80060e8:	fa13 f38e 	uxtah	r3, r3, lr
 80060ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060fa:	45c1      	cmp	r9, r8
 80060fc:	f840 3b04 	str.w	r3, [r0], #4
 8006100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006104:	d2e8      	bcs.n	80060d8 <quorem+0xb0>
 8006106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800610a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800610e:	b922      	cbnz	r2, 800611a <quorem+0xf2>
 8006110:	3b04      	subs	r3, #4
 8006112:	429d      	cmp	r5, r3
 8006114:	461a      	mov	r2, r3
 8006116:	d30a      	bcc.n	800612e <quorem+0x106>
 8006118:	613c      	str	r4, [r7, #16]
 800611a:	4630      	mov	r0, r6
 800611c:	b003      	add	sp, #12
 800611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	3b04      	subs	r3, #4
 8006126:	2a00      	cmp	r2, #0
 8006128:	d1cc      	bne.n	80060c4 <quorem+0x9c>
 800612a:	3c01      	subs	r4, #1
 800612c:	e7c7      	b.n	80060be <quorem+0x96>
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	3b04      	subs	r3, #4
 8006132:	2a00      	cmp	r2, #0
 8006134:	d1f0      	bne.n	8006118 <quorem+0xf0>
 8006136:	3c01      	subs	r4, #1
 8006138:	e7eb      	b.n	8006112 <quorem+0xea>
 800613a:	2000      	movs	r0, #0
 800613c:	e7ee      	b.n	800611c <quorem+0xf4>
	...

08006140 <_dtoa_r>:
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	ed2d 8b02 	vpush	{d8}
 8006148:	ec57 6b10 	vmov	r6, r7, d0
 800614c:	b095      	sub	sp, #84	; 0x54
 800614e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006154:	9105      	str	r1, [sp, #20]
 8006156:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800615a:	4604      	mov	r4, r0
 800615c:	9209      	str	r2, [sp, #36]	; 0x24
 800615e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006160:	b975      	cbnz	r5, 8006180 <_dtoa_r+0x40>
 8006162:	2010      	movs	r0, #16
 8006164:	f000 fffc 	bl	8007160 <malloc>
 8006168:	4602      	mov	r2, r0
 800616a:	6260      	str	r0, [r4, #36]	; 0x24
 800616c:	b920      	cbnz	r0, 8006178 <_dtoa_r+0x38>
 800616e:	4bb2      	ldr	r3, [pc, #712]	; (8006438 <_dtoa_r+0x2f8>)
 8006170:	21ea      	movs	r1, #234	; 0xea
 8006172:	48b2      	ldr	r0, [pc, #712]	; (800643c <_dtoa_r+0x2fc>)
 8006174:	f001 fe4a 	bl	8007e0c <__assert_func>
 8006178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800617c:	6005      	str	r5, [r0, #0]
 800617e:	60c5      	str	r5, [r0, #12]
 8006180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	b151      	cbz	r1, 800619c <_dtoa_r+0x5c>
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	604a      	str	r2, [r1, #4]
 800618a:	2301      	movs	r3, #1
 800618c:	4093      	lsls	r3, r2
 800618e:	608b      	str	r3, [r1, #8]
 8006190:	4620      	mov	r0, r4
 8006192:	f001 f83b 	bl	800720c <_Bfree>
 8006196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	1e3b      	subs	r3, r7, #0
 800619e:	bfb9      	ittee	lt
 80061a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061a4:	9303      	strlt	r3, [sp, #12]
 80061a6:	2300      	movge	r3, #0
 80061a8:	f8c8 3000 	strge.w	r3, [r8]
 80061ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061b0:	4ba3      	ldr	r3, [pc, #652]	; (8006440 <_dtoa_r+0x300>)
 80061b2:	bfbc      	itt	lt
 80061b4:	2201      	movlt	r2, #1
 80061b6:	f8c8 2000 	strlt.w	r2, [r8]
 80061ba:	ea33 0309 	bics.w	r3, r3, r9
 80061be:	d11b      	bne.n	80061f8 <_dtoa_r+0xb8>
 80061c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061cc:	4333      	orrs	r3, r6
 80061ce:	f000 857a 	beq.w	8006cc6 <_dtoa_r+0xb86>
 80061d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d4:	b963      	cbnz	r3, 80061f0 <_dtoa_r+0xb0>
 80061d6:	4b9b      	ldr	r3, [pc, #620]	; (8006444 <_dtoa_r+0x304>)
 80061d8:	e024      	b.n	8006224 <_dtoa_r+0xe4>
 80061da:	4b9b      	ldr	r3, [pc, #620]	; (8006448 <_dtoa_r+0x308>)
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	9800      	ldr	r0, [sp, #0]
 80061e6:	b015      	add	sp, #84	; 0x54
 80061e8:	ecbd 8b02 	vpop	{d8}
 80061ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f0:	4b94      	ldr	r3, [pc, #592]	; (8006444 <_dtoa_r+0x304>)
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	3303      	adds	r3, #3
 80061f6:	e7f3      	b.n	80061e0 <_dtoa_r+0xa0>
 80061f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061fc:	2200      	movs	r2, #0
 80061fe:	ec51 0b17 	vmov	r0, r1, d7
 8006202:	2300      	movs	r3, #0
 8006204:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006208:	f7fa fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800620c:	4680      	mov	r8, r0
 800620e:	b158      	cbz	r0, 8006228 <_dtoa_r+0xe8>
 8006210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006212:	2301      	movs	r3, #1
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8551 	beq.w	8006cc0 <_dtoa_r+0xb80>
 800621e:	488b      	ldr	r0, [pc, #556]	; (800644c <_dtoa_r+0x30c>)
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	1e43      	subs	r3, r0, #1
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	e7dd      	b.n	80061e4 <_dtoa_r+0xa4>
 8006228:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800622c:	aa12      	add	r2, sp, #72	; 0x48
 800622e:	a913      	add	r1, sp, #76	; 0x4c
 8006230:	4620      	mov	r0, r4
 8006232:	f001 facd 	bl	80077d0 <__d2b>
 8006236:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800623a:	4683      	mov	fp, r0
 800623c:	2d00      	cmp	r5, #0
 800623e:	d07c      	beq.n	800633a <_dtoa_r+0x1fa>
 8006240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006242:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800624a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800624e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800625a:	4b7d      	ldr	r3, [pc, #500]	; (8006450 <_dtoa_r+0x310>)
 800625c:	2200      	movs	r2, #0
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	f7fa f811 	bl	8000288 <__aeabi_dsub>
 8006266:	a36e      	add	r3, pc, #440	; (adr r3, 8006420 <_dtoa_r+0x2e0>)
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f7fa f9c4 	bl	80005f8 <__aeabi_dmul>
 8006270:	a36d      	add	r3, pc, #436	; (adr r3, 8006428 <_dtoa_r+0x2e8>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f7fa f809 	bl	800028c <__adddf3>
 800627a:	4606      	mov	r6, r0
 800627c:	4628      	mov	r0, r5
 800627e:	460f      	mov	r7, r1
 8006280:	f7fa f950 	bl	8000524 <__aeabi_i2d>
 8006284:	a36a      	add	r3, pc, #424	; (adr r3, 8006430 <_dtoa_r+0x2f0>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7fa f9b5 	bl	80005f8 <__aeabi_dmul>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4630      	mov	r0, r6
 8006294:	4639      	mov	r1, r7
 8006296:	f7f9 fff9 	bl	800028c <__adddf3>
 800629a:	4606      	mov	r6, r0
 800629c:	460f      	mov	r7, r1
 800629e:	f7fa fc5b 	bl	8000b58 <__aeabi_d2iz>
 80062a2:	2200      	movs	r2, #0
 80062a4:	4682      	mov	sl, r0
 80062a6:	2300      	movs	r3, #0
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	f7fa fc16 	bl	8000adc <__aeabi_dcmplt>
 80062b0:	b148      	cbz	r0, 80062c6 <_dtoa_r+0x186>
 80062b2:	4650      	mov	r0, sl
 80062b4:	f7fa f936 	bl	8000524 <__aeabi_i2d>
 80062b8:	4632      	mov	r2, r6
 80062ba:	463b      	mov	r3, r7
 80062bc:	f7fa fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80062c0:	b908      	cbnz	r0, 80062c6 <_dtoa_r+0x186>
 80062c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062c6:	f1ba 0f16 	cmp.w	sl, #22
 80062ca:	d854      	bhi.n	8006376 <_dtoa_r+0x236>
 80062cc:	4b61      	ldr	r3, [pc, #388]	; (8006454 <_dtoa_r+0x314>)
 80062ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062da:	f7fa fbff 	bl	8000adc <__aeabi_dcmplt>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d04b      	beq.n	800637a <_dtoa_r+0x23a>
 80062e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062e6:	2300      	movs	r3, #0
 80062e8:	930e      	str	r3, [sp, #56]	; 0x38
 80062ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ec:	1b5d      	subs	r5, r3, r5
 80062ee:	1e6b      	subs	r3, r5, #1
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	bf43      	ittte	mi
 80062f4:	2300      	movmi	r3, #0
 80062f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80062fa:	9304      	strmi	r3, [sp, #16]
 80062fc:	f04f 0800 	movpl.w	r8, #0
 8006300:	f1ba 0f00 	cmp.w	sl, #0
 8006304:	db3b      	blt.n	800637e <_dtoa_r+0x23e>
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800630c:	4453      	add	r3, sl
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	2300      	movs	r3, #0
 8006312:	9306      	str	r3, [sp, #24]
 8006314:	9b05      	ldr	r3, [sp, #20]
 8006316:	2b09      	cmp	r3, #9
 8006318:	d869      	bhi.n	80063ee <_dtoa_r+0x2ae>
 800631a:	2b05      	cmp	r3, #5
 800631c:	bfc4      	itt	gt
 800631e:	3b04      	subgt	r3, #4
 8006320:	9305      	strgt	r3, [sp, #20]
 8006322:	9b05      	ldr	r3, [sp, #20]
 8006324:	f1a3 0302 	sub.w	r3, r3, #2
 8006328:	bfcc      	ite	gt
 800632a:	2500      	movgt	r5, #0
 800632c:	2501      	movle	r5, #1
 800632e:	2b03      	cmp	r3, #3
 8006330:	d869      	bhi.n	8006406 <_dtoa_r+0x2c6>
 8006332:	e8df f003 	tbb	[pc, r3]
 8006336:	4e2c      	.short	0x4e2c
 8006338:	5a4c      	.short	0x5a4c
 800633a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800633e:	441d      	add	r5, r3
 8006340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006344:	2b20      	cmp	r3, #32
 8006346:	bfc1      	itttt	gt
 8006348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800634c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006350:	fa09 f303 	lslgt.w	r3, r9, r3
 8006354:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006358:	bfda      	itte	le
 800635a:	f1c3 0320 	rsble	r3, r3, #32
 800635e:	fa06 f003 	lslle.w	r0, r6, r3
 8006362:	4318      	orrgt	r0, r3
 8006364:	f7fa f8ce 	bl	8000504 <__aeabi_ui2d>
 8006368:	2301      	movs	r3, #1
 800636a:	4606      	mov	r6, r0
 800636c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006370:	3d01      	subs	r5, #1
 8006372:	9310      	str	r3, [sp, #64]	; 0x40
 8006374:	e771      	b.n	800625a <_dtoa_r+0x11a>
 8006376:	2301      	movs	r3, #1
 8006378:	e7b6      	b.n	80062e8 <_dtoa_r+0x1a8>
 800637a:	900e      	str	r0, [sp, #56]	; 0x38
 800637c:	e7b5      	b.n	80062ea <_dtoa_r+0x1aa>
 800637e:	f1ca 0300 	rsb	r3, sl, #0
 8006382:	9306      	str	r3, [sp, #24]
 8006384:	2300      	movs	r3, #0
 8006386:	eba8 080a 	sub.w	r8, r8, sl
 800638a:	930d      	str	r3, [sp, #52]	; 0x34
 800638c:	e7c2      	b.n	8006314 <_dtoa_r+0x1d4>
 800638e:	2300      	movs	r3, #0
 8006390:	9308      	str	r3, [sp, #32]
 8006392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	dc39      	bgt.n	800640c <_dtoa_r+0x2cc>
 8006398:	f04f 0901 	mov.w	r9, #1
 800639c:	f8cd 9004 	str.w	r9, [sp, #4]
 80063a0:	464b      	mov	r3, r9
 80063a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063a8:	2200      	movs	r2, #0
 80063aa:	6042      	str	r2, [r0, #4]
 80063ac:	2204      	movs	r2, #4
 80063ae:	f102 0614 	add.w	r6, r2, #20
 80063b2:	429e      	cmp	r6, r3
 80063b4:	6841      	ldr	r1, [r0, #4]
 80063b6:	d92f      	bls.n	8006418 <_dtoa_r+0x2d8>
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 fee7 	bl	800718c <_Balloc>
 80063be:	9000      	str	r0, [sp, #0]
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d14b      	bne.n	800645c <_dtoa_r+0x31c>
 80063c4:	4b24      	ldr	r3, [pc, #144]	; (8006458 <_dtoa_r+0x318>)
 80063c6:	4602      	mov	r2, r0
 80063c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063cc:	e6d1      	b.n	8006172 <_dtoa_r+0x32>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e7de      	b.n	8006390 <_dtoa_r+0x250>
 80063d2:	2300      	movs	r3, #0
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d8:	eb0a 0903 	add.w	r9, sl, r3
 80063dc:	f109 0301 	add.w	r3, r9, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	bfb8      	it	lt
 80063e6:	2301      	movlt	r3, #1
 80063e8:	e7dd      	b.n	80063a6 <_dtoa_r+0x266>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e7f2      	b.n	80063d4 <_dtoa_r+0x294>
 80063ee:	2501      	movs	r5, #1
 80063f0:	2300      	movs	r3, #0
 80063f2:	9305      	str	r3, [sp, #20]
 80063f4:	9508      	str	r5, [sp, #32]
 80063f6:	f04f 39ff 	mov.w	r9, #4294967295
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006400:	2312      	movs	r3, #18
 8006402:	9209      	str	r2, [sp, #36]	; 0x24
 8006404:	e7cf      	b.n	80063a6 <_dtoa_r+0x266>
 8006406:	2301      	movs	r3, #1
 8006408:	9308      	str	r3, [sp, #32]
 800640a:	e7f4      	b.n	80063f6 <_dtoa_r+0x2b6>
 800640c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006410:	f8cd 9004 	str.w	r9, [sp, #4]
 8006414:	464b      	mov	r3, r9
 8006416:	e7c6      	b.n	80063a6 <_dtoa_r+0x266>
 8006418:	3101      	adds	r1, #1
 800641a:	6041      	str	r1, [r0, #4]
 800641c:	0052      	lsls	r2, r2, #1
 800641e:	e7c6      	b.n	80063ae <_dtoa_r+0x26e>
 8006420:	636f4361 	.word	0x636f4361
 8006424:	3fd287a7 	.word	0x3fd287a7
 8006428:	8b60c8b3 	.word	0x8b60c8b3
 800642c:	3fc68a28 	.word	0x3fc68a28
 8006430:	509f79fb 	.word	0x509f79fb
 8006434:	3fd34413 	.word	0x3fd34413
 8006438:	08008119 	.word	0x08008119
 800643c:	08008130 	.word	0x08008130
 8006440:	7ff00000 	.word	0x7ff00000
 8006444:	08008115 	.word	0x08008115
 8006448:	0800810c 	.word	0x0800810c
 800644c:	080080e9 	.word	0x080080e9
 8006450:	3ff80000 	.word	0x3ff80000
 8006454:	08008288 	.word	0x08008288
 8006458:	0800818f 	.word	0x0800818f
 800645c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800645e:	9a00      	ldr	r2, [sp, #0]
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	9b01      	ldr	r3, [sp, #4]
 8006464:	2b0e      	cmp	r3, #14
 8006466:	f200 80ad 	bhi.w	80065c4 <_dtoa_r+0x484>
 800646a:	2d00      	cmp	r5, #0
 800646c:	f000 80aa 	beq.w	80065c4 <_dtoa_r+0x484>
 8006470:	f1ba 0f00 	cmp.w	sl, #0
 8006474:	dd36      	ble.n	80064e4 <_dtoa_r+0x3a4>
 8006476:	4ac3      	ldr	r2, [pc, #780]	; (8006784 <_dtoa_r+0x644>)
 8006478:	f00a 030f 	and.w	r3, sl, #15
 800647c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006480:	ed93 7b00 	vldr	d7, [r3]
 8006484:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006488:	ea4f 172a 	mov.w	r7, sl, asr #4
 800648c:	eeb0 8a47 	vmov.f32	s16, s14
 8006490:	eef0 8a67 	vmov.f32	s17, s15
 8006494:	d016      	beq.n	80064c4 <_dtoa_r+0x384>
 8006496:	4bbc      	ldr	r3, [pc, #752]	; (8006788 <_dtoa_r+0x648>)
 8006498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800649c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a0:	f7fa f9d4 	bl	800084c <__aeabi_ddiv>
 80064a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a8:	f007 070f 	and.w	r7, r7, #15
 80064ac:	2503      	movs	r5, #3
 80064ae:	4eb6      	ldr	r6, [pc, #728]	; (8006788 <_dtoa_r+0x648>)
 80064b0:	b957      	cbnz	r7, 80064c8 <_dtoa_r+0x388>
 80064b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b6:	ec53 2b18 	vmov	r2, r3, d8
 80064ba:	f7fa f9c7 	bl	800084c <__aeabi_ddiv>
 80064be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c2:	e029      	b.n	8006518 <_dtoa_r+0x3d8>
 80064c4:	2502      	movs	r5, #2
 80064c6:	e7f2      	b.n	80064ae <_dtoa_r+0x36e>
 80064c8:	07f9      	lsls	r1, r7, #31
 80064ca:	d508      	bpl.n	80064de <_dtoa_r+0x39e>
 80064cc:	ec51 0b18 	vmov	r0, r1, d8
 80064d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064d4:	f7fa f890 	bl	80005f8 <__aeabi_dmul>
 80064d8:	ec41 0b18 	vmov	d8, r0, r1
 80064dc:	3501      	adds	r5, #1
 80064de:	107f      	asrs	r7, r7, #1
 80064e0:	3608      	adds	r6, #8
 80064e2:	e7e5      	b.n	80064b0 <_dtoa_r+0x370>
 80064e4:	f000 80a6 	beq.w	8006634 <_dtoa_r+0x4f4>
 80064e8:	f1ca 0600 	rsb	r6, sl, #0
 80064ec:	4ba5      	ldr	r3, [pc, #660]	; (8006784 <_dtoa_r+0x644>)
 80064ee:	4fa6      	ldr	r7, [pc, #664]	; (8006788 <_dtoa_r+0x648>)
 80064f0:	f006 020f 	and.w	r2, r6, #15
 80064f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006500:	f7fa f87a 	bl	80005f8 <__aeabi_dmul>
 8006504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006508:	1136      	asrs	r6, r6, #4
 800650a:	2300      	movs	r3, #0
 800650c:	2502      	movs	r5, #2
 800650e:	2e00      	cmp	r6, #0
 8006510:	f040 8085 	bne.w	800661e <_dtoa_r+0x4de>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1d2      	bne.n	80064be <_dtoa_r+0x37e>
 8006518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 808c 	beq.w	8006638 <_dtoa_r+0x4f8>
 8006520:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006524:	4b99      	ldr	r3, [pc, #612]	; (800678c <_dtoa_r+0x64c>)
 8006526:	2200      	movs	r2, #0
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7fa fad6 	bl	8000adc <__aeabi_dcmplt>
 8006530:	2800      	cmp	r0, #0
 8006532:	f000 8081 	beq.w	8006638 <_dtoa_r+0x4f8>
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d07d      	beq.n	8006638 <_dtoa_r+0x4f8>
 800653c:	f1b9 0f00 	cmp.w	r9, #0
 8006540:	dd3c      	ble.n	80065bc <_dtoa_r+0x47c>
 8006542:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	2200      	movs	r2, #0
 800654a:	4b91      	ldr	r3, [pc, #580]	; (8006790 <_dtoa_r+0x650>)
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7fa f852 	bl	80005f8 <__aeabi_dmul>
 8006554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006558:	3501      	adds	r5, #1
 800655a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800655e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006562:	4628      	mov	r0, r5
 8006564:	f7f9 ffde 	bl	8000524 <__aeabi_i2d>
 8006568:	4632      	mov	r2, r6
 800656a:	463b      	mov	r3, r7
 800656c:	f7fa f844 	bl	80005f8 <__aeabi_dmul>
 8006570:	4b88      	ldr	r3, [pc, #544]	; (8006794 <_dtoa_r+0x654>)
 8006572:	2200      	movs	r2, #0
 8006574:	f7f9 fe8a 	bl	800028c <__adddf3>
 8006578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800657c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006580:	9303      	str	r3, [sp, #12]
 8006582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006584:	2b00      	cmp	r3, #0
 8006586:	d15c      	bne.n	8006642 <_dtoa_r+0x502>
 8006588:	4b83      	ldr	r3, [pc, #524]	; (8006798 <_dtoa_r+0x658>)
 800658a:	2200      	movs	r2, #0
 800658c:	4630      	mov	r0, r6
 800658e:	4639      	mov	r1, r7
 8006590:	f7f9 fe7a 	bl	8000288 <__aeabi_dsub>
 8006594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006598:	4606      	mov	r6, r0
 800659a:	460f      	mov	r7, r1
 800659c:	f7fa fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f040 8296 	bne.w	8006ad2 <_dtoa_r+0x992>
 80065a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065aa:	4630      	mov	r0, r6
 80065ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7fa fa93 	bl	8000adc <__aeabi_dcmplt>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f040 8288 	bne.w	8006acc <_dtoa_r+0x98c>
 80065bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f2c0 8158 	blt.w	800687c <_dtoa_r+0x73c>
 80065cc:	f1ba 0f0e 	cmp.w	sl, #14
 80065d0:	f300 8154 	bgt.w	800687c <_dtoa_r+0x73c>
 80065d4:	4b6b      	ldr	r3, [pc, #428]	; (8006784 <_dtoa_r+0x644>)
 80065d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f280 80e3 	bge.w	80067ac <_dtoa_r+0x66c>
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f300 80df 	bgt.w	80067ac <_dtoa_r+0x66c>
 80065ee:	f040 826d 	bne.w	8006acc <_dtoa_r+0x98c>
 80065f2:	4b69      	ldr	r3, [pc, #420]	; (8006798 <_dtoa_r+0x658>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	4640      	mov	r0, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	f7f9 fffd 	bl	80005f8 <__aeabi_dmul>
 80065fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006602:	f7fa fa7f 	bl	8000b04 <__aeabi_dcmpge>
 8006606:	9e01      	ldr	r6, [sp, #4]
 8006608:	4637      	mov	r7, r6
 800660a:	2800      	cmp	r0, #0
 800660c:	f040 8243 	bne.w	8006a96 <_dtoa_r+0x956>
 8006610:	9d00      	ldr	r5, [sp, #0]
 8006612:	2331      	movs	r3, #49	; 0x31
 8006614:	f805 3b01 	strb.w	r3, [r5], #1
 8006618:	f10a 0a01 	add.w	sl, sl, #1
 800661c:	e23f      	b.n	8006a9e <_dtoa_r+0x95e>
 800661e:	07f2      	lsls	r2, r6, #31
 8006620:	d505      	bpl.n	800662e <_dtoa_r+0x4ee>
 8006622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006626:	f7f9 ffe7 	bl	80005f8 <__aeabi_dmul>
 800662a:	3501      	adds	r5, #1
 800662c:	2301      	movs	r3, #1
 800662e:	1076      	asrs	r6, r6, #1
 8006630:	3708      	adds	r7, #8
 8006632:	e76c      	b.n	800650e <_dtoa_r+0x3ce>
 8006634:	2502      	movs	r5, #2
 8006636:	e76f      	b.n	8006518 <_dtoa_r+0x3d8>
 8006638:	9b01      	ldr	r3, [sp, #4]
 800663a:	f8cd a01c 	str.w	sl, [sp, #28]
 800663e:	930c      	str	r3, [sp, #48]	; 0x30
 8006640:	e78d      	b.n	800655e <_dtoa_r+0x41e>
 8006642:	9900      	ldr	r1, [sp, #0]
 8006644:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006648:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <_dtoa_r+0x644>)
 800664a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800664e:	4401      	add	r1, r0
 8006650:	9102      	str	r1, [sp, #8]
 8006652:	9908      	ldr	r1, [sp, #32]
 8006654:	eeb0 8a47 	vmov.f32	s16, s14
 8006658:	eef0 8a67 	vmov.f32	s17, s15
 800665c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006664:	2900      	cmp	r1, #0
 8006666:	d045      	beq.n	80066f4 <_dtoa_r+0x5b4>
 8006668:	494c      	ldr	r1, [pc, #304]	; (800679c <_dtoa_r+0x65c>)
 800666a:	2000      	movs	r0, #0
 800666c:	f7fa f8ee 	bl	800084c <__aeabi_ddiv>
 8006670:	ec53 2b18 	vmov	r2, r3, d8
 8006674:	f7f9 fe08 	bl	8000288 <__aeabi_dsub>
 8006678:	9d00      	ldr	r5, [sp, #0]
 800667a:	ec41 0b18 	vmov	d8, r0, r1
 800667e:	4639      	mov	r1, r7
 8006680:	4630      	mov	r0, r6
 8006682:	f7fa fa69 	bl	8000b58 <__aeabi_d2iz>
 8006686:	900c      	str	r0, [sp, #48]	; 0x30
 8006688:	f7f9 ff4c 	bl	8000524 <__aeabi_i2d>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4630      	mov	r0, r6
 8006692:	4639      	mov	r1, r7
 8006694:	f7f9 fdf8 	bl	8000288 <__aeabi_dsub>
 8006698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800669a:	3330      	adds	r3, #48	; 0x30
 800669c:	f805 3b01 	strb.w	r3, [r5], #1
 80066a0:	ec53 2b18 	vmov	r2, r3, d8
 80066a4:	4606      	mov	r6, r0
 80066a6:	460f      	mov	r7, r1
 80066a8:	f7fa fa18 	bl	8000adc <__aeabi_dcmplt>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d165      	bne.n	800677c <_dtoa_r+0x63c>
 80066b0:	4632      	mov	r2, r6
 80066b2:	463b      	mov	r3, r7
 80066b4:	4935      	ldr	r1, [pc, #212]	; (800678c <_dtoa_r+0x64c>)
 80066b6:	2000      	movs	r0, #0
 80066b8:	f7f9 fde6 	bl	8000288 <__aeabi_dsub>
 80066bc:	ec53 2b18 	vmov	r2, r3, d8
 80066c0:	f7fa fa0c 	bl	8000adc <__aeabi_dcmplt>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f040 80b9 	bne.w	800683c <_dtoa_r+0x6fc>
 80066ca:	9b02      	ldr	r3, [sp, #8]
 80066cc:	429d      	cmp	r5, r3
 80066ce:	f43f af75 	beq.w	80065bc <_dtoa_r+0x47c>
 80066d2:	4b2f      	ldr	r3, [pc, #188]	; (8006790 <_dtoa_r+0x650>)
 80066d4:	ec51 0b18 	vmov	r0, r1, d8
 80066d8:	2200      	movs	r2, #0
 80066da:	f7f9 ff8d 	bl	80005f8 <__aeabi_dmul>
 80066de:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <_dtoa_r+0x650>)
 80066e0:	ec41 0b18 	vmov	d8, r0, r1
 80066e4:	2200      	movs	r2, #0
 80066e6:	4630      	mov	r0, r6
 80066e8:	4639      	mov	r1, r7
 80066ea:	f7f9 ff85 	bl	80005f8 <__aeabi_dmul>
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	e7c4      	b.n	800667e <_dtoa_r+0x53e>
 80066f4:	ec51 0b17 	vmov	r0, r1, d7
 80066f8:	f7f9 ff7e 	bl	80005f8 <__aeabi_dmul>
 80066fc:	9b02      	ldr	r3, [sp, #8]
 80066fe:	9d00      	ldr	r5, [sp, #0]
 8006700:	930c      	str	r3, [sp, #48]	; 0x30
 8006702:	ec41 0b18 	vmov	d8, r0, r1
 8006706:	4639      	mov	r1, r7
 8006708:	4630      	mov	r0, r6
 800670a:	f7fa fa25 	bl	8000b58 <__aeabi_d2iz>
 800670e:	9011      	str	r0, [sp, #68]	; 0x44
 8006710:	f7f9 ff08 	bl	8000524 <__aeabi_i2d>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7f9 fdb4 	bl	8000288 <__aeabi_dsub>
 8006720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006722:	3330      	adds	r3, #48	; 0x30
 8006724:	f805 3b01 	strb.w	r3, [r5], #1
 8006728:	9b02      	ldr	r3, [sp, #8]
 800672a:	429d      	cmp	r5, r3
 800672c:	4606      	mov	r6, r0
 800672e:	460f      	mov	r7, r1
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	d134      	bne.n	80067a0 <_dtoa_r+0x660>
 8006736:	4b19      	ldr	r3, [pc, #100]	; (800679c <_dtoa_r+0x65c>)
 8006738:	ec51 0b18 	vmov	r0, r1, d8
 800673c:	f7f9 fda6 	bl	800028c <__adddf3>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7fa f9e6 	bl	8000b18 <__aeabi_dcmpgt>
 800674c:	2800      	cmp	r0, #0
 800674e:	d175      	bne.n	800683c <_dtoa_r+0x6fc>
 8006750:	ec53 2b18 	vmov	r2, r3, d8
 8006754:	4911      	ldr	r1, [pc, #68]	; (800679c <_dtoa_r+0x65c>)
 8006756:	2000      	movs	r0, #0
 8006758:	f7f9 fd96 	bl	8000288 <__aeabi_dsub>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7fa f9ba 	bl	8000adc <__aeabi_dcmplt>
 8006768:	2800      	cmp	r0, #0
 800676a:	f43f af27 	beq.w	80065bc <_dtoa_r+0x47c>
 800676e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006770:	1e6b      	subs	r3, r5, #1
 8006772:	930c      	str	r3, [sp, #48]	; 0x30
 8006774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006778:	2b30      	cmp	r3, #48	; 0x30
 800677a:	d0f8      	beq.n	800676e <_dtoa_r+0x62e>
 800677c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006780:	e04a      	b.n	8006818 <_dtoa_r+0x6d8>
 8006782:	bf00      	nop
 8006784:	08008288 	.word	0x08008288
 8006788:	08008260 	.word	0x08008260
 800678c:	3ff00000 	.word	0x3ff00000
 8006790:	40240000 	.word	0x40240000
 8006794:	401c0000 	.word	0x401c0000
 8006798:	40140000 	.word	0x40140000
 800679c:	3fe00000 	.word	0x3fe00000
 80067a0:	4baf      	ldr	r3, [pc, #700]	; (8006a60 <_dtoa_r+0x920>)
 80067a2:	f7f9 ff29 	bl	80005f8 <__aeabi_dmul>
 80067a6:	4606      	mov	r6, r0
 80067a8:	460f      	mov	r7, r1
 80067aa:	e7ac      	b.n	8006706 <_dtoa_r+0x5c6>
 80067ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067b0:	9d00      	ldr	r5, [sp, #0]
 80067b2:	4642      	mov	r2, r8
 80067b4:	464b      	mov	r3, r9
 80067b6:	4630      	mov	r0, r6
 80067b8:	4639      	mov	r1, r7
 80067ba:	f7fa f847 	bl	800084c <__aeabi_ddiv>
 80067be:	f7fa f9cb 	bl	8000b58 <__aeabi_d2iz>
 80067c2:	9002      	str	r0, [sp, #8]
 80067c4:	f7f9 feae 	bl	8000524 <__aeabi_i2d>
 80067c8:	4642      	mov	r2, r8
 80067ca:	464b      	mov	r3, r9
 80067cc:	f7f9 ff14 	bl	80005f8 <__aeabi_dmul>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7f9 fd56 	bl	8000288 <__aeabi_dsub>
 80067dc:	9e02      	ldr	r6, [sp, #8]
 80067de:	9f01      	ldr	r7, [sp, #4]
 80067e0:	3630      	adds	r6, #48	; 0x30
 80067e2:	f805 6b01 	strb.w	r6, [r5], #1
 80067e6:	9e00      	ldr	r6, [sp, #0]
 80067e8:	1bae      	subs	r6, r5, r6
 80067ea:	42b7      	cmp	r7, r6
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	d137      	bne.n	8006862 <_dtoa_r+0x722>
 80067f2:	f7f9 fd4b 	bl	800028c <__adddf3>
 80067f6:	4642      	mov	r2, r8
 80067f8:	464b      	mov	r3, r9
 80067fa:	4606      	mov	r6, r0
 80067fc:	460f      	mov	r7, r1
 80067fe:	f7fa f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8006802:	b9c8      	cbnz	r0, 8006838 <_dtoa_r+0x6f8>
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	f7fa f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006810:	b110      	cbz	r0, 8006818 <_dtoa_r+0x6d8>
 8006812:	9b02      	ldr	r3, [sp, #8]
 8006814:	07d9      	lsls	r1, r3, #31
 8006816:	d40f      	bmi.n	8006838 <_dtoa_r+0x6f8>
 8006818:	4620      	mov	r0, r4
 800681a:	4659      	mov	r1, fp
 800681c:	f000 fcf6 	bl	800720c <_Bfree>
 8006820:	2300      	movs	r3, #0
 8006822:	702b      	strb	r3, [r5, #0]
 8006824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006826:	f10a 0001 	add.w	r0, sl, #1
 800682a:	6018      	str	r0, [r3, #0]
 800682c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800682e:	2b00      	cmp	r3, #0
 8006830:	f43f acd8 	beq.w	80061e4 <_dtoa_r+0xa4>
 8006834:	601d      	str	r5, [r3, #0]
 8006836:	e4d5      	b.n	80061e4 <_dtoa_r+0xa4>
 8006838:	f8cd a01c 	str.w	sl, [sp, #28]
 800683c:	462b      	mov	r3, r5
 800683e:	461d      	mov	r5, r3
 8006840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006844:	2a39      	cmp	r2, #57	; 0x39
 8006846:	d108      	bne.n	800685a <_dtoa_r+0x71a>
 8006848:	9a00      	ldr	r2, [sp, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d1f7      	bne.n	800683e <_dtoa_r+0x6fe>
 800684e:	9a07      	ldr	r2, [sp, #28]
 8006850:	9900      	ldr	r1, [sp, #0]
 8006852:	3201      	adds	r2, #1
 8006854:	9207      	str	r2, [sp, #28]
 8006856:	2230      	movs	r2, #48	; 0x30
 8006858:	700a      	strb	r2, [r1, #0]
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	3201      	adds	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e78c      	b.n	800677c <_dtoa_r+0x63c>
 8006862:	4b7f      	ldr	r3, [pc, #508]	; (8006a60 <_dtoa_r+0x920>)
 8006864:	2200      	movs	r2, #0
 8006866:	f7f9 fec7 	bl	80005f8 <__aeabi_dmul>
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	4606      	mov	r6, r0
 8006870:	460f      	mov	r7, r1
 8006872:	f7fa f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8006876:	2800      	cmp	r0, #0
 8006878:	d09b      	beq.n	80067b2 <_dtoa_r+0x672>
 800687a:	e7cd      	b.n	8006818 <_dtoa_r+0x6d8>
 800687c:	9a08      	ldr	r2, [sp, #32]
 800687e:	2a00      	cmp	r2, #0
 8006880:	f000 80c4 	beq.w	8006a0c <_dtoa_r+0x8cc>
 8006884:	9a05      	ldr	r2, [sp, #20]
 8006886:	2a01      	cmp	r2, #1
 8006888:	f300 80a8 	bgt.w	80069dc <_dtoa_r+0x89c>
 800688c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800688e:	2a00      	cmp	r2, #0
 8006890:	f000 80a0 	beq.w	80069d4 <_dtoa_r+0x894>
 8006894:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006898:	9e06      	ldr	r6, [sp, #24]
 800689a:	4645      	mov	r5, r8
 800689c:	9a04      	ldr	r2, [sp, #16]
 800689e:	2101      	movs	r1, #1
 80068a0:	441a      	add	r2, r3
 80068a2:	4620      	mov	r0, r4
 80068a4:	4498      	add	r8, r3
 80068a6:	9204      	str	r2, [sp, #16]
 80068a8:	f000 fd6c 	bl	8007384 <__i2b>
 80068ac:	4607      	mov	r7, r0
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	dd0b      	ble.n	80068ca <_dtoa_r+0x78a>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dd08      	ble.n	80068ca <_dtoa_r+0x78a>
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	9a04      	ldr	r2, [sp, #16]
 80068bc:	bfa8      	it	ge
 80068be:	462b      	movge	r3, r5
 80068c0:	eba8 0803 	sub.w	r8, r8, r3
 80068c4:	1aed      	subs	r5, r5, r3
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	b1fb      	cbz	r3, 800690e <_dtoa_r+0x7ce>
 80068ce:	9b08      	ldr	r3, [sp, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 809f 	beq.w	8006a14 <_dtoa_r+0x8d4>
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	dd11      	ble.n	80068fe <_dtoa_r+0x7be>
 80068da:	4639      	mov	r1, r7
 80068dc:	4632      	mov	r2, r6
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fe0c 	bl	80074fc <__pow5mult>
 80068e4:	465a      	mov	r2, fp
 80068e6:	4601      	mov	r1, r0
 80068e8:	4607      	mov	r7, r0
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fd60 	bl	80073b0 <__multiply>
 80068f0:	4659      	mov	r1, fp
 80068f2:	9007      	str	r0, [sp, #28]
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 fc89 	bl	800720c <_Bfree>
 80068fa:	9b07      	ldr	r3, [sp, #28]
 80068fc:	469b      	mov	fp, r3
 80068fe:	9b06      	ldr	r3, [sp, #24]
 8006900:	1b9a      	subs	r2, r3, r6
 8006902:	d004      	beq.n	800690e <_dtoa_r+0x7ce>
 8006904:	4659      	mov	r1, fp
 8006906:	4620      	mov	r0, r4
 8006908:	f000 fdf8 	bl	80074fc <__pow5mult>
 800690c:	4683      	mov	fp, r0
 800690e:	2101      	movs	r1, #1
 8006910:	4620      	mov	r0, r4
 8006912:	f000 fd37 	bl	8007384 <__i2b>
 8006916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006918:	2b00      	cmp	r3, #0
 800691a:	4606      	mov	r6, r0
 800691c:	dd7c      	ble.n	8006a18 <_dtoa_r+0x8d8>
 800691e:	461a      	mov	r2, r3
 8006920:	4601      	mov	r1, r0
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fdea 	bl	80074fc <__pow5mult>
 8006928:	9b05      	ldr	r3, [sp, #20]
 800692a:	2b01      	cmp	r3, #1
 800692c:	4606      	mov	r6, r0
 800692e:	dd76      	ble.n	8006a1e <_dtoa_r+0x8de>
 8006930:	2300      	movs	r3, #0
 8006932:	9306      	str	r3, [sp, #24]
 8006934:	6933      	ldr	r3, [r6, #16]
 8006936:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800693a:	6918      	ldr	r0, [r3, #16]
 800693c:	f000 fcd2 	bl	80072e4 <__hi0bits>
 8006940:	f1c0 0020 	rsb	r0, r0, #32
 8006944:	9b04      	ldr	r3, [sp, #16]
 8006946:	4418      	add	r0, r3
 8006948:	f010 001f 	ands.w	r0, r0, #31
 800694c:	f000 8086 	beq.w	8006a5c <_dtoa_r+0x91c>
 8006950:	f1c0 0320 	rsb	r3, r0, #32
 8006954:	2b04      	cmp	r3, #4
 8006956:	dd7f      	ble.n	8006a58 <_dtoa_r+0x918>
 8006958:	f1c0 001c 	rsb	r0, r0, #28
 800695c:	9b04      	ldr	r3, [sp, #16]
 800695e:	4403      	add	r3, r0
 8006960:	4480      	add	r8, r0
 8006962:	4405      	add	r5, r0
 8006964:	9304      	str	r3, [sp, #16]
 8006966:	f1b8 0f00 	cmp.w	r8, #0
 800696a:	dd05      	ble.n	8006978 <_dtoa_r+0x838>
 800696c:	4659      	mov	r1, fp
 800696e:	4642      	mov	r2, r8
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fe1d 	bl	80075b0 <__lshift>
 8006976:	4683      	mov	fp, r0
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	dd05      	ble.n	800698a <_dtoa_r+0x84a>
 800697e:	4631      	mov	r1, r6
 8006980:	461a      	mov	r2, r3
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fe14 	bl	80075b0 <__lshift>
 8006988:	4606      	mov	r6, r0
 800698a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d069      	beq.n	8006a64 <_dtoa_r+0x924>
 8006990:	4631      	mov	r1, r6
 8006992:	4658      	mov	r0, fp
 8006994:	f000 fe78 	bl	8007688 <__mcmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	da63      	bge.n	8006a64 <_dtoa_r+0x924>
 800699c:	2300      	movs	r3, #0
 800699e:	4659      	mov	r1, fp
 80069a0:	220a      	movs	r2, #10
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 fc54 	bl	8007250 <__multadd>
 80069a8:	9b08      	ldr	r3, [sp, #32]
 80069aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ae:	4683      	mov	fp, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 818f 	beq.w	8006cd4 <_dtoa_r+0xb94>
 80069b6:	4639      	mov	r1, r7
 80069b8:	2300      	movs	r3, #0
 80069ba:	220a      	movs	r2, #10
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 fc47 	bl	8007250 <__multadd>
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	4607      	mov	r7, r0
 80069c8:	f300 808e 	bgt.w	8006ae8 <_dtoa_r+0x9a8>
 80069cc:	9b05      	ldr	r3, [sp, #20]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	dc50      	bgt.n	8006a74 <_dtoa_r+0x934>
 80069d2:	e089      	b.n	8006ae8 <_dtoa_r+0x9a8>
 80069d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069da:	e75d      	b.n	8006898 <_dtoa_r+0x758>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	1e5e      	subs	r6, r3, #1
 80069e0:	9b06      	ldr	r3, [sp, #24]
 80069e2:	42b3      	cmp	r3, r6
 80069e4:	bfbf      	itttt	lt
 80069e6:	9b06      	ldrlt	r3, [sp, #24]
 80069e8:	9606      	strlt	r6, [sp, #24]
 80069ea:	1af2      	sublt	r2, r6, r3
 80069ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80069ee:	bfb6      	itet	lt
 80069f0:	189b      	addlt	r3, r3, r2
 80069f2:	1b9e      	subge	r6, r3, r6
 80069f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	bfb8      	it	lt
 80069fa:	2600      	movlt	r6, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfb5      	itete	lt
 8006a00:	eba8 0503 	sublt.w	r5, r8, r3
 8006a04:	9b01      	ldrge	r3, [sp, #4]
 8006a06:	2300      	movlt	r3, #0
 8006a08:	4645      	movge	r5, r8
 8006a0a:	e747      	b.n	800689c <_dtoa_r+0x75c>
 8006a0c:	9e06      	ldr	r6, [sp, #24]
 8006a0e:	9f08      	ldr	r7, [sp, #32]
 8006a10:	4645      	mov	r5, r8
 8006a12:	e74c      	b.n	80068ae <_dtoa_r+0x76e>
 8006a14:	9a06      	ldr	r2, [sp, #24]
 8006a16:	e775      	b.n	8006904 <_dtoa_r+0x7c4>
 8006a18:	9b05      	ldr	r3, [sp, #20]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	dc18      	bgt.n	8006a50 <_dtoa_r+0x910>
 8006a1e:	9b02      	ldr	r3, [sp, #8]
 8006a20:	b9b3      	cbnz	r3, 8006a50 <_dtoa_r+0x910>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a28:	b9a3      	cbnz	r3, 8006a54 <_dtoa_r+0x914>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a30:	0d1b      	lsrs	r3, r3, #20
 8006a32:	051b      	lsls	r3, r3, #20
 8006a34:	b12b      	cbz	r3, 8006a42 <_dtoa_r+0x902>
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	9304      	str	r3, [sp, #16]
 8006a3c:	f108 0801 	add.w	r8, r8, #1
 8006a40:	2301      	movs	r3, #1
 8006a42:	9306      	str	r3, [sp, #24]
 8006a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f47f af74 	bne.w	8006934 <_dtoa_r+0x7f4>
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	e779      	b.n	8006944 <_dtoa_r+0x804>
 8006a50:	2300      	movs	r3, #0
 8006a52:	e7f6      	b.n	8006a42 <_dtoa_r+0x902>
 8006a54:	9b02      	ldr	r3, [sp, #8]
 8006a56:	e7f4      	b.n	8006a42 <_dtoa_r+0x902>
 8006a58:	d085      	beq.n	8006966 <_dtoa_r+0x826>
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	301c      	adds	r0, #28
 8006a5e:	e77d      	b.n	800695c <_dtoa_r+0x81c>
 8006a60:	40240000 	.word	0x40240000
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	dc38      	bgt.n	8006adc <_dtoa_r+0x99c>
 8006a6a:	9b05      	ldr	r3, [sp, #20]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	dd35      	ble.n	8006adc <_dtoa_r+0x99c>
 8006a70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a74:	f1b9 0f00 	cmp.w	r9, #0
 8006a78:	d10d      	bne.n	8006a96 <_dtoa_r+0x956>
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	2205      	movs	r2, #5
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fbe5 	bl	8007250 <__multadd>
 8006a86:	4601      	mov	r1, r0
 8006a88:	4606      	mov	r6, r0
 8006a8a:	4658      	mov	r0, fp
 8006a8c:	f000 fdfc 	bl	8007688 <__mcmp>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	f73f adbd 	bgt.w	8006610 <_dtoa_r+0x4d0>
 8006a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a98:	9d00      	ldr	r5, [sp, #0]
 8006a9a:	ea6f 0a03 	mvn.w	sl, r3
 8006a9e:	f04f 0800 	mov.w	r8, #0
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fbb1 	bl	800720c <_Bfree>
 8006aaa:	2f00      	cmp	r7, #0
 8006aac:	f43f aeb4 	beq.w	8006818 <_dtoa_r+0x6d8>
 8006ab0:	f1b8 0f00 	cmp.w	r8, #0
 8006ab4:	d005      	beq.n	8006ac2 <_dtoa_r+0x982>
 8006ab6:	45b8      	cmp	r8, r7
 8006ab8:	d003      	beq.n	8006ac2 <_dtoa_r+0x982>
 8006aba:	4641      	mov	r1, r8
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fba5 	bl	800720c <_Bfree>
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fba1 	bl	800720c <_Bfree>
 8006aca:	e6a5      	b.n	8006818 <_dtoa_r+0x6d8>
 8006acc:	2600      	movs	r6, #0
 8006ace:	4637      	mov	r7, r6
 8006ad0:	e7e1      	b.n	8006a96 <_dtoa_r+0x956>
 8006ad2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006ad4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ad8:	4637      	mov	r7, r6
 8006ada:	e599      	b.n	8006610 <_dtoa_r+0x4d0>
 8006adc:	9b08      	ldr	r3, [sp, #32]
 8006ade:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80fd 	beq.w	8006ce2 <_dtoa_r+0xba2>
 8006ae8:	2d00      	cmp	r5, #0
 8006aea:	dd05      	ble.n	8006af8 <_dtoa_r+0x9b8>
 8006aec:	4639      	mov	r1, r7
 8006aee:	462a      	mov	r2, r5
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fd5d 	bl	80075b0 <__lshift>
 8006af6:	4607      	mov	r7, r0
 8006af8:	9b06      	ldr	r3, [sp, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d05c      	beq.n	8006bb8 <_dtoa_r+0xa78>
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fb43 	bl	800718c <_Balloc>
 8006b06:	4605      	mov	r5, r0
 8006b08:	b928      	cbnz	r0, 8006b16 <_dtoa_r+0x9d6>
 8006b0a:	4b80      	ldr	r3, [pc, #512]	; (8006d0c <_dtoa_r+0xbcc>)
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b12:	f7ff bb2e 	b.w	8006172 <_dtoa_r+0x32>
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	3202      	adds	r2, #2
 8006b1a:	0092      	lsls	r2, r2, #2
 8006b1c:	f107 010c 	add.w	r1, r7, #12
 8006b20:	300c      	adds	r0, #12
 8006b22:	f000 fb25 	bl	8007170 <memcpy>
 8006b26:	2201      	movs	r2, #1
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fd40 	bl	80075b0 <__lshift>
 8006b30:	9b00      	ldr	r3, [sp, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	9b00      	ldr	r3, [sp, #0]
 8006b38:	444b      	add	r3, r9
 8006b3a:	9307      	str	r3, [sp, #28]
 8006b3c:	9b02      	ldr	r3, [sp, #8]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	46b8      	mov	r8, r7
 8006b44:	9306      	str	r3, [sp, #24]
 8006b46:	4607      	mov	r7, r0
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	4658      	mov	r0, fp
 8006b50:	9302      	str	r3, [sp, #8]
 8006b52:	f7ff fa69 	bl	8006028 <quorem>
 8006b56:	4603      	mov	r3, r0
 8006b58:	3330      	adds	r3, #48	; 0x30
 8006b5a:	9004      	str	r0, [sp, #16]
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	4658      	mov	r0, fp
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	f000 fd91 	bl	8007688 <__mcmp>
 8006b66:	463a      	mov	r2, r7
 8006b68:	4681      	mov	r9, r0
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fda7 	bl	80076c0 <__mdiff>
 8006b72:	68c2      	ldr	r2, [r0, #12]
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	4605      	mov	r5, r0
 8006b78:	bb02      	cbnz	r2, 8006bbc <_dtoa_r+0xa7c>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4658      	mov	r0, fp
 8006b7e:	f000 fd83 	bl	8007688 <__mcmp>
 8006b82:	9b08      	ldr	r3, [sp, #32]
 8006b84:	4602      	mov	r2, r0
 8006b86:	4629      	mov	r1, r5
 8006b88:	4620      	mov	r0, r4
 8006b8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006b8e:	f000 fb3d 	bl	800720c <_Bfree>
 8006b92:	9b05      	ldr	r3, [sp, #20]
 8006b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b96:	9d01      	ldr	r5, [sp, #4]
 8006b98:	ea43 0102 	orr.w	r1, r3, r2
 8006b9c:	9b06      	ldr	r3, [sp, #24]
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	d10d      	bne.n	8006bc0 <_dtoa_r+0xa80>
 8006ba4:	2b39      	cmp	r3, #57	; 0x39
 8006ba6:	d029      	beq.n	8006bfc <_dtoa_r+0xabc>
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	dd01      	ble.n	8006bb2 <_dtoa_r+0xa72>
 8006bae:	9b04      	ldr	r3, [sp, #16]
 8006bb0:	3331      	adds	r3, #49	; 0x31
 8006bb2:	9a02      	ldr	r2, [sp, #8]
 8006bb4:	7013      	strb	r3, [r2, #0]
 8006bb6:	e774      	b.n	8006aa2 <_dtoa_r+0x962>
 8006bb8:	4638      	mov	r0, r7
 8006bba:	e7b9      	b.n	8006b30 <_dtoa_r+0x9f0>
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	e7e2      	b.n	8006b86 <_dtoa_r+0xa46>
 8006bc0:	f1b9 0f00 	cmp.w	r9, #0
 8006bc4:	db06      	blt.n	8006bd4 <_dtoa_r+0xa94>
 8006bc6:	9905      	ldr	r1, [sp, #20]
 8006bc8:	ea41 0909 	orr.w	r9, r1, r9
 8006bcc:	9906      	ldr	r1, [sp, #24]
 8006bce:	ea59 0101 	orrs.w	r1, r9, r1
 8006bd2:	d120      	bne.n	8006c16 <_dtoa_r+0xad6>
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	ddec      	ble.n	8006bb2 <_dtoa_r+0xa72>
 8006bd8:	4659      	mov	r1, fp
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	f000 fce6 	bl	80075b0 <__lshift>
 8006be4:	4631      	mov	r1, r6
 8006be6:	4683      	mov	fp, r0
 8006be8:	f000 fd4e 	bl	8007688 <__mcmp>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	dc02      	bgt.n	8006bf8 <_dtoa_r+0xab8>
 8006bf2:	d1de      	bne.n	8006bb2 <_dtoa_r+0xa72>
 8006bf4:	07da      	lsls	r2, r3, #31
 8006bf6:	d5dc      	bpl.n	8006bb2 <_dtoa_r+0xa72>
 8006bf8:	2b39      	cmp	r3, #57	; 0x39
 8006bfa:	d1d8      	bne.n	8006bae <_dtoa_r+0xa6e>
 8006bfc:	9a02      	ldr	r2, [sp, #8]
 8006bfe:	2339      	movs	r3, #57	; 0x39
 8006c00:	7013      	strb	r3, [r2, #0]
 8006c02:	462b      	mov	r3, r5
 8006c04:	461d      	mov	r5, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c0c:	2a39      	cmp	r2, #57	; 0x39
 8006c0e:	d050      	beq.n	8006cb2 <_dtoa_r+0xb72>
 8006c10:	3201      	adds	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e745      	b.n	8006aa2 <_dtoa_r+0x962>
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	dd03      	ble.n	8006c22 <_dtoa_r+0xae2>
 8006c1a:	2b39      	cmp	r3, #57	; 0x39
 8006c1c:	d0ee      	beq.n	8006bfc <_dtoa_r+0xabc>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	e7c7      	b.n	8006bb2 <_dtoa_r+0xa72>
 8006c22:	9a01      	ldr	r2, [sp, #4]
 8006c24:	9907      	ldr	r1, [sp, #28]
 8006c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c2a:	428a      	cmp	r2, r1
 8006c2c:	d02a      	beq.n	8006c84 <_dtoa_r+0xb44>
 8006c2e:	4659      	mov	r1, fp
 8006c30:	2300      	movs	r3, #0
 8006c32:	220a      	movs	r2, #10
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 fb0b 	bl	8007250 <__multadd>
 8006c3a:	45b8      	cmp	r8, r7
 8006c3c:	4683      	mov	fp, r0
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 020a 	mov.w	r2, #10
 8006c46:	4641      	mov	r1, r8
 8006c48:	4620      	mov	r0, r4
 8006c4a:	d107      	bne.n	8006c5c <_dtoa_r+0xb1c>
 8006c4c:	f000 fb00 	bl	8007250 <__multadd>
 8006c50:	4680      	mov	r8, r0
 8006c52:	4607      	mov	r7, r0
 8006c54:	9b01      	ldr	r3, [sp, #4]
 8006c56:	3301      	adds	r3, #1
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	e775      	b.n	8006b48 <_dtoa_r+0xa08>
 8006c5c:	f000 faf8 	bl	8007250 <__multadd>
 8006c60:	4639      	mov	r1, r7
 8006c62:	4680      	mov	r8, r0
 8006c64:	2300      	movs	r3, #0
 8006c66:	220a      	movs	r2, #10
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 faf1 	bl	8007250 <__multadd>
 8006c6e:	4607      	mov	r7, r0
 8006c70:	e7f0      	b.n	8006c54 <_dtoa_r+0xb14>
 8006c72:	f1b9 0f00 	cmp.w	r9, #0
 8006c76:	9a00      	ldr	r2, [sp, #0]
 8006c78:	bfcc      	ite	gt
 8006c7a:	464d      	movgt	r5, r9
 8006c7c:	2501      	movle	r5, #1
 8006c7e:	4415      	add	r5, r2
 8006c80:	f04f 0800 	mov.w	r8, #0
 8006c84:	4659      	mov	r1, fp
 8006c86:	2201      	movs	r2, #1
 8006c88:	4620      	mov	r0, r4
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	f000 fc90 	bl	80075b0 <__lshift>
 8006c90:	4631      	mov	r1, r6
 8006c92:	4683      	mov	fp, r0
 8006c94:	f000 fcf8 	bl	8007688 <__mcmp>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	dcb2      	bgt.n	8006c02 <_dtoa_r+0xac2>
 8006c9c:	d102      	bne.n	8006ca4 <_dtoa_r+0xb64>
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	07db      	lsls	r3, r3, #31
 8006ca2:	d4ae      	bmi.n	8006c02 <_dtoa_r+0xac2>
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	461d      	mov	r5, r3
 8006ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cac:	2a30      	cmp	r2, #48	; 0x30
 8006cae:	d0fa      	beq.n	8006ca6 <_dtoa_r+0xb66>
 8006cb0:	e6f7      	b.n	8006aa2 <_dtoa_r+0x962>
 8006cb2:	9a00      	ldr	r2, [sp, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d1a5      	bne.n	8006c04 <_dtoa_r+0xac4>
 8006cb8:	f10a 0a01 	add.w	sl, sl, #1
 8006cbc:	2331      	movs	r3, #49	; 0x31
 8006cbe:	e779      	b.n	8006bb4 <_dtoa_r+0xa74>
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <_dtoa_r+0xbd0>)
 8006cc2:	f7ff baaf 	b.w	8006224 <_dtoa_r+0xe4>
 8006cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f47f aa86 	bne.w	80061da <_dtoa_r+0x9a>
 8006cce:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <_dtoa_r+0xbd4>)
 8006cd0:	f7ff baa8 	b.w	8006224 <_dtoa_r+0xe4>
 8006cd4:	f1b9 0f00 	cmp.w	r9, #0
 8006cd8:	dc03      	bgt.n	8006ce2 <_dtoa_r+0xba2>
 8006cda:	9b05      	ldr	r3, [sp, #20]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	f73f aec9 	bgt.w	8006a74 <_dtoa_r+0x934>
 8006ce2:	9d00      	ldr	r5, [sp, #0]
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4658      	mov	r0, fp
 8006ce8:	f7ff f99e 	bl	8006028 <quorem>
 8006cec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8006cf4:	9a00      	ldr	r2, [sp, #0]
 8006cf6:	1aaa      	subs	r2, r5, r2
 8006cf8:	4591      	cmp	r9, r2
 8006cfa:	ddba      	ble.n	8006c72 <_dtoa_r+0xb32>
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	2300      	movs	r3, #0
 8006d00:	220a      	movs	r2, #10
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 faa4 	bl	8007250 <__multadd>
 8006d08:	4683      	mov	fp, r0
 8006d0a:	e7eb      	b.n	8006ce4 <_dtoa_r+0xba4>
 8006d0c:	0800818f 	.word	0x0800818f
 8006d10:	080080e8 	.word	0x080080e8
 8006d14:	0800810c 	.word	0x0800810c

08006d18 <__sflush_r>:
 8006d18:	898a      	ldrh	r2, [r1, #12]
 8006d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1e:	4605      	mov	r5, r0
 8006d20:	0710      	lsls	r0, r2, #28
 8006d22:	460c      	mov	r4, r1
 8006d24:	d458      	bmi.n	8006dd8 <__sflush_r+0xc0>
 8006d26:	684b      	ldr	r3, [r1, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dc05      	bgt.n	8006d38 <__sflush_r+0x20>
 8006d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dc02      	bgt.n	8006d38 <__sflush_r+0x20>
 8006d32:	2000      	movs	r0, #0
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d3a:	2e00      	cmp	r6, #0
 8006d3c:	d0f9      	beq.n	8006d32 <__sflush_r+0x1a>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d44:	682f      	ldr	r7, [r5, #0]
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	d032      	beq.n	8006db0 <__sflush_r+0x98>
 8006d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	075a      	lsls	r2, r3, #29
 8006d50:	d505      	bpl.n	8006d5e <__sflush_r+0x46>
 8006d52:	6863      	ldr	r3, [r4, #4]
 8006d54:	1ac0      	subs	r0, r0, r3
 8006d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d58:	b10b      	cbz	r3, 8006d5e <__sflush_r+0x46>
 8006d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d5c:	1ac0      	subs	r0, r0, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4602      	mov	r2, r0
 8006d62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d64:	6a21      	ldr	r1, [r4, #32]
 8006d66:	4628      	mov	r0, r5
 8006d68:	47b0      	blx	r6
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	d106      	bne.n	8006d7e <__sflush_r+0x66>
 8006d70:	6829      	ldr	r1, [r5, #0]
 8006d72:	291d      	cmp	r1, #29
 8006d74:	d82c      	bhi.n	8006dd0 <__sflush_r+0xb8>
 8006d76:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <__sflush_r+0x108>)
 8006d78:	40ca      	lsrs	r2, r1
 8006d7a:	07d6      	lsls	r6, r2, #31
 8006d7c:	d528      	bpl.n	8006dd0 <__sflush_r+0xb8>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6062      	str	r2, [r4, #4]
 8006d82:	04d9      	lsls	r1, r3, #19
 8006d84:	6922      	ldr	r2, [r4, #16]
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	d504      	bpl.n	8006d94 <__sflush_r+0x7c>
 8006d8a:	1c42      	adds	r2, r0, #1
 8006d8c:	d101      	bne.n	8006d92 <__sflush_r+0x7a>
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	b903      	cbnz	r3, 8006d94 <__sflush_r+0x7c>
 8006d92:	6560      	str	r0, [r4, #84]	; 0x54
 8006d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d96:	602f      	str	r7, [r5, #0]
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	d0ca      	beq.n	8006d32 <__sflush_r+0x1a>
 8006d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006da0:	4299      	cmp	r1, r3
 8006da2:	d002      	beq.n	8006daa <__sflush_r+0x92>
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 fd7f 	bl	80078a8 <_free_r>
 8006daa:	2000      	movs	r0, #0
 8006dac:	6360      	str	r0, [r4, #52]	; 0x34
 8006dae:	e7c1      	b.n	8006d34 <__sflush_r+0x1c>
 8006db0:	6a21      	ldr	r1, [r4, #32]
 8006db2:	2301      	movs	r3, #1
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b0      	blx	r6
 8006db8:	1c41      	adds	r1, r0, #1
 8006dba:	d1c7      	bne.n	8006d4c <__sflush_r+0x34>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0c4      	beq.n	8006d4c <__sflush_r+0x34>
 8006dc2:	2b1d      	cmp	r3, #29
 8006dc4:	d001      	beq.n	8006dca <__sflush_r+0xb2>
 8006dc6:	2b16      	cmp	r3, #22
 8006dc8:	d101      	bne.n	8006dce <__sflush_r+0xb6>
 8006dca:	602f      	str	r7, [r5, #0]
 8006dcc:	e7b1      	b.n	8006d32 <__sflush_r+0x1a>
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	e7ad      	b.n	8006d34 <__sflush_r+0x1c>
 8006dd8:	690f      	ldr	r7, [r1, #16]
 8006dda:	2f00      	cmp	r7, #0
 8006ddc:	d0a9      	beq.n	8006d32 <__sflush_r+0x1a>
 8006dde:	0793      	lsls	r3, r2, #30
 8006de0:	680e      	ldr	r6, [r1, #0]
 8006de2:	bf08      	it	eq
 8006de4:	694b      	ldreq	r3, [r1, #20]
 8006de6:	600f      	str	r7, [r1, #0]
 8006de8:	bf18      	it	ne
 8006dea:	2300      	movne	r3, #0
 8006dec:	eba6 0807 	sub.w	r8, r6, r7
 8006df0:	608b      	str	r3, [r1, #8]
 8006df2:	f1b8 0f00 	cmp.w	r8, #0
 8006df6:	dd9c      	ble.n	8006d32 <__sflush_r+0x1a>
 8006df8:	6a21      	ldr	r1, [r4, #32]
 8006dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dfc:	4643      	mov	r3, r8
 8006dfe:	463a      	mov	r2, r7
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b0      	blx	r6
 8006e04:	2800      	cmp	r0, #0
 8006e06:	dc06      	bgt.n	8006e16 <__sflush_r+0xfe>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e78e      	b.n	8006d34 <__sflush_r+0x1c>
 8006e16:	4407      	add	r7, r0
 8006e18:	eba8 0800 	sub.w	r8, r8, r0
 8006e1c:	e7e9      	b.n	8006df2 <__sflush_r+0xda>
 8006e1e:	bf00      	nop
 8006e20:	20400001 	.word	0x20400001

08006e24 <_fflush_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	690b      	ldr	r3, [r1, #16]
 8006e28:	4605      	mov	r5, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	b913      	cbnz	r3, 8006e34 <_fflush_r+0x10>
 8006e2e:	2500      	movs	r5, #0
 8006e30:	4628      	mov	r0, r5
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	b118      	cbz	r0, 8006e3e <_fflush_r+0x1a>
 8006e36:	6983      	ldr	r3, [r0, #24]
 8006e38:	b90b      	cbnz	r3, 8006e3e <_fflush_r+0x1a>
 8006e3a:	f000 f887 	bl	8006f4c <__sinit>
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <_fflush_r+0x6c>)
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d11b      	bne.n	8006e7c <_fflush_r+0x58>
 8006e44:	686c      	ldr	r4, [r5, #4]
 8006e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0ef      	beq.n	8006e2e <_fflush_r+0xa>
 8006e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e50:	07d0      	lsls	r0, r2, #31
 8006e52:	d404      	bmi.n	8006e5e <_fflush_r+0x3a>
 8006e54:	0599      	lsls	r1, r3, #22
 8006e56:	d402      	bmi.n	8006e5e <_fflush_r+0x3a>
 8006e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e5a:	f000 f91a 	bl	8007092 <__retarget_lock_acquire_recursive>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	4621      	mov	r1, r4
 8006e62:	f7ff ff59 	bl	8006d18 <__sflush_r>
 8006e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e68:	07da      	lsls	r2, r3, #31
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	d4e0      	bmi.n	8006e30 <_fflush_r+0xc>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	d4dd      	bmi.n	8006e30 <_fflush_r+0xc>
 8006e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e76:	f000 f90d 	bl	8007094 <__retarget_lock_release_recursive>
 8006e7a:	e7d9      	b.n	8006e30 <_fflush_r+0xc>
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <_fflush_r+0x70>)
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d101      	bne.n	8006e86 <_fflush_r+0x62>
 8006e82:	68ac      	ldr	r4, [r5, #8]
 8006e84:	e7df      	b.n	8006e46 <_fflush_r+0x22>
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <_fflush_r+0x74>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	bf08      	it	eq
 8006e8c:	68ec      	ldreq	r4, [r5, #12]
 8006e8e:	e7da      	b.n	8006e46 <_fflush_r+0x22>
 8006e90:	080081c0 	.word	0x080081c0
 8006e94:	080081e0 	.word	0x080081e0
 8006e98:	080081a0 	.word	0x080081a0

08006e9c <std>:
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eaa:	6083      	str	r3, [r0, #8]
 8006eac:	8181      	strh	r1, [r0, #12]
 8006eae:	6643      	str	r3, [r0, #100]	; 0x64
 8006eb0:	81c2      	strh	r2, [r0, #14]
 8006eb2:	6183      	str	r3, [r0, #24]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	305c      	adds	r0, #92	; 0x5c
 8006eba:	f7fe fadf 	bl	800547c <memset>
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x38>)
 8006ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x3c>)
 8006ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x40>)
 8006ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <std+0x44>)
 8006ecc:	6224      	str	r4, [r4, #32]
 8006ece:	6323      	str	r3, [r4, #48]	; 0x30
 8006ed0:	bd10      	pop	{r4, pc}
 8006ed2:	bf00      	nop
 8006ed4:	08007d61 	.word	0x08007d61
 8006ed8:	08007d83 	.word	0x08007d83
 8006edc:	08007dbb 	.word	0x08007dbb
 8006ee0:	08007ddf 	.word	0x08007ddf

08006ee4 <_cleanup_r>:
 8006ee4:	4901      	ldr	r1, [pc, #4]	; (8006eec <_cleanup_r+0x8>)
 8006ee6:	f000 b8af 	b.w	8007048 <_fwalk_reent>
 8006eea:	bf00      	nop
 8006eec:	08006e25 	.word	0x08006e25

08006ef0 <__sfmoreglue>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	1e4a      	subs	r2, r1, #1
 8006ef4:	2568      	movs	r5, #104	; 0x68
 8006ef6:	4355      	muls	r5, r2
 8006ef8:	460e      	mov	r6, r1
 8006efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006efe:	f000 fd23 	bl	8007948 <_malloc_r>
 8006f02:	4604      	mov	r4, r0
 8006f04:	b140      	cbz	r0, 8006f18 <__sfmoreglue+0x28>
 8006f06:	2100      	movs	r1, #0
 8006f08:	e9c0 1600 	strd	r1, r6, [r0]
 8006f0c:	300c      	adds	r0, #12
 8006f0e:	60a0      	str	r0, [r4, #8]
 8006f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f14:	f7fe fab2 	bl	800547c <memset>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}

08006f1c <__sfp_lock_acquire>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__sfp_lock_acquire+0x8>)
 8006f1e:	f000 b8b8 	b.w	8007092 <__retarget_lock_acquire_recursive>
 8006f22:	bf00      	nop
 8006f24:	20000448 	.word	0x20000448

08006f28 <__sfp_lock_release>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__sfp_lock_release+0x8>)
 8006f2a:	f000 b8b3 	b.w	8007094 <__retarget_lock_release_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20000448 	.word	0x20000448

08006f34 <__sinit_lock_acquire>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__sinit_lock_acquire+0x8>)
 8006f36:	f000 b8ac 	b.w	8007092 <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20000443 	.word	0x20000443

08006f40 <__sinit_lock_release>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__sinit_lock_release+0x8>)
 8006f42:	f000 b8a7 	b.w	8007094 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	20000443 	.word	0x20000443

08006f4c <__sinit>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4604      	mov	r4, r0
 8006f50:	f7ff fff0 	bl	8006f34 <__sinit_lock_acquire>
 8006f54:	69a3      	ldr	r3, [r4, #24]
 8006f56:	b11b      	cbz	r3, 8006f60 <__sinit+0x14>
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5c:	f7ff bff0 	b.w	8006f40 <__sinit_lock_release>
 8006f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f64:	6523      	str	r3, [r4, #80]	; 0x50
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <__sinit+0x68>)
 8006f68:	4a13      	ldr	r2, [pc, #76]	; (8006fb8 <__sinit+0x6c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	bf04      	itt	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	61a3      	streq	r3, [r4, #24]
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f820 	bl	8006fbc <__sfp>
 8006f7c:	6060      	str	r0, [r4, #4]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 f81c 	bl	8006fbc <__sfp>
 8006f84:	60a0      	str	r0, [r4, #8]
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 f818 	bl	8006fbc <__sfp>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	60e0      	str	r0, [r4, #12]
 8006f90:	2104      	movs	r1, #4
 8006f92:	6860      	ldr	r0, [r4, #4]
 8006f94:	f7ff ff82 	bl	8006e9c <std>
 8006f98:	68a0      	ldr	r0, [r4, #8]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2109      	movs	r1, #9
 8006f9e:	f7ff ff7d 	bl	8006e9c <std>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	2112      	movs	r1, #18
 8006fa8:	f7ff ff78 	bl	8006e9c <std>
 8006fac:	2301      	movs	r3, #1
 8006fae:	61a3      	str	r3, [r4, #24]
 8006fb0:	e7d2      	b.n	8006f58 <__sinit+0xc>
 8006fb2:	bf00      	nop
 8006fb4:	080080d4 	.word	0x080080d4
 8006fb8:	08006ee5 	.word	0x08006ee5

08006fbc <__sfp>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	f7ff ffac 	bl	8006f1c <__sfp_lock_acquire>
 8006fc4:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <__sfp+0x84>)
 8006fc6:	681e      	ldr	r6, [r3, #0]
 8006fc8:	69b3      	ldr	r3, [r6, #24]
 8006fca:	b913      	cbnz	r3, 8006fd2 <__sfp+0x16>
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f7ff ffbd 	bl	8006f4c <__sinit>
 8006fd2:	3648      	adds	r6, #72	; 0x48
 8006fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	d503      	bpl.n	8006fe4 <__sfp+0x28>
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	b30b      	cbz	r3, 8007024 <__sfp+0x68>
 8006fe0:	6836      	ldr	r6, [r6, #0]
 8006fe2:	e7f7      	b.n	8006fd4 <__sfp+0x18>
 8006fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fe8:	b9d5      	cbnz	r5, 8007020 <__sfp+0x64>
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <__sfp+0x88>)
 8006fec:	60e3      	str	r3, [r4, #12]
 8006fee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ff4:	f000 f84c 	bl	8007090 <__retarget_lock_init_recursive>
 8006ff8:	f7ff ff96 	bl	8006f28 <__sfp_lock_release>
 8006ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007004:	6025      	str	r5, [r4, #0]
 8007006:	61a5      	str	r5, [r4, #24]
 8007008:	2208      	movs	r2, #8
 800700a:	4629      	mov	r1, r5
 800700c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007010:	f7fe fa34 	bl	800547c <memset>
 8007014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800701c:	4620      	mov	r0, r4
 800701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007020:	3468      	adds	r4, #104	; 0x68
 8007022:	e7d9      	b.n	8006fd8 <__sfp+0x1c>
 8007024:	2104      	movs	r1, #4
 8007026:	4638      	mov	r0, r7
 8007028:	f7ff ff62 	bl	8006ef0 <__sfmoreglue>
 800702c:	4604      	mov	r4, r0
 800702e:	6030      	str	r0, [r6, #0]
 8007030:	2800      	cmp	r0, #0
 8007032:	d1d5      	bne.n	8006fe0 <__sfp+0x24>
 8007034:	f7ff ff78 	bl	8006f28 <__sfp_lock_release>
 8007038:	230c      	movs	r3, #12
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	e7ee      	b.n	800701c <__sfp+0x60>
 800703e:	bf00      	nop
 8007040:	080080d4 	.word	0x080080d4
 8007044:	ffff0001 	.word	0xffff0001

08007048 <_fwalk_reent>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	4606      	mov	r6, r0
 800704e:	4688      	mov	r8, r1
 8007050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007054:	2700      	movs	r7, #0
 8007056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800705a:	f1b9 0901 	subs.w	r9, r9, #1
 800705e:	d505      	bpl.n	800706c <_fwalk_reent+0x24>
 8007060:	6824      	ldr	r4, [r4, #0]
 8007062:	2c00      	cmp	r4, #0
 8007064:	d1f7      	bne.n	8007056 <_fwalk_reent+0xe>
 8007066:	4638      	mov	r0, r7
 8007068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706c:	89ab      	ldrh	r3, [r5, #12]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d907      	bls.n	8007082 <_fwalk_reent+0x3a>
 8007072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007076:	3301      	adds	r3, #1
 8007078:	d003      	beq.n	8007082 <_fwalk_reent+0x3a>
 800707a:	4629      	mov	r1, r5
 800707c:	4630      	mov	r0, r6
 800707e:	47c0      	blx	r8
 8007080:	4307      	orrs	r7, r0
 8007082:	3568      	adds	r5, #104	; 0x68
 8007084:	e7e9      	b.n	800705a <_fwalk_reent+0x12>
	...

08007088 <_localeconv_r>:
 8007088:	4800      	ldr	r0, [pc, #0]	; (800708c <_localeconv_r+0x4>)
 800708a:	4770      	bx	lr
 800708c:	20000160 	.word	0x20000160

08007090 <__retarget_lock_init_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_acquire_recursive>:
 8007092:	4770      	bx	lr

08007094 <__retarget_lock_release_recursive>:
 8007094:	4770      	bx	lr

08007096 <__swhatbuf_r>:
 8007096:	b570      	push	{r4, r5, r6, lr}
 8007098:	460e      	mov	r6, r1
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	2900      	cmp	r1, #0
 80070a0:	b096      	sub	sp, #88	; 0x58
 80070a2:	4614      	mov	r4, r2
 80070a4:	461d      	mov	r5, r3
 80070a6:	da07      	bge.n	80070b8 <__swhatbuf_r+0x22>
 80070a8:	2300      	movs	r3, #0
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	89b3      	ldrh	r3, [r6, #12]
 80070ae:	061a      	lsls	r2, r3, #24
 80070b0:	d410      	bmi.n	80070d4 <__swhatbuf_r+0x3e>
 80070b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070b6:	e00e      	b.n	80070d6 <__swhatbuf_r+0x40>
 80070b8:	466a      	mov	r2, sp
 80070ba:	f000 fee7 	bl	8007e8c <_fstat_r>
 80070be:	2800      	cmp	r0, #0
 80070c0:	dbf2      	blt.n	80070a8 <__swhatbuf_r+0x12>
 80070c2:	9a01      	ldr	r2, [sp, #4]
 80070c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070cc:	425a      	negs	r2, r3
 80070ce:	415a      	adcs	r2, r3
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	e7ee      	b.n	80070b2 <__swhatbuf_r+0x1c>
 80070d4:	2340      	movs	r3, #64	; 0x40
 80070d6:	2000      	movs	r0, #0
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	b016      	add	sp, #88	; 0x58
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080070e0 <__smakebuf_r>:
 80070e0:	898b      	ldrh	r3, [r1, #12]
 80070e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070e4:	079d      	lsls	r5, r3, #30
 80070e6:	4606      	mov	r6, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	d507      	bpl.n	80070fc <__smakebuf_r+0x1c>
 80070ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	6123      	str	r3, [r4, #16]
 80070f4:	2301      	movs	r3, #1
 80070f6:	6163      	str	r3, [r4, #20]
 80070f8:	b002      	add	sp, #8
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	ab01      	add	r3, sp, #4
 80070fe:	466a      	mov	r2, sp
 8007100:	f7ff ffc9 	bl	8007096 <__swhatbuf_r>
 8007104:	9900      	ldr	r1, [sp, #0]
 8007106:	4605      	mov	r5, r0
 8007108:	4630      	mov	r0, r6
 800710a:	f000 fc1d 	bl	8007948 <_malloc_r>
 800710e:	b948      	cbnz	r0, 8007124 <__smakebuf_r+0x44>
 8007110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007114:	059a      	lsls	r2, r3, #22
 8007116:	d4ef      	bmi.n	80070f8 <__smakebuf_r+0x18>
 8007118:	f023 0303 	bic.w	r3, r3, #3
 800711c:	f043 0302 	orr.w	r3, r3, #2
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	e7e3      	b.n	80070ec <__smakebuf_r+0xc>
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <__smakebuf_r+0x7c>)
 8007126:	62b3      	str	r3, [r6, #40]	; 0x28
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	6020      	str	r0, [r4, #0]
 800712c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	9b00      	ldr	r3, [sp, #0]
 8007134:	6163      	str	r3, [r4, #20]
 8007136:	9b01      	ldr	r3, [sp, #4]
 8007138:	6120      	str	r0, [r4, #16]
 800713a:	b15b      	cbz	r3, 8007154 <__smakebuf_r+0x74>
 800713c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007140:	4630      	mov	r0, r6
 8007142:	f000 feb5 	bl	8007eb0 <_isatty_r>
 8007146:	b128      	cbz	r0, 8007154 <__smakebuf_r+0x74>
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f023 0303 	bic.w	r3, r3, #3
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	81a3      	strh	r3, [r4, #12]
 8007154:	89a0      	ldrh	r0, [r4, #12]
 8007156:	4305      	orrs	r5, r0
 8007158:	81a5      	strh	r5, [r4, #12]
 800715a:	e7cd      	b.n	80070f8 <__smakebuf_r+0x18>
 800715c:	08006ee5 	.word	0x08006ee5

08007160 <malloc>:
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <malloc+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f000 bbef 	b.w	8007948 <_malloc_r>
 800716a:	bf00      	nop
 800716c:	2000000c 	.word	0x2000000c

08007170 <memcpy>:
 8007170:	440a      	add	r2, r1
 8007172:	4291      	cmp	r1, r2
 8007174:	f100 33ff 	add.w	r3, r0, #4294967295
 8007178:	d100      	bne.n	800717c <memcpy+0xc>
 800717a:	4770      	bx	lr
 800717c:	b510      	push	{r4, lr}
 800717e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007186:	4291      	cmp	r1, r2
 8007188:	d1f9      	bne.n	800717e <memcpy+0xe>
 800718a:	bd10      	pop	{r4, pc}

0800718c <_Balloc>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007190:	4604      	mov	r4, r0
 8007192:	460d      	mov	r5, r1
 8007194:	b976      	cbnz	r6, 80071b4 <_Balloc+0x28>
 8007196:	2010      	movs	r0, #16
 8007198:	f7ff ffe2 	bl	8007160 <malloc>
 800719c:	4602      	mov	r2, r0
 800719e:	6260      	str	r0, [r4, #36]	; 0x24
 80071a0:	b920      	cbnz	r0, 80071ac <_Balloc+0x20>
 80071a2:	4b18      	ldr	r3, [pc, #96]	; (8007204 <_Balloc+0x78>)
 80071a4:	4818      	ldr	r0, [pc, #96]	; (8007208 <_Balloc+0x7c>)
 80071a6:	2166      	movs	r1, #102	; 0x66
 80071a8:	f000 fe30 	bl	8007e0c <__assert_func>
 80071ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071b0:	6006      	str	r6, [r0, #0]
 80071b2:	60c6      	str	r6, [r0, #12]
 80071b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071b6:	68f3      	ldr	r3, [r6, #12]
 80071b8:	b183      	cbz	r3, 80071dc <_Balloc+0x50>
 80071ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071c2:	b9b8      	cbnz	r0, 80071f4 <_Balloc+0x68>
 80071c4:	2101      	movs	r1, #1
 80071c6:	fa01 f605 	lsl.w	r6, r1, r5
 80071ca:	1d72      	adds	r2, r6, #5
 80071cc:	0092      	lsls	r2, r2, #2
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fb5a 	bl	8007888 <_calloc_r>
 80071d4:	b160      	cbz	r0, 80071f0 <_Balloc+0x64>
 80071d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071da:	e00e      	b.n	80071fa <_Balloc+0x6e>
 80071dc:	2221      	movs	r2, #33	; 0x21
 80071de:	2104      	movs	r1, #4
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fb51 	bl	8007888 <_calloc_r>
 80071e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e8:	60f0      	str	r0, [r6, #12]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e4      	bne.n	80071ba <_Balloc+0x2e>
 80071f0:	2000      	movs	r0, #0
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	6802      	ldr	r2, [r0, #0]
 80071f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071fa:	2300      	movs	r3, #0
 80071fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007200:	e7f7      	b.n	80071f2 <_Balloc+0x66>
 8007202:	bf00      	nop
 8007204:	08008119 	.word	0x08008119
 8007208:	08008200 	.word	0x08008200

0800720c <_Bfree>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007210:	4605      	mov	r5, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b976      	cbnz	r6, 8007234 <_Bfree+0x28>
 8007216:	2010      	movs	r0, #16
 8007218:	f7ff ffa2 	bl	8007160 <malloc>
 800721c:	4602      	mov	r2, r0
 800721e:	6268      	str	r0, [r5, #36]	; 0x24
 8007220:	b920      	cbnz	r0, 800722c <_Bfree+0x20>
 8007222:	4b09      	ldr	r3, [pc, #36]	; (8007248 <_Bfree+0x3c>)
 8007224:	4809      	ldr	r0, [pc, #36]	; (800724c <_Bfree+0x40>)
 8007226:	218a      	movs	r1, #138	; 0x8a
 8007228:	f000 fdf0 	bl	8007e0c <__assert_func>
 800722c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007230:	6006      	str	r6, [r0, #0]
 8007232:	60c6      	str	r6, [r0, #12]
 8007234:	b13c      	cbz	r4, 8007246 <_Bfree+0x3a>
 8007236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007238:	6862      	ldr	r2, [r4, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007240:	6021      	str	r1, [r4, #0]
 8007242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	08008119 	.word	0x08008119
 800724c:	08008200 	.word	0x08008200

08007250 <__multadd>:
 8007250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007254:	690e      	ldr	r6, [r1, #16]
 8007256:	4607      	mov	r7, r0
 8007258:	4698      	mov	r8, r3
 800725a:	460c      	mov	r4, r1
 800725c:	f101 0014 	add.w	r0, r1, #20
 8007260:	2300      	movs	r3, #0
 8007262:	6805      	ldr	r5, [r0, #0]
 8007264:	b2a9      	uxth	r1, r5
 8007266:	fb02 8101 	mla	r1, r2, r1, r8
 800726a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800726e:	0c2d      	lsrs	r5, r5, #16
 8007270:	fb02 c505 	mla	r5, r2, r5, ip
 8007274:	b289      	uxth	r1, r1
 8007276:	3301      	adds	r3, #1
 8007278:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800727c:	429e      	cmp	r6, r3
 800727e:	f840 1b04 	str.w	r1, [r0], #4
 8007282:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007286:	dcec      	bgt.n	8007262 <__multadd+0x12>
 8007288:	f1b8 0f00 	cmp.w	r8, #0
 800728c:	d022      	beq.n	80072d4 <__multadd+0x84>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	42b3      	cmp	r3, r6
 8007292:	dc19      	bgt.n	80072c8 <__multadd+0x78>
 8007294:	6861      	ldr	r1, [r4, #4]
 8007296:	4638      	mov	r0, r7
 8007298:	3101      	adds	r1, #1
 800729a:	f7ff ff77 	bl	800718c <_Balloc>
 800729e:	4605      	mov	r5, r0
 80072a0:	b928      	cbnz	r0, 80072ae <__multadd+0x5e>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <__multadd+0x8c>)
 80072a6:	480e      	ldr	r0, [pc, #56]	; (80072e0 <__multadd+0x90>)
 80072a8:	21b5      	movs	r1, #181	; 0xb5
 80072aa:	f000 fdaf 	bl	8007e0c <__assert_func>
 80072ae:	6922      	ldr	r2, [r4, #16]
 80072b0:	3202      	adds	r2, #2
 80072b2:	f104 010c 	add.w	r1, r4, #12
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	300c      	adds	r0, #12
 80072ba:	f7ff ff59 	bl	8007170 <memcpy>
 80072be:	4621      	mov	r1, r4
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff ffa3 	bl	800720c <_Bfree>
 80072c6:	462c      	mov	r4, r5
 80072c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80072cc:	3601      	adds	r6, #1
 80072ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80072d2:	6126      	str	r6, [r4, #16]
 80072d4:	4620      	mov	r0, r4
 80072d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072da:	bf00      	nop
 80072dc:	0800818f 	.word	0x0800818f
 80072e0:	08008200 	.word	0x08008200

080072e4 <__hi0bits>:
 80072e4:	0c03      	lsrs	r3, r0, #16
 80072e6:	041b      	lsls	r3, r3, #16
 80072e8:	b9d3      	cbnz	r3, 8007320 <__hi0bits+0x3c>
 80072ea:	0400      	lsls	r0, r0, #16
 80072ec:	2310      	movs	r3, #16
 80072ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072f2:	bf04      	itt	eq
 80072f4:	0200      	lsleq	r0, r0, #8
 80072f6:	3308      	addeq	r3, #8
 80072f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072fc:	bf04      	itt	eq
 80072fe:	0100      	lsleq	r0, r0, #4
 8007300:	3304      	addeq	r3, #4
 8007302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007306:	bf04      	itt	eq
 8007308:	0080      	lsleq	r0, r0, #2
 800730a:	3302      	addeq	r3, #2
 800730c:	2800      	cmp	r0, #0
 800730e:	db05      	blt.n	800731c <__hi0bits+0x38>
 8007310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007314:	f103 0301 	add.w	r3, r3, #1
 8007318:	bf08      	it	eq
 800731a:	2320      	moveq	r3, #32
 800731c:	4618      	mov	r0, r3
 800731e:	4770      	bx	lr
 8007320:	2300      	movs	r3, #0
 8007322:	e7e4      	b.n	80072ee <__hi0bits+0xa>

08007324 <__lo0bits>:
 8007324:	6803      	ldr	r3, [r0, #0]
 8007326:	f013 0207 	ands.w	r2, r3, #7
 800732a:	4601      	mov	r1, r0
 800732c:	d00b      	beq.n	8007346 <__lo0bits+0x22>
 800732e:	07da      	lsls	r2, r3, #31
 8007330:	d424      	bmi.n	800737c <__lo0bits+0x58>
 8007332:	0798      	lsls	r0, r3, #30
 8007334:	bf49      	itett	mi
 8007336:	085b      	lsrmi	r3, r3, #1
 8007338:	089b      	lsrpl	r3, r3, #2
 800733a:	2001      	movmi	r0, #1
 800733c:	600b      	strmi	r3, [r1, #0]
 800733e:	bf5c      	itt	pl
 8007340:	600b      	strpl	r3, [r1, #0]
 8007342:	2002      	movpl	r0, #2
 8007344:	4770      	bx	lr
 8007346:	b298      	uxth	r0, r3
 8007348:	b9b0      	cbnz	r0, 8007378 <__lo0bits+0x54>
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	2010      	movs	r0, #16
 800734e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007352:	bf04      	itt	eq
 8007354:	0a1b      	lsreq	r3, r3, #8
 8007356:	3008      	addeq	r0, #8
 8007358:	071a      	lsls	r2, r3, #28
 800735a:	bf04      	itt	eq
 800735c:	091b      	lsreq	r3, r3, #4
 800735e:	3004      	addeq	r0, #4
 8007360:	079a      	lsls	r2, r3, #30
 8007362:	bf04      	itt	eq
 8007364:	089b      	lsreq	r3, r3, #2
 8007366:	3002      	addeq	r0, #2
 8007368:	07da      	lsls	r2, r3, #31
 800736a:	d403      	bmi.n	8007374 <__lo0bits+0x50>
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	f100 0001 	add.w	r0, r0, #1
 8007372:	d005      	beq.n	8007380 <__lo0bits+0x5c>
 8007374:	600b      	str	r3, [r1, #0]
 8007376:	4770      	bx	lr
 8007378:	4610      	mov	r0, r2
 800737a:	e7e8      	b.n	800734e <__lo0bits+0x2a>
 800737c:	2000      	movs	r0, #0
 800737e:	4770      	bx	lr
 8007380:	2020      	movs	r0, #32
 8007382:	4770      	bx	lr

08007384 <__i2b>:
 8007384:	b510      	push	{r4, lr}
 8007386:	460c      	mov	r4, r1
 8007388:	2101      	movs	r1, #1
 800738a:	f7ff feff 	bl	800718c <_Balloc>
 800738e:	4602      	mov	r2, r0
 8007390:	b928      	cbnz	r0, 800739e <__i2b+0x1a>
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <__i2b+0x24>)
 8007394:	4805      	ldr	r0, [pc, #20]	; (80073ac <__i2b+0x28>)
 8007396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800739a:	f000 fd37 	bl	8007e0c <__assert_func>
 800739e:	2301      	movs	r3, #1
 80073a0:	6144      	str	r4, [r0, #20]
 80073a2:	6103      	str	r3, [r0, #16]
 80073a4:	bd10      	pop	{r4, pc}
 80073a6:	bf00      	nop
 80073a8:	0800818f 	.word	0x0800818f
 80073ac:	08008200 	.word	0x08008200

080073b0 <__multiply>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	4614      	mov	r4, r2
 80073b6:	690a      	ldr	r2, [r1, #16]
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	bfb8      	it	lt
 80073be:	460b      	movlt	r3, r1
 80073c0:	460d      	mov	r5, r1
 80073c2:	bfbc      	itt	lt
 80073c4:	4625      	movlt	r5, r4
 80073c6:	461c      	movlt	r4, r3
 80073c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80073cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073d0:	68ab      	ldr	r3, [r5, #8]
 80073d2:	6869      	ldr	r1, [r5, #4]
 80073d4:	eb0a 0709 	add.w	r7, sl, r9
 80073d8:	42bb      	cmp	r3, r7
 80073da:	b085      	sub	sp, #20
 80073dc:	bfb8      	it	lt
 80073de:	3101      	addlt	r1, #1
 80073e0:	f7ff fed4 	bl	800718c <_Balloc>
 80073e4:	b930      	cbnz	r0, 80073f4 <__multiply+0x44>
 80073e6:	4602      	mov	r2, r0
 80073e8:	4b42      	ldr	r3, [pc, #264]	; (80074f4 <__multiply+0x144>)
 80073ea:	4843      	ldr	r0, [pc, #268]	; (80074f8 <__multiply+0x148>)
 80073ec:	f240 115d 	movw	r1, #349	; 0x15d
 80073f0:	f000 fd0c 	bl	8007e0c <__assert_func>
 80073f4:	f100 0614 	add.w	r6, r0, #20
 80073f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80073fc:	4633      	mov	r3, r6
 80073fe:	2200      	movs	r2, #0
 8007400:	4543      	cmp	r3, r8
 8007402:	d31e      	bcc.n	8007442 <__multiply+0x92>
 8007404:	f105 0c14 	add.w	ip, r5, #20
 8007408:	f104 0314 	add.w	r3, r4, #20
 800740c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007410:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007414:	9202      	str	r2, [sp, #8]
 8007416:	ebac 0205 	sub.w	r2, ip, r5
 800741a:	3a15      	subs	r2, #21
 800741c:	f022 0203 	bic.w	r2, r2, #3
 8007420:	3204      	adds	r2, #4
 8007422:	f105 0115 	add.w	r1, r5, #21
 8007426:	458c      	cmp	ip, r1
 8007428:	bf38      	it	cc
 800742a:	2204      	movcc	r2, #4
 800742c:	9201      	str	r2, [sp, #4]
 800742e:	9a02      	ldr	r2, [sp, #8]
 8007430:	9303      	str	r3, [sp, #12]
 8007432:	429a      	cmp	r2, r3
 8007434:	d808      	bhi.n	8007448 <__multiply+0x98>
 8007436:	2f00      	cmp	r7, #0
 8007438:	dc55      	bgt.n	80074e6 <__multiply+0x136>
 800743a:	6107      	str	r7, [r0, #16]
 800743c:	b005      	add	sp, #20
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	f843 2b04 	str.w	r2, [r3], #4
 8007446:	e7db      	b.n	8007400 <__multiply+0x50>
 8007448:	f8b3 a000 	ldrh.w	sl, [r3]
 800744c:	f1ba 0f00 	cmp.w	sl, #0
 8007450:	d020      	beq.n	8007494 <__multiply+0xe4>
 8007452:	f105 0e14 	add.w	lr, r5, #20
 8007456:	46b1      	mov	r9, r6
 8007458:	2200      	movs	r2, #0
 800745a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800745e:	f8d9 b000 	ldr.w	fp, [r9]
 8007462:	b2a1      	uxth	r1, r4
 8007464:	fa1f fb8b 	uxth.w	fp, fp
 8007468:	fb0a b101 	mla	r1, sl, r1, fp
 800746c:	4411      	add	r1, r2
 800746e:	f8d9 2000 	ldr.w	r2, [r9]
 8007472:	0c24      	lsrs	r4, r4, #16
 8007474:	0c12      	lsrs	r2, r2, #16
 8007476:	fb0a 2404 	mla	r4, sl, r4, r2
 800747a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800747e:	b289      	uxth	r1, r1
 8007480:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007484:	45f4      	cmp	ip, lr
 8007486:	f849 1b04 	str.w	r1, [r9], #4
 800748a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800748e:	d8e4      	bhi.n	800745a <__multiply+0xaa>
 8007490:	9901      	ldr	r1, [sp, #4]
 8007492:	5072      	str	r2, [r6, r1]
 8007494:	9a03      	ldr	r2, [sp, #12]
 8007496:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800749a:	3304      	adds	r3, #4
 800749c:	f1b9 0f00 	cmp.w	r9, #0
 80074a0:	d01f      	beq.n	80074e2 <__multiply+0x132>
 80074a2:	6834      	ldr	r4, [r6, #0]
 80074a4:	f105 0114 	add.w	r1, r5, #20
 80074a8:	46b6      	mov	lr, r6
 80074aa:	f04f 0a00 	mov.w	sl, #0
 80074ae:	880a      	ldrh	r2, [r1, #0]
 80074b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80074b4:	fb09 b202 	mla	r2, r9, r2, fp
 80074b8:	4492      	add	sl, r2
 80074ba:	b2a4      	uxth	r4, r4
 80074bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80074c0:	f84e 4b04 	str.w	r4, [lr], #4
 80074c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80074c8:	f8be 2000 	ldrh.w	r2, [lr]
 80074cc:	0c24      	lsrs	r4, r4, #16
 80074ce:	fb09 2404 	mla	r4, r9, r4, r2
 80074d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80074d6:	458c      	cmp	ip, r1
 80074d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074dc:	d8e7      	bhi.n	80074ae <__multiply+0xfe>
 80074de:	9a01      	ldr	r2, [sp, #4]
 80074e0:	50b4      	str	r4, [r6, r2]
 80074e2:	3604      	adds	r6, #4
 80074e4:	e7a3      	b.n	800742e <__multiply+0x7e>
 80074e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1a5      	bne.n	800743a <__multiply+0x8a>
 80074ee:	3f01      	subs	r7, #1
 80074f0:	e7a1      	b.n	8007436 <__multiply+0x86>
 80074f2:	bf00      	nop
 80074f4:	0800818f 	.word	0x0800818f
 80074f8:	08008200 	.word	0x08008200

080074fc <__pow5mult>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4615      	mov	r5, r2
 8007502:	f012 0203 	ands.w	r2, r2, #3
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	d007      	beq.n	800751c <__pow5mult+0x20>
 800750c:	4c25      	ldr	r4, [pc, #148]	; (80075a4 <__pow5mult+0xa8>)
 800750e:	3a01      	subs	r2, #1
 8007510:	2300      	movs	r3, #0
 8007512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007516:	f7ff fe9b 	bl	8007250 <__multadd>
 800751a:	4607      	mov	r7, r0
 800751c:	10ad      	asrs	r5, r5, #2
 800751e:	d03d      	beq.n	800759c <__pow5mult+0xa0>
 8007520:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007522:	b97c      	cbnz	r4, 8007544 <__pow5mult+0x48>
 8007524:	2010      	movs	r0, #16
 8007526:	f7ff fe1b 	bl	8007160 <malloc>
 800752a:	4602      	mov	r2, r0
 800752c:	6270      	str	r0, [r6, #36]	; 0x24
 800752e:	b928      	cbnz	r0, 800753c <__pow5mult+0x40>
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <__pow5mult+0xac>)
 8007532:	481e      	ldr	r0, [pc, #120]	; (80075ac <__pow5mult+0xb0>)
 8007534:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007538:	f000 fc68 	bl	8007e0c <__assert_func>
 800753c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007540:	6004      	str	r4, [r0, #0]
 8007542:	60c4      	str	r4, [r0, #12]
 8007544:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800754c:	b94c      	cbnz	r4, 8007562 <__pow5mult+0x66>
 800754e:	f240 2171 	movw	r1, #625	; 0x271
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ff16 	bl	8007384 <__i2b>
 8007558:	2300      	movs	r3, #0
 800755a:	f8c8 0008 	str.w	r0, [r8, #8]
 800755e:	4604      	mov	r4, r0
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	07eb      	lsls	r3, r5, #31
 8007568:	d50a      	bpl.n	8007580 <__pow5mult+0x84>
 800756a:	4639      	mov	r1, r7
 800756c:	4622      	mov	r2, r4
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ff1e 	bl	80073b0 <__multiply>
 8007574:	4639      	mov	r1, r7
 8007576:	4680      	mov	r8, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff fe47 	bl	800720c <_Bfree>
 800757e:	4647      	mov	r7, r8
 8007580:	106d      	asrs	r5, r5, #1
 8007582:	d00b      	beq.n	800759c <__pow5mult+0xa0>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	b938      	cbnz	r0, 8007598 <__pow5mult+0x9c>
 8007588:	4622      	mov	r2, r4
 800758a:	4621      	mov	r1, r4
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff ff0f 	bl	80073b0 <__multiply>
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	f8c0 9000 	str.w	r9, [r0]
 8007598:	4604      	mov	r4, r0
 800759a:	e7e4      	b.n	8007566 <__pow5mult+0x6a>
 800759c:	4638      	mov	r0, r7
 800759e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a2:	bf00      	nop
 80075a4:	08008350 	.word	0x08008350
 80075a8:	08008119 	.word	0x08008119
 80075ac:	08008200 	.word	0x08008200

080075b0 <__lshift>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	6849      	ldr	r1, [r1, #4]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	4607      	mov	r7, r0
 80075c2:	4691      	mov	r9, r2
 80075c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075c8:	f108 0601 	add.w	r6, r8, #1
 80075cc:	42b3      	cmp	r3, r6
 80075ce:	db0b      	blt.n	80075e8 <__lshift+0x38>
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fddb 	bl	800718c <_Balloc>
 80075d6:	4605      	mov	r5, r0
 80075d8:	b948      	cbnz	r0, 80075ee <__lshift+0x3e>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b28      	ldr	r3, [pc, #160]	; (8007680 <__lshift+0xd0>)
 80075de:	4829      	ldr	r0, [pc, #164]	; (8007684 <__lshift+0xd4>)
 80075e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075e4:	f000 fc12 	bl	8007e0c <__assert_func>
 80075e8:	3101      	adds	r1, #1
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	e7ee      	b.n	80075cc <__lshift+0x1c>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f100 0114 	add.w	r1, r0, #20
 80075f4:	f100 0210 	add.w	r2, r0, #16
 80075f8:	4618      	mov	r0, r3
 80075fa:	4553      	cmp	r3, sl
 80075fc:	db33      	blt.n	8007666 <__lshift+0xb6>
 80075fe:	6920      	ldr	r0, [r4, #16]
 8007600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007604:	f104 0314 	add.w	r3, r4, #20
 8007608:	f019 091f 	ands.w	r9, r9, #31
 800760c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007614:	d02b      	beq.n	800766e <__lshift+0xbe>
 8007616:	f1c9 0e20 	rsb	lr, r9, #32
 800761a:	468a      	mov	sl, r1
 800761c:	2200      	movs	r2, #0
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	fa00 f009 	lsl.w	r0, r0, r9
 8007624:	4302      	orrs	r2, r0
 8007626:	f84a 2b04 	str.w	r2, [sl], #4
 800762a:	f853 2b04 	ldr.w	r2, [r3], #4
 800762e:	459c      	cmp	ip, r3
 8007630:	fa22 f20e 	lsr.w	r2, r2, lr
 8007634:	d8f3      	bhi.n	800761e <__lshift+0x6e>
 8007636:	ebac 0304 	sub.w	r3, ip, r4
 800763a:	3b15      	subs	r3, #21
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	3304      	adds	r3, #4
 8007642:	f104 0015 	add.w	r0, r4, #21
 8007646:	4584      	cmp	ip, r0
 8007648:	bf38      	it	cc
 800764a:	2304      	movcc	r3, #4
 800764c:	50ca      	str	r2, [r1, r3]
 800764e:	b10a      	cbz	r2, 8007654 <__lshift+0xa4>
 8007650:	f108 0602 	add.w	r6, r8, #2
 8007654:	3e01      	subs	r6, #1
 8007656:	4638      	mov	r0, r7
 8007658:	612e      	str	r6, [r5, #16]
 800765a:	4621      	mov	r1, r4
 800765c:	f7ff fdd6 	bl	800720c <_Bfree>
 8007660:	4628      	mov	r0, r5
 8007662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007666:	f842 0f04 	str.w	r0, [r2, #4]!
 800766a:	3301      	adds	r3, #1
 800766c:	e7c5      	b.n	80075fa <__lshift+0x4a>
 800766e:	3904      	subs	r1, #4
 8007670:	f853 2b04 	ldr.w	r2, [r3], #4
 8007674:	f841 2f04 	str.w	r2, [r1, #4]!
 8007678:	459c      	cmp	ip, r3
 800767a:	d8f9      	bhi.n	8007670 <__lshift+0xc0>
 800767c:	e7ea      	b.n	8007654 <__lshift+0xa4>
 800767e:	bf00      	nop
 8007680:	0800818f 	.word	0x0800818f
 8007684:	08008200 	.word	0x08008200

08007688 <__mcmp>:
 8007688:	b530      	push	{r4, r5, lr}
 800768a:	6902      	ldr	r2, [r0, #16]
 800768c:	690c      	ldr	r4, [r1, #16]
 800768e:	1b12      	subs	r2, r2, r4
 8007690:	d10e      	bne.n	80076b0 <__mcmp+0x28>
 8007692:	f100 0314 	add.w	r3, r0, #20
 8007696:	3114      	adds	r1, #20
 8007698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800769c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076a8:	42a5      	cmp	r5, r4
 80076aa:	d003      	beq.n	80076b4 <__mcmp+0x2c>
 80076ac:	d305      	bcc.n	80076ba <__mcmp+0x32>
 80076ae:	2201      	movs	r2, #1
 80076b0:	4610      	mov	r0, r2
 80076b2:	bd30      	pop	{r4, r5, pc}
 80076b4:	4283      	cmp	r3, r0
 80076b6:	d3f3      	bcc.n	80076a0 <__mcmp+0x18>
 80076b8:	e7fa      	b.n	80076b0 <__mcmp+0x28>
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	e7f7      	b.n	80076b0 <__mcmp+0x28>

080076c0 <__mdiff>:
 80076c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	460c      	mov	r4, r1
 80076c6:	4606      	mov	r6, r0
 80076c8:	4611      	mov	r1, r2
 80076ca:	4620      	mov	r0, r4
 80076cc:	4617      	mov	r7, r2
 80076ce:	f7ff ffdb 	bl	8007688 <__mcmp>
 80076d2:	1e05      	subs	r5, r0, #0
 80076d4:	d110      	bne.n	80076f8 <__mdiff+0x38>
 80076d6:	4629      	mov	r1, r5
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff fd57 	bl	800718c <_Balloc>
 80076de:	b930      	cbnz	r0, 80076ee <__mdiff+0x2e>
 80076e0:	4b39      	ldr	r3, [pc, #228]	; (80077c8 <__mdiff+0x108>)
 80076e2:	4602      	mov	r2, r0
 80076e4:	f240 2132 	movw	r1, #562	; 0x232
 80076e8:	4838      	ldr	r0, [pc, #224]	; (80077cc <__mdiff+0x10c>)
 80076ea:	f000 fb8f 	bl	8007e0c <__assert_func>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	bfa4      	itt	ge
 80076fa:	463b      	movge	r3, r7
 80076fc:	4627      	movge	r7, r4
 80076fe:	4630      	mov	r0, r6
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	bfa6      	itte	ge
 8007704:	461c      	movge	r4, r3
 8007706:	2500      	movge	r5, #0
 8007708:	2501      	movlt	r5, #1
 800770a:	f7ff fd3f 	bl	800718c <_Balloc>
 800770e:	b920      	cbnz	r0, 800771a <__mdiff+0x5a>
 8007710:	4b2d      	ldr	r3, [pc, #180]	; (80077c8 <__mdiff+0x108>)
 8007712:	4602      	mov	r2, r0
 8007714:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007718:	e7e6      	b.n	80076e8 <__mdiff+0x28>
 800771a:	693e      	ldr	r6, [r7, #16]
 800771c:	60c5      	str	r5, [r0, #12]
 800771e:	6925      	ldr	r5, [r4, #16]
 8007720:	f107 0114 	add.w	r1, r7, #20
 8007724:	f104 0914 	add.w	r9, r4, #20
 8007728:	f100 0e14 	add.w	lr, r0, #20
 800772c:	f107 0210 	add.w	r2, r7, #16
 8007730:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007734:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007738:	46f2      	mov	sl, lr
 800773a:	2700      	movs	r7, #0
 800773c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007740:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007744:	fa1f f883 	uxth.w	r8, r3
 8007748:	fa17 f78b 	uxtah	r7, r7, fp
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	eba7 0808 	sub.w	r8, r7, r8
 8007752:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007756:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800775a:	fa1f f888 	uxth.w	r8, r8
 800775e:	141f      	asrs	r7, r3, #16
 8007760:	454d      	cmp	r5, r9
 8007762:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007766:	f84a 3b04 	str.w	r3, [sl], #4
 800776a:	d8e7      	bhi.n	800773c <__mdiff+0x7c>
 800776c:	1b2b      	subs	r3, r5, r4
 800776e:	3b15      	subs	r3, #21
 8007770:	f023 0303 	bic.w	r3, r3, #3
 8007774:	3304      	adds	r3, #4
 8007776:	3415      	adds	r4, #21
 8007778:	42a5      	cmp	r5, r4
 800777a:	bf38      	it	cc
 800777c:	2304      	movcc	r3, #4
 800777e:	4419      	add	r1, r3
 8007780:	4473      	add	r3, lr
 8007782:	469e      	mov	lr, r3
 8007784:	460d      	mov	r5, r1
 8007786:	4565      	cmp	r5, ip
 8007788:	d30e      	bcc.n	80077a8 <__mdiff+0xe8>
 800778a:	f10c 0203 	add.w	r2, ip, #3
 800778e:	1a52      	subs	r2, r2, r1
 8007790:	f022 0203 	bic.w	r2, r2, #3
 8007794:	3903      	subs	r1, #3
 8007796:	458c      	cmp	ip, r1
 8007798:	bf38      	it	cc
 800779a:	2200      	movcc	r2, #0
 800779c:	441a      	add	r2, r3
 800779e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077a2:	b17b      	cbz	r3, 80077c4 <__mdiff+0x104>
 80077a4:	6106      	str	r6, [r0, #16]
 80077a6:	e7a5      	b.n	80076f4 <__mdiff+0x34>
 80077a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80077ac:	fa17 f488 	uxtah	r4, r7, r8
 80077b0:	1422      	asrs	r2, r4, #16
 80077b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80077b6:	b2a4      	uxth	r4, r4
 80077b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80077bc:	f84e 4b04 	str.w	r4, [lr], #4
 80077c0:	1417      	asrs	r7, r2, #16
 80077c2:	e7e0      	b.n	8007786 <__mdiff+0xc6>
 80077c4:	3e01      	subs	r6, #1
 80077c6:	e7ea      	b.n	800779e <__mdiff+0xde>
 80077c8:	0800818f 	.word	0x0800818f
 80077cc:	08008200 	.word	0x08008200

080077d0 <__d2b>:
 80077d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	4689      	mov	r9, r1
 80077d6:	2101      	movs	r1, #1
 80077d8:	ec57 6b10 	vmov	r6, r7, d0
 80077dc:	4690      	mov	r8, r2
 80077de:	f7ff fcd5 	bl	800718c <_Balloc>
 80077e2:	4604      	mov	r4, r0
 80077e4:	b930      	cbnz	r0, 80077f4 <__d2b+0x24>
 80077e6:	4602      	mov	r2, r0
 80077e8:	4b25      	ldr	r3, [pc, #148]	; (8007880 <__d2b+0xb0>)
 80077ea:	4826      	ldr	r0, [pc, #152]	; (8007884 <__d2b+0xb4>)
 80077ec:	f240 310a 	movw	r1, #778	; 0x30a
 80077f0:	f000 fb0c 	bl	8007e0c <__assert_func>
 80077f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077fc:	bb35      	cbnz	r5, 800784c <__d2b+0x7c>
 80077fe:	2e00      	cmp	r6, #0
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	d028      	beq.n	8007856 <__d2b+0x86>
 8007804:	4668      	mov	r0, sp
 8007806:	9600      	str	r6, [sp, #0]
 8007808:	f7ff fd8c 	bl	8007324 <__lo0bits>
 800780c:	9900      	ldr	r1, [sp, #0]
 800780e:	b300      	cbz	r0, 8007852 <__d2b+0x82>
 8007810:	9a01      	ldr	r2, [sp, #4]
 8007812:	f1c0 0320 	rsb	r3, r0, #32
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	430b      	orrs	r3, r1
 800781c:	40c2      	lsrs	r2, r0
 800781e:	6163      	str	r3, [r4, #20]
 8007820:	9201      	str	r2, [sp, #4]
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	61a3      	str	r3, [r4, #24]
 8007826:	2b00      	cmp	r3, #0
 8007828:	bf14      	ite	ne
 800782a:	2202      	movne	r2, #2
 800782c:	2201      	moveq	r2, #1
 800782e:	6122      	str	r2, [r4, #16]
 8007830:	b1d5      	cbz	r5, 8007868 <__d2b+0x98>
 8007832:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007836:	4405      	add	r5, r0
 8007838:	f8c9 5000 	str.w	r5, [r9]
 800783c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007840:	f8c8 0000 	str.w	r0, [r8]
 8007844:	4620      	mov	r0, r4
 8007846:	b003      	add	sp, #12
 8007848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800784c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007850:	e7d5      	b.n	80077fe <__d2b+0x2e>
 8007852:	6161      	str	r1, [r4, #20]
 8007854:	e7e5      	b.n	8007822 <__d2b+0x52>
 8007856:	a801      	add	r0, sp, #4
 8007858:	f7ff fd64 	bl	8007324 <__lo0bits>
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	6163      	str	r3, [r4, #20]
 8007860:	2201      	movs	r2, #1
 8007862:	6122      	str	r2, [r4, #16]
 8007864:	3020      	adds	r0, #32
 8007866:	e7e3      	b.n	8007830 <__d2b+0x60>
 8007868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800786c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007870:	f8c9 0000 	str.w	r0, [r9]
 8007874:	6918      	ldr	r0, [r3, #16]
 8007876:	f7ff fd35 	bl	80072e4 <__hi0bits>
 800787a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800787e:	e7df      	b.n	8007840 <__d2b+0x70>
 8007880:	0800818f 	.word	0x0800818f
 8007884:	08008200 	.word	0x08008200

08007888 <_calloc_r>:
 8007888:	b513      	push	{r0, r1, r4, lr}
 800788a:	434a      	muls	r2, r1
 800788c:	4611      	mov	r1, r2
 800788e:	9201      	str	r2, [sp, #4]
 8007890:	f000 f85a 	bl	8007948 <_malloc_r>
 8007894:	4604      	mov	r4, r0
 8007896:	b118      	cbz	r0, 80078a0 <_calloc_r+0x18>
 8007898:	9a01      	ldr	r2, [sp, #4]
 800789a:	2100      	movs	r1, #0
 800789c:	f7fd fdee 	bl	800547c <memset>
 80078a0:	4620      	mov	r0, r4
 80078a2:	b002      	add	sp, #8
 80078a4:	bd10      	pop	{r4, pc}
	...

080078a8 <_free_r>:
 80078a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078aa:	2900      	cmp	r1, #0
 80078ac:	d048      	beq.n	8007940 <_free_r+0x98>
 80078ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b2:	9001      	str	r0, [sp, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f1a1 0404 	sub.w	r4, r1, #4
 80078ba:	bfb8      	it	lt
 80078bc:	18e4      	addlt	r4, r4, r3
 80078be:	f000 fb2b 	bl	8007f18 <__malloc_lock>
 80078c2:	4a20      	ldr	r2, [pc, #128]	; (8007944 <_free_r+0x9c>)
 80078c4:	9801      	ldr	r0, [sp, #4]
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	4615      	mov	r5, r2
 80078ca:	b933      	cbnz	r3, 80078da <_free_r+0x32>
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	6014      	str	r4, [r2, #0]
 80078d0:	b003      	add	sp, #12
 80078d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078d6:	f000 bb25 	b.w	8007f24 <__malloc_unlock>
 80078da:	42a3      	cmp	r3, r4
 80078dc:	d90b      	bls.n	80078f6 <_free_r+0x4e>
 80078de:	6821      	ldr	r1, [r4, #0]
 80078e0:	1862      	adds	r2, r4, r1
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bf04      	itt	eq
 80078e6:	681a      	ldreq	r2, [r3, #0]
 80078e8:	685b      	ldreq	r3, [r3, #4]
 80078ea:	6063      	str	r3, [r4, #4]
 80078ec:	bf04      	itt	eq
 80078ee:	1852      	addeq	r2, r2, r1
 80078f0:	6022      	streq	r2, [r4, #0]
 80078f2:	602c      	str	r4, [r5, #0]
 80078f4:	e7ec      	b.n	80078d0 <_free_r+0x28>
 80078f6:	461a      	mov	r2, r3
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	b10b      	cbz	r3, 8007900 <_free_r+0x58>
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d9fa      	bls.n	80078f6 <_free_r+0x4e>
 8007900:	6811      	ldr	r1, [r2, #0]
 8007902:	1855      	adds	r5, r2, r1
 8007904:	42a5      	cmp	r5, r4
 8007906:	d10b      	bne.n	8007920 <_free_r+0x78>
 8007908:	6824      	ldr	r4, [r4, #0]
 800790a:	4421      	add	r1, r4
 800790c:	1854      	adds	r4, r2, r1
 800790e:	42a3      	cmp	r3, r4
 8007910:	6011      	str	r1, [r2, #0]
 8007912:	d1dd      	bne.n	80078d0 <_free_r+0x28>
 8007914:	681c      	ldr	r4, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	6053      	str	r3, [r2, #4]
 800791a:	4421      	add	r1, r4
 800791c:	6011      	str	r1, [r2, #0]
 800791e:	e7d7      	b.n	80078d0 <_free_r+0x28>
 8007920:	d902      	bls.n	8007928 <_free_r+0x80>
 8007922:	230c      	movs	r3, #12
 8007924:	6003      	str	r3, [r0, #0]
 8007926:	e7d3      	b.n	80078d0 <_free_r+0x28>
 8007928:	6825      	ldr	r5, [r4, #0]
 800792a:	1961      	adds	r1, r4, r5
 800792c:	428b      	cmp	r3, r1
 800792e:	bf04      	itt	eq
 8007930:	6819      	ldreq	r1, [r3, #0]
 8007932:	685b      	ldreq	r3, [r3, #4]
 8007934:	6063      	str	r3, [r4, #4]
 8007936:	bf04      	itt	eq
 8007938:	1949      	addeq	r1, r1, r5
 800793a:	6021      	streq	r1, [r4, #0]
 800793c:	6054      	str	r4, [r2, #4]
 800793e:	e7c7      	b.n	80078d0 <_free_r+0x28>
 8007940:	b003      	add	sp, #12
 8007942:	bd30      	pop	{r4, r5, pc}
 8007944:	200001fc 	.word	0x200001fc

08007948 <_malloc_r>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	1ccd      	adds	r5, r1, #3
 800794c:	f025 0503 	bic.w	r5, r5, #3
 8007950:	3508      	adds	r5, #8
 8007952:	2d0c      	cmp	r5, #12
 8007954:	bf38      	it	cc
 8007956:	250c      	movcc	r5, #12
 8007958:	2d00      	cmp	r5, #0
 800795a:	4606      	mov	r6, r0
 800795c:	db01      	blt.n	8007962 <_malloc_r+0x1a>
 800795e:	42a9      	cmp	r1, r5
 8007960:	d903      	bls.n	800796a <_malloc_r+0x22>
 8007962:	230c      	movs	r3, #12
 8007964:	6033      	str	r3, [r6, #0]
 8007966:	2000      	movs	r0, #0
 8007968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796a:	f000 fad5 	bl	8007f18 <__malloc_lock>
 800796e:	4921      	ldr	r1, [pc, #132]	; (80079f4 <_malloc_r+0xac>)
 8007970:	680a      	ldr	r2, [r1, #0]
 8007972:	4614      	mov	r4, r2
 8007974:	b99c      	cbnz	r4, 800799e <_malloc_r+0x56>
 8007976:	4f20      	ldr	r7, [pc, #128]	; (80079f8 <_malloc_r+0xb0>)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	b923      	cbnz	r3, 8007986 <_malloc_r+0x3e>
 800797c:	4621      	mov	r1, r4
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f9de 	bl	8007d40 <_sbrk_r>
 8007984:	6038      	str	r0, [r7, #0]
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	f000 f9d9 	bl	8007d40 <_sbrk_r>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	d123      	bne.n	80079da <_malloc_r+0x92>
 8007992:	230c      	movs	r3, #12
 8007994:	6033      	str	r3, [r6, #0]
 8007996:	4630      	mov	r0, r6
 8007998:	f000 fac4 	bl	8007f24 <__malloc_unlock>
 800799c:	e7e3      	b.n	8007966 <_malloc_r+0x1e>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	1b5b      	subs	r3, r3, r5
 80079a2:	d417      	bmi.n	80079d4 <_malloc_r+0x8c>
 80079a4:	2b0b      	cmp	r3, #11
 80079a6:	d903      	bls.n	80079b0 <_malloc_r+0x68>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	441c      	add	r4, r3
 80079ac:	6025      	str	r5, [r4, #0]
 80079ae:	e004      	b.n	80079ba <_malloc_r+0x72>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	42a2      	cmp	r2, r4
 80079b4:	bf0c      	ite	eq
 80079b6:	600b      	streq	r3, [r1, #0]
 80079b8:	6053      	strne	r3, [r2, #4]
 80079ba:	4630      	mov	r0, r6
 80079bc:	f000 fab2 	bl	8007f24 <__malloc_unlock>
 80079c0:	f104 000b 	add.w	r0, r4, #11
 80079c4:	1d23      	adds	r3, r4, #4
 80079c6:	f020 0007 	bic.w	r0, r0, #7
 80079ca:	1ac2      	subs	r2, r0, r3
 80079cc:	d0cc      	beq.n	8007968 <_malloc_r+0x20>
 80079ce:	1a1b      	subs	r3, r3, r0
 80079d0:	50a3      	str	r3, [r4, r2]
 80079d2:	e7c9      	b.n	8007968 <_malloc_r+0x20>
 80079d4:	4622      	mov	r2, r4
 80079d6:	6864      	ldr	r4, [r4, #4]
 80079d8:	e7cc      	b.n	8007974 <_malloc_r+0x2c>
 80079da:	1cc4      	adds	r4, r0, #3
 80079dc:	f024 0403 	bic.w	r4, r4, #3
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d0e3      	beq.n	80079ac <_malloc_r+0x64>
 80079e4:	1a21      	subs	r1, r4, r0
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 f9aa 	bl	8007d40 <_sbrk_r>
 80079ec:	3001      	adds	r0, #1
 80079ee:	d1dd      	bne.n	80079ac <_malloc_r+0x64>
 80079f0:	e7cf      	b.n	8007992 <_malloc_r+0x4a>
 80079f2:	bf00      	nop
 80079f4:	200001fc 	.word	0x200001fc
 80079f8:	20000200 	.word	0x20000200

080079fc <__sfputc_r>:
 80079fc:	6893      	ldr	r3, [r2, #8]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	b410      	push	{r4}
 8007a04:	6093      	str	r3, [r2, #8]
 8007a06:	da08      	bge.n	8007a1a <__sfputc_r+0x1e>
 8007a08:	6994      	ldr	r4, [r2, #24]
 8007a0a:	42a3      	cmp	r3, r4
 8007a0c:	db01      	blt.n	8007a12 <__sfputc_r+0x16>
 8007a0e:	290a      	cmp	r1, #10
 8007a10:	d103      	bne.n	8007a1a <__sfputc_r+0x1e>
 8007a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a16:	f7fe ba47 	b.w	8005ea8 <__swbuf_r>
 8007a1a:	6813      	ldr	r3, [r2, #0]
 8007a1c:	1c58      	adds	r0, r3, #1
 8007a1e:	6010      	str	r0, [r2, #0]
 8007a20:	7019      	strb	r1, [r3, #0]
 8007a22:	4608      	mov	r0, r1
 8007a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <__sfputs_r>:
 8007a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	460f      	mov	r7, r1
 8007a30:	4614      	mov	r4, r2
 8007a32:	18d5      	adds	r5, r2, r3
 8007a34:	42ac      	cmp	r4, r5
 8007a36:	d101      	bne.n	8007a3c <__sfputs_r+0x12>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e007      	b.n	8007a4c <__sfputs_r+0x22>
 8007a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a40:	463a      	mov	r2, r7
 8007a42:	4630      	mov	r0, r6
 8007a44:	f7ff ffda 	bl	80079fc <__sfputc_r>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d1f3      	bne.n	8007a34 <__sfputs_r+0xa>
 8007a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a50 <_vfiprintf_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	460d      	mov	r5, r1
 8007a56:	b09d      	sub	sp, #116	; 0x74
 8007a58:	4614      	mov	r4, r2
 8007a5a:	4698      	mov	r8, r3
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	b118      	cbz	r0, 8007a68 <_vfiprintf_r+0x18>
 8007a60:	6983      	ldr	r3, [r0, #24]
 8007a62:	b90b      	cbnz	r3, 8007a68 <_vfiprintf_r+0x18>
 8007a64:	f7ff fa72 	bl	8006f4c <__sinit>
 8007a68:	4b89      	ldr	r3, [pc, #548]	; (8007c90 <_vfiprintf_r+0x240>)
 8007a6a:	429d      	cmp	r5, r3
 8007a6c:	d11b      	bne.n	8007aa6 <_vfiprintf_r+0x56>
 8007a6e:	6875      	ldr	r5, [r6, #4]
 8007a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a72:	07d9      	lsls	r1, r3, #31
 8007a74:	d405      	bmi.n	8007a82 <_vfiprintf_r+0x32>
 8007a76:	89ab      	ldrh	r3, [r5, #12]
 8007a78:	059a      	lsls	r2, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_vfiprintf_r+0x32>
 8007a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a7e:	f7ff fb08 	bl	8007092 <__retarget_lock_acquire_recursive>
 8007a82:	89ab      	ldrh	r3, [r5, #12]
 8007a84:	071b      	lsls	r3, r3, #28
 8007a86:	d501      	bpl.n	8007a8c <_vfiprintf_r+0x3c>
 8007a88:	692b      	ldr	r3, [r5, #16]
 8007a8a:	b9eb      	cbnz	r3, 8007ac8 <_vfiprintf_r+0x78>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7fe fa5c 	bl	8005f4c <__swsetup_r>
 8007a94:	b1c0      	cbz	r0, 8007ac8 <_vfiprintf_r+0x78>
 8007a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a98:	07dc      	lsls	r4, r3, #31
 8007a9a:	d50e      	bpl.n	8007aba <_vfiprintf_r+0x6a>
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	b01d      	add	sp, #116	; 0x74
 8007aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa6:	4b7b      	ldr	r3, [pc, #492]	; (8007c94 <_vfiprintf_r+0x244>)
 8007aa8:	429d      	cmp	r5, r3
 8007aaa:	d101      	bne.n	8007ab0 <_vfiprintf_r+0x60>
 8007aac:	68b5      	ldr	r5, [r6, #8]
 8007aae:	e7df      	b.n	8007a70 <_vfiprintf_r+0x20>
 8007ab0:	4b79      	ldr	r3, [pc, #484]	; (8007c98 <_vfiprintf_r+0x248>)
 8007ab2:	429d      	cmp	r5, r3
 8007ab4:	bf08      	it	eq
 8007ab6:	68f5      	ldreq	r5, [r6, #12]
 8007ab8:	e7da      	b.n	8007a70 <_vfiprintf_r+0x20>
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	0598      	lsls	r0, r3, #22
 8007abe:	d4ed      	bmi.n	8007a9c <_vfiprintf_r+0x4c>
 8007ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ac2:	f7ff fae7 	bl	8007094 <__retarget_lock_release_recursive>
 8007ac6:	e7e9      	b.n	8007a9c <_vfiprintf_r+0x4c>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9309      	str	r3, [sp, #36]	; 0x24
 8007acc:	2320      	movs	r3, #32
 8007ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ad6:	2330      	movs	r3, #48	; 0x30
 8007ad8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c9c <_vfiprintf_r+0x24c>
 8007adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae0:	f04f 0901 	mov.w	r9, #1
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	469a      	mov	sl, r3
 8007ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aec:	b10a      	cbz	r2, 8007af2 <_vfiprintf_r+0xa2>
 8007aee:	2a25      	cmp	r2, #37	; 0x25
 8007af0:	d1f9      	bne.n	8007ae6 <_vfiprintf_r+0x96>
 8007af2:	ebba 0b04 	subs.w	fp, sl, r4
 8007af6:	d00b      	beq.n	8007b10 <_vfiprintf_r+0xc0>
 8007af8:	465b      	mov	r3, fp
 8007afa:	4622      	mov	r2, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7ff ff93 	bl	8007a2a <__sfputs_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	f000 80aa 	beq.w	8007c5e <_vfiprintf_r+0x20e>
 8007b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b0c:	445a      	add	r2, fp
 8007b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b10:	f89a 3000 	ldrb.w	r3, [sl]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80a2 	beq.w	8007c5e <_vfiprintf_r+0x20e>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b24:	f10a 0a01 	add.w	sl, sl, #1
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	9307      	str	r3, [sp, #28]
 8007b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b30:	931a      	str	r3, [sp, #104]	; 0x68
 8007b32:	4654      	mov	r4, sl
 8007b34:	2205      	movs	r2, #5
 8007b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3a:	4858      	ldr	r0, [pc, #352]	; (8007c9c <_vfiprintf_r+0x24c>)
 8007b3c:	f7f8 fb50 	bl	80001e0 <memchr>
 8007b40:	9a04      	ldr	r2, [sp, #16]
 8007b42:	b9d8      	cbnz	r0, 8007b7c <_vfiprintf_r+0x12c>
 8007b44:	06d1      	lsls	r1, r2, #27
 8007b46:	bf44      	itt	mi
 8007b48:	2320      	movmi	r3, #32
 8007b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b4e:	0713      	lsls	r3, r2, #28
 8007b50:	bf44      	itt	mi
 8007b52:	232b      	movmi	r3, #43	; 0x2b
 8007b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b58:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b5e:	d015      	beq.n	8007b8c <_vfiprintf_r+0x13c>
 8007b60:	9a07      	ldr	r2, [sp, #28]
 8007b62:	4654      	mov	r4, sl
 8007b64:	2000      	movs	r0, #0
 8007b66:	f04f 0c0a 	mov.w	ip, #10
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b70:	3b30      	subs	r3, #48	; 0x30
 8007b72:	2b09      	cmp	r3, #9
 8007b74:	d94e      	bls.n	8007c14 <_vfiprintf_r+0x1c4>
 8007b76:	b1b0      	cbz	r0, 8007ba6 <_vfiprintf_r+0x156>
 8007b78:	9207      	str	r2, [sp, #28]
 8007b7a:	e014      	b.n	8007ba6 <_vfiprintf_r+0x156>
 8007b7c:	eba0 0308 	sub.w	r3, r0, r8
 8007b80:	fa09 f303 	lsl.w	r3, r9, r3
 8007b84:	4313      	orrs	r3, r2
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	46a2      	mov	sl, r4
 8007b8a:	e7d2      	b.n	8007b32 <_vfiprintf_r+0xe2>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	1d19      	adds	r1, r3, #4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	9103      	str	r1, [sp, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bfbb      	ittet	lt
 8007b98:	425b      	neglt	r3, r3
 8007b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b9e:	9307      	strge	r3, [sp, #28]
 8007ba0:	9307      	strlt	r3, [sp, #28]
 8007ba2:	bfb8      	it	lt
 8007ba4:	9204      	strlt	r2, [sp, #16]
 8007ba6:	7823      	ldrb	r3, [r4, #0]
 8007ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8007baa:	d10c      	bne.n	8007bc6 <_vfiprintf_r+0x176>
 8007bac:	7863      	ldrb	r3, [r4, #1]
 8007bae:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb0:	d135      	bne.n	8007c1e <_vfiprintf_r+0x1ce>
 8007bb2:	9b03      	ldr	r3, [sp, #12]
 8007bb4:	1d1a      	adds	r2, r3, #4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	9203      	str	r2, [sp, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfb8      	it	lt
 8007bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bc2:	3402      	adds	r4, #2
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cac <_vfiprintf_r+0x25c>
 8007bca:	7821      	ldrb	r1, [r4, #0]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	4650      	mov	r0, sl
 8007bd0:	f7f8 fb06 	bl	80001e0 <memchr>
 8007bd4:	b140      	cbz	r0, 8007be8 <_vfiprintf_r+0x198>
 8007bd6:	2340      	movs	r3, #64	; 0x40
 8007bd8:	eba0 000a 	sub.w	r0, r0, sl
 8007bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	4303      	orrs	r3, r0
 8007be4:	3401      	adds	r4, #1
 8007be6:	9304      	str	r3, [sp, #16]
 8007be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bec:	482c      	ldr	r0, [pc, #176]	; (8007ca0 <_vfiprintf_r+0x250>)
 8007bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bf2:	2206      	movs	r2, #6
 8007bf4:	f7f8 faf4 	bl	80001e0 <memchr>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d03f      	beq.n	8007c7c <_vfiprintf_r+0x22c>
 8007bfc:	4b29      	ldr	r3, [pc, #164]	; (8007ca4 <_vfiprintf_r+0x254>)
 8007bfe:	bb1b      	cbnz	r3, 8007c48 <_vfiprintf_r+0x1f8>
 8007c00:	9b03      	ldr	r3, [sp, #12]
 8007c02:	3307      	adds	r3, #7
 8007c04:	f023 0307 	bic.w	r3, r3, #7
 8007c08:	3308      	adds	r3, #8
 8007c0a:	9303      	str	r3, [sp, #12]
 8007c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0e:	443b      	add	r3, r7
 8007c10:	9309      	str	r3, [sp, #36]	; 0x24
 8007c12:	e767      	b.n	8007ae4 <_vfiprintf_r+0x94>
 8007c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c18:	460c      	mov	r4, r1
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	e7a5      	b.n	8007b6a <_vfiprintf_r+0x11a>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	3401      	adds	r4, #1
 8007c22:	9305      	str	r3, [sp, #20]
 8007c24:	4619      	mov	r1, r3
 8007c26:	f04f 0c0a 	mov.w	ip, #10
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c30:	3a30      	subs	r2, #48	; 0x30
 8007c32:	2a09      	cmp	r2, #9
 8007c34:	d903      	bls.n	8007c3e <_vfiprintf_r+0x1ee>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0c5      	beq.n	8007bc6 <_vfiprintf_r+0x176>
 8007c3a:	9105      	str	r1, [sp, #20]
 8007c3c:	e7c3      	b.n	8007bc6 <_vfiprintf_r+0x176>
 8007c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c42:	4604      	mov	r4, r0
 8007c44:	2301      	movs	r3, #1
 8007c46:	e7f0      	b.n	8007c2a <_vfiprintf_r+0x1da>
 8007c48:	ab03      	add	r3, sp, #12
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4b16      	ldr	r3, [pc, #88]	; (8007ca8 <_vfiprintf_r+0x258>)
 8007c50:	a904      	add	r1, sp, #16
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7fd fcba 	bl	80055cc <_printf_float>
 8007c58:	4607      	mov	r7, r0
 8007c5a:	1c78      	adds	r0, r7, #1
 8007c5c:	d1d6      	bne.n	8007c0c <_vfiprintf_r+0x1bc>
 8007c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c60:	07d9      	lsls	r1, r3, #31
 8007c62:	d405      	bmi.n	8007c70 <_vfiprintf_r+0x220>
 8007c64:	89ab      	ldrh	r3, [r5, #12]
 8007c66:	059a      	lsls	r2, r3, #22
 8007c68:	d402      	bmi.n	8007c70 <_vfiprintf_r+0x220>
 8007c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c6c:	f7ff fa12 	bl	8007094 <__retarget_lock_release_recursive>
 8007c70:	89ab      	ldrh	r3, [r5, #12]
 8007c72:	065b      	lsls	r3, r3, #25
 8007c74:	f53f af12 	bmi.w	8007a9c <_vfiprintf_r+0x4c>
 8007c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c7a:	e711      	b.n	8007aa0 <_vfiprintf_r+0x50>
 8007c7c:	ab03      	add	r3, sp, #12
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	462a      	mov	r2, r5
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <_vfiprintf_r+0x258>)
 8007c84:	a904      	add	r1, sp, #16
 8007c86:	4630      	mov	r0, r6
 8007c88:	f7fd ff44 	bl	8005b14 <_printf_i>
 8007c8c:	e7e4      	b.n	8007c58 <_vfiprintf_r+0x208>
 8007c8e:	bf00      	nop
 8007c90:	080081c0 	.word	0x080081c0
 8007c94:	080081e0 	.word	0x080081e0
 8007c98:	080081a0 	.word	0x080081a0
 8007c9c:	0800835c 	.word	0x0800835c
 8007ca0:	08008366 	.word	0x08008366
 8007ca4:	080055cd 	.word	0x080055cd
 8007ca8:	08007a2b 	.word	0x08007a2b
 8007cac:	08008362 	.word	0x08008362

08007cb0 <_putc_r>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	b118      	cbz	r0, 8007cc2 <_putc_r+0x12>
 8007cba:	6983      	ldr	r3, [r0, #24]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <_putc_r+0x12>
 8007cbe:	f7ff f945 	bl	8006f4c <__sinit>
 8007cc2:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <_putc_r+0x84>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d124      	bne.n	8007d12 <_putc_r+0x62>
 8007cc8:	6874      	ldr	r4, [r6, #4]
 8007cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ccc:	07d8      	lsls	r0, r3, #31
 8007cce:	d405      	bmi.n	8007cdc <_putc_r+0x2c>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	0599      	lsls	r1, r3, #22
 8007cd4:	d402      	bmi.n	8007cdc <_putc_r+0x2c>
 8007cd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cd8:	f7ff f9db 	bl	8007092 <__retarget_lock_acquire_recursive>
 8007cdc:	68a3      	ldr	r3, [r4, #8]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	60a3      	str	r3, [r4, #8]
 8007ce4:	da05      	bge.n	8007cf2 <_putc_r+0x42>
 8007ce6:	69a2      	ldr	r2, [r4, #24]
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	db1c      	blt.n	8007d26 <_putc_r+0x76>
 8007cec:	b2eb      	uxtb	r3, r5
 8007cee:	2b0a      	cmp	r3, #10
 8007cf0:	d019      	beq.n	8007d26 <_putc_r+0x76>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	6022      	str	r2, [r4, #0]
 8007cf8:	701d      	strb	r5, [r3, #0]
 8007cfa:	b2ed      	uxtb	r5, r5
 8007cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cfe:	07da      	lsls	r2, r3, #31
 8007d00:	d405      	bmi.n	8007d0e <_putc_r+0x5e>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	059b      	lsls	r3, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_putc_r+0x5e>
 8007d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0a:	f7ff f9c3 	bl	8007094 <__retarget_lock_release_recursive>
 8007d0e:	4628      	mov	r0, r5
 8007d10:	bd70      	pop	{r4, r5, r6, pc}
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <_putc_r+0x88>)
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d101      	bne.n	8007d1c <_putc_r+0x6c>
 8007d18:	68b4      	ldr	r4, [r6, #8]
 8007d1a:	e7d6      	b.n	8007cca <_putc_r+0x1a>
 8007d1c:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <_putc_r+0x8c>)
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	bf08      	it	eq
 8007d22:	68f4      	ldreq	r4, [r6, #12]
 8007d24:	e7d1      	b.n	8007cca <_putc_r+0x1a>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4622      	mov	r2, r4
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7fe f8bc 	bl	8005ea8 <__swbuf_r>
 8007d30:	4605      	mov	r5, r0
 8007d32:	e7e3      	b.n	8007cfc <_putc_r+0x4c>
 8007d34:	080081c0 	.word	0x080081c0
 8007d38:	080081e0 	.word	0x080081e0
 8007d3c:	080081a0 	.word	0x080081a0

08007d40 <_sbrk_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d06      	ldr	r5, [pc, #24]	; (8007d5c <_sbrk_r+0x1c>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7f9 fecc 	bl	8001ae8 <_sbrk>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_sbrk_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_sbrk_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	2000044c 	.word	0x2000044c

08007d60 <__sread>:
 8007d60:	b510      	push	{r4, lr}
 8007d62:	460c      	mov	r4, r1
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	f000 f8e2 	bl	8007f30 <_read_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	bfab      	itete	ge
 8007d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d72:	89a3      	ldrhlt	r3, [r4, #12]
 8007d74:	181b      	addge	r3, r3, r0
 8007d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d7a:	bfac      	ite	ge
 8007d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d7e:	81a3      	strhlt	r3, [r4, #12]
 8007d80:	bd10      	pop	{r4, pc}

08007d82 <__swrite>:
 8007d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d86:	461f      	mov	r7, r3
 8007d88:	898b      	ldrh	r3, [r1, #12]
 8007d8a:	05db      	lsls	r3, r3, #23
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	4616      	mov	r6, r2
 8007d92:	d505      	bpl.n	8007da0 <__swrite+0x1e>
 8007d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d98:	2302      	movs	r3, #2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f000 f898 	bl	8007ed0 <_lseek_r>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	4632      	mov	r2, r6
 8007dae:	463b      	mov	r3, r7
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db6:	f000 b817 	b.w	8007de8 <_write_r>

08007dba <__sseek>:
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc2:	f000 f885 	bl	8007ed0 <_lseek_r>
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	bf15      	itete	ne
 8007dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dd6:	81a3      	strheq	r3, [r4, #12]
 8007dd8:	bf18      	it	ne
 8007dda:	81a3      	strhne	r3, [r4, #12]
 8007ddc:	bd10      	pop	{r4, pc}

08007dde <__sclose>:
 8007dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de2:	f000 b831 	b.w	8007e48 <_close_r>
	...

08007de8 <_write_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_write_r+0x20>)
 8007dec:	4604      	mov	r4, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f9 fe26 	bl	8001a48 <_write>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_write_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_write_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	2000044c 	.word	0x2000044c

08007e0c <__assert_func>:
 8007e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0e:	4614      	mov	r4, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <__assert_func+0x2c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4605      	mov	r5, r0
 8007e18:	68d8      	ldr	r0, [r3, #12]
 8007e1a:	b14c      	cbz	r4, 8007e30 <__assert_func+0x24>
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <__assert_func+0x30>)
 8007e1e:	9100      	str	r1, [sp, #0]
 8007e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e24:	4906      	ldr	r1, [pc, #24]	; (8007e40 <__assert_func+0x34>)
 8007e26:	462b      	mov	r3, r5
 8007e28:	f000 f81e 	bl	8007e68 <fiprintf>
 8007e2c:	f000 f89f 	bl	8007f6e <abort>
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <__assert_func+0x38>)
 8007e32:	461c      	mov	r4, r3
 8007e34:	e7f3      	b.n	8007e1e <__assert_func+0x12>
 8007e36:	bf00      	nop
 8007e38:	2000000c 	.word	0x2000000c
 8007e3c:	0800836d 	.word	0x0800836d
 8007e40:	0800837a 	.word	0x0800837a
 8007e44:	080083a8 	.word	0x080083a8

08007e48 <_close_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d06      	ldr	r5, [pc, #24]	; (8007e64 <_close_r+0x1c>)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	602b      	str	r3, [r5, #0]
 8007e54:	f7f9 fe14 	bl	8001a80 <_close>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_close_r+0x1a>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_close_r+0x1a>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	2000044c 	.word	0x2000044c

08007e68 <fiprintf>:
 8007e68:	b40e      	push	{r1, r2, r3}
 8007e6a:	b503      	push	{r0, r1, lr}
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	ab03      	add	r3, sp, #12
 8007e70:	4805      	ldr	r0, [pc, #20]	; (8007e88 <fiprintf+0x20>)
 8007e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e76:	6800      	ldr	r0, [r0, #0]
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	f7ff fde9 	bl	8007a50 <_vfiprintf_r>
 8007e7e:	b002      	add	sp, #8
 8007e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e84:	b003      	add	sp, #12
 8007e86:	4770      	bx	lr
 8007e88:	2000000c 	.word	0x2000000c

08007e8c <_fstat_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d07      	ldr	r5, [pc, #28]	; (8007eac <_fstat_r+0x20>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f7f9 fdfd 	bl	8001a98 <_fstat>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d102      	bne.n	8007ea8 <_fstat_r+0x1c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b103      	cbz	r3, 8007ea8 <_fstat_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	2000044c 	.word	0x2000044c

08007eb0 <_isatty_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d06      	ldr	r5, [pc, #24]	; (8007ecc <_isatty_r+0x1c>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	602b      	str	r3, [r5, #0]
 8007ebc:	f7f9 fdfc 	bl	8001ab8 <_isatty>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_isatty_r+0x1a>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_isatty_r+0x1a>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	2000044c 	.word	0x2000044c

08007ed0 <_lseek_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	; (8007ef0 <_lseek_r+0x20>)
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4611      	mov	r1, r2
 8007eda:	2200      	movs	r2, #0
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f7f9 fdf5 	bl	8001ace <_lseek>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d102      	bne.n	8007eee <_lseek_r+0x1e>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	b103      	cbz	r3, 8007eee <_lseek_r+0x1e>
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	2000044c 	.word	0x2000044c

08007ef4 <__ascii_mbtowc>:
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	b901      	cbnz	r1, 8007efa <__ascii_mbtowc+0x6>
 8007ef8:	a901      	add	r1, sp, #4
 8007efa:	b142      	cbz	r2, 8007f0e <__ascii_mbtowc+0x1a>
 8007efc:	b14b      	cbz	r3, 8007f12 <__ascii_mbtowc+0x1e>
 8007efe:	7813      	ldrb	r3, [r2, #0]
 8007f00:	600b      	str	r3, [r1, #0]
 8007f02:	7812      	ldrb	r2, [r2, #0]
 8007f04:	1e10      	subs	r0, r2, #0
 8007f06:	bf18      	it	ne
 8007f08:	2001      	movne	r0, #1
 8007f0a:	b002      	add	sp, #8
 8007f0c:	4770      	bx	lr
 8007f0e:	4610      	mov	r0, r2
 8007f10:	e7fb      	b.n	8007f0a <__ascii_mbtowc+0x16>
 8007f12:	f06f 0001 	mvn.w	r0, #1
 8007f16:	e7f8      	b.n	8007f0a <__ascii_mbtowc+0x16>

08007f18 <__malloc_lock>:
 8007f18:	4801      	ldr	r0, [pc, #4]	; (8007f20 <__malloc_lock+0x8>)
 8007f1a:	f7ff b8ba 	b.w	8007092 <__retarget_lock_acquire_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20000444 	.word	0x20000444

08007f24 <__malloc_unlock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__malloc_unlock+0x8>)
 8007f26:	f7ff b8b5 	b.w	8007094 <__retarget_lock_release_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20000444 	.word	0x20000444

08007f30 <_read_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d07      	ldr	r5, [pc, #28]	; (8007f50 <_read_r+0x20>)
 8007f34:	4604      	mov	r4, r0
 8007f36:	4608      	mov	r0, r1
 8007f38:	4611      	mov	r1, r2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7f9 fd65 	bl	8001a0e <_read>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_read_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_read_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	2000044c 	.word	0x2000044c

08007f54 <__ascii_wctomb>:
 8007f54:	b149      	cbz	r1, 8007f6a <__ascii_wctomb+0x16>
 8007f56:	2aff      	cmp	r2, #255	; 0xff
 8007f58:	bf85      	ittet	hi
 8007f5a:	238a      	movhi	r3, #138	; 0x8a
 8007f5c:	6003      	strhi	r3, [r0, #0]
 8007f5e:	700a      	strbls	r2, [r1, #0]
 8007f60:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f64:	bf98      	it	ls
 8007f66:	2001      	movls	r0, #1
 8007f68:	4770      	bx	lr
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	4770      	bx	lr

08007f6e <abort>:
 8007f6e:	b508      	push	{r3, lr}
 8007f70:	2006      	movs	r0, #6
 8007f72:	f000 f82b 	bl	8007fcc <raise>
 8007f76:	2001      	movs	r0, #1
 8007f78:	f7f9 fd3f 	bl	80019fa <_exit>

08007f7c <_raise_r>:
 8007f7c:	291f      	cmp	r1, #31
 8007f7e:	b538      	push	{r3, r4, r5, lr}
 8007f80:	4604      	mov	r4, r0
 8007f82:	460d      	mov	r5, r1
 8007f84:	d904      	bls.n	8007f90 <_raise_r+0x14>
 8007f86:	2316      	movs	r3, #22
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f92:	b112      	cbz	r2, 8007f9a <_raise_r+0x1e>
 8007f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f98:	b94b      	cbnz	r3, 8007fae <_raise_r+0x32>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f830 	bl	8008000 <_getpid_r>
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007faa:	f000 b817 	b.w	8007fdc <_kill_r>
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d00a      	beq.n	8007fc8 <_raise_r+0x4c>
 8007fb2:	1c59      	adds	r1, r3, #1
 8007fb4:	d103      	bne.n	8007fbe <_raise_r+0x42>
 8007fb6:	2316      	movs	r3, #22
 8007fb8:	6003      	str	r3, [r0, #0]
 8007fba:	2001      	movs	r0, #1
 8007fbc:	e7e7      	b.n	8007f8e <_raise_r+0x12>
 8007fbe:	2400      	movs	r4, #0
 8007fc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	4798      	blx	r3
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e7e0      	b.n	8007f8e <_raise_r+0x12>

08007fcc <raise>:
 8007fcc:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <raise+0xc>)
 8007fce:	4601      	mov	r1, r0
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f7ff bfd3 	b.w	8007f7c <_raise_r>
 8007fd6:	bf00      	nop
 8007fd8:	2000000c 	.word	0x2000000c

08007fdc <_kill_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d07      	ldr	r5, [pc, #28]	; (8007ffc <_kill_r+0x20>)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	f7f9 fcf6 	bl	80019da <_kill>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d102      	bne.n	8007ff8 <_kill_r+0x1c>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	b103      	cbz	r3, 8007ff8 <_kill_r+0x1c>
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	2000044c 	.word	0x2000044c

08008000 <_getpid_r>:
 8008000:	f7f9 bce3 	b.w	80019ca <_getpid>

08008004 <_init>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr

08008010 <_fini>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr
