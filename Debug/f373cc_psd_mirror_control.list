
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080084b8  080084b8  000184b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088ec  080088ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080088ec  080088ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088ec  080088ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080088f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001dc  08008ad0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08008ad0  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012079  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254d  00000000  00000000  00032285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000347d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00035728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de29  00000000  00000000  00036580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001375d  00000000  00000000  000543a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad1de  00000000  00000000  00067b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114ce4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000515c  00000000  00000000  00114d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800849c 	.word	0x0800849c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800849c 	.word	0x0800849c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f001 f863 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f909 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 fb17 	bl	80011e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bba:	f000 f97f 	bl	8000ebc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bbe:	f000 f9bb 	bl	8000f38 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000bc2:	f000 fae1 	bl	8001188 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc6:	f000 fa19 	bl	8000ffc <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bca:	f000 fa65 	bl	8001098 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000bce:	f000 f9f1 	bl	8000fb4 <MX_TIM13_Init>
  MX_IWDG_Init();
 8000bd2:	f000 f955 	bl	8000e80 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  MEMS_DRIVER_HV_Disable();
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f001 fb60 	bl	80022a4 <HAL_GPIO_WritePin>

  printf("boink\n");
 8000be4:	4868      	ldr	r0, [pc, #416]	; (8000d88 <main+0x1e0>)
 8000be6:	f005 fb5d 	bl	80062a4 <puts>
  HAL_IWDG_Refresh(&hiwdg);
 8000bea:	4868      	ldr	r0, [pc, #416]	; (8000d8c <main+0x1e4>)
 8000bec:	f001 fbf3 	bl	80023d6 <HAL_IWDG_Refresh>

  // start MEMS FCLK_X
  HAL_TIM_Base_Start(&htim14);
 8000bf0:	4867      	ldr	r0, [pc, #412]	; (8000d90 <main+0x1e8>)
 8000bf2:	f003 fdc9 	bl	8004788 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim14, TIM_CHANNEL_1);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4865      	ldr	r0, [pc, #404]	; (8000d90 <main+0x1e8>)
 8000bfa:	f003 fe7f 	bl	80048fc <HAL_TIM_OC_Start>
  //htim14.Instance->CCR1 = 2;

  // start MEMS FCLK_Y
  HAL_TIM_Base_Start(&htim16);
 8000bfe:	4865      	ldr	r0, [pc, #404]	; (8000d94 <main+0x1ec>)
 8000c00:	f003 fdc2 	bl	8004788 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 8000c04:	2100      	movs	r1, #0
 8000c06:	4863      	ldr	r0, [pc, #396]	; (8000d94 <main+0x1ec>)
 8000c08:	f003 fe78 	bl	80048fc <HAL_TIM_OC_Start>
  //htim16.Instance->CCR1 = 2;
  HAL_IWDG_Refresh(&hiwdg);
 8000c0c:	485f      	ldr	r0, [pc, #380]	; (8000d8c <main+0x1e4>)
 8000c0e:	f001 fbe2 	bl	80023d6 <HAL_IWDG_Refresh>

  // @note configure the chip inside the mcp3561_conf.h
  MCP3561_Reset(&hspi1);
 8000c12:	4861      	ldr	r0, [pc, #388]	; (8000d98 <main+0x1f0>)
 8000c14:	f001 f81e 	bl	8001c54 <MCP3561_Reset>
  HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f001 f893 	bl	8001d44 <HAL_Delay>
  MCP3561_Init(&hspi1);
 8000c1e:	485e      	ldr	r0, [pc, #376]	; (8000d98 <main+0x1f0>)
 8000c20:	f000 ffa6 	bl	8001b70 <MCP3561_Init>

  HAL_IWDG_Refresh(&hiwdg);
 8000c24:	4859      	ldr	r0, [pc, #356]	; (8000d8c <main+0x1e4>)
 8000c26:	f001 fbd6 	bl	80023d6 <HAL_IWDG_Refresh>

  MEMS_DRIVER_Init(&hspi2);
 8000c2a:	485c      	ldr	r0, [pc, #368]	; (8000d9c <main+0x1f4>)
 8000c2c:	f000 fbb0 	bl	8001390 <MEMS_DRIVER_Init>
  MCP3561_Channels(&hspi1, MCP3561_MUX_CH0, MCP3561_MUX_CH1);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2100      	movs	r1, #0
 8000c34:	4858      	ldr	r0, [pc, #352]	; (8000d98 <main+0x1f0>)
 8000c36:	f000 ff7b 	bl	8001b30 <MCP3561_Channels>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	4858      	ldr	r0, [pc, #352]	; (8000da0 <main+0x1f8>)
 8000c40:	f001 fb30 	bl	80022a4 <HAL_GPIO_WritePin>

  HAL_IWDG_Refresh(&hiwdg);
 8000c44:	4851      	ldr	r0, [pc, #324]	; (8000d8c <main+0x1e4>)
 8000c46:	f001 fbc6 	bl	80023d6 <HAL_IWDG_Refresh>
  // prepare ADC stream read request
  spi1_tx_buf[0] = MCP3561_DEVICE_ADDRESS_MASK | 1; // [a a 0 0 0 0 0 1]
 8000c4a:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <main+0x1fc>)
 8000c4c:	2241      	movs	r2, #65	; 0x41
 8000c4e:	701a      	strb	r2, [r3, #0]

  // read first data (aka. clear any pending DRDY IRQ)
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2110      	movs	r1, #16
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f001 fb24 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, spi1_tx_buf, spi1_rx_buf, 5, 3);
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2305      	movs	r3, #5
 8000c62:	4a51      	ldr	r2, [pc, #324]	; (8000da8 <main+0x200>)
 8000c64:	494f      	ldr	r1, [pc, #316]	; (8000da4 <main+0x1fc>)
 8000c66:	484c      	ldr	r0, [pc, #304]	; (8000d98 <main+0x1f0>)
 8000c68:	f003 f9c7 	bl	8003ffa <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2110      	movs	r1, #16
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f001 fb16 	bl	80022a4 <HAL_GPIO_WritePin>
  flag_new_adc_data = 0;
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <main+0x204>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]

  //MEMS_DRIVER_HV_Enable();

  HAL_IWDG_Refresh(&hiwdg);
 8000c7e:	4843      	ldr	r0, [pc, #268]	; (8000d8c <main+0x1e4>)
 8000c80:	f001 fba9 	bl	80023d6 <HAL_IWDG_Refresh>
  setup_done = true;
 8000c84:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <main+0x208>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
		volt = ((float)adc_channels[i])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
		printf("%.5f\t", volt);
	}
	*/
	volt = ((float)adc_channels[2])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <main+0x20c>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c9a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000db8 <main+0x210>
 8000c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ca2:	eddf 6a46 	vldr	s13, [pc, #280]	; 8000dbc <main+0x214>
 8000ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000caa:	4b45      	ldr	r3, [pc, #276]	; (8000dc0 <main+0x218>)
 8000cac:	edc3 7a00 	vstr	s15, [r3]
	if(volt < 1.0){
 8000cb0:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <main+0x218>)
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	d550      	bpl.n	8000d66 <main+0x1be>
		volt = ((float)adc_channels[1])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <main+0x20c>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cd4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000db8 <main+0x210>
 8000cd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cdc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000dbc <main+0x214>
 8000ce0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <main+0x218>)
 8000ce6:	edc3 7a00 	vstr	s15, [r3]
		volt = volt -1.25;
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <main+0x218>)
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8000cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cf8:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <main+0x218>)
 8000cfa:	edc3 7a00 	vstr	s15, [r3]
		printf("%.5f\t", volt);
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <main+0x218>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc20 	bl	8000548 <__aeabi_f2d>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	482d      	ldr	r0, [pc, #180]	; (8000dc4 <main+0x21c>)
 8000d0e:	f005 fa2d 	bl	800616c <iprintf>
		volt = ((float)adc_channels[3])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <main+0x20c>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d22:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000db8 <main+0x210>
 8000d26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d2a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000dbc <main+0x214>
 8000d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <main+0x218>)
 8000d34:	edc3 7a00 	vstr	s15, [r3]
		volt = volt -1.25;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <main+0x218>)
 8000d3a:	edd3 7a00 	vldr	s15, [r3]
 8000d3e:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8000d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <main+0x218>)
 8000d48:	edc3 7a00 	vstr	s15, [r3]
		printf("%.5f\t", volt);
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <main+0x218>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fbf9 	bl	8000548 <__aeabi_f2d>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <main+0x21c>)
 8000d5c:	f005 fa06 	bl	800616c <iprintf>
		printf("\n");
 8000d60:	200a      	movs	r0, #10
 8000d62:	f005 fa1b 	bl	800619c <putchar>
	}

	// wait for DRDY interrupt
	while( flag_new_adc_data == 0){
 8000d66:	bf00      	nop
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <main+0x204>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f7      	bne.n	8000d68 <main+0x1c0>
		  // HAL_IWDG_Refresh(&hiwdg);
	};
	flag_new_adc_data = 0;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <main+0x204>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <main+0x1e4>)
 8000d80:	f001 fb29 	bl	80023d6 <HAL_IWDG_Refresh>
  {
 8000d84:	e781      	b.n	8000c8a <main+0xe2>
 8000d86:	bf00      	nop
 8000d88:	080084b8 	.word	0x080084b8
 8000d8c:	200001f8 	.word	0x200001f8
 8000d90:	2000031c 	.word	0x2000031c
 8000d94:	20000368 	.word	0x20000368
 8000d98:	20000208 	.word	0x20000208
 8000d9c:	2000026c 	.word	0x2000026c
 8000da0:	48000400 	.word	0x48000400
 8000da4:	2000043c 	.word	0x2000043c
 8000da8:	20000444 	.word	0x20000444
 8000dac:	2000045c 	.word	0x2000045c
 8000db0:	20000438 	.word	0x20000438
 8000db4:	2000044c 	.word	0x2000044c
 8000db8:	40251eb8 	.word	0x40251eb8
 8000dbc:	4b7fffff 	.word	0x4b7fffff
 8000dc0:	20000460 	.word	0x20000460
 8000dc4:	080084c0 	.word	0x080084c0

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09a      	sub	sp, #104	; 0x68
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dd2:	2228      	movs	r2, #40	; 0x28
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 fd56 	bl	8005888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	222c      	movs	r2, #44	; 0x2c
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fd48 	bl	8005888 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000df8:	2309      	movs	r3, #9
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000e18:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000e1c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fae8 	bl	80023f8 <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 faaa 	bl	8001386 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	230f      	movs	r3, #15
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fb10 	bl	8003474 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e5a:	f000 fa94 	bl	8001386 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fd39 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e74:	f000 fa87 	bl	8001386 <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3768      	adds	r7, #104	; 0x68
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <MX_IWDG_Init+0x38>)
 8000e88:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e8c:	2206      	movs	r2, #6
 8000e8e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = IWDG_WINDOW_VAL;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = IWDG_COUNTER_VAL;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000ea2:	f001 fa49 	bl	8002338 <HAL_IWDG_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000eac:	f000 fa6b 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001f8 	.word	0x200001f8
 8000eb8:	40003000 	.word	0x40003000

08000ebc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_SPI1_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f16:	2208      	movs	r2, #8
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f1c:	f002 fe54 	bl	8003bc8 <HAL_SPI_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fa2e 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000208 	.word	0x20000208
 8000f34:	40013000 	.word	0x40013000

08000f38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_SPI2_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f50:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f70:	2210      	movs	r2, #16
 8000f72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f94:	2208      	movs	r2, #8
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_SPI2_Init+0x74>)
 8000f9a:	f002 fe15 	bl	8003bc8 <HAL_SPI_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000fa4:	f000 f9ef 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000026c 	.word	0x2000026c
 8000fb0:	40003800 	.word	0x40003800

08000fb4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_TIM13_Init+0x40>)
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <MX_TIM13_Init+0x44>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_TIM13_Init+0x40>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_TIM13_Init+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = TIM13_COUNT_PERIOD;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_TIM13_Init+0x40>)
 8000fcc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_TIM13_Init+0x40>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_TIM13_Init+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_TIM13_Init+0x40>)
 8000fe0:	f003 fb82 	bl	80046e8 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000fea:	f000 f9cc 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002d0 	.word	0x200002d0
 8000ff8:	40001c00 	.word	0x40001c00

08000ffc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_TIM14_Init+0x94>)
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_TIM14_Init+0x98>)
 8001018:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM14_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM14_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = TIM14_COUNT_PERIOD;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_TIM14_Init+0x94>)
 8001028:	f640 02ad 	movw	r2, #2221	; 0x8ad
 800102c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM14_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM14_Init+0x94>)
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800103a:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_TIM14_Init+0x94>)
 800103c:	f003 fb54 	bl	80046e8 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001046:	f000 f99e 	bl	8001386 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_TIM14_Init+0x94>)
 800104c:	f003 fbfc 	bl	8004848 <HAL_TIM_OC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001056:	f000 f996 	bl	8001386 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800105a:	2330      	movs	r3, #48	; 0x30
 800105c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM14_Init+0x94>)
 8001072:	f003 fd0d 	bl	8004a90 <HAL_TIM_OC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800107c:	f000 f983 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM14_Init+0x94>)
 8001082:	f000 fb0f 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000031c 	.word	0x2000031c
 8001094:	40002000 	.word	0x40002000

08001098 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b090      	sub	sp, #64	; 0x40
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2220      	movs	r2, #32
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 fbe5 	bl	8005888 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <MX_TIM16_Init+0xec>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_COUNT_PERIOD;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010d2:	f640 02ad 	movw	r2, #2221	; 0x8ad
 80010d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010ea:	4825      	ldr	r0, [pc, #148]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010ec:	f003 fafc 	bl	80046e8 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80010f6:	f000 f946 	bl	8001386 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <MX_TIM16_Init+0xe8>)
 80010fc:	f003 fba4 	bl	8004848 <HAL_TIM_OC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001106:	f000 f93e 	bl	8001386 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800110a:	2330      	movs	r3, #48	; 0x30
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <MX_TIM16_Init+0xe8>)
 8001130:	f003 fcae 	bl	8004a90 <HAL_TIM_OC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800113a:	f000 f924 	bl	8001386 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001156:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_TIM16_Init+0xe8>)
 8001162:	f003 ff09 	bl	8004f78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800116c:	f000 f90b 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <MX_TIM16_Init+0xe8>)
 8001172:	f000 fa97 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3740      	adds	r7, #64	; 0x40
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000368 	.word	0x20000368
 8001184:	40014400 	.word	0x40014400

08001188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <MX_USART2_UART_Init+0x5c>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011cc:	f003 ff26 	bl	800501c <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011d6:	f000 f8d6 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200003b4 	.word	0x200003b4
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fe:	4b51      	ldr	r3, [pc, #324]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a50      	ldr	r2, [pc, #320]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <MX_GPIO_Init+0x15c>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a4a      	ldr	r2, [pc, #296]	; (8001344 <MX_GPIO_Init+0x15c>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a44      	ldr	r2, [pc, #272]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b42      	ldr	r3, [pc, #264]	; (8001344 <MX_GPIO_Init+0x15c>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <MX_GPIO_Init+0x15c>)
 800124c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <MX_GPIO_Init+0x15c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f001 f81c 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f244 01c0 	movw	r1, #16576	; 0x40c0
 8001272:	4835      	ldr	r0, [pc, #212]	; (8001348 <MX_GPIO_Init+0x160>)
 8001274:	f001 f816 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001278:	2310      	movs	r3, #16
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f000 fe8d 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_nIRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_nIRQ_Pin;
 8001296:	2302      	movs	r3, #2
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_nIRQ_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4827      	ldr	r0, [pc, #156]	; (8001348 <MX_GPIO_Init+0x160>)
 80012ac:	f000 fe80 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80012b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	481f      	ldr	r0, [pc, #124]	; (8001348 <MX_GPIO_Init+0x160>)
 80012ca:	f000 fe71 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 80012ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f000 fe61 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012ee:	23c0      	movs	r3, #192	; 0xc0
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <MX_GPIO_Init+0x160>)
 8001306:	f000 fe53 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800130a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800131c:	2301      	movs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <MX_GPIO_Init+0x160>)
 8001328:	f000 fe42 	bl	8001fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2007      	movs	r0, #7
 8001332:	f000 fe06 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001336:	2007      	movs	r0, #7
 8001338:	f000 fe1f 	bl	8001f7a <HAL_NVIC_EnableIRQ>

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400

0800134c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135a:	2201      	movs	r2, #1
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <__io_putchar+0x20>)
 800135e:	f003 feab 	bl	80050b8 <HAL_UART_Transmit>

    return ch;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003b4 	.word	0x200003b4

08001370 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]

}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138a:	b672      	cpsid	i
}
 800138c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138e:	e7fe      	b.n	800138e <Error_Handler+0x8>

08001390 <MEMS_DRIVER_Init>:
************************************************************************************
*/

#include "mirrorcle_mems_driver.h"

void MEMS_DRIVER_Init(SPI_HandleTypeDef *hspi){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
   * 2097167 Decimal or 0x20000F to command ENABLE ALL DAC CHANNELS
   * 3145728 Decimal or 0x300000 to command ENABLE SOFTWARE LDAC
   */

  // FULL RESET
  dac_data[0] = 0x28;
 8001398:	2328      	movs	r3, #40	; 0x28
 800139a:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x01;
 80013a0:	2301      	movs	r3, #1
 80013a2:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013aa:	482f      	ldr	r0, [pc, #188]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 80013ac:	f000 ff7a 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80013b0:	f107 0108 	add.w	r1, r7, #8
 80013b4:	2303      	movs	r3, #3
 80013b6:	2203      	movs	r2, #3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f002 fcb0 	bl	8003d1e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c4:	4828      	ldr	r0, [pc, #160]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 80013c6:	f000 ff6d 	bl	80022a4 <HAL_GPIO_WritePin>

  // ENABLE INTERNAL REFERENCE
  dac_data[0] = 0x38;
 80013ca:	2338      	movs	r3, #56	; 0x38
 80013cc:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x01;
 80013d2:	2301      	movs	r3, #1
 80013d4:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013dc:	4822      	ldr	r0, [pc, #136]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 80013de:	f000 ff61 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80013e2:	f107 0108 	add.w	r1, r7, #8
 80013e6:	2303      	movs	r3, #3
 80013e8:	2203      	movs	r2, #3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f002 fc97 	bl	8003d1e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	481c      	ldr	r0, [pc, #112]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 80013f8:	f000 ff54 	bl	80022a4 <HAL_GPIO_WritePin>

  // ENABLE ALL DAC CHANNELS
  dac_data[0] = 0x20;
 80013fc:	2320      	movs	r3, #32
 80013fe:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x0F;
 8001404:	230f      	movs	r3, #15
 8001406:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	4816      	ldr	r0, [pc, #88]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 8001410:	f000 ff48 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001414:	f107 0108 	add.w	r1, r7, #8
 8001418:	2303      	movs	r3, #3
 800141a:	2203      	movs	r2, #3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f002 fc7e 	bl	8003d1e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 800142a:	f000 ff3b 	bl	80022a4 <HAL_GPIO_WritePin>

  // ENABLE SOFTWARE LDAC
  dac_data[0] = 0x30;
 800142e:	2330      	movs	r3, #48	; 0x30
 8001430:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 8001432:	2300      	movs	r3, #0
 8001434:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 8001442:	f000 ff2f 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	2303      	movs	r3, #3
 800144c:	2203      	movs	r2, #3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f002 fc65 	bl	8003d1e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4803      	ldr	r0, [pc, #12]	; (8001468 <MEMS_DRIVER_Init+0xd8>)
 800145c:	f000 ff22 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_MspInit+0x44>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_MspInit+0x44>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x44>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x44>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x44>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_SPI_MspInit+0x14c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d145      	bne.n	8001562 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b48      	ldr	r3, [pc, #288]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b45      	ldr	r3, [pc, #276]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a44      	ldr	r2, [pc, #272]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	6153      	str	r3, [r2, #20]
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_SPI_MspInit+0x150>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4a3e      	ldr	r2, [pc, #248]	; (8001604 <HAL_SPI_MspInit+0x150>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6153      	str	r3, [r2, #20]
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <HAL_SPI_MspInit+0x150>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800151e:	2360      	movs	r3, #96	; 0x60
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800152e:	2305      	movs	r3, #5
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f000 fd38 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001540:	2301      	movs	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001550:	2305      	movs	r3, #5
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	482b      	ldr	r0, [pc, #172]	; (8001608 <HAL_SPI_MspInit+0x154>)
 800155c:	f000 fd28 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001560:	e04a      	b.n	80015f8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a29      	ldr	r2, [pc, #164]	; (800160c <HAL_SPI_MspInit+0x158>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d145      	bne.n	80015f8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_SPI_MspInit+0x150>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	4a24      	ldr	r2, [pc, #144]	; (8001604 <HAL_SPI_MspInit+0x150>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	61d3      	str	r3, [r2, #28]
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_SPI_MspInit+0x150>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_SPI_MspInit+0x150>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_SPI_MspInit+0x150>)
 800158a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158e:	6153      	str	r3, [r2, #20]
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_SPI_MspInit+0x150>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_SPI_MspInit+0x150>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4a18      	ldr	r2, [pc, #96]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80015a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015a6:	6153      	str	r3, [r2, #20]
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_SPI_MspInit+0x150>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c6:	2305      	movs	r3, #5
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <HAL_SPI_MspInit+0x154>)
 80015d2:	f000 fced 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e8:	2305      	movs	r3, #5
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <HAL_SPI_MspInit+0x15c>)
 80015f4:	f000 fcdc 	bl	8001fb0 <HAL_GPIO_Init>
}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40013000 	.word	0x40013000
 8001604:	40021000 	.word	0x40021000
 8001608:	48000400 	.word	0x48000400
 800160c:	40003800 	.word	0x40003800
 8001610:	48000c00 	.word	0x48000c00

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <HAL_TIM_Base_MspInit+0x80>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10c      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800163e:	e022      	b.n	8001686 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_TIM_Base_MspInit+0x88>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10c      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
}
 8001662:	e010      	b.n	8001686 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_TIM_Base_MspInit+0x8c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10b      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40001c00 	.word	0x40001c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40002000 	.word	0x40002000
 80016a0:	40014400 	.word	0x40014400

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a24      	ldr	r2, [pc, #144]	; (8001754 <HAL_TIM_MspPostInit+0xb0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d11e      	bne.n	8001704 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_TIM_MspPostInit+0xb4>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4a23      	ldr	r2, [pc, #140]	; (8001758 <HAL_TIM_MspPostInit+0xb4>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	6153      	str	r3, [r2, #20]
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <HAL_TIM_MspPostInit+0xb4>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = FCLK_X_Pin;
 80016de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80016f0:	2309      	movs	r3, #9
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_X_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f000 fc57 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001702:	e022      	b.n	800174a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM16)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_TIM_MspPostInit+0xb8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11d      	bne.n	800174a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_TIM_MspPostInit+0xb4>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_TIM_MspPostInit+0xb4>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_TIM_MspPostInit+0xb4>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FCLK_Y_Pin;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001738:	2301      	movs	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_Y_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f000 fc33 	bl	8001fb0 <HAL_GPIO_Init>
}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40002000 	.word	0x40002000
 8001758:	40021000 	.word	0x40021000
 800175c:	40014400 	.word	0x40014400

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_UART_MspInit+0x7c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d128      	bne.n	80017d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0x80>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <HAL_UART_MspInit+0x80>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_UART_MspInit+0x80>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_UART_MspInit+0x80>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <HAL_UART_MspInit+0x80>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	6153      	str	r3, [r2, #20]
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_UART_MspInit+0x80>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b2:	230c      	movs	r3, #12
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c2:	2307      	movs	r3, #7
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f000 fbee 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40004400 	.word	0x40004400
 80017e0:	40021000 	.word	0x40021000

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001830:	f000 fa68 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  static uint8_t channel_id = 0;
  static uint32_t value = 0;
  //static float volt = 0.0f;
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	4823      	ldr	r0, [pc, #140]	; (80018d0 <EXTI1_IRQHandler+0x98>)
 8001842:	f000 fd47 	bl	80022d4 <HAL_GPIO_TogglePin>

  /* @todo HAL_SPI_TransmitReceive() is a BLOCKING function
   * it SHOULD NOT BE USED IN AN INTERRUPT
   * but HAL_SPI_TransmitReceive_IT() is just kind of broken ?? */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2110      	movs	r1, #16
 800184a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184e:	f000 fd29 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, spi1_tx_buf, spi1_rx_buf, 5, 3);
 8001852:	2303      	movs	r3, #3
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2305      	movs	r3, #5
 8001858:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <EXTI1_IRQHandler+0x9c>)
 800185a:	491f      	ldr	r1, [pc, #124]	; (80018d8 <EXTI1_IRQHandler+0xa0>)
 800185c:	481f      	ldr	r0, [pc, #124]	; (80018dc <EXTI1_IRQHandler+0xa4>)
 800185e:	f002 fbcc 	bl	8003ffa <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001862:	2201      	movs	r2, #1
 8001864:	2110      	movs	r1, #16
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f000 fd1b 	bl	80022a4 <HAL_GPIO_WritePin>

  channel_id = MCP3564_SCAN_ID_TO_CHANNEL[ (spi1_rx_buf[1] >> 4) & 0x0f ];
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <EXTI1_IRQHandler+0x9c>)
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <EXTI1_IRQHandler+0xa8>)
 800187c:	5cd2      	ldrb	r2, [r2, r3]
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <EXTI1_IRQHandler+0xac>)
 8001880:	701a      	strb	r2, [r3, #0]
  if(channel_id <= 4){
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <EXTI1_IRQHandler+0xac>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b04      	cmp	r3, #4
 8001888:	d81b      	bhi.n	80018c2 <EXTI1_IRQHandler+0x8a>
	  value = (spi1_rx_buf[2] << 16) | (spi1_rx_buf[3] << 8) | spi1_rx_buf[4];
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <EXTI1_IRQHandler+0x9c>)
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	041a      	lsls	r2, r3, #16
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <EXTI1_IRQHandler+0x9c>)
 8001892:	78db      	ldrb	r3, [r3, #3]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	4313      	orrs	r3, r2
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <EXTI1_IRQHandler+0x9c>)
 800189a:	7912      	ldrb	r2, [r2, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <EXTI1_IRQHandler+0xb0>)
 80018a2:	601a      	str	r2, [r3, #0]
	  adc_channels[channel_id] = value;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <EXTI1_IRQHandler+0xac>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <EXTI1_IRQHandler+0xb0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <EXTI1_IRQHandler+0xb4>)
 80018b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	  if(channel_id == 3) flag_new_adc_data = 1;  // only update once a SCAN cycle is complete
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <EXTI1_IRQHandler+0xac>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d102      	bne.n	80018c2 <EXTI1_IRQHandler+0x8a>
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <EXTI1_IRQHandler+0xb8>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_nIRQ_Pin);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f000 fd20 	bl	8002308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	48000400 	.word	0x48000400
 80018d4:	20000444 	.word	0x20000444
 80018d8:	2000043c 	.word	0x2000043c
 80018dc:	20000208 	.word	0x20000208
 80018e0:	080084c8 	.word	0x080084c8
 80018e4:	20000464 	.word	0x20000464
 80018e8:	20000468 	.word	0x20000468
 80018ec:	2000044c 	.word	0x2000044c
 80018f0:	2000045c 	.word	0x2000045c

080018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190e:	f003 ff91 	bl	8005834 <__errno>
 8001912:	4603      	mov	r3, r0
 8001914:	2216      	movs	r2, #22
 8001916:	601a      	str	r2, [r3, #0]
	return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_exit>:

void _exit (int status)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe7 	bl	8001904 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001936:	e7fe      	b.n	8001936 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
	}

return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fcdd 	bl	800134c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf1      	blt.n	8001984 <_write+0x12>
	}
	return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_close>:

int _close(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
	return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f003 fef6 	bl	8005834 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20008000 	.word	0x20008000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	2000046c 	.word	0x2000046c
 8001a7c:	20000488 	.word	0x20000488

08001a80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac0:	4c0b      	ldr	r4, [pc, #44]	; (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ace:	f7ff ffd7 	bl	8001a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f003 feb5 	bl	8005840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad6:	f7ff f867 	bl	8000ba8 <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001adc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ae8:	080088f4 	.word	0x080088f4
  ldr r2, =_sbss
 8001aec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001af0:	20000484 	.word	0x20000484

08001af4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_IRQHandler>

08001af6 <_MCP3561_write>:

#include "main.h"
#include "mcp3564.h"
#include "mcp3564_conf.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2110      	movs	r1, #16
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f000 fbca 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	2303      	movs	r3, #3
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f002 f901 	bl	8003d1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2110      	movs	r1, #16
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f000 fbbe 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <MCP3561_Channels>:
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
	return reg8[1];
}

void MCP3561_Channels(SPI_HandleTypeDef *hspi, uint8_t ch_p, uint8_t ch_n){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd[4] = {0,0,0,0};
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
	cmd[0]  = MCP3561_MUX_WRITE;
 8001b44:	235a      	movs	r3, #90	; 0x5a
 8001b46:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (ch_p << 4) | ch_n;   // [7..4] VIN+ / [3..0] VIN-
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	b25a      	sxtb	r2, r3
 8001b4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	737b      	strb	r3, [r7, #13]
	//cmd[1]  = (MCP3561_MUX_CH_IntTemp_P << 4) | MCP3561_MUX_CH_IntTemp_M;   // [7..4] VIN+ / [3..0] VIN-
	_MCP3561_write(hspi, cmd, 2);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffc7 	bl	8001af6 <_MCP3561_write>
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]

	// 8-bit CONFIG registers
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 8001b7c:	2346      	movs	r3, #70	; 0x46
 8001b7e:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG0;
 8001b80:	2303      	movs	r3, #3
 8001b82:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffb2 	bl	8001af6 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 8001b92:	234a      	movs	r3, #74	; 0x4a
 8001b94:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG1;
 8001b96:	2318      	movs	r3, #24
 8001b98:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa7 	bl	8001af6 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 8001ba8:	234e      	movs	r3, #78	; 0x4e
 8001baa:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG2;
 8001bac:	2388      	movs	r3, #136	; 0x88
 8001bae:	727b      	strb	r3, [r7, #9]
	cmd[1] += 3; // last two bits must always be '11'
 8001bb0:	7a7b      	ldrb	r3, [r7, #9]
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff98 	bl	8001af6 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8001bc6:	2352      	movs	r3, #82	; 0x52
 8001bc8:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG3;
 8001bca:	23f0      	movs	r3, #240	; 0xf0
 8001bcc:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff8d 	bl	8001af6 <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 8001bdc:	2356      	movs	r3, #86	; 0x56
 8001bde:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_IRQ_REG;
 8001be0:	2306      	movs	r3, #6
 8001be2:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	2202      	movs	r2, #2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff82 	bl	8001af6 <_MCP3561_write>
	// configure SCAN mode to automatically cycle through channels
	// only available for MCP3562 and MCP3564, and only for certain input combinations
	// @see Datasheet Table 5-14 on p. 54
	#ifdef MCP3561_USERCONF_SCAN_ENABLE
		uint32_t reg_val;
		reg_val = MCP3561_USERCONF_SCAN_REG;
 8001bf2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001bf6:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_SCAN_WRITE;
 8001bf8:	235e      	movs	r3, #94	; 0x5e
 8001bfa:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	2204      	movs	r2, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ff6b 	bl	8001af6 <_MCP3561_write>

		reg_val = MCP3561_USERCONF_TIMER_VAL;
 8001c20:	23ec      	movs	r3, #236	; 0xec
 8001c22:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_TIMER_WRITE;
 8001c24:	2362      	movs	r3, #98	; 0x62
 8001c26:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2204      	movs	r2, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff55 	bl	8001af6 <_MCP3561_write>
	#endif

}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8001c5c:	237a      	movs	r3, #122	; 0x7a
 8001c5e:	73fb      	strb	r3, [r7, #15]
	_MCP3561_write(hspi, &cmd, 1);
 8001c60:	f107 030f 	add.w	r3, r7, #15
 8001c64:	2201      	movs	r2, #1
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff44 	bl	8001af6 <_MCP3561_write>
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x28>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f94f 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	200f      	movs	r0, #15
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fbea 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f967 	bl	8001f96 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 f92f 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000470 	.word	0x20000470

08001d2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000470 	.word	0x20000470

08001d44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff3e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff31 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e154      	b.n	800226a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8146 	beq.w	8002264 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80a0 	beq.w	8002264 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b58      	ldr	r3, [pc, #352]	; (8002288 <HAL_GPIO_Init+0x2d8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a57      	ldr	r2, [pc, #348]	; (8002288 <HAL_GPIO_Init+0x2d8>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b55      	ldr	r3, [pc, #340]	; (8002288 <HAL_GPIO_Init+0x2d8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a53      	ldr	r2, [pc, #332]	; (800228c <HAL_GPIO_Init+0x2dc>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002166:	d019      	beq.n	800219c <HAL_GPIO_Init+0x1ec>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a49      	ldr	r2, [pc, #292]	; (8002290 <HAL_GPIO_Init+0x2e0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_GPIO_Init+0x1e8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_GPIO_Init+0x2e4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00d      	beq.n	8002194 <HAL_GPIO_Init+0x1e4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a47      	ldr	r2, [pc, #284]	; (8002298 <HAL_GPIO_Init+0x2e8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <HAL_GPIO_Init+0x1e0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a46      	ldr	r2, [pc, #280]	; (800229c <HAL_GPIO_Init+0x2ec>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_GPIO_Init+0x1dc>
 8002188:	2304      	movs	r3, #4
 800218a:	e008      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 800218c:	2305      	movs	r3, #5
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002190:	2303      	movs	r3, #3
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 800219c:	2300      	movs	r3, #0
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ae:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_GPIO_Init+0x2dc>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021e0:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800220a:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002234:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f aea3 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40021000 	.word	0x40021000
 800228c:	40010000 	.word	0x40010000
 8002290:	48000400 	.word	0x48000400
 8002294:	48000800 	.word	0x48000800
 8002298:	48000c00 	.word	0x48000c00
 800229c:	48001000 	.word	0x48001000
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4013      	ands	r3, r2
 80022ec:	041a      	lsls	r2, r3, #16
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43d9      	mvns	r1, r3
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	400b      	ands	r3, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f822 	bl	8001370 <HAL_GPIO_EXTI_Callback>
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002352:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f245 5255 	movw	r2, #21845	; 0x5555
 800235c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6852      	ldr	r2, [r2, #4]
 8002366:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6892      	ldr	r2, [r2, #8]
 8002370:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002372:	f7ff fcdb 	bl	8001d2c <HAL_GetTick>
 8002376:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002378:	e00f      	b.n	800239a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800237a:	f7ff fcd7 	bl	8001d2c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b27      	cmp	r3, #39	; 0x27
 8002386:	d908      	bls.n	800239a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e019      	b.n	80023ce <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e8      	bne.n	800237a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d005      	beq.n	80023c2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	e004      	b.n	80023cc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80023e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023fe:	af00      	add	r7, sp, #0
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002408:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f001 b823 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 817d 	beq.w	800272e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002434:	4bbc      	ldr	r3, [pc, #752]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b04      	cmp	r3, #4
 800243e:	d00c      	beq.n	800245a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002440:	4bb9      	ldr	r3, [pc, #740]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d15c      	bne.n	8002506 <HAL_RCC_OscConfig+0x10e>
 800244c:	4bb6      	ldr	r3, [pc, #728]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d155      	bne.n	8002506 <HAL_RCC_OscConfig+0x10e>
 800245a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800246e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0x94>
 8002486:	4ba8      	ldr	r3, [pc, #672]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e015      	b.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 800248c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002490:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024b4:	4b9c      	ldr	r3, [pc, #624]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024c4:	fa92 f2a2 	rbit	r2, r2
 80024c8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024d0:	fab2 f282 	clz	r2, r2
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f042 0220 	orr.w	r2, r2, #32
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f002 021f 	and.w	r2, r2, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 811f 	beq.w	800272c <HAL_RCC_OscConfig+0x334>
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8116 	bne.w	800272c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f000 bfaf 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x12e>
 8002518:	4b83      	ldr	r3, [pc, #524]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a82      	ldr	r2, [pc, #520]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e036      	b.n	8002594 <HAL_RCC_OscConfig+0x19c>
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x158>
 8002536:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7b      	ldr	r2, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b79      	ldr	r3, [pc, #484]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a78      	ldr	r2, [pc, #480]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e021      	b.n	8002594 <HAL_RCC_OscConfig+0x19c>
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x184>
 8002562:	4b71      	ldr	r3, [pc, #452]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a70      	ldr	r2, [pc, #448]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b6e      	ldr	r3, [pc, #440]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6d      	ldr	r2, [pc, #436]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0x19c>
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a69      	ldr	r2, [pc, #420]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a66      	ldr	r2, [pc, #408]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002594:	4b64      	ldr	r3, [pc, #400]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f023 020f 	bic.w	r2, r3, #15
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	495f      	ldr	r1, [pc, #380]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d059      	beq.n	8002672 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fbb5 	bl	8001d2c <HAL_GetTick>
 80025c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff fbb0 	bl	8001d2c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b64      	cmp	r3, #100	; 0x64
 80025d6:	d902      	bls.n	80025de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	f000 bf43 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
 80025de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d102      	bne.n	8002610 <HAL_RCC_OscConfig+0x218>
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	e015      	b.n	800263c <HAL_RCC_OscConfig+0x244>
 8002610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002614:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002628:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800262c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002640:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002644:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002648:	fa92 f2a2 	rbit	r2, r2
 800264c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002650:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f002 021f 	and.w	r2, r2, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ab      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1d0>
 8002670:	e05d      	b.n	800272e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff fb5b 	bl	8001d2c <HAL_GetTick>
 8002676:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7ff fb56 	bl	8001d2c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d902      	bls.n	8002692 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	f000 bee9 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
 8002692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002696:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2cc>
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	e015      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f8>
 80026c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026fc:	fa92 f2a2 	rbit	r2, r2
 8002700:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002704:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002708:	fab2 f282 	clz	r2, r2
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	f042 0220 	orr.w	r2, r2, #32
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	f002 021f 	and.w	r2, r2, #31
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f202 	lsl.w	r2, r1, r2
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ab      	bne.n	800267c <HAL_RCC_OscConfig+0x284>
 8002724:	e003      	b.n	800272e <HAL_RCC_OscConfig+0x336>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 817d 	beq.w	8002a3e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002744:	4ba6      	ldr	r3, [pc, #664]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002750:	4ba3      	ldr	r3, [pc, #652]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d172      	bne.n	8002842 <HAL_RCC_OscConfig+0x44a>
 800275c:	4ba0      	ldr	r3, [pc, #640]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d16c      	bne.n	8002842 <HAL_RCC_OscConfig+0x44a>
 8002768:	2302      	movs	r3, #2
 800276a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800277a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d102      	bne.n	8002798 <HAL_RCC_OscConfig+0x3a0>
 8002792:	4b93      	ldr	r3, [pc, #588]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	e013      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c8>
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027aa:	2302      	movs	r3, #2
 80027ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027bc:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2202      	movs	r2, #2
 80027c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027ca:	fa92 f2a2 	rbit	r2, r2
 80027ce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027d6:	fab2 f282 	clz	r2, r2
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f042 0220 	orr.w	r2, r2, #32
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f002 021f 	and.w	r2, r2, #31
 80027e6:	2101      	movs	r1, #1
 80027e8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCC_OscConfig+0x410>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d002      	beq.n	8002808 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f000 be2e 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	21f8      	movs	r1, #248	; 0xf8
 800281e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002826:	fa91 f1a1 	rbit	r1, r1
 800282a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800282e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002832:	fab1 f181 	clz	r1, r1
 8002836:	b2c9      	uxtb	r1, r1
 8002838:	408b      	lsls	r3, r1
 800283a:	4969      	ldr	r1, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002840:	e0fd      	b.n	8002a3e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8088 	beq.w	8002964 <HAL_RCC_OscConfig+0x56c>
 8002854:	2301      	movs	r3, #1
 8002856:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002866:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002874:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	461a      	mov	r2, r3
 800287c:	2301      	movs	r3, #1
 800287e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7ff fa54 	bl	8001d2c <HAL_GetTick>
 8002884:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288a:	f7ff fa4f 	bl	8001d2c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d902      	bls.n	80028a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	f000 bde2 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d8>
 80028ca:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	e013      	b.n	80028f8 <HAL_RCC_OscConfig+0x500>
 80028d0:	2302      	movs	r3, #2
 80028d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028e2:	2302      	movs	r3, #2
 80028e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028f4:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2202      	movs	r2, #2
 80028fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002902:	fa92 f2a2 	rbit	r2, r2
 8002906:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800290a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800290e:	fab2 f282 	clz	r2, r2
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f042 0220 	orr.w	r2, r2, #32
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f002 021f 	and.w	r2, r2, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0af      	beq.n	800288a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	21f8      	movs	r1, #248	; 0xf8
 8002940:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002948:	fa91 f1a1 	rbit	r1, r1
 800294c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002950:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002954:	fab1 f181 	clz	r1, r1
 8002958:	b2c9      	uxtb	r1, r1
 800295a:	408b      	lsls	r3, r1
 800295c:	4920      	ldr	r1, [pc, #128]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
 8002962:	e06c      	b.n	8002a3e <HAL_RCC_OscConfig+0x646>
 8002964:	2301      	movs	r3, #1
 8002966:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002976:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002984:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	461a      	mov	r2, r3
 800298c:	2300      	movs	r3, #0
 800298e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff f9cc 	bl	8001d2c <HAL_GetTick>
 8002994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299a:	f7ff f9c7 	bl	8001d2c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d902      	bls.n	80029b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	f000 bd5a 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
 80029b0:	2302      	movs	r3, #2
 80029b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5ec>
 80029da:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <HAL_RCC_OscConfig+0x5e8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e015      	b.n	8002a0c <HAL_RCC_OscConfig+0x614>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	2302      	movs	r3, #2
 80029e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029f6:	2302      	movs	r3, #2
 80029f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a08:	4bc8      	ldr	r3, [pc, #800]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a16:	fa92 f2a2 	rbit	r2, r2
 8002a1a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a1e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a22:	fab2 f282 	clz	r2, r2
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f042 0220 	orr.w	r2, r2, #32
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f002 021f 	and.w	r2, r2, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ad      	bne.n	800299a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8110 	beq.w	8002c74 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d079      	beq.n	8002b58 <HAL_RCC_OscConfig+0x760>
 8002a64:	2301      	movs	r3, #1
 8002a66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	4bab      	ldr	r3, [pc, #684]	; (8002d30 <HAL_RCC_OscConfig+0x938>)
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff f94d 	bl	8001d2c <HAL_GetTick>
 8002a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7ff f948 	bl	8001d2c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d902      	bls.n	8002aae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f000 bcdb 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ac8:	2202      	movs	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aec:	2202      	movs	r2, #2
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b08:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b14:	2102      	movs	r1, #2
 8002b16:	6019      	str	r1, [r3, #0]
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fa93 f1a3 	rbit	r1, r3
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b2e:	6019      	str	r1, [r3, #0]
  return result;
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0a0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x6a0>
 8002b56:	e08d      	b.n	8002c74 <HAL_RCC_OscConfig+0x87c>
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b7a:	601a      	str	r2, [r3, #0]
  return result;
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <HAL_RCC_OscConfig+0x938>)
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	461a      	mov	r2, r3
 8002b96:	2300      	movs	r3, #0
 8002b98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7ff f8c7 	bl	8001d2c <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7ff f8c2 	bl	8001d2c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d902      	bls.n	8002bba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f000 bc55 	b.w	8003464 <HAL_RCC_OscConfig+0x106c>
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f2a3 	rbit	r2, r3
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002be6:	2202      	movs	r2, #2
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	fa93 f2a3 	rbit	r2, r3
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c32:	2102      	movs	r1, #2
 8002c34:	6019      	str	r1, [r3, #0]
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	fa93 f1a3 	rbit	r1, r3
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c4c:	6019      	str	r1, [r3, #0]
  return result;
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d197      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 81a1 	beq.w	8002fcc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d116      	bne.n	8002cca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	61d3      	str	r3, [r2, #28]
 8002ca8:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cc2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCC_OscConfig+0x93c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11a      	bne.n	8002d0c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_RCC_OscConfig+0x93c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_RCC_OscConfig+0x93c>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f823 	bl	8001d2c <HAL_GetTick>
 8002ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	e009      	b.n	8002d00 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7ff f81e 	bl	8001d2c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	; 0x64
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e3b1      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_RCC_OscConfig+0x93c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCC_OscConfig+0x940>
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a02      	ldr	r2, [pc, #8]	; (8002d2c <HAL_RCC_OscConfig+0x934>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	e03c      	b.n	8002da4 <HAL_RCC_OscConfig+0x9ac>
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	10908120 	.word	0x10908120
 8002d34:	40007000 	.word	0x40007000
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x96a>
 8002d48:	4bc1      	ldr	r3, [pc, #772]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4ac0      	ldr	r2, [pc, #768]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	4bbe      	ldr	r3, [pc, #760]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4abd      	ldr	r2, [pc, #756]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d5a:	f023 0304 	bic.w	r3, r3, #4
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	e020      	b.n	8002da4 <HAL_RCC_OscConfig+0x9ac>
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x994>
 8002d72:	4bb7      	ldr	r3, [pc, #732]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4ab6      	ldr	r2, [pc, #728]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	6213      	str	r3, [r2, #32]
 8002d7e:	4bb4      	ldr	r3, [pc, #720]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4ab3      	ldr	r2, [pc, #716]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0x9ac>
 8002d8c:	4bb0      	ldr	r3, [pc, #704]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4aaf      	ldr	r2, [pc, #700]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	4bad      	ldr	r3, [pc, #692]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4aac      	ldr	r2, [pc, #688]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8081 	beq.w	8002eb8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe ffb9 	bl	8001d2c <HAL_GetTick>
 8002dba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe ffb4 	bl	8001d2c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e345      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002de0:	2202      	movs	r2, #2
 8002de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e04:	2202      	movs	r2, #2
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	fa93 f2a3 	rbit	r2, r3
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e1e:	601a      	str	r2, [r3, #0]
  return result;
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_OscConfig+0xa4c>
 8002e3e:	4b84      	ldr	r3, [pc, #528]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	e013      	b.n	8002e6c <HAL_RCC_OscConfig+0xa74>
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f2a3 	rbit	r2, r3
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	4b79      	ldr	r3, [pc, #484]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e70:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e74:	2102      	movs	r1, #2
 8002e76:	6011      	str	r1, [r2, #0]
 8002e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	fa92 f1a2 	rbit	r1, r2
 8002e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e8e:	6011      	str	r1, [r2, #0]
  return result;
 8002e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e94:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f002 021f 	and.w	r2, r2, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d084      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x9c8>
 8002eb6:	e07f      	b.n	8002fb8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe ff38 	bl	8001d2c <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe ff33 	bl	8001d2c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e2c4      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f06:	2202      	movs	r2, #2
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f20:	601a      	str	r2, [r3, #0]
  return result;
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_OscConfig+0xb4e>
 8002f40:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	e013      	b.n	8002f6e <HAL_RCC_OscConfig+0xb76>
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f4e:	2202      	movs	r2, #2
 8002f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	fa93 f2a3 	rbit	r2, r3
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	4b39      	ldr	r3, [pc, #228]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f72:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f76:	2102      	movs	r1, #2
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f7e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fa92 f1a2 	rbit	r1, r2
 8002f88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f8c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f90:	6011      	str	r1, [r2, #0]
  return result;
 8002f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f96:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d184      	bne.n	8002ec2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8242 	beq.w	8003462 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0xc58>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	f000 8213 	beq.w	8003412 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 8162 	bne.w	80032c2 <HAL_RCC_OscConfig+0xeca>
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003006:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800300a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fa93 f2a3 	rbit	r2, r3
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003022:	601a      	str	r2, [r3, #0]
  return result;
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800302c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003038:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	461a      	mov	r2, r3
 8003040:	2300      	movs	r3, #0
 8003042:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fe72 	bl	8001d2c <HAL_GetTick>
 8003048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304c:	e00c      	b.n	8003068 <HAL_RCC_OscConfig+0xc70>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fe6a 	bl	8001d2c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1fd      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003088:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800308c:	601a      	str	r2, [r3, #0]
  return result;
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003096:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_OscConfig+0xcba>
 80030ac:	4bb0      	ldr	r3, [pc, #704]	; (8003370 <HAL_RCC_OscConfig+0xf78>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	e027      	b.n	8003102 <HAL_RCC_OscConfig+0xd0a>
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f2a3 	rbit	r2, r3
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fa93 f2a3 	rbit	r2, r3
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	4b9c      	ldr	r3, [pc, #624]	; (8003370 <HAL_RCC_OscConfig+0xf78>)
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003106:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800310a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800310e:	6011      	str	r1, [r2, #0]
 8003110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003114:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	fa92 f1a2 	rbit	r1, r2
 800311e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003122:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003126:	6011      	str	r1, [r2, #0]
  return result;
 8003128:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	fab2 f282 	clz	r2, r2
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f042 0220 	orr.w	r2, r2, #32
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f002 021f 	and.w	r2, r2, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f202 	lsl.w	r2, r1, r2
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d182      	bne.n	8003054 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800314e:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_OscConfig+0xf78>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	430b      	orrs	r3, r1
 8003170:	497f      	ldr	r1, [pc, #508]	; (8003370 <HAL_RCC_OscConfig+0xf78>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800317e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800319a:	601a      	str	r2, [r3, #0]
  return result;
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80031a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	461a      	mov	r2, r3
 80031b8:	2301      	movs	r3, #1
 80031ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fdb6 	bl	8001d2c <HAL_GetTick>
 80031c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c4:	e009      	b.n	80031da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe fdb1 	bl	8001d2c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e144      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031fe:	601a      	str	r2, [r3, #0]
  return result;
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003208:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d102      	bne.n	8003224 <HAL_RCC_OscConfig+0xe2c>
 800321e:	4b54      	ldr	r3, [pc, #336]	; (8003370 <HAL_RCC_OscConfig+0xf78>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	e027      	b.n	8003274 <HAL_RCC_OscConfig+0xe7c>
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800322c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	fa93 f2a3 	rbit	r2, r3
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_RCC_OscConfig+0xf78>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003278:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800327c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003280:	6011      	str	r1, [r2, #0]
 8003282:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003286:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	fa92 f1a2 	rbit	r1, r2
 8003290:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003294:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003298:	6011      	str	r1, [r2, #0]
  return result;
 800329a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800329e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	fab2 f282 	clz	r2, r2
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f042 0220 	orr.w	r2, r2, #32
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f002 021f 	and.w	r2, r2, #31
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d082      	beq.n	80031c6 <HAL_RCC_OscConfig+0xdce>
 80032c0:	e0cf      	b.n	8003462 <HAL_RCC_OscConfig+0x106a>
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032e6:	601a      	str	r2, [r3, #0]
  return result;
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	461a      	mov	r2, r3
 8003304:	2300      	movs	r3, #0
 8003306:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fd10 	bl	8001d2c <HAL_GetTick>
 800330c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003310:	e009      	b.n	8003326 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe fd0b 	bl	8001d2c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e09e      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800332e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	fa93 f2a3 	rbit	r2, r3
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800334a:	601a      	str	r2, [r3, #0]
  return result;
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003354:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d104      	bne.n	8003374 <HAL_RCC_OscConfig+0xf7c>
 800336a:	4b01      	ldr	r3, [pc, #4]	; (8003370 <HAL_RCC_OscConfig+0xf78>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	e029      	b.n	80033c4 <HAL_RCC_OscConfig+0xfcc>
 8003370:	40021000 	.word	0x40021000
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800337c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fa93 f2a3 	rbit	r2, r3
 8003390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003394:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_OscConfig+0x1078>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	fa92 f1a2 	rbit	r1, r2
 80033e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033e8:	6011      	str	r1, [r2, #0]
  return result;
 80033ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d180      	bne.n	8003312 <HAL_RCC_OscConfig+0xf1a>
 8003410:	e027      	b.n	8003462 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e01e      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_RCC_OscConfig+0x1078>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800342e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003432:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	429a      	cmp	r2, r3
 8003444:	d10b      	bne.n	800345e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003446:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800344a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800345a:	429a      	cmp	r2, r3
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b09e      	sub	sp, #120	; 0x78
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e162      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800348c:	4b90      	ldr	r3, [pc, #576]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d910      	bls.n	80034bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b8d      	ldr	r3, [pc, #564]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 0207 	bic.w	r2, r3, #7
 80034a2:	498b      	ldr	r1, [pc, #556]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b89      	ldr	r3, [pc, #548]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e14a      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b82      	ldr	r3, [pc, #520]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	497f      	ldr	r1, [pc, #508]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80dc 	beq.w	80036a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d13c      	bne.n	800356a <HAL_RCC_ClockConfig+0xf6>
 80034f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <HAL_RCC_ClockConfig+0xa6>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	e00f      	b.n	800353a <HAL_RCC_ClockConfig+0xc6>
 800351a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	667b      	str	r3, [r7, #100]	; 0x64
 8003528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352c:	663b      	str	r3, [r7, #96]	; 0x60
 800352e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800353e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003540:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003542:	fa92 f2a2 	rbit	r2, r2
 8003546:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800354a:	fab2 f282 	clz	r2, r2
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f042 0220 	orr.w	r2, r2, #32
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f002 021f 	and.w	r2, r2, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f202 	lsl.w	r2, r1, r2
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d17b      	bne.n	800365e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0f3      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d13c      	bne.n	80035ec <HAL_RCC_ClockConfig+0x178>
 8003572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003576:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_RCC_ClockConfig+0x128>
 8003596:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	e00f      	b.n	80035bc <HAL_RCC_ClockConfig+0x148>
 800359c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	647b      	str	r3, [r7, #68]	; 0x44
 80035aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
 80035b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80035c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c4:	fa92 f2a2 	rbit	r2, r2
 80035c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f042 0220 	orr.w	r2, r2, #32
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f002 021f 	and.w	r2, r2, #31
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d13a      	bne.n	800365e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0b2      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
 80035ec:	2302      	movs	r3, #2
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e00d      	b.n	8003630 <HAL_RCC_ClockConfig+0x1bc>
 8003614:	2302      	movs	r3, #2
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	2302      	movs	r3, #2
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2202      	movs	r2, #2
 8003632:	61ba      	str	r2, [r7, #24]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	fa92 f2a2 	rbit	r2, r2
 800363a:	617a      	str	r2, [r7, #20]
  return result;
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	fab2 f282 	clz	r2, r2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f042 0220 	orr.w	r2, r2, #32
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	f002 021f 	and.w	r2, r2, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e079      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	491a      	ldr	r1, [pc, #104]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe fb5c 	bl	8001d2c <HAL_GetTick>
 8003674:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fe fb58 	bl	8001d2c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e061      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d214      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	4906      	ldr	r1, [pc, #24]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e040      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	491a      	ldr	r1, [pc, #104]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4912      	ldr	r1, [pc, #72]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003716:	f000 f829 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800371a:	4601      	mov	r1, r0
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	22f0      	movs	r2, #240	; 0xf0
 8003726:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	60fa      	str	r2, [r7, #12]
  return result;
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	40d3      	lsrs	r3, r2
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x2ec>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	fa21 f303 	lsr.w	r3, r1, r3
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <HAL_RCC_ClockConfig+0x2f0>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_ClockConfig+0x2f4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe faaa 	bl	8001ca4 <HAL_InitTick>
  
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3778      	adds	r7, #120	; 0x78
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	080084d8 	.word	0x080084d8
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	b08b      	sub	sp, #44	; 0x2c
 8003770:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d002      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x30>
 8003796:	2b08      	cmp	r3, #8
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x36>
 800379a:	e03c      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc4>)
 800379e:	623b      	str	r3, [r7, #32]
      break;
 80037a0:	e03c      	b.n	800381c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	fa92 f2a2 	rbit	r2, r2
 80037b4:	607a      	str	r2, [r7, #4]
  return result;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	fab2 f282 	clz	r2, r2
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	40d3      	lsrs	r3, r2
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	220f      	movs	r2, #15
 80037d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	60fa      	str	r2, [r7, #12]
  return result;
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	40d3      	lsrs	r3, r2
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	e004      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <HAL_RCC_GetSysClockFreq+0xd0>)
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	623b      	str	r3, [r7, #32]
      break;
 8003814:	e002      	b.n	800381c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003818:	623b      	str	r3, [r7, #32]
      break;
 800381a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381c:	6a3b      	ldr	r3, [r7, #32]
}
 800381e:	4618      	mov	r0, r3
 8003820:	372c      	adds	r7, #44	; 0x2c
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	007a1200 	.word	0x007a1200
 8003834:	080084f0 	.word	0x080084f0
 8003838:	08008500 	.word	0x08008500
 800383c:	003d0900 	.word	0x003d0900

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000000 	.word	0x20000000

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800385e:	f7ff ffef 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003862:	4601      	mov	r1, r0
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800386c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003870:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	fa92 f2a2 	rbit	r2, r2
 8003878:	603a      	str	r2, [r7, #0]
  return result;
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	fab2 f282 	clz	r2, r2
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	40d3      	lsrs	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	080084e8 	.word	0x080084e8

0800389c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038a2:	f7ff ffcd 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 80038a6:	4601      	mov	r1, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	fa92 f2a2 	rbit	r2, r2
 80038bc:	603a      	str	r2, [r7, #0]
  return result;
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	40d3      	lsrs	r3, r2
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080084e8 	.word	0x080084e8

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b092      	sub	sp, #72	; 0x48
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80d4 	beq.w	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003904:	4b4e      	ldr	r3, [pc, #312]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10e      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b4b      	ldr	r3, [pc, #300]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4a4a      	ldr	r2, [pc, #296]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	4b48      	ldr	r3, [pc, #288]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b45      	ldr	r3, [pc, #276]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d118      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393a:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a41      	ldr	r2, [pc, #260]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7fe f9f1 	bl	8001d2c <HAL_GetTick>
 800394a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	e008      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7fe f9ed 	bl	8001d2c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b64      	cmp	r3, #100	; 0x64
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e12d      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8084 	beq.w	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003988:	429a      	cmp	r2, r3
 800398a:	d07c      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800398c:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039a6:	fab3 f383 	clz	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	461a      	mov	r2, r3
 80039b6:	2301      	movs	r3, #1
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	461a      	mov	r2, r3
 80039da:	2300      	movs	r3, #0
 80039dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039de:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04b      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fe f99d 	bl	8001d2c <HAL_GetTick>
 80039f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe f999 	bl	8001d2c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0d7      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	2302      	movs	r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	61fb      	str	r3, [r7, #28]
  return result;
 8003a24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d108      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a3a:	4b01      	ldr	r3, [pc, #4]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	e00d      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40007000 	.word	0x40007000
 8003a48:	10908100 	.word	0x10908100
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	613a      	str	r2, [r7, #16]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	fa92 f2a2 	rbit	r2, r2
 8003a66:	60fa      	str	r2, [r7, #12]
  return result;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	fab2 f282 	clz	r2, r2
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	f002 021f 	and.w	r2, r2, #31
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0b7      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	494c      	ldr	r1, [pc, #304]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa0:	4b48      	ldr	r3, [pc, #288]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4a47      	ldr	r2, [pc, #284]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab8:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	f023 0203 	bic.w	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	493f      	ldr	r1, [pc, #252]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	4938      	ldr	r1, [pc, #224]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003af4:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	4930      	ldr	r1, [pc, #192]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b12:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f023 0210 	bic.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4929      	ldr	r1, [pc, #164]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b30:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	4921      	ldr	r1, [pc, #132]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f023 0220 	bic.w	r2, r3, #32
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	491a      	ldr	r1, [pc, #104]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003b6c:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4912      	ldr	r1, [pc, #72]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	490b      	ldr	r1, [pc, #44]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	4903      	ldr	r1, [pc, #12]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3748      	adds	r7, #72	; 0x48
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e09d      	b.n	8003d16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d108      	bne.n	8003bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d009      	beq.n	8003c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]
 8003bf2:	e005      	b.n	8003c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fc4a 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c40:	d902      	bls.n	8003c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e002      	b.n	8003c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c56:	d007      	beq.n	8003c68 <HAL_SPI_Init+0xa0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	ea42 0103 	orr.w	r1, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	f003 0204 	and.w	r2, r3, #4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ce4:	ea42 0103 	orr.w	r1, r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b088      	sub	sp, #32
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_SPI_Transmit+0x22>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e158      	b.n	8003ff2 <HAL_SPI_Transmit+0x2d4>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d48:	f7fd fff0 	bl	8001d2c <HAL_GetTick>
 8003d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d62:	e13d      	b.n	8003fe0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0x52>
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d74:	e134      	b.n	8003fe0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	d10f      	bne.n	8003de2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d007      	beq.n	8003e00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e08:	d94b      	bls.n	8003ea2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0xfa>
 8003e12:	8afb      	ldrh	r3, [r7, #22]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d13e      	bne.n	8003e96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e3c:	e02b      	b.n	8003e96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d112      	bne.n	8003e72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e70:	e011      	b.n	8003e96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e72:	f7fd ff5b 	bl	8001d2c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d803      	bhi.n	8003e8a <HAL_SPI_Transmit+0x16c>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d102      	bne.n	8003e90 <HAL_SPI_Transmit+0x172>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e94:	e0a4      	b.n	8003fe0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ce      	bne.n	8003e3e <HAL_SPI_Transmit+0x120>
 8003ea0:	e07c      	b.n	8003f9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Transmit+0x192>
 8003eaa:	8afb      	ldrh	r3, [r7, #22]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d170      	bne.n	8003f92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d912      	bls.n	8003ee0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b02      	subs	r3, #2
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ede:	e058      	b.n	8003f92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f06:	e044      	b.n	8003f92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d12b      	bne.n	8003f6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d912      	bls.n	8003f46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b02      	subs	r3, #2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f44:	e025      	b.n	8003f92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f6c:	e011      	b.n	8003f92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6e:	f7fd fedd 	bl	8001d2c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d803      	bhi.n	8003f86 <HAL_SPI_Transmit+0x268>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d102      	bne.n	8003f8c <HAL_SPI_Transmit+0x26e>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f90:	e026      	b.n	8003fe0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1b5      	bne.n	8003f08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fb5b 	bl	800465c <SPI_EndRxTxTransaction>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e000      	b.n	8003fe0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b08a      	sub	sp, #40	; 0x28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004008:	2301      	movs	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_SPI_TransmitReceive+0x26>
 800401c:	2302      	movs	r3, #2
 800401e:	e1fb      	b.n	8004418 <HAL_SPI_TransmitReceive+0x41e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004028:	f7fd fe80 	bl	8001d2c <HAL_GetTick>
 800402c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004034:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004044:	7efb      	ldrb	r3, [r7, #27]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d00e      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x6e>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004050:	d106      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x66>
 800405a:	7efb      	ldrb	r3, [r7, #27]
 800405c:	2b04      	cmp	r3, #4
 800405e:	d003      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004060:	2302      	movs	r3, #2
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004066:	e1cd      	b.n	8004404 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_SPI_TransmitReceive+0x80>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SPI_TransmitReceive+0x80>
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004080:	e1c0      	b.n	8004404 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2205      	movs	r2, #5
 8004092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	887a      	ldrh	r2, [r7, #2]
 80040a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	887a      	ldrh	r2, [r7, #2]
 80040ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	887a      	ldrh	r2, [r7, #2]
 80040c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040d8:	d802      	bhi.n	80040e0 <HAL_SPI_TransmitReceive+0xe6>
 80040da:	8a3b      	ldrh	r3, [r7, #16]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d908      	bls.n	80040f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	e007      	b.n	8004102 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d007      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004128:	d97c      	bls.n	8004224 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x13e>
 8004132:	8a7b      	ldrh	r3, [r7, #18]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d169      	bne.n	800420c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415c:	e056      	b.n	800420c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11b      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x1aa>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x1aa>
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	2b01      	cmp	r3, #1
 800417a:	d113      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d11c      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x1f2>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	b292      	uxth	r2, r2
 80041ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	1c9a      	adds	r2, r3, #2
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e8:	2301      	movs	r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041ec:	f7fd fd9e 	bl	8001d2c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d807      	bhi.n	800420c <HAL_SPI_TransmitReceive+0x212>
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d003      	beq.n	800420c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800420a:	e0fb      	b.n	8004404 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1a3      	bne.n	800415e <HAL_SPI_TransmitReceive+0x164>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d19d      	bne.n	800415e <HAL_SPI_TransmitReceive+0x164>
 8004222:	e0df      	b.n	80043e4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x23a>
 800422c:	8a7b      	ldrh	r3, [r7, #18]
 800422e:	2b01      	cmp	r3, #1
 8004230:	f040 80cb 	bne.w	80043ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d912      	bls.n	8004264 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	881a      	ldrh	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	1c9a      	adds	r2, r3, #2
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b02      	subs	r3, #2
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004262:	e0b2      	b.n	80043ca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800428a:	e09e      	b.n	80043ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d134      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x30a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02f      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x30a>
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d12c      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d912      	bls.n	80042da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	1c9a      	adds	r2, r3, #2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b02      	subs	r3, #2
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042d8:	e012      	b.n	8004300 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d148      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x3aa>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d042      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	d923      	bls.n	8004372 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	b292      	uxth	r2, r2
 8004336:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b02      	subs	r3, #2
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d81f      	bhi.n	80043a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	e016      	b.n	80043a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f103 020c 	add.w	r2, r3, #12
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	7812      	ldrb	r2, [r2, #0]
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043a4:	f7fd fcc2 	bl	8001d2c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d803      	bhi.n	80043bc <HAL_SPI_TransmitReceive+0x3c2>
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d102      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x3c8>
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043c8:	e01c      	b.n	8004404 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f af5b 	bne.w	800428c <HAL_SPI_TransmitReceive+0x292>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f47f af54 	bne.w	800428c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f937 	bl	800465c <SPI_EndRxTxTransaction>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d006      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	661a      	str	r2, [r3, #96]	; 0x60
 8004400:	e000      	b.n	8004404 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004430:	f7fd fc7c 	bl	8001d2c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	4413      	add	r3, r2
 800443e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004440:	f7fd fc74 	bl	8001d2c <HAL_GetTick>
 8004444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004446:	4b39      	ldr	r3, [pc, #228]	; (800452c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	015b      	lsls	r3, r3, #5
 800444c:	0d1b      	lsrs	r3, r3, #20
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	e054      	b.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d050      	beq.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004460:	f7fd fc64 	bl	8001d2c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	429a      	cmp	r2, r3
 800446e:	d902      	bls.n	8004476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d13d      	bne.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800448e:	d111      	bne.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004498:	d004      	beq.n	80044a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a2:	d107      	bne.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044bc:	d10f      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e017      	b.n	8004522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3b01      	subs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d19b      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000000 	.word	0x20000000

08004530 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004542:	f7fd fbf3 	bl	8001d2c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	4413      	add	r3, r2
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004552:	f7fd fbeb 	bl	8001d2c <HAL_GetTick>
 8004556:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004560:	4b3d      	ldr	r3, [pc, #244]	; (8004658 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	00da      	lsls	r2, r3, #3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	0d1b      	lsrs	r3, r3, #20
 8004570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004578:	e060      	b.n	800463c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004580:	d107      	bne.n	8004592 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004590:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d050      	beq.n	800463c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800459a:	f7fd fbc7 	bl	8001d2c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d902      	bls.n	80045b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d13d      	bne.n	800462c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c8:	d111      	bne.n	80045ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d2:	d004      	beq.n	80045de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045dc:	d107      	bne.n	80045ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f6:	d10f      	bne.n	8004618 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004616:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e010      	b.n	800464e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	3b01      	subs	r3, #1
 800463a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d196      	bne.n	800457a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000000 	.word	0x20000000

0800465c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2200      	movs	r2, #0
 8004670:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ff5b 	bl	8004530 <SPI_WaitFifoStateUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e027      	b.n	80046e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	2180      	movs	r1, #128	; 0x80
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff fec0 	bl	8004420 <SPI_WaitFlagStateUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e014      	b.n	80046e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff ff34 	bl	8004530 <SPI_WaitFifoStateUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e000      	b.n	80046e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e041      	b.n	800477e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc ff80 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 fa0e 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d001      	beq.n	80047a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e041      	b.n	8004824 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d01d      	beq.n	80047ee <HAL_TIM_Base_Start+0x66>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_TIM_Base_Start+0xa8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_TIM_Base_Start+0x66>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_TIM_Base_Start+0xac>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_TIM_Base_Start+0x66>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_TIM_Base_Start+0xb0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_TIM_Base_Start+0x66>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_TIM_Base_Start+0xb4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIM_Base_Start+0x66>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_TIM_Base_Start+0xb8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIM_Base_Start+0x66>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_TIM_Base_Start+0xbc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d111      	bne.n	8004812 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b06      	cmp	r3, #6
 80047fe:	d010      	beq.n	8004822 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	e007      	b.n	8004822 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40001800 	.word	0x40001800
 8004840:	40014000 	.word	0x40014000
 8004844:	40015c00 	.word	0x40015c00

08004848 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e041      	b.n	80048de <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f839 	bl	80048e6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 f95e 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_TIM_OC_Start+0x24>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e022      	b.n	8004966 <HAL_TIM_OC_Start+0x6a>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d109      	bne.n	800493a <HAL_TIM_OC_Start+0x3e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e015      	b.n	8004966 <HAL_TIM_OC_Start+0x6a>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d109      	bne.n	8004954 <HAL_TIM_OC_Start+0x58>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e008      	b.n	8004966 <HAL_TIM_OC_Start+0x6a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e07c      	b.n	8004a68 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <HAL_TIM_OC_Start+0x82>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497c:	e013      	b.n	80049a6 <HAL_TIM_OC_Start+0xaa>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d104      	bne.n	800498e <HAL_TIM_OC_Start+0x92>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498c:	e00b      	b.n	80049a6 <HAL_TIM_OC_Start+0xaa>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d104      	bne.n	800499e <HAL_TIM_OC_Start+0xa2>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	e003      	b.n	80049a6 <HAL_TIM_OC_Start+0xaa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2201      	movs	r2, #1
 80049ac:	6839      	ldr	r1, [r7, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fabd 	bl	8004f2e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <HAL_TIM_OC_Start+0x174>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_TIM_OC_Start+0xd6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <HAL_TIM_OC_Start+0x178>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIM_OC_Start+0xd6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <HAL_TIM_OC_Start+0x17c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_OC_Start+0xda>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_OC_Start+0xdc>
 80049d6:	2300      	movs	r3, #0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d01d      	beq.n	8004a32 <HAL_TIM_OC_Start+0x136>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <HAL_TIM_OC_Start+0x180>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d018      	beq.n	8004a32 <HAL_TIM_OC_Start+0x136>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_TIM_OC_Start+0x184>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_TIM_OC_Start+0x136>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <HAL_TIM_OC_Start+0x188>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_TIM_OC_Start+0x136>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <HAL_TIM_OC_Start+0x18c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d009      	beq.n	8004a32 <HAL_TIM_OC_Start+0x136>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <HAL_TIM_OC_Start+0x174>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_TIM_OC_Start+0x136>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_TIM_OC_Start+0x190>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d111      	bne.n	8004a56 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b06      	cmp	r3, #6
 8004a42:	d010      	beq.n	8004a66 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a54:	e007      	b.n	8004a66 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	40015c00 	.word	0x40015c00

08004a90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_OC_ConfigChannel+0x1e>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e048      	b.n	8004b40 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	d839      	bhi.n	8004b30 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004abc:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac2:	bf00      	nop
 8004ac4:	08004af9 	.word	0x08004af9
 8004ac8:	08004b31 	.word	0x08004b31
 8004acc:	08004b31 	.word	0x08004b31
 8004ad0:	08004b31 	.word	0x08004b31
 8004ad4:	08004b07 	.word	0x08004b07
 8004ad8:	08004b31 	.word	0x08004b31
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004b31 	.word	0x08004b31
 8004ae4:	08004b15 	.word	0x08004b15
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b31 	.word	0x08004b31
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b23 	.word	0x08004b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f8bc 	bl	8004c7c <TIM_OC1_SetConfig>
      break;
 8004b04:	e017      	b.n	8004b36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f92f 	bl	8004d70 <TIM_OC2_SetConfig>
      break;
 8004b12:	e010      	b.n	8004b36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f98a 	bl	8004e34 <TIM_OC3_SetConfig>
      break;
 8004b20:	e009      	b.n	8004b36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f9c1 	bl	8004eb0 <TIM_OC4_SetConfig>
      break;
 8004b2e:	e002      	b.n	8004b36 <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75fb      	strb	r3, [r7, #23]
      break;
 8004b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3c      	ldr	r2, [pc, #240]	; (8004c54 <TIM_Base_SetConfig+0x10c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3b      	ldr	r2, [pc, #236]	; (8004c58 <TIM_Base_SetConfig+0x110>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3a      	ldr	r2, [pc, #232]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a39      	ldr	r2, [pc, #228]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d027      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <TIM_Base_SetConfig+0x10c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d023      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <TIM_Base_SetConfig+0x110>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01f      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01b      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d017      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <TIM_Base_SetConfig+0x120>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00f      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a28      	ldr	r2, [pc, #160]	; (8004c70 <TIM_Base_SetConfig+0x128>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <TIM_Base_SetConfig+0x130>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_Base_SetConfig+0xa2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <TIM_Base_SetConfig+0x128>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <TIM_Base_SetConfig+0xf0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_Base_SetConfig+0xf0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <TIM_Base_SetConfig+0x130>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40015c00 	.word	0x40015c00
 8004c64:	40001800 	.word	0x40001800
 8004c68:	40001c00 	.word	0x40001c00
 8004c6c:	40002000 	.word	0x40002000
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800

08004c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f023 0201 	bic.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 0302 	bic.w	r3, r3, #2
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <TIM_OC1_SetConfig+0xe8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x6c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <TIM_OC1_SetConfig+0xec>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x6c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a22      	ldr	r2, [pc, #136]	; (8004d6c <TIM_OC1_SetConfig+0xf0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10c      	bne.n	8004d02 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0308 	bic.w	r3, r3, #8
 8004cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <TIM_OC1_SetConfig+0xe8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d007      	beq.n	8004d1a <TIM_OC1_SetConfig+0x9e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <TIM_OC1_SetConfig+0xec>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <TIM_OC1_SetConfig+0x9e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <TIM_OC1_SetConfig+0xf0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d111      	bne.n	8004d3e <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	621a      	str	r2, [r3, #32]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800

08004d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0210 	bic.w	r2, r3, #16
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f023 0320 	bic.w	r3, r3, #32
 8004dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <TIM_OC2_SetConfig+0xb8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_OC2_SetConfig+0x70>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <TIM_OC2_SetConfig+0xbc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC2_SetConfig+0x70>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <TIM_OC2_SetConfig+0xc0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10f      	bne.n	8004e00 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004de6:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	621a      	str	r2, [r3, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	031b      	lsls	r3, r3, #12
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2201      	movs	r2, #1
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	401a      	ands	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1a      	ldr	r2, [r3, #32]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	431a      	orrs	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e03d      	b.n	8005010 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e040      	b.n	80050b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fc fb8e 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2224      	movs	r2, #36	; 0x24
 8005048:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8c0 	bl	80051e0 <UART_SetConfig>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e022      	b.n	80050b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa2e 	bl	80054d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fab5 	bl	8005618 <UART_CheckIdleState>
 80050ae:	4603      	mov	r3, r0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4613      	mov	r3, r2
 80050c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	f040 8082 	bne.w	80051d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_UART_Transmit+0x26>
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e07a      	b.n	80051d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_UART_Transmit+0x38>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e073      	b.n	80051d8 <HAL_UART_Transmit+0x120>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2221      	movs	r2, #33	; 0x21
 8005104:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005106:	f7fc fe11 	bl	8001d2c <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d108      	bne.n	8005138 <HAL_UART_Transmit+0x80>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e003      	b.n	8005140 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005148:	e02d      	b.n	80051a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2180      	movs	r1, #128	; 0x80
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 faa8 	bl	80056aa <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e039      	b.n	80051d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	881a      	ldrh	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005176:	b292      	uxth	r2, r2
 8005178:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	3302      	adds	r3, #2
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e008      	b.n	8005194 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	b292      	uxth	r2, r2
 800518c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3301      	adds	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1cb      	bne.n	800514a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2140      	movs	r1, #64	; 0x40
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fa74 	bl	80056aa <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e005      	b.n	80051d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e000      	b.n	80051d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
  }
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800520e:	f023 030c 	bic.w	r3, r3, #12
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	430b      	orrs	r3, r1
 800521a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a99      	ldr	r2, [pc, #612]	; (80054c0 <UART_SetConfig+0x2e0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d120      	bne.n	80052a2 <UART_SetConfig+0xc2>
 8005260:	4b98      	ldr	r3, [pc, #608]	; (80054c4 <UART_SetConfig+0x2e4>)
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b03      	cmp	r3, #3
 800526a:	d817      	bhi.n	800529c <UART_SetConfig+0xbc>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x94>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005285 	.word	0x08005285
 8005278:	08005291 	.word	0x08005291
 800527c:	08005297 	.word	0x08005297
 8005280:	0800528b 	.word	0x0800528b
 8005284:	2301      	movs	r3, #1
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e061      	b.n	800534e <UART_SetConfig+0x16e>
 800528a:	2302      	movs	r3, #2
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e05e      	b.n	800534e <UART_SetConfig+0x16e>
 8005290:	2304      	movs	r3, #4
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e05b      	b.n	800534e <UART_SetConfig+0x16e>
 8005296:	2308      	movs	r3, #8
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e058      	b.n	800534e <UART_SetConfig+0x16e>
 800529c:	2310      	movs	r3, #16
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e055      	b.n	800534e <UART_SetConfig+0x16e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a88      	ldr	r2, [pc, #544]	; (80054c8 <UART_SetConfig+0x2e8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d124      	bne.n	80052f6 <UART_SetConfig+0x116>
 80052ac:	4b85      	ldr	r3, [pc, #532]	; (80054c4 <UART_SetConfig+0x2e4>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052b8:	d011      	beq.n	80052de <UART_SetConfig+0xfe>
 80052ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052be:	d817      	bhi.n	80052f0 <UART_SetConfig+0x110>
 80052c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c4:	d011      	beq.n	80052ea <UART_SetConfig+0x10a>
 80052c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ca:	d811      	bhi.n	80052f0 <UART_SetConfig+0x110>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <UART_SetConfig+0xf8>
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d4:	d006      	beq.n	80052e4 <UART_SetConfig+0x104>
 80052d6:	e00b      	b.n	80052f0 <UART_SetConfig+0x110>
 80052d8:	2300      	movs	r3, #0
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e037      	b.n	800534e <UART_SetConfig+0x16e>
 80052de:	2302      	movs	r3, #2
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e034      	b.n	800534e <UART_SetConfig+0x16e>
 80052e4:	2304      	movs	r3, #4
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e031      	b.n	800534e <UART_SetConfig+0x16e>
 80052ea:	2308      	movs	r3, #8
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	e02e      	b.n	800534e <UART_SetConfig+0x16e>
 80052f0:	2310      	movs	r3, #16
 80052f2:	77fb      	strb	r3, [r7, #31]
 80052f4:	e02b      	b.n	800534e <UART_SetConfig+0x16e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a74      	ldr	r2, [pc, #464]	; (80054cc <UART_SetConfig+0x2ec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d124      	bne.n	800534a <UART_SetConfig+0x16a>
 8005300:	4b70      	ldr	r3, [pc, #448]	; (80054c4 <UART_SetConfig+0x2e4>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005308:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800530c:	d011      	beq.n	8005332 <UART_SetConfig+0x152>
 800530e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005312:	d817      	bhi.n	8005344 <UART_SetConfig+0x164>
 8005314:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005318:	d011      	beq.n	800533e <UART_SetConfig+0x15e>
 800531a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800531e:	d811      	bhi.n	8005344 <UART_SetConfig+0x164>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <UART_SetConfig+0x14c>
 8005324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005328:	d006      	beq.n	8005338 <UART_SetConfig+0x158>
 800532a:	e00b      	b.n	8005344 <UART_SetConfig+0x164>
 800532c:	2300      	movs	r3, #0
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e00d      	b.n	800534e <UART_SetConfig+0x16e>
 8005332:	2302      	movs	r3, #2
 8005334:	77fb      	strb	r3, [r7, #31]
 8005336:	e00a      	b.n	800534e <UART_SetConfig+0x16e>
 8005338:	2304      	movs	r3, #4
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e007      	b.n	800534e <UART_SetConfig+0x16e>
 800533e:	2308      	movs	r3, #8
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e004      	b.n	800534e <UART_SetConfig+0x16e>
 8005344:	2310      	movs	r3, #16
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e001      	b.n	800534e <UART_SetConfig+0x16e>
 800534a:	2310      	movs	r3, #16
 800534c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005356:	d15b      	bne.n	8005410 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8005358:	7ffb      	ldrb	r3, [r7, #31]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d827      	bhi.n	80053ae <UART_SetConfig+0x1ce>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x184>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005389 	.word	0x08005389
 8005368:	08005391 	.word	0x08005391
 800536c:	08005399 	.word	0x08005399
 8005370:	080053af 	.word	0x080053af
 8005374:	0800539f 	.word	0x0800539f
 8005378:	080053af 	.word	0x080053af
 800537c:	080053af 	.word	0x080053af
 8005380:	080053af 	.word	0x080053af
 8005384:	080053a7 	.word	0x080053a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fa66 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 800538c:	61b8      	str	r0, [r7, #24]
        break;
 800538e:	e013      	b.n	80053b8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005390:	f7fe fa84 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8005394:	61b8      	str	r0, [r7, #24]
        break;
 8005396:	e00f      	b.n	80053b8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005398:	4b4d      	ldr	r3, [pc, #308]	; (80054d0 <UART_SetConfig+0x2f0>)
 800539a:	61bb      	str	r3, [r7, #24]
        break;
 800539c:	e00c      	b.n	80053b8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800539e:	f7fe f9e5 	bl	800376c <HAL_RCC_GetSysClockFreq>
 80053a2:	61b8      	str	r0, [r7, #24]
        break;
 80053a4:	e008      	b.n	80053b8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053aa:	61bb      	str	r3, [r7, #24]
        break;
 80053ac:	e004      	b.n	80053b8 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	77bb      	strb	r3, [r7, #30]
        break;
 80053b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d074      	beq.n	80054a8 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	005a      	lsls	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b0f      	cmp	r3, #15
 80053da:	d916      	bls.n	800540a <UART_SetConfig+0x22a>
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e2:	d212      	bcs.n	800540a <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f023 030f 	bic.w	r3, r3, #15
 80053ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	89fb      	ldrh	r3, [r7, #14]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	89fa      	ldrh	r2, [r7, #14]
 8005406:	60da      	str	r2, [r3, #12]
 8005408:	e04e      	b.n	80054a8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	77bb      	strb	r3, [r7, #30]
 800540e:	e04b      	b.n	80054a8 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005410:	7ffb      	ldrb	r3, [r7, #31]
 8005412:	2b08      	cmp	r3, #8
 8005414:	d827      	bhi.n	8005466 <UART_SetConfig+0x286>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <UART_SetConfig+0x23c>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005441 	.word	0x08005441
 8005420:	08005449 	.word	0x08005449
 8005424:	08005451 	.word	0x08005451
 8005428:	08005467 	.word	0x08005467
 800542c:	08005457 	.word	0x08005457
 8005430:	08005467 	.word	0x08005467
 8005434:	08005467 	.word	0x08005467
 8005438:	08005467 	.word	0x08005467
 800543c:	0800545f 	.word	0x0800545f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005440:	f7fe fa0a 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8005444:	61b8      	str	r0, [r7, #24]
        break;
 8005446:	e013      	b.n	8005470 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005448:	f7fe fa28 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 800544c:	61b8      	str	r0, [r7, #24]
        break;
 800544e:	e00f      	b.n	8005470 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <UART_SetConfig+0x2f0>)
 8005452:	61bb      	str	r3, [r7, #24]
        break;
 8005454:	e00c      	b.n	8005470 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005456:	f7fe f989 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800545a:	61b8      	str	r0, [r7, #24]
        break;
 800545c:	e008      	b.n	8005470 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005462:	61bb      	str	r3, [r7, #24]
        break;
 8005464:	e004      	b.n	8005470 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	77bb      	strb	r3, [r7, #30]
        break;
 800546e:	bf00      	nop
    }

    if (pclk != 0U)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	085a      	lsrs	r2, r3, #1
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	441a      	add	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	b29b      	uxth	r3, r3
 800548a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b0f      	cmp	r3, #15
 8005490:	d908      	bls.n	80054a4 <UART_SetConfig+0x2c4>
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005498:	d204      	bcs.n	80054a4 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	e001      	b.n	80054a8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40013800 	.word	0x40013800
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40004400 	.word	0x40004400
 80054cc:	40004800 	.word	0x40004800
 80054d0:	007a1200 	.word	0x007a1200

080054d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01a      	beq.n	80055ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d2:	d10a      	bne.n	80055ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af02      	add	r7, sp, #8
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005628:	f7fc fb80 	bl	8001d2c <HAL_GetTick>
 800562c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b08      	cmp	r3, #8
 800563a:	d10e      	bne.n	800565a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f82d 	bl	80056aa <UART_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e023      	b.n	80056a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b04      	cmp	r3, #4
 8005666:	d10e      	bne.n	8005686 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f817 	bl	80056aa <UART_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e00d      	b.n	80056a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b09c      	sub	sp, #112	; 0x70
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	4613      	mov	r3, r2
 80056b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ba:	e0a5      	b.n	8005808 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	f000 80a1 	beq.w	8005808 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fc fb31 	bl	8001d2c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <UART_WaitOnFlagUntilTimeout+0x32>
 80056d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d13e      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056f0:	667b      	str	r3, [r7, #100]	; 0x64
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e6      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800572e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800573c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e067      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d04f      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005776:	d147      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005780:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
 80057a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e6      	bne.n	8005782 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	613b      	str	r3, [r7, #16]
   return(result);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057d4:	623a      	str	r2, [r7, #32]
 80057d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	69f9      	ldr	r1, [r7, #28]
 80057da:	6a3a      	ldr	r2, [r7, #32]
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e5      	bne.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e010      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69da      	ldr	r2, [r3, #28]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4013      	ands	r3, r2
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	429a      	cmp	r2, r3
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	429a      	cmp	r2, r3
 8005824:	f43f af4a 	beq.w	80056bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3770      	adds	r7, #112	; 0x70
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <__errno>:
 8005834:	4b01      	ldr	r3, [pc, #4]	; (800583c <__errno+0x8>)
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	2000000c 	.word	0x2000000c

08005840 <__libc_init_array>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	4d0d      	ldr	r5, [pc, #52]	; (8005878 <__libc_init_array+0x38>)
 8005844:	4c0d      	ldr	r4, [pc, #52]	; (800587c <__libc_init_array+0x3c>)
 8005846:	1b64      	subs	r4, r4, r5
 8005848:	10a4      	asrs	r4, r4, #2
 800584a:	2600      	movs	r6, #0
 800584c:	42a6      	cmp	r6, r4
 800584e:	d109      	bne.n	8005864 <__libc_init_array+0x24>
 8005850:	4d0b      	ldr	r5, [pc, #44]	; (8005880 <__libc_init_array+0x40>)
 8005852:	4c0c      	ldr	r4, [pc, #48]	; (8005884 <__libc_init_array+0x44>)
 8005854:	f002 fe22 	bl	800849c <_init>
 8005858:	1b64      	subs	r4, r4, r5
 800585a:	10a4      	asrs	r4, r4, #2
 800585c:	2600      	movs	r6, #0
 800585e:	42a6      	cmp	r6, r4
 8005860:	d105      	bne.n	800586e <__libc_init_array+0x2e>
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	f855 3b04 	ldr.w	r3, [r5], #4
 8005868:	4798      	blx	r3
 800586a:	3601      	adds	r6, #1
 800586c:	e7ee      	b.n	800584c <__libc_init_array+0xc>
 800586e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005872:	4798      	blx	r3
 8005874:	3601      	adds	r6, #1
 8005876:	e7f2      	b.n	800585e <__libc_init_array+0x1e>
 8005878:	080088ec 	.word	0x080088ec
 800587c:	080088ec 	.word	0x080088ec
 8005880:	080088ec 	.word	0x080088ec
 8005884:	080088f0 	.word	0x080088f0

08005888 <memset>:
 8005888:	4402      	add	r2, r0
 800588a:	4603      	mov	r3, r0
 800588c:	4293      	cmp	r3, r2
 800588e:	d100      	bne.n	8005892 <memset+0xa>
 8005890:	4770      	bx	lr
 8005892:	f803 1b01 	strb.w	r1, [r3], #1
 8005896:	e7f9      	b.n	800588c <memset+0x4>

08005898 <__cvt>:
 8005898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800589c:	ec55 4b10 	vmov	r4, r5, d0
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	460e      	mov	r6, r1
 80058a4:	4619      	mov	r1, r3
 80058a6:	462b      	mov	r3, r5
 80058a8:	bfbb      	ittet	lt
 80058aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058ae:	461d      	movlt	r5, r3
 80058b0:	2300      	movge	r3, #0
 80058b2:	232d      	movlt	r3, #45	; 0x2d
 80058b4:	700b      	strb	r3, [r1, #0]
 80058b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058bc:	4691      	mov	r9, r2
 80058be:	f023 0820 	bic.w	r8, r3, #32
 80058c2:	bfbc      	itt	lt
 80058c4:	4622      	movlt	r2, r4
 80058c6:	4614      	movlt	r4, r2
 80058c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058cc:	d005      	beq.n	80058da <__cvt+0x42>
 80058ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058d2:	d100      	bne.n	80058d6 <__cvt+0x3e>
 80058d4:	3601      	adds	r6, #1
 80058d6:	2102      	movs	r1, #2
 80058d8:	e000      	b.n	80058dc <__cvt+0x44>
 80058da:	2103      	movs	r1, #3
 80058dc:	ab03      	add	r3, sp, #12
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	ab02      	add	r3, sp, #8
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	ec45 4b10 	vmov	d0, r4, r5
 80058e8:	4653      	mov	r3, sl
 80058ea:	4632      	mov	r2, r6
 80058ec:	f000 fe30 	bl	8006550 <_dtoa_r>
 80058f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058f4:	4607      	mov	r7, r0
 80058f6:	d102      	bne.n	80058fe <__cvt+0x66>
 80058f8:	f019 0f01 	tst.w	r9, #1
 80058fc:	d022      	beq.n	8005944 <__cvt+0xac>
 80058fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005902:	eb07 0906 	add.w	r9, r7, r6
 8005906:	d110      	bne.n	800592a <__cvt+0x92>
 8005908:	783b      	ldrb	r3, [r7, #0]
 800590a:	2b30      	cmp	r3, #48	; 0x30
 800590c:	d10a      	bne.n	8005924 <__cvt+0x8c>
 800590e:	2200      	movs	r2, #0
 8005910:	2300      	movs	r3, #0
 8005912:	4620      	mov	r0, r4
 8005914:	4629      	mov	r1, r5
 8005916:	f7fb f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800591a:	b918      	cbnz	r0, 8005924 <__cvt+0x8c>
 800591c:	f1c6 0601 	rsb	r6, r6, #1
 8005920:	f8ca 6000 	str.w	r6, [sl]
 8005924:	f8da 3000 	ldr.w	r3, [sl]
 8005928:	4499      	add	r9, r3
 800592a:	2200      	movs	r2, #0
 800592c:	2300      	movs	r3, #0
 800592e:	4620      	mov	r0, r4
 8005930:	4629      	mov	r1, r5
 8005932:	f7fb f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005936:	b108      	cbz	r0, 800593c <__cvt+0xa4>
 8005938:	f8cd 900c 	str.w	r9, [sp, #12]
 800593c:	2230      	movs	r2, #48	; 0x30
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	454b      	cmp	r3, r9
 8005942:	d307      	bcc.n	8005954 <__cvt+0xbc>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005948:	1bdb      	subs	r3, r3, r7
 800594a:	4638      	mov	r0, r7
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	b004      	add	sp, #16
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	1c59      	adds	r1, r3, #1
 8005956:	9103      	str	r1, [sp, #12]
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e7f0      	b.n	800593e <__cvt+0xa6>

0800595c <__exponent>:
 800595c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800595e:	4603      	mov	r3, r0
 8005960:	2900      	cmp	r1, #0
 8005962:	bfb8      	it	lt
 8005964:	4249      	neglt	r1, r1
 8005966:	f803 2b02 	strb.w	r2, [r3], #2
 800596a:	bfb4      	ite	lt
 800596c:	222d      	movlt	r2, #45	; 0x2d
 800596e:	222b      	movge	r2, #43	; 0x2b
 8005970:	2909      	cmp	r1, #9
 8005972:	7042      	strb	r2, [r0, #1]
 8005974:	dd2a      	ble.n	80059cc <__exponent+0x70>
 8005976:	f10d 0407 	add.w	r4, sp, #7
 800597a:	46a4      	mov	ip, r4
 800597c:	270a      	movs	r7, #10
 800597e:	46a6      	mov	lr, r4
 8005980:	460a      	mov	r2, r1
 8005982:	fb91 f6f7 	sdiv	r6, r1, r7
 8005986:	fb07 1516 	mls	r5, r7, r6, r1
 800598a:	3530      	adds	r5, #48	; 0x30
 800598c:	2a63      	cmp	r2, #99	; 0x63
 800598e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005996:	4631      	mov	r1, r6
 8005998:	dcf1      	bgt.n	800597e <__exponent+0x22>
 800599a:	3130      	adds	r1, #48	; 0x30
 800599c:	f1ae 0502 	sub.w	r5, lr, #2
 80059a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059a4:	1c44      	adds	r4, r0, #1
 80059a6:	4629      	mov	r1, r5
 80059a8:	4561      	cmp	r1, ip
 80059aa:	d30a      	bcc.n	80059c2 <__exponent+0x66>
 80059ac:	f10d 0209 	add.w	r2, sp, #9
 80059b0:	eba2 020e 	sub.w	r2, r2, lr
 80059b4:	4565      	cmp	r5, ip
 80059b6:	bf88      	it	hi
 80059b8:	2200      	movhi	r2, #0
 80059ba:	4413      	add	r3, r2
 80059bc:	1a18      	subs	r0, r3, r0
 80059be:	b003      	add	sp, #12
 80059c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059ca:	e7ed      	b.n	80059a8 <__exponent+0x4c>
 80059cc:	2330      	movs	r3, #48	; 0x30
 80059ce:	3130      	adds	r1, #48	; 0x30
 80059d0:	7083      	strb	r3, [r0, #2]
 80059d2:	70c1      	strb	r1, [r0, #3]
 80059d4:	1d03      	adds	r3, r0, #4
 80059d6:	e7f1      	b.n	80059bc <__exponent+0x60>

080059d8 <_printf_float>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	ed2d 8b02 	vpush	{d8}
 80059e0:	b08d      	sub	sp, #52	; 0x34
 80059e2:	460c      	mov	r4, r1
 80059e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059e8:	4616      	mov	r6, r2
 80059ea:	461f      	mov	r7, r3
 80059ec:	4605      	mov	r5, r0
 80059ee:	f001 fd55 	bl	800749c <_localeconv_r>
 80059f2:	f8d0 a000 	ldr.w	sl, [r0]
 80059f6:	4650      	mov	r0, sl
 80059f8:	f7fa fbea 	bl	80001d0 <strlen>
 80059fc:	2300      	movs	r3, #0
 80059fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	f8d8 3000 	ldr.w	r3, [r8]
 8005a08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a0c:	3307      	adds	r3, #7
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	f103 0208 	add.w	r2, r3, #8
 8005a16:	f8c8 2000 	str.w	r2, [r8]
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a2a:	9307      	str	r3, [sp, #28]
 8005a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a30:	ee08 0a10 	vmov	s16, r0
 8005a34:	4b9f      	ldr	r3, [pc, #636]	; (8005cb4 <_printf_float+0x2dc>)
 8005a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3e:	f7fb f875 	bl	8000b2c <__aeabi_dcmpun>
 8005a42:	bb88      	cbnz	r0, 8005aa8 <_printf_float+0xd0>
 8005a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a48:	4b9a      	ldr	r3, [pc, #616]	; (8005cb4 <_printf_float+0x2dc>)
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4e:	f7fb f84f 	bl	8000af0 <__aeabi_dcmple>
 8005a52:	bb48      	cbnz	r0, 8005aa8 <_printf_float+0xd0>
 8005a54:	2200      	movs	r2, #0
 8005a56:	2300      	movs	r3, #0
 8005a58:	4640      	mov	r0, r8
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	f7fb f83e 	bl	8000adc <__aeabi_dcmplt>
 8005a60:	b110      	cbz	r0, 8005a68 <_printf_float+0x90>
 8005a62:	232d      	movs	r3, #45	; 0x2d
 8005a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a68:	4b93      	ldr	r3, [pc, #588]	; (8005cb8 <_printf_float+0x2e0>)
 8005a6a:	4894      	ldr	r0, [pc, #592]	; (8005cbc <_printf_float+0x2e4>)
 8005a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a70:	bf94      	ite	ls
 8005a72:	4698      	movls	r8, r3
 8005a74:	4680      	movhi	r8, r0
 8005a76:	2303      	movs	r3, #3
 8005a78:	6123      	str	r3, [r4, #16]
 8005a7a:	9b05      	ldr	r3, [sp, #20]
 8005a7c:	f023 0204 	bic.w	r2, r3, #4
 8005a80:	6022      	str	r2, [r4, #0]
 8005a82:	f04f 0900 	mov.w	r9, #0
 8005a86:	9700      	str	r7, [sp, #0]
 8005a88:	4633      	mov	r3, r6
 8005a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 f9d8 	bl	8005e44 <_printf_common>
 8005a94:	3001      	adds	r0, #1
 8005a96:	f040 8090 	bne.w	8005bba <_printf_float+0x1e2>
 8005a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9e:	b00d      	add	sp, #52	; 0x34
 8005aa0:	ecbd 8b02 	vpop	{d8}
 8005aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	4640      	mov	r0, r8
 8005aae:	4649      	mov	r1, r9
 8005ab0:	f7fb f83c 	bl	8000b2c <__aeabi_dcmpun>
 8005ab4:	b140      	cbz	r0, 8005ac8 <_printf_float+0xf0>
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfbc      	itt	lt
 8005abc:	232d      	movlt	r3, #45	; 0x2d
 8005abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ac2:	487f      	ldr	r0, [pc, #508]	; (8005cc0 <_printf_float+0x2e8>)
 8005ac4:	4b7f      	ldr	r3, [pc, #508]	; (8005cc4 <_printf_float+0x2ec>)
 8005ac6:	e7d1      	b.n	8005a6c <_printf_float+0x94>
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ace:	9206      	str	r2, [sp, #24]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	d13f      	bne.n	8005b54 <_printf_float+0x17c>
 8005ad4:	2306      	movs	r3, #6
 8005ad6:	6063      	str	r3, [r4, #4]
 8005ad8:	9b05      	ldr	r3, [sp, #20]
 8005ada:	6861      	ldr	r1, [r4, #4]
 8005adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005aea:	ab09      	add	r3, sp, #36	; 0x24
 8005aec:	ec49 8b10 	vmov	d0, r8, r9
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005af8:	4628      	mov	r0, r5
 8005afa:	f7ff fecd 	bl	8005898 <__cvt>
 8005afe:	9b06      	ldr	r3, [sp, #24]
 8005b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b02:	2b47      	cmp	r3, #71	; 0x47
 8005b04:	4680      	mov	r8, r0
 8005b06:	d108      	bne.n	8005b1a <_printf_float+0x142>
 8005b08:	1cc8      	adds	r0, r1, #3
 8005b0a:	db02      	blt.n	8005b12 <_printf_float+0x13a>
 8005b0c:	6863      	ldr	r3, [r4, #4]
 8005b0e:	4299      	cmp	r1, r3
 8005b10:	dd41      	ble.n	8005b96 <_printf_float+0x1be>
 8005b12:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b16:	fa5f fb8b 	uxtb.w	fp, fp
 8005b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b1e:	d820      	bhi.n	8005b62 <_printf_float+0x18a>
 8005b20:	3901      	subs	r1, #1
 8005b22:	465a      	mov	r2, fp
 8005b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b28:	9109      	str	r1, [sp, #36]	; 0x24
 8005b2a:	f7ff ff17 	bl	800595c <__exponent>
 8005b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b30:	1813      	adds	r3, r2, r0
 8005b32:	2a01      	cmp	r2, #1
 8005b34:	4681      	mov	r9, r0
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	dc02      	bgt.n	8005b40 <_printf_float+0x168>
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	07d2      	lsls	r2, r2, #31
 8005b3e:	d501      	bpl.n	8005b44 <_printf_float+0x16c>
 8005b40:	3301      	adds	r3, #1
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d09c      	beq.n	8005a86 <_printf_float+0xae>
 8005b4c:	232d      	movs	r3, #45	; 0x2d
 8005b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b52:	e798      	b.n	8005a86 <_printf_float+0xae>
 8005b54:	9a06      	ldr	r2, [sp, #24]
 8005b56:	2a47      	cmp	r2, #71	; 0x47
 8005b58:	d1be      	bne.n	8005ad8 <_printf_float+0x100>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1bc      	bne.n	8005ad8 <_printf_float+0x100>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7b9      	b.n	8005ad6 <_printf_float+0xfe>
 8005b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b66:	d118      	bne.n	8005b9a <_printf_float+0x1c2>
 8005b68:	2900      	cmp	r1, #0
 8005b6a:	6863      	ldr	r3, [r4, #4]
 8005b6c:	dd0b      	ble.n	8005b86 <_printf_float+0x1ae>
 8005b6e:	6121      	str	r1, [r4, #16]
 8005b70:	b913      	cbnz	r3, 8005b78 <_printf_float+0x1a0>
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	07d0      	lsls	r0, r2, #31
 8005b76:	d502      	bpl.n	8005b7e <_printf_float+0x1a6>
 8005b78:	3301      	adds	r3, #1
 8005b7a:	440b      	add	r3, r1
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b80:	f04f 0900 	mov.w	r9, #0
 8005b84:	e7de      	b.n	8005b44 <_printf_float+0x16c>
 8005b86:	b913      	cbnz	r3, 8005b8e <_printf_float+0x1b6>
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	07d2      	lsls	r2, r2, #31
 8005b8c:	d501      	bpl.n	8005b92 <_printf_float+0x1ba>
 8005b8e:	3302      	adds	r3, #2
 8005b90:	e7f4      	b.n	8005b7c <_printf_float+0x1a4>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e7f2      	b.n	8005b7c <_printf_float+0x1a4>
 8005b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	db05      	blt.n	8005bac <_printf_float+0x1d4>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	6121      	str	r1, [r4, #16]
 8005ba4:	07d8      	lsls	r0, r3, #31
 8005ba6:	d5ea      	bpl.n	8005b7e <_printf_float+0x1a6>
 8005ba8:	1c4b      	adds	r3, r1, #1
 8005baa:	e7e7      	b.n	8005b7c <_printf_float+0x1a4>
 8005bac:	2900      	cmp	r1, #0
 8005bae:	bfd4      	ite	le
 8005bb0:	f1c1 0202 	rsble	r2, r1, #2
 8005bb4:	2201      	movgt	r2, #1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	e7e0      	b.n	8005b7c <_printf_float+0x1a4>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	055a      	lsls	r2, r3, #21
 8005bbe:	d407      	bmi.n	8005bd0 <_printf_float+0x1f8>
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	4642      	mov	r2, r8
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d12c      	bne.n	8005c28 <_printf_float+0x250>
 8005bce:	e764      	b.n	8005a9a <_printf_float+0xc2>
 8005bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bd4:	f240 80e0 	bls.w	8005d98 <_printf_float+0x3c0>
 8005bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	f7fa ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d034      	beq.n	8005c52 <_printf_float+0x27a>
 8005be8:	4a37      	ldr	r2, [pc, #220]	; (8005cc8 <_printf_float+0x2f0>)
 8005bea:	2301      	movs	r3, #1
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af51 	beq.w	8005a9a <_printf_float+0xc2>
 8005bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	db02      	blt.n	8005c06 <_printf_float+0x22e>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	07d8      	lsls	r0, r3, #31
 8005c04:	d510      	bpl.n	8005c28 <_printf_float+0x250>
 8005c06:	ee18 3a10 	vmov	r3, s16
 8005c0a:	4652      	mov	r2, sl
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f af41 	beq.w	8005a9a <_printf_float+0xc2>
 8005c18:	f04f 0800 	mov.w	r8, #0
 8005c1c:	f104 091a 	add.w	r9, r4, #26
 8005c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c22:	3b01      	subs	r3, #1
 8005c24:	4543      	cmp	r3, r8
 8005c26:	dc09      	bgt.n	8005c3c <_printf_float+0x264>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	079b      	lsls	r3, r3, #30
 8005c2c:	f100 8105 	bmi.w	8005e3a <_printf_float+0x462>
 8005c30:	68e0      	ldr	r0, [r4, #12]
 8005c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c34:	4298      	cmp	r0, r3
 8005c36:	bfb8      	it	lt
 8005c38:	4618      	movlt	r0, r3
 8005c3a:	e730      	b.n	8005a9e <_printf_float+0xc6>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	464a      	mov	r2, r9
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f af27 	beq.w	8005a9a <_printf_float+0xc2>
 8005c4c:	f108 0801 	add.w	r8, r8, #1
 8005c50:	e7e6      	b.n	8005c20 <_printf_float+0x248>
 8005c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dc39      	bgt.n	8005ccc <_printf_float+0x2f4>
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <_printf_float+0x2f0>)
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af19 	beq.w	8005a9a <_printf_float+0xc2>
 8005c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	d102      	bne.n	8005c76 <_printf_float+0x29e>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	d5d8      	bpl.n	8005c28 <_printf_float+0x250>
 8005c76:	ee18 3a10 	vmov	r3, s16
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f af09 	beq.w	8005a9a <_printf_float+0xc2>
 8005c88:	f04f 0900 	mov.w	r9, #0
 8005c8c:	f104 0a1a 	add.w	sl, r4, #26
 8005c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c92:	425b      	negs	r3, r3
 8005c94:	454b      	cmp	r3, r9
 8005c96:	dc01      	bgt.n	8005c9c <_printf_float+0x2c4>
 8005c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c9a:	e792      	b.n	8005bc2 <_printf_float+0x1ea>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f aef7 	beq.w	8005a9a <_printf_float+0xc2>
 8005cac:	f109 0901 	add.w	r9, r9, #1
 8005cb0:	e7ee      	b.n	8005c90 <_printf_float+0x2b8>
 8005cb2:	bf00      	nop
 8005cb4:	7fefffff 	.word	0x7fefffff
 8005cb8:	08008514 	.word	0x08008514
 8005cbc:	08008518 	.word	0x08008518
 8005cc0:	08008520 	.word	0x08008520
 8005cc4:	0800851c 	.word	0x0800851c
 8005cc8:	08008524 	.word	0x08008524
 8005ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	bfa8      	it	ge
 8005cd4:	461a      	movge	r2, r3
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	4691      	mov	r9, r2
 8005cda:	dc37      	bgt.n	8005d4c <_printf_float+0x374>
 8005cdc:	f04f 0b00 	mov.w	fp, #0
 8005ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ce4:	f104 021a 	add.w	r2, r4, #26
 8005ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cea:	9305      	str	r3, [sp, #20]
 8005cec:	eba3 0309 	sub.w	r3, r3, r9
 8005cf0:	455b      	cmp	r3, fp
 8005cf2:	dc33      	bgt.n	8005d5c <_printf_float+0x384>
 8005cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	db3b      	blt.n	8005d74 <_printf_float+0x39c>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	07da      	lsls	r2, r3, #31
 8005d00:	d438      	bmi.n	8005d74 <_printf_float+0x39c>
 8005d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d04:	9a05      	ldr	r2, [sp, #20]
 8005d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d08:	1a9a      	subs	r2, r3, r2
 8005d0a:	eba3 0901 	sub.w	r9, r3, r1
 8005d0e:	4591      	cmp	r9, r2
 8005d10:	bfa8      	it	ge
 8005d12:	4691      	movge	r9, r2
 8005d14:	f1b9 0f00 	cmp.w	r9, #0
 8005d18:	dc35      	bgt.n	8005d86 <_printf_float+0x3ae>
 8005d1a:	f04f 0800 	mov.w	r8, #0
 8005d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d22:	f104 0a1a 	add.w	sl, r4, #26
 8005d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	eba3 0309 	sub.w	r3, r3, r9
 8005d30:	4543      	cmp	r3, r8
 8005d32:	f77f af79 	ble.w	8005c28 <_printf_float+0x250>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4652      	mov	r2, sl
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f aeaa 	beq.w	8005a9a <_printf_float+0xc2>
 8005d46:	f108 0801 	add.w	r8, r8, #1
 8005d4a:	e7ec      	b.n	8005d26 <_printf_float+0x34e>
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4642      	mov	r2, r8
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	d1c0      	bne.n	8005cdc <_printf_float+0x304>
 8005d5a:	e69e      	b.n	8005a9a <_printf_float+0xc2>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	9205      	str	r2, [sp, #20]
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	f43f ae97 	beq.w	8005a9a <_printf_float+0xc2>
 8005d6c:	9a05      	ldr	r2, [sp, #20]
 8005d6e:	f10b 0b01 	add.w	fp, fp, #1
 8005d72:	e7b9      	b.n	8005ce8 <_printf_float+0x310>
 8005d74:	ee18 3a10 	vmov	r3, s16
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	d1be      	bne.n	8005d02 <_printf_float+0x32a>
 8005d84:	e689      	b.n	8005a9a <_printf_float+0xc2>
 8005d86:	9a05      	ldr	r2, [sp, #20]
 8005d88:	464b      	mov	r3, r9
 8005d8a:	4442      	add	r2, r8
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4628      	mov	r0, r5
 8005d90:	47b8      	blx	r7
 8005d92:	3001      	adds	r0, #1
 8005d94:	d1c1      	bne.n	8005d1a <_printf_float+0x342>
 8005d96:	e680      	b.n	8005a9a <_printf_float+0xc2>
 8005d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	dc01      	bgt.n	8005da2 <_printf_float+0x3ca>
 8005d9e:	07db      	lsls	r3, r3, #31
 8005da0:	d538      	bpl.n	8005e14 <_printf_float+0x43c>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4642      	mov	r2, r8
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f ae74 	beq.w	8005a9a <_printf_float+0xc2>
 8005db2:	ee18 3a10 	vmov	r3, s16
 8005db6:	4652      	mov	r2, sl
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f43f ae6b 	beq.w	8005a9a <_printf_float+0xc2>
 8005dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f7fa fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dd0:	b9d8      	cbnz	r0, 8005e0a <_printf_float+0x432>
 8005dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd4:	f108 0201 	add.w	r2, r8, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	d10e      	bne.n	8005e02 <_printf_float+0x42a>
 8005de4:	e659      	b.n	8005a9a <_printf_float+0xc2>
 8005de6:	2301      	movs	r3, #1
 8005de8:	4652      	mov	r2, sl
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f ae52 	beq.w	8005a9a <_printf_float+0xc2>
 8005df6:	f108 0801 	add.w	r8, r8, #1
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4543      	cmp	r3, r8
 8005e00:	dcf1      	bgt.n	8005de6 <_printf_float+0x40e>
 8005e02:	464b      	mov	r3, r9
 8005e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e08:	e6dc      	b.n	8005bc4 <_printf_float+0x1ec>
 8005e0a:	f04f 0800 	mov.w	r8, #0
 8005e0e:	f104 0a1a 	add.w	sl, r4, #26
 8005e12:	e7f2      	b.n	8005dfa <_printf_float+0x422>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4642      	mov	r2, r8
 8005e18:	e7df      	b.n	8005dda <_printf_float+0x402>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f ae38 	beq.w	8005a9a <_printf_float+0xc2>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e32:	1a5b      	subs	r3, r3, r1
 8005e34:	4543      	cmp	r3, r8
 8005e36:	dcf0      	bgt.n	8005e1a <_printf_float+0x442>
 8005e38:	e6fa      	b.n	8005c30 <_printf_float+0x258>
 8005e3a:	f04f 0800 	mov.w	r8, #0
 8005e3e:	f104 0919 	add.w	r9, r4, #25
 8005e42:	e7f4      	b.n	8005e2e <_printf_float+0x456>

08005e44 <_printf_common>:
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	4616      	mov	r6, r2
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	688a      	ldr	r2, [r1, #8]
 8005e4e:	690b      	ldr	r3, [r1, #16]
 8005e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	bfb8      	it	lt
 8005e58:	4613      	movlt	r3, r2
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e60:	4607      	mov	r7, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	b10a      	cbz	r2, 8005e6a <_printf_common+0x26>
 8005e66:	3301      	adds	r3, #1
 8005e68:	6033      	str	r3, [r6, #0]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	0699      	lsls	r1, r3, #26
 8005e6e:	bf42      	ittt	mi
 8005e70:	6833      	ldrmi	r3, [r6, #0]
 8005e72:	3302      	addmi	r3, #2
 8005e74:	6033      	strmi	r3, [r6, #0]
 8005e76:	6825      	ldr	r5, [r4, #0]
 8005e78:	f015 0506 	ands.w	r5, r5, #6
 8005e7c:	d106      	bne.n	8005e8c <_printf_common+0x48>
 8005e7e:	f104 0a19 	add.w	sl, r4, #25
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	6832      	ldr	r2, [r6, #0]
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dc26      	bgt.n	8005eda <_printf_common+0x96>
 8005e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e90:	1e13      	subs	r3, r2, #0
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	bf18      	it	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	0692      	lsls	r2, r2, #26
 8005e9a:	d42b      	bmi.n	8005ef4 <_printf_common+0xb0>
 8005e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d01e      	beq.n	8005ee8 <_printf_common+0xa4>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	68e5      	ldr	r5, [r4, #12]
 8005eae:	6832      	ldr	r2, [r6, #0]
 8005eb0:	f003 0306 	and.w	r3, r3, #6
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	bf08      	it	eq
 8005eb8:	1aad      	subeq	r5, r5, r2
 8005eba:	68a3      	ldr	r3, [r4, #8]
 8005ebc:	6922      	ldr	r2, [r4, #16]
 8005ebe:	bf0c      	ite	eq
 8005ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec4:	2500      	movne	r5, #0
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bfc4      	itt	gt
 8005eca:	1a9b      	subgt	r3, r3, r2
 8005ecc:	18ed      	addgt	r5, r5, r3
 8005ece:	2600      	movs	r6, #0
 8005ed0:	341a      	adds	r4, #26
 8005ed2:	42b5      	cmp	r5, r6
 8005ed4:	d11a      	bne.n	8005f0c <_printf_common+0xc8>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e008      	b.n	8005eec <_printf_common+0xa8>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4652      	mov	r2, sl
 8005ede:	4649      	mov	r1, r9
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	47c0      	blx	r8
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d103      	bne.n	8005ef0 <_printf_common+0xac>
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	e7c6      	b.n	8005e82 <_printf_common+0x3e>
 8005ef4:	18e1      	adds	r1, r4, r3
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	2030      	movs	r0, #48	; 0x30
 8005efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005efe:	4422      	add	r2, r4
 8005f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f08:	3302      	adds	r3, #2
 8005f0a:	e7c7      	b.n	8005e9c <_printf_common+0x58>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4622      	mov	r2, r4
 8005f10:	4649      	mov	r1, r9
 8005f12:	4638      	mov	r0, r7
 8005f14:	47c0      	blx	r8
 8005f16:	3001      	adds	r0, #1
 8005f18:	d0e6      	beq.n	8005ee8 <_printf_common+0xa4>
 8005f1a:	3601      	adds	r6, #1
 8005f1c:	e7d9      	b.n	8005ed2 <_printf_common+0x8e>
	...

08005f20 <_printf_i>:
 8005f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	7e0f      	ldrb	r7, [r1, #24]
 8005f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f28:	2f78      	cmp	r7, #120	; 0x78
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	469a      	mov	sl, r3
 8005f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f36:	d807      	bhi.n	8005f48 <_printf_i+0x28>
 8005f38:	2f62      	cmp	r7, #98	; 0x62
 8005f3a:	d80a      	bhi.n	8005f52 <_printf_i+0x32>
 8005f3c:	2f00      	cmp	r7, #0
 8005f3e:	f000 80d8 	beq.w	80060f2 <_printf_i+0x1d2>
 8005f42:	2f58      	cmp	r7, #88	; 0x58
 8005f44:	f000 80a3 	beq.w	800608e <_printf_i+0x16e>
 8005f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f50:	e03a      	b.n	8005fc8 <_printf_i+0xa8>
 8005f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f56:	2b15      	cmp	r3, #21
 8005f58:	d8f6      	bhi.n	8005f48 <_printf_i+0x28>
 8005f5a:	a101      	add	r1, pc, #4	; (adr r1, 8005f60 <_printf_i+0x40>)
 8005f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005fcd 	.word	0x08005fcd
 8005f68:	08005f49 	.word	0x08005f49
 8005f6c:	08005f49 	.word	0x08005f49
 8005f70:	08005f49 	.word	0x08005f49
 8005f74:	08005f49 	.word	0x08005f49
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005f49 	.word	0x08005f49
 8005f80:	08005f49 	.word	0x08005f49
 8005f84:	08005f49 	.word	0x08005f49
 8005f88:	08005f49 	.word	0x08005f49
 8005f8c:	080060d9 	.word	0x080060d9
 8005f90:	08005ffd 	.word	0x08005ffd
 8005f94:	080060bb 	.word	0x080060bb
 8005f98:	08005f49 	.word	0x08005f49
 8005f9c:	08005f49 	.word	0x08005f49
 8005fa0:	080060fb 	.word	0x080060fb
 8005fa4:	08005f49 	.word	0x08005f49
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08005f49 	.word	0x08005f49
 8005fb0:	08005f49 	.word	0x08005f49
 8005fb4:	080060c3 	.word	0x080060c3
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	602a      	str	r2, [r5, #0]
 8005fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0a3      	b.n	8006114 <_printf_i+0x1f4>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	6829      	ldr	r1, [r5, #0]
 8005fd0:	0606      	lsls	r6, r0, #24
 8005fd2:	f101 0304 	add.w	r3, r1, #4
 8005fd6:	d50a      	bpl.n	8005fee <_printf_i+0xce>
 8005fd8:	680e      	ldr	r6, [r1, #0]
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	da03      	bge.n	8005fe8 <_printf_i+0xc8>
 8005fe0:	232d      	movs	r3, #45	; 0x2d
 8005fe2:	4276      	negs	r6, r6
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe8:	485e      	ldr	r0, [pc, #376]	; (8006164 <_printf_i+0x244>)
 8005fea:	230a      	movs	r3, #10
 8005fec:	e019      	b.n	8006022 <_printf_i+0x102>
 8005fee:	680e      	ldr	r6, [r1, #0]
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ff6:	bf18      	it	ne
 8005ff8:	b236      	sxthne	r6, r6
 8005ffa:	e7ef      	b.n	8005fdc <_printf_i+0xbc>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	6820      	ldr	r0, [r4, #0]
 8006000:	1d19      	adds	r1, r3, #4
 8006002:	6029      	str	r1, [r5, #0]
 8006004:	0601      	lsls	r1, r0, #24
 8006006:	d501      	bpl.n	800600c <_printf_i+0xec>
 8006008:	681e      	ldr	r6, [r3, #0]
 800600a:	e002      	b.n	8006012 <_printf_i+0xf2>
 800600c:	0646      	lsls	r6, r0, #25
 800600e:	d5fb      	bpl.n	8006008 <_printf_i+0xe8>
 8006010:	881e      	ldrh	r6, [r3, #0]
 8006012:	4854      	ldr	r0, [pc, #336]	; (8006164 <_printf_i+0x244>)
 8006014:	2f6f      	cmp	r7, #111	; 0x6f
 8006016:	bf0c      	ite	eq
 8006018:	2308      	moveq	r3, #8
 800601a:	230a      	movne	r3, #10
 800601c:	2100      	movs	r1, #0
 800601e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006022:	6865      	ldr	r5, [r4, #4]
 8006024:	60a5      	str	r5, [r4, #8]
 8006026:	2d00      	cmp	r5, #0
 8006028:	bfa2      	ittt	ge
 800602a:	6821      	ldrge	r1, [r4, #0]
 800602c:	f021 0104 	bicge.w	r1, r1, #4
 8006030:	6021      	strge	r1, [r4, #0]
 8006032:	b90e      	cbnz	r6, 8006038 <_printf_i+0x118>
 8006034:	2d00      	cmp	r5, #0
 8006036:	d04d      	beq.n	80060d4 <_printf_i+0x1b4>
 8006038:	4615      	mov	r5, r2
 800603a:	fbb6 f1f3 	udiv	r1, r6, r3
 800603e:	fb03 6711 	mls	r7, r3, r1, r6
 8006042:	5dc7      	ldrb	r7, [r0, r7]
 8006044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006048:	4637      	mov	r7, r6
 800604a:	42bb      	cmp	r3, r7
 800604c:	460e      	mov	r6, r1
 800604e:	d9f4      	bls.n	800603a <_printf_i+0x11a>
 8006050:	2b08      	cmp	r3, #8
 8006052:	d10b      	bne.n	800606c <_printf_i+0x14c>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	07de      	lsls	r6, r3, #31
 8006058:	d508      	bpl.n	800606c <_printf_i+0x14c>
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	6861      	ldr	r1, [r4, #4]
 800605e:	4299      	cmp	r1, r3
 8006060:	bfde      	ittt	le
 8006062:	2330      	movle	r3, #48	; 0x30
 8006064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800606c:	1b52      	subs	r2, r2, r5
 800606e:	6122      	str	r2, [r4, #16]
 8006070:	f8cd a000 	str.w	sl, [sp]
 8006074:	464b      	mov	r3, r9
 8006076:	aa03      	add	r2, sp, #12
 8006078:	4621      	mov	r1, r4
 800607a:	4640      	mov	r0, r8
 800607c:	f7ff fee2 	bl	8005e44 <_printf_common>
 8006080:	3001      	adds	r0, #1
 8006082:	d14c      	bne.n	800611e <_printf_i+0x1fe>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	b004      	add	sp, #16
 800608a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608e:	4835      	ldr	r0, [pc, #212]	; (8006164 <_printf_i+0x244>)
 8006090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006094:	6829      	ldr	r1, [r5, #0]
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f851 6b04 	ldr.w	r6, [r1], #4
 800609c:	6029      	str	r1, [r5, #0]
 800609e:	061d      	lsls	r5, r3, #24
 80060a0:	d514      	bpl.n	80060cc <_printf_i+0x1ac>
 80060a2:	07df      	lsls	r7, r3, #31
 80060a4:	bf44      	itt	mi
 80060a6:	f043 0320 	orrmi.w	r3, r3, #32
 80060aa:	6023      	strmi	r3, [r4, #0]
 80060ac:	b91e      	cbnz	r6, 80060b6 <_printf_i+0x196>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	f023 0320 	bic.w	r3, r3, #32
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	2310      	movs	r3, #16
 80060b8:	e7b0      	b.n	800601c <_printf_i+0xfc>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f043 0320 	orr.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	2378      	movs	r3, #120	; 0x78
 80060c4:	4828      	ldr	r0, [pc, #160]	; (8006168 <_printf_i+0x248>)
 80060c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ca:	e7e3      	b.n	8006094 <_printf_i+0x174>
 80060cc:	0659      	lsls	r1, r3, #25
 80060ce:	bf48      	it	mi
 80060d0:	b2b6      	uxthmi	r6, r6
 80060d2:	e7e6      	b.n	80060a2 <_printf_i+0x182>
 80060d4:	4615      	mov	r5, r2
 80060d6:	e7bb      	b.n	8006050 <_printf_i+0x130>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	6826      	ldr	r6, [r4, #0]
 80060dc:	6961      	ldr	r1, [r4, #20]
 80060de:	1d18      	adds	r0, r3, #4
 80060e0:	6028      	str	r0, [r5, #0]
 80060e2:	0635      	lsls	r5, r6, #24
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	d501      	bpl.n	80060ec <_printf_i+0x1cc>
 80060e8:	6019      	str	r1, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <_printf_i+0x1d2>
 80060ec:	0670      	lsls	r0, r6, #25
 80060ee:	d5fb      	bpl.n	80060e8 <_printf_i+0x1c8>
 80060f0:	8019      	strh	r1, [r3, #0]
 80060f2:	2300      	movs	r3, #0
 80060f4:	6123      	str	r3, [r4, #16]
 80060f6:	4615      	mov	r5, r2
 80060f8:	e7ba      	b.n	8006070 <_printf_i+0x150>
 80060fa:	682b      	ldr	r3, [r5, #0]
 80060fc:	1d1a      	adds	r2, r3, #4
 80060fe:	602a      	str	r2, [r5, #0]
 8006100:	681d      	ldr	r5, [r3, #0]
 8006102:	6862      	ldr	r2, [r4, #4]
 8006104:	2100      	movs	r1, #0
 8006106:	4628      	mov	r0, r5
 8006108:	f7fa f86a 	bl	80001e0 <memchr>
 800610c:	b108      	cbz	r0, 8006112 <_printf_i+0x1f2>
 800610e:	1b40      	subs	r0, r0, r5
 8006110:	6060      	str	r0, [r4, #4]
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	2300      	movs	r3, #0
 8006118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800611c:	e7a8      	b.n	8006070 <_printf_i+0x150>
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	462a      	mov	r2, r5
 8006122:	4649      	mov	r1, r9
 8006124:	4640      	mov	r0, r8
 8006126:	47d0      	blx	sl
 8006128:	3001      	adds	r0, #1
 800612a:	d0ab      	beq.n	8006084 <_printf_i+0x164>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	079b      	lsls	r3, r3, #30
 8006130:	d413      	bmi.n	800615a <_printf_i+0x23a>
 8006132:	68e0      	ldr	r0, [r4, #12]
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	4298      	cmp	r0, r3
 8006138:	bfb8      	it	lt
 800613a:	4618      	movlt	r0, r3
 800613c:	e7a4      	b.n	8006088 <_printf_i+0x168>
 800613e:	2301      	movs	r3, #1
 8006140:	4632      	mov	r2, r6
 8006142:	4649      	mov	r1, r9
 8006144:	4640      	mov	r0, r8
 8006146:	47d0      	blx	sl
 8006148:	3001      	adds	r0, #1
 800614a:	d09b      	beq.n	8006084 <_printf_i+0x164>
 800614c:	3501      	adds	r5, #1
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	9903      	ldr	r1, [sp, #12]
 8006152:	1a5b      	subs	r3, r3, r1
 8006154:	42ab      	cmp	r3, r5
 8006156:	dcf2      	bgt.n	800613e <_printf_i+0x21e>
 8006158:	e7eb      	b.n	8006132 <_printf_i+0x212>
 800615a:	2500      	movs	r5, #0
 800615c:	f104 0619 	add.w	r6, r4, #25
 8006160:	e7f5      	b.n	800614e <_printf_i+0x22e>
 8006162:	bf00      	nop
 8006164:	08008526 	.word	0x08008526
 8006168:	08008537 	.word	0x08008537

0800616c <iprintf>:
 800616c:	b40f      	push	{r0, r1, r2, r3}
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <iprintf+0x2c>)
 8006170:	b513      	push	{r0, r1, r4, lr}
 8006172:	681c      	ldr	r4, [r3, #0]
 8006174:	b124      	cbz	r4, 8006180 <iprintf+0x14>
 8006176:	69a3      	ldr	r3, [r4, #24]
 8006178:	b913      	cbnz	r3, 8006180 <iprintf+0x14>
 800617a:	4620      	mov	r0, r4
 800617c:	f001 f8f0 	bl	8007360 <__sinit>
 8006180:	ab05      	add	r3, sp, #20
 8006182:	9a04      	ldr	r2, [sp, #16]
 8006184:	68a1      	ldr	r1, [r4, #8]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	4620      	mov	r0, r4
 800618a:	f001 fead 	bl	8007ee8 <_vfiprintf_r>
 800618e:	b002      	add	sp, #8
 8006190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006194:	b004      	add	sp, #16
 8006196:	4770      	bx	lr
 8006198:	2000000c 	.word	0x2000000c

0800619c <putchar>:
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <putchar+0x28>)
 800619e:	b513      	push	{r0, r1, r4, lr}
 80061a0:	681c      	ldr	r4, [r3, #0]
 80061a2:	4601      	mov	r1, r0
 80061a4:	b134      	cbz	r4, 80061b4 <putchar+0x18>
 80061a6:	69a3      	ldr	r3, [r4, #24]
 80061a8:	b923      	cbnz	r3, 80061b4 <putchar+0x18>
 80061aa:	9001      	str	r0, [sp, #4]
 80061ac:	4620      	mov	r0, r4
 80061ae:	f001 f8d7 	bl	8007360 <__sinit>
 80061b2:	9901      	ldr	r1, [sp, #4]
 80061b4:	68a2      	ldr	r2, [r4, #8]
 80061b6:	4620      	mov	r0, r4
 80061b8:	b002      	add	sp, #8
 80061ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061be:	f001 bfc3 	b.w	8008148 <_putc_r>
 80061c2:	bf00      	nop
 80061c4:	2000000c 	.word	0x2000000c

080061c8 <_puts_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	460e      	mov	r6, r1
 80061cc:	4605      	mov	r5, r0
 80061ce:	b118      	cbz	r0, 80061d8 <_puts_r+0x10>
 80061d0:	6983      	ldr	r3, [r0, #24]
 80061d2:	b90b      	cbnz	r3, 80061d8 <_puts_r+0x10>
 80061d4:	f001 f8c4 	bl	8007360 <__sinit>
 80061d8:	69ab      	ldr	r3, [r5, #24]
 80061da:	68ac      	ldr	r4, [r5, #8]
 80061dc:	b913      	cbnz	r3, 80061e4 <_puts_r+0x1c>
 80061de:	4628      	mov	r0, r5
 80061e0:	f001 f8be 	bl	8007360 <__sinit>
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <_puts_r+0xd0>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d120      	bne.n	800622c <_puts_r+0x64>
 80061ea:	686c      	ldr	r4, [r5, #4]
 80061ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ee:	07db      	lsls	r3, r3, #31
 80061f0:	d405      	bmi.n	80061fe <_puts_r+0x36>
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	0598      	lsls	r0, r3, #22
 80061f6:	d402      	bmi.n	80061fe <_puts_r+0x36>
 80061f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061fa:	f001 f954 	bl	80074a6 <__retarget_lock_acquire_recursive>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	0719      	lsls	r1, r3, #28
 8006202:	d51d      	bpl.n	8006240 <_puts_r+0x78>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	b1db      	cbz	r3, 8006240 <_puts_r+0x78>
 8006208:	3e01      	subs	r6, #1
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006210:	3b01      	subs	r3, #1
 8006212:	60a3      	str	r3, [r4, #8]
 8006214:	bb39      	cbnz	r1, 8006266 <_puts_r+0x9e>
 8006216:	2b00      	cmp	r3, #0
 8006218:	da38      	bge.n	800628c <_puts_r+0xc4>
 800621a:	4622      	mov	r2, r4
 800621c:	210a      	movs	r1, #10
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f848 	bl	80062b4 <__swbuf_r>
 8006224:	3001      	adds	r0, #1
 8006226:	d011      	beq.n	800624c <_puts_r+0x84>
 8006228:	250a      	movs	r5, #10
 800622a:	e011      	b.n	8006250 <_puts_r+0x88>
 800622c:	4b1b      	ldr	r3, [pc, #108]	; (800629c <_puts_r+0xd4>)
 800622e:	429c      	cmp	r4, r3
 8006230:	d101      	bne.n	8006236 <_puts_r+0x6e>
 8006232:	68ac      	ldr	r4, [r5, #8]
 8006234:	e7da      	b.n	80061ec <_puts_r+0x24>
 8006236:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <_puts_r+0xd8>)
 8006238:	429c      	cmp	r4, r3
 800623a:	bf08      	it	eq
 800623c:	68ec      	ldreq	r4, [r5, #12]
 800623e:	e7d5      	b.n	80061ec <_puts_r+0x24>
 8006240:	4621      	mov	r1, r4
 8006242:	4628      	mov	r0, r5
 8006244:	f000 f888 	bl	8006358 <__swsetup_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	d0dd      	beq.n	8006208 <_puts_r+0x40>
 800624c:	f04f 35ff 	mov.w	r5, #4294967295
 8006250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006252:	07da      	lsls	r2, r3, #31
 8006254:	d405      	bmi.n	8006262 <_puts_r+0x9a>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	059b      	lsls	r3, r3, #22
 800625a:	d402      	bmi.n	8006262 <_puts_r+0x9a>
 800625c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625e:	f001 f923 	bl	80074a8 <__retarget_lock_release_recursive>
 8006262:	4628      	mov	r0, r5
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	2b00      	cmp	r3, #0
 8006268:	da04      	bge.n	8006274 <_puts_r+0xac>
 800626a:	69a2      	ldr	r2, [r4, #24]
 800626c:	429a      	cmp	r2, r3
 800626e:	dc06      	bgt.n	800627e <_puts_r+0xb6>
 8006270:	290a      	cmp	r1, #10
 8006272:	d004      	beq.n	800627e <_puts_r+0xb6>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	6022      	str	r2, [r4, #0]
 800627a:	7019      	strb	r1, [r3, #0]
 800627c:	e7c5      	b.n	800620a <_puts_r+0x42>
 800627e:	4622      	mov	r2, r4
 8006280:	4628      	mov	r0, r5
 8006282:	f000 f817 	bl	80062b4 <__swbuf_r>
 8006286:	3001      	adds	r0, #1
 8006288:	d1bf      	bne.n	800620a <_puts_r+0x42>
 800628a:	e7df      	b.n	800624c <_puts_r+0x84>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	250a      	movs	r5, #10
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	6022      	str	r2, [r4, #0]
 8006294:	701d      	strb	r5, [r3, #0]
 8006296:	e7db      	b.n	8006250 <_puts_r+0x88>
 8006298:	080085f8 	.word	0x080085f8
 800629c:	08008618 	.word	0x08008618
 80062a0:	080085d8 	.word	0x080085d8

080062a4 <puts>:
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <puts+0xc>)
 80062a6:	4601      	mov	r1, r0
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f7ff bf8d 	b.w	80061c8 <_puts_r>
 80062ae:	bf00      	nop
 80062b0:	2000000c 	.word	0x2000000c

080062b4 <__swbuf_r>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	460e      	mov	r6, r1
 80062b8:	4614      	mov	r4, r2
 80062ba:	4605      	mov	r5, r0
 80062bc:	b118      	cbz	r0, 80062c6 <__swbuf_r+0x12>
 80062be:	6983      	ldr	r3, [r0, #24]
 80062c0:	b90b      	cbnz	r3, 80062c6 <__swbuf_r+0x12>
 80062c2:	f001 f84d 	bl	8007360 <__sinit>
 80062c6:	4b21      	ldr	r3, [pc, #132]	; (800634c <__swbuf_r+0x98>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	d12b      	bne.n	8006324 <__swbuf_r+0x70>
 80062cc:	686c      	ldr	r4, [r5, #4]
 80062ce:	69a3      	ldr	r3, [r4, #24]
 80062d0:	60a3      	str	r3, [r4, #8]
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	071a      	lsls	r2, r3, #28
 80062d6:	d52f      	bpl.n	8006338 <__swbuf_r+0x84>
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	b36b      	cbz	r3, 8006338 <__swbuf_r+0x84>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1ac0      	subs	r0, r0, r3
 80062e2:	6963      	ldr	r3, [r4, #20]
 80062e4:	b2f6      	uxtb	r6, r6
 80062e6:	4283      	cmp	r3, r0
 80062e8:	4637      	mov	r7, r6
 80062ea:	dc04      	bgt.n	80062f6 <__swbuf_r+0x42>
 80062ec:	4621      	mov	r1, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 ffa2 	bl	8007238 <_fflush_r>
 80062f4:	bb30      	cbnz	r0, 8006344 <__swbuf_r+0x90>
 80062f6:	68a3      	ldr	r3, [r4, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	60a3      	str	r3, [r4, #8]
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	701e      	strb	r6, [r3, #0]
 8006304:	6963      	ldr	r3, [r4, #20]
 8006306:	3001      	adds	r0, #1
 8006308:	4283      	cmp	r3, r0
 800630a:	d004      	beq.n	8006316 <__swbuf_r+0x62>
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	07db      	lsls	r3, r3, #31
 8006310:	d506      	bpl.n	8006320 <__swbuf_r+0x6c>
 8006312:	2e0a      	cmp	r6, #10
 8006314:	d104      	bne.n	8006320 <__swbuf_r+0x6c>
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 ff8d 	bl	8007238 <_fflush_r>
 800631e:	b988      	cbnz	r0, 8006344 <__swbuf_r+0x90>
 8006320:	4638      	mov	r0, r7
 8006322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <__swbuf_r+0x9c>)
 8006326:	429c      	cmp	r4, r3
 8006328:	d101      	bne.n	800632e <__swbuf_r+0x7a>
 800632a:	68ac      	ldr	r4, [r5, #8]
 800632c:	e7cf      	b.n	80062ce <__swbuf_r+0x1a>
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <__swbuf_r+0xa0>)
 8006330:	429c      	cmp	r4, r3
 8006332:	bf08      	it	eq
 8006334:	68ec      	ldreq	r4, [r5, #12]
 8006336:	e7ca      	b.n	80062ce <__swbuf_r+0x1a>
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f80c 	bl	8006358 <__swsetup_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	d0cb      	beq.n	80062dc <__swbuf_r+0x28>
 8006344:	f04f 37ff 	mov.w	r7, #4294967295
 8006348:	e7ea      	b.n	8006320 <__swbuf_r+0x6c>
 800634a:	bf00      	nop
 800634c:	080085f8 	.word	0x080085f8
 8006350:	08008618 	.word	0x08008618
 8006354:	080085d8 	.word	0x080085d8

08006358 <__swsetup_r>:
 8006358:	4b32      	ldr	r3, [pc, #200]	; (8006424 <__swsetup_r+0xcc>)
 800635a:	b570      	push	{r4, r5, r6, lr}
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	4606      	mov	r6, r0
 8006360:	460c      	mov	r4, r1
 8006362:	b125      	cbz	r5, 800636e <__swsetup_r+0x16>
 8006364:	69ab      	ldr	r3, [r5, #24]
 8006366:	b913      	cbnz	r3, 800636e <__swsetup_r+0x16>
 8006368:	4628      	mov	r0, r5
 800636a:	f000 fff9 	bl	8007360 <__sinit>
 800636e:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <__swsetup_r+0xd0>)
 8006370:	429c      	cmp	r4, r3
 8006372:	d10f      	bne.n	8006394 <__swsetup_r+0x3c>
 8006374:	686c      	ldr	r4, [r5, #4]
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800637c:	0719      	lsls	r1, r3, #28
 800637e:	d42c      	bmi.n	80063da <__swsetup_r+0x82>
 8006380:	06dd      	lsls	r5, r3, #27
 8006382:	d411      	bmi.n	80063a8 <__swsetup_r+0x50>
 8006384:	2309      	movs	r3, #9
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	f04f 30ff 	mov.w	r0, #4294967295
 8006392:	e03e      	b.n	8006412 <__swsetup_r+0xba>
 8006394:	4b25      	ldr	r3, [pc, #148]	; (800642c <__swsetup_r+0xd4>)
 8006396:	429c      	cmp	r4, r3
 8006398:	d101      	bne.n	800639e <__swsetup_r+0x46>
 800639a:	68ac      	ldr	r4, [r5, #8]
 800639c:	e7eb      	b.n	8006376 <__swsetup_r+0x1e>
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <__swsetup_r+0xd8>)
 80063a0:	429c      	cmp	r4, r3
 80063a2:	bf08      	it	eq
 80063a4:	68ec      	ldreq	r4, [r5, #12]
 80063a6:	e7e6      	b.n	8006376 <__swsetup_r+0x1e>
 80063a8:	0758      	lsls	r0, r3, #29
 80063aa:	d512      	bpl.n	80063d2 <__swsetup_r+0x7a>
 80063ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ae:	b141      	cbz	r1, 80063c2 <__swsetup_r+0x6a>
 80063b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b4:	4299      	cmp	r1, r3
 80063b6:	d002      	beq.n	80063be <__swsetup_r+0x66>
 80063b8:	4630      	mov	r0, r6
 80063ba:	f001 fc8b 	bl	8007cd4 <_free_r>
 80063be:	2300      	movs	r3, #0
 80063c0:	6363      	str	r3, [r4, #52]	; 0x34
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	2300      	movs	r3, #0
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f043 0308 	orr.w	r3, r3, #8
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	b94b      	cbnz	r3, 80063f2 <__swsetup_r+0x9a>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e8:	d003      	beq.n	80063f2 <__swsetup_r+0x9a>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4630      	mov	r0, r6
 80063ee:	f001 f881 	bl	80074f4 <__smakebuf_r>
 80063f2:	89a0      	ldrh	r0, [r4, #12]
 80063f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063f8:	f010 0301 	ands.w	r3, r0, #1
 80063fc:	d00a      	beq.n	8006414 <__swsetup_r+0xbc>
 80063fe:	2300      	movs	r3, #0
 8006400:	60a3      	str	r3, [r4, #8]
 8006402:	6963      	ldr	r3, [r4, #20]
 8006404:	425b      	negs	r3, r3
 8006406:	61a3      	str	r3, [r4, #24]
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	b943      	cbnz	r3, 800641e <__swsetup_r+0xc6>
 800640c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006410:	d1ba      	bne.n	8006388 <__swsetup_r+0x30>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	0781      	lsls	r1, r0, #30
 8006416:	bf58      	it	pl
 8006418:	6963      	ldrpl	r3, [r4, #20]
 800641a:	60a3      	str	r3, [r4, #8]
 800641c:	e7f4      	b.n	8006408 <__swsetup_r+0xb0>
 800641e:	2000      	movs	r0, #0
 8006420:	e7f7      	b.n	8006412 <__swsetup_r+0xba>
 8006422:	bf00      	nop
 8006424:	2000000c 	.word	0x2000000c
 8006428:	080085f8 	.word	0x080085f8
 800642c:	08008618 	.word	0x08008618
 8006430:	080085d8 	.word	0x080085d8

08006434 <quorem>:
 8006434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	6903      	ldr	r3, [r0, #16]
 800643a:	690c      	ldr	r4, [r1, #16]
 800643c:	42a3      	cmp	r3, r4
 800643e:	4607      	mov	r7, r0
 8006440:	f2c0 8081 	blt.w	8006546 <quorem+0x112>
 8006444:	3c01      	subs	r4, #1
 8006446:	f101 0814 	add.w	r8, r1, #20
 800644a:	f100 0514 	add.w	r5, r0, #20
 800644e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800645c:	3301      	adds	r3, #1
 800645e:	429a      	cmp	r2, r3
 8006460:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006468:	fbb2 f6f3 	udiv	r6, r2, r3
 800646c:	d331      	bcc.n	80064d2 <quorem+0x9e>
 800646e:	f04f 0e00 	mov.w	lr, #0
 8006472:	4640      	mov	r0, r8
 8006474:	46ac      	mov	ip, r5
 8006476:	46f2      	mov	sl, lr
 8006478:	f850 2b04 	ldr.w	r2, [r0], #4
 800647c:	b293      	uxth	r3, r2
 800647e:	fb06 e303 	mla	r3, r6, r3, lr
 8006482:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006486:	b29b      	uxth	r3, r3
 8006488:	ebaa 0303 	sub.w	r3, sl, r3
 800648c:	f8dc a000 	ldr.w	sl, [ip]
 8006490:	0c12      	lsrs	r2, r2, #16
 8006492:	fa13 f38a 	uxtah	r3, r3, sl
 8006496:	fb06 e202 	mla	r2, r6, r2, lr
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	9b00      	ldr	r3, [sp, #0]
 800649e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064a2:	b292      	uxth	r2, r2
 80064a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80064b0:	4581      	cmp	r9, r0
 80064b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064b6:	f84c 3b04 	str.w	r3, [ip], #4
 80064ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064be:	d2db      	bcs.n	8006478 <quorem+0x44>
 80064c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80064c4:	b92b      	cbnz	r3, 80064d2 <quorem+0x9e>
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	3b04      	subs	r3, #4
 80064ca:	429d      	cmp	r5, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	d32e      	bcc.n	800652e <quorem+0xfa>
 80064d0:	613c      	str	r4, [r7, #16]
 80064d2:	4638      	mov	r0, r7
 80064d4:	f001 fae6 	bl	8007aa4 <__mcmp>
 80064d8:	2800      	cmp	r0, #0
 80064da:	db24      	blt.n	8006526 <quorem+0xf2>
 80064dc:	3601      	adds	r6, #1
 80064de:	4628      	mov	r0, r5
 80064e0:	f04f 0c00 	mov.w	ip, #0
 80064e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80064e8:	f8d0 e000 	ldr.w	lr, [r0]
 80064ec:	b293      	uxth	r3, r2
 80064ee:	ebac 0303 	sub.w	r3, ip, r3
 80064f2:	0c12      	lsrs	r2, r2, #16
 80064f4:	fa13 f38e 	uxtah	r3, r3, lr
 80064f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006506:	45c1      	cmp	r9, r8
 8006508:	f840 3b04 	str.w	r3, [r0], #4
 800650c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006510:	d2e8      	bcs.n	80064e4 <quorem+0xb0>
 8006512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800651a:	b922      	cbnz	r2, 8006526 <quorem+0xf2>
 800651c:	3b04      	subs	r3, #4
 800651e:	429d      	cmp	r5, r3
 8006520:	461a      	mov	r2, r3
 8006522:	d30a      	bcc.n	800653a <quorem+0x106>
 8006524:	613c      	str	r4, [r7, #16]
 8006526:	4630      	mov	r0, r6
 8006528:	b003      	add	sp, #12
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	3b04      	subs	r3, #4
 8006532:	2a00      	cmp	r2, #0
 8006534:	d1cc      	bne.n	80064d0 <quorem+0x9c>
 8006536:	3c01      	subs	r4, #1
 8006538:	e7c7      	b.n	80064ca <quorem+0x96>
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	3b04      	subs	r3, #4
 800653e:	2a00      	cmp	r2, #0
 8006540:	d1f0      	bne.n	8006524 <quorem+0xf0>
 8006542:	3c01      	subs	r4, #1
 8006544:	e7eb      	b.n	800651e <quorem+0xea>
 8006546:	2000      	movs	r0, #0
 8006548:	e7ee      	b.n	8006528 <quorem+0xf4>
 800654a:	0000      	movs	r0, r0
 800654c:	0000      	movs	r0, r0
	...

08006550 <_dtoa_r>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	ed2d 8b04 	vpush	{d8-d9}
 8006558:	ec57 6b10 	vmov	r6, r7, d0
 800655c:	b093      	sub	sp, #76	; 0x4c
 800655e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006564:	9106      	str	r1, [sp, #24]
 8006566:	ee10 aa10 	vmov	sl, s0
 800656a:	4604      	mov	r4, r0
 800656c:	9209      	str	r2, [sp, #36]	; 0x24
 800656e:	930c      	str	r3, [sp, #48]	; 0x30
 8006570:	46bb      	mov	fp, r7
 8006572:	b975      	cbnz	r5, 8006592 <_dtoa_r+0x42>
 8006574:	2010      	movs	r0, #16
 8006576:	f000 fffd 	bl	8007574 <malloc>
 800657a:	4602      	mov	r2, r0
 800657c:	6260      	str	r0, [r4, #36]	; 0x24
 800657e:	b920      	cbnz	r0, 800658a <_dtoa_r+0x3a>
 8006580:	4ba7      	ldr	r3, [pc, #668]	; (8006820 <_dtoa_r+0x2d0>)
 8006582:	21ea      	movs	r1, #234	; 0xea
 8006584:	48a7      	ldr	r0, [pc, #668]	; (8006824 <_dtoa_r+0x2d4>)
 8006586:	f001 fe8d 	bl	80082a4 <__assert_func>
 800658a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800658e:	6005      	str	r5, [r0, #0]
 8006590:	60c5      	str	r5, [r0, #12]
 8006592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006594:	6819      	ldr	r1, [r3, #0]
 8006596:	b151      	cbz	r1, 80065ae <_dtoa_r+0x5e>
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	604a      	str	r2, [r1, #4]
 800659c:	2301      	movs	r3, #1
 800659e:	4093      	lsls	r3, r2
 80065a0:	608b      	str	r3, [r1, #8]
 80065a2:	4620      	mov	r0, r4
 80065a4:	f001 f83c 	bl	8007620 <_Bfree>
 80065a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	1e3b      	subs	r3, r7, #0
 80065b0:	bfaa      	itet	ge
 80065b2:	2300      	movge	r3, #0
 80065b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80065b8:	f8c8 3000 	strge.w	r3, [r8]
 80065bc:	4b9a      	ldr	r3, [pc, #616]	; (8006828 <_dtoa_r+0x2d8>)
 80065be:	bfbc      	itt	lt
 80065c0:	2201      	movlt	r2, #1
 80065c2:	f8c8 2000 	strlt.w	r2, [r8]
 80065c6:	ea33 030b 	bics.w	r3, r3, fp
 80065ca:	d11b      	bne.n	8006604 <_dtoa_r+0xb4>
 80065cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065d8:	4333      	orrs	r3, r6
 80065da:	f000 8592 	beq.w	8007102 <_dtoa_r+0xbb2>
 80065de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e0:	b963      	cbnz	r3, 80065fc <_dtoa_r+0xac>
 80065e2:	4b92      	ldr	r3, [pc, #584]	; (800682c <_dtoa_r+0x2dc>)
 80065e4:	e022      	b.n	800662c <_dtoa_r+0xdc>
 80065e6:	4b92      	ldr	r3, [pc, #584]	; (8006830 <_dtoa_r+0x2e0>)
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	3308      	adds	r3, #8
 80065ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	9801      	ldr	r0, [sp, #4]
 80065f2:	b013      	add	sp, #76	; 0x4c
 80065f4:	ecbd 8b04 	vpop	{d8-d9}
 80065f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	4b8b      	ldr	r3, [pc, #556]	; (800682c <_dtoa_r+0x2dc>)
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	3303      	adds	r3, #3
 8006602:	e7f3      	b.n	80065ec <_dtoa_r+0x9c>
 8006604:	2200      	movs	r2, #0
 8006606:	2300      	movs	r3, #0
 8006608:	4650      	mov	r0, sl
 800660a:	4659      	mov	r1, fp
 800660c:	f7fa fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006610:	ec4b ab19 	vmov	d9, sl, fp
 8006614:	4680      	mov	r8, r0
 8006616:	b158      	cbz	r0, 8006630 <_dtoa_r+0xe0>
 8006618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800661a:	2301      	movs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 856b 	beq.w	80070fc <_dtoa_r+0xbac>
 8006626:	4883      	ldr	r0, [pc, #524]	; (8006834 <_dtoa_r+0x2e4>)
 8006628:	6018      	str	r0, [r3, #0]
 800662a:	1e43      	subs	r3, r0, #1
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	e7df      	b.n	80065f0 <_dtoa_r+0xa0>
 8006630:	ec4b ab10 	vmov	d0, sl, fp
 8006634:	aa10      	add	r2, sp, #64	; 0x40
 8006636:	a911      	add	r1, sp, #68	; 0x44
 8006638:	4620      	mov	r0, r4
 800663a:	f001 fad9 	bl	8007bf0 <__d2b>
 800663e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006642:	ee08 0a10 	vmov	s16, r0
 8006646:	2d00      	cmp	r5, #0
 8006648:	f000 8084 	beq.w	8006754 <_dtoa_r+0x204>
 800664c:	ee19 3a90 	vmov	r3, s19
 8006650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006654:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006658:	4656      	mov	r6, sl
 800665a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800665e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006662:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006666:	4b74      	ldr	r3, [pc, #464]	; (8006838 <_dtoa_r+0x2e8>)
 8006668:	2200      	movs	r2, #0
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7f9 fe0b 	bl	8000288 <__aeabi_dsub>
 8006672:	a365      	add	r3, pc, #404	; (adr r3, 8006808 <_dtoa_r+0x2b8>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f7f9 ffbe 	bl	80005f8 <__aeabi_dmul>
 800667c:	a364      	add	r3, pc, #400	; (adr r3, 8006810 <_dtoa_r+0x2c0>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f7f9 fe03 	bl	800028c <__adddf3>
 8006686:	4606      	mov	r6, r0
 8006688:	4628      	mov	r0, r5
 800668a:	460f      	mov	r7, r1
 800668c:	f7f9 ff4a 	bl	8000524 <__aeabi_i2d>
 8006690:	a361      	add	r3, pc, #388	; (adr r3, 8006818 <_dtoa_r+0x2c8>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7f9 ffaf 	bl	80005f8 <__aeabi_dmul>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4630      	mov	r0, r6
 80066a0:	4639      	mov	r1, r7
 80066a2:	f7f9 fdf3 	bl	800028c <__adddf3>
 80066a6:	4606      	mov	r6, r0
 80066a8:	460f      	mov	r7, r1
 80066aa:	f7fa fa55 	bl	8000b58 <__aeabi_d2iz>
 80066ae:	2200      	movs	r2, #0
 80066b0:	9000      	str	r0, [sp, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7fa fa10 	bl	8000adc <__aeabi_dcmplt>
 80066bc:	b150      	cbz	r0, 80066d4 <_dtoa_r+0x184>
 80066be:	9800      	ldr	r0, [sp, #0]
 80066c0:	f7f9 ff30 	bl	8000524 <__aeabi_i2d>
 80066c4:	4632      	mov	r2, r6
 80066c6:	463b      	mov	r3, r7
 80066c8:	f7fa f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80066cc:	b910      	cbnz	r0, 80066d4 <_dtoa_r+0x184>
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	9b00      	ldr	r3, [sp, #0]
 80066d6:	2b16      	cmp	r3, #22
 80066d8:	d85a      	bhi.n	8006790 <_dtoa_r+0x240>
 80066da:	9a00      	ldr	r2, [sp, #0]
 80066dc:	4b57      	ldr	r3, [pc, #348]	; (800683c <_dtoa_r+0x2ec>)
 80066de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	ec51 0b19 	vmov	r0, r1, d9
 80066ea:	f7fa f9f7 	bl	8000adc <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d050      	beq.n	8006794 <_dtoa_r+0x244>
 80066f2:	9b00      	ldr	r3, [sp, #0]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2300      	movs	r3, #0
 80066fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80066fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066fe:	1b5d      	subs	r5, r3, r5
 8006700:	1e6b      	subs	r3, r5, #1
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	bf45      	ittet	mi
 8006706:	f1c5 0301 	rsbmi	r3, r5, #1
 800670a:	9304      	strmi	r3, [sp, #16]
 800670c:	2300      	movpl	r3, #0
 800670e:	2300      	movmi	r3, #0
 8006710:	bf4c      	ite	mi
 8006712:	9305      	strmi	r3, [sp, #20]
 8006714:	9304      	strpl	r3, [sp, #16]
 8006716:	9b00      	ldr	r3, [sp, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	db3d      	blt.n	8006798 <_dtoa_r+0x248>
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	9a00      	ldr	r2, [sp, #0]
 8006720:	920a      	str	r2, [sp, #40]	; 0x28
 8006722:	4413      	add	r3, r2
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	2300      	movs	r3, #0
 8006728:	9307      	str	r3, [sp, #28]
 800672a:	9b06      	ldr	r3, [sp, #24]
 800672c:	2b09      	cmp	r3, #9
 800672e:	f200 8089 	bhi.w	8006844 <_dtoa_r+0x2f4>
 8006732:	2b05      	cmp	r3, #5
 8006734:	bfc4      	itt	gt
 8006736:	3b04      	subgt	r3, #4
 8006738:	9306      	strgt	r3, [sp, #24]
 800673a:	9b06      	ldr	r3, [sp, #24]
 800673c:	f1a3 0302 	sub.w	r3, r3, #2
 8006740:	bfcc      	ite	gt
 8006742:	2500      	movgt	r5, #0
 8006744:	2501      	movle	r5, #1
 8006746:	2b03      	cmp	r3, #3
 8006748:	f200 8087 	bhi.w	800685a <_dtoa_r+0x30a>
 800674c:	e8df f003 	tbb	[pc, r3]
 8006750:	59383a2d 	.word	0x59383a2d
 8006754:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006758:	441d      	add	r5, r3
 800675a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800675e:	2b20      	cmp	r3, #32
 8006760:	bfc1      	itttt	gt
 8006762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006766:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800676a:	fa0b f303 	lslgt.w	r3, fp, r3
 800676e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006772:	bfda      	itte	le
 8006774:	f1c3 0320 	rsble	r3, r3, #32
 8006778:	fa06 f003 	lslle.w	r0, r6, r3
 800677c:	4318      	orrgt	r0, r3
 800677e:	f7f9 fec1 	bl	8000504 <__aeabi_ui2d>
 8006782:	2301      	movs	r3, #1
 8006784:	4606      	mov	r6, r0
 8006786:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800678a:	3d01      	subs	r5, #1
 800678c:	930e      	str	r3, [sp, #56]	; 0x38
 800678e:	e76a      	b.n	8006666 <_dtoa_r+0x116>
 8006790:	2301      	movs	r3, #1
 8006792:	e7b2      	b.n	80066fa <_dtoa_r+0x1aa>
 8006794:	900b      	str	r0, [sp, #44]	; 0x2c
 8006796:	e7b1      	b.n	80066fc <_dtoa_r+0x1ac>
 8006798:	9b04      	ldr	r3, [sp, #16]
 800679a:	9a00      	ldr	r2, [sp, #0]
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	9304      	str	r3, [sp, #16]
 80067a0:	4253      	negs	r3, r2
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	2300      	movs	r3, #0
 80067a6:	930a      	str	r3, [sp, #40]	; 0x28
 80067a8:	e7bf      	b.n	800672a <_dtoa_r+0x1da>
 80067aa:	2300      	movs	r3, #0
 80067ac:	9308      	str	r3, [sp, #32]
 80067ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dc55      	bgt.n	8006860 <_dtoa_r+0x310>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ba:	461a      	mov	r2, r3
 80067bc:	9209      	str	r2, [sp, #36]	; 0x24
 80067be:	e00c      	b.n	80067da <_dtoa_r+0x28a>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e7f3      	b.n	80067ac <_dtoa_r+0x25c>
 80067c4:	2300      	movs	r3, #0
 80067c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067c8:	9308      	str	r3, [sp, #32]
 80067ca:	9b00      	ldr	r3, [sp, #0]
 80067cc:	4413      	add	r3, r2
 80067ce:	9302      	str	r3, [sp, #8]
 80067d0:	3301      	adds	r3, #1
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	9303      	str	r3, [sp, #12]
 80067d6:	bfb8      	it	lt
 80067d8:	2301      	movlt	r3, #1
 80067da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067dc:	2200      	movs	r2, #0
 80067de:	6042      	str	r2, [r0, #4]
 80067e0:	2204      	movs	r2, #4
 80067e2:	f102 0614 	add.w	r6, r2, #20
 80067e6:	429e      	cmp	r6, r3
 80067e8:	6841      	ldr	r1, [r0, #4]
 80067ea:	d93d      	bls.n	8006868 <_dtoa_r+0x318>
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fed7 	bl	80075a0 <_Balloc>
 80067f2:	9001      	str	r0, [sp, #4]
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d13b      	bne.n	8006870 <_dtoa_r+0x320>
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <_dtoa_r+0x2f0>)
 80067fa:	4602      	mov	r2, r0
 80067fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006800:	e6c0      	b.n	8006584 <_dtoa_r+0x34>
 8006802:	2301      	movs	r3, #1
 8006804:	e7df      	b.n	80067c6 <_dtoa_r+0x276>
 8006806:	bf00      	nop
 8006808:	636f4361 	.word	0x636f4361
 800680c:	3fd287a7 	.word	0x3fd287a7
 8006810:	8b60c8b3 	.word	0x8b60c8b3
 8006814:	3fc68a28 	.word	0x3fc68a28
 8006818:	509f79fb 	.word	0x509f79fb
 800681c:	3fd34413 	.word	0x3fd34413
 8006820:	08008555 	.word	0x08008555
 8006824:	0800856c 	.word	0x0800856c
 8006828:	7ff00000 	.word	0x7ff00000
 800682c:	08008551 	.word	0x08008551
 8006830:	08008548 	.word	0x08008548
 8006834:	08008525 	.word	0x08008525
 8006838:	3ff80000 	.word	0x3ff80000
 800683c:	080086c0 	.word	0x080086c0
 8006840:	080085c7 	.word	0x080085c7
 8006844:	2501      	movs	r5, #1
 8006846:	2300      	movs	r3, #0
 8006848:	9306      	str	r3, [sp, #24]
 800684a:	9508      	str	r5, [sp, #32]
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	2312      	movs	r3, #18
 8006858:	e7b0      	b.n	80067bc <_dtoa_r+0x26c>
 800685a:	2301      	movs	r3, #1
 800685c:	9308      	str	r3, [sp, #32]
 800685e:	e7f5      	b.n	800684c <_dtoa_r+0x2fc>
 8006860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006866:	e7b8      	b.n	80067da <_dtoa_r+0x28a>
 8006868:	3101      	adds	r1, #1
 800686a:	6041      	str	r1, [r0, #4]
 800686c:	0052      	lsls	r2, r2, #1
 800686e:	e7b8      	b.n	80067e2 <_dtoa_r+0x292>
 8006870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006872:	9a01      	ldr	r2, [sp, #4]
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	2b0e      	cmp	r3, #14
 800687a:	f200 809d 	bhi.w	80069b8 <_dtoa_r+0x468>
 800687e:	2d00      	cmp	r5, #0
 8006880:	f000 809a 	beq.w	80069b8 <_dtoa_r+0x468>
 8006884:	9b00      	ldr	r3, [sp, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	dd32      	ble.n	80068f0 <_dtoa_r+0x3a0>
 800688a:	4ab7      	ldr	r2, [pc, #732]	; (8006b68 <_dtoa_r+0x618>)
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006898:	9b00      	ldr	r3, [sp, #0]
 800689a:	05d8      	lsls	r0, r3, #23
 800689c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80068a0:	d516      	bpl.n	80068d0 <_dtoa_r+0x380>
 80068a2:	4bb2      	ldr	r3, [pc, #712]	; (8006b6c <_dtoa_r+0x61c>)
 80068a4:	ec51 0b19 	vmov	r0, r1, d9
 80068a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068ac:	f7f9 ffce 	bl	800084c <__aeabi_ddiv>
 80068b0:	f007 070f 	and.w	r7, r7, #15
 80068b4:	4682      	mov	sl, r0
 80068b6:	468b      	mov	fp, r1
 80068b8:	2503      	movs	r5, #3
 80068ba:	4eac      	ldr	r6, [pc, #688]	; (8006b6c <_dtoa_r+0x61c>)
 80068bc:	b957      	cbnz	r7, 80068d4 <_dtoa_r+0x384>
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	4650      	mov	r0, sl
 80068c4:	4659      	mov	r1, fp
 80068c6:	f7f9 ffc1 	bl	800084c <__aeabi_ddiv>
 80068ca:	4682      	mov	sl, r0
 80068cc:	468b      	mov	fp, r1
 80068ce:	e028      	b.n	8006922 <_dtoa_r+0x3d2>
 80068d0:	2502      	movs	r5, #2
 80068d2:	e7f2      	b.n	80068ba <_dtoa_r+0x36a>
 80068d4:	07f9      	lsls	r1, r7, #31
 80068d6:	d508      	bpl.n	80068ea <_dtoa_r+0x39a>
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068e0:	f7f9 fe8a 	bl	80005f8 <__aeabi_dmul>
 80068e4:	3501      	adds	r5, #1
 80068e6:	4680      	mov	r8, r0
 80068e8:	4689      	mov	r9, r1
 80068ea:	107f      	asrs	r7, r7, #1
 80068ec:	3608      	adds	r6, #8
 80068ee:	e7e5      	b.n	80068bc <_dtoa_r+0x36c>
 80068f0:	f000 809b 	beq.w	8006a2a <_dtoa_r+0x4da>
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	4f9d      	ldr	r7, [pc, #628]	; (8006b6c <_dtoa_r+0x61c>)
 80068f8:	425e      	negs	r6, r3
 80068fa:	4b9b      	ldr	r3, [pc, #620]	; (8006b68 <_dtoa_r+0x618>)
 80068fc:	f006 020f 	and.w	r2, r6, #15
 8006900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	ec51 0b19 	vmov	r0, r1, d9
 800690c:	f7f9 fe74 	bl	80005f8 <__aeabi_dmul>
 8006910:	1136      	asrs	r6, r6, #4
 8006912:	4682      	mov	sl, r0
 8006914:	468b      	mov	fp, r1
 8006916:	2300      	movs	r3, #0
 8006918:	2502      	movs	r5, #2
 800691a:	2e00      	cmp	r6, #0
 800691c:	d17a      	bne.n	8006a14 <_dtoa_r+0x4c4>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1d3      	bne.n	80068ca <_dtoa_r+0x37a>
 8006922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8082 	beq.w	8006a2e <_dtoa_r+0x4de>
 800692a:	4b91      	ldr	r3, [pc, #580]	; (8006b70 <_dtoa_r+0x620>)
 800692c:	2200      	movs	r2, #0
 800692e:	4650      	mov	r0, sl
 8006930:	4659      	mov	r1, fp
 8006932:	f7fa f8d3 	bl	8000adc <__aeabi_dcmplt>
 8006936:	2800      	cmp	r0, #0
 8006938:	d079      	beq.n	8006a2e <_dtoa_r+0x4de>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d076      	beq.n	8006a2e <_dtoa_r+0x4de>
 8006940:	9b02      	ldr	r3, [sp, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	dd36      	ble.n	80069b4 <_dtoa_r+0x464>
 8006946:	9b00      	ldr	r3, [sp, #0]
 8006948:	4650      	mov	r0, sl
 800694a:	4659      	mov	r1, fp
 800694c:	1e5f      	subs	r7, r3, #1
 800694e:	2200      	movs	r2, #0
 8006950:	4b88      	ldr	r3, [pc, #544]	; (8006b74 <_dtoa_r+0x624>)
 8006952:	f7f9 fe51 	bl	80005f8 <__aeabi_dmul>
 8006956:	9e02      	ldr	r6, [sp, #8]
 8006958:	4682      	mov	sl, r0
 800695a:	468b      	mov	fp, r1
 800695c:	3501      	adds	r5, #1
 800695e:	4628      	mov	r0, r5
 8006960:	f7f9 fde0 	bl	8000524 <__aeabi_i2d>
 8006964:	4652      	mov	r2, sl
 8006966:	465b      	mov	r3, fp
 8006968:	f7f9 fe46 	bl	80005f8 <__aeabi_dmul>
 800696c:	4b82      	ldr	r3, [pc, #520]	; (8006b78 <_dtoa_r+0x628>)
 800696e:	2200      	movs	r2, #0
 8006970:	f7f9 fc8c 	bl	800028c <__adddf3>
 8006974:	46d0      	mov	r8, sl
 8006976:	46d9      	mov	r9, fp
 8006978:	4682      	mov	sl, r0
 800697a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800697e:	2e00      	cmp	r6, #0
 8006980:	d158      	bne.n	8006a34 <_dtoa_r+0x4e4>
 8006982:	4b7e      	ldr	r3, [pc, #504]	; (8006b7c <_dtoa_r+0x62c>)
 8006984:	2200      	movs	r2, #0
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7f9 fc7d 	bl	8000288 <__aeabi_dsub>
 800698e:	4652      	mov	r2, sl
 8006990:	465b      	mov	r3, fp
 8006992:	4680      	mov	r8, r0
 8006994:	4689      	mov	r9, r1
 8006996:	f7fa f8bf 	bl	8000b18 <__aeabi_dcmpgt>
 800699a:	2800      	cmp	r0, #0
 800699c:	f040 8295 	bne.w	8006eca <_dtoa_r+0x97a>
 80069a0:	4652      	mov	r2, sl
 80069a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069a6:	4640      	mov	r0, r8
 80069a8:	4649      	mov	r1, r9
 80069aa:	f7fa f897 	bl	8000adc <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f040 8289 	bne.w	8006ec6 <_dtoa_r+0x976>
 80069b4:	ec5b ab19 	vmov	sl, fp, d9
 80069b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f2c0 8148 	blt.w	8006c50 <_dtoa_r+0x700>
 80069c0:	9a00      	ldr	r2, [sp, #0]
 80069c2:	2a0e      	cmp	r2, #14
 80069c4:	f300 8144 	bgt.w	8006c50 <_dtoa_r+0x700>
 80069c8:	4b67      	ldr	r3, [pc, #412]	; (8006b68 <_dtoa_r+0x618>)
 80069ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f280 80d5 	bge.w	8006b84 <_dtoa_r+0x634>
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f300 80d1 	bgt.w	8006b84 <_dtoa_r+0x634>
 80069e2:	f040 826f 	bne.w	8006ec4 <_dtoa_r+0x974>
 80069e6:	4b65      	ldr	r3, [pc, #404]	; (8006b7c <_dtoa_r+0x62c>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fe03 	bl	80005f8 <__aeabi_dmul>
 80069f2:	4652      	mov	r2, sl
 80069f4:	465b      	mov	r3, fp
 80069f6:	f7fa f885 	bl	8000b04 <__aeabi_dcmpge>
 80069fa:	9e03      	ldr	r6, [sp, #12]
 80069fc:	4637      	mov	r7, r6
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f040 8245 	bne.w	8006e8e <_dtoa_r+0x93e>
 8006a04:	9d01      	ldr	r5, [sp, #4]
 8006a06:	2331      	movs	r3, #49	; 0x31
 8006a08:	f805 3b01 	strb.w	r3, [r5], #1
 8006a0c:	9b00      	ldr	r3, [sp, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	e240      	b.n	8006e96 <_dtoa_r+0x946>
 8006a14:	07f2      	lsls	r2, r6, #31
 8006a16:	d505      	bpl.n	8006a24 <_dtoa_r+0x4d4>
 8006a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1c:	f7f9 fdec 	bl	80005f8 <__aeabi_dmul>
 8006a20:	3501      	adds	r5, #1
 8006a22:	2301      	movs	r3, #1
 8006a24:	1076      	asrs	r6, r6, #1
 8006a26:	3708      	adds	r7, #8
 8006a28:	e777      	b.n	800691a <_dtoa_r+0x3ca>
 8006a2a:	2502      	movs	r5, #2
 8006a2c:	e779      	b.n	8006922 <_dtoa_r+0x3d2>
 8006a2e:	9f00      	ldr	r7, [sp, #0]
 8006a30:	9e03      	ldr	r6, [sp, #12]
 8006a32:	e794      	b.n	800695e <_dtoa_r+0x40e>
 8006a34:	9901      	ldr	r1, [sp, #4]
 8006a36:	4b4c      	ldr	r3, [pc, #304]	; (8006b68 <_dtoa_r+0x618>)
 8006a38:	4431      	add	r1, r6
 8006a3a:	910d      	str	r1, [sp, #52]	; 0x34
 8006a3c:	9908      	ldr	r1, [sp, #32]
 8006a3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a46:	2900      	cmp	r1, #0
 8006a48:	d043      	beq.n	8006ad2 <_dtoa_r+0x582>
 8006a4a:	494d      	ldr	r1, [pc, #308]	; (8006b80 <_dtoa_r+0x630>)
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	f7f9 fefd 	bl	800084c <__aeabi_ddiv>
 8006a52:	4652      	mov	r2, sl
 8006a54:	465b      	mov	r3, fp
 8006a56:	f7f9 fc17 	bl	8000288 <__aeabi_dsub>
 8006a5a:	9d01      	ldr	r5, [sp, #4]
 8006a5c:	4682      	mov	sl, r0
 8006a5e:	468b      	mov	fp, r1
 8006a60:	4649      	mov	r1, r9
 8006a62:	4640      	mov	r0, r8
 8006a64:	f7fa f878 	bl	8000b58 <__aeabi_d2iz>
 8006a68:	4606      	mov	r6, r0
 8006a6a:	f7f9 fd5b 	bl	8000524 <__aeabi_i2d>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4640      	mov	r0, r8
 8006a74:	4649      	mov	r1, r9
 8006a76:	f7f9 fc07 	bl	8000288 <__aeabi_dsub>
 8006a7a:	3630      	adds	r6, #48	; 0x30
 8006a7c:	f805 6b01 	strb.w	r6, [r5], #1
 8006a80:	4652      	mov	r2, sl
 8006a82:	465b      	mov	r3, fp
 8006a84:	4680      	mov	r8, r0
 8006a86:	4689      	mov	r9, r1
 8006a88:	f7fa f828 	bl	8000adc <__aeabi_dcmplt>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d163      	bne.n	8006b58 <_dtoa_r+0x608>
 8006a90:	4642      	mov	r2, r8
 8006a92:	464b      	mov	r3, r9
 8006a94:	4936      	ldr	r1, [pc, #216]	; (8006b70 <_dtoa_r+0x620>)
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7f9 fbf6 	bl	8000288 <__aeabi_dsub>
 8006a9c:	4652      	mov	r2, sl
 8006a9e:	465b      	mov	r3, fp
 8006aa0:	f7fa f81c 	bl	8000adc <__aeabi_dcmplt>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f040 80b5 	bne.w	8006c14 <_dtoa_r+0x6c4>
 8006aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aac:	429d      	cmp	r5, r3
 8006aae:	d081      	beq.n	80069b4 <_dtoa_r+0x464>
 8006ab0:	4b30      	ldr	r3, [pc, #192]	; (8006b74 <_dtoa_r+0x624>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	4659      	mov	r1, fp
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	4b2d      	ldr	r3, [pc, #180]	; (8006b74 <_dtoa_r+0x624>)
 8006abe:	4682      	mov	sl, r0
 8006ac0:	468b      	mov	fp, r1
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f7f9 fd96 	bl	80005f8 <__aeabi_dmul>
 8006acc:	4680      	mov	r8, r0
 8006ace:	4689      	mov	r9, r1
 8006ad0:	e7c6      	b.n	8006a60 <_dtoa_r+0x510>
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	4659      	mov	r1, fp
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006adc:	9d01      	ldr	r5, [sp, #4]
 8006ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	468b      	mov	fp, r1
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	f7fa f836 	bl	8000b58 <__aeabi_d2iz>
 8006aec:	4606      	mov	r6, r0
 8006aee:	f7f9 fd19 	bl	8000524 <__aeabi_i2d>
 8006af2:	3630      	adds	r6, #48	; 0x30
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4640      	mov	r0, r8
 8006afa:	4649      	mov	r1, r9
 8006afc:	f7f9 fbc4 	bl	8000288 <__aeabi_dsub>
 8006b00:	f805 6b01 	strb.w	r6, [r5], #1
 8006b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b06:	429d      	cmp	r5, r3
 8006b08:	4680      	mov	r8, r0
 8006b0a:	4689      	mov	r9, r1
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	d124      	bne.n	8006b5c <_dtoa_r+0x60c>
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <_dtoa_r+0x630>)
 8006b14:	4650      	mov	r0, sl
 8006b16:	4659      	mov	r1, fp
 8006b18:	f7f9 fbb8 	bl	800028c <__adddf3>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	f7f9 fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d173      	bne.n	8006c14 <_dtoa_r+0x6c4>
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	465b      	mov	r3, fp
 8006b30:	4913      	ldr	r1, [pc, #76]	; (8006b80 <_dtoa_r+0x630>)
 8006b32:	2000      	movs	r0, #0
 8006b34:	f7f9 fba8 	bl	8000288 <__aeabi_dsub>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	4649      	mov	r1, r9
 8006b40:	f7f9 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f43f af35 	beq.w	80069b4 <_dtoa_r+0x464>
 8006b4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b4c:	1e6b      	subs	r3, r5, #1
 8006b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b54:	2b30      	cmp	r3, #48	; 0x30
 8006b56:	d0f8      	beq.n	8006b4a <_dtoa_r+0x5fa>
 8006b58:	9700      	str	r7, [sp, #0]
 8006b5a:	e049      	b.n	8006bf0 <_dtoa_r+0x6a0>
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <_dtoa_r+0x624>)
 8006b5e:	f7f9 fd4b 	bl	80005f8 <__aeabi_dmul>
 8006b62:	4680      	mov	r8, r0
 8006b64:	4689      	mov	r9, r1
 8006b66:	e7bd      	b.n	8006ae4 <_dtoa_r+0x594>
 8006b68:	080086c0 	.word	0x080086c0
 8006b6c:	08008698 	.word	0x08008698
 8006b70:	3ff00000 	.word	0x3ff00000
 8006b74:	40240000 	.word	0x40240000
 8006b78:	401c0000 	.word	0x401c0000
 8006b7c:	40140000 	.word	0x40140000
 8006b80:	3fe00000 	.word	0x3fe00000
 8006b84:	9d01      	ldr	r5, [sp, #4]
 8006b86:	4656      	mov	r6, sl
 8006b88:	465f      	mov	r7, fp
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	4630      	mov	r0, r6
 8006b90:	4639      	mov	r1, r7
 8006b92:	f7f9 fe5b 	bl	800084c <__aeabi_ddiv>
 8006b96:	f7f9 ffdf 	bl	8000b58 <__aeabi_d2iz>
 8006b9a:	4682      	mov	sl, r0
 8006b9c:	f7f9 fcc2 	bl	8000524 <__aeabi_i2d>
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	f7f9 fd28 	bl	80005f8 <__aeabi_dmul>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4630      	mov	r0, r6
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006bb4:	f7f9 fb68 	bl	8000288 <__aeabi_dsub>
 8006bb8:	f805 6b01 	strb.w	r6, [r5], #1
 8006bbc:	9e01      	ldr	r6, [sp, #4]
 8006bbe:	9f03      	ldr	r7, [sp, #12]
 8006bc0:	1bae      	subs	r6, r5, r6
 8006bc2:	42b7      	cmp	r7, r6
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	d135      	bne.n	8006c36 <_dtoa_r+0x6e6>
 8006bca:	f7f9 fb5f 	bl	800028c <__adddf3>
 8006bce:	4642      	mov	r2, r8
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	f7f9 ff9f 	bl	8000b18 <__aeabi_dcmpgt>
 8006bda:	b9d0      	cbnz	r0, 8006c12 <_dtoa_r+0x6c2>
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	4630      	mov	r0, r6
 8006be2:	4639      	mov	r1, r7
 8006be4:	f7f9 ff70 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be8:	b110      	cbz	r0, 8006bf0 <_dtoa_r+0x6a0>
 8006bea:	f01a 0f01 	tst.w	sl, #1
 8006bee:	d110      	bne.n	8006c12 <_dtoa_r+0x6c2>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	ee18 1a10 	vmov	r1, s16
 8006bf6:	f000 fd13 	bl	8007620 <_Bfree>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9800      	ldr	r0, [sp, #0]
 8006bfe:	702b      	strb	r3, [r5, #0]
 8006c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c02:	3001      	adds	r0, #1
 8006c04:	6018      	str	r0, [r3, #0]
 8006c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f43f acf1 	beq.w	80065f0 <_dtoa_r+0xa0>
 8006c0e:	601d      	str	r5, [r3, #0]
 8006c10:	e4ee      	b.n	80065f0 <_dtoa_r+0xa0>
 8006c12:	9f00      	ldr	r7, [sp, #0]
 8006c14:	462b      	mov	r3, r5
 8006c16:	461d      	mov	r5, r3
 8006c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c1c:	2a39      	cmp	r2, #57	; 0x39
 8006c1e:	d106      	bne.n	8006c2e <_dtoa_r+0x6de>
 8006c20:	9a01      	ldr	r2, [sp, #4]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d1f7      	bne.n	8006c16 <_dtoa_r+0x6c6>
 8006c26:	9901      	ldr	r1, [sp, #4]
 8006c28:	2230      	movs	r2, #48	; 0x30
 8006c2a:	3701      	adds	r7, #1
 8006c2c:	700a      	strb	r2, [r1, #0]
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	3201      	adds	r2, #1
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e790      	b.n	8006b58 <_dtoa_r+0x608>
 8006c36:	4ba6      	ldr	r3, [pc, #664]	; (8006ed0 <_dtoa_r+0x980>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f7f9 fcdd 	bl	80005f8 <__aeabi_dmul>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2300      	movs	r3, #0
 8006c42:	4606      	mov	r6, r0
 8006c44:	460f      	mov	r7, r1
 8006c46:	f7f9 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d09d      	beq.n	8006b8a <_dtoa_r+0x63a>
 8006c4e:	e7cf      	b.n	8006bf0 <_dtoa_r+0x6a0>
 8006c50:	9a08      	ldr	r2, [sp, #32]
 8006c52:	2a00      	cmp	r2, #0
 8006c54:	f000 80d7 	beq.w	8006e06 <_dtoa_r+0x8b6>
 8006c58:	9a06      	ldr	r2, [sp, #24]
 8006c5a:	2a01      	cmp	r2, #1
 8006c5c:	f300 80ba 	bgt.w	8006dd4 <_dtoa_r+0x884>
 8006c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	f000 80b2 	beq.w	8006dcc <_dtoa_r+0x87c>
 8006c68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c6c:	9e07      	ldr	r6, [sp, #28]
 8006c6e:	9d04      	ldr	r5, [sp, #16]
 8006c70:	9a04      	ldr	r2, [sp, #16]
 8006c72:	441a      	add	r2, r3
 8006c74:	9204      	str	r2, [sp, #16]
 8006c76:	9a05      	ldr	r2, [sp, #20]
 8006c78:	2101      	movs	r1, #1
 8006c7a:	441a      	add	r2, r3
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	9205      	str	r2, [sp, #20]
 8006c80:	f000 fd86 	bl	8007790 <__i2b>
 8006c84:	4607      	mov	r7, r0
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	dd0c      	ble.n	8006ca4 <_dtoa_r+0x754>
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dd09      	ble.n	8006ca4 <_dtoa_r+0x754>
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	9a04      	ldr	r2, [sp, #16]
 8006c94:	bfa8      	it	ge
 8006c96:	462b      	movge	r3, r5
 8006c98:	1ad2      	subs	r2, r2, r3
 8006c9a:	9204      	str	r2, [sp, #16]
 8006c9c:	9a05      	ldr	r2, [sp, #20]
 8006c9e:	1aed      	subs	r5, r5, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	9305      	str	r3, [sp, #20]
 8006ca4:	9b07      	ldr	r3, [sp, #28]
 8006ca6:	b31b      	cbz	r3, 8006cf0 <_dtoa_r+0x7a0>
 8006ca8:	9b08      	ldr	r3, [sp, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80af 	beq.w	8006e0e <_dtoa_r+0x8be>
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	dd13      	ble.n	8006cdc <_dtoa_r+0x78c>
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fe29 	bl	8007910 <__pow5mult>
 8006cbe:	ee18 2a10 	vmov	r2, s16
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 fd78 	bl	80077bc <__multiply>
 8006ccc:	ee18 1a10 	vmov	r1, s16
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fca4 	bl	8007620 <_Bfree>
 8006cd8:	ee08 8a10 	vmov	s16, r8
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	1b9a      	subs	r2, r3, r6
 8006ce0:	d006      	beq.n	8006cf0 <_dtoa_r+0x7a0>
 8006ce2:	ee18 1a10 	vmov	r1, s16
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 fe12 	bl	8007910 <__pow5mult>
 8006cec:	ee08 0a10 	vmov	s16, r0
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 fd4c 	bl	8007790 <__i2b>
 8006cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	f340 8088 	ble.w	8006e12 <_dtoa_r+0x8c2>
 8006d02:	461a      	mov	r2, r3
 8006d04:	4601      	mov	r1, r0
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fe02 	bl	8007910 <__pow5mult>
 8006d0c:	9b06      	ldr	r3, [sp, #24]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	4606      	mov	r6, r0
 8006d12:	f340 8081 	ble.w	8006e18 <_dtoa_r+0x8c8>
 8006d16:	f04f 0800 	mov.w	r8, #0
 8006d1a:	6933      	ldr	r3, [r6, #16]
 8006d1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d20:	6918      	ldr	r0, [r3, #16]
 8006d22:	f000 fce5 	bl	80076f0 <__hi0bits>
 8006d26:	f1c0 0020 	rsb	r0, r0, #32
 8006d2a:	9b05      	ldr	r3, [sp, #20]
 8006d2c:	4418      	add	r0, r3
 8006d2e:	f010 001f 	ands.w	r0, r0, #31
 8006d32:	f000 8092 	beq.w	8006e5a <_dtoa_r+0x90a>
 8006d36:	f1c0 0320 	rsb	r3, r0, #32
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	f340 808a 	ble.w	8006e54 <_dtoa_r+0x904>
 8006d40:	f1c0 001c 	rsb	r0, r0, #28
 8006d44:	9b04      	ldr	r3, [sp, #16]
 8006d46:	4403      	add	r3, r0
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	9b05      	ldr	r3, [sp, #20]
 8006d4c:	4403      	add	r3, r0
 8006d4e:	4405      	add	r5, r0
 8006d50:	9305      	str	r3, [sp, #20]
 8006d52:	9b04      	ldr	r3, [sp, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dd07      	ble.n	8006d68 <_dtoa_r+0x818>
 8006d58:	ee18 1a10 	vmov	r1, s16
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fe30 	bl	80079c4 <__lshift>
 8006d64:	ee08 0a10 	vmov	s16, r0
 8006d68:	9b05      	ldr	r3, [sp, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dd05      	ble.n	8006d7a <_dtoa_r+0x82a>
 8006d6e:	4631      	mov	r1, r6
 8006d70:	461a      	mov	r2, r3
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 fe26 	bl	80079c4 <__lshift>
 8006d78:	4606      	mov	r6, r0
 8006d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d06e      	beq.n	8006e5e <_dtoa_r+0x90e>
 8006d80:	ee18 0a10 	vmov	r0, s16
 8006d84:	4631      	mov	r1, r6
 8006d86:	f000 fe8d 	bl	8007aa4 <__mcmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	da67      	bge.n	8006e5e <_dtoa_r+0x90e>
 8006d8e:	9b00      	ldr	r3, [sp, #0]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	ee18 1a10 	vmov	r1, s16
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	220a      	movs	r2, #10
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 fc61 	bl	8007664 <__multadd>
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	ee08 0a10 	vmov	s16, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 81b1 	beq.w	8007110 <_dtoa_r+0xbc0>
 8006dae:	2300      	movs	r3, #0
 8006db0:	4639      	mov	r1, r7
 8006db2:	220a      	movs	r2, #10
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fc55 	bl	8007664 <__multadd>
 8006dba:	9b02      	ldr	r3, [sp, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	f300 808e 	bgt.w	8006ee0 <_dtoa_r+0x990>
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	dc51      	bgt.n	8006e6e <_dtoa_r+0x91e>
 8006dca:	e089      	b.n	8006ee0 <_dtoa_r+0x990>
 8006dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dd2:	e74b      	b.n	8006c6c <_dtoa_r+0x71c>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	1e5e      	subs	r6, r3, #1
 8006dd8:	9b07      	ldr	r3, [sp, #28]
 8006dda:	42b3      	cmp	r3, r6
 8006ddc:	bfbf      	itttt	lt
 8006dde:	9b07      	ldrlt	r3, [sp, #28]
 8006de0:	9607      	strlt	r6, [sp, #28]
 8006de2:	1af2      	sublt	r2, r6, r3
 8006de4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006de6:	bfb6      	itet	lt
 8006de8:	189b      	addlt	r3, r3, r2
 8006dea:	1b9e      	subge	r6, r3, r6
 8006dec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006dee:	9b03      	ldr	r3, [sp, #12]
 8006df0:	bfb8      	it	lt
 8006df2:	2600      	movlt	r6, #0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bfb7      	itett	lt
 8006df8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006dfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e00:	1a9d      	sublt	r5, r3, r2
 8006e02:	2300      	movlt	r3, #0
 8006e04:	e734      	b.n	8006c70 <_dtoa_r+0x720>
 8006e06:	9e07      	ldr	r6, [sp, #28]
 8006e08:	9d04      	ldr	r5, [sp, #16]
 8006e0a:	9f08      	ldr	r7, [sp, #32]
 8006e0c:	e73b      	b.n	8006c86 <_dtoa_r+0x736>
 8006e0e:	9a07      	ldr	r2, [sp, #28]
 8006e10:	e767      	b.n	8006ce2 <_dtoa_r+0x792>
 8006e12:	9b06      	ldr	r3, [sp, #24]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	dc18      	bgt.n	8006e4a <_dtoa_r+0x8fa>
 8006e18:	f1ba 0f00 	cmp.w	sl, #0
 8006e1c:	d115      	bne.n	8006e4a <_dtoa_r+0x8fa>
 8006e1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e22:	b993      	cbnz	r3, 8006e4a <_dtoa_r+0x8fa>
 8006e24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e28:	0d1b      	lsrs	r3, r3, #20
 8006e2a:	051b      	lsls	r3, r3, #20
 8006e2c:	b183      	cbz	r3, 8006e50 <_dtoa_r+0x900>
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	3301      	adds	r3, #1
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	9b05      	ldr	r3, [sp, #20]
 8006e36:	3301      	adds	r3, #1
 8006e38:	9305      	str	r3, [sp, #20]
 8006e3a:	f04f 0801 	mov.w	r8, #1
 8006e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f af6a 	bne.w	8006d1a <_dtoa_r+0x7ca>
 8006e46:	2001      	movs	r0, #1
 8006e48:	e76f      	b.n	8006d2a <_dtoa_r+0x7da>
 8006e4a:	f04f 0800 	mov.w	r8, #0
 8006e4e:	e7f6      	b.n	8006e3e <_dtoa_r+0x8ee>
 8006e50:	4698      	mov	r8, r3
 8006e52:	e7f4      	b.n	8006e3e <_dtoa_r+0x8ee>
 8006e54:	f43f af7d 	beq.w	8006d52 <_dtoa_r+0x802>
 8006e58:	4618      	mov	r0, r3
 8006e5a:	301c      	adds	r0, #28
 8006e5c:	e772      	b.n	8006d44 <_dtoa_r+0x7f4>
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dc37      	bgt.n	8006ed4 <_dtoa_r+0x984>
 8006e64:	9b06      	ldr	r3, [sp, #24]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	dd34      	ble.n	8006ed4 <_dtoa_r+0x984>
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	9302      	str	r3, [sp, #8]
 8006e6e:	9b02      	ldr	r3, [sp, #8]
 8006e70:	b96b      	cbnz	r3, 8006e8e <_dtoa_r+0x93e>
 8006e72:	4631      	mov	r1, r6
 8006e74:	2205      	movs	r2, #5
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 fbf4 	bl	8007664 <__multadd>
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	4606      	mov	r6, r0
 8006e80:	ee18 0a10 	vmov	r0, s16
 8006e84:	f000 fe0e 	bl	8007aa4 <__mcmp>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	f73f adbb 	bgt.w	8006a04 <_dtoa_r+0x4b4>
 8006e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e90:	9d01      	ldr	r5, [sp, #4]
 8006e92:	43db      	mvns	r3, r3
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	f04f 0800 	mov.w	r8, #0
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 fbbf 	bl	8007620 <_Bfree>
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	f43f aea4 	beq.w	8006bf0 <_dtoa_r+0x6a0>
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	d005      	beq.n	8006eba <_dtoa_r+0x96a>
 8006eae:	45b8      	cmp	r8, r7
 8006eb0:	d003      	beq.n	8006eba <_dtoa_r+0x96a>
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fbb3 	bl	8007620 <_Bfree>
 8006eba:	4639      	mov	r1, r7
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fbaf 	bl	8007620 <_Bfree>
 8006ec2:	e695      	b.n	8006bf0 <_dtoa_r+0x6a0>
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	4637      	mov	r7, r6
 8006ec8:	e7e1      	b.n	8006e8e <_dtoa_r+0x93e>
 8006eca:	9700      	str	r7, [sp, #0]
 8006ecc:	4637      	mov	r7, r6
 8006ece:	e599      	b.n	8006a04 <_dtoa_r+0x4b4>
 8006ed0:	40240000 	.word	0x40240000
 8006ed4:	9b08      	ldr	r3, [sp, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 80ca 	beq.w	8007070 <_dtoa_r+0xb20>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	9302      	str	r3, [sp, #8]
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	dd05      	ble.n	8006ef0 <_dtoa_r+0x9a0>
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 fd6b 	bl	80079c4 <__lshift>
 8006eee:	4607      	mov	r7, r0
 8006ef0:	f1b8 0f00 	cmp.w	r8, #0
 8006ef4:	d05b      	beq.n	8006fae <_dtoa_r+0xa5e>
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fb51 	bl	80075a0 <_Balloc>
 8006efe:	4605      	mov	r5, r0
 8006f00:	b928      	cbnz	r0, 8006f0e <_dtoa_r+0x9be>
 8006f02:	4b87      	ldr	r3, [pc, #540]	; (8007120 <_dtoa_r+0xbd0>)
 8006f04:	4602      	mov	r2, r0
 8006f06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f0a:	f7ff bb3b 	b.w	8006584 <_dtoa_r+0x34>
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	3202      	adds	r2, #2
 8006f12:	0092      	lsls	r2, r2, #2
 8006f14:	f107 010c 	add.w	r1, r7, #12
 8006f18:	300c      	adds	r0, #12
 8006f1a:	f000 fb33 	bl	8007584 <memcpy>
 8006f1e:	2201      	movs	r2, #1
 8006f20:	4629      	mov	r1, r5
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 fd4e 	bl	80079c4 <__lshift>
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	f103 0901 	add.w	r9, r3, #1
 8006f2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f32:	4413      	add	r3, r2
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	f00a 0301 	and.w	r3, sl, #1
 8006f3a:	46b8      	mov	r8, r7
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	4607      	mov	r7, r0
 8006f40:	4631      	mov	r1, r6
 8006f42:	ee18 0a10 	vmov	r0, s16
 8006f46:	f7ff fa75 	bl	8006434 <quorem>
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	9002      	str	r0, [sp, #8]
 8006f4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f52:	ee18 0a10 	vmov	r0, s16
 8006f56:	f000 fda5 	bl	8007aa4 <__mcmp>
 8006f5a:	463a      	mov	r2, r7
 8006f5c:	9003      	str	r0, [sp, #12]
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fdbb 	bl	8007adc <__mdiff>
 8006f66:	68c2      	ldr	r2, [r0, #12]
 8006f68:	f109 3bff 	add.w	fp, r9, #4294967295
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	bb02      	cbnz	r2, 8006fb2 <_dtoa_r+0xa62>
 8006f70:	4601      	mov	r1, r0
 8006f72:	ee18 0a10 	vmov	r0, s16
 8006f76:	f000 fd95 	bl	8007aa4 <__mcmp>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4620      	mov	r0, r4
 8006f80:	9207      	str	r2, [sp, #28]
 8006f82:	f000 fb4d 	bl	8007620 <_Bfree>
 8006f86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f8a:	ea43 0102 	orr.w	r1, r3, r2
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	430b      	orrs	r3, r1
 8006f92:	464d      	mov	r5, r9
 8006f94:	d10f      	bne.n	8006fb6 <_dtoa_r+0xa66>
 8006f96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f9a:	d02a      	beq.n	8006ff2 <_dtoa_r+0xaa2>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	dd02      	ble.n	8006fa8 <_dtoa_r+0xa58>
 8006fa2:	9b02      	ldr	r3, [sp, #8]
 8006fa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006fa8:	f88b a000 	strb.w	sl, [fp]
 8006fac:	e775      	b.n	8006e9a <_dtoa_r+0x94a>
 8006fae:	4638      	mov	r0, r7
 8006fb0:	e7ba      	b.n	8006f28 <_dtoa_r+0x9d8>
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	e7e2      	b.n	8006f7c <_dtoa_r+0xa2c>
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	db04      	blt.n	8006fc6 <_dtoa_r+0xa76>
 8006fbc:	9906      	ldr	r1, [sp, #24]
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	9904      	ldr	r1, [sp, #16]
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	d122      	bne.n	800700c <_dtoa_r+0xabc>
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	ddee      	ble.n	8006fa8 <_dtoa_r+0xa58>
 8006fca:	ee18 1a10 	vmov	r1, s16
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fcf7 	bl	80079c4 <__lshift>
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	ee08 0a10 	vmov	s16, r0
 8006fdc:	f000 fd62 	bl	8007aa4 <__mcmp>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	dc03      	bgt.n	8006fec <_dtoa_r+0xa9c>
 8006fe4:	d1e0      	bne.n	8006fa8 <_dtoa_r+0xa58>
 8006fe6:	f01a 0f01 	tst.w	sl, #1
 8006fea:	d0dd      	beq.n	8006fa8 <_dtoa_r+0xa58>
 8006fec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ff0:	d1d7      	bne.n	8006fa2 <_dtoa_r+0xa52>
 8006ff2:	2339      	movs	r3, #57	; 0x39
 8006ff4:	f88b 3000 	strb.w	r3, [fp]
 8006ff8:	462b      	mov	r3, r5
 8006ffa:	461d      	mov	r5, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007002:	2a39      	cmp	r2, #57	; 0x39
 8007004:	d071      	beq.n	80070ea <_dtoa_r+0xb9a>
 8007006:	3201      	adds	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	e746      	b.n	8006e9a <_dtoa_r+0x94a>
 800700c:	2a00      	cmp	r2, #0
 800700e:	dd07      	ble.n	8007020 <_dtoa_r+0xad0>
 8007010:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007014:	d0ed      	beq.n	8006ff2 <_dtoa_r+0xaa2>
 8007016:	f10a 0301 	add.w	r3, sl, #1
 800701a:	f88b 3000 	strb.w	r3, [fp]
 800701e:	e73c      	b.n	8006e9a <_dtoa_r+0x94a>
 8007020:	9b05      	ldr	r3, [sp, #20]
 8007022:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007026:	4599      	cmp	r9, r3
 8007028:	d047      	beq.n	80070ba <_dtoa_r+0xb6a>
 800702a:	ee18 1a10 	vmov	r1, s16
 800702e:	2300      	movs	r3, #0
 8007030:	220a      	movs	r2, #10
 8007032:	4620      	mov	r0, r4
 8007034:	f000 fb16 	bl	8007664 <__multadd>
 8007038:	45b8      	cmp	r8, r7
 800703a:	ee08 0a10 	vmov	s16, r0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	f04f 020a 	mov.w	r2, #10
 8007046:	4641      	mov	r1, r8
 8007048:	4620      	mov	r0, r4
 800704a:	d106      	bne.n	800705a <_dtoa_r+0xb0a>
 800704c:	f000 fb0a 	bl	8007664 <__multadd>
 8007050:	4680      	mov	r8, r0
 8007052:	4607      	mov	r7, r0
 8007054:	f109 0901 	add.w	r9, r9, #1
 8007058:	e772      	b.n	8006f40 <_dtoa_r+0x9f0>
 800705a:	f000 fb03 	bl	8007664 <__multadd>
 800705e:	4639      	mov	r1, r7
 8007060:	4680      	mov	r8, r0
 8007062:	2300      	movs	r3, #0
 8007064:	220a      	movs	r2, #10
 8007066:	4620      	mov	r0, r4
 8007068:	f000 fafc 	bl	8007664 <__multadd>
 800706c:	4607      	mov	r7, r0
 800706e:	e7f1      	b.n	8007054 <_dtoa_r+0xb04>
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	9302      	str	r3, [sp, #8]
 8007074:	9d01      	ldr	r5, [sp, #4]
 8007076:	ee18 0a10 	vmov	r0, s16
 800707a:	4631      	mov	r1, r6
 800707c:	f7ff f9da 	bl	8006434 <quorem>
 8007080:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	f805 ab01 	strb.w	sl, [r5], #1
 800708a:	1aea      	subs	r2, r5, r3
 800708c:	9b02      	ldr	r3, [sp, #8]
 800708e:	4293      	cmp	r3, r2
 8007090:	dd09      	ble.n	80070a6 <_dtoa_r+0xb56>
 8007092:	ee18 1a10 	vmov	r1, s16
 8007096:	2300      	movs	r3, #0
 8007098:	220a      	movs	r2, #10
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fae2 	bl	8007664 <__multadd>
 80070a0:	ee08 0a10 	vmov	s16, r0
 80070a4:	e7e7      	b.n	8007076 <_dtoa_r+0xb26>
 80070a6:	9b02      	ldr	r3, [sp, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bfc8      	it	gt
 80070ac:	461d      	movgt	r5, r3
 80070ae:	9b01      	ldr	r3, [sp, #4]
 80070b0:	bfd8      	it	le
 80070b2:	2501      	movle	r5, #1
 80070b4:	441d      	add	r5, r3
 80070b6:	f04f 0800 	mov.w	r8, #0
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	2201      	movs	r2, #1
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fc7f 	bl	80079c4 <__lshift>
 80070c6:	4631      	mov	r1, r6
 80070c8:	ee08 0a10 	vmov	s16, r0
 80070cc:	f000 fcea 	bl	8007aa4 <__mcmp>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	dc91      	bgt.n	8006ff8 <_dtoa_r+0xaa8>
 80070d4:	d102      	bne.n	80070dc <_dtoa_r+0xb8c>
 80070d6:	f01a 0f01 	tst.w	sl, #1
 80070da:	d18d      	bne.n	8006ff8 <_dtoa_r+0xaa8>
 80070dc:	462b      	mov	r3, r5
 80070de:	461d      	mov	r5, r3
 80070e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070e4:	2a30      	cmp	r2, #48	; 0x30
 80070e6:	d0fa      	beq.n	80070de <_dtoa_r+0xb8e>
 80070e8:	e6d7      	b.n	8006e9a <_dtoa_r+0x94a>
 80070ea:	9a01      	ldr	r2, [sp, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d184      	bne.n	8006ffa <_dtoa_r+0xaaa>
 80070f0:	9b00      	ldr	r3, [sp, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	2331      	movs	r3, #49	; 0x31
 80070f8:	7013      	strb	r3, [r2, #0]
 80070fa:	e6ce      	b.n	8006e9a <_dtoa_r+0x94a>
 80070fc:	4b09      	ldr	r3, [pc, #36]	; (8007124 <_dtoa_r+0xbd4>)
 80070fe:	f7ff ba95 	b.w	800662c <_dtoa_r+0xdc>
 8007102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007104:	2b00      	cmp	r3, #0
 8007106:	f47f aa6e 	bne.w	80065e6 <_dtoa_r+0x96>
 800710a:	4b07      	ldr	r3, [pc, #28]	; (8007128 <_dtoa_r+0xbd8>)
 800710c:	f7ff ba8e 	b.w	800662c <_dtoa_r+0xdc>
 8007110:	9b02      	ldr	r3, [sp, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	dcae      	bgt.n	8007074 <_dtoa_r+0xb24>
 8007116:	9b06      	ldr	r3, [sp, #24]
 8007118:	2b02      	cmp	r3, #2
 800711a:	f73f aea8 	bgt.w	8006e6e <_dtoa_r+0x91e>
 800711e:	e7a9      	b.n	8007074 <_dtoa_r+0xb24>
 8007120:	080085c7 	.word	0x080085c7
 8007124:	08008524 	.word	0x08008524
 8007128:	08008548 	.word	0x08008548

0800712c <__sflush_r>:
 800712c:	898a      	ldrh	r2, [r1, #12]
 800712e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007132:	4605      	mov	r5, r0
 8007134:	0710      	lsls	r0, r2, #28
 8007136:	460c      	mov	r4, r1
 8007138:	d458      	bmi.n	80071ec <__sflush_r+0xc0>
 800713a:	684b      	ldr	r3, [r1, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	dc05      	bgt.n	800714c <__sflush_r+0x20>
 8007140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc02      	bgt.n	800714c <__sflush_r+0x20>
 8007146:	2000      	movs	r0, #0
 8007148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800714e:	2e00      	cmp	r6, #0
 8007150:	d0f9      	beq.n	8007146 <__sflush_r+0x1a>
 8007152:	2300      	movs	r3, #0
 8007154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007158:	682f      	ldr	r7, [r5, #0]
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	d032      	beq.n	80071c4 <__sflush_r+0x98>
 800715e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	075a      	lsls	r2, r3, #29
 8007164:	d505      	bpl.n	8007172 <__sflush_r+0x46>
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	1ac0      	subs	r0, r0, r3
 800716a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800716c:	b10b      	cbz	r3, 8007172 <__sflush_r+0x46>
 800716e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007170:	1ac0      	subs	r0, r0, r3
 8007172:	2300      	movs	r3, #0
 8007174:	4602      	mov	r2, r0
 8007176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007178:	6a21      	ldr	r1, [r4, #32]
 800717a:	4628      	mov	r0, r5
 800717c:	47b0      	blx	r6
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	d106      	bne.n	8007192 <__sflush_r+0x66>
 8007184:	6829      	ldr	r1, [r5, #0]
 8007186:	291d      	cmp	r1, #29
 8007188:	d82c      	bhi.n	80071e4 <__sflush_r+0xb8>
 800718a:	4a2a      	ldr	r2, [pc, #168]	; (8007234 <__sflush_r+0x108>)
 800718c:	40ca      	lsrs	r2, r1
 800718e:	07d6      	lsls	r6, r2, #31
 8007190:	d528      	bpl.n	80071e4 <__sflush_r+0xb8>
 8007192:	2200      	movs	r2, #0
 8007194:	6062      	str	r2, [r4, #4]
 8007196:	04d9      	lsls	r1, r3, #19
 8007198:	6922      	ldr	r2, [r4, #16]
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	d504      	bpl.n	80071a8 <__sflush_r+0x7c>
 800719e:	1c42      	adds	r2, r0, #1
 80071a0:	d101      	bne.n	80071a6 <__sflush_r+0x7a>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	b903      	cbnz	r3, 80071a8 <__sflush_r+0x7c>
 80071a6:	6560      	str	r0, [r4, #84]	; 0x54
 80071a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071aa:	602f      	str	r7, [r5, #0]
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d0ca      	beq.n	8007146 <__sflush_r+0x1a>
 80071b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b4:	4299      	cmp	r1, r3
 80071b6:	d002      	beq.n	80071be <__sflush_r+0x92>
 80071b8:	4628      	mov	r0, r5
 80071ba:	f000 fd8b 	bl	8007cd4 <_free_r>
 80071be:	2000      	movs	r0, #0
 80071c0:	6360      	str	r0, [r4, #52]	; 0x34
 80071c2:	e7c1      	b.n	8007148 <__sflush_r+0x1c>
 80071c4:	6a21      	ldr	r1, [r4, #32]
 80071c6:	2301      	movs	r3, #1
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b0      	blx	r6
 80071cc:	1c41      	adds	r1, r0, #1
 80071ce:	d1c7      	bne.n	8007160 <__sflush_r+0x34>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c4      	beq.n	8007160 <__sflush_r+0x34>
 80071d6:	2b1d      	cmp	r3, #29
 80071d8:	d001      	beq.n	80071de <__sflush_r+0xb2>
 80071da:	2b16      	cmp	r3, #22
 80071dc:	d101      	bne.n	80071e2 <__sflush_r+0xb6>
 80071de:	602f      	str	r7, [r5, #0]
 80071e0:	e7b1      	b.n	8007146 <__sflush_r+0x1a>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	e7ad      	b.n	8007148 <__sflush_r+0x1c>
 80071ec:	690f      	ldr	r7, [r1, #16]
 80071ee:	2f00      	cmp	r7, #0
 80071f0:	d0a9      	beq.n	8007146 <__sflush_r+0x1a>
 80071f2:	0793      	lsls	r3, r2, #30
 80071f4:	680e      	ldr	r6, [r1, #0]
 80071f6:	bf08      	it	eq
 80071f8:	694b      	ldreq	r3, [r1, #20]
 80071fa:	600f      	str	r7, [r1, #0]
 80071fc:	bf18      	it	ne
 80071fe:	2300      	movne	r3, #0
 8007200:	eba6 0807 	sub.w	r8, r6, r7
 8007204:	608b      	str	r3, [r1, #8]
 8007206:	f1b8 0f00 	cmp.w	r8, #0
 800720a:	dd9c      	ble.n	8007146 <__sflush_r+0x1a>
 800720c:	6a21      	ldr	r1, [r4, #32]
 800720e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007210:	4643      	mov	r3, r8
 8007212:	463a      	mov	r2, r7
 8007214:	4628      	mov	r0, r5
 8007216:	47b0      	blx	r6
 8007218:	2800      	cmp	r0, #0
 800721a:	dc06      	bgt.n	800722a <__sflush_r+0xfe>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	e78e      	b.n	8007148 <__sflush_r+0x1c>
 800722a:	4407      	add	r7, r0
 800722c:	eba8 0800 	sub.w	r8, r8, r0
 8007230:	e7e9      	b.n	8007206 <__sflush_r+0xda>
 8007232:	bf00      	nop
 8007234:	20400001 	.word	0x20400001

08007238 <_fflush_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	b913      	cbnz	r3, 8007248 <_fflush_r+0x10>
 8007242:	2500      	movs	r5, #0
 8007244:	4628      	mov	r0, r5
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	b118      	cbz	r0, 8007252 <_fflush_r+0x1a>
 800724a:	6983      	ldr	r3, [r0, #24]
 800724c:	b90b      	cbnz	r3, 8007252 <_fflush_r+0x1a>
 800724e:	f000 f887 	bl	8007360 <__sinit>
 8007252:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <_fflush_r+0x6c>)
 8007254:	429c      	cmp	r4, r3
 8007256:	d11b      	bne.n	8007290 <_fflush_r+0x58>
 8007258:	686c      	ldr	r4, [r5, #4]
 800725a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0ef      	beq.n	8007242 <_fflush_r+0xa>
 8007262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007264:	07d0      	lsls	r0, r2, #31
 8007266:	d404      	bmi.n	8007272 <_fflush_r+0x3a>
 8007268:	0599      	lsls	r1, r3, #22
 800726a:	d402      	bmi.n	8007272 <_fflush_r+0x3a>
 800726c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800726e:	f000 f91a 	bl	80074a6 <__retarget_lock_acquire_recursive>
 8007272:	4628      	mov	r0, r5
 8007274:	4621      	mov	r1, r4
 8007276:	f7ff ff59 	bl	800712c <__sflush_r>
 800727a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800727c:	07da      	lsls	r2, r3, #31
 800727e:	4605      	mov	r5, r0
 8007280:	d4e0      	bmi.n	8007244 <_fflush_r+0xc>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	059b      	lsls	r3, r3, #22
 8007286:	d4dd      	bmi.n	8007244 <_fflush_r+0xc>
 8007288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728a:	f000 f90d 	bl	80074a8 <__retarget_lock_release_recursive>
 800728e:	e7d9      	b.n	8007244 <_fflush_r+0xc>
 8007290:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <_fflush_r+0x70>)
 8007292:	429c      	cmp	r4, r3
 8007294:	d101      	bne.n	800729a <_fflush_r+0x62>
 8007296:	68ac      	ldr	r4, [r5, #8]
 8007298:	e7df      	b.n	800725a <_fflush_r+0x22>
 800729a:	4b04      	ldr	r3, [pc, #16]	; (80072ac <_fflush_r+0x74>)
 800729c:	429c      	cmp	r4, r3
 800729e:	bf08      	it	eq
 80072a0:	68ec      	ldreq	r4, [r5, #12]
 80072a2:	e7da      	b.n	800725a <_fflush_r+0x22>
 80072a4:	080085f8 	.word	0x080085f8
 80072a8:	08008618 	.word	0x08008618
 80072ac:	080085d8 	.word	0x080085d8

080072b0 <std>:
 80072b0:	2300      	movs	r3, #0
 80072b2:	b510      	push	{r4, lr}
 80072b4:	4604      	mov	r4, r0
 80072b6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072be:	6083      	str	r3, [r0, #8]
 80072c0:	8181      	strh	r1, [r0, #12]
 80072c2:	6643      	str	r3, [r0, #100]	; 0x64
 80072c4:	81c2      	strh	r2, [r0, #14]
 80072c6:	6183      	str	r3, [r0, #24]
 80072c8:	4619      	mov	r1, r3
 80072ca:	2208      	movs	r2, #8
 80072cc:	305c      	adds	r0, #92	; 0x5c
 80072ce:	f7fe fadb 	bl	8005888 <memset>
 80072d2:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <std+0x38>)
 80072d4:	6263      	str	r3, [r4, #36]	; 0x24
 80072d6:	4b05      	ldr	r3, [pc, #20]	; (80072ec <std+0x3c>)
 80072d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <std+0x40>)
 80072dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072de:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <std+0x44>)
 80072e0:	6224      	str	r4, [r4, #32]
 80072e2:	6323      	str	r3, [r4, #48]	; 0x30
 80072e4:	bd10      	pop	{r4, pc}
 80072e6:	bf00      	nop
 80072e8:	080081f9 	.word	0x080081f9
 80072ec:	0800821b 	.word	0x0800821b
 80072f0:	08008253 	.word	0x08008253
 80072f4:	08008277 	.word	0x08008277

080072f8 <_cleanup_r>:
 80072f8:	4901      	ldr	r1, [pc, #4]	; (8007300 <_cleanup_r+0x8>)
 80072fa:	f000 b8af 	b.w	800745c <_fwalk_reent>
 80072fe:	bf00      	nop
 8007300:	08007239 	.word	0x08007239

08007304 <__sfmoreglue>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	2268      	movs	r2, #104	; 0x68
 8007308:	1e4d      	subs	r5, r1, #1
 800730a:	4355      	muls	r5, r2
 800730c:	460e      	mov	r6, r1
 800730e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007312:	f000 fd4b 	bl	8007dac <_malloc_r>
 8007316:	4604      	mov	r4, r0
 8007318:	b140      	cbz	r0, 800732c <__sfmoreglue+0x28>
 800731a:	2100      	movs	r1, #0
 800731c:	e9c0 1600 	strd	r1, r6, [r0]
 8007320:	300c      	adds	r0, #12
 8007322:	60a0      	str	r0, [r4, #8]
 8007324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007328:	f7fe faae 	bl	8005888 <memset>
 800732c:	4620      	mov	r0, r4
 800732e:	bd70      	pop	{r4, r5, r6, pc}

08007330 <__sfp_lock_acquire>:
 8007330:	4801      	ldr	r0, [pc, #4]	; (8007338 <__sfp_lock_acquire+0x8>)
 8007332:	f000 b8b8 	b.w	80074a6 <__retarget_lock_acquire_recursive>
 8007336:	bf00      	nop
 8007338:	20000475 	.word	0x20000475

0800733c <__sfp_lock_release>:
 800733c:	4801      	ldr	r0, [pc, #4]	; (8007344 <__sfp_lock_release+0x8>)
 800733e:	f000 b8b3 	b.w	80074a8 <__retarget_lock_release_recursive>
 8007342:	bf00      	nop
 8007344:	20000475 	.word	0x20000475

08007348 <__sinit_lock_acquire>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__sinit_lock_acquire+0x8>)
 800734a:	f000 b8ac 	b.w	80074a6 <__retarget_lock_acquire_recursive>
 800734e:	bf00      	nop
 8007350:	20000476 	.word	0x20000476

08007354 <__sinit_lock_release>:
 8007354:	4801      	ldr	r0, [pc, #4]	; (800735c <__sinit_lock_release+0x8>)
 8007356:	f000 b8a7 	b.w	80074a8 <__retarget_lock_release_recursive>
 800735a:	bf00      	nop
 800735c:	20000476 	.word	0x20000476

08007360 <__sinit>:
 8007360:	b510      	push	{r4, lr}
 8007362:	4604      	mov	r4, r0
 8007364:	f7ff fff0 	bl	8007348 <__sinit_lock_acquire>
 8007368:	69a3      	ldr	r3, [r4, #24]
 800736a:	b11b      	cbz	r3, 8007374 <__sinit+0x14>
 800736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007370:	f7ff bff0 	b.w	8007354 <__sinit_lock_release>
 8007374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007378:	6523      	str	r3, [r4, #80]	; 0x50
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <__sinit+0x68>)
 800737c:	4a13      	ldr	r2, [pc, #76]	; (80073cc <__sinit+0x6c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	62a2      	str	r2, [r4, #40]	; 0x28
 8007382:	42a3      	cmp	r3, r4
 8007384:	bf04      	itt	eq
 8007386:	2301      	moveq	r3, #1
 8007388:	61a3      	streq	r3, [r4, #24]
 800738a:	4620      	mov	r0, r4
 800738c:	f000 f820 	bl	80073d0 <__sfp>
 8007390:	6060      	str	r0, [r4, #4]
 8007392:	4620      	mov	r0, r4
 8007394:	f000 f81c 	bl	80073d0 <__sfp>
 8007398:	60a0      	str	r0, [r4, #8]
 800739a:	4620      	mov	r0, r4
 800739c:	f000 f818 	bl	80073d0 <__sfp>
 80073a0:	2200      	movs	r2, #0
 80073a2:	60e0      	str	r0, [r4, #12]
 80073a4:	2104      	movs	r1, #4
 80073a6:	6860      	ldr	r0, [r4, #4]
 80073a8:	f7ff ff82 	bl	80072b0 <std>
 80073ac:	68a0      	ldr	r0, [r4, #8]
 80073ae:	2201      	movs	r2, #1
 80073b0:	2109      	movs	r1, #9
 80073b2:	f7ff ff7d 	bl	80072b0 <std>
 80073b6:	68e0      	ldr	r0, [r4, #12]
 80073b8:	2202      	movs	r2, #2
 80073ba:	2112      	movs	r1, #18
 80073bc:	f7ff ff78 	bl	80072b0 <std>
 80073c0:	2301      	movs	r3, #1
 80073c2:	61a3      	str	r3, [r4, #24]
 80073c4:	e7d2      	b.n	800736c <__sinit+0xc>
 80073c6:	bf00      	nop
 80073c8:	08008510 	.word	0x08008510
 80073cc:	080072f9 	.word	0x080072f9

080073d0 <__sfp>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	4607      	mov	r7, r0
 80073d4:	f7ff ffac 	bl	8007330 <__sfp_lock_acquire>
 80073d8:	4b1e      	ldr	r3, [pc, #120]	; (8007454 <__sfp+0x84>)
 80073da:	681e      	ldr	r6, [r3, #0]
 80073dc:	69b3      	ldr	r3, [r6, #24]
 80073de:	b913      	cbnz	r3, 80073e6 <__sfp+0x16>
 80073e0:	4630      	mov	r0, r6
 80073e2:	f7ff ffbd 	bl	8007360 <__sinit>
 80073e6:	3648      	adds	r6, #72	; 0x48
 80073e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	d503      	bpl.n	80073f8 <__sfp+0x28>
 80073f0:	6833      	ldr	r3, [r6, #0]
 80073f2:	b30b      	cbz	r3, 8007438 <__sfp+0x68>
 80073f4:	6836      	ldr	r6, [r6, #0]
 80073f6:	e7f7      	b.n	80073e8 <__sfp+0x18>
 80073f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073fc:	b9d5      	cbnz	r5, 8007434 <__sfp+0x64>
 80073fe:	4b16      	ldr	r3, [pc, #88]	; (8007458 <__sfp+0x88>)
 8007400:	60e3      	str	r3, [r4, #12]
 8007402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007406:	6665      	str	r5, [r4, #100]	; 0x64
 8007408:	f000 f84c 	bl	80074a4 <__retarget_lock_init_recursive>
 800740c:	f7ff ff96 	bl	800733c <__sfp_lock_release>
 8007410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007418:	6025      	str	r5, [r4, #0]
 800741a:	61a5      	str	r5, [r4, #24]
 800741c:	2208      	movs	r2, #8
 800741e:	4629      	mov	r1, r5
 8007420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007424:	f7fe fa30 	bl	8005888 <memset>
 8007428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800742c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007430:	4620      	mov	r0, r4
 8007432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007434:	3468      	adds	r4, #104	; 0x68
 8007436:	e7d9      	b.n	80073ec <__sfp+0x1c>
 8007438:	2104      	movs	r1, #4
 800743a:	4638      	mov	r0, r7
 800743c:	f7ff ff62 	bl	8007304 <__sfmoreglue>
 8007440:	4604      	mov	r4, r0
 8007442:	6030      	str	r0, [r6, #0]
 8007444:	2800      	cmp	r0, #0
 8007446:	d1d5      	bne.n	80073f4 <__sfp+0x24>
 8007448:	f7ff ff78 	bl	800733c <__sfp_lock_release>
 800744c:	230c      	movs	r3, #12
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	e7ee      	b.n	8007430 <__sfp+0x60>
 8007452:	bf00      	nop
 8007454:	08008510 	.word	0x08008510
 8007458:	ffff0001 	.word	0xffff0001

0800745c <_fwalk_reent>:
 800745c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007460:	4606      	mov	r6, r0
 8007462:	4688      	mov	r8, r1
 8007464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007468:	2700      	movs	r7, #0
 800746a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800746e:	f1b9 0901 	subs.w	r9, r9, #1
 8007472:	d505      	bpl.n	8007480 <_fwalk_reent+0x24>
 8007474:	6824      	ldr	r4, [r4, #0]
 8007476:	2c00      	cmp	r4, #0
 8007478:	d1f7      	bne.n	800746a <_fwalk_reent+0xe>
 800747a:	4638      	mov	r0, r7
 800747c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007480:	89ab      	ldrh	r3, [r5, #12]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d907      	bls.n	8007496 <_fwalk_reent+0x3a>
 8007486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800748a:	3301      	adds	r3, #1
 800748c:	d003      	beq.n	8007496 <_fwalk_reent+0x3a>
 800748e:	4629      	mov	r1, r5
 8007490:	4630      	mov	r0, r6
 8007492:	47c0      	blx	r8
 8007494:	4307      	orrs	r7, r0
 8007496:	3568      	adds	r5, #104	; 0x68
 8007498:	e7e9      	b.n	800746e <_fwalk_reent+0x12>
	...

0800749c <_localeconv_r>:
 800749c:	4800      	ldr	r0, [pc, #0]	; (80074a0 <_localeconv_r+0x4>)
 800749e:	4770      	bx	lr
 80074a0:	20000160 	.word	0x20000160

080074a4 <__retarget_lock_init_recursive>:
 80074a4:	4770      	bx	lr

080074a6 <__retarget_lock_acquire_recursive>:
 80074a6:	4770      	bx	lr

080074a8 <__retarget_lock_release_recursive>:
 80074a8:	4770      	bx	lr

080074aa <__swhatbuf_r>:
 80074aa:	b570      	push	{r4, r5, r6, lr}
 80074ac:	460e      	mov	r6, r1
 80074ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b2:	2900      	cmp	r1, #0
 80074b4:	b096      	sub	sp, #88	; 0x58
 80074b6:	4614      	mov	r4, r2
 80074b8:	461d      	mov	r5, r3
 80074ba:	da08      	bge.n	80074ce <__swhatbuf_r+0x24>
 80074bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	061a      	lsls	r2, r3, #24
 80074c6:	d410      	bmi.n	80074ea <__swhatbuf_r+0x40>
 80074c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074cc:	e00e      	b.n	80074ec <__swhatbuf_r+0x42>
 80074ce:	466a      	mov	r2, sp
 80074d0:	f000 ff28 	bl	8008324 <_fstat_r>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	dbf1      	blt.n	80074bc <__swhatbuf_r+0x12>
 80074d8:	9a01      	ldr	r2, [sp, #4]
 80074da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074e2:	425a      	negs	r2, r3
 80074e4:	415a      	adcs	r2, r3
 80074e6:	602a      	str	r2, [r5, #0]
 80074e8:	e7ee      	b.n	80074c8 <__swhatbuf_r+0x1e>
 80074ea:	2340      	movs	r3, #64	; 0x40
 80074ec:	2000      	movs	r0, #0
 80074ee:	6023      	str	r3, [r4, #0]
 80074f0:	b016      	add	sp, #88	; 0x58
 80074f2:	bd70      	pop	{r4, r5, r6, pc}

080074f4 <__smakebuf_r>:
 80074f4:	898b      	ldrh	r3, [r1, #12]
 80074f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f8:	079d      	lsls	r5, r3, #30
 80074fa:	4606      	mov	r6, r0
 80074fc:	460c      	mov	r4, r1
 80074fe:	d507      	bpl.n	8007510 <__smakebuf_r+0x1c>
 8007500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	2301      	movs	r3, #1
 800750a:	6163      	str	r3, [r4, #20]
 800750c:	b002      	add	sp, #8
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	ab01      	add	r3, sp, #4
 8007512:	466a      	mov	r2, sp
 8007514:	f7ff ffc9 	bl	80074aa <__swhatbuf_r>
 8007518:	9900      	ldr	r1, [sp, #0]
 800751a:	4605      	mov	r5, r0
 800751c:	4630      	mov	r0, r6
 800751e:	f000 fc45 	bl	8007dac <_malloc_r>
 8007522:	b948      	cbnz	r0, 8007538 <__smakebuf_r+0x44>
 8007524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007528:	059a      	lsls	r2, r3, #22
 800752a:	d4ef      	bmi.n	800750c <__smakebuf_r+0x18>
 800752c:	f023 0303 	bic.w	r3, r3, #3
 8007530:	f043 0302 	orr.w	r3, r3, #2
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	e7e3      	b.n	8007500 <__smakebuf_r+0xc>
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <__smakebuf_r+0x7c>)
 800753a:	62b3      	str	r3, [r6, #40]	; 0x28
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	6020      	str	r0, [r4, #0]
 8007540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	6163      	str	r3, [r4, #20]
 800754a:	9b01      	ldr	r3, [sp, #4]
 800754c:	6120      	str	r0, [r4, #16]
 800754e:	b15b      	cbz	r3, 8007568 <__smakebuf_r+0x74>
 8007550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007554:	4630      	mov	r0, r6
 8007556:	f000 fef7 	bl	8008348 <_isatty_r>
 800755a:	b128      	cbz	r0, 8007568 <__smakebuf_r+0x74>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	89a0      	ldrh	r0, [r4, #12]
 800756a:	4305      	orrs	r5, r0
 800756c:	81a5      	strh	r5, [r4, #12]
 800756e:	e7cd      	b.n	800750c <__smakebuf_r+0x18>
 8007570:	080072f9 	.word	0x080072f9

08007574 <malloc>:
 8007574:	4b02      	ldr	r3, [pc, #8]	; (8007580 <malloc+0xc>)
 8007576:	4601      	mov	r1, r0
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	f000 bc17 	b.w	8007dac <_malloc_r>
 800757e:	bf00      	nop
 8007580:	2000000c 	.word	0x2000000c

08007584 <memcpy>:
 8007584:	440a      	add	r2, r1
 8007586:	4291      	cmp	r1, r2
 8007588:	f100 33ff 	add.w	r3, r0, #4294967295
 800758c:	d100      	bne.n	8007590 <memcpy+0xc>
 800758e:	4770      	bx	lr
 8007590:	b510      	push	{r4, lr}
 8007592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759a:	4291      	cmp	r1, r2
 800759c:	d1f9      	bne.n	8007592 <memcpy+0xe>
 800759e:	bd10      	pop	{r4, pc}

080075a0 <_Balloc>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	b976      	cbnz	r6, 80075c8 <_Balloc+0x28>
 80075aa:	2010      	movs	r0, #16
 80075ac:	f7ff ffe2 	bl	8007574 <malloc>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6260      	str	r0, [r4, #36]	; 0x24
 80075b4:	b920      	cbnz	r0, 80075c0 <_Balloc+0x20>
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <_Balloc+0x78>)
 80075b8:	4818      	ldr	r0, [pc, #96]	; (800761c <_Balloc+0x7c>)
 80075ba:	2166      	movs	r1, #102	; 0x66
 80075bc:	f000 fe72 	bl	80082a4 <__assert_func>
 80075c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c4:	6006      	str	r6, [r0, #0]
 80075c6:	60c6      	str	r6, [r0, #12]
 80075c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075ca:	68f3      	ldr	r3, [r6, #12]
 80075cc:	b183      	cbz	r3, 80075f0 <_Balloc+0x50>
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075d6:	b9b8      	cbnz	r0, 8007608 <_Balloc+0x68>
 80075d8:	2101      	movs	r1, #1
 80075da:	fa01 f605 	lsl.w	r6, r1, r5
 80075de:	1d72      	adds	r2, r6, #5
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fb60 	bl	8007ca8 <_calloc_r>
 80075e8:	b160      	cbz	r0, 8007604 <_Balloc+0x64>
 80075ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ee:	e00e      	b.n	800760e <_Balloc+0x6e>
 80075f0:	2221      	movs	r2, #33	; 0x21
 80075f2:	2104      	movs	r1, #4
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fb57 	bl	8007ca8 <_calloc_r>
 80075fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075fc:	60f0      	str	r0, [r6, #12]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e4      	bne.n	80075ce <_Balloc+0x2e>
 8007604:	2000      	movs	r0, #0
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	6802      	ldr	r2, [r0, #0]
 800760a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800760e:	2300      	movs	r3, #0
 8007610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007614:	e7f7      	b.n	8007606 <_Balloc+0x66>
 8007616:	bf00      	nop
 8007618:	08008555 	.word	0x08008555
 800761c:	08008638 	.word	0x08008638

08007620 <_Bfree>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007624:	4605      	mov	r5, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b976      	cbnz	r6, 8007648 <_Bfree+0x28>
 800762a:	2010      	movs	r0, #16
 800762c:	f7ff ffa2 	bl	8007574 <malloc>
 8007630:	4602      	mov	r2, r0
 8007632:	6268      	str	r0, [r5, #36]	; 0x24
 8007634:	b920      	cbnz	r0, 8007640 <_Bfree+0x20>
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <_Bfree+0x3c>)
 8007638:	4809      	ldr	r0, [pc, #36]	; (8007660 <_Bfree+0x40>)
 800763a:	218a      	movs	r1, #138	; 0x8a
 800763c:	f000 fe32 	bl	80082a4 <__assert_func>
 8007640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007644:	6006      	str	r6, [r0, #0]
 8007646:	60c6      	str	r6, [r0, #12]
 8007648:	b13c      	cbz	r4, 800765a <_Bfree+0x3a>
 800764a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800764c:	6862      	ldr	r2, [r4, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007654:	6021      	str	r1, [r4, #0]
 8007656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	08008555 	.word	0x08008555
 8007660:	08008638 	.word	0x08008638

08007664 <__multadd>:
 8007664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	690d      	ldr	r5, [r1, #16]
 800766a:	4607      	mov	r7, r0
 800766c:	460c      	mov	r4, r1
 800766e:	461e      	mov	r6, r3
 8007670:	f101 0c14 	add.w	ip, r1, #20
 8007674:	2000      	movs	r0, #0
 8007676:	f8dc 3000 	ldr.w	r3, [ip]
 800767a:	b299      	uxth	r1, r3
 800767c:	fb02 6101 	mla	r1, r2, r1, r6
 8007680:	0c1e      	lsrs	r6, r3, #16
 8007682:	0c0b      	lsrs	r3, r1, #16
 8007684:	fb02 3306 	mla	r3, r2, r6, r3
 8007688:	b289      	uxth	r1, r1
 800768a:	3001      	adds	r0, #1
 800768c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007690:	4285      	cmp	r5, r0
 8007692:	f84c 1b04 	str.w	r1, [ip], #4
 8007696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800769a:	dcec      	bgt.n	8007676 <__multadd+0x12>
 800769c:	b30e      	cbz	r6, 80076e2 <__multadd+0x7e>
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dc19      	bgt.n	80076d8 <__multadd+0x74>
 80076a4:	6861      	ldr	r1, [r4, #4]
 80076a6:	4638      	mov	r0, r7
 80076a8:	3101      	adds	r1, #1
 80076aa:	f7ff ff79 	bl	80075a0 <_Balloc>
 80076ae:	4680      	mov	r8, r0
 80076b0:	b928      	cbnz	r0, 80076be <__multadd+0x5a>
 80076b2:	4602      	mov	r2, r0
 80076b4:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <__multadd+0x84>)
 80076b6:	480d      	ldr	r0, [pc, #52]	; (80076ec <__multadd+0x88>)
 80076b8:	21b5      	movs	r1, #181	; 0xb5
 80076ba:	f000 fdf3 	bl	80082a4 <__assert_func>
 80076be:	6922      	ldr	r2, [r4, #16]
 80076c0:	3202      	adds	r2, #2
 80076c2:	f104 010c 	add.w	r1, r4, #12
 80076c6:	0092      	lsls	r2, r2, #2
 80076c8:	300c      	adds	r0, #12
 80076ca:	f7ff ff5b 	bl	8007584 <memcpy>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ffa5 	bl	8007620 <_Bfree>
 80076d6:	4644      	mov	r4, r8
 80076d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076dc:	3501      	adds	r5, #1
 80076de:	615e      	str	r6, [r3, #20]
 80076e0:	6125      	str	r5, [r4, #16]
 80076e2:	4620      	mov	r0, r4
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e8:	080085c7 	.word	0x080085c7
 80076ec:	08008638 	.word	0x08008638

080076f0 <__hi0bits>:
 80076f0:	0c03      	lsrs	r3, r0, #16
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	b9d3      	cbnz	r3, 800772c <__hi0bits+0x3c>
 80076f6:	0400      	lsls	r0, r0, #16
 80076f8:	2310      	movs	r3, #16
 80076fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076fe:	bf04      	itt	eq
 8007700:	0200      	lsleq	r0, r0, #8
 8007702:	3308      	addeq	r3, #8
 8007704:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007708:	bf04      	itt	eq
 800770a:	0100      	lsleq	r0, r0, #4
 800770c:	3304      	addeq	r3, #4
 800770e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007712:	bf04      	itt	eq
 8007714:	0080      	lsleq	r0, r0, #2
 8007716:	3302      	addeq	r3, #2
 8007718:	2800      	cmp	r0, #0
 800771a:	db05      	blt.n	8007728 <__hi0bits+0x38>
 800771c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007720:	f103 0301 	add.w	r3, r3, #1
 8007724:	bf08      	it	eq
 8007726:	2320      	moveq	r3, #32
 8007728:	4618      	mov	r0, r3
 800772a:	4770      	bx	lr
 800772c:	2300      	movs	r3, #0
 800772e:	e7e4      	b.n	80076fa <__hi0bits+0xa>

08007730 <__lo0bits>:
 8007730:	6803      	ldr	r3, [r0, #0]
 8007732:	f013 0207 	ands.w	r2, r3, #7
 8007736:	4601      	mov	r1, r0
 8007738:	d00b      	beq.n	8007752 <__lo0bits+0x22>
 800773a:	07da      	lsls	r2, r3, #31
 800773c:	d423      	bmi.n	8007786 <__lo0bits+0x56>
 800773e:	0798      	lsls	r0, r3, #30
 8007740:	bf49      	itett	mi
 8007742:	085b      	lsrmi	r3, r3, #1
 8007744:	089b      	lsrpl	r3, r3, #2
 8007746:	2001      	movmi	r0, #1
 8007748:	600b      	strmi	r3, [r1, #0]
 800774a:	bf5c      	itt	pl
 800774c:	600b      	strpl	r3, [r1, #0]
 800774e:	2002      	movpl	r0, #2
 8007750:	4770      	bx	lr
 8007752:	b298      	uxth	r0, r3
 8007754:	b9a8      	cbnz	r0, 8007782 <__lo0bits+0x52>
 8007756:	0c1b      	lsrs	r3, r3, #16
 8007758:	2010      	movs	r0, #16
 800775a:	b2da      	uxtb	r2, r3
 800775c:	b90a      	cbnz	r2, 8007762 <__lo0bits+0x32>
 800775e:	3008      	adds	r0, #8
 8007760:	0a1b      	lsrs	r3, r3, #8
 8007762:	071a      	lsls	r2, r3, #28
 8007764:	bf04      	itt	eq
 8007766:	091b      	lsreq	r3, r3, #4
 8007768:	3004      	addeq	r0, #4
 800776a:	079a      	lsls	r2, r3, #30
 800776c:	bf04      	itt	eq
 800776e:	089b      	lsreq	r3, r3, #2
 8007770:	3002      	addeq	r0, #2
 8007772:	07da      	lsls	r2, r3, #31
 8007774:	d403      	bmi.n	800777e <__lo0bits+0x4e>
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	f100 0001 	add.w	r0, r0, #1
 800777c:	d005      	beq.n	800778a <__lo0bits+0x5a>
 800777e:	600b      	str	r3, [r1, #0]
 8007780:	4770      	bx	lr
 8007782:	4610      	mov	r0, r2
 8007784:	e7e9      	b.n	800775a <__lo0bits+0x2a>
 8007786:	2000      	movs	r0, #0
 8007788:	4770      	bx	lr
 800778a:	2020      	movs	r0, #32
 800778c:	4770      	bx	lr
	...

08007790 <__i2b>:
 8007790:	b510      	push	{r4, lr}
 8007792:	460c      	mov	r4, r1
 8007794:	2101      	movs	r1, #1
 8007796:	f7ff ff03 	bl	80075a0 <_Balloc>
 800779a:	4602      	mov	r2, r0
 800779c:	b928      	cbnz	r0, 80077aa <__i2b+0x1a>
 800779e:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <__i2b+0x24>)
 80077a0:	4805      	ldr	r0, [pc, #20]	; (80077b8 <__i2b+0x28>)
 80077a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077a6:	f000 fd7d 	bl	80082a4 <__assert_func>
 80077aa:	2301      	movs	r3, #1
 80077ac:	6144      	str	r4, [r0, #20]
 80077ae:	6103      	str	r3, [r0, #16]
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	bf00      	nop
 80077b4:	080085c7 	.word	0x080085c7
 80077b8:	08008638 	.word	0x08008638

080077bc <__multiply>:
 80077bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	4691      	mov	r9, r2
 80077c2:	690a      	ldr	r2, [r1, #16]
 80077c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	bfb8      	it	lt
 80077cc:	460b      	movlt	r3, r1
 80077ce:	460c      	mov	r4, r1
 80077d0:	bfbc      	itt	lt
 80077d2:	464c      	movlt	r4, r9
 80077d4:	4699      	movlt	r9, r3
 80077d6:	6927      	ldr	r7, [r4, #16]
 80077d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077dc:	68a3      	ldr	r3, [r4, #8]
 80077de:	6861      	ldr	r1, [r4, #4]
 80077e0:	eb07 060a 	add.w	r6, r7, sl
 80077e4:	42b3      	cmp	r3, r6
 80077e6:	b085      	sub	sp, #20
 80077e8:	bfb8      	it	lt
 80077ea:	3101      	addlt	r1, #1
 80077ec:	f7ff fed8 	bl	80075a0 <_Balloc>
 80077f0:	b930      	cbnz	r0, 8007800 <__multiply+0x44>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4b44      	ldr	r3, [pc, #272]	; (8007908 <__multiply+0x14c>)
 80077f6:	4845      	ldr	r0, [pc, #276]	; (800790c <__multiply+0x150>)
 80077f8:	f240 115d 	movw	r1, #349	; 0x15d
 80077fc:	f000 fd52 	bl	80082a4 <__assert_func>
 8007800:	f100 0514 	add.w	r5, r0, #20
 8007804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007808:	462b      	mov	r3, r5
 800780a:	2200      	movs	r2, #0
 800780c:	4543      	cmp	r3, r8
 800780e:	d321      	bcc.n	8007854 <__multiply+0x98>
 8007810:	f104 0314 	add.w	r3, r4, #20
 8007814:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007818:	f109 0314 	add.w	r3, r9, #20
 800781c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007820:	9202      	str	r2, [sp, #8]
 8007822:	1b3a      	subs	r2, r7, r4
 8007824:	3a15      	subs	r2, #21
 8007826:	f022 0203 	bic.w	r2, r2, #3
 800782a:	3204      	adds	r2, #4
 800782c:	f104 0115 	add.w	r1, r4, #21
 8007830:	428f      	cmp	r7, r1
 8007832:	bf38      	it	cc
 8007834:	2204      	movcc	r2, #4
 8007836:	9201      	str	r2, [sp, #4]
 8007838:	9a02      	ldr	r2, [sp, #8]
 800783a:	9303      	str	r3, [sp, #12]
 800783c:	429a      	cmp	r2, r3
 800783e:	d80c      	bhi.n	800785a <__multiply+0x9e>
 8007840:	2e00      	cmp	r6, #0
 8007842:	dd03      	ble.n	800784c <__multiply+0x90>
 8007844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007848:	2b00      	cmp	r3, #0
 800784a:	d05a      	beq.n	8007902 <__multiply+0x146>
 800784c:	6106      	str	r6, [r0, #16]
 800784e:	b005      	add	sp, #20
 8007850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007854:	f843 2b04 	str.w	r2, [r3], #4
 8007858:	e7d8      	b.n	800780c <__multiply+0x50>
 800785a:	f8b3 a000 	ldrh.w	sl, [r3]
 800785e:	f1ba 0f00 	cmp.w	sl, #0
 8007862:	d024      	beq.n	80078ae <__multiply+0xf2>
 8007864:	f104 0e14 	add.w	lr, r4, #20
 8007868:	46a9      	mov	r9, r5
 800786a:	f04f 0c00 	mov.w	ip, #0
 800786e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007872:	f8d9 1000 	ldr.w	r1, [r9]
 8007876:	fa1f fb82 	uxth.w	fp, r2
 800787a:	b289      	uxth	r1, r1
 800787c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007880:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007884:	f8d9 2000 	ldr.w	r2, [r9]
 8007888:	4461      	add	r1, ip
 800788a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800788e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007896:	b289      	uxth	r1, r1
 8007898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800789c:	4577      	cmp	r7, lr
 800789e:	f849 1b04 	str.w	r1, [r9], #4
 80078a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078a6:	d8e2      	bhi.n	800786e <__multiply+0xb2>
 80078a8:	9a01      	ldr	r2, [sp, #4]
 80078aa:	f845 c002 	str.w	ip, [r5, r2]
 80078ae:	9a03      	ldr	r2, [sp, #12]
 80078b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078b4:	3304      	adds	r3, #4
 80078b6:	f1b9 0f00 	cmp.w	r9, #0
 80078ba:	d020      	beq.n	80078fe <__multiply+0x142>
 80078bc:	6829      	ldr	r1, [r5, #0]
 80078be:	f104 0c14 	add.w	ip, r4, #20
 80078c2:	46ae      	mov	lr, r5
 80078c4:	f04f 0a00 	mov.w	sl, #0
 80078c8:	f8bc b000 	ldrh.w	fp, [ip]
 80078cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078d0:	fb09 220b 	mla	r2, r9, fp, r2
 80078d4:	4492      	add	sl, r2
 80078d6:	b289      	uxth	r1, r1
 80078d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80078dc:	f84e 1b04 	str.w	r1, [lr], #4
 80078e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078e4:	f8be 1000 	ldrh.w	r1, [lr]
 80078e8:	0c12      	lsrs	r2, r2, #16
 80078ea:	fb09 1102 	mla	r1, r9, r2, r1
 80078ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80078f2:	4567      	cmp	r7, ip
 80078f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078f8:	d8e6      	bhi.n	80078c8 <__multiply+0x10c>
 80078fa:	9a01      	ldr	r2, [sp, #4]
 80078fc:	50a9      	str	r1, [r5, r2]
 80078fe:	3504      	adds	r5, #4
 8007900:	e79a      	b.n	8007838 <__multiply+0x7c>
 8007902:	3e01      	subs	r6, #1
 8007904:	e79c      	b.n	8007840 <__multiply+0x84>
 8007906:	bf00      	nop
 8007908:	080085c7 	.word	0x080085c7
 800790c:	08008638 	.word	0x08008638

08007910 <__pow5mult>:
 8007910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007914:	4615      	mov	r5, r2
 8007916:	f012 0203 	ands.w	r2, r2, #3
 800791a:	4606      	mov	r6, r0
 800791c:	460f      	mov	r7, r1
 800791e:	d007      	beq.n	8007930 <__pow5mult+0x20>
 8007920:	4c25      	ldr	r4, [pc, #148]	; (80079b8 <__pow5mult+0xa8>)
 8007922:	3a01      	subs	r2, #1
 8007924:	2300      	movs	r3, #0
 8007926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800792a:	f7ff fe9b 	bl	8007664 <__multadd>
 800792e:	4607      	mov	r7, r0
 8007930:	10ad      	asrs	r5, r5, #2
 8007932:	d03d      	beq.n	80079b0 <__pow5mult+0xa0>
 8007934:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007936:	b97c      	cbnz	r4, 8007958 <__pow5mult+0x48>
 8007938:	2010      	movs	r0, #16
 800793a:	f7ff fe1b 	bl	8007574 <malloc>
 800793e:	4602      	mov	r2, r0
 8007940:	6270      	str	r0, [r6, #36]	; 0x24
 8007942:	b928      	cbnz	r0, 8007950 <__pow5mult+0x40>
 8007944:	4b1d      	ldr	r3, [pc, #116]	; (80079bc <__pow5mult+0xac>)
 8007946:	481e      	ldr	r0, [pc, #120]	; (80079c0 <__pow5mult+0xb0>)
 8007948:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800794c:	f000 fcaa 	bl	80082a4 <__assert_func>
 8007950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007954:	6004      	str	r4, [r0, #0]
 8007956:	60c4      	str	r4, [r0, #12]
 8007958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800795c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007960:	b94c      	cbnz	r4, 8007976 <__pow5mult+0x66>
 8007962:	f240 2171 	movw	r1, #625	; 0x271
 8007966:	4630      	mov	r0, r6
 8007968:	f7ff ff12 	bl	8007790 <__i2b>
 800796c:	2300      	movs	r3, #0
 800796e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007972:	4604      	mov	r4, r0
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	07eb      	lsls	r3, r5, #31
 800797c:	d50a      	bpl.n	8007994 <__pow5mult+0x84>
 800797e:	4639      	mov	r1, r7
 8007980:	4622      	mov	r2, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ff1a 	bl	80077bc <__multiply>
 8007988:	4639      	mov	r1, r7
 800798a:	4680      	mov	r8, r0
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff fe47 	bl	8007620 <_Bfree>
 8007992:	4647      	mov	r7, r8
 8007994:	106d      	asrs	r5, r5, #1
 8007996:	d00b      	beq.n	80079b0 <__pow5mult+0xa0>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	b938      	cbnz	r0, 80079ac <__pow5mult+0x9c>
 800799c:	4622      	mov	r2, r4
 800799e:	4621      	mov	r1, r4
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff ff0b 	bl	80077bc <__multiply>
 80079a6:	6020      	str	r0, [r4, #0]
 80079a8:	f8c0 9000 	str.w	r9, [r0]
 80079ac:	4604      	mov	r4, r0
 80079ae:	e7e4      	b.n	800797a <__pow5mult+0x6a>
 80079b0:	4638      	mov	r0, r7
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	bf00      	nop
 80079b8:	08008788 	.word	0x08008788
 80079bc:	08008555 	.word	0x08008555
 80079c0:	08008638 	.word	0x08008638

080079c4 <__lshift>:
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	6849      	ldr	r1, [r1, #4]
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	4607      	mov	r7, r0
 80079d6:	4691      	mov	r9, r2
 80079d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079dc:	f108 0601 	add.w	r6, r8, #1
 80079e0:	42b3      	cmp	r3, r6
 80079e2:	db0b      	blt.n	80079fc <__lshift+0x38>
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff fddb 	bl	80075a0 <_Balloc>
 80079ea:	4605      	mov	r5, r0
 80079ec:	b948      	cbnz	r0, 8007a02 <__lshift+0x3e>
 80079ee:	4602      	mov	r2, r0
 80079f0:	4b2a      	ldr	r3, [pc, #168]	; (8007a9c <__lshift+0xd8>)
 80079f2:	482b      	ldr	r0, [pc, #172]	; (8007aa0 <__lshift+0xdc>)
 80079f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079f8:	f000 fc54 	bl	80082a4 <__assert_func>
 80079fc:	3101      	adds	r1, #1
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	e7ee      	b.n	80079e0 <__lshift+0x1c>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f100 0114 	add.w	r1, r0, #20
 8007a08:	f100 0210 	add.w	r2, r0, #16
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	4553      	cmp	r3, sl
 8007a10:	db37      	blt.n	8007a82 <__lshift+0xbe>
 8007a12:	6920      	ldr	r0, [r4, #16]
 8007a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a18:	f104 0314 	add.w	r3, r4, #20
 8007a1c:	f019 091f 	ands.w	r9, r9, #31
 8007a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a28:	d02f      	beq.n	8007a8a <__lshift+0xc6>
 8007a2a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a2e:	468a      	mov	sl, r1
 8007a30:	f04f 0c00 	mov.w	ip, #0
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	fa02 f209 	lsl.w	r2, r2, r9
 8007a3a:	ea42 020c 	orr.w	r2, r2, ip
 8007a3e:	f84a 2b04 	str.w	r2, [sl], #4
 8007a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a46:	4298      	cmp	r0, r3
 8007a48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a4c:	d8f2      	bhi.n	8007a34 <__lshift+0x70>
 8007a4e:	1b03      	subs	r3, r0, r4
 8007a50:	3b15      	subs	r3, #21
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	3304      	adds	r3, #4
 8007a58:	f104 0215 	add.w	r2, r4, #21
 8007a5c:	4290      	cmp	r0, r2
 8007a5e:	bf38      	it	cc
 8007a60:	2304      	movcc	r3, #4
 8007a62:	f841 c003 	str.w	ip, [r1, r3]
 8007a66:	f1bc 0f00 	cmp.w	ip, #0
 8007a6a:	d001      	beq.n	8007a70 <__lshift+0xac>
 8007a6c:	f108 0602 	add.w	r6, r8, #2
 8007a70:	3e01      	subs	r6, #1
 8007a72:	4638      	mov	r0, r7
 8007a74:	612e      	str	r6, [r5, #16]
 8007a76:	4621      	mov	r1, r4
 8007a78:	f7ff fdd2 	bl	8007620 <_Bfree>
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a86:	3301      	adds	r3, #1
 8007a88:	e7c1      	b.n	8007a0e <__lshift+0x4a>
 8007a8a:	3904      	subs	r1, #4
 8007a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a94:	4298      	cmp	r0, r3
 8007a96:	d8f9      	bhi.n	8007a8c <__lshift+0xc8>
 8007a98:	e7ea      	b.n	8007a70 <__lshift+0xac>
 8007a9a:	bf00      	nop
 8007a9c:	080085c7 	.word	0x080085c7
 8007aa0:	08008638 	.word	0x08008638

08007aa4 <__mcmp>:
 8007aa4:	b530      	push	{r4, r5, lr}
 8007aa6:	6902      	ldr	r2, [r0, #16]
 8007aa8:	690c      	ldr	r4, [r1, #16]
 8007aaa:	1b12      	subs	r2, r2, r4
 8007aac:	d10e      	bne.n	8007acc <__mcmp+0x28>
 8007aae:	f100 0314 	add.w	r3, r0, #20
 8007ab2:	3114      	adds	r1, #20
 8007ab4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007abc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ac0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ac4:	42a5      	cmp	r5, r4
 8007ac6:	d003      	beq.n	8007ad0 <__mcmp+0x2c>
 8007ac8:	d305      	bcc.n	8007ad6 <__mcmp+0x32>
 8007aca:	2201      	movs	r2, #1
 8007acc:	4610      	mov	r0, r2
 8007ace:	bd30      	pop	{r4, r5, pc}
 8007ad0:	4283      	cmp	r3, r0
 8007ad2:	d3f3      	bcc.n	8007abc <__mcmp+0x18>
 8007ad4:	e7fa      	b.n	8007acc <__mcmp+0x28>
 8007ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ada:	e7f7      	b.n	8007acc <__mcmp+0x28>

08007adc <__mdiff>:
 8007adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4690      	mov	r8, r2
 8007aea:	f7ff ffdb 	bl	8007aa4 <__mcmp>
 8007aee:	1e05      	subs	r5, r0, #0
 8007af0:	d110      	bne.n	8007b14 <__mdiff+0x38>
 8007af2:	4629      	mov	r1, r5
 8007af4:	4630      	mov	r0, r6
 8007af6:	f7ff fd53 	bl	80075a0 <_Balloc>
 8007afa:	b930      	cbnz	r0, 8007b0a <__mdiff+0x2e>
 8007afc:	4b3a      	ldr	r3, [pc, #232]	; (8007be8 <__mdiff+0x10c>)
 8007afe:	4602      	mov	r2, r0
 8007b00:	f240 2132 	movw	r1, #562	; 0x232
 8007b04:	4839      	ldr	r0, [pc, #228]	; (8007bec <__mdiff+0x110>)
 8007b06:	f000 fbcd 	bl	80082a4 <__assert_func>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b14:	bfa4      	itt	ge
 8007b16:	4643      	movge	r3, r8
 8007b18:	46a0      	movge	r8, r4
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b20:	bfa6      	itte	ge
 8007b22:	461c      	movge	r4, r3
 8007b24:	2500      	movge	r5, #0
 8007b26:	2501      	movlt	r5, #1
 8007b28:	f7ff fd3a 	bl	80075a0 <_Balloc>
 8007b2c:	b920      	cbnz	r0, 8007b38 <__mdiff+0x5c>
 8007b2e:	4b2e      	ldr	r3, [pc, #184]	; (8007be8 <__mdiff+0x10c>)
 8007b30:	4602      	mov	r2, r0
 8007b32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b36:	e7e5      	b.n	8007b04 <__mdiff+0x28>
 8007b38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b3c:	6926      	ldr	r6, [r4, #16]
 8007b3e:	60c5      	str	r5, [r0, #12]
 8007b40:	f104 0914 	add.w	r9, r4, #20
 8007b44:	f108 0514 	add.w	r5, r8, #20
 8007b48:	f100 0e14 	add.w	lr, r0, #20
 8007b4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b54:	f108 0210 	add.w	r2, r8, #16
 8007b58:	46f2      	mov	sl, lr
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b64:	fa1f f883 	uxth.w	r8, r3
 8007b68:	fa11 f18b 	uxtah	r1, r1, fp
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	eba1 0808 	sub.w	r8, r1, r8
 8007b72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b7a:	fa1f f888 	uxth.w	r8, r8
 8007b7e:	1419      	asrs	r1, r3, #16
 8007b80:	454e      	cmp	r6, r9
 8007b82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b86:	f84a 3b04 	str.w	r3, [sl], #4
 8007b8a:	d8e7      	bhi.n	8007b5c <__mdiff+0x80>
 8007b8c:	1b33      	subs	r3, r6, r4
 8007b8e:	3b15      	subs	r3, #21
 8007b90:	f023 0303 	bic.w	r3, r3, #3
 8007b94:	3304      	adds	r3, #4
 8007b96:	3415      	adds	r4, #21
 8007b98:	42a6      	cmp	r6, r4
 8007b9a:	bf38      	it	cc
 8007b9c:	2304      	movcc	r3, #4
 8007b9e:	441d      	add	r5, r3
 8007ba0:	4473      	add	r3, lr
 8007ba2:	469e      	mov	lr, r3
 8007ba4:	462e      	mov	r6, r5
 8007ba6:	4566      	cmp	r6, ip
 8007ba8:	d30e      	bcc.n	8007bc8 <__mdiff+0xec>
 8007baa:	f10c 0203 	add.w	r2, ip, #3
 8007bae:	1b52      	subs	r2, r2, r5
 8007bb0:	f022 0203 	bic.w	r2, r2, #3
 8007bb4:	3d03      	subs	r5, #3
 8007bb6:	45ac      	cmp	ip, r5
 8007bb8:	bf38      	it	cc
 8007bba:	2200      	movcc	r2, #0
 8007bbc:	441a      	add	r2, r3
 8007bbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007bc2:	b17b      	cbz	r3, 8007be4 <__mdiff+0x108>
 8007bc4:	6107      	str	r7, [r0, #16]
 8007bc6:	e7a3      	b.n	8007b10 <__mdiff+0x34>
 8007bc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007bcc:	fa11 f288 	uxtah	r2, r1, r8
 8007bd0:	1414      	asrs	r4, r2, #16
 8007bd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bdc:	f84e 2b04 	str.w	r2, [lr], #4
 8007be0:	1421      	asrs	r1, r4, #16
 8007be2:	e7e0      	b.n	8007ba6 <__mdiff+0xca>
 8007be4:	3f01      	subs	r7, #1
 8007be6:	e7ea      	b.n	8007bbe <__mdiff+0xe2>
 8007be8:	080085c7 	.word	0x080085c7
 8007bec:	08008638 	.word	0x08008638

08007bf0 <__d2b>:
 8007bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	4689      	mov	r9, r1
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	ec57 6b10 	vmov	r6, r7, d0
 8007bfc:	4690      	mov	r8, r2
 8007bfe:	f7ff fccf 	bl	80075a0 <_Balloc>
 8007c02:	4604      	mov	r4, r0
 8007c04:	b930      	cbnz	r0, 8007c14 <__d2b+0x24>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4b25      	ldr	r3, [pc, #148]	; (8007ca0 <__d2b+0xb0>)
 8007c0a:	4826      	ldr	r0, [pc, #152]	; (8007ca4 <__d2b+0xb4>)
 8007c0c:	f240 310a 	movw	r1, #778	; 0x30a
 8007c10:	f000 fb48 	bl	80082a4 <__assert_func>
 8007c14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c1c:	bb35      	cbnz	r5, 8007c6c <__d2b+0x7c>
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	d028      	beq.n	8007c76 <__d2b+0x86>
 8007c24:	4668      	mov	r0, sp
 8007c26:	9600      	str	r6, [sp, #0]
 8007c28:	f7ff fd82 	bl	8007730 <__lo0bits>
 8007c2c:	9900      	ldr	r1, [sp, #0]
 8007c2e:	b300      	cbz	r0, 8007c72 <__d2b+0x82>
 8007c30:	9a01      	ldr	r2, [sp, #4]
 8007c32:	f1c0 0320 	rsb	r3, r0, #32
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	430b      	orrs	r3, r1
 8007c3c:	40c2      	lsrs	r2, r0
 8007c3e:	6163      	str	r3, [r4, #20]
 8007c40:	9201      	str	r2, [sp, #4]
 8007c42:	9b01      	ldr	r3, [sp, #4]
 8007c44:	61a3      	str	r3, [r4, #24]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bf14      	ite	ne
 8007c4a:	2202      	movne	r2, #2
 8007c4c:	2201      	moveq	r2, #1
 8007c4e:	6122      	str	r2, [r4, #16]
 8007c50:	b1d5      	cbz	r5, 8007c88 <__d2b+0x98>
 8007c52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c56:	4405      	add	r5, r0
 8007c58:	f8c9 5000 	str.w	r5, [r9]
 8007c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c60:	f8c8 0000 	str.w	r0, [r8]
 8007c64:	4620      	mov	r0, r4
 8007c66:	b003      	add	sp, #12
 8007c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c70:	e7d5      	b.n	8007c1e <__d2b+0x2e>
 8007c72:	6161      	str	r1, [r4, #20]
 8007c74:	e7e5      	b.n	8007c42 <__d2b+0x52>
 8007c76:	a801      	add	r0, sp, #4
 8007c78:	f7ff fd5a 	bl	8007730 <__lo0bits>
 8007c7c:	9b01      	ldr	r3, [sp, #4]
 8007c7e:	6163      	str	r3, [r4, #20]
 8007c80:	2201      	movs	r2, #1
 8007c82:	6122      	str	r2, [r4, #16]
 8007c84:	3020      	adds	r0, #32
 8007c86:	e7e3      	b.n	8007c50 <__d2b+0x60>
 8007c88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c90:	f8c9 0000 	str.w	r0, [r9]
 8007c94:	6918      	ldr	r0, [r3, #16]
 8007c96:	f7ff fd2b 	bl	80076f0 <__hi0bits>
 8007c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c9e:	e7df      	b.n	8007c60 <__d2b+0x70>
 8007ca0:	080085c7 	.word	0x080085c7
 8007ca4:	08008638 	.word	0x08008638

08007ca8 <_calloc_r>:
 8007ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007caa:	fba1 2402 	umull	r2, r4, r1, r2
 8007cae:	b94c      	cbnz	r4, 8007cc4 <_calloc_r+0x1c>
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	9201      	str	r2, [sp, #4]
 8007cb4:	f000 f87a 	bl	8007dac <_malloc_r>
 8007cb8:	9a01      	ldr	r2, [sp, #4]
 8007cba:	4605      	mov	r5, r0
 8007cbc:	b930      	cbnz	r0, 8007ccc <_calloc_r+0x24>
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	b003      	add	sp, #12
 8007cc2:	bd30      	pop	{r4, r5, pc}
 8007cc4:	220c      	movs	r2, #12
 8007cc6:	6002      	str	r2, [r0, #0]
 8007cc8:	2500      	movs	r5, #0
 8007cca:	e7f8      	b.n	8007cbe <_calloc_r+0x16>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f7fd fddb 	bl	8005888 <memset>
 8007cd2:	e7f4      	b.n	8007cbe <_calloc_r+0x16>

08007cd4 <_free_r>:
 8007cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	d044      	beq.n	8007d64 <_free_r+0x90>
 8007cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cde:	9001      	str	r0, [sp, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ce6:	bfb8      	it	lt
 8007ce8:	18e4      	addlt	r4, r4, r3
 8007cea:	f000 fb61 	bl	80083b0 <__malloc_lock>
 8007cee:	4a1e      	ldr	r2, [pc, #120]	; (8007d68 <_free_r+0x94>)
 8007cf0:	9801      	ldr	r0, [sp, #4]
 8007cf2:	6813      	ldr	r3, [r2, #0]
 8007cf4:	b933      	cbnz	r3, 8007d04 <_free_r+0x30>
 8007cf6:	6063      	str	r3, [r4, #4]
 8007cf8:	6014      	str	r4, [r2, #0]
 8007cfa:	b003      	add	sp, #12
 8007cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d00:	f000 bb5c 	b.w	80083bc <__malloc_unlock>
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	d908      	bls.n	8007d1a <_free_r+0x46>
 8007d08:	6825      	ldr	r5, [r4, #0]
 8007d0a:	1961      	adds	r1, r4, r5
 8007d0c:	428b      	cmp	r3, r1
 8007d0e:	bf01      	itttt	eq
 8007d10:	6819      	ldreq	r1, [r3, #0]
 8007d12:	685b      	ldreq	r3, [r3, #4]
 8007d14:	1949      	addeq	r1, r1, r5
 8007d16:	6021      	streq	r1, [r4, #0]
 8007d18:	e7ed      	b.n	8007cf6 <_free_r+0x22>
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	b10b      	cbz	r3, 8007d24 <_free_r+0x50>
 8007d20:	42a3      	cmp	r3, r4
 8007d22:	d9fa      	bls.n	8007d1a <_free_r+0x46>
 8007d24:	6811      	ldr	r1, [r2, #0]
 8007d26:	1855      	adds	r5, r2, r1
 8007d28:	42a5      	cmp	r5, r4
 8007d2a:	d10b      	bne.n	8007d44 <_free_r+0x70>
 8007d2c:	6824      	ldr	r4, [r4, #0]
 8007d2e:	4421      	add	r1, r4
 8007d30:	1854      	adds	r4, r2, r1
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	6011      	str	r1, [r2, #0]
 8007d36:	d1e0      	bne.n	8007cfa <_free_r+0x26>
 8007d38:	681c      	ldr	r4, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	6053      	str	r3, [r2, #4]
 8007d3e:	4421      	add	r1, r4
 8007d40:	6011      	str	r1, [r2, #0]
 8007d42:	e7da      	b.n	8007cfa <_free_r+0x26>
 8007d44:	d902      	bls.n	8007d4c <_free_r+0x78>
 8007d46:	230c      	movs	r3, #12
 8007d48:	6003      	str	r3, [r0, #0]
 8007d4a:	e7d6      	b.n	8007cfa <_free_r+0x26>
 8007d4c:	6825      	ldr	r5, [r4, #0]
 8007d4e:	1961      	adds	r1, r4, r5
 8007d50:	428b      	cmp	r3, r1
 8007d52:	bf04      	itt	eq
 8007d54:	6819      	ldreq	r1, [r3, #0]
 8007d56:	685b      	ldreq	r3, [r3, #4]
 8007d58:	6063      	str	r3, [r4, #4]
 8007d5a:	bf04      	itt	eq
 8007d5c:	1949      	addeq	r1, r1, r5
 8007d5e:	6021      	streq	r1, [r4, #0]
 8007d60:	6054      	str	r4, [r2, #4]
 8007d62:	e7ca      	b.n	8007cfa <_free_r+0x26>
 8007d64:	b003      	add	sp, #12
 8007d66:	bd30      	pop	{r4, r5, pc}
 8007d68:	20000478 	.word	0x20000478

08007d6c <sbrk_aligned>:
 8007d6c:	b570      	push	{r4, r5, r6, lr}
 8007d6e:	4e0e      	ldr	r6, [pc, #56]	; (8007da8 <sbrk_aligned+0x3c>)
 8007d70:	460c      	mov	r4, r1
 8007d72:	6831      	ldr	r1, [r6, #0]
 8007d74:	4605      	mov	r5, r0
 8007d76:	b911      	cbnz	r1, 8007d7e <sbrk_aligned+0x12>
 8007d78:	f000 fa2e 	bl	80081d8 <_sbrk_r>
 8007d7c:	6030      	str	r0, [r6, #0]
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 fa29 	bl	80081d8 <_sbrk_r>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	d00a      	beq.n	8007da0 <sbrk_aligned+0x34>
 8007d8a:	1cc4      	adds	r4, r0, #3
 8007d8c:	f024 0403 	bic.w	r4, r4, #3
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d007      	beq.n	8007da4 <sbrk_aligned+0x38>
 8007d94:	1a21      	subs	r1, r4, r0
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fa1e 	bl	80081d8 <_sbrk_r>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d101      	bne.n	8007da4 <sbrk_aligned+0x38>
 8007da0:	f04f 34ff 	mov.w	r4, #4294967295
 8007da4:	4620      	mov	r0, r4
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	2000047c 	.word	0x2000047c

08007dac <_malloc_r>:
 8007dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db0:	1ccd      	adds	r5, r1, #3
 8007db2:	f025 0503 	bic.w	r5, r5, #3
 8007db6:	3508      	adds	r5, #8
 8007db8:	2d0c      	cmp	r5, #12
 8007dba:	bf38      	it	cc
 8007dbc:	250c      	movcc	r5, #12
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	db01      	blt.n	8007dc8 <_malloc_r+0x1c>
 8007dc4:	42a9      	cmp	r1, r5
 8007dc6:	d905      	bls.n	8007dd4 <_malloc_r+0x28>
 8007dc8:	230c      	movs	r3, #12
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	2600      	movs	r6, #0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd4:	4e2e      	ldr	r6, [pc, #184]	; (8007e90 <_malloc_r+0xe4>)
 8007dd6:	f000 faeb 	bl	80083b0 <__malloc_lock>
 8007dda:	6833      	ldr	r3, [r6, #0]
 8007ddc:	461c      	mov	r4, r3
 8007dde:	bb34      	cbnz	r4, 8007e2e <_malloc_r+0x82>
 8007de0:	4629      	mov	r1, r5
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ffc2 	bl	8007d6c <sbrk_aligned>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	4604      	mov	r4, r0
 8007dec:	d14d      	bne.n	8007e8a <_malloc_r+0xde>
 8007dee:	6834      	ldr	r4, [r6, #0]
 8007df0:	4626      	mov	r6, r4
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	d140      	bne.n	8007e78 <_malloc_r+0xcc>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	4631      	mov	r1, r6
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	eb04 0803 	add.w	r8, r4, r3
 8007e00:	f000 f9ea 	bl	80081d8 <_sbrk_r>
 8007e04:	4580      	cmp	r8, r0
 8007e06:	d13a      	bne.n	8007e7e <_malloc_r+0xd2>
 8007e08:	6821      	ldr	r1, [r4, #0]
 8007e0a:	3503      	adds	r5, #3
 8007e0c:	1a6d      	subs	r5, r5, r1
 8007e0e:	f025 0503 	bic.w	r5, r5, #3
 8007e12:	3508      	adds	r5, #8
 8007e14:	2d0c      	cmp	r5, #12
 8007e16:	bf38      	it	cc
 8007e18:	250c      	movcc	r5, #12
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff ffa5 	bl	8007d6c <sbrk_aligned>
 8007e22:	3001      	adds	r0, #1
 8007e24:	d02b      	beq.n	8007e7e <_malloc_r+0xd2>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	442b      	add	r3, r5
 8007e2a:	6023      	str	r3, [r4, #0]
 8007e2c:	e00e      	b.n	8007e4c <_malloc_r+0xa0>
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	1b52      	subs	r2, r2, r5
 8007e32:	d41e      	bmi.n	8007e72 <_malloc_r+0xc6>
 8007e34:	2a0b      	cmp	r2, #11
 8007e36:	d916      	bls.n	8007e66 <_malloc_r+0xba>
 8007e38:	1961      	adds	r1, r4, r5
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	6025      	str	r5, [r4, #0]
 8007e3e:	bf18      	it	ne
 8007e40:	6059      	strne	r1, [r3, #4]
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	bf08      	it	eq
 8007e46:	6031      	streq	r1, [r6, #0]
 8007e48:	5162      	str	r2, [r4, r5]
 8007e4a:	604b      	str	r3, [r1, #4]
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f104 060b 	add.w	r6, r4, #11
 8007e52:	f000 fab3 	bl	80083bc <__malloc_unlock>
 8007e56:	f026 0607 	bic.w	r6, r6, #7
 8007e5a:	1d23      	adds	r3, r4, #4
 8007e5c:	1af2      	subs	r2, r6, r3
 8007e5e:	d0b6      	beq.n	8007dce <_malloc_r+0x22>
 8007e60:	1b9b      	subs	r3, r3, r6
 8007e62:	50a3      	str	r3, [r4, r2]
 8007e64:	e7b3      	b.n	8007dce <_malloc_r+0x22>
 8007e66:	6862      	ldr	r2, [r4, #4]
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	bf0c      	ite	eq
 8007e6c:	6032      	streq	r2, [r6, #0]
 8007e6e:	605a      	strne	r2, [r3, #4]
 8007e70:	e7ec      	b.n	8007e4c <_malloc_r+0xa0>
 8007e72:	4623      	mov	r3, r4
 8007e74:	6864      	ldr	r4, [r4, #4]
 8007e76:	e7b2      	b.n	8007dde <_malloc_r+0x32>
 8007e78:	4634      	mov	r4, r6
 8007e7a:	6876      	ldr	r6, [r6, #4]
 8007e7c:	e7b9      	b.n	8007df2 <_malloc_r+0x46>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	4638      	mov	r0, r7
 8007e84:	f000 fa9a 	bl	80083bc <__malloc_unlock>
 8007e88:	e7a1      	b.n	8007dce <_malloc_r+0x22>
 8007e8a:	6025      	str	r5, [r4, #0]
 8007e8c:	e7de      	b.n	8007e4c <_malloc_r+0xa0>
 8007e8e:	bf00      	nop
 8007e90:	20000478 	.word	0x20000478

08007e94 <__sfputc_r>:
 8007e94:	6893      	ldr	r3, [r2, #8]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	b410      	push	{r4}
 8007e9c:	6093      	str	r3, [r2, #8]
 8007e9e:	da08      	bge.n	8007eb2 <__sfputc_r+0x1e>
 8007ea0:	6994      	ldr	r4, [r2, #24]
 8007ea2:	42a3      	cmp	r3, r4
 8007ea4:	db01      	blt.n	8007eaa <__sfputc_r+0x16>
 8007ea6:	290a      	cmp	r1, #10
 8007ea8:	d103      	bne.n	8007eb2 <__sfputc_r+0x1e>
 8007eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eae:	f7fe ba01 	b.w	80062b4 <__swbuf_r>
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	1c58      	adds	r0, r3, #1
 8007eb6:	6010      	str	r0, [r2, #0]
 8007eb8:	7019      	strb	r1, [r3, #0]
 8007eba:	4608      	mov	r0, r1
 8007ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <__sfputs_r>:
 8007ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	460f      	mov	r7, r1
 8007ec8:	4614      	mov	r4, r2
 8007eca:	18d5      	adds	r5, r2, r3
 8007ecc:	42ac      	cmp	r4, r5
 8007ece:	d101      	bne.n	8007ed4 <__sfputs_r+0x12>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e007      	b.n	8007ee4 <__sfputs_r+0x22>
 8007ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed8:	463a      	mov	r2, r7
 8007eda:	4630      	mov	r0, r6
 8007edc:	f7ff ffda 	bl	8007e94 <__sfputc_r>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d1f3      	bne.n	8007ecc <__sfputs_r+0xa>
 8007ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ee8 <_vfiprintf_r>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	460d      	mov	r5, r1
 8007eee:	b09d      	sub	sp, #116	; 0x74
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	4698      	mov	r8, r3
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	b118      	cbz	r0, 8007f00 <_vfiprintf_r+0x18>
 8007ef8:	6983      	ldr	r3, [r0, #24]
 8007efa:	b90b      	cbnz	r3, 8007f00 <_vfiprintf_r+0x18>
 8007efc:	f7ff fa30 	bl	8007360 <__sinit>
 8007f00:	4b89      	ldr	r3, [pc, #548]	; (8008128 <_vfiprintf_r+0x240>)
 8007f02:	429d      	cmp	r5, r3
 8007f04:	d11b      	bne.n	8007f3e <_vfiprintf_r+0x56>
 8007f06:	6875      	ldr	r5, [r6, #4]
 8007f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0a:	07d9      	lsls	r1, r3, #31
 8007f0c:	d405      	bmi.n	8007f1a <_vfiprintf_r+0x32>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	059a      	lsls	r2, r3, #22
 8007f12:	d402      	bmi.n	8007f1a <_vfiprintf_r+0x32>
 8007f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f16:	f7ff fac6 	bl	80074a6 <__retarget_lock_acquire_recursive>
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	071b      	lsls	r3, r3, #28
 8007f1e:	d501      	bpl.n	8007f24 <_vfiprintf_r+0x3c>
 8007f20:	692b      	ldr	r3, [r5, #16]
 8007f22:	b9eb      	cbnz	r3, 8007f60 <_vfiprintf_r+0x78>
 8007f24:	4629      	mov	r1, r5
 8007f26:	4630      	mov	r0, r6
 8007f28:	f7fe fa16 	bl	8006358 <__swsetup_r>
 8007f2c:	b1c0      	cbz	r0, 8007f60 <_vfiprintf_r+0x78>
 8007f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f30:	07dc      	lsls	r4, r3, #31
 8007f32:	d50e      	bpl.n	8007f52 <_vfiprintf_r+0x6a>
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	b01d      	add	sp, #116	; 0x74
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	4b7b      	ldr	r3, [pc, #492]	; (800812c <_vfiprintf_r+0x244>)
 8007f40:	429d      	cmp	r5, r3
 8007f42:	d101      	bne.n	8007f48 <_vfiprintf_r+0x60>
 8007f44:	68b5      	ldr	r5, [r6, #8]
 8007f46:	e7df      	b.n	8007f08 <_vfiprintf_r+0x20>
 8007f48:	4b79      	ldr	r3, [pc, #484]	; (8008130 <_vfiprintf_r+0x248>)
 8007f4a:	429d      	cmp	r5, r3
 8007f4c:	bf08      	it	eq
 8007f4e:	68f5      	ldreq	r5, [r6, #12]
 8007f50:	e7da      	b.n	8007f08 <_vfiprintf_r+0x20>
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	0598      	lsls	r0, r3, #22
 8007f56:	d4ed      	bmi.n	8007f34 <_vfiprintf_r+0x4c>
 8007f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5a:	f7ff faa5 	bl	80074a8 <__retarget_lock_release_recursive>
 8007f5e:	e7e9      	b.n	8007f34 <_vfiprintf_r+0x4c>
 8007f60:	2300      	movs	r3, #0
 8007f62:	9309      	str	r3, [sp, #36]	; 0x24
 8007f64:	2320      	movs	r3, #32
 8007f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f6e:	2330      	movs	r3, #48	; 0x30
 8007f70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008134 <_vfiprintf_r+0x24c>
 8007f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f78:	f04f 0901 	mov.w	r9, #1
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	469a      	mov	sl, r3
 8007f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f84:	b10a      	cbz	r2, 8007f8a <_vfiprintf_r+0xa2>
 8007f86:	2a25      	cmp	r2, #37	; 0x25
 8007f88:	d1f9      	bne.n	8007f7e <_vfiprintf_r+0x96>
 8007f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f8e:	d00b      	beq.n	8007fa8 <_vfiprintf_r+0xc0>
 8007f90:	465b      	mov	r3, fp
 8007f92:	4622      	mov	r2, r4
 8007f94:	4629      	mov	r1, r5
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7ff ff93 	bl	8007ec2 <__sfputs_r>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f000 80aa 	beq.w	80080f6 <_vfiprintf_r+0x20e>
 8007fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa4:	445a      	add	r2, fp
 8007fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80a2 	beq.w	80080f6 <_vfiprintf_r+0x20e>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fbc:	f10a 0a01 	add.w	sl, sl, #1
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	9307      	str	r3, [sp, #28]
 8007fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8007fca:	4654      	mov	r4, sl
 8007fcc:	2205      	movs	r2, #5
 8007fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd2:	4858      	ldr	r0, [pc, #352]	; (8008134 <_vfiprintf_r+0x24c>)
 8007fd4:	f7f8 f904 	bl	80001e0 <memchr>
 8007fd8:	9a04      	ldr	r2, [sp, #16]
 8007fda:	b9d8      	cbnz	r0, 8008014 <_vfiprintf_r+0x12c>
 8007fdc:	06d1      	lsls	r1, r2, #27
 8007fde:	bf44      	itt	mi
 8007fe0:	2320      	movmi	r3, #32
 8007fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe6:	0713      	lsls	r3, r2, #28
 8007fe8:	bf44      	itt	mi
 8007fea:	232b      	movmi	r3, #43	; 0x2b
 8007fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff6:	d015      	beq.n	8008024 <_vfiprintf_r+0x13c>
 8007ff8:	9a07      	ldr	r2, [sp, #28]
 8007ffa:	4654      	mov	r4, sl
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f04f 0c0a 	mov.w	ip, #10
 8008002:	4621      	mov	r1, r4
 8008004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008008:	3b30      	subs	r3, #48	; 0x30
 800800a:	2b09      	cmp	r3, #9
 800800c:	d94e      	bls.n	80080ac <_vfiprintf_r+0x1c4>
 800800e:	b1b0      	cbz	r0, 800803e <_vfiprintf_r+0x156>
 8008010:	9207      	str	r2, [sp, #28]
 8008012:	e014      	b.n	800803e <_vfiprintf_r+0x156>
 8008014:	eba0 0308 	sub.w	r3, r0, r8
 8008018:	fa09 f303 	lsl.w	r3, r9, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	46a2      	mov	sl, r4
 8008022:	e7d2      	b.n	8007fca <_vfiprintf_r+0xe2>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	1d19      	adds	r1, r3, #4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	9103      	str	r1, [sp, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfbb      	ittet	lt
 8008030:	425b      	neglt	r3, r3
 8008032:	f042 0202 	orrlt.w	r2, r2, #2
 8008036:	9307      	strge	r3, [sp, #28]
 8008038:	9307      	strlt	r3, [sp, #28]
 800803a:	bfb8      	it	lt
 800803c:	9204      	strlt	r2, [sp, #16]
 800803e:	7823      	ldrb	r3, [r4, #0]
 8008040:	2b2e      	cmp	r3, #46	; 0x2e
 8008042:	d10c      	bne.n	800805e <_vfiprintf_r+0x176>
 8008044:	7863      	ldrb	r3, [r4, #1]
 8008046:	2b2a      	cmp	r3, #42	; 0x2a
 8008048:	d135      	bne.n	80080b6 <_vfiprintf_r+0x1ce>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	1d1a      	adds	r2, r3, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	9203      	str	r2, [sp, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	bfb8      	it	lt
 8008056:	f04f 33ff 	movlt.w	r3, #4294967295
 800805a:	3402      	adds	r4, #2
 800805c:	9305      	str	r3, [sp, #20]
 800805e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008144 <_vfiprintf_r+0x25c>
 8008062:	7821      	ldrb	r1, [r4, #0]
 8008064:	2203      	movs	r2, #3
 8008066:	4650      	mov	r0, sl
 8008068:	f7f8 f8ba 	bl	80001e0 <memchr>
 800806c:	b140      	cbz	r0, 8008080 <_vfiprintf_r+0x198>
 800806e:	2340      	movs	r3, #64	; 0x40
 8008070:	eba0 000a 	sub.w	r0, r0, sl
 8008074:	fa03 f000 	lsl.w	r0, r3, r0
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	4303      	orrs	r3, r0
 800807c:	3401      	adds	r4, #1
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008084:	482c      	ldr	r0, [pc, #176]	; (8008138 <_vfiprintf_r+0x250>)
 8008086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800808a:	2206      	movs	r2, #6
 800808c:	f7f8 f8a8 	bl	80001e0 <memchr>
 8008090:	2800      	cmp	r0, #0
 8008092:	d03f      	beq.n	8008114 <_vfiprintf_r+0x22c>
 8008094:	4b29      	ldr	r3, [pc, #164]	; (800813c <_vfiprintf_r+0x254>)
 8008096:	bb1b      	cbnz	r3, 80080e0 <_vfiprintf_r+0x1f8>
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	3307      	adds	r3, #7
 800809c:	f023 0307 	bic.w	r3, r3, #7
 80080a0:	3308      	adds	r3, #8
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a6:	443b      	add	r3, r7
 80080a8:	9309      	str	r3, [sp, #36]	; 0x24
 80080aa:	e767      	b.n	8007f7c <_vfiprintf_r+0x94>
 80080ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b0:	460c      	mov	r4, r1
 80080b2:	2001      	movs	r0, #1
 80080b4:	e7a5      	b.n	8008002 <_vfiprintf_r+0x11a>
 80080b6:	2300      	movs	r3, #0
 80080b8:	3401      	adds	r4, #1
 80080ba:	9305      	str	r3, [sp, #20]
 80080bc:	4619      	mov	r1, r3
 80080be:	f04f 0c0a 	mov.w	ip, #10
 80080c2:	4620      	mov	r0, r4
 80080c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c8:	3a30      	subs	r2, #48	; 0x30
 80080ca:	2a09      	cmp	r2, #9
 80080cc:	d903      	bls.n	80080d6 <_vfiprintf_r+0x1ee>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0c5      	beq.n	800805e <_vfiprintf_r+0x176>
 80080d2:	9105      	str	r1, [sp, #20]
 80080d4:	e7c3      	b.n	800805e <_vfiprintf_r+0x176>
 80080d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80080da:	4604      	mov	r4, r0
 80080dc:	2301      	movs	r3, #1
 80080de:	e7f0      	b.n	80080c2 <_vfiprintf_r+0x1da>
 80080e0:	ab03      	add	r3, sp, #12
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	462a      	mov	r2, r5
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <_vfiprintf_r+0x258>)
 80080e8:	a904      	add	r1, sp, #16
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7fd fc74 	bl	80059d8 <_printf_float>
 80080f0:	4607      	mov	r7, r0
 80080f2:	1c78      	adds	r0, r7, #1
 80080f4:	d1d6      	bne.n	80080a4 <_vfiprintf_r+0x1bc>
 80080f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f8:	07d9      	lsls	r1, r3, #31
 80080fa:	d405      	bmi.n	8008108 <_vfiprintf_r+0x220>
 80080fc:	89ab      	ldrh	r3, [r5, #12]
 80080fe:	059a      	lsls	r2, r3, #22
 8008100:	d402      	bmi.n	8008108 <_vfiprintf_r+0x220>
 8008102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008104:	f7ff f9d0 	bl	80074a8 <__retarget_lock_release_recursive>
 8008108:	89ab      	ldrh	r3, [r5, #12]
 800810a:	065b      	lsls	r3, r3, #25
 800810c:	f53f af12 	bmi.w	8007f34 <_vfiprintf_r+0x4c>
 8008110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008112:	e711      	b.n	8007f38 <_vfiprintf_r+0x50>
 8008114:	ab03      	add	r3, sp, #12
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	462a      	mov	r2, r5
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <_vfiprintf_r+0x258>)
 800811c:	a904      	add	r1, sp, #16
 800811e:	4630      	mov	r0, r6
 8008120:	f7fd fefe 	bl	8005f20 <_printf_i>
 8008124:	e7e4      	b.n	80080f0 <_vfiprintf_r+0x208>
 8008126:	bf00      	nop
 8008128:	080085f8 	.word	0x080085f8
 800812c:	08008618 	.word	0x08008618
 8008130:	080085d8 	.word	0x080085d8
 8008134:	08008794 	.word	0x08008794
 8008138:	0800879e 	.word	0x0800879e
 800813c:	080059d9 	.word	0x080059d9
 8008140:	08007ec3 	.word	0x08007ec3
 8008144:	0800879a 	.word	0x0800879a

08008148 <_putc_r>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	460d      	mov	r5, r1
 800814c:	4614      	mov	r4, r2
 800814e:	4606      	mov	r6, r0
 8008150:	b118      	cbz	r0, 800815a <_putc_r+0x12>
 8008152:	6983      	ldr	r3, [r0, #24]
 8008154:	b90b      	cbnz	r3, 800815a <_putc_r+0x12>
 8008156:	f7ff f903 	bl	8007360 <__sinit>
 800815a:	4b1c      	ldr	r3, [pc, #112]	; (80081cc <_putc_r+0x84>)
 800815c:	429c      	cmp	r4, r3
 800815e:	d124      	bne.n	80081aa <_putc_r+0x62>
 8008160:	6874      	ldr	r4, [r6, #4]
 8008162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008164:	07d8      	lsls	r0, r3, #31
 8008166:	d405      	bmi.n	8008174 <_putc_r+0x2c>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	0599      	lsls	r1, r3, #22
 800816c:	d402      	bmi.n	8008174 <_putc_r+0x2c>
 800816e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008170:	f7ff f999 	bl	80074a6 <__retarget_lock_acquire_recursive>
 8008174:	68a3      	ldr	r3, [r4, #8]
 8008176:	3b01      	subs	r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	60a3      	str	r3, [r4, #8]
 800817c:	da05      	bge.n	800818a <_putc_r+0x42>
 800817e:	69a2      	ldr	r2, [r4, #24]
 8008180:	4293      	cmp	r3, r2
 8008182:	db1c      	blt.n	80081be <_putc_r+0x76>
 8008184:	b2eb      	uxtb	r3, r5
 8008186:	2b0a      	cmp	r3, #10
 8008188:	d019      	beq.n	80081be <_putc_r+0x76>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	6022      	str	r2, [r4, #0]
 8008190:	701d      	strb	r5, [r3, #0]
 8008192:	b2ed      	uxtb	r5, r5
 8008194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008196:	07da      	lsls	r2, r3, #31
 8008198:	d405      	bmi.n	80081a6 <_putc_r+0x5e>
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	059b      	lsls	r3, r3, #22
 800819e:	d402      	bmi.n	80081a6 <_putc_r+0x5e>
 80081a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a2:	f7ff f981 	bl	80074a8 <__retarget_lock_release_recursive>
 80081a6:	4628      	mov	r0, r5
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <_putc_r+0x88>)
 80081ac:	429c      	cmp	r4, r3
 80081ae:	d101      	bne.n	80081b4 <_putc_r+0x6c>
 80081b0:	68b4      	ldr	r4, [r6, #8]
 80081b2:	e7d6      	b.n	8008162 <_putc_r+0x1a>
 80081b4:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <_putc_r+0x8c>)
 80081b6:	429c      	cmp	r4, r3
 80081b8:	bf08      	it	eq
 80081ba:	68f4      	ldreq	r4, [r6, #12]
 80081bc:	e7d1      	b.n	8008162 <_putc_r+0x1a>
 80081be:	4629      	mov	r1, r5
 80081c0:	4622      	mov	r2, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7fe f876 	bl	80062b4 <__swbuf_r>
 80081c8:	4605      	mov	r5, r0
 80081ca:	e7e3      	b.n	8008194 <_putc_r+0x4c>
 80081cc:	080085f8 	.word	0x080085f8
 80081d0:	08008618 	.word	0x08008618
 80081d4:	080085d8 	.word	0x080085d8

080081d8 <_sbrk_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_sbrk_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f9 fc16 	bl	8001a14 <_sbrk>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_sbrk_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_sbrk_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20000480 	.word	0x20000480

080081f8 <__sread>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	460c      	mov	r4, r1
 80081fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008200:	f000 f8e2 	bl	80083c8 <_read_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	bfab      	itete	ge
 8008208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800820a:	89a3      	ldrhlt	r3, [r4, #12]
 800820c:	181b      	addge	r3, r3, r0
 800820e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008212:	bfac      	ite	ge
 8008214:	6563      	strge	r3, [r4, #84]	; 0x54
 8008216:	81a3      	strhlt	r3, [r4, #12]
 8008218:	bd10      	pop	{r4, pc}

0800821a <__swrite>:
 800821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821e:	461f      	mov	r7, r3
 8008220:	898b      	ldrh	r3, [r1, #12]
 8008222:	05db      	lsls	r3, r3, #23
 8008224:	4605      	mov	r5, r0
 8008226:	460c      	mov	r4, r1
 8008228:	4616      	mov	r6, r2
 800822a:	d505      	bpl.n	8008238 <__swrite+0x1e>
 800822c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008230:	2302      	movs	r3, #2
 8008232:	2200      	movs	r2, #0
 8008234:	f000 f898 	bl	8008368 <_lseek_r>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800823e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	4632      	mov	r2, r6
 8008246:	463b      	mov	r3, r7
 8008248:	4628      	mov	r0, r5
 800824a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	f000 b817 	b.w	8008280 <_write_r>

08008252 <__sseek>:
 8008252:	b510      	push	{r4, lr}
 8008254:	460c      	mov	r4, r1
 8008256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825a:	f000 f885 	bl	8008368 <_lseek_r>
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	bf15      	itete	ne
 8008264:	6560      	strne	r0, [r4, #84]	; 0x54
 8008266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800826a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800826e:	81a3      	strheq	r3, [r4, #12]
 8008270:	bf18      	it	ne
 8008272:	81a3      	strhne	r3, [r4, #12]
 8008274:	bd10      	pop	{r4, pc}

08008276 <__sclose>:
 8008276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827a:	f000 b831 	b.w	80082e0 <_close_r>
	...

08008280 <_write_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d07      	ldr	r5, [pc, #28]	; (80082a0 <_write_r+0x20>)
 8008284:	4604      	mov	r4, r0
 8008286:	4608      	mov	r0, r1
 8008288:	4611      	mov	r1, r2
 800828a:	2200      	movs	r2, #0
 800828c:	602a      	str	r2, [r5, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	f7f9 fb6f 	bl	8001972 <_write>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_write_r+0x1e>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_write_r+0x1e>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	20000480 	.word	0x20000480

080082a4 <__assert_func>:
 80082a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082a6:	4614      	mov	r4, r2
 80082a8:	461a      	mov	r2, r3
 80082aa:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <__assert_func+0x2c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4605      	mov	r5, r0
 80082b0:	68d8      	ldr	r0, [r3, #12]
 80082b2:	b14c      	cbz	r4, 80082c8 <__assert_func+0x24>
 80082b4:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <__assert_func+0x30>)
 80082b6:	9100      	str	r1, [sp, #0]
 80082b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082bc:	4906      	ldr	r1, [pc, #24]	; (80082d8 <__assert_func+0x34>)
 80082be:	462b      	mov	r3, r5
 80082c0:	f000 f81e 	bl	8008300 <fiprintf>
 80082c4:	f000 f89f 	bl	8008406 <abort>
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <__assert_func+0x38>)
 80082ca:	461c      	mov	r4, r3
 80082cc:	e7f3      	b.n	80082b6 <__assert_func+0x12>
 80082ce:	bf00      	nop
 80082d0:	2000000c 	.word	0x2000000c
 80082d4:	080087a5 	.word	0x080087a5
 80082d8:	080087b2 	.word	0x080087b2
 80082dc:	080087e0 	.word	0x080087e0

080082e0 <_close_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d06      	ldr	r5, [pc, #24]	; (80082fc <_close_r+0x1c>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	f7f9 fb5d 	bl	80019aa <_close>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_close_r+0x1a>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_close_r+0x1a>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20000480 	.word	0x20000480

08008300 <fiprintf>:
 8008300:	b40e      	push	{r1, r2, r3}
 8008302:	b503      	push	{r0, r1, lr}
 8008304:	4601      	mov	r1, r0
 8008306:	ab03      	add	r3, sp, #12
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <fiprintf+0x20>)
 800830a:	f853 2b04 	ldr.w	r2, [r3], #4
 800830e:	6800      	ldr	r0, [r0, #0]
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	f7ff fde9 	bl	8007ee8 <_vfiprintf_r>
 8008316:	b002      	add	sp, #8
 8008318:	f85d eb04 	ldr.w	lr, [sp], #4
 800831c:	b003      	add	sp, #12
 800831e:	4770      	bx	lr
 8008320:	2000000c 	.word	0x2000000c

08008324 <_fstat_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	; (8008344 <_fstat_r+0x20>)
 8008328:	2300      	movs	r3, #0
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	4611      	mov	r1, r2
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	f7f9 fb46 	bl	80019c2 <_fstat>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d102      	bne.n	8008340 <_fstat_r+0x1c>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	b103      	cbz	r3, 8008340 <_fstat_r+0x1c>
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	20000480 	.word	0x20000480

08008348 <_isatty_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d06      	ldr	r5, [pc, #24]	; (8008364 <_isatty_r+0x1c>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7f9 fb45 	bl	80019e2 <_isatty>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_isatty_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_isatty_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000480 	.word	0x20000480

08008368 <_lseek_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d07      	ldr	r5, [pc, #28]	; (8008388 <_lseek_r+0x20>)
 800836c:	4604      	mov	r4, r0
 800836e:	4608      	mov	r0, r1
 8008370:	4611      	mov	r1, r2
 8008372:	2200      	movs	r2, #0
 8008374:	602a      	str	r2, [r5, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f7f9 fb3e 	bl	80019f8 <_lseek>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_lseek_r+0x1e>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_lseek_r+0x1e>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	20000480 	.word	0x20000480

0800838c <__ascii_mbtowc>:
 800838c:	b082      	sub	sp, #8
 800838e:	b901      	cbnz	r1, 8008392 <__ascii_mbtowc+0x6>
 8008390:	a901      	add	r1, sp, #4
 8008392:	b142      	cbz	r2, 80083a6 <__ascii_mbtowc+0x1a>
 8008394:	b14b      	cbz	r3, 80083aa <__ascii_mbtowc+0x1e>
 8008396:	7813      	ldrb	r3, [r2, #0]
 8008398:	600b      	str	r3, [r1, #0]
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	1e10      	subs	r0, r2, #0
 800839e:	bf18      	it	ne
 80083a0:	2001      	movne	r0, #1
 80083a2:	b002      	add	sp, #8
 80083a4:	4770      	bx	lr
 80083a6:	4610      	mov	r0, r2
 80083a8:	e7fb      	b.n	80083a2 <__ascii_mbtowc+0x16>
 80083aa:	f06f 0001 	mvn.w	r0, #1
 80083ae:	e7f8      	b.n	80083a2 <__ascii_mbtowc+0x16>

080083b0 <__malloc_lock>:
 80083b0:	4801      	ldr	r0, [pc, #4]	; (80083b8 <__malloc_lock+0x8>)
 80083b2:	f7ff b878 	b.w	80074a6 <__retarget_lock_acquire_recursive>
 80083b6:	bf00      	nop
 80083b8:	20000474 	.word	0x20000474

080083bc <__malloc_unlock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <__malloc_unlock+0x8>)
 80083be:	f7ff b873 	b.w	80074a8 <__retarget_lock_release_recursive>
 80083c2:	bf00      	nop
 80083c4:	20000474 	.word	0x20000474

080083c8 <_read_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d07      	ldr	r5, [pc, #28]	; (80083e8 <_read_r+0x20>)
 80083cc:	4604      	mov	r4, r0
 80083ce:	4608      	mov	r0, r1
 80083d0:	4611      	mov	r1, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7f9 faae 	bl	8001938 <_read>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_read_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_read_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000480 	.word	0x20000480

080083ec <__ascii_wctomb>:
 80083ec:	b149      	cbz	r1, 8008402 <__ascii_wctomb+0x16>
 80083ee:	2aff      	cmp	r2, #255	; 0xff
 80083f0:	bf85      	ittet	hi
 80083f2:	238a      	movhi	r3, #138	; 0x8a
 80083f4:	6003      	strhi	r3, [r0, #0]
 80083f6:	700a      	strbls	r2, [r1, #0]
 80083f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80083fc:	bf98      	it	ls
 80083fe:	2001      	movls	r0, #1
 8008400:	4770      	bx	lr
 8008402:	4608      	mov	r0, r1
 8008404:	4770      	bx	lr

08008406 <abort>:
 8008406:	b508      	push	{r3, lr}
 8008408:	2006      	movs	r0, #6
 800840a:	f000 f82b 	bl	8008464 <raise>
 800840e:	2001      	movs	r0, #1
 8008410:	f7f9 fa88 	bl	8001924 <_exit>

08008414 <_raise_r>:
 8008414:	291f      	cmp	r1, #31
 8008416:	b538      	push	{r3, r4, r5, lr}
 8008418:	4604      	mov	r4, r0
 800841a:	460d      	mov	r5, r1
 800841c:	d904      	bls.n	8008428 <_raise_r+0x14>
 800841e:	2316      	movs	r3, #22
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800842a:	b112      	cbz	r2, 8008432 <_raise_r+0x1e>
 800842c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008430:	b94b      	cbnz	r3, 8008446 <_raise_r+0x32>
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f830 	bl	8008498 <_getpid_r>
 8008438:	462a      	mov	r2, r5
 800843a:	4601      	mov	r1, r0
 800843c:	4620      	mov	r0, r4
 800843e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008442:	f000 b817 	b.w	8008474 <_kill_r>
 8008446:	2b01      	cmp	r3, #1
 8008448:	d00a      	beq.n	8008460 <_raise_r+0x4c>
 800844a:	1c59      	adds	r1, r3, #1
 800844c:	d103      	bne.n	8008456 <_raise_r+0x42>
 800844e:	2316      	movs	r3, #22
 8008450:	6003      	str	r3, [r0, #0]
 8008452:	2001      	movs	r0, #1
 8008454:	e7e7      	b.n	8008426 <_raise_r+0x12>
 8008456:	2400      	movs	r4, #0
 8008458:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800845c:	4628      	mov	r0, r5
 800845e:	4798      	blx	r3
 8008460:	2000      	movs	r0, #0
 8008462:	e7e0      	b.n	8008426 <_raise_r+0x12>

08008464 <raise>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <raise+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f7ff bfd3 	b.w	8008414 <_raise_r>
 800846e:	bf00      	nop
 8008470:	2000000c 	.word	0x2000000c

08008474 <_kill_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d07      	ldr	r5, [pc, #28]	; (8008494 <_kill_r+0x20>)
 8008478:	2300      	movs	r3, #0
 800847a:	4604      	mov	r4, r0
 800847c:	4608      	mov	r0, r1
 800847e:	4611      	mov	r1, r2
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	f7f9 fa3f 	bl	8001904 <_kill>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	d102      	bne.n	8008490 <_kill_r+0x1c>
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	b103      	cbz	r3, 8008490 <_kill_r+0x1c>
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	bd38      	pop	{r3, r4, r5, pc}
 8008492:	bf00      	nop
 8008494:	20000480 	.word	0x20000480

08008498 <_getpid_r>:
 8008498:	f7f9 ba2c 	b.w	80018f4 <_getpid>

0800849c <_init>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr

080084a8 <_fini>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr
