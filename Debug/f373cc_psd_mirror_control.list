
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000827c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008410  08008410  00018410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a4  080088a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080088a4  080088a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088a4  080088a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080088ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001dc  08008a88  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08008a88  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cc4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212e  00000000  00000000  00030ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00033ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d467  00000000  00000000  00034cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122d4  00000000  00000000  0005215f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab801  00000000  00000000  00064433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fc34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005034  00000000  00000000  0010fc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083f4 	.word	0x080083f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080083f4 	.word	0x080083f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f001 f86f 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f8c3 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 fab1 	bl	800111c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bba:	f000 f919 	bl	8000df0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bbe:	f000 f955 	bl	8000e6c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000bc2:	f000 fa7b 	bl	80010bc <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc6:	f000 f9b3 	bl	8000f30 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bca:	f000 f9ff 	bl	8000fcc <MX_TIM16_Init>
  MX_TIM13_Init();
 8000bce:	f000 f98b 	bl	8000ee8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  /* @important DIABLE HIGH VOLTAGE MEMS DRIVER !
   * @see   p. 24 of MEMS_Drivers_5.x_User_Guide.pdf
   * @note  ACTIVE HIGH --> LOW = disabled */
  HAL_GPIO_WritePin(MEMS_HV_EN_GPIO_Port, MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f001 fb6e 	bl	80022bc <HAL_GPIO_WritePin>

  printf("boink\n");
 8000be0:	484a      	ldr	r0, [pc, #296]	; (8000d0c <main+0x164>)
 8000be2:	f005 fb0b 	bl	80061fc <puts>

  // start MEMS FCLK_X
  HAL_TIM_Base_Start(&htim14);
 8000be6:	484a      	ldr	r0, [pc, #296]	; (8000d10 <main+0x168>)
 8000be8:	f003 fd7a 	bl	80046e0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim14, TIM_CHANNEL_1);
 8000bec:	2100      	movs	r1, #0
 8000bee:	4848      	ldr	r0, [pc, #288]	; (8000d10 <main+0x168>)
 8000bf0:	f003 fe30 	bl	8004854 <HAL_TIM_OC_Start>
  //htim14.Instance->CCR1 = 2;

  // start MEMS FCLK_Y
  HAL_TIM_Base_Start(&htim16);
 8000bf4:	4847      	ldr	r0, [pc, #284]	; (8000d14 <main+0x16c>)
 8000bf6:	f003 fd73 	bl	80046e0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4845      	ldr	r0, [pc, #276]	; (8000d14 <main+0x16c>)
 8000bfe:	f003 fe29 	bl	8004854 <HAL_TIM_OC_Start>
  //htim16.Instance->CCR1 = 2;
  HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 f8aa 	bl	8001d5c <HAL_Delay>

  MCP3561_Reset(&hspi1);
 8000c08:	4843      	ldr	r0, [pc, #268]	; (8000d18 <main+0x170>)
 8000c0a:	f000 fff3 	bl	8001bf4 <MCP3561_Reset>
  HAL_Delay(10);
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f001 f8a4 	bl	8001d5c <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c14:	4840      	ldr	r0, [pc, #256]	; (8000d18 <main+0x170>)
 8000c16:	f000 ff73 	bl	8001b00 <MCP3561_PrintRegisters>
  printf("\n");
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f005 fa6a 	bl	80060f4 <putchar>

  // @note configure the chip inside the Init() function
  MCP3561_Init(&hspi1);
 8000c20:	483d      	ldr	r0, [pc, #244]	; (8000d18 <main+0x170>)
 8000c22:	f000 fef8 	bl	8001a16 <MCP3561_Init>
  printf("\n");
 8000c26:	200a      	movs	r0, #10
 8000c28:	f005 fa64 	bl	80060f4 <putchar>
  HAL_Delay(10);
 8000c2c:	200a      	movs	r0, #10
 8000c2e:	f001 f895 	bl	8001d5c <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c32:	4839      	ldr	r0, [pc, #228]	; (8000d18 <main+0x170>)
 8000c34:	f000 ff64 	bl	8001b00 <MCP3561_PrintRegisters>
  printf("\n");
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f005 fa5b 	bl	80060f4 <putchar>


  setup_done = true;
 8000c3e:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <main+0x174>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
   * 2097167 Decimal or 0x20000F to command ENABLE ALL DAC CHANNELS
   * 3145728 Decimal or 0x300000 to command ENABLE SOFTWARE LDAC
   */

  uint8_t dac_data[8];
  dac_data[0] = 0x28;
 8000c44:	2328      	movs	r3, #40	; 0x28
 8000c46:	703b      	strb	r3, [r7, #0]
  dac_data[1] = 0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	707b      	strb	r3, [r7, #1]
  dac_data[2] = 0x01;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	70bb      	strb	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // FULL RESET
 8000c50:	4639      	mov	r1, r7
 8000c52:	230a      	movs	r3, #10
 8000c54:	2203      	movs	r2, #3
 8000c56:	4832      	ldr	r0, [pc, #200]	; (8000d20 <main+0x178>)
 8000c58:	f003 f80d 	bl	8003c76 <HAL_SPI_Transmit>
  dac_data[0] = 0x38;
 8000c5c:	2338      	movs	r3, #56	; 0x38
 8000c5e:	703b      	strb	r3, [r7, #0]
  dac_data[1] = 0x00;
 8000c60:	2300      	movs	r3, #0
 8000c62:	707b      	strb	r3, [r7, #1]
  dac_data[2] = 0x01;
 8000c64:	2301      	movs	r3, #1
 8000c66:	70bb      	strb	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // ENABLE INTERNAL REFERENCE
 8000c68:	4639      	mov	r1, r7
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	482c      	ldr	r0, [pc, #176]	; (8000d20 <main+0x178>)
 8000c70:	f003 f801 	bl	8003c76 <HAL_SPI_Transmit>
  dac_data[0] = 0x20;
 8000c74:	2320      	movs	r3, #32
 8000c76:	703b      	strb	r3, [r7, #0]
  dac_data[1] = 0x00;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	707b      	strb	r3, [r7, #1]
  dac_data[2] = 0x0F;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	70bb      	strb	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // ENABLE ALL DAC CHANNELS
 8000c80:	4639      	mov	r1, r7
 8000c82:	230a      	movs	r3, #10
 8000c84:	2203      	movs	r2, #3
 8000c86:	4826      	ldr	r0, [pc, #152]	; (8000d20 <main+0x178>)
 8000c88:	f002 fff5 	bl	8003c76 <HAL_SPI_Transmit>
  dac_data[0] = 0x30;
 8000c8c:	2330      	movs	r3, #48	; 0x30
 8000c8e:	703b      	strb	r3, [r7, #0]
  dac_data[1] = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	707b      	strb	r3, [r7, #1]
  dac_data[2] = 0x00;
 8000c94:	2300      	movs	r3, #0
 8000c96:	70bb      	strb	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // ENABLE SOFTWARE LDAC
 8000c98:	4639      	mov	r1, r7
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <main+0x178>)
 8000ca0:	f002 ffe9 	bl	8003c76 <HAL_SPI_Transmit>
	   * CONF3: d0
	   * IRQ  : 37
	   * MUX  : 01
	   */
	  //printf("\n");
	  HAL_Delay(1000);
 8000ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca8:	f001 f858 	bl	8001d5c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	481d      	ldr	r0, [pc, #116]	; (8000d24 <main+0x17c>)
 8000cb0:	f001 fb1c 	bl	80022ec <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	481b      	ldr	r0, [pc, #108]	; (8000d24 <main+0x17c>)
 8000cb8:	f001 fb18 	bl	80022ec <HAL_GPIO_TogglePin>

	  adc_val = MCP3561_ReadADCData(&hspi1);
 8000cbc:	4816      	ldr	r0, [pc, #88]	; (8000d18 <main+0x170>)
 8000cbe:	f000 ffab 	bl	8001c18 <MCP3561_ReadADCData>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <main+0x180>)
 8000cc6:	6013      	str	r3, [r2, #0]
	  adc_volts = ((float)adc_val)*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <main+0x180>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cd8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000d2c <main+0x184>
 8000cdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ce0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000d30 <main+0x188>
 8000ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <main+0x18c>)
 8000cea:	edc3 7a00 	vstr	s15, [r3]

	  printf("%d %.5f V\n", (int)adc_val, adc_volts);  // updated in ISR
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <main+0x180>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	461c      	mov	r4, r3
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <main+0x18c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fc25 	bl	8000548 <__aeabi_f2d>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4621      	mov	r1, r4
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <main+0x190>)
 8000d06:	f005 f9dd 	bl	80060c4 <iprintf>
	  HAL_Delay(1000);
 8000d0a:	e7cb      	b.n	8000ca4 <main+0xfc>
 8000d0c:	08008410 	.word	0x08008410
 8000d10:	2000030c 	.word	0x2000030c
 8000d14:	20000358 	.word	0x20000358
 8000d18:	200001f8 	.word	0x200001f8
 8000d1c:	2000042c 	.word	0x2000042c
 8000d20:	2000025c 	.word	0x2000025c
 8000d24:	48000400 	.word	0x48000400
 8000d28:	20000428 	.word	0x20000428
 8000d2c:	40251eb8 	.word	0x40251eb8
 8000d30:	4b7fffff 	.word	0x4b7fffff
 8000d34:	20000430 	.word	0x20000430
 8000d38:	08008418 	.word	0x08008418

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09a      	sub	sp, #104	; 0x68
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fd48 	bl	80057e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	222c      	movs	r2, #44	; 0x2c
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fd3a 	bl	80057e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d86:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d88:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d8c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fadc 	bl	8002350 <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d9e:	f000 fb0b 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fb04 	bl	80033cc <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dca:	f000 faf5 	bl	80013b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fd2d 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000de4:	f000 fae8 	bl	80013b8 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3768      	adds	r7, #104	; 0x68
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <MX_SPI1_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e26:	2210      	movs	r2, #16
 8000e28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e3e:	2207      	movs	r2, #7
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_SPI1_Init+0x74>)
 8000e50:	f002 fe66 	bl	8003b20 <HAL_SPI_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 faad 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001f8 	.word	0x200001f8
 8000e68:	40013000 	.word	0x40013000

08000e6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_SPI2_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000e80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e84:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000e88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000ec8:	2208      	movs	r2, #8
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_SPI2_Init+0x74>)
 8000ece:	f002 fe27 	bl	8003b20 <HAL_SPI_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000ed8:	f000 fa6e 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000025c 	.word	0x2000025c
 8000ee4:	40003800 	.word	0x40003800

08000ee8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_TIM13_Init+0x40>)
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <MX_TIM13_Init+0x44>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_TIM13_Init+0x40>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_TIM13_Init+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = TIM13_COUNT_PERIOD;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_TIM13_Init+0x40>)
 8000f00:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f04:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_TIM13_Init+0x40>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_TIM13_Init+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM13_Init+0x40>)
 8000f14:	f003 fb94 	bl	8004640 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000f1e:	f000 fa4b 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200002c0 	.word	0x200002c0
 8000f2c:	40001c00 	.word	0x40001c00

08000f30 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	615a      	str	r2, [r3, #20]
 8000f46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <MX_TIM14_Init+0x98>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = TIM14_COUNT_PERIOD;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f5c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000f60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f70:	f003 fb66 	bl	8004640 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000f7a:	f000 fa1d 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000f80:	f003 fc0e 	bl	80047a0 <HAL_TIM_OC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000f8a:	f000 fa15 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f8e:	2330      	movs	r3, #48	; 0x30
 8000f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000fa6:	f003 fd1f 	bl	80049e8 <HAL_TIM_OC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000fb0:	f000 fa02 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM14_Init+0x94>)
 8000fb6:	f000 fb21 	bl	80015fc <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000030c 	.word	0x2000030c
 8000fc8:	40002000 	.word	0x40002000

08000fcc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b090      	sub	sp, #64	; 0x40
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2220      	movs	r2, #32
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f004 fbf7 	bl	80057e0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8000ff4:	4a30      	ldr	r2, [pc, #192]	; (80010b8 <MX_TIM16_Init+0xec>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_COUNT_PERIOD;
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8001006:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800100a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_TIM16_Init+0xe8>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_TIM16_Init+0xe8>)
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800101e:	4825      	ldr	r0, [pc, #148]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8001020:	f003 fb0e 	bl	8004640 <HAL_TIM_Base_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800102a:	f000 f9c5 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800102e:	4821      	ldr	r0, [pc, #132]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8001030:	f003 fbb6 	bl	80047a0 <HAL_TIM_OC_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800103a:	f000 f9bd 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800103e:	2330      	movs	r3, #48	; 0x30
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8001064:	f003 fcc0 	bl	80049e8 <HAL_TIM_OC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800106e:	f000 f9a3 	bl	80013b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <MX_TIM16_Init+0xe8>)
 8001096:	f003 ff1b 	bl	8004ed0 <HAL_TIMEx_ConfigBreakDeadTime>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80010a0:	f000 f98a 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <MX_TIM16_Init+0xe8>)
 80010a6:	f000 faa9 	bl	80015fc <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3740      	adds	r7, #64	; 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000358 	.word	0x20000358
 80010b8:	40014400 	.word	0x40014400

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MX_USART2_UART_Init+0x5c>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_USART2_UART_Init+0x58>)
 8001100:	f003 ff38 	bl	8004f74 <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800110a:	f000 f955 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200003a4 	.word	0x200003a4
 8001118:	40004400 	.word	0x40004400

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a50      	ldr	r2, [pc, #320]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <MX_GPIO_Init+0x15c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	6153      	str	r3, [r2, #20]
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b45      	ldr	r3, [pc, #276]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4a44      	ldr	r2, [pc, #272]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116c:	6153      	str	r3, [r2, #20]
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <MX_GPIO_Init+0x15c>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a3e      	ldr	r2, [pc, #248]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119c:	f001 f88e 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f244 01c0 	movw	r1, #16576	; 0x40c0
 80011a6:	4835      	ldr	r0, [pc, #212]	; (800127c <MX_GPIO_Init+0x160>)
 80011a8:	f001 f888 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011ac:	2310      	movs	r3, #16
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f000 feff 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 80011ca:	2302      	movs	r3, #2
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4827      	ldr	r0, [pc, #156]	; (800127c <MX_GPIO_Init+0x160>)
 80011e0:	f000 fef2 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80011e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <MX_GPIO_Init+0x160>)
 80011fe:	f000 fee3 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 8001202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f000 fed3 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4810      	ldr	r0, [pc, #64]	; (800127c <MX_GPIO_Init+0x160>)
 800123a:	f000 fec5 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_GPIO_Init+0x160>)
 800125c:	f000 feb4 	bl	8001fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2007      	movs	r0, #7
 8001266:	f000 fe78 	bl	8001f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800126a:	2007      	movs	r0, #7
 800126c:	f000 fe91 	bl	8001f92 <HAL_NVIC_EnableIRQ>

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	; 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	48000400 	.word	0x48000400

08001280 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128e:	2201      	movs	r2, #1
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <__io_putchar+0x20>)
 8001292:	f003 febd 	bl	8005010 <HAL_UART_Transmit>

    return ch;
 8001296:	687b      	ldr	r3, [r7, #4]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200003a4 	.word	0x200003a4

080012a4 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
	/* @todo correct EXTI pin */
    if ( GPIO_Pin == GPIO_PIN_6) {
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2b40      	cmp	r3, #64	; 0x40
 80012b2:	d171      	bne.n	8001398 <HAL_GPIO_EXTI_Callback+0xf4>
    	if(setup_done){
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_GPIO_EXTI_Callback+0xfc>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_GPIO_EXTI_Callback+0xf4>
    		uint8_t val[5] = {0,0,0,0,0};
 80012be:	4a39      	ldr	r2, [pc, #228]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x100>)
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c8:	6018      	str	r0, [r3, #0]
 80012ca:	3304      	adds	r3, #4
 80012cc:	7019      	strb	r1, [r3, #0]
    		uint8_t cmd[5] = {0,0,0,0,0};
 80012ce:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x100>)
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d8:	6018      	str	r0, [r3, #0]
 80012da:	3304      	adds	r3, #4
 80012dc:	7019      	strb	r1, [r3, #0]
    		cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 80012de:	2341      	movs	r3, #65	; 0x41
 80012e0:	753b      	strb	r3, [r7, #20]
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2110      	movs	r1, #16
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f000 ffe7 	bl	80022bc <HAL_GPIO_WritePin>
    		// non-blocking "HAL_SPI_TransmitReceive_IT" does not work
    		// because we need to create CS signal manually
    		// the timout therefore must not be greater than 1/fs
    		// e.g. at 300 Hz --> 3ms
    		HAL_SPI_TransmitReceive(&hspi1, &cmd[0], &val[0], 5, 1);
 80012ee:	f107 021c 	add.w	r2, r7, #28
 80012f2:	f107 0114 	add.w	r1, r7, #20
 80012f6:	2301      	movs	r3, #1
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2305      	movs	r3, #5
 80012fc:	482a      	ldr	r0, [pc, #168]	; (80013a8 <HAL_GPIO_EXTI_Callback+0x104>)
 80012fe:	f002 fe28 	bl	8003f52 <HAL_SPI_TransmitReceive>
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	2110      	movs	r1, #16
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f000 ffd7 	bl	80022bc <HAL_GPIO_WritePin>
    		adc_val = (val[1] << 16) | (val[2] << 8) | val[3];
 800130e:	7f7b      	ldrb	r3, [r7, #29]
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	7fbb      	ldrb	r3, [r7, #30]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	4313      	orrs	r3, r2
 8001318:	7ffa      	ldrb	r2, [r7, #31]
 800131a:	4313      	orrs	r3, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_GPIO_EXTI_Callback+0x108>)
 8001320:	601a      	str	r2, [r3, #0]

    		float volts = (float)adc_val/(8388607.0f)*3.3f;
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_GPIO_EXTI_Callback+0x108>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800132e:	eddf 6a20 	vldr	s13, [pc, #128]	; 80013b0 <HAL_GPIO_EXTI_Callback+0x10c>
 8001332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001336:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80013b4 <HAL_GPIO_EXTI_Callback+0x110>
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    		uint8_t str[11];
    		for(int i=0; i<10; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001346:	e008      	b.n	800135a <HAL_GPIO_EXTI_Callback+0xb6>
    			str[i] = ' ';
 8001348:	f107 0208 	add.w	r2, r7, #8
 800134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134e:	4413      	add	r3, r2
 8001350:	2220      	movs	r2, #32
 8001352:	701a      	strb	r2, [r3, #0]
    		for(int i=0; i<10; i++)
 8001354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001356:	3301      	adds	r3, #1
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	2b09      	cmp	r3, #9
 800135e:	ddf3      	ble.n	8001348 <HAL_GPIO_EXTI_Callback+0xa4>
    		int i = (int)(volts*9.0f/3.3f);
 8001360:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001364:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001368:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136c:	eddf 6a11 	vldr	s13, [pc, #68]	; 80013b4 <HAL_GPIO_EXTI_Callback+0x110>
 8001370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001378:	ee17 3a90 	vmov	r3, s15
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    		str[i] = '#';
 800137e:	f107 0208 	add.w	r2, r7, #8
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	4413      	add	r3, r2
 8001386:	2223      	movs	r2, #35	; 0x23
 8001388:	701a      	strb	r2, [r3, #0]
    		str[11] = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	74fb      	strb	r3, [r7, #19]
    		printf("%s\n", str);
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4618      	mov	r0, r3
 8001394:	f004 ff32 	bl	80061fc <puts>
    		//printf("%03f\n", volts);
    		//printf("%d\n", (int)adc_val);  // updated in ISR
    	}
    }
}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000042c 	.word	0x2000042c
 80013a4:	08008424 	.word	0x08008424
 80013a8:	200001f8 	.word	0x200001f8
 80013ac:	20000428 	.word	0x20000428
 80013b0:	4afffffe 	.word	0x4afffffe
 80013b4:	40533333 	.word	0x40533333

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x44>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x44>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_SPI_MspInit+0x14c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d145      	bne.n	80014ba <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <HAL_SPI_MspInit+0x150>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a4a      	ldr	r2, [pc, #296]	; (800155c <HAL_SPI_MspInit+0x150>)
 8001434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <HAL_SPI_MspInit+0x150>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001442:	623b      	str	r3, [r7, #32]
 8001444:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b45      	ldr	r3, [pc, #276]	; (800155c <HAL_SPI_MspInit+0x150>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a44      	ldr	r2, [pc, #272]	; (800155c <HAL_SPI_MspInit+0x150>)
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	6153      	str	r3, [r2, #20]
 8001452:	4b42      	ldr	r3, [pc, #264]	; (800155c <HAL_SPI_MspInit+0x150>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_SPI_MspInit+0x150>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a3e      	ldr	r2, [pc, #248]	; (800155c <HAL_SPI_MspInit+0x150>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6153      	str	r3, [r2, #20]
 800146a:	4b3c      	ldr	r3, [pc, #240]	; (800155c <HAL_SPI_MspInit+0x150>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001476:	2360      	movs	r3, #96	; 0x60
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001486:	2305      	movs	r3, #5
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f000 fd98 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001498:	2301      	movs	r3, #1
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a8:	2305      	movs	r3, #5
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	482b      	ldr	r0, [pc, #172]	; (8001560 <HAL_SPI_MspInit+0x154>)
 80014b4:	f000 fd88 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014b8:	e04a      	b.n	8001550 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <HAL_SPI_MspInit+0x158>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d145      	bne.n	8001550 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	61d3      	str	r3, [r2, #28]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e6:	6153      	str	r3, [r2, #20]
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_SPI_MspInit+0x150>)
 80014fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014fe:	6153      	str	r3, [r2, #20]
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_SPI_MspInit+0x150>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800150c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151e:	2305      	movs	r3, #5
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_SPI_MspInit+0x154>)
 800152a:	f000 fd4d 	bl	8001fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800152e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001540:	2305      	movs	r3, #5
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_SPI_MspInit+0x15c>)
 800154c:	f000 fd3c 	bl	8001fc8 <HAL_GPIO_Init>
}
 8001550:	bf00      	nop
 8001552:	3738      	adds	r7, #56	; 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40013000 	.word	0x40013000
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400
 8001564:	40003800 	.word	0x40003800
 8001568:	48000c00 	.word	0x48000c00

0800156c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_TIM_Base_MspInit+0x80>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d10c      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001596:	e022      	b.n	80015de <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <HAL_TIM_Base_MspInit+0x88>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10c      	bne.n	80015bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
}
 80015ba:	e010      	b.n	80015de <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_TIM_Base_MspInit+0x8c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10b      	bne.n	80015de <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_TIM_Base_MspInit+0x84>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
}
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40001c00 	.word	0x40001c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40002000 	.word	0x40002000
 80015f8:	40014400 	.word	0x40014400

080015fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a24      	ldr	r2, [pc, #144]	; (80016ac <HAL_TIM_MspPostInit+0xb0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d11e      	bne.n	800165c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_TIM_MspPostInit+0xb4>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <HAL_TIM_MspPostInit+0xb4>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	6153      	str	r3, [r2, #20]
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_TIM_MspPostInit+0xb4>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = FCLK_X_Pin;
 8001636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001648:	2309      	movs	r3, #9
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_X_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 fcb7 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800165a:	e022      	b.n	80016a2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM16)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <HAL_TIM_MspPostInit+0xb8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11d      	bne.n	80016a2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_TIM_MspPostInit+0xb4>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_TIM_MspPostInit+0xb4>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_TIM_MspPostInit+0xb4>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FCLK_Y_Pin;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001690:	2301      	movs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_Y_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f000 fc93 	bl	8001fc8 <HAL_GPIO_Init>
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40002000 	.word	0x40002000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40014400 	.word	0x40014400

080016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x7c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d128      	bne.n	800172c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_UART_MspInit+0x80>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a16      	ldr	r2, [pc, #88]	; (8001738 <HAL_UART_MspInit+0x80>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_UART_MspInit+0x80>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_UART_MspInit+0x80>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_UART_MspInit+0x80>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_UART_MspInit+0x80>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800170a:	230c      	movs	r3, #12
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171a:	2307      	movs	r3, #7
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f000 fc4e 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40004400 	.word	0x40004400
 8001738:	40021000 	.word	0x40021000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 fac8 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 8001794:	2002      	movs	r0, #2
 8001796:	f000 fdc3 	bl	8002320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}

0800179e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
	return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_kill>:

int _kill(int pid, int sig)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b8:	f003 ffe8 	bl	800578c <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	2216      	movs	r2, #22
 80017c0:	601a      	str	r2, [r3, #0]
	return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_exit>:

void _exit (int status)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d6:	f04f 31ff 	mov.w	r1, #4294967295
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffe7 	bl	80017ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80017e0:	e7fe      	b.n	80017e0 <_exit+0x12>

080017e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e00a      	b.n	800180a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f4:	f3af 8000 	nop.w
 80017f8:	4601      	mov	r1, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	b2ca      	uxtb	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbf0      	blt.n	80017f4 <_read+0x12>
	}

return len;
 8001812:	687b      	ldr	r3, [r7, #4]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e009      	b.n	8001842 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	60ba      	str	r2, [r7, #8]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd22 	bl	8001280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	dbf1      	blt.n	800182e <_write+0x12>
	}
	return len;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_close>:

int _close(int file)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	return -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187c:	605a      	str	r2, [r3, #4]
	return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_isatty>:

int _isatty(int file)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
	return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f003 ff4e 	bl	800578c <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20008000 	.word	0x20008000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000434 	.word	0x20000434
 8001924:	20000450 	.word	0x20000450

08001928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <LoopForever+0x6>)
  ldr r1, =_edata
 8001952:	490e      	ldr	r1, [pc, #56]	; (800198c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <LoopForever+0xe>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001968:	4c0b      	ldr	r4, [pc, #44]	; (8001998 <LoopForever+0x16>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001976:	f7ff ffd7 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197a:	f003 ff0d 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197e:	f7ff f913 	bl	8000ba8 <main>

08001982 <LoopForever>:

LoopForever:
    b LoopForever
 8001982:	e7fe      	b.n	8001982 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001984:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001990:	080088ac 	.word	0x080088ac
  ldr r2, =_sbss
 8001994:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001998:	2000044c 	.word	0x2000044c

0800199c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_IRQHandler>

0800199e <_MCP3561_write>:
*/

#include "main.h"
#include "mcp3564.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	4613      	mov	r3, r2
 80019aa:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2110      	movs	r1, #16
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f000 fc82 	bl	80022bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	2303      	movs	r3, #3
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f002 f959 	bl	8003c76 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	2110      	movs	r1, #16
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f000 fc76 	bl	80022bc <HAL_GPIO_WritePin>
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_MCP3561_sread>:

uint8_t _MCP3561_sread(SPI_HandleTypeDef *hspi, uint8_t *cmd){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af02      	add	r7, sp, #8
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	uint8_t reg8[2];
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2110      	movs	r1, #16
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f000 fc67 	bl	80022bc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
 80019ee:	f107 020c 	add.w	r2, r7, #12
 80019f2:	2303      	movs	r3, #3
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2302      	movs	r3, #2
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f002 faa9 	bl	8003f52 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2110      	movs	r1, #16
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f000 fc58 	bl	80022bc <HAL_GPIO_WritePin>
	return reg8[1];
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]

	// be careful with the bitwise or operator "|"
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 8001a22:	2346      	movs	r3, #70	; 0x46
 8001a24:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG0_CLK_SEL_EXT;   // clock selection
 8001a26:	2300      	movs	r3, #0
 8001a28:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_ADC_MODE_CONV; // standby or converting
 8001a2a:	7b7b      	ldrb	r3, [r7, #13]
 8001a2c:	f043 0303 	orr.w	r3, r3, #3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_CS_SEL_NONE;   // input current
 8001a34:	7b7b      	ldrb	r3, [r7, #13]
 8001a36:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffac 	bl	800199e <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 8001a46:	234a      	movs	r3, #74	; 0x4a
 8001a48:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG1_OSR_4096;       // over sampling rate
 8001a4a:	231c      	movs	r3, #28
 8001a4c:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG1_AMCLK_DIV8;    // sampling clock prescaler
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff9c 	bl	800199e <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 8001a66:	234e      	movs	r3, #78	; 0x4e
 8001a68:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG2_BOOST_x1;   // Boost
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_GAIN_x1;    // Gain
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_AZ_MUX_OFF; // offset cancellation algorithm
 8001a78:	7b7b      	ldrb	r3, [r7, #13]
 8001a7a:	737b      	strb	r3, [r7, #13]
	cmd[1] += 3; // last two bits must always be '11'
 8001a7c:	7b7b      	ldrb	r3, [r7, #13]
 8001a7e:	3303      	adds	r3, #3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff86 	bl	800199e <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8001a92:	2352      	movs	r3, #82	; 0x52
 8001a94:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG3_CONV_MODE_CONTINUOUS; // conversion mode
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_DATA_FORMAT_24BIT;    // SPI output data format, (32 and 24 bit available)
 8001a9a:	7b7b      	ldrb	r3, [r7, #13]
 8001a9c:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_CRCCOM_OFF;           // CRC
 8001a9e:	7b7b      	ldrb	r3, [r7, #13]
 8001aa0:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_GAINCAL_OFF;          // gain calibration
 8001aa2:	7b7b      	ldrb	r3, [r7, #13]
 8001aa4:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_OFFCAL_OFF;           // offset calibration
 8001aa6:	7b7b      	ldrb	r3, [r7, #13]
 8001aa8:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff73 	bl	800199e <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 8001ab8:	2356      	movs	r3, #86	; 0x56
 8001aba:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_IRQ_MODE_IRQ_HIGH;  // IRQ default pin state
 8001abc:	2304      	movs	r3, #4
 8001abe:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_FASTCMD_ON;     // fast commands
 8001ac0:	7b7b      	ldrb	r3, [r7, #13]
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_STP_ON;         // start of conversion IRQ
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff5e 	bl	800199e <_MCP3561_write>

	cmd[0]  = MCP3561_MUX_WRITE;
 8001ae2:	235a      	movs	r3, #90	; 0x5a
 8001ae4:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (MCP3561_MUX_CH0 << 4) | MCP3561_MUX_CH1;   // [7..4] VIN+ / [3..0] VIN-
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	737b      	strb	r3, [r7, #13]
	//cmd[1]  = (MCP3561_MUX_CH_IntTemp_P << 4) | MCP3561_MUX_CH_IntTemp_M;   // [7..4] VIN+ / [3..0] VIN-
	_MCP3561_write(hspi, cmd, 2);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2202      	movs	r2, #2
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff53 	bl	800199e <_MCP3561_write>
	cmd[3] = 0;
	_MCP3561_write(hspi, cmd, 4);
	*/


}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <MCP3561_PrintRegisters>:

/**
 * @brief prints the configuration registers content
 */
void MCP3561_PrintRegisters(SPI_HandleTypeDef *hspi){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	uint8_t reg8 = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd [5] = {0,0,0,0,0};
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <MCP3561_PrintRegisters+0xd8>)
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b16:	6018      	str	r0, [r3, #0]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	7019      	strb	r1, [r3, #0]

	cmd[0] = MCP3561_CONFIG0_SREAD;
 8001b1c:	2345      	movs	r3, #69	; 0x45
 8001b1e:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff56 	bl	80019d8 <_MCP3561_sread>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
	printf("CONF0: %02x\n", reg8);
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4829      	ldr	r0, [pc, #164]	; (8001bdc <MCP3561_PrintRegisters+0xdc>)
 8001b36:	f004 fac5 	bl	80060c4 <iprintf>

	cmd[0] = MCP3561_CONFIG1_SREAD;
 8001b3a:	2349      	movs	r3, #73	; 0x49
 8001b3c:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff47 	bl	80019d8 <_MCP3561_sread>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
	printf("CONF1: %02x\n", reg8);
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4823      	ldr	r0, [pc, #140]	; (8001be0 <MCP3561_PrintRegisters+0xe0>)
 8001b54:	f004 fab6 	bl	80060c4 <iprintf>

	cmd[0] = MCP3561_CONFIG2_SREAD;
 8001b58:	234d      	movs	r3, #77	; 0x4d
 8001b5a:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff38 	bl	80019d8 <_MCP3561_sread>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
	printf("CONF2: %02x\n", reg8);
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <MCP3561_PrintRegisters+0xe4>)
 8001b72:	f004 faa7 	bl	80060c4 <iprintf>

	cmd[0] = MCP3561_CONFIG3_SREAD;
 8001b76:	2351      	movs	r3, #81	; 0x51
 8001b78:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff29 	bl	80019d8 <_MCP3561_sread>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
	printf("CONF3: %02x\n", reg8);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4816      	ldr	r0, [pc, #88]	; (8001be8 <MCP3561_PrintRegisters+0xe8>)
 8001b90:	f004 fa98 	bl	80060c4 <iprintf>

	cmd[0] = MCP3561_IRQ_SREAD;
 8001b94:	2355      	movs	r3, #85	; 0x55
 8001b96:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff1a 	bl	80019d8 <_MCP3561_sread>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	73fb      	strb	r3, [r7, #15]
	printf("IRQ  : %02x\n", reg8);
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	4619      	mov	r1, r3
 8001bac:	480f      	ldr	r0, [pc, #60]	; (8001bec <MCP3561_PrintRegisters+0xec>)
 8001bae:	f004 fa89 	bl	80060c4 <iprintf>

	cmd[0] = MCP3561_MUX_SREAD;
 8001bb2:	2359      	movs	r3, #89	; 0x59
 8001bb4:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff0b 	bl	80019d8 <_MCP3561_sread>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]
	printf("MUX  : %02x\n", reg8);
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <MCP3561_PrintRegisters+0xf0>)
 8001bcc:	f004 fa7a 	bl	80060c4 <iprintf>

	/* @todo all the remaining registers */
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0800848c 	.word	0x0800848c
 8001bdc:	0800842c 	.word	0x0800842c
 8001be0:	0800843c 	.word	0x0800843c
 8001be4:	0800844c 	.word	0x0800844c
 8001be8:	0800845c 	.word	0x0800845c
 8001bec:	0800846c 	.word	0x0800846c
 8001bf0:	0800847c 	.word	0x0800847c

08001bf4 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8001bfc:	237a      	movs	r3, #122	; 0x7a
 8001bfe:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 8001c00:	f107 010f 	add.w	r1, r7, #15
 8001c04:	230a      	movs	r3, #10
 8001c06:	2201      	movs	r2, #1
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f002 f834 	bl	8003c76 <HAL_SPI_Transmit>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <MCP3561_ReadADCData>:

/**
 * @brief read 24 Bit left justified ADC register
 * @todo  how to read from other data formats?
 */
uint32_t MCP3561_ReadADCData(SPI_HandleTypeDef *hspi){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	6078      	str	r0, [r7, #4]
	uint8_t val[5] = {0,0,0,0,0};
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <MCP3561_ReadADCData+0x74>)
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c2a:	6018      	str	r0, [r3, #0]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	7019      	strb	r1, [r3, #0]
	uint8_t cmd[5] = {0,0,0,0,0};
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <MCP3561_ReadADCData+0x74>)
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3a:	6018      	str	r0, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	7019      	strb	r1, [r3, #0]
	cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 8001c40:	2341      	movs	r3, #65	; 0x41
 8001c42:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2110      	movs	r1, #16
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4c:	f000 fb36 	bl	80022bc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, val, 5, 10);
 8001c50:	f107 0214 	add.w	r2, r7, #20
 8001c54:	f107 010c 	add.w	r1, r7, #12
 8001c58:	230a      	movs	r3, #10
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f002 f977 	bl	8003f52 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2110      	movs	r1, #16
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f000 fb26 	bl	80022bc <HAL_GPIO_WritePin>
	uint32_t value = (val[1] << 16) | (val[2] << 8) | val[3];
 8001c70:	7d7b      	ldrb	r3, [r7, #21]
 8001c72:	041a      	lsls	r2, r3, #16
 8001c74:	7dbb      	ldrb	r3, [r7, #22]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	7dfa      	ldrb	r2, [r7, #23]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61fb      	str	r3, [r7, #28]
	return value;
 8001c80:	69fb      	ldr	r3, [r7, #28]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800848c 	.word	0x0800848c

08001c90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_Init+0x28>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_Init+0x28>)
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 f94f 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f808 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fb8a 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000

08001cbc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f967 	bl	8001fae <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 f92f 	bl	8001f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000438 	.word	0x20000438

08001d44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000438 	.word	0x20000438

08001d5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4907      	ldr	r1, [pc, #28]	; (8001e40 <__NVIC_EnableIRQ+0x38>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff8e 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff29 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff3e 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff8e 	bl	8001e98 <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5d 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff31 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffa2 	bl	8001f00 <SysTick_Config>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e154      	b.n	8002282 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8146 	beq.w	800227c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x40>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d017      	beq.n	80020a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a0 	beq.w	800227c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_GPIO_Init+0x2d8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_GPIO_Init+0x2d8>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <HAL_GPIO_Init+0x2d8>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002154:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <HAL_GPIO_Init+0x2dc>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800217e:	d019      	beq.n	80021b4 <HAL_GPIO_Init+0x1ec>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a49      	ldr	r2, [pc, #292]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x1e8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a48      	ldr	r2, [pc, #288]	; (80022ac <HAL_GPIO_Init+0x2e4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1e4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a47      	ldr	r2, [pc, #284]	; (80022b0 <HAL_GPIO_Init+0x2e8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1e0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <HAL_GPIO_Init+0x2ec>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1dc>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e008      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021a4:	2305      	movs	r3, #5
 80021a6:	e006      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021a8:	2303      	movs	r3, #3
 80021aa:	e004      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e002      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021b4:	2300      	movs	r3, #0
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c6:	4937      	ldr	r1, [pc, #220]	; (80022a4 <HAL_GPIO_Init+0x2dc>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021f8:	4a2f      	ldr	r2, [pc, #188]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002222:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800224c:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f aea3 	bne.w	8001fd8 <HAL_GPIO_Init+0x10>
  }
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000
 80022a8:	48000400 	.word	0x48000400
 80022ac:	48000800 	.word	0x48000800
 80022b0:	48000c00 	.word	0x48000c00
 80022b4:	48001000 	.word	0x48001000
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43d9      	mvns	r1, r3
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	400b      	ands	r3, r1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe ffb0 	bl	80012a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002356:	af00      	add	r7, sp, #0
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002360:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f001 b823 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 817d 	beq.w	8002686 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800238c:	4bbc      	ldr	r3, [pc, #752]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00c      	beq.n	80023b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002398:	4bb9      	ldr	r3, [pc, #740]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d15c      	bne.n	800245e <HAL_RCC_OscConfig+0x10e>
 80023a4:	4bb6      	ldr	r3, [pc, #728]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d155      	bne.n	800245e <HAL_RCC_OscConfig+0x10e>
 80023b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_OscConfig+0x94>
 80023de:	4ba8      	ldr	r3, [pc, #672]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	e015      	b.n	8002410 <HAL_RCC_OscConfig+0xc0>
 80023e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002400:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800240c:	4b9c      	ldr	r3, [pc, #624]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002414:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002418:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800241c:	fa92 f2a2 	rbit	r2, r2
 8002420:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002424:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f042 0220 	orr.w	r2, r2, #32
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f002 021f 	and.w	r2, r2, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f202 	lsl.w	r2, r1, r2
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 811f 	beq.w	8002684 <HAL_RCC_OscConfig+0x334>
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 8116 	bne.w	8002684 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f000 bfaf 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x12e>
 8002470:	4b83      	ldr	r3, [pc, #524]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a82      	ldr	r2, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e036      	b.n	80024ec <HAL_RCC_OscConfig+0x19c>
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x158>
 800248e:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7b      	ldr	r2, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b79      	ldr	r3, [pc, #484]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a78      	ldr	r2, [pc, #480]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e021      	b.n	80024ec <HAL_RCC_OscConfig+0x19c>
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x184>
 80024ba:	4b71      	ldr	r3, [pc, #452]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a70      	ldr	r2, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0x19c>
 80024d4:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ec:	4b64      	ldr	r3, [pc, #400]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	f023 020f 	bic.w	r2, r3, #15
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	495f      	ldr	r1, [pc, #380]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002502:	4313      	orrs	r3, r2
 8002504:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d059      	beq.n	80025ca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fc15 	bl	8001d44 <HAL_GetTick>
 800251a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fc10 	bl	8001d44 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d902      	bls.n	8002536 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	f000 bf43 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
 8002536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800254a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0x218>
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	e015      	b.n	8002594 <HAL_RCC_OscConfig+0x244>
 8002568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800257c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002580:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002584:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002598:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800259c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025a0:	fa92 f2a2 	rbit	r2, r2
 80025a4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f002 021f 	and.w	r2, r2, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ab      	beq.n	8002520 <HAL_RCC_OscConfig+0x1d0>
 80025c8:	e05d      	b.n	8002686 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff fbbb 	bl	8001d44 <HAL_GetTick>
 80025ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff fbb6 	bl	8001d44 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d902      	bls.n	80025ea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	f000 bee9 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
 80025ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_RCC_OscConfig+0x2cc>
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e015      	b.n	8002648 <HAL_RCC_OscConfig+0x2f8>
 800261c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002620:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002634:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002638:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_RCC_OscConfig+0x330>)
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800264c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002650:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002654:	fa92 f2a2 	rbit	r2, r2
 8002658:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800265c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ab      	bne.n	80025d4 <HAL_RCC_OscConfig+0x284>
 800267c:	e003      	b.n	8002686 <HAL_RCC_OscConfig+0x336>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 817d 	beq.w	8002996 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800269c:	4ba6      	ldr	r3, [pc, #664]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00b      	beq.n	80026c0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026a8:	4ba3      	ldr	r3, [pc, #652]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d172      	bne.n	800279a <HAL_RCC_OscConfig+0x44a>
 80026b4:	4ba0      	ldr	r3, [pc, #640]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d16c      	bne.n	800279a <HAL_RCC_OscConfig+0x44a>
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x3a0>
 80026ea:	4b93      	ldr	r3, [pc, #588]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e013      	b.n	8002718 <HAL_RCC_OscConfig+0x3c8>
 80026f0:	2302      	movs	r3, #2
 80026f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002708:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2202      	movs	r2, #2
 800271a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800271e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800272a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCC_OscConfig+0x410>
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d002      	beq.n	8002760 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f000 be2e 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	21f8      	movs	r1, #248	; 0xf8
 8002776:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800277e:	fa91 f1a1 	rbit	r1, r1
 8002782:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002786:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800278a:	fab1 f181 	clz	r1, r1
 800278e:	b2c9      	uxtb	r1, r1
 8002790:	408b      	lsls	r3, r1
 8002792:	4969      	ldr	r1, [pc, #420]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002798:	e0fd      	b.n	8002996 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8088 	beq.w	80028bc <HAL_RCC_OscConfig+0x56c>
 80027ac:	2301      	movs	r3, #1
 80027ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	461a      	mov	r2, r3
 80027d4:	2301      	movs	r3, #1
 80027d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fab4 	bl	8001d44 <HAL_GetTick>
 80027dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e2:	f7ff faaf 	bl	8001d44 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d902      	bls.n	80027f8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	f000 bde2 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800280a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x4d8>
 8002822:	4b45      	ldr	r3, [pc, #276]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e013      	b.n	8002850 <HAL_RCC_OscConfig+0x500>
 8002828:	2302      	movs	r3, #2
 800282a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002840:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2202      	movs	r2, #2
 8002852:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002856:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800285a:	fa92 f2a2 	rbit	r2, r2
 800285e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002862:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002866:	fab2 f282 	clz	r2, r2
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	f042 0220 	orr.w	r2, r2, #32
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	f002 021f 	and.w	r2, r2, #31
 8002876:	2101      	movs	r1, #1
 8002878:	fa01 f202 	lsl.w	r2, r1, r2
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0af      	beq.n	80027e2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	21f8      	movs	r1, #248	; 0xf8
 8002898:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028a0:	fa91 f1a1 	rbit	r1, r1
 80028a4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028ac:	fab1 f181 	clz	r1, r1
 80028b0:	b2c9      	uxtb	r1, r1
 80028b2:	408b      	lsls	r3, r1
 80028b4:	4920      	ldr	r1, [pc, #128]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
 80028ba:	e06c      	b.n	8002996 <HAL_RCC_OscConfig+0x646>
 80028bc:	2301      	movs	r3, #1
 80028be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	461a      	mov	r2, r3
 80028e4:	2300      	movs	r3, #0
 80028e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff fa2c 	bl	8001d44 <HAL_GetTick>
 80028ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f2:	f7ff fa27 	bl	8001d44 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d902      	bls.n	8002908 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	f000 bd5a 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
 8002908:	2302      	movs	r3, #2
 800290a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800291a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d104      	bne.n	800293c <HAL_RCC_OscConfig+0x5ec>
 8002932:	4b01      	ldr	r3, [pc, #4]	; (8002938 <HAL_RCC_OscConfig+0x5e8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e015      	b.n	8002964 <HAL_RCC_OscConfig+0x614>
 8002938:	40021000 	.word	0x40021000
 800293c:	2302      	movs	r3, #2
 800293e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800294e:	2302      	movs	r3, #2
 8002950:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002954:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002960:	4bc8      	ldr	r3, [pc, #800]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	2202      	movs	r2, #2
 8002966:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800296a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800296e:	fa92 f2a2 	rbit	r2, r2
 8002972:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002976:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800297a:	fab2 f282 	clz	r2, r2
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f002 021f 	and.w	r2, r2, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ad      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8110 	beq.w	8002bcc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d079      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x760>
 80029bc:	2301      	movs	r3, #1
 80029be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	4bab      	ldr	r3, [pc, #684]	; (8002c88 <HAL_RCC_OscConfig+0x938>)
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	461a      	mov	r2, r3
 80029e2:	2301      	movs	r3, #1
 80029e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7ff f9ad 	bl	8001d44 <HAL_GetTick>
 80029ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f0:	f7ff f9a8 	bl	8001d44 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d902      	bls.n	8002a06 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f000 bcdb 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
 8002a06:	2302      	movs	r3, #2
 8002a08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a20:	2202      	movs	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a44:	2202      	movs	r2, #2
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a60:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f1a3 	rbit	r1, r3
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a86:	6019      	str	r1, [r3, #0]
  return result;
 8002a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0a0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x6a0>
 8002aae:	e08d      	b.n	8002bcc <HAL_RCC_OscConfig+0x87c>
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ad2:	601a      	str	r2, [r3, #0]
  return result;
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002adc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <HAL_RCC_OscConfig+0x938>)
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	461a      	mov	r2, r3
 8002aee:	2300      	movs	r3, #0
 8002af0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7ff f927 	bl	8001d44 <HAL_GetTick>
 8002af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afc:	f7ff f922 	bl	8001d44 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d902      	bls.n	8002b12 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f000 bc55 	b.w	80033bc <HAL_RCC_OscConfig+0x106c>
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b3e:	2202      	movs	r2, #2
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f2a3 	rbit	r2, r3
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b62:	2202      	movs	r2, #2
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	fa93 f2a3 	rbit	r2, r3
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	6019      	str	r1, [r3, #0]
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	fa93 f1a3 	rbit	r1, r3
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ba4:	6019      	str	r1, [r3, #0]
  return result;
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d197      	bne.n	8002afc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 81a1 	beq.w	8002f24 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d116      	bne.n	8002c22 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	61d3      	str	r3, [r2, #28]
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c1a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_RCC_OscConfig+0x93c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11a      	bne.n	8002c64 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_RCC_OscConfig+0x93c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <HAL_RCC_OscConfig+0x93c>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3a:	f7ff f883 	bl	8001d44 <HAL_GetTick>
 8002c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	e009      	b.n	8002c58 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7ff f87e 	bl	8001d44 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e3b1      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x93c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ef      	beq.n	8002c44 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10d      	bne.n	8002c90 <HAL_RCC_OscConfig+0x940>
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a02      	ldr	r2, [pc, #8]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e03c      	b.n	8002cfc <HAL_RCC_OscConfig+0x9ac>
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	10908120 	.word	0x10908120
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x96a>
 8002ca0:	4bc1      	ldr	r3, [pc, #772]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4ac0      	ldr	r2, [pc, #768]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	4bbe      	ldr	r3, [pc, #760]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4abd      	ldr	r2, [pc, #756]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e020      	b.n	8002cfc <HAL_RCC_OscConfig+0x9ac>
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x994>
 8002cca:	4bb7      	ldr	r3, [pc, #732]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4ab6      	ldr	r2, [pc, #728]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	4bb4      	ldr	r3, [pc, #720]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4ab3      	ldr	r2, [pc, #716]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0x9ac>
 8002ce4:	4bb0      	ldr	r3, [pc, #704]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4aaf      	ldr	r2, [pc, #700]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	4bad      	ldr	r3, [pc, #692]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4aac      	ldr	r2, [pc, #688]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002cf6:	f023 0304 	bic.w	r3, r3, #4
 8002cfa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8081 	beq.w	8002e10 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff f819 	bl	8001d44 <HAL_GetTick>
 8002d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7ff f814 	bl	8001d44 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e345      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d38:	2202      	movs	r2, #2
 8002d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	fa93 f2a3 	rbit	r2, r3
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d76:	601a      	str	r2, [r3, #0]
  return result;
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_OscConfig+0xa4c>
 8002d96:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	e013      	b.n	8002dc4 <HAL_RCC_OscConfig+0xa74>
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4b79      	ldr	r3, [pc, #484]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002dcc:	2102      	movs	r1, #2
 8002dce:	6011      	str	r1, [r2, #0]
 8002dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	fa92 f1a2 	rbit	r1, r2
 8002dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002de6:	6011      	str	r1, [r2, #0]
  return result;
 8002de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d084      	beq.n	8002d18 <HAL_RCC_OscConfig+0x9c8>
 8002e0e:	e07f      	b.n	8002f10 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7fe ff98 	bl	8001d44 <HAL_GetTick>
 8002e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	e00b      	b.n	8002e32 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe ff93 	bl	8001d44 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e2c4      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	fa93 f2a3 	rbit	r2, r3
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e5e:	2202      	movs	r2, #2
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e78:	601a      	str	r2, [r3, #0]
  return result;
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_OscConfig+0xb4e>
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	e013      	b.n	8002ec6 <HAL_RCC_OscConfig+0xb76>
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ece:	2102      	movs	r1, #2
 8002ed0:	6011      	str	r1, [r2, #0]
 8002ed2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ed6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	fa92 f1a2 	rbit	r1, r2
 8002ee0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ee8:	6011      	str	r1, [r2, #0]
  return result;
 8002eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d184      	bne.n	8002e1a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8242 	beq.w	80033ba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_RCC_OscConfig+0xc58>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	f000 8213 	beq.w	800336a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	f040 8162 	bne.w	800321a <HAL_RCC_OscConfig+0xeca>
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f68:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f7a:	601a      	str	r2, [r3, #0]
  return result;
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	461a      	mov	r2, r3
 8002f98:	2300      	movs	r3, #0
 8002f9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fed2 	bl	8001d44 <HAL_GetTick>
 8002fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	e00c      	b.n	8002fc0 <HAL_RCC_OscConfig+0xc70>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe feca 	bl	8001d44 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e1fd      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fa93 f2a3 	rbit	r2, r3
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fe4:	601a      	str	r2, [r3, #0]
  return result;
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d102      	bne.n	800300a <HAL_RCC_OscConfig+0xcba>
 8003004:	4bb0      	ldr	r3, [pc, #704]	; (80032c8 <HAL_RCC_OscConfig+0xf78>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	e027      	b.n	800305a <HAL_RCC_OscConfig+0xd0a>
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	fa93 f2a3 	rbit	r2, r3
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	4b9c      	ldr	r3, [pc, #624]	; (80032c8 <HAL_RCC_OscConfig+0xf78>)
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800305e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003062:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003066:	6011      	str	r1, [r2, #0]
 8003068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	fa92 f1a2 	rbit	r1, r2
 8003076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800307e:	6011      	str	r1, [r2, #0]
  return result;
 8003080:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003084:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	fab2 f282 	clz	r2, r2
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f042 0220 	orr.w	r2, r2, #32
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f002 021f 	and.w	r2, r2, #31
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f202 	lsl.w	r2, r1, r2
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d182      	bne.n	8002fac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0xf78>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	430b      	orrs	r3, r1
 80030c8:	497f      	ldr	r1, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0xf78>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030f2:	601a      	str	r2, [r3, #0]
  return result;
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030fc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003108:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	461a      	mov	r2, r3
 8003110:	2301      	movs	r3, #1
 8003112:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fe16 	bl	8001d44 <HAL_GetTick>
 8003118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311c:	e009      	b.n	8003132 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fe11 	bl	8001d44 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e144      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800313a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003156:	601a      	str	r2, [r3, #0]
  return result;
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003160:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HAL_RCC_OscConfig+0xe2c>
 8003176:	4b54      	ldr	r3, [pc, #336]	; (80032c8 <HAL_RCC_OscConfig+0xf78>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e027      	b.n	80031cc <HAL_RCC_OscConfig+0xe7c>
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	fa93 f2a3 	rbit	r2, r3
 80031be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_OscConfig+0xf78>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031de:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	fa92 f1a2 	rbit	r1, r2
 80031e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031f0:	6011      	str	r1, [r2, #0]
  return result;
 80031f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	fab2 f282 	clz	r2, r2
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	f002 021f 	and.w	r2, r2, #31
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d082      	beq.n	800311e <HAL_RCC_OscConfig+0xdce>
 8003218:	e0cf      	b.n	80033ba <HAL_RCC_OscConfig+0x106a>
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003222:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800323e:	601a      	str	r2, [r3, #0]
  return result;
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003248:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003254:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fd70 	bl	8001d44 <HAL_GetTick>
 8003264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	e009      	b.n	800327e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fd6b 	bl	8001d44 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e09e      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032a2:	601a      	str	r2, [r3, #0]
  return result;
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d104      	bne.n	80032cc <HAL_RCC_OscConfig+0xf7c>
 80032c2:	4b01      	ldr	r3, [pc, #4]	; (80032c8 <HAL_RCC_OscConfig+0xf78>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	e029      	b.n	800331c <HAL_RCC_OscConfig+0xfcc>
 80032c8:	40021000 	.word	0x40021000
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_OscConfig+0x1078>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003320:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003328:	6011      	str	r1, [r2, #0]
 800332a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800332e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	fa92 f1a2 	rbit	r1, r2
 8003338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800333c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003340:	6011      	str	r1, [r2, #0]
  return result;
 8003342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003346:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d180      	bne.n	800326a <HAL_RCC_OscConfig+0xf1a>
 8003368:	e027      	b.n	80033ba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e01e      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_OscConfig+0x1078>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003386:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800338a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	429a      	cmp	r2, r3
 800339c:	d10b      	bne.n	80033b6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800339e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b09e      	sub	sp, #120	; 0x78
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e162      	b.n	80036aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b90      	ldr	r3, [pc, #576]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d910      	bls.n	8003414 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b8d      	ldr	r3, [pc, #564]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	498b      	ldr	r1, [pc, #556]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b89      	ldr	r3, [pc, #548]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e14a      	b.n	80036aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b82      	ldr	r3, [pc, #520]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	497f      	ldr	r1, [pc, #508]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80dc 	beq.w	80035f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d13c      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xf6>
 8003448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_RCC_ClockConfig+0xa6>
 800346c:	4b6f      	ldr	r3, [pc, #444]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	e00f      	b.n	8003492 <HAL_RCC_ClockConfig+0xc6>
 8003472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	667b      	str	r3, [r7, #100]	; 0x64
 8003480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003484:	663b      	str	r3, [r7, #96]	; 0x60
 8003486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003496:	65ba      	str	r2, [r7, #88]	; 0x58
 8003498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800349a:	fa92 f2a2 	rbit	r2, r2
 800349e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034a2:	fab2 f282 	clz	r2, r2
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	f042 0220 	orr.w	r2, r2, #32
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f002 021f 	and.w	r2, r2, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d17b      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0f3      	b.n	80036aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d13c      	bne.n	8003544 <HAL_RCC_ClockConfig+0x178>
 80034ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d102      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x128>
 80034ee:	4b4f      	ldr	r3, [pc, #316]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	e00f      	b.n	8003514 <HAL_RCC_ClockConfig+0x148>
 80034f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
 8003502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003506:	643b      	str	r3, [r7, #64]	; 0x40
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003518:	63ba      	str	r2, [r7, #56]	; 0x38
 800351a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800351c:	fa92 f2a2 	rbit	r2, r2
 8003520:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f002 021f 	and.w	r2, r2, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d13a      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b2      	b.n	80036aa <HAL_RCC_ClockConfig+0x2de>
 8003544:	2302      	movs	r3, #2
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d102      	bne.n	800356c <HAL_RCC_ClockConfig+0x1a0>
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	e00d      	b.n	8003588 <HAL_RCC_ClockConfig+0x1bc>
 800356c:	2302      	movs	r3, #2
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	2302      	movs	r3, #2
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2202      	movs	r2, #2
 800358a:	61ba      	str	r2, [r7, #24]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	fa92 f2a2 	rbit	r2, r2
 8003592:	617a      	str	r2, [r7, #20]
  return result;
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	fab2 f282 	clz	r2, r2
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f042 0220 	orr.w	r2, r2, #32
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f002 021f 	and.w	r2, r2, #31
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e079      	b.n	80036aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	491a      	ldr	r1, [pc, #104]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c8:	f7fe fbbc 	bl	8001d44 <HAL_GetTick>
 80035cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fe fbb8 	bl	8001d44 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e061      	b.n	80036aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_RCC_ClockConfig+0x260>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 020c 	and.w	r2, r3, #12
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1eb      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d214      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 0207 	bic.w	r2, r3, #7
 800360e:	4906      	ldr	r1, [pc, #24]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_RCC_ClockConfig+0x25c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e040      	b.n	80036aa <HAL_RCC_ClockConfig+0x2de>
 8003628:	40022000 	.word	0x40022000
 800362c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCC_ClockConfig+0x2e8>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	491a      	ldr	r1, [pc, #104]	; (80036b4 <HAL_RCC_ClockConfig+0x2e8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x2e8>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4912      	ldr	r1, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x2e8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800366e:	f000 f829 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003672:	4601      	mov	r1, r0
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCC_ClockConfig+0x2e8>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367c:	22f0      	movs	r2, #240	; 0xf0
 800367e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	fa92 f2a2 	rbit	r2, r2
 8003686:	60fa      	str	r2, [r7, #12]
  return result;
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	fab2 f282 	clz	r2, r2
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	40d3      	lsrs	r3, r2
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x2ec>)
 8003694:	5cd3      	ldrb	r3, [r2, r3]
 8003696:	fa21 f303 	lsr.w	r3, r1, r3
 800369a:	4a08      	ldr	r2, [pc, #32]	; (80036bc <HAL_RCC_ClockConfig+0x2f0>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_RCC_ClockConfig+0x2f4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fb0a 	bl	8001cbc <HAL_InitTick>
  
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3778      	adds	r7, #120	; 0x78
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08008494 	.word	0x08008494
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b08b      	sub	sp, #44	; 0x2c
 80036c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d002      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x30>
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x36>
 80036f2:	e03c      	b.n	800376e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036f6:	623b      	str	r3, [r7, #32]
      break;
 80036f8:	e03c      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003700:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003704:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	fa92 f2a2 	rbit	r2, r2
 800370c:	607a      	str	r2, [r7, #4]
  return result;
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	40d3      	lsrs	r3, r2
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_RCC_GetSysClockFreq+0xc8>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	220f      	movs	r2, #15
 8003728:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	fa92 f2a2 	rbit	r2, r2
 8003730:	60fa      	str	r2, [r7, #12]
  return result;
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	40d3      	lsrs	r3, r2
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_RCC_GetSysClockFreq+0xcc>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800374c:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <HAL_RCC_GetSysClockFreq+0xc4>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	fbb2 f2f3 	udiv	r2, r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
 800375c:	e004      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	623b      	str	r3, [r7, #32]
      break;
 800376c:	e002      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003770:	623b      	str	r3, [r7, #32]
      break;
 8003772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003774:	6a3b      	ldr	r3, [r7, #32]
}
 8003776:	4618      	mov	r0, r3
 8003778:	372c      	adds	r7, #44	; 0x2c
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	007a1200 	.word	0x007a1200
 800378c:	080084ac 	.word	0x080084ac
 8003790:	080084bc 	.word	0x080084bc
 8003794:	003d0900 	.word	0x003d0900

08003798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000000 	.word	0x20000000

080037b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037b6:	f7ff ffef 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037ba:	4601      	mov	r1, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	fa92 f2a2 	rbit	r2, r2
 80037d0:	603a      	str	r2, [r7, #0]
  return result;
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	40d3      	lsrs	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	080084a4 	.word	0x080084a4

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037fa:	f7ff ffcd 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037fe:	4601      	mov	r1, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003808:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800380c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	fa92 f2a2 	rbit	r2, r2
 8003814:	603a      	str	r2, [r7, #0]
  return result;
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	fab2 f282 	clz	r2, r2
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	40d3      	lsrs	r3, r2
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003822:	5cd3      	ldrb	r3, [r2, r3]
 8003824:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000
 8003834:	080084a4 	.word	0x080084a4

08003838 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b092      	sub	sp, #72	; 0x48
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80d4 	beq.w	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385c:	4b4e      	ldr	r3, [pc, #312]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10e      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003872:	61d3      	str	r3, [r2, #28]
 8003874:	4b48      	ldr	r3, [pc, #288]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b45      	ldr	r3, [pc, #276]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4b42      	ldr	r3, [pc, #264]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a41      	ldr	r2, [pc, #260]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe fa51 	bl	8001d44 <HAL_GetTick>
 80038a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fe fa4d 	bl	8001d44 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e12d      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4b38      	ldr	r3, [pc, #224]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c4:	4b34      	ldr	r3, [pc, #208]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8084 	beq.w	80039de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d07c      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e4:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	461a      	mov	r2, r3
 8003932:	2300      	movs	r3, #0
 8003934:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d04b      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe f9fd 	bl	8001d44 <HAL_GetTick>
 800394a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe f9f9 	bl	8001d44 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0d7      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003964:	2302      	movs	r3, #2
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	2302      	movs	r3, #2
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	61fb      	str	r3, [r7, #28]
  return result;
 800397c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d108      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003992:	4b01      	ldr	r3, [pc, #4]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	e00d      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
 80039a0:	10908100 	.word	0x10908100
 80039a4:	2302      	movs	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	4b5a      	ldr	r3, [pc, #360]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2202      	movs	r2, #2
 80039b6:	613a      	str	r2, [r7, #16]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	fa92 f2a2 	rbit	r2, r2
 80039be:	60fa      	str	r2, [r7, #12]
  return result;
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	fab2 f282 	clz	r2, r2
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f002 021f 	and.w	r2, r2, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f202 	lsl.w	r2, r1, r2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0b7      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039de:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	494c      	ldr	r1, [pc, #304]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4a47      	ldr	r2, [pc, #284]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a10:	4b42      	ldr	r3, [pc, #264]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f023 0203 	bic.w	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	493f      	ldr	r1, [pc, #252]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	4938      	ldr	r1, [pc, #224]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a4c:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	4930      	ldr	r1, [pc, #192]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	4929      	ldr	r1, [pc, #164]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	4921      	ldr	r1, [pc, #132]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f023 0220 	bic.w	r2, r3, #32
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	491a      	ldr	r1, [pc, #104]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003ac4:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	4912      	ldr	r1, [pc, #72]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	490b      	ldr	r1, [pc, #44]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	4903      	ldr	r1, [pc, #12]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3748      	adds	r7, #72	; 0x48
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e09d      	b.n	8003c6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b42:	d009      	beq.n	8003b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
 8003b4a:	e005      	b.n	8003b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fc4a 	bl	800140c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b98:	d902      	bls.n	8003ba0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bae:	d007      	beq.n	8003bc0 <HAL_SPI_Init+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	f003 0204 	and.w	r2, r3, #4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b088      	sub	sp, #32
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_SPI_Transmit+0x22>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e158      	b.n	8003f4a <HAL_SPI_Transmit+0x2d4>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca0:	f7fe f850 	bl	8001d44 <HAL_GetTick>
 8003ca4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cba:	e13d      	b.n	8003f38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_SPI_Transmit+0x52>
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ccc:	e134      	b.n	8003f38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	88fa      	ldrh	r2, [r7, #6]
 8003ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d18:	d10f      	bne.n	8003d3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d007      	beq.n	8003d58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d60:	d94b      	bls.n	8003dfa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0xfa>
 8003d6a:	8afb      	ldrh	r3, [r7, #22]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d13e      	bne.n	8003dee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d94:	e02b      	b.n	8003dee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d112      	bne.n	8003dca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc8:	e011      	b.n	8003dee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dca:	f7fd ffbb 	bl	8001d44 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d803      	bhi.n	8003de2 <HAL_SPI_Transmit+0x16c>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d102      	bne.n	8003de8 <HAL_SPI_Transmit+0x172>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dec:	e0a4      	b.n	8003f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ce      	bne.n	8003d96 <HAL_SPI_Transmit+0x120>
 8003df8:	e07c      	b.n	8003ef4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SPI_Transmit+0x192>
 8003e02:	8afb      	ldrh	r3, [r7, #22]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d170      	bne.n	8003eea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d912      	bls.n	8003e38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	881a      	ldrh	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b02      	subs	r3, #2
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e36:	e058      	b.n	8003eea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	7812      	ldrb	r2, [r2, #0]
 8003e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e5e:	e044      	b.n	8003eea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d12b      	bne.n	8003ec6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d912      	bls.n	8003e9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	881a      	ldrh	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	1c9a      	adds	r2, r3, #2
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b02      	subs	r3, #2
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e9c:	e025      	b.n	8003eea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec4:	e011      	b.n	8003eea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec6:	f7fd ff3d 	bl	8001d44 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d803      	bhi.n	8003ede <HAL_SPI_Transmit+0x268>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d102      	bne.n	8003ee4 <HAL_SPI_Transmit+0x26e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee8:	e026      	b.n	8003f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1b5      	bne.n	8003e60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fb5b 	bl	80045b4 <SPI_EndRxTxTransaction>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e000      	b.n	8003f38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08a      	sub	sp, #40	; 0x28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f60:	2301      	movs	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x26>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e1fb      	b.n	8004370 <HAL_SPI_TransmitReceive+0x41e>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f80:	f7fd fee0 	bl	8001d44 <HAL_GetTick>
 8003f84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f98:	887b      	ldrh	r3, [r7, #2]
 8003f9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f9c:	7efb      	ldrb	r3, [r7, #27]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x6e>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fa8:	d106      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x66>
 8003fb2:	7efb      	ldrb	r3, [r7, #27]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d003      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fbe:	e1cd      	b.n	800435c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x80>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x80>
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fd8:	e1c0      	b.n	800435c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d003      	beq.n	8003fee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2205      	movs	r2, #5
 8003fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	887a      	ldrh	r2, [r7, #2]
 8004006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	887a      	ldrh	r2, [r7, #2]
 800401a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004030:	d802      	bhi.n	8004038 <HAL_SPI_TransmitReceive+0xe6>
 8004032:	8a3b      	ldrh	r3, [r7, #16]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d908      	bls.n	800404a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	e007      	b.n	800405a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004058:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d007      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004080:	d97c      	bls.n	800417c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x13e>
 800408a:	8a7b      	ldrh	r3, [r7, #18]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d169      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	1c9a      	adds	r2, r3, #2
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b4:	e056      	b.n	8004164 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d11b      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x1aa>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x1aa>
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d113      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	881a      	ldrh	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b01      	cmp	r3, #1
 8004108:	d11c      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x1f2>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	b292      	uxth	r2, r2
 8004122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004140:	2301      	movs	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004144:	f7fd fdfe 	bl	8001d44 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004150:	429a      	cmp	r2, r3
 8004152:	d807      	bhi.n	8004164 <HAL_SPI_TransmitReceive+0x212>
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d003      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004162:	e0fb      	b.n	800435c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1a3      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x164>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d19d      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x164>
 800417a:	e0df      	b.n	800433c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_SPI_TransmitReceive+0x23a>
 8004184:	8a7b      	ldrh	r3, [r7, #18]
 8004186:	2b01      	cmp	r3, #1
 8004188:	f040 80cb 	bne.w	8004322 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d912      	bls.n	80041bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	881a      	ldrh	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b02      	subs	r3, #2
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ba:	e0b2      	b.n	8004322 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	7812      	ldrb	r2, [r2, #0]
 80041c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e2:	e09e      	b.n	8004322 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d134      	bne.n	800425c <HAL_SPI_TransmitReceive+0x30a>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02f      	beq.n	800425c <HAL_SPI_TransmitReceive+0x30a>
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d12c      	bne.n	800425c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d912      	bls.n	8004232 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b02      	subs	r3, #2
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004230:	e012      	b.n	8004258 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	7812      	ldrb	r2, [r2, #0]
 800423e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d148      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x3aa>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d042      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d923      	bls.n	80042ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	b292      	uxth	r2, r2
 800428e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b02      	subs	r3, #2
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d81f      	bhi.n	80042f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	e016      	b.n	80042f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f103 020c 	add.w	r2, r3, #12
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042f8:	2301      	movs	r3, #1
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042fc:	f7fd fd22 	bl	8001d44 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004308:	429a      	cmp	r2, r3
 800430a:	d803      	bhi.n	8004314 <HAL_SPI_TransmitReceive+0x3c2>
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d102      	bne.n	800431a <HAL_SPI_TransmitReceive+0x3c8>
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004320:	e01c      	b.n	800435c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f af5b 	bne.w	80041e4 <HAL_SPI_TransmitReceive+0x292>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	f47f af54 	bne.w	80041e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f937 	bl	80045b4 <SPI_EndRxTxTransaction>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	661a      	str	r2, [r3, #96]	; 0x60
 8004358:	e000      	b.n	800435c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800435a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800436c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004370:	4618      	mov	r0, r3
 8004372:	3728      	adds	r7, #40	; 0x28
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004388:	f7fd fcdc 	bl	8001d44 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	4413      	add	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004398:	f7fd fcd4 	bl	8001d44 <HAL_GetTick>
 800439c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	015b      	lsls	r3, r3, #5
 80043a4:	0d1b      	lsrs	r3, r3, #20
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ae:	e054      	b.n	800445a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d050      	beq.n	800445a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b8:	f7fd fcc4 	bl	8001d44 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d902      	bls.n	80043ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d13d      	bne.n	800444a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e6:	d111      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d004      	beq.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fa:	d107      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004414:	d10f      	bne.n	8004436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e017      	b.n	800447a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3b01      	subs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d19b      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800449a:	f7fd fc53 	bl	8001d44 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80044aa:	f7fd fc4b 	bl	8001d44 <HAL_GetTick>
 80044ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044b8:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00da      	lsls	r2, r3, #3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	0d1b      	lsrs	r3, r3, #20
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044d0:	e060      	b.n	8004594 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044d8:	d107      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d050      	beq.n	8004594 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f2:	f7fd fc27 	bl	8001d44 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	429a      	cmp	r2, r3
 8004500:	d902      	bls.n	8004508 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d13d      	bne.n	8004584 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004520:	d111      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452a:	d004      	beq.n	8004536 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004534:	d107      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454e:	d10f      	bne.n	8004570 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e010      	b.n	80045a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3b01      	subs	r3, #1
 8004592:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d196      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000000 	.word	0x20000000

080045b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff ff5b 	bl	8004488 <SPI_WaitFifoStateUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e027      	b.n	8004638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2180      	movs	r1, #128	; 0x80
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fec0 	bl	8004378 <SPI_WaitFlagStateUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e014      	b.n	8004638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2200      	movs	r2, #0
 8004616:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff ff34 	bl	8004488 <SPI_WaitFifoStateUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e000      	b.n	8004638 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e041      	b.n	80046d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc ff80 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f000 fa0e 	bl	8004aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d001      	beq.n	80046f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e041      	b.n	800477c <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d01d      	beq.n	8004746 <HAL_TIM_Base_Start+0x66>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <HAL_TIM_Base_Start+0xa8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_TIM_Base_Start+0x66>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1c      	ldr	r2, [pc, #112]	; (800478c <HAL_TIM_Base_Start+0xac>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_TIM_Base_Start+0x66>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_TIM_Base_Start+0xb0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_TIM_Base_Start+0x66>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <HAL_TIM_Base_Start+0xb4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIM_Base_Start+0x66>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_TIM_Base_Start+0xb8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIM_Base_Start+0x66>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <HAL_TIM_Base_Start+0xbc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d111      	bne.n	800476a <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d010      	beq.n	800477a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	e007      	b.n	800477a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40001800 	.word	0x40001800
 8004798:	40014000 	.word	0x40014000
 800479c:	40015c00 	.word	0x40015c00

080047a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e041      	b.n	8004836 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f839 	bl	800483e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f000 f95e 	bl	8004aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_TIM_OC_Start+0x24>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e022      	b.n	80048be <HAL_TIM_OC_Start+0x6a>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d109      	bne.n	8004892 <HAL_TIM_OC_Start+0x3e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	e015      	b.n	80048be <HAL_TIM_OC_Start+0x6a>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d109      	bne.n	80048ac <HAL_TIM_OC_Start+0x58>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e008      	b.n	80048be <HAL_TIM_OC_Start+0x6a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07c      	b.n	80049c0 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_OC_Start+0x82>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d4:	e013      	b.n	80048fe <HAL_TIM_OC_Start+0xaa>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_OC_Start+0x92>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	e00b      	b.n	80048fe <HAL_TIM_OC_Start+0xaa>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_OC_Start+0xa2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f4:	e003      	b.n	80048fe <HAL_TIM_OC_Start+0xaa>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2201      	movs	r2, #1
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fabd 	bl	8004e86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2d      	ldr	r2, [pc, #180]	; (80049c8 <HAL_TIM_OC_Start+0x174>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d009      	beq.n	800492a <HAL_TIM_OC_Start+0xd6>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <HAL_TIM_OC_Start+0x178>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_TIM_OC_Start+0xd6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <HAL_TIM_OC_Start+0x17c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <HAL_TIM_OC_Start+0xda>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_TIM_OC_Start+0xdc>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004942:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIM_OC_Start+0x136>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a20      	ldr	r2, [pc, #128]	; (80049d4 <HAL_TIM_OC_Start+0x180>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIM_OC_Start+0x136>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <HAL_TIM_OC_Start+0x184>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIM_OC_Start+0x136>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_TIM_OC_Start+0x188>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIM_OC_Start+0x136>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_TIM_OC_Start+0x18c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIM_OC_Start+0x136>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <HAL_TIM_OC_Start+0x174>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIM_OC_Start+0x136>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <HAL_TIM_OC_Start+0x190>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d111      	bne.n	80049ae <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b06      	cmp	r3, #6
 800499a:	d010      	beq.n	80049be <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	e007      	b.n	80049be <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40001800 	.word	0x40001800
 80049e4:	40015c00 	.word	0x40015c00

080049e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e048      	b.n	8004a98 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d839      	bhi.n	8004a88 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a14:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a89 	.word	0x08004a89
 8004a24:	08004a89 	.word	0x08004a89
 8004a28:	08004a89 	.word	0x08004a89
 8004a2c:	08004a5f 	.word	0x08004a5f
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a6d 	.word	0x08004a6d
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004a89 	.word	0x08004a89
 8004a48:	08004a89 	.word	0x08004a89
 8004a4c:	08004a7b 	.word	0x08004a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f8bc 	bl	8004bd4 <TIM_OC1_SetConfig>
      break;
 8004a5c:	e017      	b.n	8004a8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f92f 	bl	8004cc8 <TIM_OC2_SetConfig>
      break;
 8004a6a:	e010      	b.n	8004a8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f98a 	bl	8004d8c <TIM_OC3_SetConfig>
      break;
 8004a78:	e009      	b.n	8004a8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f9c1 	bl	8004e08 <TIM_OC4_SetConfig>
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d00f      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3c      	ldr	r2, [pc, #240]	; (8004bac <TIM_Base_SetConfig+0x10c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a3b      	ldr	r2, [pc, #236]	; (8004bb0 <TIM_Base_SetConfig+0x110>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a3a      	ldr	r2, [pc, #232]	; (8004bb4 <TIM_Base_SetConfig+0x114>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a39      	ldr	r2, [pc, #228]	; (8004bb8 <TIM_Base_SetConfig+0x118>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d108      	bne.n	8004aea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af0:	d027      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <TIM_Base_SetConfig+0x10c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d023      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <TIM_Base_SetConfig+0x110>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01f      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <TIM_Base_SetConfig+0x114>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01b      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2b      	ldr	r2, [pc, #172]	; (8004bbc <TIM_Base_SetConfig+0x11c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d017      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <TIM_Base_SetConfig+0x120>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <TIM_Base_SetConfig+0x124>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <TIM_Base_SetConfig+0x128>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a27      	ldr	r2, [pc, #156]	; (8004bcc <TIM_Base_SetConfig+0x12c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <TIM_Base_SetConfig+0x130>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_Base_SetConfig+0xa2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <TIM_Base_SetConfig+0x118>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d108      	bne.n	8004b54 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <TIM_Base_SetConfig+0x128>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0xf0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <TIM_Base_SetConfig+0x12c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0xf0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <TIM_Base_SetConfig+0x130>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d103      	bne.n	8004b98 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40015c00 	.word	0x40015c00
 8004bbc:	40001800 	.word	0x40001800
 8004bc0:	40001c00 	.word	0x40001c00
 8004bc4:	40002000 	.word	0x40002000
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40014400 	.word	0x40014400
 8004bd0:	40014800 	.word	0x40014800

08004bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0302 	bic.w	r3, r3, #2
 8004c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <TIM_OC1_SetConfig+0xe8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_OC1_SetConfig+0x6c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <TIM_OC1_SetConfig+0xec>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC1_SetConfig+0x6c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <TIM_OC1_SetConfig+0xf0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10c      	bne.n	8004c5a <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0308 	bic.w	r3, r3, #8
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <TIM_OC1_SetConfig+0xe8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <TIM_OC1_SetConfig+0x9e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC1_SetConfig+0xec>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_OC1_SetConfig+0x9e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <TIM_OC1_SetConfig+0xf0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d111      	bne.n	8004c96 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800

08004cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0210 	bic.w	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <TIM_OC2_SetConfig+0xb8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_OC2_SetConfig+0x70>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC2_SetConfig+0xbc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC2_SetConfig+0x70>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <TIM_OC2_SetConfig+0xc0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10f      	bne.n	8004d58 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3e:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800

08004d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	031b      	lsls	r3, r3, #12
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2201      	movs	r2, #1
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	401a      	ands	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e03d      	b.n	8004f68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e040      	b.n	8005008 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fc fb8e 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8c0 	bl	8005138 <UART_SetConfig>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e022      	b.n	8005008 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa2e 	bl	800542c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fab5 	bl	8005570 <UART_CheckIdleState>
 8005006:	4603      	mov	r3, r0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005024:	2b20      	cmp	r3, #32
 8005026:	f040 8082 	bne.w	800512e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_UART_Transmit+0x26>
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07a      	b.n	8005130 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_UART_Transmit+0x38>
 8005044:	2302      	movs	r3, #2
 8005046:	e073      	b.n	8005130 <HAL_UART_Transmit+0x120>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2221      	movs	r2, #33	; 0x21
 800505c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800505e:	f7fc fe71 	bl	8001d44 <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507c:	d108      	bne.n	8005090 <HAL_UART_Transmit+0x80>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e003      	b.n	8005098 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050a0:	e02d      	b.n	80050fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 faa8 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e039      	b.n	8005130 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	881a      	ldrh	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ce:	b292      	uxth	r2, r2
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	3302      	adds	r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e008      	b.n	80050ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	b292      	uxth	r2, r2
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	3301      	adds	r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1cb      	bne.n	80050a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	2140      	movs	r1, #64	; 0x40
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fa74 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e005      	b.n	8005130 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3720      	adds	r7, #32
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005166:	f023 030c 	bic.w	r3, r3, #12
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	6979      	ldr	r1, [r7, #20]
 8005170:	430b      	orrs	r3, r1
 8005172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a99      	ldr	r2, [pc, #612]	; (8005418 <UART_SetConfig+0x2e0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d120      	bne.n	80051fa <UART_SetConfig+0xc2>
 80051b8:	4b98      	ldr	r3, [pc, #608]	; (800541c <UART_SetConfig+0x2e4>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d817      	bhi.n	80051f4 <UART_SetConfig+0xbc>
 80051c4:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x94>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	080051e9 	.word	0x080051e9
 80051d4:	080051ef 	.word	0x080051ef
 80051d8:	080051e3 	.word	0x080051e3
 80051dc:	2301      	movs	r3, #1
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e061      	b.n	80052a6 <UART_SetConfig+0x16e>
 80051e2:	2302      	movs	r3, #2
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e05e      	b.n	80052a6 <UART_SetConfig+0x16e>
 80051e8:	2304      	movs	r3, #4
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e05b      	b.n	80052a6 <UART_SetConfig+0x16e>
 80051ee:	2308      	movs	r3, #8
 80051f0:	77fb      	strb	r3, [r7, #31]
 80051f2:	e058      	b.n	80052a6 <UART_SetConfig+0x16e>
 80051f4:	2310      	movs	r3, #16
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e055      	b.n	80052a6 <UART_SetConfig+0x16e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a88      	ldr	r2, [pc, #544]	; (8005420 <UART_SetConfig+0x2e8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d124      	bne.n	800524e <UART_SetConfig+0x116>
 8005204:	4b85      	ldr	r3, [pc, #532]	; (800541c <UART_SetConfig+0x2e4>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800520c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005210:	d011      	beq.n	8005236 <UART_SetConfig+0xfe>
 8005212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005216:	d817      	bhi.n	8005248 <UART_SetConfig+0x110>
 8005218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800521c:	d011      	beq.n	8005242 <UART_SetConfig+0x10a>
 800521e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005222:	d811      	bhi.n	8005248 <UART_SetConfig+0x110>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <UART_SetConfig+0xf8>
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d006      	beq.n	800523c <UART_SetConfig+0x104>
 800522e:	e00b      	b.n	8005248 <UART_SetConfig+0x110>
 8005230:	2300      	movs	r3, #0
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e037      	b.n	80052a6 <UART_SetConfig+0x16e>
 8005236:	2302      	movs	r3, #2
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e034      	b.n	80052a6 <UART_SetConfig+0x16e>
 800523c:	2304      	movs	r3, #4
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e031      	b.n	80052a6 <UART_SetConfig+0x16e>
 8005242:	2308      	movs	r3, #8
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e02e      	b.n	80052a6 <UART_SetConfig+0x16e>
 8005248:	2310      	movs	r3, #16
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e02b      	b.n	80052a6 <UART_SetConfig+0x16e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a74      	ldr	r2, [pc, #464]	; (8005424 <UART_SetConfig+0x2ec>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d124      	bne.n	80052a2 <UART_SetConfig+0x16a>
 8005258:	4b70      	ldr	r3, [pc, #448]	; (800541c <UART_SetConfig+0x2e4>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005260:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005264:	d011      	beq.n	800528a <UART_SetConfig+0x152>
 8005266:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800526a:	d817      	bhi.n	800529c <UART_SetConfig+0x164>
 800526c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005270:	d011      	beq.n	8005296 <UART_SetConfig+0x15e>
 8005272:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005276:	d811      	bhi.n	800529c <UART_SetConfig+0x164>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <UART_SetConfig+0x14c>
 800527c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005280:	d006      	beq.n	8005290 <UART_SetConfig+0x158>
 8005282:	e00b      	b.n	800529c <UART_SetConfig+0x164>
 8005284:	2300      	movs	r3, #0
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e00d      	b.n	80052a6 <UART_SetConfig+0x16e>
 800528a:	2302      	movs	r3, #2
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e00a      	b.n	80052a6 <UART_SetConfig+0x16e>
 8005290:	2304      	movs	r3, #4
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e007      	b.n	80052a6 <UART_SetConfig+0x16e>
 8005296:	2308      	movs	r3, #8
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e004      	b.n	80052a6 <UART_SetConfig+0x16e>
 800529c:	2310      	movs	r3, #16
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e001      	b.n	80052a6 <UART_SetConfig+0x16e>
 80052a2:	2310      	movs	r3, #16
 80052a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ae:	d15b      	bne.n	8005368 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 80052b0:	7ffb      	ldrb	r3, [r7, #31]
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d827      	bhi.n	8005306 <UART_SetConfig+0x1ce>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x184>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052f1 	.word	0x080052f1
 80052c8:	08005307 	.word	0x08005307
 80052cc:	080052f7 	.word	0x080052f7
 80052d0:	08005307 	.word	0x08005307
 80052d4:	08005307 	.word	0x08005307
 80052d8:	08005307 	.word	0x08005307
 80052dc:	080052ff 	.word	0x080052ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fe fa66 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 80052e4:	61b8      	str	r0, [r7, #24]
        break;
 80052e6:	e013      	b.n	8005310 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7fe fa84 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 80052ec:	61b8      	str	r0, [r7, #24]
        break;
 80052ee:	e00f      	b.n	8005310 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f0:	4b4d      	ldr	r3, [pc, #308]	; (8005428 <UART_SetConfig+0x2f0>)
 80052f2:	61bb      	str	r3, [r7, #24]
        break;
 80052f4:	e00c      	b.n	8005310 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7fe f9e5 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80052fa:	61b8      	str	r0, [r7, #24]
        break;
 80052fc:	e008      	b.n	8005310 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005302:	61bb      	str	r3, [r7, #24]
        break;
 8005304:	e004      	b.n	8005310 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	77bb      	strb	r3, [r7, #30]
        break;
 800530e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d074      	beq.n	8005400 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	005a      	lsls	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d916      	bls.n	8005362 <UART_SetConfig+0x22a>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d212      	bcs.n	8005362 <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f023 030f 	bic.w	r3, r3, #15
 8005344:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	b29b      	uxth	r3, r3
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	b29a      	uxth	r2, r3
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	4313      	orrs	r3, r2
 8005356:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	89fa      	ldrh	r2, [r7, #14]
 800535e:	60da      	str	r2, [r3, #12]
 8005360:	e04e      	b.n	8005400 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	77bb      	strb	r3, [r7, #30]
 8005366:	e04b      	b.n	8005400 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005368:	7ffb      	ldrb	r3, [r7, #31]
 800536a:	2b08      	cmp	r3, #8
 800536c:	d827      	bhi.n	80053be <UART_SetConfig+0x286>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x23c>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	080053bf 	.word	0x080053bf
 8005384:	080053af 	.word	0x080053af
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053bf 	.word	0x080053bf
 8005390:	080053bf 	.word	0x080053bf
 8005394:	080053b7 	.word	0x080053b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005398:	f7fe fa0a 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 800539c:	61b8      	str	r0, [r7, #24]
        break;
 800539e:	e013      	b.n	80053c8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fe fa28 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 80053a4:	61b8      	str	r0, [r7, #24]
        break;
 80053a6:	e00f      	b.n	80053c8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <UART_SetConfig+0x2f0>)
 80053aa:	61bb      	str	r3, [r7, #24]
        break;
 80053ac:	e00c      	b.n	80053c8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7fe f989 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80053b2:	61b8      	str	r0, [r7, #24]
        break;
 80053b4:	e008      	b.n	80053c8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	61bb      	str	r3, [r7, #24]
        break;
 80053bc:	e004      	b.n	80053c8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	77bb      	strb	r3, [r7, #30]
        break;
 80053c6:	bf00      	nop
    }

    if (pclk != 0U)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d018      	beq.n	8005400 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	085a      	lsrs	r2, r3, #1
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	441a      	add	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	d908      	bls.n	80053fc <UART_SetConfig+0x2c4>
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d204      	bcs.n	80053fc <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	e001      	b.n	8005400 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800540c:	7fbb      	ldrb	r3, [r7, #30]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40013800 	.word	0x40013800
 800541c:	40021000 	.word	0x40021000
 8005420:	40004400 	.word	0x40004400
 8005424:	40004800 	.word	0x40004800
 8005428:	007a1200 	.word	0x007a1200

0800542c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01a      	beq.n	8005542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552a:	d10a      	bne.n	8005542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af02      	add	r7, sp, #8
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005580:	f7fc fbe0 	bl	8001d44 <HAL_GetTick>
 8005584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b08      	cmp	r3, #8
 8005592:	d10e      	bne.n	80055b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f82d 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e023      	b.n	80055fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d10e      	bne.n	80055de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f817 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e00d      	b.n	80055fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b09c      	sub	sp, #112	; 0x70
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	e0a5      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	f000 80a1 	beq.w	8005760 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fc fb91 	bl	8001d44 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <UART_WaitOnFlagUntilTimeout+0x32>
 800562e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005630:	2b00      	cmp	r3, #0
 8005632:	d13e      	bne.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005648:	667b      	str	r3, [r7, #100]	; 0x64
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005654:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e6      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	663b      	str	r3, [r7, #96]	; 0x60
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3308      	adds	r3, #8
 8005684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005686:	64ba      	str	r2, [r7, #72]	; 0x48
 8005688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800568c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e5      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e067      	b.n	8005782 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d04f      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ce:	d147      	bne.n	8005760 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
 80056fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e6      	bne.n	80056da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	613b      	str	r3, [r7, #16]
   return(result);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 0301 	bic.w	r3, r3, #1
 8005722:	66bb      	str	r3, [r7, #104]	; 0x68
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3308      	adds	r3, #8
 800572a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800572c:	623a      	str	r2, [r7, #32]
 800572e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	61bb      	str	r3, [r7, #24]
   return(result);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e5      	bne.n	800570c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e010      	b.n	8005782 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	429a      	cmp	r2, r3
 800577c:	f43f af4a 	beq.w	8005614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3770      	adds	r7, #112	; 0x70
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <__errno>:
 800578c:	4b01      	ldr	r3, [pc, #4]	; (8005794 <__errno+0x8>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4d0d      	ldr	r5, [pc, #52]	; (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	; (80057d4 <__libc_init_array+0x3c>)
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2600      	movs	r6, #0
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4d0b      	ldr	r5, [pc, #44]	; (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	; (80057dc <__libc_init_array+0x44>)
 80057ac:	f002 fe22 	bl	80083f4 <_init>
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2600      	movs	r6, #0
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	080088a4 	.word	0x080088a4
 80057d4:	080088a4 	.word	0x080088a4
 80057d8:	080088a4 	.word	0x080088a4
 80057dc:	080088a8 	.word	0x080088a8

080057e0 <memset>:
 80057e0:	4402      	add	r2, r0
 80057e2:	4603      	mov	r3, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <__cvt>:
 80057f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	ec55 4b10 	vmov	r4, r5, d0
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	460e      	mov	r6, r1
 80057fc:	4619      	mov	r1, r3
 80057fe:	462b      	mov	r3, r5
 8005800:	bfbb      	ittet	lt
 8005802:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005806:	461d      	movlt	r5, r3
 8005808:	2300      	movge	r3, #0
 800580a:	232d      	movlt	r3, #45	; 0x2d
 800580c:	700b      	strb	r3, [r1, #0]
 800580e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005810:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005814:	4691      	mov	r9, r2
 8005816:	f023 0820 	bic.w	r8, r3, #32
 800581a:	bfbc      	itt	lt
 800581c:	4622      	movlt	r2, r4
 800581e:	4614      	movlt	r4, r2
 8005820:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005824:	d005      	beq.n	8005832 <__cvt+0x42>
 8005826:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800582a:	d100      	bne.n	800582e <__cvt+0x3e>
 800582c:	3601      	adds	r6, #1
 800582e:	2102      	movs	r1, #2
 8005830:	e000      	b.n	8005834 <__cvt+0x44>
 8005832:	2103      	movs	r1, #3
 8005834:	ab03      	add	r3, sp, #12
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	ab02      	add	r3, sp, #8
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	ec45 4b10 	vmov	d0, r4, r5
 8005840:	4653      	mov	r3, sl
 8005842:	4632      	mov	r2, r6
 8005844:	f000 fe30 	bl	80064a8 <_dtoa_r>
 8005848:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800584c:	4607      	mov	r7, r0
 800584e:	d102      	bne.n	8005856 <__cvt+0x66>
 8005850:	f019 0f01 	tst.w	r9, #1
 8005854:	d022      	beq.n	800589c <__cvt+0xac>
 8005856:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800585a:	eb07 0906 	add.w	r9, r7, r6
 800585e:	d110      	bne.n	8005882 <__cvt+0x92>
 8005860:	783b      	ldrb	r3, [r7, #0]
 8005862:	2b30      	cmp	r3, #48	; 0x30
 8005864:	d10a      	bne.n	800587c <__cvt+0x8c>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fb f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005872:	b918      	cbnz	r0, 800587c <__cvt+0x8c>
 8005874:	f1c6 0601 	rsb	r6, r6, #1
 8005878:	f8ca 6000 	str.w	r6, [sl]
 800587c:	f8da 3000 	ldr.w	r3, [sl]
 8005880:	4499      	add	r9, r3
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	4620      	mov	r0, r4
 8005888:	4629      	mov	r1, r5
 800588a:	f7fb f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800588e:	b108      	cbz	r0, 8005894 <__cvt+0xa4>
 8005890:	f8cd 900c 	str.w	r9, [sp, #12]
 8005894:	2230      	movs	r2, #48	; 0x30
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	454b      	cmp	r3, r9
 800589a:	d307      	bcc.n	80058ac <__cvt+0xbc>
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058a0:	1bdb      	subs	r3, r3, r7
 80058a2:	4638      	mov	r0, r7
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	b004      	add	sp, #16
 80058a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ac:	1c59      	adds	r1, r3, #1
 80058ae:	9103      	str	r1, [sp, #12]
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e7f0      	b.n	8005896 <__cvt+0xa6>

080058b4 <__exponent>:
 80058b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b6:	4603      	mov	r3, r0
 80058b8:	2900      	cmp	r1, #0
 80058ba:	bfb8      	it	lt
 80058bc:	4249      	neglt	r1, r1
 80058be:	f803 2b02 	strb.w	r2, [r3], #2
 80058c2:	bfb4      	ite	lt
 80058c4:	222d      	movlt	r2, #45	; 0x2d
 80058c6:	222b      	movge	r2, #43	; 0x2b
 80058c8:	2909      	cmp	r1, #9
 80058ca:	7042      	strb	r2, [r0, #1]
 80058cc:	dd2a      	ble.n	8005924 <__exponent+0x70>
 80058ce:	f10d 0407 	add.w	r4, sp, #7
 80058d2:	46a4      	mov	ip, r4
 80058d4:	270a      	movs	r7, #10
 80058d6:	46a6      	mov	lr, r4
 80058d8:	460a      	mov	r2, r1
 80058da:	fb91 f6f7 	sdiv	r6, r1, r7
 80058de:	fb07 1516 	mls	r5, r7, r6, r1
 80058e2:	3530      	adds	r5, #48	; 0x30
 80058e4:	2a63      	cmp	r2, #99	; 0x63
 80058e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80058ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058ee:	4631      	mov	r1, r6
 80058f0:	dcf1      	bgt.n	80058d6 <__exponent+0x22>
 80058f2:	3130      	adds	r1, #48	; 0x30
 80058f4:	f1ae 0502 	sub.w	r5, lr, #2
 80058f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058fc:	1c44      	adds	r4, r0, #1
 80058fe:	4629      	mov	r1, r5
 8005900:	4561      	cmp	r1, ip
 8005902:	d30a      	bcc.n	800591a <__exponent+0x66>
 8005904:	f10d 0209 	add.w	r2, sp, #9
 8005908:	eba2 020e 	sub.w	r2, r2, lr
 800590c:	4565      	cmp	r5, ip
 800590e:	bf88      	it	hi
 8005910:	2200      	movhi	r2, #0
 8005912:	4413      	add	r3, r2
 8005914:	1a18      	subs	r0, r3, r0
 8005916:	b003      	add	sp, #12
 8005918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800591e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005922:	e7ed      	b.n	8005900 <__exponent+0x4c>
 8005924:	2330      	movs	r3, #48	; 0x30
 8005926:	3130      	adds	r1, #48	; 0x30
 8005928:	7083      	strb	r3, [r0, #2]
 800592a:	70c1      	strb	r1, [r0, #3]
 800592c:	1d03      	adds	r3, r0, #4
 800592e:	e7f1      	b.n	8005914 <__exponent+0x60>

08005930 <_printf_float>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ed2d 8b02 	vpush	{d8}
 8005938:	b08d      	sub	sp, #52	; 0x34
 800593a:	460c      	mov	r4, r1
 800593c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005940:	4616      	mov	r6, r2
 8005942:	461f      	mov	r7, r3
 8005944:	4605      	mov	r5, r0
 8005946:	f001 fd55 	bl	80073f4 <_localeconv_r>
 800594a:	f8d0 a000 	ldr.w	sl, [r0]
 800594e:	4650      	mov	r0, sl
 8005950:	f7fa fc3e 	bl	80001d0 <strlen>
 8005954:	2300      	movs	r3, #0
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	9305      	str	r3, [sp, #20]
 800595c:	f8d8 3000 	ldr.w	r3, [r8]
 8005960:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005964:	3307      	adds	r3, #7
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	f103 0208 	add.w	r2, r3, #8
 800596e:	f8c8 2000 	str.w	r2, [r8]
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800597a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800597e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	f8cd 8018 	str.w	r8, [sp, #24]
 8005988:	ee08 0a10 	vmov	s16, r0
 800598c:	4b9f      	ldr	r3, [pc, #636]	; (8005c0c <_printf_float+0x2dc>)
 800598e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	f7fb f8c9 	bl	8000b2c <__aeabi_dcmpun>
 800599a:	bb88      	cbnz	r0, 8005a00 <_printf_float+0xd0>
 800599c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a0:	4b9a      	ldr	r3, [pc, #616]	; (8005c0c <_printf_float+0x2dc>)
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	f7fb f8a3 	bl	8000af0 <__aeabi_dcmple>
 80059aa:	bb48      	cbnz	r0, 8005a00 <_printf_float+0xd0>
 80059ac:	2200      	movs	r2, #0
 80059ae:	2300      	movs	r3, #0
 80059b0:	4640      	mov	r0, r8
 80059b2:	4649      	mov	r1, r9
 80059b4:	f7fb f892 	bl	8000adc <__aeabi_dcmplt>
 80059b8:	b110      	cbz	r0, 80059c0 <_printf_float+0x90>
 80059ba:	232d      	movs	r3, #45	; 0x2d
 80059bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c0:	4b93      	ldr	r3, [pc, #588]	; (8005c10 <_printf_float+0x2e0>)
 80059c2:	4894      	ldr	r0, [pc, #592]	; (8005c14 <_printf_float+0x2e4>)
 80059c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059c8:	bf94      	ite	ls
 80059ca:	4698      	movls	r8, r3
 80059cc:	4680      	movhi	r8, r0
 80059ce:	2303      	movs	r3, #3
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	9b05      	ldr	r3, [sp, #20]
 80059d4:	f023 0204 	bic.w	r2, r3, #4
 80059d8:	6022      	str	r2, [r4, #0]
 80059da:	f04f 0900 	mov.w	r9, #0
 80059de:	9700      	str	r7, [sp, #0]
 80059e0:	4633      	mov	r3, r6
 80059e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 f9d8 	bl	8005d9c <_printf_common>
 80059ec:	3001      	adds	r0, #1
 80059ee:	f040 8090 	bne.w	8005b12 <_printf_float+0x1e2>
 80059f2:	f04f 30ff 	mov.w	r0, #4294967295
 80059f6:	b00d      	add	sp, #52	; 0x34
 80059f8:	ecbd 8b02 	vpop	{d8}
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	4640      	mov	r0, r8
 8005a06:	4649      	mov	r1, r9
 8005a08:	f7fb f890 	bl	8000b2c <__aeabi_dcmpun>
 8005a0c:	b140      	cbz	r0, 8005a20 <_printf_float+0xf0>
 8005a0e:	464b      	mov	r3, r9
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bfbc      	itt	lt
 8005a14:	232d      	movlt	r3, #45	; 0x2d
 8005a16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a1a:	487f      	ldr	r0, [pc, #508]	; (8005c18 <_printf_float+0x2e8>)
 8005a1c:	4b7f      	ldr	r3, [pc, #508]	; (8005c1c <_printf_float+0x2ec>)
 8005a1e:	e7d1      	b.n	80059c4 <_printf_float+0x94>
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a26:	9206      	str	r2, [sp, #24]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	d13f      	bne.n	8005aac <_printf_float+0x17c>
 8005a2c:	2306      	movs	r3, #6
 8005a2e:	6063      	str	r3, [r4, #4]
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	6861      	ldr	r1, [r4, #4]
 8005a34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9303      	str	r3, [sp, #12]
 8005a3c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a42:	ab09      	add	r3, sp, #36	; 0x24
 8005a44:	ec49 8b10 	vmov	d0, r8, r9
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	6022      	str	r2, [r4, #0]
 8005a4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a50:	4628      	mov	r0, r5
 8005a52:	f7ff fecd 	bl	80057f0 <__cvt>
 8005a56:	9b06      	ldr	r3, [sp, #24]
 8005a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a5a:	2b47      	cmp	r3, #71	; 0x47
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	d108      	bne.n	8005a72 <_printf_float+0x142>
 8005a60:	1cc8      	adds	r0, r1, #3
 8005a62:	db02      	blt.n	8005a6a <_printf_float+0x13a>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	4299      	cmp	r1, r3
 8005a68:	dd41      	ble.n	8005aee <_printf_float+0x1be>
 8005a6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a6e:	fa5f fb8b 	uxtb.w	fp, fp
 8005a72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a76:	d820      	bhi.n	8005aba <_printf_float+0x18a>
 8005a78:	3901      	subs	r1, #1
 8005a7a:	465a      	mov	r2, fp
 8005a7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a80:	9109      	str	r1, [sp, #36]	; 0x24
 8005a82:	f7ff ff17 	bl	80058b4 <__exponent>
 8005a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a88:	1813      	adds	r3, r2, r0
 8005a8a:	2a01      	cmp	r2, #1
 8005a8c:	4681      	mov	r9, r0
 8005a8e:	6123      	str	r3, [r4, #16]
 8005a90:	dc02      	bgt.n	8005a98 <_printf_float+0x168>
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	07d2      	lsls	r2, r2, #31
 8005a96:	d501      	bpl.n	8005a9c <_printf_float+0x16c>
 8005a98:	3301      	adds	r3, #1
 8005a9a:	6123      	str	r3, [r4, #16]
 8005a9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d09c      	beq.n	80059de <_printf_float+0xae>
 8005aa4:	232d      	movs	r3, #45	; 0x2d
 8005aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aaa:	e798      	b.n	80059de <_printf_float+0xae>
 8005aac:	9a06      	ldr	r2, [sp, #24]
 8005aae:	2a47      	cmp	r2, #71	; 0x47
 8005ab0:	d1be      	bne.n	8005a30 <_printf_float+0x100>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1bc      	bne.n	8005a30 <_printf_float+0x100>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e7b9      	b.n	8005a2e <_printf_float+0xfe>
 8005aba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005abe:	d118      	bne.n	8005af2 <_printf_float+0x1c2>
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	dd0b      	ble.n	8005ade <_printf_float+0x1ae>
 8005ac6:	6121      	str	r1, [r4, #16]
 8005ac8:	b913      	cbnz	r3, 8005ad0 <_printf_float+0x1a0>
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	07d0      	lsls	r0, r2, #31
 8005ace:	d502      	bpl.n	8005ad6 <_printf_float+0x1a6>
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	440b      	add	r3, r1
 8005ad4:	6123      	str	r3, [r4, #16]
 8005ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ad8:	f04f 0900 	mov.w	r9, #0
 8005adc:	e7de      	b.n	8005a9c <_printf_float+0x16c>
 8005ade:	b913      	cbnz	r3, 8005ae6 <_printf_float+0x1b6>
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	07d2      	lsls	r2, r2, #31
 8005ae4:	d501      	bpl.n	8005aea <_printf_float+0x1ba>
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	e7f4      	b.n	8005ad4 <_printf_float+0x1a4>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e7f2      	b.n	8005ad4 <_printf_float+0x1a4>
 8005aee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af4:	4299      	cmp	r1, r3
 8005af6:	db05      	blt.n	8005b04 <_printf_float+0x1d4>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	6121      	str	r1, [r4, #16]
 8005afc:	07d8      	lsls	r0, r3, #31
 8005afe:	d5ea      	bpl.n	8005ad6 <_printf_float+0x1a6>
 8005b00:	1c4b      	adds	r3, r1, #1
 8005b02:	e7e7      	b.n	8005ad4 <_printf_float+0x1a4>
 8005b04:	2900      	cmp	r1, #0
 8005b06:	bfd4      	ite	le
 8005b08:	f1c1 0202 	rsble	r2, r1, #2
 8005b0c:	2201      	movgt	r2, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	e7e0      	b.n	8005ad4 <_printf_float+0x1a4>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	055a      	lsls	r2, r3, #21
 8005b16:	d407      	bmi.n	8005b28 <_printf_float+0x1f8>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	d12c      	bne.n	8005b80 <_printf_float+0x250>
 8005b26:	e764      	b.n	80059f2 <_printf_float+0xc2>
 8005b28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b2c:	f240 80e0 	bls.w	8005cf0 <_printf_float+0x3c0>
 8005b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b34:	2200      	movs	r2, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	f7fa ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d034      	beq.n	8005baa <_printf_float+0x27a>
 8005b40:	4a37      	ldr	r2, [pc, #220]	; (8005c20 <_printf_float+0x2f0>)
 8005b42:	2301      	movs	r3, #1
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f af51 	beq.w	80059f2 <_printf_float+0xc2>
 8005b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b54:	429a      	cmp	r2, r3
 8005b56:	db02      	blt.n	8005b5e <_printf_float+0x22e>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	07d8      	lsls	r0, r3, #31
 8005b5c:	d510      	bpl.n	8005b80 <_printf_float+0x250>
 8005b5e:	ee18 3a10 	vmov	r3, s16
 8005b62:	4652      	mov	r2, sl
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f af41 	beq.w	80059f2 <_printf_float+0xc2>
 8005b70:	f04f 0800 	mov.w	r8, #0
 8005b74:	f104 091a 	add.w	r9, r4, #26
 8005b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	4543      	cmp	r3, r8
 8005b7e:	dc09      	bgt.n	8005b94 <_printf_float+0x264>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	079b      	lsls	r3, r3, #30
 8005b84:	f100 8105 	bmi.w	8005d92 <_printf_float+0x462>
 8005b88:	68e0      	ldr	r0, [r4, #12]
 8005b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b8c:	4298      	cmp	r0, r3
 8005b8e:	bfb8      	it	lt
 8005b90:	4618      	movlt	r0, r3
 8005b92:	e730      	b.n	80059f6 <_printf_float+0xc6>
 8005b94:	2301      	movs	r3, #1
 8005b96:	464a      	mov	r2, r9
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	47b8      	blx	r7
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f43f af27 	beq.w	80059f2 <_printf_float+0xc2>
 8005ba4:	f108 0801 	add.w	r8, r8, #1
 8005ba8:	e7e6      	b.n	8005b78 <_printf_float+0x248>
 8005baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dc39      	bgt.n	8005c24 <_printf_float+0x2f4>
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <_printf_float+0x2f0>)
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f43f af19 	beq.w	80059f2 <_printf_float+0xc2>
 8005bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d102      	bne.n	8005bce <_printf_float+0x29e>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	07d9      	lsls	r1, r3, #31
 8005bcc:	d5d8      	bpl.n	8005b80 <_printf_float+0x250>
 8005bce:	ee18 3a10 	vmov	r3, s16
 8005bd2:	4652      	mov	r2, sl
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	47b8      	blx	r7
 8005bda:	3001      	adds	r0, #1
 8005bdc:	f43f af09 	beq.w	80059f2 <_printf_float+0xc2>
 8005be0:	f04f 0900 	mov.w	r9, #0
 8005be4:	f104 0a1a 	add.w	sl, r4, #26
 8005be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bea:	425b      	negs	r3, r3
 8005bec:	454b      	cmp	r3, r9
 8005bee:	dc01      	bgt.n	8005bf4 <_printf_float+0x2c4>
 8005bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf2:	e792      	b.n	8005b1a <_printf_float+0x1ea>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	4652      	mov	r2, sl
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f aef7 	beq.w	80059f2 <_printf_float+0xc2>
 8005c04:	f109 0901 	add.w	r9, r9, #1
 8005c08:	e7ee      	b.n	8005be8 <_printf_float+0x2b8>
 8005c0a:	bf00      	nop
 8005c0c:	7fefffff 	.word	0x7fefffff
 8005c10:	080084d0 	.word	0x080084d0
 8005c14:	080084d4 	.word	0x080084d4
 8005c18:	080084dc 	.word	0x080084dc
 8005c1c:	080084d8 	.word	0x080084d8
 8005c20:	080084e0 	.word	0x080084e0
 8005c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	bfa8      	it	ge
 8005c2c:	461a      	movge	r2, r3
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	4691      	mov	r9, r2
 8005c32:	dc37      	bgt.n	8005ca4 <_printf_float+0x374>
 8005c34:	f04f 0b00 	mov.w	fp, #0
 8005c38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c3c:	f104 021a 	add.w	r2, r4, #26
 8005c40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	eba3 0309 	sub.w	r3, r3, r9
 8005c48:	455b      	cmp	r3, fp
 8005c4a:	dc33      	bgt.n	8005cb4 <_printf_float+0x384>
 8005c4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c50:	429a      	cmp	r2, r3
 8005c52:	db3b      	blt.n	8005ccc <_printf_float+0x39c>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07da      	lsls	r2, r3, #31
 8005c58:	d438      	bmi.n	8005ccc <_printf_float+0x39c>
 8005c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5c:	9a05      	ldr	r2, [sp, #20]
 8005c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c60:	1a9a      	subs	r2, r3, r2
 8005c62:	eba3 0901 	sub.w	r9, r3, r1
 8005c66:	4591      	cmp	r9, r2
 8005c68:	bfa8      	it	ge
 8005c6a:	4691      	movge	r9, r2
 8005c6c:	f1b9 0f00 	cmp.w	r9, #0
 8005c70:	dc35      	bgt.n	8005cde <_printf_float+0x3ae>
 8005c72:	f04f 0800 	mov.w	r8, #0
 8005c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c7a:	f104 0a1a 	add.w	sl, r4, #26
 8005c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	eba3 0309 	sub.w	r3, r3, r9
 8005c88:	4543      	cmp	r3, r8
 8005c8a:	f77f af79 	ble.w	8005b80 <_printf_float+0x250>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4652      	mov	r2, sl
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	f43f aeaa 	beq.w	80059f2 <_printf_float+0xc2>
 8005c9e:	f108 0801 	add.w	r8, r8, #1
 8005ca2:	e7ec      	b.n	8005c7e <_printf_float+0x34e>
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4642      	mov	r2, r8
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d1c0      	bne.n	8005c34 <_printf_float+0x304>
 8005cb2:	e69e      	b.n	80059f2 <_printf_float+0xc2>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	9205      	str	r2, [sp, #20]
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f ae97 	beq.w	80059f2 <_printf_float+0xc2>
 8005cc4:	9a05      	ldr	r2, [sp, #20]
 8005cc6:	f10b 0b01 	add.w	fp, fp, #1
 8005cca:	e7b9      	b.n	8005c40 <_printf_float+0x310>
 8005ccc:	ee18 3a10 	vmov	r3, s16
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d1be      	bne.n	8005c5a <_printf_float+0x32a>
 8005cdc:	e689      	b.n	80059f2 <_printf_float+0xc2>
 8005cde:	9a05      	ldr	r2, [sp, #20]
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	4442      	add	r2, r8
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	d1c1      	bne.n	8005c72 <_printf_float+0x342>
 8005cee:	e680      	b.n	80059f2 <_printf_float+0xc2>
 8005cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf2:	2a01      	cmp	r2, #1
 8005cf4:	dc01      	bgt.n	8005cfa <_printf_float+0x3ca>
 8005cf6:	07db      	lsls	r3, r3, #31
 8005cf8:	d538      	bpl.n	8005d6c <_printf_float+0x43c>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	f43f ae74 	beq.w	80059f2 <_printf_float+0xc2>
 8005d0a:	ee18 3a10 	vmov	r3, s16
 8005d0e:	4652      	mov	r2, sl
 8005d10:	4631      	mov	r1, r6
 8005d12:	4628      	mov	r0, r5
 8005d14:	47b8      	blx	r7
 8005d16:	3001      	adds	r0, #1
 8005d18:	f43f ae6b 	beq.w	80059f2 <_printf_float+0xc2>
 8005d1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d20:	2200      	movs	r2, #0
 8005d22:	2300      	movs	r3, #0
 8005d24:	f7fa fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d28:	b9d8      	cbnz	r0, 8005d62 <_printf_float+0x432>
 8005d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2c:	f108 0201 	add.w	r2, r8, #1
 8005d30:	3b01      	subs	r3, #1
 8005d32:	4631      	mov	r1, r6
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b8      	blx	r7
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d10e      	bne.n	8005d5a <_printf_float+0x42a>
 8005d3c:	e659      	b.n	80059f2 <_printf_float+0xc2>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4652      	mov	r2, sl
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae52 	beq.w	80059f2 <_printf_float+0xc2>
 8005d4e:	f108 0801 	add.w	r8, r8, #1
 8005d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d54:	3b01      	subs	r3, #1
 8005d56:	4543      	cmp	r3, r8
 8005d58:	dcf1      	bgt.n	8005d3e <_printf_float+0x40e>
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d60:	e6dc      	b.n	8005b1c <_printf_float+0x1ec>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	f104 0a1a 	add.w	sl, r4, #26
 8005d6a:	e7f2      	b.n	8005d52 <_printf_float+0x422>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4642      	mov	r2, r8
 8005d70:	e7df      	b.n	8005d32 <_printf_float+0x402>
 8005d72:	2301      	movs	r3, #1
 8005d74:	464a      	mov	r2, r9
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f ae38 	beq.w	80059f2 <_printf_float+0xc2>
 8005d82:	f108 0801 	add.w	r8, r8, #1
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d8a:	1a5b      	subs	r3, r3, r1
 8005d8c:	4543      	cmp	r3, r8
 8005d8e:	dcf0      	bgt.n	8005d72 <_printf_float+0x442>
 8005d90:	e6fa      	b.n	8005b88 <_printf_float+0x258>
 8005d92:	f04f 0800 	mov.w	r8, #0
 8005d96:	f104 0919 	add.w	r9, r4, #25
 8005d9a:	e7f4      	b.n	8005d86 <_printf_float+0x456>

08005d9c <_printf_common>:
 8005d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	4616      	mov	r6, r2
 8005da2:	4699      	mov	r9, r3
 8005da4:	688a      	ldr	r2, [r1, #8]
 8005da6:	690b      	ldr	r3, [r1, #16]
 8005da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bfb8      	it	lt
 8005db0:	4613      	movlt	r3, r2
 8005db2:	6033      	str	r3, [r6, #0]
 8005db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005db8:	4607      	mov	r7, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	b10a      	cbz	r2, 8005dc2 <_printf_common+0x26>
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	6033      	str	r3, [r6, #0]
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	0699      	lsls	r1, r3, #26
 8005dc6:	bf42      	ittt	mi
 8005dc8:	6833      	ldrmi	r3, [r6, #0]
 8005dca:	3302      	addmi	r3, #2
 8005dcc:	6033      	strmi	r3, [r6, #0]
 8005dce:	6825      	ldr	r5, [r4, #0]
 8005dd0:	f015 0506 	ands.w	r5, r5, #6
 8005dd4:	d106      	bne.n	8005de4 <_printf_common+0x48>
 8005dd6:	f104 0a19 	add.w	sl, r4, #25
 8005dda:	68e3      	ldr	r3, [r4, #12]
 8005ddc:	6832      	ldr	r2, [r6, #0]
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	42ab      	cmp	r3, r5
 8005de2:	dc26      	bgt.n	8005e32 <_printf_common+0x96>
 8005de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005de8:	1e13      	subs	r3, r2, #0
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	bf18      	it	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	0692      	lsls	r2, r2, #26
 8005df2:	d42b      	bmi.n	8005e4c <_printf_common+0xb0>
 8005df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c0      	blx	r8
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d01e      	beq.n	8005e40 <_printf_common+0xa4>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	68e5      	ldr	r5, [r4, #12]
 8005e06:	6832      	ldr	r2, [r6, #0]
 8005e08:	f003 0306 	and.w	r3, r3, #6
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	bf08      	it	eq
 8005e10:	1aad      	subeq	r5, r5, r2
 8005e12:	68a3      	ldr	r3, [r4, #8]
 8005e14:	6922      	ldr	r2, [r4, #16]
 8005e16:	bf0c      	ite	eq
 8005e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e1c:	2500      	movne	r5, #0
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	bfc4      	itt	gt
 8005e22:	1a9b      	subgt	r3, r3, r2
 8005e24:	18ed      	addgt	r5, r5, r3
 8005e26:	2600      	movs	r6, #0
 8005e28:	341a      	adds	r4, #26
 8005e2a:	42b5      	cmp	r5, r6
 8005e2c:	d11a      	bne.n	8005e64 <_printf_common+0xc8>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e008      	b.n	8005e44 <_printf_common+0xa8>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4652      	mov	r2, sl
 8005e36:	4649      	mov	r1, r9
 8005e38:	4638      	mov	r0, r7
 8005e3a:	47c0      	blx	r8
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d103      	bne.n	8005e48 <_printf_common+0xac>
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e48:	3501      	adds	r5, #1
 8005e4a:	e7c6      	b.n	8005dda <_printf_common+0x3e>
 8005e4c:	18e1      	adds	r1, r4, r3
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	2030      	movs	r0, #48	; 0x30
 8005e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e56:	4422      	add	r2, r4
 8005e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e60:	3302      	adds	r3, #2
 8005e62:	e7c7      	b.n	8005df4 <_printf_common+0x58>
 8005e64:	2301      	movs	r3, #1
 8005e66:	4622      	mov	r2, r4
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	47c0      	blx	r8
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d0e6      	beq.n	8005e40 <_printf_common+0xa4>
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7d9      	b.n	8005e2a <_printf_common+0x8e>
	...

08005e78 <_printf_i>:
 8005e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	7e0f      	ldrb	r7, [r1, #24]
 8005e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e80:	2f78      	cmp	r7, #120	; 0x78
 8005e82:	4691      	mov	r9, r2
 8005e84:	4680      	mov	r8, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	469a      	mov	sl, r3
 8005e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e8e:	d807      	bhi.n	8005ea0 <_printf_i+0x28>
 8005e90:	2f62      	cmp	r7, #98	; 0x62
 8005e92:	d80a      	bhi.n	8005eaa <_printf_i+0x32>
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	f000 80d8 	beq.w	800604a <_printf_i+0x1d2>
 8005e9a:	2f58      	cmp	r7, #88	; 0x58
 8005e9c:	f000 80a3 	beq.w	8005fe6 <_printf_i+0x16e>
 8005ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ea8:	e03a      	b.n	8005f20 <_printf_i+0xa8>
 8005eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eae:	2b15      	cmp	r3, #21
 8005eb0:	d8f6      	bhi.n	8005ea0 <_printf_i+0x28>
 8005eb2:	a101      	add	r1, pc, #4	; (adr r1, 8005eb8 <_printf_i+0x40>)
 8005eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005ea1 	.word	0x08005ea1
 8005ec4:	08005ea1 	.word	0x08005ea1
 8005ec8:	08005ea1 	.word	0x08005ea1
 8005ecc:	08005ea1 	.word	0x08005ea1
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005ea1 	.word	0x08005ea1
 8005ed8:	08005ea1 	.word	0x08005ea1
 8005edc:	08005ea1 	.word	0x08005ea1
 8005ee0:	08005ea1 	.word	0x08005ea1
 8005ee4:	08006031 	.word	0x08006031
 8005ee8:	08005f55 	.word	0x08005f55
 8005eec:	08006013 	.word	0x08006013
 8005ef0:	08005ea1 	.word	0x08005ea1
 8005ef4:	08005ea1 	.word	0x08005ea1
 8005ef8:	08006053 	.word	0x08006053
 8005efc:	08005ea1 	.word	0x08005ea1
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005ea1 	.word	0x08005ea1
 8005f08:	08005ea1 	.word	0x08005ea1
 8005f0c:	0800601b 	.word	0x0800601b
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	602a      	str	r2, [r5, #0]
 8005f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0a3      	b.n	800606c <_printf_i+0x1f4>
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	6829      	ldr	r1, [r5, #0]
 8005f28:	0606      	lsls	r6, r0, #24
 8005f2a:	f101 0304 	add.w	r3, r1, #4
 8005f2e:	d50a      	bpl.n	8005f46 <_printf_i+0xce>
 8005f30:	680e      	ldr	r6, [r1, #0]
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	da03      	bge.n	8005f40 <_printf_i+0xc8>
 8005f38:	232d      	movs	r3, #45	; 0x2d
 8005f3a:	4276      	negs	r6, r6
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f40:	485e      	ldr	r0, [pc, #376]	; (80060bc <_printf_i+0x244>)
 8005f42:	230a      	movs	r3, #10
 8005f44:	e019      	b.n	8005f7a <_printf_i+0x102>
 8005f46:	680e      	ldr	r6, [r1, #0]
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f4e:	bf18      	it	ne
 8005f50:	b236      	sxthne	r6, r6
 8005f52:	e7ef      	b.n	8005f34 <_printf_i+0xbc>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	6820      	ldr	r0, [r4, #0]
 8005f58:	1d19      	adds	r1, r3, #4
 8005f5a:	6029      	str	r1, [r5, #0]
 8005f5c:	0601      	lsls	r1, r0, #24
 8005f5e:	d501      	bpl.n	8005f64 <_printf_i+0xec>
 8005f60:	681e      	ldr	r6, [r3, #0]
 8005f62:	e002      	b.n	8005f6a <_printf_i+0xf2>
 8005f64:	0646      	lsls	r6, r0, #25
 8005f66:	d5fb      	bpl.n	8005f60 <_printf_i+0xe8>
 8005f68:	881e      	ldrh	r6, [r3, #0]
 8005f6a:	4854      	ldr	r0, [pc, #336]	; (80060bc <_printf_i+0x244>)
 8005f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f6e:	bf0c      	ite	eq
 8005f70:	2308      	moveq	r3, #8
 8005f72:	230a      	movne	r3, #10
 8005f74:	2100      	movs	r1, #0
 8005f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f7a:	6865      	ldr	r5, [r4, #4]
 8005f7c:	60a5      	str	r5, [r4, #8]
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	bfa2      	ittt	ge
 8005f82:	6821      	ldrge	r1, [r4, #0]
 8005f84:	f021 0104 	bicge.w	r1, r1, #4
 8005f88:	6021      	strge	r1, [r4, #0]
 8005f8a:	b90e      	cbnz	r6, 8005f90 <_printf_i+0x118>
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	d04d      	beq.n	800602c <_printf_i+0x1b4>
 8005f90:	4615      	mov	r5, r2
 8005f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f96:	fb03 6711 	mls	r7, r3, r1, r6
 8005f9a:	5dc7      	ldrb	r7, [r0, r7]
 8005f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fa0:	4637      	mov	r7, r6
 8005fa2:	42bb      	cmp	r3, r7
 8005fa4:	460e      	mov	r6, r1
 8005fa6:	d9f4      	bls.n	8005f92 <_printf_i+0x11a>
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d10b      	bne.n	8005fc4 <_printf_i+0x14c>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	07de      	lsls	r6, r3, #31
 8005fb0:	d508      	bpl.n	8005fc4 <_printf_i+0x14c>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	6861      	ldr	r1, [r4, #4]
 8005fb6:	4299      	cmp	r1, r3
 8005fb8:	bfde      	ittt	le
 8005fba:	2330      	movle	r3, #48	; 0x30
 8005fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fc4:	1b52      	subs	r2, r2, r5
 8005fc6:	6122      	str	r2, [r4, #16]
 8005fc8:	f8cd a000 	str.w	sl, [sp]
 8005fcc:	464b      	mov	r3, r9
 8005fce:	aa03      	add	r2, sp, #12
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f7ff fee2 	bl	8005d9c <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d14c      	bne.n	8006076 <_printf_i+0x1fe>
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	b004      	add	sp, #16
 8005fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe6:	4835      	ldr	r0, [pc, #212]	; (80060bc <_printf_i+0x244>)
 8005fe8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fec:	6829      	ldr	r1, [r5, #0]
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ff4:	6029      	str	r1, [r5, #0]
 8005ff6:	061d      	lsls	r5, r3, #24
 8005ff8:	d514      	bpl.n	8006024 <_printf_i+0x1ac>
 8005ffa:	07df      	lsls	r7, r3, #31
 8005ffc:	bf44      	itt	mi
 8005ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8006002:	6023      	strmi	r3, [r4, #0]
 8006004:	b91e      	cbnz	r6, 800600e <_printf_i+0x196>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	f023 0320 	bic.w	r3, r3, #32
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	2310      	movs	r3, #16
 8006010:	e7b0      	b.n	8005f74 <_printf_i+0xfc>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	f043 0320 	orr.w	r3, r3, #32
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	2378      	movs	r3, #120	; 0x78
 800601c:	4828      	ldr	r0, [pc, #160]	; (80060c0 <_printf_i+0x248>)
 800601e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006022:	e7e3      	b.n	8005fec <_printf_i+0x174>
 8006024:	0659      	lsls	r1, r3, #25
 8006026:	bf48      	it	mi
 8006028:	b2b6      	uxthmi	r6, r6
 800602a:	e7e6      	b.n	8005ffa <_printf_i+0x182>
 800602c:	4615      	mov	r5, r2
 800602e:	e7bb      	b.n	8005fa8 <_printf_i+0x130>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	6826      	ldr	r6, [r4, #0]
 8006034:	6961      	ldr	r1, [r4, #20]
 8006036:	1d18      	adds	r0, r3, #4
 8006038:	6028      	str	r0, [r5, #0]
 800603a:	0635      	lsls	r5, r6, #24
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	d501      	bpl.n	8006044 <_printf_i+0x1cc>
 8006040:	6019      	str	r1, [r3, #0]
 8006042:	e002      	b.n	800604a <_printf_i+0x1d2>
 8006044:	0670      	lsls	r0, r6, #25
 8006046:	d5fb      	bpl.n	8006040 <_printf_i+0x1c8>
 8006048:	8019      	strh	r1, [r3, #0]
 800604a:	2300      	movs	r3, #0
 800604c:	6123      	str	r3, [r4, #16]
 800604e:	4615      	mov	r5, r2
 8006050:	e7ba      	b.n	8005fc8 <_printf_i+0x150>
 8006052:	682b      	ldr	r3, [r5, #0]
 8006054:	1d1a      	adds	r2, r3, #4
 8006056:	602a      	str	r2, [r5, #0]
 8006058:	681d      	ldr	r5, [r3, #0]
 800605a:	6862      	ldr	r2, [r4, #4]
 800605c:	2100      	movs	r1, #0
 800605e:	4628      	mov	r0, r5
 8006060:	f7fa f8be 	bl	80001e0 <memchr>
 8006064:	b108      	cbz	r0, 800606a <_printf_i+0x1f2>
 8006066:	1b40      	subs	r0, r0, r5
 8006068:	6060      	str	r0, [r4, #4]
 800606a:	6863      	ldr	r3, [r4, #4]
 800606c:	6123      	str	r3, [r4, #16]
 800606e:	2300      	movs	r3, #0
 8006070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006074:	e7a8      	b.n	8005fc8 <_printf_i+0x150>
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	462a      	mov	r2, r5
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	47d0      	blx	sl
 8006080:	3001      	adds	r0, #1
 8006082:	d0ab      	beq.n	8005fdc <_printf_i+0x164>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	079b      	lsls	r3, r3, #30
 8006088:	d413      	bmi.n	80060b2 <_printf_i+0x23a>
 800608a:	68e0      	ldr	r0, [r4, #12]
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	4298      	cmp	r0, r3
 8006090:	bfb8      	it	lt
 8006092:	4618      	movlt	r0, r3
 8006094:	e7a4      	b.n	8005fe0 <_printf_i+0x168>
 8006096:	2301      	movs	r3, #1
 8006098:	4632      	mov	r2, r6
 800609a:	4649      	mov	r1, r9
 800609c:	4640      	mov	r0, r8
 800609e:	47d0      	blx	sl
 80060a0:	3001      	adds	r0, #1
 80060a2:	d09b      	beq.n	8005fdc <_printf_i+0x164>
 80060a4:	3501      	adds	r5, #1
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	9903      	ldr	r1, [sp, #12]
 80060aa:	1a5b      	subs	r3, r3, r1
 80060ac:	42ab      	cmp	r3, r5
 80060ae:	dcf2      	bgt.n	8006096 <_printf_i+0x21e>
 80060b0:	e7eb      	b.n	800608a <_printf_i+0x212>
 80060b2:	2500      	movs	r5, #0
 80060b4:	f104 0619 	add.w	r6, r4, #25
 80060b8:	e7f5      	b.n	80060a6 <_printf_i+0x22e>
 80060ba:	bf00      	nop
 80060bc:	080084e2 	.word	0x080084e2
 80060c0:	080084f3 	.word	0x080084f3

080060c4 <iprintf>:
 80060c4:	b40f      	push	{r0, r1, r2, r3}
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <iprintf+0x2c>)
 80060c8:	b513      	push	{r0, r1, r4, lr}
 80060ca:	681c      	ldr	r4, [r3, #0]
 80060cc:	b124      	cbz	r4, 80060d8 <iprintf+0x14>
 80060ce:	69a3      	ldr	r3, [r4, #24]
 80060d0:	b913      	cbnz	r3, 80060d8 <iprintf+0x14>
 80060d2:	4620      	mov	r0, r4
 80060d4:	f001 f8f0 	bl	80072b8 <__sinit>
 80060d8:	ab05      	add	r3, sp, #20
 80060da:	9a04      	ldr	r2, [sp, #16]
 80060dc:	68a1      	ldr	r1, [r4, #8]
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	4620      	mov	r0, r4
 80060e2:	f001 fead 	bl	8007e40 <_vfiprintf_r>
 80060e6:	b002      	add	sp, #8
 80060e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ec:	b004      	add	sp, #16
 80060ee:	4770      	bx	lr
 80060f0:	2000000c 	.word	0x2000000c

080060f4 <putchar>:
 80060f4:	4b09      	ldr	r3, [pc, #36]	; (800611c <putchar+0x28>)
 80060f6:	b513      	push	{r0, r1, r4, lr}
 80060f8:	681c      	ldr	r4, [r3, #0]
 80060fa:	4601      	mov	r1, r0
 80060fc:	b134      	cbz	r4, 800610c <putchar+0x18>
 80060fe:	69a3      	ldr	r3, [r4, #24]
 8006100:	b923      	cbnz	r3, 800610c <putchar+0x18>
 8006102:	9001      	str	r0, [sp, #4]
 8006104:	4620      	mov	r0, r4
 8006106:	f001 f8d7 	bl	80072b8 <__sinit>
 800610a:	9901      	ldr	r1, [sp, #4]
 800610c:	68a2      	ldr	r2, [r4, #8]
 800610e:	4620      	mov	r0, r4
 8006110:	b002      	add	sp, #8
 8006112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006116:	f001 bfc3 	b.w	80080a0 <_putc_r>
 800611a:	bf00      	nop
 800611c:	2000000c 	.word	0x2000000c

08006120 <_puts_r>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	460e      	mov	r6, r1
 8006124:	4605      	mov	r5, r0
 8006126:	b118      	cbz	r0, 8006130 <_puts_r+0x10>
 8006128:	6983      	ldr	r3, [r0, #24]
 800612a:	b90b      	cbnz	r3, 8006130 <_puts_r+0x10>
 800612c:	f001 f8c4 	bl	80072b8 <__sinit>
 8006130:	69ab      	ldr	r3, [r5, #24]
 8006132:	68ac      	ldr	r4, [r5, #8]
 8006134:	b913      	cbnz	r3, 800613c <_puts_r+0x1c>
 8006136:	4628      	mov	r0, r5
 8006138:	f001 f8be 	bl	80072b8 <__sinit>
 800613c:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <_puts_r+0xd0>)
 800613e:	429c      	cmp	r4, r3
 8006140:	d120      	bne.n	8006184 <_puts_r+0x64>
 8006142:	686c      	ldr	r4, [r5, #4]
 8006144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006146:	07db      	lsls	r3, r3, #31
 8006148:	d405      	bmi.n	8006156 <_puts_r+0x36>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	0598      	lsls	r0, r3, #22
 800614e:	d402      	bmi.n	8006156 <_puts_r+0x36>
 8006150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006152:	f001 f954 	bl	80073fe <__retarget_lock_acquire_recursive>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	0719      	lsls	r1, r3, #28
 800615a:	d51d      	bpl.n	8006198 <_puts_r+0x78>
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	b1db      	cbz	r3, 8006198 <_puts_r+0x78>
 8006160:	3e01      	subs	r6, #1
 8006162:	68a3      	ldr	r3, [r4, #8]
 8006164:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006168:	3b01      	subs	r3, #1
 800616a:	60a3      	str	r3, [r4, #8]
 800616c:	bb39      	cbnz	r1, 80061be <_puts_r+0x9e>
 800616e:	2b00      	cmp	r3, #0
 8006170:	da38      	bge.n	80061e4 <_puts_r+0xc4>
 8006172:	4622      	mov	r2, r4
 8006174:	210a      	movs	r1, #10
 8006176:	4628      	mov	r0, r5
 8006178:	f000 f848 	bl	800620c <__swbuf_r>
 800617c:	3001      	adds	r0, #1
 800617e:	d011      	beq.n	80061a4 <_puts_r+0x84>
 8006180:	250a      	movs	r5, #10
 8006182:	e011      	b.n	80061a8 <_puts_r+0x88>
 8006184:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <_puts_r+0xd4>)
 8006186:	429c      	cmp	r4, r3
 8006188:	d101      	bne.n	800618e <_puts_r+0x6e>
 800618a:	68ac      	ldr	r4, [r5, #8]
 800618c:	e7da      	b.n	8006144 <_puts_r+0x24>
 800618e:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <_puts_r+0xd8>)
 8006190:	429c      	cmp	r4, r3
 8006192:	bf08      	it	eq
 8006194:	68ec      	ldreq	r4, [r5, #12]
 8006196:	e7d5      	b.n	8006144 <_puts_r+0x24>
 8006198:	4621      	mov	r1, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f000 f888 	bl	80062b0 <__swsetup_r>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d0dd      	beq.n	8006160 <_puts_r+0x40>
 80061a4:	f04f 35ff 	mov.w	r5, #4294967295
 80061a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061aa:	07da      	lsls	r2, r3, #31
 80061ac:	d405      	bmi.n	80061ba <_puts_r+0x9a>
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	059b      	lsls	r3, r3, #22
 80061b2:	d402      	bmi.n	80061ba <_puts_r+0x9a>
 80061b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061b6:	f001 f923 	bl	8007400 <__retarget_lock_release_recursive>
 80061ba:	4628      	mov	r0, r5
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
 80061be:	2b00      	cmp	r3, #0
 80061c0:	da04      	bge.n	80061cc <_puts_r+0xac>
 80061c2:	69a2      	ldr	r2, [r4, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	dc06      	bgt.n	80061d6 <_puts_r+0xb6>
 80061c8:	290a      	cmp	r1, #10
 80061ca:	d004      	beq.n	80061d6 <_puts_r+0xb6>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	6022      	str	r2, [r4, #0]
 80061d2:	7019      	strb	r1, [r3, #0]
 80061d4:	e7c5      	b.n	8006162 <_puts_r+0x42>
 80061d6:	4622      	mov	r2, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 f817 	bl	800620c <__swbuf_r>
 80061de:	3001      	adds	r0, #1
 80061e0:	d1bf      	bne.n	8006162 <_puts_r+0x42>
 80061e2:	e7df      	b.n	80061a4 <_puts_r+0x84>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	250a      	movs	r5, #10
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	6022      	str	r2, [r4, #0]
 80061ec:	701d      	strb	r5, [r3, #0]
 80061ee:	e7db      	b.n	80061a8 <_puts_r+0x88>
 80061f0:	080085b4 	.word	0x080085b4
 80061f4:	080085d4 	.word	0x080085d4
 80061f8:	08008594 	.word	0x08008594

080061fc <puts>:
 80061fc:	4b02      	ldr	r3, [pc, #8]	; (8006208 <puts+0xc>)
 80061fe:	4601      	mov	r1, r0
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f7ff bf8d 	b.w	8006120 <_puts_r>
 8006206:	bf00      	nop
 8006208:	2000000c 	.word	0x2000000c

0800620c <__swbuf_r>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	460e      	mov	r6, r1
 8006210:	4614      	mov	r4, r2
 8006212:	4605      	mov	r5, r0
 8006214:	b118      	cbz	r0, 800621e <__swbuf_r+0x12>
 8006216:	6983      	ldr	r3, [r0, #24]
 8006218:	b90b      	cbnz	r3, 800621e <__swbuf_r+0x12>
 800621a:	f001 f84d 	bl	80072b8 <__sinit>
 800621e:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <__swbuf_r+0x98>)
 8006220:	429c      	cmp	r4, r3
 8006222:	d12b      	bne.n	800627c <__swbuf_r+0x70>
 8006224:	686c      	ldr	r4, [r5, #4]
 8006226:	69a3      	ldr	r3, [r4, #24]
 8006228:	60a3      	str	r3, [r4, #8]
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	071a      	lsls	r2, r3, #28
 800622e:	d52f      	bpl.n	8006290 <__swbuf_r+0x84>
 8006230:	6923      	ldr	r3, [r4, #16]
 8006232:	b36b      	cbz	r3, 8006290 <__swbuf_r+0x84>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	6820      	ldr	r0, [r4, #0]
 8006238:	1ac0      	subs	r0, r0, r3
 800623a:	6963      	ldr	r3, [r4, #20]
 800623c:	b2f6      	uxtb	r6, r6
 800623e:	4283      	cmp	r3, r0
 8006240:	4637      	mov	r7, r6
 8006242:	dc04      	bgt.n	800624e <__swbuf_r+0x42>
 8006244:	4621      	mov	r1, r4
 8006246:	4628      	mov	r0, r5
 8006248:	f000 ffa2 	bl	8007190 <_fflush_r>
 800624c:	bb30      	cbnz	r0, 800629c <__swbuf_r+0x90>
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	3b01      	subs	r3, #1
 8006252:	60a3      	str	r3, [r4, #8]
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	6022      	str	r2, [r4, #0]
 800625a:	701e      	strb	r6, [r3, #0]
 800625c:	6963      	ldr	r3, [r4, #20]
 800625e:	3001      	adds	r0, #1
 8006260:	4283      	cmp	r3, r0
 8006262:	d004      	beq.n	800626e <__swbuf_r+0x62>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	07db      	lsls	r3, r3, #31
 8006268:	d506      	bpl.n	8006278 <__swbuf_r+0x6c>
 800626a:	2e0a      	cmp	r6, #10
 800626c:	d104      	bne.n	8006278 <__swbuf_r+0x6c>
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 ff8d 	bl	8007190 <_fflush_r>
 8006276:	b988      	cbnz	r0, 800629c <__swbuf_r+0x90>
 8006278:	4638      	mov	r0, r7
 800627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <__swbuf_r+0x9c>)
 800627e:	429c      	cmp	r4, r3
 8006280:	d101      	bne.n	8006286 <__swbuf_r+0x7a>
 8006282:	68ac      	ldr	r4, [r5, #8]
 8006284:	e7cf      	b.n	8006226 <__swbuf_r+0x1a>
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <__swbuf_r+0xa0>)
 8006288:	429c      	cmp	r4, r3
 800628a:	bf08      	it	eq
 800628c:	68ec      	ldreq	r4, [r5, #12]
 800628e:	e7ca      	b.n	8006226 <__swbuf_r+0x1a>
 8006290:	4621      	mov	r1, r4
 8006292:	4628      	mov	r0, r5
 8006294:	f000 f80c 	bl	80062b0 <__swsetup_r>
 8006298:	2800      	cmp	r0, #0
 800629a:	d0cb      	beq.n	8006234 <__swbuf_r+0x28>
 800629c:	f04f 37ff 	mov.w	r7, #4294967295
 80062a0:	e7ea      	b.n	8006278 <__swbuf_r+0x6c>
 80062a2:	bf00      	nop
 80062a4:	080085b4 	.word	0x080085b4
 80062a8:	080085d4 	.word	0x080085d4
 80062ac:	08008594 	.word	0x08008594

080062b0 <__swsetup_r>:
 80062b0:	4b32      	ldr	r3, [pc, #200]	; (800637c <__swsetup_r+0xcc>)
 80062b2:	b570      	push	{r4, r5, r6, lr}
 80062b4:	681d      	ldr	r5, [r3, #0]
 80062b6:	4606      	mov	r6, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	b125      	cbz	r5, 80062c6 <__swsetup_r+0x16>
 80062bc:	69ab      	ldr	r3, [r5, #24]
 80062be:	b913      	cbnz	r3, 80062c6 <__swsetup_r+0x16>
 80062c0:	4628      	mov	r0, r5
 80062c2:	f000 fff9 	bl	80072b8 <__sinit>
 80062c6:	4b2e      	ldr	r3, [pc, #184]	; (8006380 <__swsetup_r+0xd0>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	d10f      	bne.n	80062ec <__swsetup_r+0x3c>
 80062cc:	686c      	ldr	r4, [r5, #4]
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062d4:	0719      	lsls	r1, r3, #28
 80062d6:	d42c      	bmi.n	8006332 <__swsetup_r+0x82>
 80062d8:	06dd      	lsls	r5, r3, #27
 80062da:	d411      	bmi.n	8006300 <__swsetup_r+0x50>
 80062dc:	2309      	movs	r3, #9
 80062de:	6033      	str	r3, [r6, #0]
 80062e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ea:	e03e      	b.n	800636a <__swsetup_r+0xba>
 80062ec:	4b25      	ldr	r3, [pc, #148]	; (8006384 <__swsetup_r+0xd4>)
 80062ee:	429c      	cmp	r4, r3
 80062f0:	d101      	bne.n	80062f6 <__swsetup_r+0x46>
 80062f2:	68ac      	ldr	r4, [r5, #8]
 80062f4:	e7eb      	b.n	80062ce <__swsetup_r+0x1e>
 80062f6:	4b24      	ldr	r3, [pc, #144]	; (8006388 <__swsetup_r+0xd8>)
 80062f8:	429c      	cmp	r4, r3
 80062fa:	bf08      	it	eq
 80062fc:	68ec      	ldreq	r4, [r5, #12]
 80062fe:	e7e6      	b.n	80062ce <__swsetup_r+0x1e>
 8006300:	0758      	lsls	r0, r3, #29
 8006302:	d512      	bpl.n	800632a <__swsetup_r+0x7a>
 8006304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006306:	b141      	cbz	r1, 800631a <__swsetup_r+0x6a>
 8006308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800630c:	4299      	cmp	r1, r3
 800630e:	d002      	beq.n	8006316 <__swsetup_r+0x66>
 8006310:	4630      	mov	r0, r6
 8006312:	f001 fc8b 	bl	8007c2c <_free_r>
 8006316:	2300      	movs	r3, #0
 8006318:	6363      	str	r3, [r4, #52]	; 0x34
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	2300      	movs	r3, #0
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	f043 0308 	orr.w	r3, r3, #8
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	b94b      	cbnz	r3, 800634a <__swsetup_r+0x9a>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800633c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006340:	d003      	beq.n	800634a <__swsetup_r+0x9a>
 8006342:	4621      	mov	r1, r4
 8006344:	4630      	mov	r0, r6
 8006346:	f001 f881 	bl	800744c <__smakebuf_r>
 800634a:	89a0      	ldrh	r0, [r4, #12]
 800634c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006350:	f010 0301 	ands.w	r3, r0, #1
 8006354:	d00a      	beq.n	800636c <__swsetup_r+0xbc>
 8006356:	2300      	movs	r3, #0
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	6963      	ldr	r3, [r4, #20]
 800635c:	425b      	negs	r3, r3
 800635e:	61a3      	str	r3, [r4, #24]
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	b943      	cbnz	r3, 8006376 <__swsetup_r+0xc6>
 8006364:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006368:	d1ba      	bne.n	80062e0 <__swsetup_r+0x30>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	0781      	lsls	r1, r0, #30
 800636e:	bf58      	it	pl
 8006370:	6963      	ldrpl	r3, [r4, #20]
 8006372:	60a3      	str	r3, [r4, #8]
 8006374:	e7f4      	b.n	8006360 <__swsetup_r+0xb0>
 8006376:	2000      	movs	r0, #0
 8006378:	e7f7      	b.n	800636a <__swsetup_r+0xba>
 800637a:	bf00      	nop
 800637c:	2000000c 	.word	0x2000000c
 8006380:	080085b4 	.word	0x080085b4
 8006384:	080085d4 	.word	0x080085d4
 8006388:	08008594 	.word	0x08008594

0800638c <quorem>:
 800638c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006390:	6903      	ldr	r3, [r0, #16]
 8006392:	690c      	ldr	r4, [r1, #16]
 8006394:	42a3      	cmp	r3, r4
 8006396:	4607      	mov	r7, r0
 8006398:	f2c0 8081 	blt.w	800649e <quorem+0x112>
 800639c:	3c01      	subs	r4, #1
 800639e:	f101 0814 	add.w	r8, r1, #20
 80063a2:	f100 0514 	add.w	r5, r0, #20
 80063a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063b4:	3301      	adds	r3, #1
 80063b6:	429a      	cmp	r2, r3
 80063b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80063c4:	d331      	bcc.n	800642a <quorem+0x9e>
 80063c6:	f04f 0e00 	mov.w	lr, #0
 80063ca:	4640      	mov	r0, r8
 80063cc:	46ac      	mov	ip, r5
 80063ce:	46f2      	mov	sl, lr
 80063d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80063d4:	b293      	uxth	r3, r2
 80063d6:	fb06 e303 	mla	r3, r6, r3, lr
 80063da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ebaa 0303 	sub.w	r3, sl, r3
 80063e4:	f8dc a000 	ldr.w	sl, [ip]
 80063e8:	0c12      	lsrs	r2, r2, #16
 80063ea:	fa13 f38a 	uxtah	r3, r3, sl
 80063ee:	fb06 e202 	mla	r2, r6, r2, lr
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	9b00      	ldr	r3, [sp, #0]
 80063f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063fa:	b292      	uxth	r2, r2
 80063fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006404:	f8bd 3000 	ldrh.w	r3, [sp]
 8006408:	4581      	cmp	r9, r0
 800640a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800640e:	f84c 3b04 	str.w	r3, [ip], #4
 8006412:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006416:	d2db      	bcs.n	80063d0 <quorem+0x44>
 8006418:	f855 300b 	ldr.w	r3, [r5, fp]
 800641c:	b92b      	cbnz	r3, 800642a <quorem+0x9e>
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	3b04      	subs	r3, #4
 8006422:	429d      	cmp	r5, r3
 8006424:	461a      	mov	r2, r3
 8006426:	d32e      	bcc.n	8006486 <quorem+0xfa>
 8006428:	613c      	str	r4, [r7, #16]
 800642a:	4638      	mov	r0, r7
 800642c:	f001 fae6 	bl	80079fc <__mcmp>
 8006430:	2800      	cmp	r0, #0
 8006432:	db24      	blt.n	800647e <quorem+0xf2>
 8006434:	3601      	adds	r6, #1
 8006436:	4628      	mov	r0, r5
 8006438:	f04f 0c00 	mov.w	ip, #0
 800643c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006440:	f8d0 e000 	ldr.w	lr, [r0]
 8006444:	b293      	uxth	r3, r2
 8006446:	ebac 0303 	sub.w	r3, ip, r3
 800644a:	0c12      	lsrs	r2, r2, #16
 800644c:	fa13 f38e 	uxtah	r3, r3, lr
 8006450:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800645e:	45c1      	cmp	r9, r8
 8006460:	f840 3b04 	str.w	r3, [r0], #4
 8006464:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006468:	d2e8      	bcs.n	800643c <quorem+0xb0>
 800646a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800646e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006472:	b922      	cbnz	r2, 800647e <quorem+0xf2>
 8006474:	3b04      	subs	r3, #4
 8006476:	429d      	cmp	r5, r3
 8006478:	461a      	mov	r2, r3
 800647a:	d30a      	bcc.n	8006492 <quorem+0x106>
 800647c:	613c      	str	r4, [r7, #16]
 800647e:	4630      	mov	r0, r6
 8006480:	b003      	add	sp, #12
 8006482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	3b04      	subs	r3, #4
 800648a:	2a00      	cmp	r2, #0
 800648c:	d1cc      	bne.n	8006428 <quorem+0x9c>
 800648e:	3c01      	subs	r4, #1
 8006490:	e7c7      	b.n	8006422 <quorem+0x96>
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	3b04      	subs	r3, #4
 8006496:	2a00      	cmp	r2, #0
 8006498:	d1f0      	bne.n	800647c <quorem+0xf0>
 800649a:	3c01      	subs	r4, #1
 800649c:	e7eb      	b.n	8006476 <quorem+0xea>
 800649e:	2000      	movs	r0, #0
 80064a0:	e7ee      	b.n	8006480 <quorem+0xf4>
 80064a2:	0000      	movs	r0, r0
 80064a4:	0000      	movs	r0, r0
	...

080064a8 <_dtoa_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ed2d 8b04 	vpush	{d8-d9}
 80064b0:	ec57 6b10 	vmov	r6, r7, d0
 80064b4:	b093      	sub	sp, #76	; 0x4c
 80064b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064bc:	9106      	str	r1, [sp, #24]
 80064be:	ee10 aa10 	vmov	sl, s0
 80064c2:	4604      	mov	r4, r0
 80064c4:	9209      	str	r2, [sp, #36]	; 0x24
 80064c6:	930c      	str	r3, [sp, #48]	; 0x30
 80064c8:	46bb      	mov	fp, r7
 80064ca:	b975      	cbnz	r5, 80064ea <_dtoa_r+0x42>
 80064cc:	2010      	movs	r0, #16
 80064ce:	f000 fffd 	bl	80074cc <malloc>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6260      	str	r0, [r4, #36]	; 0x24
 80064d6:	b920      	cbnz	r0, 80064e2 <_dtoa_r+0x3a>
 80064d8:	4ba7      	ldr	r3, [pc, #668]	; (8006778 <_dtoa_r+0x2d0>)
 80064da:	21ea      	movs	r1, #234	; 0xea
 80064dc:	48a7      	ldr	r0, [pc, #668]	; (800677c <_dtoa_r+0x2d4>)
 80064de:	f001 fe8d 	bl	80081fc <__assert_func>
 80064e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064e6:	6005      	str	r5, [r0, #0]
 80064e8:	60c5      	str	r5, [r0, #12]
 80064ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	b151      	cbz	r1, 8006506 <_dtoa_r+0x5e>
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	604a      	str	r2, [r1, #4]
 80064f4:	2301      	movs	r3, #1
 80064f6:	4093      	lsls	r3, r2
 80064f8:	608b      	str	r3, [r1, #8]
 80064fa:	4620      	mov	r0, r4
 80064fc:	f001 f83c 	bl	8007578 <_Bfree>
 8006500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	1e3b      	subs	r3, r7, #0
 8006508:	bfaa      	itet	ge
 800650a:	2300      	movge	r3, #0
 800650c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006510:	f8c8 3000 	strge.w	r3, [r8]
 8006514:	4b9a      	ldr	r3, [pc, #616]	; (8006780 <_dtoa_r+0x2d8>)
 8006516:	bfbc      	itt	lt
 8006518:	2201      	movlt	r2, #1
 800651a:	f8c8 2000 	strlt.w	r2, [r8]
 800651e:	ea33 030b 	bics.w	r3, r3, fp
 8006522:	d11b      	bne.n	800655c <_dtoa_r+0xb4>
 8006524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006526:	f242 730f 	movw	r3, #9999	; 0x270f
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006530:	4333      	orrs	r3, r6
 8006532:	f000 8592 	beq.w	800705a <_dtoa_r+0xbb2>
 8006536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006538:	b963      	cbnz	r3, 8006554 <_dtoa_r+0xac>
 800653a:	4b92      	ldr	r3, [pc, #584]	; (8006784 <_dtoa_r+0x2dc>)
 800653c:	e022      	b.n	8006584 <_dtoa_r+0xdc>
 800653e:	4b92      	ldr	r3, [pc, #584]	; (8006788 <_dtoa_r+0x2e0>)
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	3308      	adds	r3, #8
 8006544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	b013      	add	sp, #76	; 0x4c
 800654c:	ecbd 8b04 	vpop	{d8-d9}
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	4b8b      	ldr	r3, [pc, #556]	; (8006784 <_dtoa_r+0x2dc>)
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	3303      	adds	r3, #3
 800655a:	e7f3      	b.n	8006544 <_dtoa_r+0x9c>
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	4650      	mov	r0, sl
 8006562:	4659      	mov	r1, fp
 8006564:	f7fa fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006568:	ec4b ab19 	vmov	d9, sl, fp
 800656c:	4680      	mov	r8, r0
 800656e:	b158      	cbz	r0, 8006588 <_dtoa_r+0xe0>
 8006570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006572:	2301      	movs	r3, #1
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 856b 	beq.w	8007054 <_dtoa_r+0xbac>
 800657e:	4883      	ldr	r0, [pc, #524]	; (800678c <_dtoa_r+0x2e4>)
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	1e43      	subs	r3, r0, #1
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	e7df      	b.n	8006548 <_dtoa_r+0xa0>
 8006588:	ec4b ab10 	vmov	d0, sl, fp
 800658c:	aa10      	add	r2, sp, #64	; 0x40
 800658e:	a911      	add	r1, sp, #68	; 0x44
 8006590:	4620      	mov	r0, r4
 8006592:	f001 fad9 	bl	8007b48 <__d2b>
 8006596:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800659a:	ee08 0a10 	vmov	s16, r0
 800659e:	2d00      	cmp	r5, #0
 80065a0:	f000 8084 	beq.w	80066ac <_dtoa_r+0x204>
 80065a4:	ee19 3a90 	vmov	r3, s19
 80065a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065b0:	4656      	mov	r6, sl
 80065b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065be:	4b74      	ldr	r3, [pc, #464]	; (8006790 <_dtoa_r+0x2e8>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	4630      	mov	r0, r6
 80065c4:	4639      	mov	r1, r7
 80065c6:	f7f9 fe5f 	bl	8000288 <__aeabi_dsub>
 80065ca:	a365      	add	r3, pc, #404	; (adr r3, 8006760 <_dtoa_r+0x2b8>)
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f7fa f812 	bl	80005f8 <__aeabi_dmul>
 80065d4:	a364      	add	r3, pc, #400	; (adr r3, 8006768 <_dtoa_r+0x2c0>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7f9 fe57 	bl	800028c <__adddf3>
 80065de:	4606      	mov	r6, r0
 80065e0:	4628      	mov	r0, r5
 80065e2:	460f      	mov	r7, r1
 80065e4:	f7f9 ff9e 	bl	8000524 <__aeabi_i2d>
 80065e8:	a361      	add	r3, pc, #388	; (adr r3, 8006770 <_dtoa_r+0x2c8>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f803 	bl	80005f8 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7f9 fe47 	bl	800028c <__adddf3>
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	f7fa faa9 	bl	8000b58 <__aeabi_d2iz>
 8006606:	2200      	movs	r2, #0
 8006608:	9000      	str	r0, [sp, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	4630      	mov	r0, r6
 800660e:	4639      	mov	r1, r7
 8006610:	f7fa fa64 	bl	8000adc <__aeabi_dcmplt>
 8006614:	b150      	cbz	r0, 800662c <_dtoa_r+0x184>
 8006616:	9800      	ldr	r0, [sp, #0]
 8006618:	f7f9 ff84 	bl	8000524 <__aeabi_i2d>
 800661c:	4632      	mov	r2, r6
 800661e:	463b      	mov	r3, r7
 8006620:	f7fa fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006624:	b910      	cbnz	r0, 800662c <_dtoa_r+0x184>
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	3b01      	subs	r3, #1
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	9b00      	ldr	r3, [sp, #0]
 800662e:	2b16      	cmp	r3, #22
 8006630:	d85a      	bhi.n	80066e8 <_dtoa_r+0x240>
 8006632:	9a00      	ldr	r2, [sp, #0]
 8006634:	4b57      	ldr	r3, [pc, #348]	; (8006794 <_dtoa_r+0x2ec>)
 8006636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	ec51 0b19 	vmov	r0, r1, d9
 8006642:	f7fa fa4b 	bl	8000adc <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d050      	beq.n	80066ec <_dtoa_r+0x244>
 800664a:	9b00      	ldr	r3, [sp, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	930b      	str	r3, [sp, #44]	; 0x2c
 8006654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006656:	1b5d      	subs	r5, r3, r5
 8006658:	1e6b      	subs	r3, r5, #1
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	bf45      	ittet	mi
 800665e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006662:	9304      	strmi	r3, [sp, #16]
 8006664:	2300      	movpl	r3, #0
 8006666:	2300      	movmi	r3, #0
 8006668:	bf4c      	ite	mi
 800666a:	9305      	strmi	r3, [sp, #20]
 800666c:	9304      	strpl	r3, [sp, #16]
 800666e:	9b00      	ldr	r3, [sp, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	db3d      	blt.n	80066f0 <_dtoa_r+0x248>
 8006674:	9b05      	ldr	r3, [sp, #20]
 8006676:	9a00      	ldr	r2, [sp, #0]
 8006678:	920a      	str	r2, [sp, #40]	; 0x28
 800667a:	4413      	add	r3, r2
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	2300      	movs	r3, #0
 8006680:	9307      	str	r3, [sp, #28]
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	2b09      	cmp	r3, #9
 8006686:	f200 8089 	bhi.w	800679c <_dtoa_r+0x2f4>
 800668a:	2b05      	cmp	r3, #5
 800668c:	bfc4      	itt	gt
 800668e:	3b04      	subgt	r3, #4
 8006690:	9306      	strgt	r3, [sp, #24]
 8006692:	9b06      	ldr	r3, [sp, #24]
 8006694:	f1a3 0302 	sub.w	r3, r3, #2
 8006698:	bfcc      	ite	gt
 800669a:	2500      	movgt	r5, #0
 800669c:	2501      	movle	r5, #1
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f200 8087 	bhi.w	80067b2 <_dtoa_r+0x30a>
 80066a4:	e8df f003 	tbb	[pc, r3]
 80066a8:	59383a2d 	.word	0x59383a2d
 80066ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066b0:	441d      	add	r5, r3
 80066b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	bfc1      	itttt	gt
 80066ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80066c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066ca:	bfda      	itte	le
 80066cc:	f1c3 0320 	rsble	r3, r3, #32
 80066d0:	fa06 f003 	lslle.w	r0, r6, r3
 80066d4:	4318      	orrgt	r0, r3
 80066d6:	f7f9 ff15 	bl	8000504 <__aeabi_ui2d>
 80066da:	2301      	movs	r3, #1
 80066dc:	4606      	mov	r6, r0
 80066de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066e2:	3d01      	subs	r5, #1
 80066e4:	930e      	str	r3, [sp, #56]	; 0x38
 80066e6:	e76a      	b.n	80065be <_dtoa_r+0x116>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e7b2      	b.n	8006652 <_dtoa_r+0x1aa>
 80066ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80066ee:	e7b1      	b.n	8006654 <_dtoa_r+0x1ac>
 80066f0:	9b04      	ldr	r3, [sp, #16]
 80066f2:	9a00      	ldr	r2, [sp, #0]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	4253      	negs	r3, r2
 80066fa:	9307      	str	r3, [sp, #28]
 80066fc:	2300      	movs	r3, #0
 80066fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006700:	e7bf      	b.n	8006682 <_dtoa_r+0x1da>
 8006702:	2300      	movs	r3, #0
 8006704:	9308      	str	r3, [sp, #32]
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	dc55      	bgt.n	80067b8 <_dtoa_r+0x310>
 800670c:	2301      	movs	r3, #1
 800670e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006712:	461a      	mov	r2, r3
 8006714:	9209      	str	r2, [sp, #36]	; 0x24
 8006716:	e00c      	b.n	8006732 <_dtoa_r+0x28a>
 8006718:	2301      	movs	r3, #1
 800671a:	e7f3      	b.n	8006704 <_dtoa_r+0x25c>
 800671c:	2300      	movs	r3, #0
 800671e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	9b00      	ldr	r3, [sp, #0]
 8006724:	4413      	add	r3, r2
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	3301      	adds	r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	bfb8      	it	lt
 8006730:	2301      	movlt	r3, #1
 8006732:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006734:	2200      	movs	r2, #0
 8006736:	6042      	str	r2, [r0, #4]
 8006738:	2204      	movs	r2, #4
 800673a:	f102 0614 	add.w	r6, r2, #20
 800673e:	429e      	cmp	r6, r3
 8006740:	6841      	ldr	r1, [r0, #4]
 8006742:	d93d      	bls.n	80067c0 <_dtoa_r+0x318>
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fed7 	bl	80074f8 <_Balloc>
 800674a:	9001      	str	r0, [sp, #4]
 800674c:	2800      	cmp	r0, #0
 800674e:	d13b      	bne.n	80067c8 <_dtoa_r+0x320>
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <_dtoa_r+0x2f0>)
 8006752:	4602      	mov	r2, r0
 8006754:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006758:	e6c0      	b.n	80064dc <_dtoa_r+0x34>
 800675a:	2301      	movs	r3, #1
 800675c:	e7df      	b.n	800671e <_dtoa_r+0x276>
 800675e:	bf00      	nop
 8006760:	636f4361 	.word	0x636f4361
 8006764:	3fd287a7 	.word	0x3fd287a7
 8006768:	8b60c8b3 	.word	0x8b60c8b3
 800676c:	3fc68a28 	.word	0x3fc68a28
 8006770:	509f79fb 	.word	0x509f79fb
 8006774:	3fd34413 	.word	0x3fd34413
 8006778:	08008511 	.word	0x08008511
 800677c:	08008528 	.word	0x08008528
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	0800850d 	.word	0x0800850d
 8006788:	08008504 	.word	0x08008504
 800678c:	080084e1 	.word	0x080084e1
 8006790:	3ff80000 	.word	0x3ff80000
 8006794:	08008678 	.word	0x08008678
 8006798:	08008583 	.word	0x08008583
 800679c:	2501      	movs	r5, #1
 800679e:	2300      	movs	r3, #0
 80067a0:	9306      	str	r3, [sp, #24]
 80067a2:	9508      	str	r5, [sp, #32]
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2312      	movs	r3, #18
 80067b0:	e7b0      	b.n	8006714 <_dtoa_r+0x26c>
 80067b2:	2301      	movs	r3, #1
 80067b4:	9308      	str	r3, [sp, #32]
 80067b6:	e7f5      	b.n	80067a4 <_dtoa_r+0x2fc>
 80067b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067be:	e7b8      	b.n	8006732 <_dtoa_r+0x28a>
 80067c0:	3101      	adds	r1, #1
 80067c2:	6041      	str	r1, [r0, #4]
 80067c4:	0052      	lsls	r2, r2, #1
 80067c6:	e7b8      	b.n	800673a <_dtoa_r+0x292>
 80067c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ca:	9a01      	ldr	r2, [sp, #4]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	2b0e      	cmp	r3, #14
 80067d2:	f200 809d 	bhi.w	8006910 <_dtoa_r+0x468>
 80067d6:	2d00      	cmp	r5, #0
 80067d8:	f000 809a 	beq.w	8006910 <_dtoa_r+0x468>
 80067dc:	9b00      	ldr	r3, [sp, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dd32      	ble.n	8006848 <_dtoa_r+0x3a0>
 80067e2:	4ab7      	ldr	r2, [pc, #732]	; (8006ac0 <_dtoa_r+0x618>)
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067f0:	9b00      	ldr	r3, [sp, #0]
 80067f2:	05d8      	lsls	r0, r3, #23
 80067f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067f8:	d516      	bpl.n	8006828 <_dtoa_r+0x380>
 80067fa:	4bb2      	ldr	r3, [pc, #712]	; (8006ac4 <_dtoa_r+0x61c>)
 80067fc:	ec51 0b19 	vmov	r0, r1, d9
 8006800:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006804:	f7fa f822 	bl	800084c <__aeabi_ddiv>
 8006808:	f007 070f 	and.w	r7, r7, #15
 800680c:	4682      	mov	sl, r0
 800680e:	468b      	mov	fp, r1
 8006810:	2503      	movs	r5, #3
 8006812:	4eac      	ldr	r6, [pc, #688]	; (8006ac4 <_dtoa_r+0x61c>)
 8006814:	b957      	cbnz	r7, 800682c <_dtoa_r+0x384>
 8006816:	4642      	mov	r2, r8
 8006818:	464b      	mov	r3, r9
 800681a:	4650      	mov	r0, sl
 800681c:	4659      	mov	r1, fp
 800681e:	f7fa f815 	bl	800084c <__aeabi_ddiv>
 8006822:	4682      	mov	sl, r0
 8006824:	468b      	mov	fp, r1
 8006826:	e028      	b.n	800687a <_dtoa_r+0x3d2>
 8006828:	2502      	movs	r5, #2
 800682a:	e7f2      	b.n	8006812 <_dtoa_r+0x36a>
 800682c:	07f9      	lsls	r1, r7, #31
 800682e:	d508      	bpl.n	8006842 <_dtoa_r+0x39a>
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006838:	f7f9 fede 	bl	80005f8 <__aeabi_dmul>
 800683c:	3501      	adds	r5, #1
 800683e:	4680      	mov	r8, r0
 8006840:	4689      	mov	r9, r1
 8006842:	107f      	asrs	r7, r7, #1
 8006844:	3608      	adds	r6, #8
 8006846:	e7e5      	b.n	8006814 <_dtoa_r+0x36c>
 8006848:	f000 809b 	beq.w	8006982 <_dtoa_r+0x4da>
 800684c:	9b00      	ldr	r3, [sp, #0]
 800684e:	4f9d      	ldr	r7, [pc, #628]	; (8006ac4 <_dtoa_r+0x61c>)
 8006850:	425e      	negs	r6, r3
 8006852:	4b9b      	ldr	r3, [pc, #620]	; (8006ac0 <_dtoa_r+0x618>)
 8006854:	f006 020f 	and.w	r2, r6, #15
 8006858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	ec51 0b19 	vmov	r0, r1, d9
 8006864:	f7f9 fec8 	bl	80005f8 <__aeabi_dmul>
 8006868:	1136      	asrs	r6, r6, #4
 800686a:	4682      	mov	sl, r0
 800686c:	468b      	mov	fp, r1
 800686e:	2300      	movs	r3, #0
 8006870:	2502      	movs	r5, #2
 8006872:	2e00      	cmp	r6, #0
 8006874:	d17a      	bne.n	800696c <_dtoa_r+0x4c4>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1d3      	bne.n	8006822 <_dtoa_r+0x37a>
 800687a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8082 	beq.w	8006986 <_dtoa_r+0x4de>
 8006882:	4b91      	ldr	r3, [pc, #580]	; (8006ac8 <_dtoa_r+0x620>)
 8006884:	2200      	movs	r2, #0
 8006886:	4650      	mov	r0, sl
 8006888:	4659      	mov	r1, fp
 800688a:	f7fa f927 	bl	8000adc <__aeabi_dcmplt>
 800688e:	2800      	cmp	r0, #0
 8006890:	d079      	beq.n	8006986 <_dtoa_r+0x4de>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d076      	beq.n	8006986 <_dtoa_r+0x4de>
 8006898:	9b02      	ldr	r3, [sp, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd36      	ble.n	800690c <_dtoa_r+0x464>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	4650      	mov	r0, sl
 80068a2:	4659      	mov	r1, fp
 80068a4:	1e5f      	subs	r7, r3, #1
 80068a6:	2200      	movs	r2, #0
 80068a8:	4b88      	ldr	r3, [pc, #544]	; (8006acc <_dtoa_r+0x624>)
 80068aa:	f7f9 fea5 	bl	80005f8 <__aeabi_dmul>
 80068ae:	9e02      	ldr	r6, [sp, #8]
 80068b0:	4682      	mov	sl, r0
 80068b2:	468b      	mov	fp, r1
 80068b4:	3501      	adds	r5, #1
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7f9 fe34 	bl	8000524 <__aeabi_i2d>
 80068bc:	4652      	mov	r2, sl
 80068be:	465b      	mov	r3, fp
 80068c0:	f7f9 fe9a 	bl	80005f8 <__aeabi_dmul>
 80068c4:	4b82      	ldr	r3, [pc, #520]	; (8006ad0 <_dtoa_r+0x628>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	f7f9 fce0 	bl	800028c <__adddf3>
 80068cc:	46d0      	mov	r8, sl
 80068ce:	46d9      	mov	r9, fp
 80068d0:	4682      	mov	sl, r0
 80068d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	d158      	bne.n	800698c <_dtoa_r+0x4e4>
 80068da:	4b7e      	ldr	r3, [pc, #504]	; (8006ad4 <_dtoa_r+0x62c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	4640      	mov	r0, r8
 80068e0:	4649      	mov	r1, r9
 80068e2:	f7f9 fcd1 	bl	8000288 <__aeabi_dsub>
 80068e6:	4652      	mov	r2, sl
 80068e8:	465b      	mov	r3, fp
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	f7fa f913 	bl	8000b18 <__aeabi_dcmpgt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f040 8295 	bne.w	8006e22 <_dtoa_r+0x97a>
 80068f8:	4652      	mov	r2, sl
 80068fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7fa f8eb 	bl	8000adc <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f040 8289 	bne.w	8006e1e <_dtoa_r+0x976>
 800690c:	ec5b ab19 	vmov	sl, fp, d9
 8006910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006912:	2b00      	cmp	r3, #0
 8006914:	f2c0 8148 	blt.w	8006ba8 <_dtoa_r+0x700>
 8006918:	9a00      	ldr	r2, [sp, #0]
 800691a:	2a0e      	cmp	r2, #14
 800691c:	f300 8144 	bgt.w	8006ba8 <_dtoa_r+0x700>
 8006920:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <_dtoa_r+0x618>)
 8006922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006926:	e9d3 8900 	ldrd	r8, r9, [r3]
 800692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	f280 80d5 	bge.w	8006adc <_dtoa_r+0x634>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f300 80d1 	bgt.w	8006adc <_dtoa_r+0x634>
 800693a:	f040 826f 	bne.w	8006e1c <_dtoa_r+0x974>
 800693e:	4b65      	ldr	r3, [pc, #404]	; (8006ad4 <_dtoa_r+0x62c>)
 8006940:	2200      	movs	r2, #0
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fe57 	bl	80005f8 <__aeabi_dmul>
 800694a:	4652      	mov	r2, sl
 800694c:	465b      	mov	r3, fp
 800694e:	f7fa f8d9 	bl	8000b04 <__aeabi_dcmpge>
 8006952:	9e03      	ldr	r6, [sp, #12]
 8006954:	4637      	mov	r7, r6
 8006956:	2800      	cmp	r0, #0
 8006958:	f040 8245 	bne.w	8006de6 <_dtoa_r+0x93e>
 800695c:	9d01      	ldr	r5, [sp, #4]
 800695e:	2331      	movs	r3, #49	; 0x31
 8006960:	f805 3b01 	strb.w	r3, [r5], #1
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	e240      	b.n	8006dee <_dtoa_r+0x946>
 800696c:	07f2      	lsls	r2, r6, #31
 800696e:	d505      	bpl.n	800697c <_dtoa_r+0x4d4>
 8006970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006974:	f7f9 fe40 	bl	80005f8 <__aeabi_dmul>
 8006978:	3501      	adds	r5, #1
 800697a:	2301      	movs	r3, #1
 800697c:	1076      	asrs	r6, r6, #1
 800697e:	3708      	adds	r7, #8
 8006980:	e777      	b.n	8006872 <_dtoa_r+0x3ca>
 8006982:	2502      	movs	r5, #2
 8006984:	e779      	b.n	800687a <_dtoa_r+0x3d2>
 8006986:	9f00      	ldr	r7, [sp, #0]
 8006988:	9e03      	ldr	r6, [sp, #12]
 800698a:	e794      	b.n	80068b6 <_dtoa_r+0x40e>
 800698c:	9901      	ldr	r1, [sp, #4]
 800698e:	4b4c      	ldr	r3, [pc, #304]	; (8006ac0 <_dtoa_r+0x618>)
 8006990:	4431      	add	r1, r6
 8006992:	910d      	str	r1, [sp, #52]	; 0x34
 8006994:	9908      	ldr	r1, [sp, #32]
 8006996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800699a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800699e:	2900      	cmp	r1, #0
 80069a0:	d043      	beq.n	8006a2a <_dtoa_r+0x582>
 80069a2:	494d      	ldr	r1, [pc, #308]	; (8006ad8 <_dtoa_r+0x630>)
 80069a4:	2000      	movs	r0, #0
 80069a6:	f7f9 ff51 	bl	800084c <__aeabi_ddiv>
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	f7f9 fc6b 	bl	8000288 <__aeabi_dsub>
 80069b2:	9d01      	ldr	r5, [sp, #4]
 80069b4:	4682      	mov	sl, r0
 80069b6:	468b      	mov	fp, r1
 80069b8:	4649      	mov	r1, r9
 80069ba:	4640      	mov	r0, r8
 80069bc:	f7fa f8cc 	bl	8000b58 <__aeabi_d2iz>
 80069c0:	4606      	mov	r6, r0
 80069c2:	f7f9 fdaf 	bl	8000524 <__aeabi_i2d>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4640      	mov	r0, r8
 80069cc:	4649      	mov	r1, r9
 80069ce:	f7f9 fc5b 	bl	8000288 <__aeabi_dsub>
 80069d2:	3630      	adds	r6, #48	; 0x30
 80069d4:	f805 6b01 	strb.w	r6, [r5], #1
 80069d8:	4652      	mov	r2, sl
 80069da:	465b      	mov	r3, fp
 80069dc:	4680      	mov	r8, r0
 80069de:	4689      	mov	r9, r1
 80069e0:	f7fa f87c 	bl	8000adc <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d163      	bne.n	8006ab0 <_dtoa_r+0x608>
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	4936      	ldr	r1, [pc, #216]	; (8006ac8 <_dtoa_r+0x620>)
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7f9 fc4a 	bl	8000288 <__aeabi_dsub>
 80069f4:	4652      	mov	r2, sl
 80069f6:	465b      	mov	r3, fp
 80069f8:	f7fa f870 	bl	8000adc <__aeabi_dcmplt>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f040 80b5 	bne.w	8006b6c <_dtoa_r+0x6c4>
 8006a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d081      	beq.n	800690c <_dtoa_r+0x464>
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <_dtoa_r+0x624>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4650      	mov	r0, sl
 8006a0e:	4659      	mov	r1, fp
 8006a10:	f7f9 fdf2 	bl	80005f8 <__aeabi_dmul>
 8006a14:	4b2d      	ldr	r3, [pc, #180]	; (8006acc <_dtoa_r+0x624>)
 8006a16:	4682      	mov	sl, r0
 8006a18:	468b      	mov	fp, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f7f9 fdea 	bl	80005f8 <__aeabi_dmul>
 8006a24:	4680      	mov	r8, r0
 8006a26:	4689      	mov	r9, r1
 8006a28:	e7c6      	b.n	80069b8 <_dtoa_r+0x510>
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	f7f9 fde3 	bl	80005f8 <__aeabi_dmul>
 8006a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a34:	9d01      	ldr	r5, [sp, #4]
 8006a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a38:	4682      	mov	sl, r0
 8006a3a:	468b      	mov	fp, r1
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f7fa f88a 	bl	8000b58 <__aeabi_d2iz>
 8006a44:	4606      	mov	r6, r0
 8006a46:	f7f9 fd6d 	bl	8000524 <__aeabi_i2d>
 8006a4a:	3630      	adds	r6, #48	; 0x30
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4640      	mov	r0, r8
 8006a52:	4649      	mov	r1, r9
 8006a54:	f7f9 fc18 	bl	8000288 <__aeabi_dsub>
 8006a58:	f805 6b01 	strb.w	r6, [r5], #1
 8006a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	4680      	mov	r8, r0
 8006a62:	4689      	mov	r9, r1
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	d124      	bne.n	8006ab4 <_dtoa_r+0x60c>
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <_dtoa_r+0x630>)
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	f7f9 fc0c 	bl	800028c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7fa f84c 	bl	8000b18 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d173      	bne.n	8006b6c <_dtoa_r+0x6c4>
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	4913      	ldr	r1, [pc, #76]	; (8006ad8 <_dtoa_r+0x630>)
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7f9 fbfc 	bl	8000288 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7fa f820 	bl	8000adc <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af35 	beq.w	800690c <_dtoa_r+0x464>
 8006aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006aa4:	1e6b      	subs	r3, r5, #1
 8006aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d0f8      	beq.n	8006aa2 <_dtoa_r+0x5fa>
 8006ab0:	9700      	str	r7, [sp, #0]
 8006ab2:	e049      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <_dtoa_r+0x624>)
 8006ab6:	f7f9 fd9f 	bl	80005f8 <__aeabi_dmul>
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	e7bd      	b.n	8006a3c <_dtoa_r+0x594>
 8006ac0:	08008678 	.word	0x08008678
 8006ac4:	08008650 	.word	0x08008650
 8006ac8:	3ff00000 	.word	0x3ff00000
 8006acc:	40240000 	.word	0x40240000
 8006ad0:	401c0000 	.word	0x401c0000
 8006ad4:	40140000 	.word	0x40140000
 8006ad8:	3fe00000 	.word	0x3fe00000
 8006adc:	9d01      	ldr	r5, [sp, #4]
 8006ade:	4656      	mov	r6, sl
 8006ae0:	465f      	mov	r7, fp
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7f9 feaf 	bl	800084c <__aeabi_ddiv>
 8006aee:	f7fa f833 	bl	8000b58 <__aeabi_d2iz>
 8006af2:	4682      	mov	sl, r0
 8006af4:	f7f9 fd16 	bl	8000524 <__aeabi_i2d>
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	f7f9 fd7c 	bl	80005f8 <__aeabi_dmul>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b0c:	f7f9 fbbc 	bl	8000288 <__aeabi_dsub>
 8006b10:	f805 6b01 	strb.w	r6, [r5], #1
 8006b14:	9e01      	ldr	r6, [sp, #4]
 8006b16:	9f03      	ldr	r7, [sp, #12]
 8006b18:	1bae      	subs	r6, r5, r6
 8006b1a:	42b7      	cmp	r7, r6
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	d135      	bne.n	8006b8e <_dtoa_r+0x6e6>
 8006b22:	f7f9 fbb3 	bl	800028c <__adddf3>
 8006b26:	4642      	mov	r2, r8
 8006b28:	464b      	mov	r3, r9
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	f7f9 fff3 	bl	8000b18 <__aeabi_dcmpgt>
 8006b32:	b9d0      	cbnz	r0, 8006b6a <_dtoa_r+0x6c2>
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	4630      	mov	r0, r6
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	f7f9 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b40:	b110      	cbz	r0, 8006b48 <_dtoa_r+0x6a0>
 8006b42:	f01a 0f01 	tst.w	sl, #1
 8006b46:	d110      	bne.n	8006b6a <_dtoa_r+0x6c2>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	ee18 1a10 	vmov	r1, s16
 8006b4e:	f000 fd13 	bl	8007578 <_Bfree>
 8006b52:	2300      	movs	r3, #0
 8006b54:	9800      	ldr	r0, [sp, #0]
 8006b56:	702b      	strb	r3, [r5, #0]
 8006b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	6018      	str	r0, [r3, #0]
 8006b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f43f acf1 	beq.w	8006548 <_dtoa_r+0xa0>
 8006b66:	601d      	str	r5, [r3, #0]
 8006b68:	e4ee      	b.n	8006548 <_dtoa_r+0xa0>
 8006b6a:	9f00      	ldr	r7, [sp, #0]
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	461d      	mov	r5, r3
 8006b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b74:	2a39      	cmp	r2, #57	; 0x39
 8006b76:	d106      	bne.n	8006b86 <_dtoa_r+0x6de>
 8006b78:	9a01      	ldr	r2, [sp, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1f7      	bne.n	8006b6e <_dtoa_r+0x6c6>
 8006b7e:	9901      	ldr	r1, [sp, #4]
 8006b80:	2230      	movs	r2, #48	; 0x30
 8006b82:	3701      	adds	r7, #1
 8006b84:	700a      	strb	r2, [r1, #0]
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	3201      	adds	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e790      	b.n	8006ab0 <_dtoa_r+0x608>
 8006b8e:	4ba6      	ldr	r3, [pc, #664]	; (8006e28 <_dtoa_r+0x980>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	f7f9 fd31 	bl	80005f8 <__aeabi_dmul>
 8006b96:	2200      	movs	r2, #0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	f7f9 ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d09d      	beq.n	8006ae2 <_dtoa_r+0x63a>
 8006ba6:	e7cf      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006ba8:	9a08      	ldr	r2, [sp, #32]
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	f000 80d7 	beq.w	8006d5e <_dtoa_r+0x8b6>
 8006bb0:	9a06      	ldr	r2, [sp, #24]
 8006bb2:	2a01      	cmp	r2, #1
 8006bb4:	f300 80ba 	bgt.w	8006d2c <_dtoa_r+0x884>
 8006bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	f000 80b2 	beq.w	8006d24 <_dtoa_r+0x87c>
 8006bc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bc4:	9e07      	ldr	r6, [sp, #28]
 8006bc6:	9d04      	ldr	r5, [sp, #16]
 8006bc8:	9a04      	ldr	r2, [sp, #16]
 8006bca:	441a      	add	r2, r3
 8006bcc:	9204      	str	r2, [sp, #16]
 8006bce:	9a05      	ldr	r2, [sp, #20]
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	441a      	add	r2, r3
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	9205      	str	r2, [sp, #20]
 8006bd8:	f000 fd86 	bl	80076e8 <__i2b>
 8006bdc:	4607      	mov	r7, r0
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	dd0c      	ble.n	8006bfc <_dtoa_r+0x754>
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd09      	ble.n	8006bfc <_dtoa_r+0x754>
 8006be8:	42ab      	cmp	r3, r5
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	bfa8      	it	ge
 8006bee:	462b      	movge	r3, r5
 8006bf0:	1ad2      	subs	r2, r2, r3
 8006bf2:	9204      	str	r2, [sp, #16]
 8006bf4:	9a05      	ldr	r2, [sp, #20]
 8006bf6:	1aed      	subs	r5, r5, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	b31b      	cbz	r3, 8006c48 <_dtoa_r+0x7a0>
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80af 	beq.w	8006d66 <_dtoa_r+0x8be>
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	dd13      	ble.n	8006c34 <_dtoa_r+0x78c>
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fe29 	bl	8007868 <__pow5mult>
 8006c16:	ee18 2a10 	vmov	r2, s16
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 fd78 	bl	8007714 <__multiply>
 8006c24:	ee18 1a10 	vmov	r1, s16
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fca4 	bl	8007578 <_Bfree>
 8006c30:	ee08 8a10 	vmov	s16, r8
 8006c34:	9b07      	ldr	r3, [sp, #28]
 8006c36:	1b9a      	subs	r2, r3, r6
 8006c38:	d006      	beq.n	8006c48 <_dtoa_r+0x7a0>
 8006c3a:	ee18 1a10 	vmov	r1, s16
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fe12 	bl	8007868 <__pow5mult>
 8006c44:	ee08 0a10 	vmov	s16, r0
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fd4c 	bl	80076e8 <__i2b>
 8006c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	4606      	mov	r6, r0
 8006c56:	f340 8088 	ble.w	8006d6a <_dtoa_r+0x8c2>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fe02 	bl	8007868 <__pow5mult>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	4606      	mov	r6, r0
 8006c6a:	f340 8081 	ble.w	8006d70 <_dtoa_r+0x8c8>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	6933      	ldr	r3, [r6, #16]
 8006c74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c78:	6918      	ldr	r0, [r3, #16]
 8006c7a:	f000 fce5 	bl	8007648 <__hi0bits>
 8006c7e:	f1c0 0020 	rsb	r0, r0, #32
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	4418      	add	r0, r3
 8006c86:	f010 001f 	ands.w	r0, r0, #31
 8006c8a:	f000 8092 	beq.w	8006db2 <_dtoa_r+0x90a>
 8006c8e:	f1c0 0320 	rsb	r3, r0, #32
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	f340 808a 	ble.w	8006dac <_dtoa_r+0x904>
 8006c98:	f1c0 001c 	rsb	r0, r0, #28
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	4403      	add	r3, r0
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	4403      	add	r3, r0
 8006ca6:	4405      	add	r5, r0
 8006ca8:	9305      	str	r3, [sp, #20]
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd07      	ble.n	8006cc0 <_dtoa_r+0x818>
 8006cb0:	ee18 1a10 	vmov	r1, s16
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 fe30 	bl	800791c <__lshift>
 8006cbc:	ee08 0a10 	vmov	s16, r0
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dd05      	ble.n	8006cd2 <_dtoa_r+0x82a>
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fe26 	bl	800791c <__lshift>
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d06e      	beq.n	8006db6 <_dtoa_r+0x90e>
 8006cd8:	ee18 0a10 	vmov	r0, s16
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f000 fe8d 	bl	80079fc <__mcmp>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	da67      	bge.n	8006db6 <_dtoa_r+0x90e>
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	ee18 1a10 	vmov	r1, s16
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fc61 	bl	80075bc <__multadd>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	ee08 0a10 	vmov	s16, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 81b1 	beq.w	8007068 <_dtoa_r+0xbc0>
 8006d06:	2300      	movs	r3, #0
 8006d08:	4639      	mov	r1, r7
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fc55 	bl	80075bc <__multadd>
 8006d12:	9b02      	ldr	r3, [sp, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	4607      	mov	r7, r0
 8006d18:	f300 808e 	bgt.w	8006e38 <_dtoa_r+0x990>
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc51      	bgt.n	8006dc6 <_dtoa_r+0x91e>
 8006d22:	e089      	b.n	8006e38 <_dtoa_r+0x990>
 8006d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d2a:	e74b      	b.n	8006bc4 <_dtoa_r+0x71c>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	1e5e      	subs	r6, r3, #1
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	42b3      	cmp	r3, r6
 8006d34:	bfbf      	itttt	lt
 8006d36:	9b07      	ldrlt	r3, [sp, #28]
 8006d38:	9607      	strlt	r6, [sp, #28]
 8006d3a:	1af2      	sublt	r2, r6, r3
 8006d3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d3e:	bfb6      	itet	lt
 8006d40:	189b      	addlt	r3, r3, r2
 8006d42:	1b9e      	subge	r6, r3, r6
 8006d44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	bfb8      	it	lt
 8006d4a:	2600      	movlt	r6, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bfb7      	itett	lt
 8006d50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d58:	1a9d      	sublt	r5, r3, r2
 8006d5a:	2300      	movlt	r3, #0
 8006d5c:	e734      	b.n	8006bc8 <_dtoa_r+0x720>
 8006d5e:	9e07      	ldr	r6, [sp, #28]
 8006d60:	9d04      	ldr	r5, [sp, #16]
 8006d62:	9f08      	ldr	r7, [sp, #32]
 8006d64:	e73b      	b.n	8006bde <_dtoa_r+0x736>
 8006d66:	9a07      	ldr	r2, [sp, #28]
 8006d68:	e767      	b.n	8006c3a <_dtoa_r+0x792>
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	dc18      	bgt.n	8006da2 <_dtoa_r+0x8fa>
 8006d70:	f1ba 0f00 	cmp.w	sl, #0
 8006d74:	d115      	bne.n	8006da2 <_dtoa_r+0x8fa>
 8006d76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d7a:	b993      	cbnz	r3, 8006da2 <_dtoa_r+0x8fa>
 8006d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	b183      	cbz	r3, 8006da8 <_dtoa_r+0x900>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	9b05      	ldr	r3, [sp, #20]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	f04f 0801 	mov.w	r8, #1
 8006d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f47f af6a 	bne.w	8006c72 <_dtoa_r+0x7ca>
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e76f      	b.n	8006c82 <_dtoa_r+0x7da>
 8006da2:	f04f 0800 	mov.w	r8, #0
 8006da6:	e7f6      	b.n	8006d96 <_dtoa_r+0x8ee>
 8006da8:	4698      	mov	r8, r3
 8006daa:	e7f4      	b.n	8006d96 <_dtoa_r+0x8ee>
 8006dac:	f43f af7d 	beq.w	8006caa <_dtoa_r+0x802>
 8006db0:	4618      	mov	r0, r3
 8006db2:	301c      	adds	r0, #28
 8006db4:	e772      	b.n	8006c9c <_dtoa_r+0x7f4>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dc37      	bgt.n	8006e2c <_dtoa_r+0x984>
 8006dbc:	9b06      	ldr	r3, [sp, #24]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	dd34      	ble.n	8006e2c <_dtoa_r+0x984>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	b96b      	cbnz	r3, 8006de6 <_dtoa_r+0x93e>
 8006dca:	4631      	mov	r1, r6
 8006dcc:	2205      	movs	r2, #5
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fbf4 	bl	80075bc <__multadd>
 8006dd4:	4601      	mov	r1, r0
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	ee18 0a10 	vmov	r0, s16
 8006ddc:	f000 fe0e 	bl	80079fc <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f73f adbb 	bgt.w	800695c <_dtoa_r+0x4b4>
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	9d01      	ldr	r5, [sp, #4]
 8006dea:	43db      	mvns	r3, r3
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	4631      	mov	r1, r6
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fbbf 	bl	8007578 <_Bfree>
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	f43f aea4 	beq.w	8006b48 <_dtoa_r+0x6a0>
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d005      	beq.n	8006e12 <_dtoa_r+0x96a>
 8006e06:	45b8      	cmp	r8, r7
 8006e08:	d003      	beq.n	8006e12 <_dtoa_r+0x96a>
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fbb3 	bl	8007578 <_Bfree>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fbaf 	bl	8007578 <_Bfree>
 8006e1a:	e695      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	4637      	mov	r7, r6
 8006e20:	e7e1      	b.n	8006de6 <_dtoa_r+0x93e>
 8006e22:	9700      	str	r7, [sp, #0]
 8006e24:	4637      	mov	r7, r6
 8006e26:	e599      	b.n	800695c <_dtoa_r+0x4b4>
 8006e28:	40240000 	.word	0x40240000
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80ca 	beq.w	8006fc8 <_dtoa_r+0xb20>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	9302      	str	r3, [sp, #8]
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	dd05      	ble.n	8006e48 <_dtoa_r+0x9a0>
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fd6b 	bl	800791c <__lshift>
 8006e46:	4607      	mov	r7, r0
 8006e48:	f1b8 0f00 	cmp.w	r8, #0
 8006e4c:	d05b      	beq.n	8006f06 <_dtoa_r+0xa5e>
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fb51 	bl	80074f8 <_Balloc>
 8006e56:	4605      	mov	r5, r0
 8006e58:	b928      	cbnz	r0, 8006e66 <_dtoa_r+0x9be>
 8006e5a:	4b87      	ldr	r3, [pc, #540]	; (8007078 <_dtoa_r+0xbd0>)
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e62:	f7ff bb3b 	b.w	80064dc <_dtoa_r+0x34>
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	3202      	adds	r2, #2
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	f107 010c 	add.w	r1, r7, #12
 8006e70:	300c      	adds	r0, #12
 8006e72:	f000 fb33 	bl	80074dc <memcpy>
 8006e76:	2201      	movs	r2, #1
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fd4e 	bl	800791c <__lshift>
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	f103 0901 	add.w	r9, r3, #1
 8006e86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	f00a 0301 	and.w	r3, sl, #1
 8006e92:	46b8      	mov	r8, r7
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	4607      	mov	r7, r0
 8006e98:	4631      	mov	r1, r6
 8006e9a:	ee18 0a10 	vmov	r0, s16
 8006e9e:	f7ff fa75 	bl	800638c <quorem>
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	9002      	str	r0, [sp, #8]
 8006ea6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eaa:	ee18 0a10 	vmov	r0, s16
 8006eae:	f000 fda5 	bl	80079fc <__mcmp>
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	9003      	str	r0, [sp, #12]
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 fdbb 	bl	8007a34 <__mdiff>
 8006ebe:	68c2      	ldr	r2, [r0, #12]
 8006ec0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	bb02      	cbnz	r2, 8006f0a <_dtoa_r+0xa62>
 8006ec8:	4601      	mov	r1, r0
 8006eca:	ee18 0a10 	vmov	r0, s16
 8006ece:	f000 fd95 	bl	80079fc <__mcmp>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	9207      	str	r2, [sp, #28]
 8006eda:	f000 fb4d 	bl	8007578 <_Bfree>
 8006ede:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ee2:	ea43 0102 	orr.w	r1, r3, r2
 8006ee6:	9b04      	ldr	r3, [sp, #16]
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	464d      	mov	r5, r9
 8006eec:	d10f      	bne.n	8006f0e <_dtoa_r+0xa66>
 8006eee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ef2:	d02a      	beq.n	8006f4a <_dtoa_r+0xaa2>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd02      	ble.n	8006f00 <_dtoa_r+0xa58>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f00:	f88b a000 	strb.w	sl, [fp]
 8006f04:	e775      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f06:	4638      	mov	r0, r7
 8006f08:	e7ba      	b.n	8006e80 <_dtoa_r+0x9d8>
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	e7e2      	b.n	8006ed4 <_dtoa_r+0xa2c>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	db04      	blt.n	8006f1e <_dtoa_r+0xa76>
 8006f14:	9906      	ldr	r1, [sp, #24]
 8006f16:	430b      	orrs	r3, r1
 8006f18:	9904      	ldr	r1, [sp, #16]
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	d122      	bne.n	8006f64 <_dtoa_r+0xabc>
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	ddee      	ble.n	8006f00 <_dtoa_r+0xa58>
 8006f22:	ee18 1a10 	vmov	r1, s16
 8006f26:	2201      	movs	r2, #1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fcf7 	bl	800791c <__lshift>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	ee08 0a10 	vmov	s16, r0
 8006f34:	f000 fd62 	bl	80079fc <__mcmp>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	dc03      	bgt.n	8006f44 <_dtoa_r+0xa9c>
 8006f3c:	d1e0      	bne.n	8006f00 <_dtoa_r+0xa58>
 8006f3e:	f01a 0f01 	tst.w	sl, #1
 8006f42:	d0dd      	beq.n	8006f00 <_dtoa_r+0xa58>
 8006f44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f48:	d1d7      	bne.n	8006efa <_dtoa_r+0xa52>
 8006f4a:	2339      	movs	r3, #57	; 0x39
 8006f4c:	f88b 3000 	strb.w	r3, [fp]
 8006f50:	462b      	mov	r3, r5
 8006f52:	461d      	mov	r5, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f5a:	2a39      	cmp	r2, #57	; 0x39
 8006f5c:	d071      	beq.n	8007042 <_dtoa_r+0xb9a>
 8006f5e:	3201      	adds	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e746      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	dd07      	ble.n	8006f78 <_dtoa_r+0xad0>
 8006f68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f6c:	d0ed      	beq.n	8006f4a <_dtoa_r+0xaa2>
 8006f6e:	f10a 0301 	add.w	r3, sl, #1
 8006f72:	f88b 3000 	strb.w	r3, [fp]
 8006f76:	e73c      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f78:	9b05      	ldr	r3, [sp, #20]
 8006f7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f7e:	4599      	cmp	r9, r3
 8006f80:	d047      	beq.n	8007012 <_dtoa_r+0xb6a>
 8006f82:	ee18 1a10 	vmov	r1, s16
 8006f86:	2300      	movs	r3, #0
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fb16 	bl	80075bc <__multadd>
 8006f90:	45b8      	cmp	r8, r7
 8006f92:	ee08 0a10 	vmov	s16, r0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	f04f 020a 	mov.w	r2, #10
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	d106      	bne.n	8006fb2 <_dtoa_r+0xb0a>
 8006fa4:	f000 fb0a 	bl	80075bc <__multadd>
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4607      	mov	r7, r0
 8006fac:	f109 0901 	add.w	r9, r9, #1
 8006fb0:	e772      	b.n	8006e98 <_dtoa_r+0x9f0>
 8006fb2:	f000 fb03 	bl	80075bc <__multadd>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4680      	mov	r8, r0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 fafc 	bl	80075bc <__multadd>
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	e7f1      	b.n	8006fac <_dtoa_r+0xb04>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	9d01      	ldr	r5, [sp, #4]
 8006fce:	ee18 0a10 	vmov	r0, s16
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	f7ff f9da 	bl	800638c <quorem>
 8006fd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	f805 ab01 	strb.w	sl, [r5], #1
 8006fe2:	1aea      	subs	r2, r5, r3
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	dd09      	ble.n	8006ffe <_dtoa_r+0xb56>
 8006fea:	ee18 1a10 	vmov	r1, s16
 8006fee:	2300      	movs	r3, #0
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 fae2 	bl	80075bc <__multadd>
 8006ff8:	ee08 0a10 	vmov	s16, r0
 8006ffc:	e7e7      	b.n	8006fce <_dtoa_r+0xb26>
 8006ffe:	9b02      	ldr	r3, [sp, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfc8      	it	gt
 8007004:	461d      	movgt	r5, r3
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	bfd8      	it	le
 800700a:	2501      	movle	r5, #1
 800700c:	441d      	add	r5, r3
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	ee18 1a10 	vmov	r1, s16
 8007016:	2201      	movs	r2, #1
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fc7f 	bl	800791c <__lshift>
 800701e:	4631      	mov	r1, r6
 8007020:	ee08 0a10 	vmov	s16, r0
 8007024:	f000 fcea 	bl	80079fc <__mcmp>
 8007028:	2800      	cmp	r0, #0
 800702a:	dc91      	bgt.n	8006f50 <_dtoa_r+0xaa8>
 800702c:	d102      	bne.n	8007034 <_dtoa_r+0xb8c>
 800702e:	f01a 0f01 	tst.w	sl, #1
 8007032:	d18d      	bne.n	8006f50 <_dtoa_r+0xaa8>
 8007034:	462b      	mov	r3, r5
 8007036:	461d      	mov	r5, r3
 8007038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703c:	2a30      	cmp	r2, #48	; 0x30
 800703e:	d0fa      	beq.n	8007036 <_dtoa_r+0xb8e>
 8007040:	e6d7      	b.n	8006df2 <_dtoa_r+0x94a>
 8007042:	9a01      	ldr	r2, [sp, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d184      	bne.n	8006f52 <_dtoa_r+0xaaa>
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2331      	movs	r3, #49	; 0x31
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	e6ce      	b.n	8006df2 <_dtoa_r+0x94a>
 8007054:	4b09      	ldr	r3, [pc, #36]	; (800707c <_dtoa_r+0xbd4>)
 8007056:	f7ff ba95 	b.w	8006584 <_dtoa_r+0xdc>
 800705a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800705c:	2b00      	cmp	r3, #0
 800705e:	f47f aa6e 	bne.w	800653e <_dtoa_r+0x96>
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <_dtoa_r+0xbd8>)
 8007064:	f7ff ba8e 	b.w	8006584 <_dtoa_r+0xdc>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	dcae      	bgt.n	8006fcc <_dtoa_r+0xb24>
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	2b02      	cmp	r3, #2
 8007072:	f73f aea8 	bgt.w	8006dc6 <_dtoa_r+0x91e>
 8007076:	e7a9      	b.n	8006fcc <_dtoa_r+0xb24>
 8007078:	08008583 	.word	0x08008583
 800707c:	080084e0 	.word	0x080084e0
 8007080:	08008504 	.word	0x08008504

08007084 <__sflush_r>:
 8007084:	898a      	ldrh	r2, [r1, #12]
 8007086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708a:	4605      	mov	r5, r0
 800708c:	0710      	lsls	r0, r2, #28
 800708e:	460c      	mov	r4, r1
 8007090:	d458      	bmi.n	8007144 <__sflush_r+0xc0>
 8007092:	684b      	ldr	r3, [r1, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	dc05      	bgt.n	80070a4 <__sflush_r+0x20>
 8007098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	dc02      	bgt.n	80070a4 <__sflush_r+0x20>
 800709e:	2000      	movs	r0, #0
 80070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070a6:	2e00      	cmp	r6, #0
 80070a8:	d0f9      	beq.n	800709e <__sflush_r+0x1a>
 80070aa:	2300      	movs	r3, #0
 80070ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070b0:	682f      	ldr	r7, [r5, #0]
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	d032      	beq.n	800711c <__sflush_r+0x98>
 80070b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	075a      	lsls	r2, r3, #29
 80070bc:	d505      	bpl.n	80070ca <__sflush_r+0x46>
 80070be:	6863      	ldr	r3, [r4, #4]
 80070c0:	1ac0      	subs	r0, r0, r3
 80070c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070c4:	b10b      	cbz	r3, 80070ca <__sflush_r+0x46>
 80070c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070c8:	1ac0      	subs	r0, r0, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	4602      	mov	r2, r0
 80070ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070d0:	6a21      	ldr	r1, [r4, #32]
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b0      	blx	r6
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	d106      	bne.n	80070ea <__sflush_r+0x66>
 80070dc:	6829      	ldr	r1, [r5, #0]
 80070de:	291d      	cmp	r1, #29
 80070e0:	d82c      	bhi.n	800713c <__sflush_r+0xb8>
 80070e2:	4a2a      	ldr	r2, [pc, #168]	; (800718c <__sflush_r+0x108>)
 80070e4:	40ca      	lsrs	r2, r1
 80070e6:	07d6      	lsls	r6, r2, #31
 80070e8:	d528      	bpl.n	800713c <__sflush_r+0xb8>
 80070ea:	2200      	movs	r2, #0
 80070ec:	6062      	str	r2, [r4, #4]
 80070ee:	04d9      	lsls	r1, r3, #19
 80070f0:	6922      	ldr	r2, [r4, #16]
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	d504      	bpl.n	8007100 <__sflush_r+0x7c>
 80070f6:	1c42      	adds	r2, r0, #1
 80070f8:	d101      	bne.n	80070fe <__sflush_r+0x7a>
 80070fa:	682b      	ldr	r3, [r5, #0]
 80070fc:	b903      	cbnz	r3, 8007100 <__sflush_r+0x7c>
 80070fe:	6560      	str	r0, [r4, #84]	; 0x54
 8007100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007102:	602f      	str	r7, [r5, #0]
 8007104:	2900      	cmp	r1, #0
 8007106:	d0ca      	beq.n	800709e <__sflush_r+0x1a>
 8007108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800710c:	4299      	cmp	r1, r3
 800710e:	d002      	beq.n	8007116 <__sflush_r+0x92>
 8007110:	4628      	mov	r0, r5
 8007112:	f000 fd8b 	bl	8007c2c <_free_r>
 8007116:	2000      	movs	r0, #0
 8007118:	6360      	str	r0, [r4, #52]	; 0x34
 800711a:	e7c1      	b.n	80070a0 <__sflush_r+0x1c>
 800711c:	6a21      	ldr	r1, [r4, #32]
 800711e:	2301      	movs	r3, #1
 8007120:	4628      	mov	r0, r5
 8007122:	47b0      	blx	r6
 8007124:	1c41      	adds	r1, r0, #1
 8007126:	d1c7      	bne.n	80070b8 <__sflush_r+0x34>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0c4      	beq.n	80070b8 <__sflush_r+0x34>
 800712e:	2b1d      	cmp	r3, #29
 8007130:	d001      	beq.n	8007136 <__sflush_r+0xb2>
 8007132:	2b16      	cmp	r3, #22
 8007134:	d101      	bne.n	800713a <__sflush_r+0xb6>
 8007136:	602f      	str	r7, [r5, #0]
 8007138:	e7b1      	b.n	800709e <__sflush_r+0x1a>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	e7ad      	b.n	80070a0 <__sflush_r+0x1c>
 8007144:	690f      	ldr	r7, [r1, #16]
 8007146:	2f00      	cmp	r7, #0
 8007148:	d0a9      	beq.n	800709e <__sflush_r+0x1a>
 800714a:	0793      	lsls	r3, r2, #30
 800714c:	680e      	ldr	r6, [r1, #0]
 800714e:	bf08      	it	eq
 8007150:	694b      	ldreq	r3, [r1, #20]
 8007152:	600f      	str	r7, [r1, #0]
 8007154:	bf18      	it	ne
 8007156:	2300      	movne	r3, #0
 8007158:	eba6 0807 	sub.w	r8, r6, r7
 800715c:	608b      	str	r3, [r1, #8]
 800715e:	f1b8 0f00 	cmp.w	r8, #0
 8007162:	dd9c      	ble.n	800709e <__sflush_r+0x1a>
 8007164:	6a21      	ldr	r1, [r4, #32]
 8007166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007168:	4643      	mov	r3, r8
 800716a:	463a      	mov	r2, r7
 800716c:	4628      	mov	r0, r5
 800716e:	47b0      	blx	r6
 8007170:	2800      	cmp	r0, #0
 8007172:	dc06      	bgt.n	8007182 <__sflush_r+0xfe>
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800717a:	81a3      	strh	r3, [r4, #12]
 800717c:	f04f 30ff 	mov.w	r0, #4294967295
 8007180:	e78e      	b.n	80070a0 <__sflush_r+0x1c>
 8007182:	4407      	add	r7, r0
 8007184:	eba8 0800 	sub.w	r8, r8, r0
 8007188:	e7e9      	b.n	800715e <__sflush_r+0xda>
 800718a:	bf00      	nop
 800718c:	20400001 	.word	0x20400001

08007190 <_fflush_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	690b      	ldr	r3, [r1, #16]
 8007194:	4605      	mov	r5, r0
 8007196:	460c      	mov	r4, r1
 8007198:	b913      	cbnz	r3, 80071a0 <_fflush_r+0x10>
 800719a:	2500      	movs	r5, #0
 800719c:	4628      	mov	r0, r5
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	b118      	cbz	r0, 80071aa <_fflush_r+0x1a>
 80071a2:	6983      	ldr	r3, [r0, #24]
 80071a4:	b90b      	cbnz	r3, 80071aa <_fflush_r+0x1a>
 80071a6:	f000 f887 	bl	80072b8 <__sinit>
 80071aa:	4b14      	ldr	r3, [pc, #80]	; (80071fc <_fflush_r+0x6c>)
 80071ac:	429c      	cmp	r4, r3
 80071ae:	d11b      	bne.n	80071e8 <_fflush_r+0x58>
 80071b0:	686c      	ldr	r4, [r5, #4]
 80071b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0ef      	beq.n	800719a <_fflush_r+0xa>
 80071ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071bc:	07d0      	lsls	r0, r2, #31
 80071be:	d404      	bmi.n	80071ca <_fflush_r+0x3a>
 80071c0:	0599      	lsls	r1, r3, #22
 80071c2:	d402      	bmi.n	80071ca <_fflush_r+0x3a>
 80071c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071c6:	f000 f91a 	bl	80073fe <__retarget_lock_acquire_recursive>
 80071ca:	4628      	mov	r0, r5
 80071cc:	4621      	mov	r1, r4
 80071ce:	f7ff ff59 	bl	8007084 <__sflush_r>
 80071d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071d4:	07da      	lsls	r2, r3, #31
 80071d6:	4605      	mov	r5, r0
 80071d8:	d4e0      	bmi.n	800719c <_fflush_r+0xc>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	059b      	lsls	r3, r3, #22
 80071de:	d4dd      	bmi.n	800719c <_fflush_r+0xc>
 80071e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e2:	f000 f90d 	bl	8007400 <__retarget_lock_release_recursive>
 80071e6:	e7d9      	b.n	800719c <_fflush_r+0xc>
 80071e8:	4b05      	ldr	r3, [pc, #20]	; (8007200 <_fflush_r+0x70>)
 80071ea:	429c      	cmp	r4, r3
 80071ec:	d101      	bne.n	80071f2 <_fflush_r+0x62>
 80071ee:	68ac      	ldr	r4, [r5, #8]
 80071f0:	e7df      	b.n	80071b2 <_fflush_r+0x22>
 80071f2:	4b04      	ldr	r3, [pc, #16]	; (8007204 <_fflush_r+0x74>)
 80071f4:	429c      	cmp	r4, r3
 80071f6:	bf08      	it	eq
 80071f8:	68ec      	ldreq	r4, [r5, #12]
 80071fa:	e7da      	b.n	80071b2 <_fflush_r+0x22>
 80071fc:	080085b4 	.word	0x080085b4
 8007200:	080085d4 	.word	0x080085d4
 8007204:	08008594 	.word	0x08008594

08007208 <std>:
 8007208:	2300      	movs	r3, #0
 800720a:	b510      	push	{r4, lr}
 800720c:	4604      	mov	r4, r0
 800720e:	e9c0 3300 	strd	r3, r3, [r0]
 8007212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007216:	6083      	str	r3, [r0, #8]
 8007218:	8181      	strh	r1, [r0, #12]
 800721a:	6643      	str	r3, [r0, #100]	; 0x64
 800721c:	81c2      	strh	r2, [r0, #14]
 800721e:	6183      	str	r3, [r0, #24]
 8007220:	4619      	mov	r1, r3
 8007222:	2208      	movs	r2, #8
 8007224:	305c      	adds	r0, #92	; 0x5c
 8007226:	f7fe fadb 	bl	80057e0 <memset>
 800722a:	4b05      	ldr	r3, [pc, #20]	; (8007240 <std+0x38>)
 800722c:	6263      	str	r3, [r4, #36]	; 0x24
 800722e:	4b05      	ldr	r3, [pc, #20]	; (8007244 <std+0x3c>)
 8007230:	62a3      	str	r3, [r4, #40]	; 0x28
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <std+0x40>)
 8007234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <std+0x44>)
 8007238:	6224      	str	r4, [r4, #32]
 800723a:	6323      	str	r3, [r4, #48]	; 0x30
 800723c:	bd10      	pop	{r4, pc}
 800723e:	bf00      	nop
 8007240:	08008151 	.word	0x08008151
 8007244:	08008173 	.word	0x08008173
 8007248:	080081ab 	.word	0x080081ab
 800724c:	080081cf 	.word	0x080081cf

08007250 <_cleanup_r>:
 8007250:	4901      	ldr	r1, [pc, #4]	; (8007258 <_cleanup_r+0x8>)
 8007252:	f000 b8af 	b.w	80073b4 <_fwalk_reent>
 8007256:	bf00      	nop
 8007258:	08007191 	.word	0x08007191

0800725c <__sfmoreglue>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	2268      	movs	r2, #104	; 0x68
 8007260:	1e4d      	subs	r5, r1, #1
 8007262:	4355      	muls	r5, r2
 8007264:	460e      	mov	r6, r1
 8007266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800726a:	f000 fd4b 	bl	8007d04 <_malloc_r>
 800726e:	4604      	mov	r4, r0
 8007270:	b140      	cbz	r0, 8007284 <__sfmoreglue+0x28>
 8007272:	2100      	movs	r1, #0
 8007274:	e9c0 1600 	strd	r1, r6, [r0]
 8007278:	300c      	adds	r0, #12
 800727a:	60a0      	str	r0, [r4, #8]
 800727c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007280:	f7fe faae 	bl	80057e0 <memset>
 8007284:	4620      	mov	r0, r4
 8007286:	bd70      	pop	{r4, r5, r6, pc}

08007288 <__sfp_lock_acquire>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__sfp_lock_acquire+0x8>)
 800728a:	f000 b8b8 	b.w	80073fe <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	2000043d 	.word	0x2000043d

08007294 <__sfp_lock_release>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__sfp_lock_release+0x8>)
 8007296:	f000 b8b3 	b.w	8007400 <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	2000043d 	.word	0x2000043d

080072a0 <__sinit_lock_acquire>:
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <__sinit_lock_acquire+0x8>)
 80072a2:	f000 b8ac 	b.w	80073fe <__retarget_lock_acquire_recursive>
 80072a6:	bf00      	nop
 80072a8:	2000043e 	.word	0x2000043e

080072ac <__sinit_lock_release>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__sinit_lock_release+0x8>)
 80072ae:	f000 b8a7 	b.w	8007400 <__retarget_lock_release_recursive>
 80072b2:	bf00      	nop
 80072b4:	2000043e 	.word	0x2000043e

080072b8 <__sinit>:
 80072b8:	b510      	push	{r4, lr}
 80072ba:	4604      	mov	r4, r0
 80072bc:	f7ff fff0 	bl	80072a0 <__sinit_lock_acquire>
 80072c0:	69a3      	ldr	r3, [r4, #24]
 80072c2:	b11b      	cbz	r3, 80072cc <__sinit+0x14>
 80072c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c8:	f7ff bff0 	b.w	80072ac <__sinit_lock_release>
 80072cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072d0:	6523      	str	r3, [r4, #80]	; 0x50
 80072d2:	4b13      	ldr	r3, [pc, #76]	; (8007320 <__sinit+0x68>)
 80072d4:	4a13      	ldr	r2, [pc, #76]	; (8007324 <__sinit+0x6c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80072da:	42a3      	cmp	r3, r4
 80072dc:	bf04      	itt	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	61a3      	streq	r3, [r4, #24]
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 f820 	bl	8007328 <__sfp>
 80072e8:	6060      	str	r0, [r4, #4]
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 f81c 	bl	8007328 <__sfp>
 80072f0:	60a0      	str	r0, [r4, #8]
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f818 	bl	8007328 <__sfp>
 80072f8:	2200      	movs	r2, #0
 80072fa:	60e0      	str	r0, [r4, #12]
 80072fc:	2104      	movs	r1, #4
 80072fe:	6860      	ldr	r0, [r4, #4]
 8007300:	f7ff ff82 	bl	8007208 <std>
 8007304:	68a0      	ldr	r0, [r4, #8]
 8007306:	2201      	movs	r2, #1
 8007308:	2109      	movs	r1, #9
 800730a:	f7ff ff7d 	bl	8007208 <std>
 800730e:	68e0      	ldr	r0, [r4, #12]
 8007310:	2202      	movs	r2, #2
 8007312:	2112      	movs	r1, #18
 8007314:	f7ff ff78 	bl	8007208 <std>
 8007318:	2301      	movs	r3, #1
 800731a:	61a3      	str	r3, [r4, #24]
 800731c:	e7d2      	b.n	80072c4 <__sinit+0xc>
 800731e:	bf00      	nop
 8007320:	080084cc 	.word	0x080084cc
 8007324:	08007251 	.word	0x08007251

08007328 <__sfp>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	4607      	mov	r7, r0
 800732c:	f7ff ffac 	bl	8007288 <__sfp_lock_acquire>
 8007330:	4b1e      	ldr	r3, [pc, #120]	; (80073ac <__sfp+0x84>)
 8007332:	681e      	ldr	r6, [r3, #0]
 8007334:	69b3      	ldr	r3, [r6, #24]
 8007336:	b913      	cbnz	r3, 800733e <__sfp+0x16>
 8007338:	4630      	mov	r0, r6
 800733a:	f7ff ffbd 	bl	80072b8 <__sinit>
 800733e:	3648      	adds	r6, #72	; 0x48
 8007340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007344:	3b01      	subs	r3, #1
 8007346:	d503      	bpl.n	8007350 <__sfp+0x28>
 8007348:	6833      	ldr	r3, [r6, #0]
 800734a:	b30b      	cbz	r3, 8007390 <__sfp+0x68>
 800734c:	6836      	ldr	r6, [r6, #0]
 800734e:	e7f7      	b.n	8007340 <__sfp+0x18>
 8007350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007354:	b9d5      	cbnz	r5, 800738c <__sfp+0x64>
 8007356:	4b16      	ldr	r3, [pc, #88]	; (80073b0 <__sfp+0x88>)
 8007358:	60e3      	str	r3, [r4, #12]
 800735a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800735e:	6665      	str	r5, [r4, #100]	; 0x64
 8007360:	f000 f84c 	bl	80073fc <__retarget_lock_init_recursive>
 8007364:	f7ff ff96 	bl	8007294 <__sfp_lock_release>
 8007368:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800736c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007370:	6025      	str	r5, [r4, #0]
 8007372:	61a5      	str	r5, [r4, #24]
 8007374:	2208      	movs	r2, #8
 8007376:	4629      	mov	r1, r5
 8007378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800737c:	f7fe fa30 	bl	80057e0 <memset>
 8007380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007388:	4620      	mov	r0, r4
 800738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738c:	3468      	adds	r4, #104	; 0x68
 800738e:	e7d9      	b.n	8007344 <__sfp+0x1c>
 8007390:	2104      	movs	r1, #4
 8007392:	4638      	mov	r0, r7
 8007394:	f7ff ff62 	bl	800725c <__sfmoreglue>
 8007398:	4604      	mov	r4, r0
 800739a:	6030      	str	r0, [r6, #0]
 800739c:	2800      	cmp	r0, #0
 800739e:	d1d5      	bne.n	800734c <__sfp+0x24>
 80073a0:	f7ff ff78 	bl	8007294 <__sfp_lock_release>
 80073a4:	230c      	movs	r3, #12
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	e7ee      	b.n	8007388 <__sfp+0x60>
 80073aa:	bf00      	nop
 80073ac:	080084cc 	.word	0x080084cc
 80073b0:	ffff0001 	.word	0xffff0001

080073b4 <_fwalk_reent>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4606      	mov	r6, r0
 80073ba:	4688      	mov	r8, r1
 80073bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073c0:	2700      	movs	r7, #0
 80073c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c6:	f1b9 0901 	subs.w	r9, r9, #1
 80073ca:	d505      	bpl.n	80073d8 <_fwalk_reent+0x24>
 80073cc:	6824      	ldr	r4, [r4, #0]
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	d1f7      	bne.n	80073c2 <_fwalk_reent+0xe>
 80073d2:	4638      	mov	r0, r7
 80073d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d8:	89ab      	ldrh	r3, [r5, #12]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d907      	bls.n	80073ee <_fwalk_reent+0x3a>
 80073de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e2:	3301      	adds	r3, #1
 80073e4:	d003      	beq.n	80073ee <_fwalk_reent+0x3a>
 80073e6:	4629      	mov	r1, r5
 80073e8:	4630      	mov	r0, r6
 80073ea:	47c0      	blx	r8
 80073ec:	4307      	orrs	r7, r0
 80073ee:	3568      	adds	r5, #104	; 0x68
 80073f0:	e7e9      	b.n	80073c6 <_fwalk_reent+0x12>
	...

080073f4 <_localeconv_r>:
 80073f4:	4800      	ldr	r0, [pc, #0]	; (80073f8 <_localeconv_r+0x4>)
 80073f6:	4770      	bx	lr
 80073f8:	20000160 	.word	0x20000160

080073fc <__retarget_lock_init_recursive>:
 80073fc:	4770      	bx	lr

080073fe <__retarget_lock_acquire_recursive>:
 80073fe:	4770      	bx	lr

08007400 <__retarget_lock_release_recursive>:
 8007400:	4770      	bx	lr

08007402 <__swhatbuf_r>:
 8007402:	b570      	push	{r4, r5, r6, lr}
 8007404:	460e      	mov	r6, r1
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	2900      	cmp	r1, #0
 800740c:	b096      	sub	sp, #88	; 0x58
 800740e:	4614      	mov	r4, r2
 8007410:	461d      	mov	r5, r3
 8007412:	da08      	bge.n	8007426 <__swhatbuf_r+0x24>
 8007414:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	602a      	str	r2, [r5, #0]
 800741c:	061a      	lsls	r2, r3, #24
 800741e:	d410      	bmi.n	8007442 <__swhatbuf_r+0x40>
 8007420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007424:	e00e      	b.n	8007444 <__swhatbuf_r+0x42>
 8007426:	466a      	mov	r2, sp
 8007428:	f000 ff28 	bl	800827c <_fstat_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	dbf1      	blt.n	8007414 <__swhatbuf_r+0x12>
 8007430:	9a01      	ldr	r2, [sp, #4]
 8007432:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007436:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800743a:	425a      	negs	r2, r3
 800743c:	415a      	adcs	r2, r3
 800743e:	602a      	str	r2, [r5, #0]
 8007440:	e7ee      	b.n	8007420 <__swhatbuf_r+0x1e>
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	2000      	movs	r0, #0
 8007446:	6023      	str	r3, [r4, #0]
 8007448:	b016      	add	sp, #88	; 0x58
 800744a:	bd70      	pop	{r4, r5, r6, pc}

0800744c <__smakebuf_r>:
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007450:	079d      	lsls	r5, r3, #30
 8007452:	4606      	mov	r6, r0
 8007454:	460c      	mov	r4, r1
 8007456:	d507      	bpl.n	8007468 <__smakebuf_r+0x1c>
 8007458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	2301      	movs	r3, #1
 8007462:	6163      	str	r3, [r4, #20]
 8007464:	b002      	add	sp, #8
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	ab01      	add	r3, sp, #4
 800746a:	466a      	mov	r2, sp
 800746c:	f7ff ffc9 	bl	8007402 <__swhatbuf_r>
 8007470:	9900      	ldr	r1, [sp, #0]
 8007472:	4605      	mov	r5, r0
 8007474:	4630      	mov	r0, r6
 8007476:	f000 fc45 	bl	8007d04 <_malloc_r>
 800747a:	b948      	cbnz	r0, 8007490 <__smakebuf_r+0x44>
 800747c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007480:	059a      	lsls	r2, r3, #22
 8007482:	d4ef      	bmi.n	8007464 <__smakebuf_r+0x18>
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	f043 0302 	orr.w	r3, r3, #2
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7e3      	b.n	8007458 <__smakebuf_r+0xc>
 8007490:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <__smakebuf_r+0x7c>)
 8007492:	62b3      	str	r3, [r6, #40]	; 0x28
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	6020      	str	r0, [r4, #0]
 8007498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	6163      	str	r3, [r4, #20]
 80074a2:	9b01      	ldr	r3, [sp, #4]
 80074a4:	6120      	str	r0, [r4, #16]
 80074a6:	b15b      	cbz	r3, 80074c0 <__smakebuf_r+0x74>
 80074a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 fef7 	bl	80082a0 <_isatty_r>
 80074b2:	b128      	cbz	r0, 80074c0 <__smakebuf_r+0x74>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	89a0      	ldrh	r0, [r4, #12]
 80074c2:	4305      	orrs	r5, r0
 80074c4:	81a5      	strh	r5, [r4, #12]
 80074c6:	e7cd      	b.n	8007464 <__smakebuf_r+0x18>
 80074c8:	08007251 	.word	0x08007251

080074cc <malloc>:
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <malloc+0xc>)
 80074ce:	4601      	mov	r1, r0
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	f000 bc17 	b.w	8007d04 <_malloc_r>
 80074d6:	bf00      	nop
 80074d8:	2000000c 	.word	0x2000000c

080074dc <memcpy>:
 80074dc:	440a      	add	r2, r1
 80074de:	4291      	cmp	r1, r2
 80074e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80074e4:	d100      	bne.n	80074e8 <memcpy+0xc>
 80074e6:	4770      	bx	lr
 80074e8:	b510      	push	{r4, lr}
 80074ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074f2:	4291      	cmp	r1, r2
 80074f4:	d1f9      	bne.n	80074ea <memcpy+0xe>
 80074f6:	bd10      	pop	{r4, pc}

080074f8 <_Balloc>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	b976      	cbnz	r6, 8007520 <_Balloc+0x28>
 8007502:	2010      	movs	r0, #16
 8007504:	f7ff ffe2 	bl	80074cc <malloc>
 8007508:	4602      	mov	r2, r0
 800750a:	6260      	str	r0, [r4, #36]	; 0x24
 800750c:	b920      	cbnz	r0, 8007518 <_Balloc+0x20>
 800750e:	4b18      	ldr	r3, [pc, #96]	; (8007570 <_Balloc+0x78>)
 8007510:	4818      	ldr	r0, [pc, #96]	; (8007574 <_Balloc+0x7c>)
 8007512:	2166      	movs	r1, #102	; 0x66
 8007514:	f000 fe72 	bl	80081fc <__assert_func>
 8007518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800751c:	6006      	str	r6, [r0, #0]
 800751e:	60c6      	str	r6, [r0, #12]
 8007520:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007522:	68f3      	ldr	r3, [r6, #12]
 8007524:	b183      	cbz	r3, 8007548 <_Balloc+0x50>
 8007526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800752e:	b9b8      	cbnz	r0, 8007560 <_Balloc+0x68>
 8007530:	2101      	movs	r1, #1
 8007532:	fa01 f605 	lsl.w	r6, r1, r5
 8007536:	1d72      	adds	r2, r6, #5
 8007538:	0092      	lsls	r2, r2, #2
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fb60 	bl	8007c00 <_calloc_r>
 8007540:	b160      	cbz	r0, 800755c <_Balloc+0x64>
 8007542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007546:	e00e      	b.n	8007566 <_Balloc+0x6e>
 8007548:	2221      	movs	r2, #33	; 0x21
 800754a:	2104      	movs	r1, #4
 800754c:	4620      	mov	r0, r4
 800754e:	f000 fb57 	bl	8007c00 <_calloc_r>
 8007552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007554:	60f0      	str	r0, [r6, #12]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e4      	bne.n	8007526 <_Balloc+0x2e>
 800755c:	2000      	movs	r0, #0
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	6802      	ldr	r2, [r0, #0]
 8007562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007566:	2300      	movs	r3, #0
 8007568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800756c:	e7f7      	b.n	800755e <_Balloc+0x66>
 800756e:	bf00      	nop
 8007570:	08008511 	.word	0x08008511
 8007574:	080085f4 	.word	0x080085f4

08007578 <_Bfree>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800757c:	4605      	mov	r5, r0
 800757e:	460c      	mov	r4, r1
 8007580:	b976      	cbnz	r6, 80075a0 <_Bfree+0x28>
 8007582:	2010      	movs	r0, #16
 8007584:	f7ff ffa2 	bl	80074cc <malloc>
 8007588:	4602      	mov	r2, r0
 800758a:	6268      	str	r0, [r5, #36]	; 0x24
 800758c:	b920      	cbnz	r0, 8007598 <_Bfree+0x20>
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <_Bfree+0x3c>)
 8007590:	4809      	ldr	r0, [pc, #36]	; (80075b8 <_Bfree+0x40>)
 8007592:	218a      	movs	r1, #138	; 0x8a
 8007594:	f000 fe32 	bl	80081fc <__assert_func>
 8007598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800759c:	6006      	str	r6, [r0, #0]
 800759e:	60c6      	str	r6, [r0, #12]
 80075a0:	b13c      	cbz	r4, 80075b2 <_Bfree+0x3a>
 80075a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075a4:	6862      	ldr	r2, [r4, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075ac:	6021      	str	r1, [r4, #0]
 80075ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	08008511 	.word	0x08008511
 80075b8:	080085f4 	.word	0x080085f4

080075bc <__multadd>:
 80075bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c0:	690d      	ldr	r5, [r1, #16]
 80075c2:	4607      	mov	r7, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	461e      	mov	r6, r3
 80075c8:	f101 0c14 	add.w	ip, r1, #20
 80075cc:	2000      	movs	r0, #0
 80075ce:	f8dc 3000 	ldr.w	r3, [ip]
 80075d2:	b299      	uxth	r1, r3
 80075d4:	fb02 6101 	mla	r1, r2, r1, r6
 80075d8:	0c1e      	lsrs	r6, r3, #16
 80075da:	0c0b      	lsrs	r3, r1, #16
 80075dc:	fb02 3306 	mla	r3, r2, r6, r3
 80075e0:	b289      	uxth	r1, r1
 80075e2:	3001      	adds	r0, #1
 80075e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075e8:	4285      	cmp	r5, r0
 80075ea:	f84c 1b04 	str.w	r1, [ip], #4
 80075ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075f2:	dcec      	bgt.n	80075ce <__multadd+0x12>
 80075f4:	b30e      	cbz	r6, 800763a <__multadd+0x7e>
 80075f6:	68a3      	ldr	r3, [r4, #8]
 80075f8:	42ab      	cmp	r3, r5
 80075fa:	dc19      	bgt.n	8007630 <__multadd+0x74>
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	4638      	mov	r0, r7
 8007600:	3101      	adds	r1, #1
 8007602:	f7ff ff79 	bl	80074f8 <_Balloc>
 8007606:	4680      	mov	r8, r0
 8007608:	b928      	cbnz	r0, 8007616 <__multadd+0x5a>
 800760a:	4602      	mov	r2, r0
 800760c:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <__multadd+0x84>)
 800760e:	480d      	ldr	r0, [pc, #52]	; (8007644 <__multadd+0x88>)
 8007610:	21b5      	movs	r1, #181	; 0xb5
 8007612:	f000 fdf3 	bl	80081fc <__assert_func>
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	3202      	adds	r2, #2
 800761a:	f104 010c 	add.w	r1, r4, #12
 800761e:	0092      	lsls	r2, r2, #2
 8007620:	300c      	adds	r0, #12
 8007622:	f7ff ff5b 	bl	80074dc <memcpy>
 8007626:	4621      	mov	r1, r4
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff ffa5 	bl	8007578 <_Bfree>
 800762e:	4644      	mov	r4, r8
 8007630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007634:	3501      	adds	r5, #1
 8007636:	615e      	str	r6, [r3, #20]
 8007638:	6125      	str	r5, [r4, #16]
 800763a:	4620      	mov	r0, r4
 800763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007640:	08008583 	.word	0x08008583
 8007644:	080085f4 	.word	0x080085f4

08007648 <__hi0bits>:
 8007648:	0c03      	lsrs	r3, r0, #16
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	b9d3      	cbnz	r3, 8007684 <__hi0bits+0x3c>
 800764e:	0400      	lsls	r0, r0, #16
 8007650:	2310      	movs	r3, #16
 8007652:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007656:	bf04      	itt	eq
 8007658:	0200      	lsleq	r0, r0, #8
 800765a:	3308      	addeq	r3, #8
 800765c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007660:	bf04      	itt	eq
 8007662:	0100      	lsleq	r0, r0, #4
 8007664:	3304      	addeq	r3, #4
 8007666:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800766a:	bf04      	itt	eq
 800766c:	0080      	lsleq	r0, r0, #2
 800766e:	3302      	addeq	r3, #2
 8007670:	2800      	cmp	r0, #0
 8007672:	db05      	blt.n	8007680 <__hi0bits+0x38>
 8007674:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007678:	f103 0301 	add.w	r3, r3, #1
 800767c:	bf08      	it	eq
 800767e:	2320      	moveq	r3, #32
 8007680:	4618      	mov	r0, r3
 8007682:	4770      	bx	lr
 8007684:	2300      	movs	r3, #0
 8007686:	e7e4      	b.n	8007652 <__hi0bits+0xa>

08007688 <__lo0bits>:
 8007688:	6803      	ldr	r3, [r0, #0]
 800768a:	f013 0207 	ands.w	r2, r3, #7
 800768e:	4601      	mov	r1, r0
 8007690:	d00b      	beq.n	80076aa <__lo0bits+0x22>
 8007692:	07da      	lsls	r2, r3, #31
 8007694:	d423      	bmi.n	80076de <__lo0bits+0x56>
 8007696:	0798      	lsls	r0, r3, #30
 8007698:	bf49      	itett	mi
 800769a:	085b      	lsrmi	r3, r3, #1
 800769c:	089b      	lsrpl	r3, r3, #2
 800769e:	2001      	movmi	r0, #1
 80076a0:	600b      	strmi	r3, [r1, #0]
 80076a2:	bf5c      	itt	pl
 80076a4:	600b      	strpl	r3, [r1, #0]
 80076a6:	2002      	movpl	r0, #2
 80076a8:	4770      	bx	lr
 80076aa:	b298      	uxth	r0, r3
 80076ac:	b9a8      	cbnz	r0, 80076da <__lo0bits+0x52>
 80076ae:	0c1b      	lsrs	r3, r3, #16
 80076b0:	2010      	movs	r0, #16
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	b90a      	cbnz	r2, 80076ba <__lo0bits+0x32>
 80076b6:	3008      	adds	r0, #8
 80076b8:	0a1b      	lsrs	r3, r3, #8
 80076ba:	071a      	lsls	r2, r3, #28
 80076bc:	bf04      	itt	eq
 80076be:	091b      	lsreq	r3, r3, #4
 80076c0:	3004      	addeq	r0, #4
 80076c2:	079a      	lsls	r2, r3, #30
 80076c4:	bf04      	itt	eq
 80076c6:	089b      	lsreq	r3, r3, #2
 80076c8:	3002      	addeq	r0, #2
 80076ca:	07da      	lsls	r2, r3, #31
 80076cc:	d403      	bmi.n	80076d6 <__lo0bits+0x4e>
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	f100 0001 	add.w	r0, r0, #1
 80076d4:	d005      	beq.n	80076e2 <__lo0bits+0x5a>
 80076d6:	600b      	str	r3, [r1, #0]
 80076d8:	4770      	bx	lr
 80076da:	4610      	mov	r0, r2
 80076dc:	e7e9      	b.n	80076b2 <__lo0bits+0x2a>
 80076de:	2000      	movs	r0, #0
 80076e0:	4770      	bx	lr
 80076e2:	2020      	movs	r0, #32
 80076e4:	4770      	bx	lr
	...

080076e8 <__i2b>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	460c      	mov	r4, r1
 80076ec:	2101      	movs	r1, #1
 80076ee:	f7ff ff03 	bl	80074f8 <_Balloc>
 80076f2:	4602      	mov	r2, r0
 80076f4:	b928      	cbnz	r0, 8007702 <__i2b+0x1a>
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <__i2b+0x24>)
 80076f8:	4805      	ldr	r0, [pc, #20]	; (8007710 <__i2b+0x28>)
 80076fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076fe:	f000 fd7d 	bl	80081fc <__assert_func>
 8007702:	2301      	movs	r3, #1
 8007704:	6144      	str	r4, [r0, #20]
 8007706:	6103      	str	r3, [r0, #16]
 8007708:	bd10      	pop	{r4, pc}
 800770a:	bf00      	nop
 800770c:	08008583 	.word	0x08008583
 8007710:	080085f4 	.word	0x080085f4

08007714 <__multiply>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	4691      	mov	r9, r2
 800771a:	690a      	ldr	r2, [r1, #16]
 800771c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007720:	429a      	cmp	r2, r3
 8007722:	bfb8      	it	lt
 8007724:	460b      	movlt	r3, r1
 8007726:	460c      	mov	r4, r1
 8007728:	bfbc      	itt	lt
 800772a:	464c      	movlt	r4, r9
 800772c:	4699      	movlt	r9, r3
 800772e:	6927      	ldr	r7, [r4, #16]
 8007730:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007734:	68a3      	ldr	r3, [r4, #8]
 8007736:	6861      	ldr	r1, [r4, #4]
 8007738:	eb07 060a 	add.w	r6, r7, sl
 800773c:	42b3      	cmp	r3, r6
 800773e:	b085      	sub	sp, #20
 8007740:	bfb8      	it	lt
 8007742:	3101      	addlt	r1, #1
 8007744:	f7ff fed8 	bl	80074f8 <_Balloc>
 8007748:	b930      	cbnz	r0, 8007758 <__multiply+0x44>
 800774a:	4602      	mov	r2, r0
 800774c:	4b44      	ldr	r3, [pc, #272]	; (8007860 <__multiply+0x14c>)
 800774e:	4845      	ldr	r0, [pc, #276]	; (8007864 <__multiply+0x150>)
 8007750:	f240 115d 	movw	r1, #349	; 0x15d
 8007754:	f000 fd52 	bl	80081fc <__assert_func>
 8007758:	f100 0514 	add.w	r5, r0, #20
 800775c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007760:	462b      	mov	r3, r5
 8007762:	2200      	movs	r2, #0
 8007764:	4543      	cmp	r3, r8
 8007766:	d321      	bcc.n	80077ac <__multiply+0x98>
 8007768:	f104 0314 	add.w	r3, r4, #20
 800776c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007770:	f109 0314 	add.w	r3, r9, #20
 8007774:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007778:	9202      	str	r2, [sp, #8]
 800777a:	1b3a      	subs	r2, r7, r4
 800777c:	3a15      	subs	r2, #21
 800777e:	f022 0203 	bic.w	r2, r2, #3
 8007782:	3204      	adds	r2, #4
 8007784:	f104 0115 	add.w	r1, r4, #21
 8007788:	428f      	cmp	r7, r1
 800778a:	bf38      	it	cc
 800778c:	2204      	movcc	r2, #4
 800778e:	9201      	str	r2, [sp, #4]
 8007790:	9a02      	ldr	r2, [sp, #8]
 8007792:	9303      	str	r3, [sp, #12]
 8007794:	429a      	cmp	r2, r3
 8007796:	d80c      	bhi.n	80077b2 <__multiply+0x9e>
 8007798:	2e00      	cmp	r6, #0
 800779a:	dd03      	ble.n	80077a4 <__multiply+0x90>
 800779c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d05a      	beq.n	800785a <__multiply+0x146>
 80077a4:	6106      	str	r6, [r0, #16]
 80077a6:	b005      	add	sp, #20
 80077a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ac:	f843 2b04 	str.w	r2, [r3], #4
 80077b0:	e7d8      	b.n	8007764 <__multiply+0x50>
 80077b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80077b6:	f1ba 0f00 	cmp.w	sl, #0
 80077ba:	d024      	beq.n	8007806 <__multiply+0xf2>
 80077bc:	f104 0e14 	add.w	lr, r4, #20
 80077c0:	46a9      	mov	r9, r5
 80077c2:	f04f 0c00 	mov.w	ip, #0
 80077c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077ca:	f8d9 1000 	ldr.w	r1, [r9]
 80077ce:	fa1f fb82 	uxth.w	fp, r2
 80077d2:	b289      	uxth	r1, r1
 80077d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80077d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80077dc:	f8d9 2000 	ldr.w	r2, [r9]
 80077e0:	4461      	add	r1, ip
 80077e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80077ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077ee:	b289      	uxth	r1, r1
 80077f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077f4:	4577      	cmp	r7, lr
 80077f6:	f849 1b04 	str.w	r1, [r9], #4
 80077fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077fe:	d8e2      	bhi.n	80077c6 <__multiply+0xb2>
 8007800:	9a01      	ldr	r2, [sp, #4]
 8007802:	f845 c002 	str.w	ip, [r5, r2]
 8007806:	9a03      	ldr	r2, [sp, #12]
 8007808:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800780c:	3304      	adds	r3, #4
 800780e:	f1b9 0f00 	cmp.w	r9, #0
 8007812:	d020      	beq.n	8007856 <__multiply+0x142>
 8007814:	6829      	ldr	r1, [r5, #0]
 8007816:	f104 0c14 	add.w	ip, r4, #20
 800781a:	46ae      	mov	lr, r5
 800781c:	f04f 0a00 	mov.w	sl, #0
 8007820:	f8bc b000 	ldrh.w	fp, [ip]
 8007824:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007828:	fb09 220b 	mla	r2, r9, fp, r2
 800782c:	4492      	add	sl, r2
 800782e:	b289      	uxth	r1, r1
 8007830:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007834:	f84e 1b04 	str.w	r1, [lr], #4
 8007838:	f85c 2b04 	ldr.w	r2, [ip], #4
 800783c:	f8be 1000 	ldrh.w	r1, [lr]
 8007840:	0c12      	lsrs	r2, r2, #16
 8007842:	fb09 1102 	mla	r1, r9, r2, r1
 8007846:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800784a:	4567      	cmp	r7, ip
 800784c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007850:	d8e6      	bhi.n	8007820 <__multiply+0x10c>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	50a9      	str	r1, [r5, r2]
 8007856:	3504      	adds	r5, #4
 8007858:	e79a      	b.n	8007790 <__multiply+0x7c>
 800785a:	3e01      	subs	r6, #1
 800785c:	e79c      	b.n	8007798 <__multiply+0x84>
 800785e:	bf00      	nop
 8007860:	08008583 	.word	0x08008583
 8007864:	080085f4 	.word	0x080085f4

08007868 <__pow5mult>:
 8007868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800786c:	4615      	mov	r5, r2
 800786e:	f012 0203 	ands.w	r2, r2, #3
 8007872:	4606      	mov	r6, r0
 8007874:	460f      	mov	r7, r1
 8007876:	d007      	beq.n	8007888 <__pow5mult+0x20>
 8007878:	4c25      	ldr	r4, [pc, #148]	; (8007910 <__pow5mult+0xa8>)
 800787a:	3a01      	subs	r2, #1
 800787c:	2300      	movs	r3, #0
 800787e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007882:	f7ff fe9b 	bl	80075bc <__multadd>
 8007886:	4607      	mov	r7, r0
 8007888:	10ad      	asrs	r5, r5, #2
 800788a:	d03d      	beq.n	8007908 <__pow5mult+0xa0>
 800788c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800788e:	b97c      	cbnz	r4, 80078b0 <__pow5mult+0x48>
 8007890:	2010      	movs	r0, #16
 8007892:	f7ff fe1b 	bl	80074cc <malloc>
 8007896:	4602      	mov	r2, r0
 8007898:	6270      	str	r0, [r6, #36]	; 0x24
 800789a:	b928      	cbnz	r0, 80078a8 <__pow5mult+0x40>
 800789c:	4b1d      	ldr	r3, [pc, #116]	; (8007914 <__pow5mult+0xac>)
 800789e:	481e      	ldr	r0, [pc, #120]	; (8007918 <__pow5mult+0xb0>)
 80078a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078a4:	f000 fcaa 	bl	80081fc <__assert_func>
 80078a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078ac:	6004      	str	r4, [r0, #0]
 80078ae:	60c4      	str	r4, [r0, #12]
 80078b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078b8:	b94c      	cbnz	r4, 80078ce <__pow5mult+0x66>
 80078ba:	f240 2171 	movw	r1, #625	; 0x271
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff ff12 	bl	80076e8 <__i2b>
 80078c4:	2300      	movs	r3, #0
 80078c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078ca:	4604      	mov	r4, r0
 80078cc:	6003      	str	r3, [r0, #0]
 80078ce:	f04f 0900 	mov.w	r9, #0
 80078d2:	07eb      	lsls	r3, r5, #31
 80078d4:	d50a      	bpl.n	80078ec <__pow5mult+0x84>
 80078d6:	4639      	mov	r1, r7
 80078d8:	4622      	mov	r2, r4
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ff1a 	bl	8007714 <__multiply>
 80078e0:	4639      	mov	r1, r7
 80078e2:	4680      	mov	r8, r0
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff fe47 	bl	8007578 <_Bfree>
 80078ea:	4647      	mov	r7, r8
 80078ec:	106d      	asrs	r5, r5, #1
 80078ee:	d00b      	beq.n	8007908 <__pow5mult+0xa0>
 80078f0:	6820      	ldr	r0, [r4, #0]
 80078f2:	b938      	cbnz	r0, 8007904 <__pow5mult+0x9c>
 80078f4:	4622      	mov	r2, r4
 80078f6:	4621      	mov	r1, r4
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7ff ff0b 	bl	8007714 <__multiply>
 80078fe:	6020      	str	r0, [r4, #0]
 8007900:	f8c0 9000 	str.w	r9, [r0]
 8007904:	4604      	mov	r4, r0
 8007906:	e7e4      	b.n	80078d2 <__pow5mult+0x6a>
 8007908:	4638      	mov	r0, r7
 800790a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790e:	bf00      	nop
 8007910:	08008740 	.word	0x08008740
 8007914:	08008511 	.word	0x08008511
 8007918:	080085f4 	.word	0x080085f4

0800791c <__lshift>:
 800791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	460c      	mov	r4, r1
 8007922:	6849      	ldr	r1, [r1, #4]
 8007924:	6923      	ldr	r3, [r4, #16]
 8007926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	4607      	mov	r7, r0
 800792e:	4691      	mov	r9, r2
 8007930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007934:	f108 0601 	add.w	r6, r8, #1
 8007938:	42b3      	cmp	r3, r6
 800793a:	db0b      	blt.n	8007954 <__lshift+0x38>
 800793c:	4638      	mov	r0, r7
 800793e:	f7ff fddb 	bl	80074f8 <_Balloc>
 8007942:	4605      	mov	r5, r0
 8007944:	b948      	cbnz	r0, 800795a <__lshift+0x3e>
 8007946:	4602      	mov	r2, r0
 8007948:	4b2a      	ldr	r3, [pc, #168]	; (80079f4 <__lshift+0xd8>)
 800794a:	482b      	ldr	r0, [pc, #172]	; (80079f8 <__lshift+0xdc>)
 800794c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007950:	f000 fc54 	bl	80081fc <__assert_func>
 8007954:	3101      	adds	r1, #1
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	e7ee      	b.n	8007938 <__lshift+0x1c>
 800795a:	2300      	movs	r3, #0
 800795c:	f100 0114 	add.w	r1, r0, #20
 8007960:	f100 0210 	add.w	r2, r0, #16
 8007964:	4618      	mov	r0, r3
 8007966:	4553      	cmp	r3, sl
 8007968:	db37      	blt.n	80079da <__lshift+0xbe>
 800796a:	6920      	ldr	r0, [r4, #16]
 800796c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007970:	f104 0314 	add.w	r3, r4, #20
 8007974:	f019 091f 	ands.w	r9, r9, #31
 8007978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800797c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007980:	d02f      	beq.n	80079e2 <__lshift+0xc6>
 8007982:	f1c9 0e20 	rsb	lr, r9, #32
 8007986:	468a      	mov	sl, r1
 8007988:	f04f 0c00 	mov.w	ip, #0
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	fa02 f209 	lsl.w	r2, r2, r9
 8007992:	ea42 020c 	orr.w	r2, r2, ip
 8007996:	f84a 2b04 	str.w	r2, [sl], #4
 800799a:	f853 2b04 	ldr.w	r2, [r3], #4
 800799e:	4298      	cmp	r0, r3
 80079a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079a4:	d8f2      	bhi.n	800798c <__lshift+0x70>
 80079a6:	1b03      	subs	r3, r0, r4
 80079a8:	3b15      	subs	r3, #21
 80079aa:	f023 0303 	bic.w	r3, r3, #3
 80079ae:	3304      	adds	r3, #4
 80079b0:	f104 0215 	add.w	r2, r4, #21
 80079b4:	4290      	cmp	r0, r2
 80079b6:	bf38      	it	cc
 80079b8:	2304      	movcc	r3, #4
 80079ba:	f841 c003 	str.w	ip, [r1, r3]
 80079be:	f1bc 0f00 	cmp.w	ip, #0
 80079c2:	d001      	beq.n	80079c8 <__lshift+0xac>
 80079c4:	f108 0602 	add.w	r6, r8, #2
 80079c8:	3e01      	subs	r6, #1
 80079ca:	4638      	mov	r0, r7
 80079cc:	612e      	str	r6, [r5, #16]
 80079ce:	4621      	mov	r1, r4
 80079d0:	f7ff fdd2 	bl	8007578 <_Bfree>
 80079d4:	4628      	mov	r0, r5
 80079d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079da:	f842 0f04 	str.w	r0, [r2, #4]!
 80079de:	3301      	adds	r3, #1
 80079e0:	e7c1      	b.n	8007966 <__lshift+0x4a>
 80079e2:	3904      	subs	r1, #4
 80079e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ec:	4298      	cmp	r0, r3
 80079ee:	d8f9      	bhi.n	80079e4 <__lshift+0xc8>
 80079f0:	e7ea      	b.n	80079c8 <__lshift+0xac>
 80079f2:	bf00      	nop
 80079f4:	08008583 	.word	0x08008583
 80079f8:	080085f4 	.word	0x080085f4

080079fc <__mcmp>:
 80079fc:	b530      	push	{r4, r5, lr}
 80079fe:	6902      	ldr	r2, [r0, #16]
 8007a00:	690c      	ldr	r4, [r1, #16]
 8007a02:	1b12      	subs	r2, r2, r4
 8007a04:	d10e      	bne.n	8007a24 <__mcmp+0x28>
 8007a06:	f100 0314 	add.w	r3, r0, #20
 8007a0a:	3114      	adds	r1, #20
 8007a0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a1c:	42a5      	cmp	r5, r4
 8007a1e:	d003      	beq.n	8007a28 <__mcmp+0x2c>
 8007a20:	d305      	bcc.n	8007a2e <__mcmp+0x32>
 8007a22:	2201      	movs	r2, #1
 8007a24:	4610      	mov	r0, r2
 8007a26:	bd30      	pop	{r4, r5, pc}
 8007a28:	4283      	cmp	r3, r0
 8007a2a:	d3f3      	bcc.n	8007a14 <__mcmp+0x18>
 8007a2c:	e7fa      	b.n	8007a24 <__mcmp+0x28>
 8007a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a32:	e7f7      	b.n	8007a24 <__mcmp+0x28>

08007a34 <__mdiff>:
 8007a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	460c      	mov	r4, r1
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4690      	mov	r8, r2
 8007a42:	f7ff ffdb 	bl	80079fc <__mcmp>
 8007a46:	1e05      	subs	r5, r0, #0
 8007a48:	d110      	bne.n	8007a6c <__mdiff+0x38>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f7ff fd53 	bl	80074f8 <_Balloc>
 8007a52:	b930      	cbnz	r0, 8007a62 <__mdiff+0x2e>
 8007a54:	4b3a      	ldr	r3, [pc, #232]	; (8007b40 <__mdiff+0x10c>)
 8007a56:	4602      	mov	r2, r0
 8007a58:	f240 2132 	movw	r1, #562	; 0x232
 8007a5c:	4839      	ldr	r0, [pc, #228]	; (8007b44 <__mdiff+0x110>)
 8007a5e:	f000 fbcd 	bl	80081fc <__assert_func>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	bfa4      	itt	ge
 8007a6e:	4643      	movge	r3, r8
 8007a70:	46a0      	movge	r8, r4
 8007a72:	4630      	mov	r0, r6
 8007a74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a78:	bfa6      	itte	ge
 8007a7a:	461c      	movge	r4, r3
 8007a7c:	2500      	movge	r5, #0
 8007a7e:	2501      	movlt	r5, #1
 8007a80:	f7ff fd3a 	bl	80074f8 <_Balloc>
 8007a84:	b920      	cbnz	r0, 8007a90 <__mdiff+0x5c>
 8007a86:	4b2e      	ldr	r3, [pc, #184]	; (8007b40 <__mdiff+0x10c>)
 8007a88:	4602      	mov	r2, r0
 8007a8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a8e:	e7e5      	b.n	8007a5c <__mdiff+0x28>
 8007a90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a94:	6926      	ldr	r6, [r4, #16]
 8007a96:	60c5      	str	r5, [r0, #12]
 8007a98:	f104 0914 	add.w	r9, r4, #20
 8007a9c:	f108 0514 	add.w	r5, r8, #20
 8007aa0:	f100 0e14 	add.w	lr, r0, #20
 8007aa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007aa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007aac:	f108 0210 	add.w	r2, r8, #16
 8007ab0:	46f2      	mov	sl, lr
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007abc:	fa1f f883 	uxth.w	r8, r3
 8007ac0:	fa11 f18b 	uxtah	r1, r1, fp
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	eba1 0808 	sub.w	r8, r1, r8
 8007aca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ad2:	fa1f f888 	uxth.w	r8, r8
 8007ad6:	1419      	asrs	r1, r3, #16
 8007ad8:	454e      	cmp	r6, r9
 8007ada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ade:	f84a 3b04 	str.w	r3, [sl], #4
 8007ae2:	d8e7      	bhi.n	8007ab4 <__mdiff+0x80>
 8007ae4:	1b33      	subs	r3, r6, r4
 8007ae6:	3b15      	subs	r3, #21
 8007ae8:	f023 0303 	bic.w	r3, r3, #3
 8007aec:	3304      	adds	r3, #4
 8007aee:	3415      	adds	r4, #21
 8007af0:	42a6      	cmp	r6, r4
 8007af2:	bf38      	it	cc
 8007af4:	2304      	movcc	r3, #4
 8007af6:	441d      	add	r5, r3
 8007af8:	4473      	add	r3, lr
 8007afa:	469e      	mov	lr, r3
 8007afc:	462e      	mov	r6, r5
 8007afe:	4566      	cmp	r6, ip
 8007b00:	d30e      	bcc.n	8007b20 <__mdiff+0xec>
 8007b02:	f10c 0203 	add.w	r2, ip, #3
 8007b06:	1b52      	subs	r2, r2, r5
 8007b08:	f022 0203 	bic.w	r2, r2, #3
 8007b0c:	3d03      	subs	r5, #3
 8007b0e:	45ac      	cmp	ip, r5
 8007b10:	bf38      	it	cc
 8007b12:	2200      	movcc	r2, #0
 8007b14:	441a      	add	r2, r3
 8007b16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b1a:	b17b      	cbz	r3, 8007b3c <__mdiff+0x108>
 8007b1c:	6107      	str	r7, [r0, #16]
 8007b1e:	e7a3      	b.n	8007a68 <__mdiff+0x34>
 8007b20:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b24:	fa11 f288 	uxtah	r2, r1, r8
 8007b28:	1414      	asrs	r4, r2, #16
 8007b2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b2e:	b292      	uxth	r2, r2
 8007b30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b34:	f84e 2b04 	str.w	r2, [lr], #4
 8007b38:	1421      	asrs	r1, r4, #16
 8007b3a:	e7e0      	b.n	8007afe <__mdiff+0xca>
 8007b3c:	3f01      	subs	r7, #1
 8007b3e:	e7ea      	b.n	8007b16 <__mdiff+0xe2>
 8007b40:	08008583 	.word	0x08008583
 8007b44:	080085f4 	.word	0x080085f4

08007b48 <__d2b>:
 8007b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b4c:	4689      	mov	r9, r1
 8007b4e:	2101      	movs	r1, #1
 8007b50:	ec57 6b10 	vmov	r6, r7, d0
 8007b54:	4690      	mov	r8, r2
 8007b56:	f7ff fccf 	bl	80074f8 <_Balloc>
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	b930      	cbnz	r0, 8007b6c <__d2b+0x24>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	4b25      	ldr	r3, [pc, #148]	; (8007bf8 <__d2b+0xb0>)
 8007b62:	4826      	ldr	r0, [pc, #152]	; (8007bfc <__d2b+0xb4>)
 8007b64:	f240 310a 	movw	r1, #778	; 0x30a
 8007b68:	f000 fb48 	bl	80081fc <__assert_func>
 8007b6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b74:	bb35      	cbnz	r5, 8007bc4 <__d2b+0x7c>
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	d028      	beq.n	8007bce <__d2b+0x86>
 8007b7c:	4668      	mov	r0, sp
 8007b7e:	9600      	str	r6, [sp, #0]
 8007b80:	f7ff fd82 	bl	8007688 <__lo0bits>
 8007b84:	9900      	ldr	r1, [sp, #0]
 8007b86:	b300      	cbz	r0, 8007bca <__d2b+0x82>
 8007b88:	9a01      	ldr	r2, [sp, #4]
 8007b8a:	f1c0 0320 	rsb	r3, r0, #32
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	430b      	orrs	r3, r1
 8007b94:	40c2      	lsrs	r2, r0
 8007b96:	6163      	str	r3, [r4, #20]
 8007b98:	9201      	str	r2, [sp, #4]
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	61a3      	str	r3, [r4, #24]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf14      	ite	ne
 8007ba2:	2202      	movne	r2, #2
 8007ba4:	2201      	moveq	r2, #1
 8007ba6:	6122      	str	r2, [r4, #16]
 8007ba8:	b1d5      	cbz	r5, 8007be0 <__d2b+0x98>
 8007baa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bae:	4405      	add	r5, r0
 8007bb0:	f8c9 5000 	str.w	r5, [r9]
 8007bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bb8:	f8c8 0000 	str.w	r0, [r8]
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	b003      	add	sp, #12
 8007bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bc8:	e7d5      	b.n	8007b76 <__d2b+0x2e>
 8007bca:	6161      	str	r1, [r4, #20]
 8007bcc:	e7e5      	b.n	8007b9a <__d2b+0x52>
 8007bce:	a801      	add	r0, sp, #4
 8007bd0:	f7ff fd5a 	bl	8007688 <__lo0bits>
 8007bd4:	9b01      	ldr	r3, [sp, #4]
 8007bd6:	6163      	str	r3, [r4, #20]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	6122      	str	r2, [r4, #16]
 8007bdc:	3020      	adds	r0, #32
 8007bde:	e7e3      	b.n	8007ba8 <__d2b+0x60>
 8007be0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007be8:	f8c9 0000 	str.w	r0, [r9]
 8007bec:	6918      	ldr	r0, [r3, #16]
 8007bee:	f7ff fd2b 	bl	8007648 <__hi0bits>
 8007bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bf6:	e7df      	b.n	8007bb8 <__d2b+0x70>
 8007bf8:	08008583 	.word	0x08008583
 8007bfc:	080085f4 	.word	0x080085f4

08007c00 <_calloc_r>:
 8007c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c02:	fba1 2402 	umull	r2, r4, r1, r2
 8007c06:	b94c      	cbnz	r4, 8007c1c <_calloc_r+0x1c>
 8007c08:	4611      	mov	r1, r2
 8007c0a:	9201      	str	r2, [sp, #4]
 8007c0c:	f000 f87a 	bl	8007d04 <_malloc_r>
 8007c10:	9a01      	ldr	r2, [sp, #4]
 8007c12:	4605      	mov	r5, r0
 8007c14:	b930      	cbnz	r0, 8007c24 <_calloc_r+0x24>
 8007c16:	4628      	mov	r0, r5
 8007c18:	b003      	add	sp, #12
 8007c1a:	bd30      	pop	{r4, r5, pc}
 8007c1c:	220c      	movs	r2, #12
 8007c1e:	6002      	str	r2, [r0, #0]
 8007c20:	2500      	movs	r5, #0
 8007c22:	e7f8      	b.n	8007c16 <_calloc_r+0x16>
 8007c24:	4621      	mov	r1, r4
 8007c26:	f7fd fddb 	bl	80057e0 <memset>
 8007c2a:	e7f4      	b.n	8007c16 <_calloc_r+0x16>

08007c2c <_free_r>:
 8007c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	d044      	beq.n	8007cbc <_free_r+0x90>
 8007c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c36:	9001      	str	r0, [sp, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c3e:	bfb8      	it	lt
 8007c40:	18e4      	addlt	r4, r4, r3
 8007c42:	f000 fb61 	bl	8008308 <__malloc_lock>
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <_free_r+0x94>)
 8007c48:	9801      	ldr	r0, [sp, #4]
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	b933      	cbnz	r3, 8007c5c <_free_r+0x30>
 8007c4e:	6063      	str	r3, [r4, #4]
 8007c50:	6014      	str	r4, [r2, #0]
 8007c52:	b003      	add	sp, #12
 8007c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c58:	f000 bb5c 	b.w	8008314 <__malloc_unlock>
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	d908      	bls.n	8007c72 <_free_r+0x46>
 8007c60:	6825      	ldr	r5, [r4, #0]
 8007c62:	1961      	adds	r1, r4, r5
 8007c64:	428b      	cmp	r3, r1
 8007c66:	bf01      	itttt	eq
 8007c68:	6819      	ldreq	r1, [r3, #0]
 8007c6a:	685b      	ldreq	r3, [r3, #4]
 8007c6c:	1949      	addeq	r1, r1, r5
 8007c6e:	6021      	streq	r1, [r4, #0]
 8007c70:	e7ed      	b.n	8007c4e <_free_r+0x22>
 8007c72:	461a      	mov	r2, r3
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	b10b      	cbz	r3, 8007c7c <_free_r+0x50>
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	d9fa      	bls.n	8007c72 <_free_r+0x46>
 8007c7c:	6811      	ldr	r1, [r2, #0]
 8007c7e:	1855      	adds	r5, r2, r1
 8007c80:	42a5      	cmp	r5, r4
 8007c82:	d10b      	bne.n	8007c9c <_free_r+0x70>
 8007c84:	6824      	ldr	r4, [r4, #0]
 8007c86:	4421      	add	r1, r4
 8007c88:	1854      	adds	r4, r2, r1
 8007c8a:	42a3      	cmp	r3, r4
 8007c8c:	6011      	str	r1, [r2, #0]
 8007c8e:	d1e0      	bne.n	8007c52 <_free_r+0x26>
 8007c90:	681c      	ldr	r4, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	6053      	str	r3, [r2, #4]
 8007c96:	4421      	add	r1, r4
 8007c98:	6011      	str	r1, [r2, #0]
 8007c9a:	e7da      	b.n	8007c52 <_free_r+0x26>
 8007c9c:	d902      	bls.n	8007ca4 <_free_r+0x78>
 8007c9e:	230c      	movs	r3, #12
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	e7d6      	b.n	8007c52 <_free_r+0x26>
 8007ca4:	6825      	ldr	r5, [r4, #0]
 8007ca6:	1961      	adds	r1, r4, r5
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	bf04      	itt	eq
 8007cac:	6819      	ldreq	r1, [r3, #0]
 8007cae:	685b      	ldreq	r3, [r3, #4]
 8007cb0:	6063      	str	r3, [r4, #4]
 8007cb2:	bf04      	itt	eq
 8007cb4:	1949      	addeq	r1, r1, r5
 8007cb6:	6021      	streq	r1, [r4, #0]
 8007cb8:	6054      	str	r4, [r2, #4]
 8007cba:	e7ca      	b.n	8007c52 <_free_r+0x26>
 8007cbc:	b003      	add	sp, #12
 8007cbe:	bd30      	pop	{r4, r5, pc}
 8007cc0:	20000440 	.word	0x20000440

08007cc4 <sbrk_aligned>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4e0e      	ldr	r6, [pc, #56]	; (8007d00 <sbrk_aligned+0x3c>)
 8007cc8:	460c      	mov	r4, r1
 8007cca:	6831      	ldr	r1, [r6, #0]
 8007ccc:	4605      	mov	r5, r0
 8007cce:	b911      	cbnz	r1, 8007cd6 <sbrk_aligned+0x12>
 8007cd0:	f000 fa2e 	bl	8008130 <_sbrk_r>
 8007cd4:	6030      	str	r0, [r6, #0]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 fa29 	bl	8008130 <_sbrk_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d00a      	beq.n	8007cf8 <sbrk_aligned+0x34>
 8007ce2:	1cc4      	adds	r4, r0, #3
 8007ce4:	f024 0403 	bic.w	r4, r4, #3
 8007ce8:	42a0      	cmp	r0, r4
 8007cea:	d007      	beq.n	8007cfc <sbrk_aligned+0x38>
 8007cec:	1a21      	subs	r1, r4, r0
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 fa1e 	bl	8008130 <_sbrk_r>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d101      	bne.n	8007cfc <sbrk_aligned+0x38>
 8007cf8:	f04f 34ff 	mov.w	r4, #4294967295
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	20000444 	.word	0x20000444

08007d04 <_malloc_r>:
 8007d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d08:	1ccd      	adds	r5, r1, #3
 8007d0a:	f025 0503 	bic.w	r5, r5, #3
 8007d0e:	3508      	adds	r5, #8
 8007d10:	2d0c      	cmp	r5, #12
 8007d12:	bf38      	it	cc
 8007d14:	250c      	movcc	r5, #12
 8007d16:	2d00      	cmp	r5, #0
 8007d18:	4607      	mov	r7, r0
 8007d1a:	db01      	blt.n	8007d20 <_malloc_r+0x1c>
 8007d1c:	42a9      	cmp	r1, r5
 8007d1e:	d905      	bls.n	8007d2c <_malloc_r+0x28>
 8007d20:	230c      	movs	r3, #12
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	2600      	movs	r6, #0
 8007d26:	4630      	mov	r0, r6
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	4e2e      	ldr	r6, [pc, #184]	; (8007de8 <_malloc_r+0xe4>)
 8007d2e:	f000 faeb 	bl	8008308 <__malloc_lock>
 8007d32:	6833      	ldr	r3, [r6, #0]
 8007d34:	461c      	mov	r4, r3
 8007d36:	bb34      	cbnz	r4, 8007d86 <_malloc_r+0x82>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7ff ffc2 	bl	8007cc4 <sbrk_aligned>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	4604      	mov	r4, r0
 8007d44:	d14d      	bne.n	8007de2 <_malloc_r+0xde>
 8007d46:	6834      	ldr	r4, [r6, #0]
 8007d48:	4626      	mov	r6, r4
 8007d4a:	2e00      	cmp	r6, #0
 8007d4c:	d140      	bne.n	8007dd0 <_malloc_r+0xcc>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	4631      	mov	r1, r6
 8007d52:	4638      	mov	r0, r7
 8007d54:	eb04 0803 	add.w	r8, r4, r3
 8007d58:	f000 f9ea 	bl	8008130 <_sbrk_r>
 8007d5c:	4580      	cmp	r8, r0
 8007d5e:	d13a      	bne.n	8007dd6 <_malloc_r+0xd2>
 8007d60:	6821      	ldr	r1, [r4, #0]
 8007d62:	3503      	adds	r5, #3
 8007d64:	1a6d      	subs	r5, r5, r1
 8007d66:	f025 0503 	bic.w	r5, r5, #3
 8007d6a:	3508      	adds	r5, #8
 8007d6c:	2d0c      	cmp	r5, #12
 8007d6e:	bf38      	it	cc
 8007d70:	250c      	movcc	r5, #12
 8007d72:	4629      	mov	r1, r5
 8007d74:	4638      	mov	r0, r7
 8007d76:	f7ff ffa5 	bl	8007cc4 <sbrk_aligned>
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d02b      	beq.n	8007dd6 <_malloc_r+0xd2>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	442b      	add	r3, r5
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	e00e      	b.n	8007da4 <_malloc_r+0xa0>
 8007d86:	6822      	ldr	r2, [r4, #0]
 8007d88:	1b52      	subs	r2, r2, r5
 8007d8a:	d41e      	bmi.n	8007dca <_malloc_r+0xc6>
 8007d8c:	2a0b      	cmp	r2, #11
 8007d8e:	d916      	bls.n	8007dbe <_malloc_r+0xba>
 8007d90:	1961      	adds	r1, r4, r5
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	6025      	str	r5, [r4, #0]
 8007d96:	bf18      	it	ne
 8007d98:	6059      	strne	r1, [r3, #4]
 8007d9a:	6863      	ldr	r3, [r4, #4]
 8007d9c:	bf08      	it	eq
 8007d9e:	6031      	streq	r1, [r6, #0]
 8007da0:	5162      	str	r2, [r4, r5]
 8007da2:	604b      	str	r3, [r1, #4]
 8007da4:	4638      	mov	r0, r7
 8007da6:	f104 060b 	add.w	r6, r4, #11
 8007daa:	f000 fab3 	bl	8008314 <__malloc_unlock>
 8007dae:	f026 0607 	bic.w	r6, r6, #7
 8007db2:	1d23      	adds	r3, r4, #4
 8007db4:	1af2      	subs	r2, r6, r3
 8007db6:	d0b6      	beq.n	8007d26 <_malloc_r+0x22>
 8007db8:	1b9b      	subs	r3, r3, r6
 8007dba:	50a3      	str	r3, [r4, r2]
 8007dbc:	e7b3      	b.n	8007d26 <_malloc_r+0x22>
 8007dbe:	6862      	ldr	r2, [r4, #4]
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	bf0c      	ite	eq
 8007dc4:	6032      	streq	r2, [r6, #0]
 8007dc6:	605a      	strne	r2, [r3, #4]
 8007dc8:	e7ec      	b.n	8007da4 <_malloc_r+0xa0>
 8007dca:	4623      	mov	r3, r4
 8007dcc:	6864      	ldr	r4, [r4, #4]
 8007dce:	e7b2      	b.n	8007d36 <_malloc_r+0x32>
 8007dd0:	4634      	mov	r4, r6
 8007dd2:	6876      	ldr	r6, [r6, #4]
 8007dd4:	e7b9      	b.n	8007d4a <_malloc_r+0x46>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	4638      	mov	r0, r7
 8007ddc:	f000 fa9a 	bl	8008314 <__malloc_unlock>
 8007de0:	e7a1      	b.n	8007d26 <_malloc_r+0x22>
 8007de2:	6025      	str	r5, [r4, #0]
 8007de4:	e7de      	b.n	8007da4 <_malloc_r+0xa0>
 8007de6:	bf00      	nop
 8007de8:	20000440 	.word	0x20000440

08007dec <__sfputc_r>:
 8007dec:	6893      	ldr	r3, [r2, #8]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	b410      	push	{r4}
 8007df4:	6093      	str	r3, [r2, #8]
 8007df6:	da08      	bge.n	8007e0a <__sfputc_r+0x1e>
 8007df8:	6994      	ldr	r4, [r2, #24]
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	db01      	blt.n	8007e02 <__sfputc_r+0x16>
 8007dfe:	290a      	cmp	r1, #10
 8007e00:	d103      	bne.n	8007e0a <__sfputc_r+0x1e>
 8007e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e06:	f7fe ba01 	b.w	800620c <__swbuf_r>
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	1c58      	adds	r0, r3, #1
 8007e0e:	6010      	str	r0, [r2, #0]
 8007e10:	7019      	strb	r1, [r3, #0]
 8007e12:	4608      	mov	r0, r1
 8007e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <__sfputs_r>:
 8007e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	18d5      	adds	r5, r2, r3
 8007e24:	42ac      	cmp	r4, r5
 8007e26:	d101      	bne.n	8007e2c <__sfputs_r+0x12>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e007      	b.n	8007e3c <__sfputs_r+0x22>
 8007e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e30:	463a      	mov	r2, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff ffda 	bl	8007dec <__sfputc_r>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d1f3      	bne.n	8007e24 <__sfputs_r+0xa>
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e40 <_vfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	460d      	mov	r5, r1
 8007e46:	b09d      	sub	sp, #116	; 0x74
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4698      	mov	r8, r3
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	b118      	cbz	r0, 8007e58 <_vfiprintf_r+0x18>
 8007e50:	6983      	ldr	r3, [r0, #24]
 8007e52:	b90b      	cbnz	r3, 8007e58 <_vfiprintf_r+0x18>
 8007e54:	f7ff fa30 	bl	80072b8 <__sinit>
 8007e58:	4b89      	ldr	r3, [pc, #548]	; (8008080 <_vfiprintf_r+0x240>)
 8007e5a:	429d      	cmp	r5, r3
 8007e5c:	d11b      	bne.n	8007e96 <_vfiprintf_r+0x56>
 8007e5e:	6875      	ldr	r5, [r6, #4]
 8007e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e62:	07d9      	lsls	r1, r3, #31
 8007e64:	d405      	bmi.n	8007e72 <_vfiprintf_r+0x32>
 8007e66:	89ab      	ldrh	r3, [r5, #12]
 8007e68:	059a      	lsls	r2, r3, #22
 8007e6a:	d402      	bmi.n	8007e72 <_vfiprintf_r+0x32>
 8007e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e6e:	f7ff fac6 	bl	80073fe <__retarget_lock_acquire_recursive>
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	071b      	lsls	r3, r3, #28
 8007e76:	d501      	bpl.n	8007e7c <_vfiprintf_r+0x3c>
 8007e78:	692b      	ldr	r3, [r5, #16]
 8007e7a:	b9eb      	cbnz	r3, 8007eb8 <_vfiprintf_r+0x78>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7fe fa16 	bl	80062b0 <__swsetup_r>
 8007e84:	b1c0      	cbz	r0, 8007eb8 <_vfiprintf_r+0x78>
 8007e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e88:	07dc      	lsls	r4, r3, #31
 8007e8a:	d50e      	bpl.n	8007eaa <_vfiprintf_r+0x6a>
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	b01d      	add	sp, #116	; 0x74
 8007e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e96:	4b7b      	ldr	r3, [pc, #492]	; (8008084 <_vfiprintf_r+0x244>)
 8007e98:	429d      	cmp	r5, r3
 8007e9a:	d101      	bne.n	8007ea0 <_vfiprintf_r+0x60>
 8007e9c:	68b5      	ldr	r5, [r6, #8]
 8007e9e:	e7df      	b.n	8007e60 <_vfiprintf_r+0x20>
 8007ea0:	4b79      	ldr	r3, [pc, #484]	; (8008088 <_vfiprintf_r+0x248>)
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	bf08      	it	eq
 8007ea6:	68f5      	ldreq	r5, [r6, #12]
 8007ea8:	e7da      	b.n	8007e60 <_vfiprintf_r+0x20>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	0598      	lsls	r0, r3, #22
 8007eae:	d4ed      	bmi.n	8007e8c <_vfiprintf_r+0x4c>
 8007eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eb2:	f7ff faa5 	bl	8007400 <__retarget_lock_release_recursive>
 8007eb6:	e7e9      	b.n	8007e8c <_vfiprintf_r+0x4c>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec6:	2330      	movs	r3, #48	; 0x30
 8007ec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800808c <_vfiprintf_r+0x24c>
 8007ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed0:	f04f 0901 	mov.w	r9, #1
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	469a      	mov	sl, r3
 8007ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007edc:	b10a      	cbz	r2, 8007ee2 <_vfiprintf_r+0xa2>
 8007ede:	2a25      	cmp	r2, #37	; 0x25
 8007ee0:	d1f9      	bne.n	8007ed6 <_vfiprintf_r+0x96>
 8007ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ee6:	d00b      	beq.n	8007f00 <_vfiprintf_r+0xc0>
 8007ee8:	465b      	mov	r3, fp
 8007eea:	4622      	mov	r2, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7ff ff93 	bl	8007e1a <__sfputs_r>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f000 80aa 	beq.w	800804e <_vfiprintf_r+0x20e>
 8007efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007efc:	445a      	add	r2, fp
 8007efe:	9209      	str	r2, [sp, #36]	; 0x24
 8007f00:	f89a 3000 	ldrb.w	r3, [sl]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80a2 	beq.w	800804e <_vfiprintf_r+0x20e>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f14:	f10a 0a01 	add.w	sl, sl, #1
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f20:	931a      	str	r3, [sp, #104]	; 0x68
 8007f22:	4654      	mov	r4, sl
 8007f24:	2205      	movs	r2, #5
 8007f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2a:	4858      	ldr	r0, [pc, #352]	; (800808c <_vfiprintf_r+0x24c>)
 8007f2c:	f7f8 f958 	bl	80001e0 <memchr>
 8007f30:	9a04      	ldr	r2, [sp, #16]
 8007f32:	b9d8      	cbnz	r0, 8007f6c <_vfiprintf_r+0x12c>
 8007f34:	06d1      	lsls	r1, r2, #27
 8007f36:	bf44      	itt	mi
 8007f38:	2320      	movmi	r3, #32
 8007f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3e:	0713      	lsls	r3, r2, #28
 8007f40:	bf44      	itt	mi
 8007f42:	232b      	movmi	r3, #43	; 0x2b
 8007f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f48:	f89a 3000 	ldrb.w	r3, [sl]
 8007f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4e:	d015      	beq.n	8007f7c <_vfiprintf_r+0x13c>
 8007f50:	9a07      	ldr	r2, [sp, #28]
 8007f52:	4654      	mov	r4, sl
 8007f54:	2000      	movs	r0, #0
 8007f56:	f04f 0c0a 	mov.w	ip, #10
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f60:	3b30      	subs	r3, #48	; 0x30
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	d94e      	bls.n	8008004 <_vfiprintf_r+0x1c4>
 8007f66:	b1b0      	cbz	r0, 8007f96 <_vfiprintf_r+0x156>
 8007f68:	9207      	str	r2, [sp, #28]
 8007f6a:	e014      	b.n	8007f96 <_vfiprintf_r+0x156>
 8007f6c:	eba0 0308 	sub.w	r3, r0, r8
 8007f70:	fa09 f303 	lsl.w	r3, r9, r3
 8007f74:	4313      	orrs	r3, r2
 8007f76:	9304      	str	r3, [sp, #16]
 8007f78:	46a2      	mov	sl, r4
 8007f7a:	e7d2      	b.n	8007f22 <_vfiprintf_r+0xe2>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1d19      	adds	r1, r3, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	9103      	str	r1, [sp, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfbb      	ittet	lt
 8007f88:	425b      	neglt	r3, r3
 8007f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f8e:	9307      	strge	r3, [sp, #28]
 8007f90:	9307      	strlt	r3, [sp, #28]
 8007f92:	bfb8      	it	lt
 8007f94:	9204      	strlt	r2, [sp, #16]
 8007f96:	7823      	ldrb	r3, [r4, #0]
 8007f98:	2b2e      	cmp	r3, #46	; 0x2e
 8007f9a:	d10c      	bne.n	8007fb6 <_vfiprintf_r+0x176>
 8007f9c:	7863      	ldrb	r3, [r4, #1]
 8007f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa0:	d135      	bne.n	800800e <_vfiprintf_r+0x1ce>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	1d1a      	adds	r2, r3, #4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	9203      	str	r2, [sp, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	bfb8      	it	lt
 8007fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fb2:	3402      	adds	r4, #2
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800809c <_vfiprintf_r+0x25c>
 8007fba:	7821      	ldrb	r1, [r4, #0]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	f7f8 f90e 	bl	80001e0 <memchr>
 8007fc4:	b140      	cbz	r0, 8007fd8 <_vfiprintf_r+0x198>
 8007fc6:	2340      	movs	r3, #64	; 0x40
 8007fc8:	eba0 000a 	sub.w	r0, r0, sl
 8007fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8007fd0:	9b04      	ldr	r3, [sp, #16]
 8007fd2:	4303      	orrs	r3, r0
 8007fd4:	3401      	adds	r4, #1
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fdc:	482c      	ldr	r0, [pc, #176]	; (8008090 <_vfiprintf_r+0x250>)
 8007fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fe2:	2206      	movs	r2, #6
 8007fe4:	f7f8 f8fc 	bl	80001e0 <memchr>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d03f      	beq.n	800806c <_vfiprintf_r+0x22c>
 8007fec:	4b29      	ldr	r3, [pc, #164]	; (8008094 <_vfiprintf_r+0x254>)
 8007fee:	bb1b      	cbnz	r3, 8008038 <_vfiprintf_r+0x1f8>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	3307      	adds	r3, #7
 8007ff4:	f023 0307 	bic.w	r3, r3, #7
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	443b      	add	r3, r7
 8008000:	9309      	str	r3, [sp, #36]	; 0x24
 8008002:	e767      	b.n	8007ed4 <_vfiprintf_r+0x94>
 8008004:	fb0c 3202 	mla	r2, ip, r2, r3
 8008008:	460c      	mov	r4, r1
 800800a:	2001      	movs	r0, #1
 800800c:	e7a5      	b.n	8007f5a <_vfiprintf_r+0x11a>
 800800e:	2300      	movs	r3, #0
 8008010:	3401      	adds	r4, #1
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	4619      	mov	r1, r3
 8008016:	f04f 0c0a 	mov.w	ip, #10
 800801a:	4620      	mov	r0, r4
 800801c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008020:	3a30      	subs	r2, #48	; 0x30
 8008022:	2a09      	cmp	r2, #9
 8008024:	d903      	bls.n	800802e <_vfiprintf_r+0x1ee>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0c5      	beq.n	8007fb6 <_vfiprintf_r+0x176>
 800802a:	9105      	str	r1, [sp, #20]
 800802c:	e7c3      	b.n	8007fb6 <_vfiprintf_r+0x176>
 800802e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008032:	4604      	mov	r4, r0
 8008034:	2301      	movs	r3, #1
 8008036:	e7f0      	b.n	800801a <_vfiprintf_r+0x1da>
 8008038:	ab03      	add	r3, sp, #12
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	462a      	mov	r2, r5
 800803e:	4b16      	ldr	r3, [pc, #88]	; (8008098 <_vfiprintf_r+0x258>)
 8008040:	a904      	add	r1, sp, #16
 8008042:	4630      	mov	r0, r6
 8008044:	f7fd fc74 	bl	8005930 <_printf_float>
 8008048:	4607      	mov	r7, r0
 800804a:	1c78      	adds	r0, r7, #1
 800804c:	d1d6      	bne.n	8007ffc <_vfiprintf_r+0x1bc>
 800804e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008050:	07d9      	lsls	r1, r3, #31
 8008052:	d405      	bmi.n	8008060 <_vfiprintf_r+0x220>
 8008054:	89ab      	ldrh	r3, [r5, #12]
 8008056:	059a      	lsls	r2, r3, #22
 8008058:	d402      	bmi.n	8008060 <_vfiprintf_r+0x220>
 800805a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800805c:	f7ff f9d0 	bl	8007400 <__retarget_lock_release_recursive>
 8008060:	89ab      	ldrh	r3, [r5, #12]
 8008062:	065b      	lsls	r3, r3, #25
 8008064:	f53f af12 	bmi.w	8007e8c <_vfiprintf_r+0x4c>
 8008068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800806a:	e711      	b.n	8007e90 <_vfiprintf_r+0x50>
 800806c:	ab03      	add	r3, sp, #12
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	462a      	mov	r2, r5
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <_vfiprintf_r+0x258>)
 8008074:	a904      	add	r1, sp, #16
 8008076:	4630      	mov	r0, r6
 8008078:	f7fd fefe 	bl	8005e78 <_printf_i>
 800807c:	e7e4      	b.n	8008048 <_vfiprintf_r+0x208>
 800807e:	bf00      	nop
 8008080:	080085b4 	.word	0x080085b4
 8008084:	080085d4 	.word	0x080085d4
 8008088:	08008594 	.word	0x08008594
 800808c:	0800874c 	.word	0x0800874c
 8008090:	08008756 	.word	0x08008756
 8008094:	08005931 	.word	0x08005931
 8008098:	08007e1b 	.word	0x08007e1b
 800809c:	08008752 	.word	0x08008752

080080a0 <_putc_r>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	460d      	mov	r5, r1
 80080a4:	4614      	mov	r4, r2
 80080a6:	4606      	mov	r6, r0
 80080a8:	b118      	cbz	r0, 80080b2 <_putc_r+0x12>
 80080aa:	6983      	ldr	r3, [r0, #24]
 80080ac:	b90b      	cbnz	r3, 80080b2 <_putc_r+0x12>
 80080ae:	f7ff f903 	bl	80072b8 <__sinit>
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <_putc_r+0x84>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	d124      	bne.n	8008102 <_putc_r+0x62>
 80080b8:	6874      	ldr	r4, [r6, #4]
 80080ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080bc:	07d8      	lsls	r0, r3, #31
 80080be:	d405      	bmi.n	80080cc <_putc_r+0x2c>
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	0599      	lsls	r1, r3, #22
 80080c4:	d402      	bmi.n	80080cc <_putc_r+0x2c>
 80080c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080c8:	f7ff f999 	bl	80073fe <__retarget_lock_acquire_recursive>
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	da05      	bge.n	80080e2 <_putc_r+0x42>
 80080d6:	69a2      	ldr	r2, [r4, #24]
 80080d8:	4293      	cmp	r3, r2
 80080da:	db1c      	blt.n	8008116 <_putc_r+0x76>
 80080dc:	b2eb      	uxtb	r3, r5
 80080de:	2b0a      	cmp	r3, #10
 80080e0:	d019      	beq.n	8008116 <_putc_r+0x76>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	6022      	str	r2, [r4, #0]
 80080e8:	701d      	strb	r5, [r3, #0]
 80080ea:	b2ed      	uxtb	r5, r5
 80080ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ee:	07da      	lsls	r2, r3, #31
 80080f0:	d405      	bmi.n	80080fe <_putc_r+0x5e>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	059b      	lsls	r3, r3, #22
 80080f6:	d402      	bmi.n	80080fe <_putc_r+0x5e>
 80080f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080fa:	f7ff f981 	bl	8007400 <__retarget_lock_release_recursive>
 80080fe:	4628      	mov	r0, r5
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <_putc_r+0x88>)
 8008104:	429c      	cmp	r4, r3
 8008106:	d101      	bne.n	800810c <_putc_r+0x6c>
 8008108:	68b4      	ldr	r4, [r6, #8]
 800810a:	e7d6      	b.n	80080ba <_putc_r+0x1a>
 800810c:	4b07      	ldr	r3, [pc, #28]	; (800812c <_putc_r+0x8c>)
 800810e:	429c      	cmp	r4, r3
 8008110:	bf08      	it	eq
 8008112:	68f4      	ldreq	r4, [r6, #12]
 8008114:	e7d1      	b.n	80080ba <_putc_r+0x1a>
 8008116:	4629      	mov	r1, r5
 8008118:	4622      	mov	r2, r4
 800811a:	4630      	mov	r0, r6
 800811c:	f7fe f876 	bl	800620c <__swbuf_r>
 8008120:	4605      	mov	r5, r0
 8008122:	e7e3      	b.n	80080ec <_putc_r+0x4c>
 8008124:	080085b4 	.word	0x080085b4
 8008128:	080085d4 	.word	0x080085d4
 800812c:	08008594 	.word	0x08008594

08008130 <_sbrk_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d06      	ldr	r5, [pc, #24]	; (800814c <_sbrk_r+0x1c>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	f7f9 fbbe 	bl	80018bc <_sbrk>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_sbrk_r+0x1a>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_sbrk_r+0x1a>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20000448 	.word	0x20000448

08008150 <__sread>:
 8008150:	b510      	push	{r4, lr}
 8008152:	460c      	mov	r4, r1
 8008154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008158:	f000 f8e2 	bl	8008320 <_read_r>
 800815c:	2800      	cmp	r0, #0
 800815e:	bfab      	itete	ge
 8008160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008162:	89a3      	ldrhlt	r3, [r4, #12]
 8008164:	181b      	addge	r3, r3, r0
 8008166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800816a:	bfac      	ite	ge
 800816c:	6563      	strge	r3, [r4, #84]	; 0x54
 800816e:	81a3      	strhlt	r3, [r4, #12]
 8008170:	bd10      	pop	{r4, pc}

08008172 <__swrite>:
 8008172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008176:	461f      	mov	r7, r3
 8008178:	898b      	ldrh	r3, [r1, #12]
 800817a:	05db      	lsls	r3, r3, #23
 800817c:	4605      	mov	r5, r0
 800817e:	460c      	mov	r4, r1
 8008180:	4616      	mov	r6, r2
 8008182:	d505      	bpl.n	8008190 <__swrite+0x1e>
 8008184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008188:	2302      	movs	r3, #2
 800818a:	2200      	movs	r2, #0
 800818c:	f000 f898 	bl	80082c0 <_lseek_r>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	4632      	mov	r2, r6
 800819e:	463b      	mov	r3, r7
 80081a0:	4628      	mov	r0, r5
 80081a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a6:	f000 b817 	b.w	80081d8 <_write_r>

080081aa <__sseek>:
 80081aa:	b510      	push	{r4, lr}
 80081ac:	460c      	mov	r4, r1
 80081ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b2:	f000 f885 	bl	80082c0 <_lseek_r>
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	bf15      	itete	ne
 80081bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80081be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081c6:	81a3      	strheq	r3, [r4, #12]
 80081c8:	bf18      	it	ne
 80081ca:	81a3      	strhne	r3, [r4, #12]
 80081cc:	bd10      	pop	{r4, pc}

080081ce <__sclose>:
 80081ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d2:	f000 b831 	b.w	8008238 <_close_r>
	...

080081d8 <_write_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	; (80081f8 <_write_r+0x20>)
 80081dc:	4604      	mov	r4, r0
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7f9 fb18 	bl	800181c <_write>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_write_r+0x1e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_write_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20000448 	.word	0x20000448

080081fc <__assert_func>:
 80081fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081fe:	4614      	mov	r4, r2
 8008200:	461a      	mov	r2, r3
 8008202:	4b09      	ldr	r3, [pc, #36]	; (8008228 <__assert_func+0x2c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4605      	mov	r5, r0
 8008208:	68d8      	ldr	r0, [r3, #12]
 800820a:	b14c      	cbz	r4, 8008220 <__assert_func+0x24>
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <__assert_func+0x30>)
 800820e:	9100      	str	r1, [sp, #0]
 8008210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008214:	4906      	ldr	r1, [pc, #24]	; (8008230 <__assert_func+0x34>)
 8008216:	462b      	mov	r3, r5
 8008218:	f000 f81e 	bl	8008258 <fiprintf>
 800821c:	f000 f89f 	bl	800835e <abort>
 8008220:	4b04      	ldr	r3, [pc, #16]	; (8008234 <__assert_func+0x38>)
 8008222:	461c      	mov	r4, r3
 8008224:	e7f3      	b.n	800820e <__assert_func+0x12>
 8008226:	bf00      	nop
 8008228:	2000000c 	.word	0x2000000c
 800822c:	0800875d 	.word	0x0800875d
 8008230:	0800876a 	.word	0x0800876a
 8008234:	08008798 	.word	0x08008798

08008238 <_close_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d06      	ldr	r5, [pc, #24]	; (8008254 <_close_r+0x1c>)
 800823c:	2300      	movs	r3, #0
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	f7f9 fb06 	bl	8001854 <_close>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_close_r+0x1a>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_close_r+0x1a>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	20000448 	.word	0x20000448

08008258 <fiprintf>:
 8008258:	b40e      	push	{r1, r2, r3}
 800825a:	b503      	push	{r0, r1, lr}
 800825c:	4601      	mov	r1, r0
 800825e:	ab03      	add	r3, sp, #12
 8008260:	4805      	ldr	r0, [pc, #20]	; (8008278 <fiprintf+0x20>)
 8008262:	f853 2b04 	ldr.w	r2, [r3], #4
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f7ff fde9 	bl	8007e40 <_vfiprintf_r>
 800826e:	b002      	add	sp, #8
 8008270:	f85d eb04 	ldr.w	lr, [sp], #4
 8008274:	b003      	add	sp, #12
 8008276:	4770      	bx	lr
 8008278:	2000000c 	.word	0x2000000c

0800827c <_fstat_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d07      	ldr	r5, [pc, #28]	; (800829c <_fstat_r+0x20>)
 8008280:	2300      	movs	r3, #0
 8008282:	4604      	mov	r4, r0
 8008284:	4608      	mov	r0, r1
 8008286:	4611      	mov	r1, r2
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	f7f9 faef 	bl	800186c <_fstat>
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	d102      	bne.n	8008298 <_fstat_r+0x1c>
 8008292:	682b      	ldr	r3, [r5, #0]
 8008294:	b103      	cbz	r3, 8008298 <_fstat_r+0x1c>
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	bd38      	pop	{r3, r4, r5, pc}
 800829a:	bf00      	nop
 800829c:	20000448 	.word	0x20000448

080082a0 <_isatty_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d06      	ldr	r5, [pc, #24]	; (80082bc <_isatty_r+0x1c>)
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	602b      	str	r3, [r5, #0]
 80082ac:	f7f9 faee 	bl	800188c <_isatty>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <_isatty_r+0x1a>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	b103      	cbz	r3, 80082ba <_isatty_r+0x1a>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	20000448 	.word	0x20000448

080082c0 <_lseek_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d07      	ldr	r5, [pc, #28]	; (80082e0 <_lseek_r+0x20>)
 80082c4:	4604      	mov	r4, r0
 80082c6:	4608      	mov	r0, r1
 80082c8:	4611      	mov	r1, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	602a      	str	r2, [r5, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7f9 fae7 	bl	80018a2 <_lseek>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_lseek_r+0x1e>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_lseek_r+0x1e>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	20000448 	.word	0x20000448

080082e4 <__ascii_mbtowc>:
 80082e4:	b082      	sub	sp, #8
 80082e6:	b901      	cbnz	r1, 80082ea <__ascii_mbtowc+0x6>
 80082e8:	a901      	add	r1, sp, #4
 80082ea:	b142      	cbz	r2, 80082fe <__ascii_mbtowc+0x1a>
 80082ec:	b14b      	cbz	r3, 8008302 <__ascii_mbtowc+0x1e>
 80082ee:	7813      	ldrb	r3, [r2, #0]
 80082f0:	600b      	str	r3, [r1, #0]
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	1e10      	subs	r0, r2, #0
 80082f6:	bf18      	it	ne
 80082f8:	2001      	movne	r0, #1
 80082fa:	b002      	add	sp, #8
 80082fc:	4770      	bx	lr
 80082fe:	4610      	mov	r0, r2
 8008300:	e7fb      	b.n	80082fa <__ascii_mbtowc+0x16>
 8008302:	f06f 0001 	mvn.w	r0, #1
 8008306:	e7f8      	b.n	80082fa <__ascii_mbtowc+0x16>

08008308 <__malloc_lock>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__malloc_lock+0x8>)
 800830a:	f7ff b878 	b.w	80073fe <__retarget_lock_acquire_recursive>
 800830e:	bf00      	nop
 8008310:	2000043c 	.word	0x2000043c

08008314 <__malloc_unlock>:
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <__malloc_unlock+0x8>)
 8008316:	f7ff b873 	b.w	8007400 <__retarget_lock_release_recursive>
 800831a:	bf00      	nop
 800831c:	2000043c 	.word	0x2000043c

08008320 <_read_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d07      	ldr	r5, [pc, #28]	; (8008340 <_read_r+0x20>)
 8008324:	4604      	mov	r4, r0
 8008326:	4608      	mov	r0, r1
 8008328:	4611      	mov	r1, r2
 800832a:	2200      	movs	r2, #0
 800832c:	602a      	str	r2, [r5, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	f7f9 fa57 	bl	80017e2 <_read>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_read_r+0x1e>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_read_r+0x1e>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	20000448 	.word	0x20000448

08008344 <__ascii_wctomb>:
 8008344:	b149      	cbz	r1, 800835a <__ascii_wctomb+0x16>
 8008346:	2aff      	cmp	r2, #255	; 0xff
 8008348:	bf85      	ittet	hi
 800834a:	238a      	movhi	r3, #138	; 0x8a
 800834c:	6003      	strhi	r3, [r0, #0]
 800834e:	700a      	strbls	r2, [r1, #0]
 8008350:	f04f 30ff 	movhi.w	r0, #4294967295
 8008354:	bf98      	it	ls
 8008356:	2001      	movls	r0, #1
 8008358:	4770      	bx	lr
 800835a:	4608      	mov	r0, r1
 800835c:	4770      	bx	lr

0800835e <abort>:
 800835e:	b508      	push	{r3, lr}
 8008360:	2006      	movs	r0, #6
 8008362:	f000 f82b 	bl	80083bc <raise>
 8008366:	2001      	movs	r0, #1
 8008368:	f7f9 fa31 	bl	80017ce <_exit>

0800836c <_raise_r>:
 800836c:	291f      	cmp	r1, #31
 800836e:	b538      	push	{r3, r4, r5, lr}
 8008370:	4604      	mov	r4, r0
 8008372:	460d      	mov	r5, r1
 8008374:	d904      	bls.n	8008380 <_raise_r+0x14>
 8008376:	2316      	movs	r3, #22
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	f04f 30ff 	mov.w	r0, #4294967295
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008382:	b112      	cbz	r2, 800838a <_raise_r+0x1e>
 8008384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008388:	b94b      	cbnz	r3, 800839e <_raise_r+0x32>
 800838a:	4620      	mov	r0, r4
 800838c:	f000 f830 	bl	80083f0 <_getpid_r>
 8008390:	462a      	mov	r2, r5
 8008392:	4601      	mov	r1, r0
 8008394:	4620      	mov	r0, r4
 8008396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839a:	f000 b817 	b.w	80083cc <_kill_r>
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d00a      	beq.n	80083b8 <_raise_r+0x4c>
 80083a2:	1c59      	adds	r1, r3, #1
 80083a4:	d103      	bne.n	80083ae <_raise_r+0x42>
 80083a6:	2316      	movs	r3, #22
 80083a8:	6003      	str	r3, [r0, #0]
 80083aa:	2001      	movs	r0, #1
 80083ac:	e7e7      	b.n	800837e <_raise_r+0x12>
 80083ae:	2400      	movs	r4, #0
 80083b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083b4:	4628      	mov	r0, r5
 80083b6:	4798      	blx	r3
 80083b8:	2000      	movs	r0, #0
 80083ba:	e7e0      	b.n	800837e <_raise_r+0x12>

080083bc <raise>:
 80083bc:	4b02      	ldr	r3, [pc, #8]	; (80083c8 <raise+0xc>)
 80083be:	4601      	mov	r1, r0
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f7ff bfd3 	b.w	800836c <_raise_r>
 80083c6:	bf00      	nop
 80083c8:	2000000c 	.word	0x2000000c

080083cc <_kill_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d07      	ldr	r5, [pc, #28]	; (80083ec <_kill_r+0x20>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	4611      	mov	r1, r2
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	f7f9 f9e8 	bl	80017ae <_kill>
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	d102      	bne.n	80083e8 <_kill_r+0x1c>
 80083e2:	682b      	ldr	r3, [r5, #0]
 80083e4:	b103      	cbz	r3, 80083e8 <_kill_r+0x1c>
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	bd38      	pop	{r3, r4, r5, pc}
 80083ea:	bf00      	nop
 80083ec:	20000448 	.word	0x20000448

080083f0 <_getpid_r>:
 80083f0:	f7f9 b9d5 	b.w	800179e <_getpid>

080083f4 <_init>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr

08008400 <_fini>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr
