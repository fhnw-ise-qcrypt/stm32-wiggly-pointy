
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008398  08008398  00018398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800882c  0800882c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800882c  0800882c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800882c  0800882c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800882c  0800882c  0001882c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001dc  08008a10  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08008a10  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c76  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002148  00000000  00000000  00030e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00032fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00033eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d461  00000000  00000000  00034cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122b1  00000000  00000000  00052129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab7cd  00000000  00000000  000643da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005034  00000000  00000000  0010fbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800837c 	.word	0x0800837c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800837c 	.word	0x0800837c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b598      	push	{r3, r4, r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f001 f836 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f88a 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fa78 	bl	80010a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bb8:	f000 f8e0 	bl	8000d7c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bbc:	f000 f91c 	bl	8000df8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000bc0:	f000 fa42 	bl	8001048 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc4:	f000 f97a 	bl	8000ebc <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bc8:	f000 f9c6 	bl	8000f58 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000bcc:	f000 f952 	bl	8000e74 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  printf("boink\n");
 8000bd0:	4832      	ldr	r0, [pc, #200]	; (8000c9c <main+0xf4>)
 8000bd2:	f005 fad9 	bl	8006188 <puts>

  // start MEMS FCLK_X
  HAL_TIM_Base_Start(&htim14);
 8000bd6:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <main+0xf8>)
 8000bd8:	f003 fd48 	bl	800466c <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim14, TIM_CHANNEL_1);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4830      	ldr	r0, [pc, #192]	; (8000ca0 <main+0xf8>)
 8000be0:	f003 fdfe 	bl	80047e0 <HAL_TIM_OC_Start>
  //htim14.Instance->CCR1 = 2;

  // start MEMS FCLK_Y
  HAL_TIM_Base_Start(&htim16);
 8000be4:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <main+0xfc>)
 8000be6:	f003 fd41 	bl	800466c <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 8000bea:	2100      	movs	r1, #0
 8000bec:	482d      	ldr	r0, [pc, #180]	; (8000ca4 <main+0xfc>)
 8000bee:	f003 fdf7 	bl	80047e0 <HAL_TIM_OC_Start>
  //htim16.Instance->CCR1 = 2;
  HAL_Delay(10);
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f001 f878 	bl	8001ce8 <HAL_Delay>

  MCP3561_Reset(&hspi1);
 8000bf8:	482b      	ldr	r0, [pc, #172]	; (8000ca8 <main+0x100>)
 8000bfa:	f000 ffc1 	bl	8001b80 <MCP3561_Reset>
  HAL_Delay(10);
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f001 f872 	bl	8001ce8 <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c04:	4828      	ldr	r0, [pc, #160]	; (8000ca8 <main+0x100>)
 8000c06:	f000 ff41 	bl	8001a8c <MCP3561_PrintRegisters>
  printf("\n");
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f005 fa38 	bl	8006080 <putchar>

  // @note configure the chip inside the Init() function
  MCP3561_Init(&hspi1);
 8000c10:	4825      	ldr	r0, [pc, #148]	; (8000ca8 <main+0x100>)
 8000c12:	f000 fec6 	bl	80019a2 <MCP3561_Init>
  printf("\n");
 8000c16:	200a      	movs	r0, #10
 8000c18:	f005 fa32 	bl	8006080 <putchar>
  HAL_Delay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f001 f863 	bl	8001ce8 <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c22:	4821      	ldr	r0, [pc, #132]	; (8000ca8 <main+0x100>)
 8000c24:	f000 ff32 	bl	8001a8c <MCP3561_PrintRegisters>
  printf("\n");
 8000c28:	200a      	movs	r0, #10
 8000c2a:	f005 fa29 	bl	8006080 <putchar>


  setup_done = true;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <main+0x104>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
	   * CONF3: d0
	   * IRQ  : 37
	   * MUX  : 01
	   */
	  //printf("\n");
	  HAL_Delay(1000);
 8000c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c38:	f001 f856 	bl	8001ce8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <main+0x108>)
 8000c40:	f001 fb1a 	bl	8002278 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <main+0x108>)
 8000c48:	f001 fb16 	bl	8002278 <HAL_GPIO_TogglePin>

	  adc_val = MCP3561_ReadADCData(&hspi1);
 8000c4c:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <main+0x100>)
 8000c4e:	f000 ffa9 	bl	8001ba4 <MCP3561_ReadADCData>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <main+0x10c>)
 8000c56:	6013      	str	r3, [r2, #0]
	  adc_volts = ((float)adc_val)*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <main+0x10c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	ee07 3a90 	vmov	s15, r3
 8000c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c68:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000cb8 <main+0x110>
 8000c6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c70:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000cbc <main+0x114>
 8000c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <main+0x118>)
 8000c7a:	edc3 7a00 	vstr	s15, [r3]

	  printf("%d %.5f V\n", (int)adc_val, adc_volts);  // updated in ISR
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <main+0x10c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	461c      	mov	r4, r3
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <main+0x118>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc5d 	bl	8000548 <__aeabi_f2d>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4621      	mov	r1, r4
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <main+0x11c>)
 8000c96:	f005 f9db 	bl	8006050 <iprintf>
	  HAL_Delay(1000);
 8000c9a:	e7cb      	b.n	8000c34 <main+0x8c>
 8000c9c:	08008398 	.word	0x08008398
 8000ca0:	2000030c 	.word	0x2000030c
 8000ca4:	20000358 	.word	0x20000358
 8000ca8:	200001f8 	.word	0x200001f8
 8000cac:	2000042c 	.word	0x2000042c
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	20000428 	.word	0x20000428
 8000cb8:	40251eb8 	.word	0x40251eb8
 8000cbc:	4b7fffff 	.word	0x4b7fffff
 8000cc0:	20000430 	.word	0x20000430
 8000cc4:	080083a0 	.word	0x080083a0

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09a      	sub	sp, #104	; 0x68
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 fd48 	bl	800576c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	222c      	movs	r2, #44	; 0x2c
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 fd3a 	bl	800576c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d06:	2301      	movs	r3, #1
 8000d08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d14:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d18:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fadc 	bl	80022dc <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d2a:	f000 fb0b 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	2302      	movs	r3, #2
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fb04 	bl	8003358 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d56:	f000 faf5 	bl	8001344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fd2d 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d70:	f000 fae8 	bl	8001344 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3768      	adds	r7, #104	; 0x68
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <MX_SPI1_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000d96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000db2:	2210      	movs	r2, #16
 8000db4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000dca:	2207      	movs	r2, #7
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_SPI1_Init+0x74>)
 8000ddc:	f002 fe66 	bl	8003aac <HAL_SPI_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 faad 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001f8 	.word	0x200001f8
 8000df4:	40013000 	.word	0x40013000

08000df8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <MX_SPI2_Init+0x78>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e10:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e30:	2210      	movs	r2, #16
 8000e32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e54:	2208      	movs	r2, #8
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_SPI2_Init+0x74>)
 8000e5a:	f002 fe27 	bl	8003aac <HAL_SPI_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000e64:	f000 fa6e 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000025c 	.word	0x2000025c
 8000e70:	40003800 	.word	0x40003800

08000e74 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_TIM13_Init+0x40>)
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <MX_TIM13_Init+0x44>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MX_TIM13_Init+0x40>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_TIM13_Init+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = TIM13_COUNT_PERIOD;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <MX_TIM13_Init+0x40>)
 8000e8c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000e90:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_TIM13_Init+0x40>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_TIM13_Init+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_TIM13_Init+0x40>)
 8000ea0:	f003 fb94 	bl	80045cc <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000eaa:	f000 fa4b 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002c0 	.word	0x200002c0
 8000eb8:	40001c00 	.word	0x40001c00

08000ebc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <MX_TIM14_Init+0x98>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = TIM14_COUNT_PERIOD;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000ee8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000eec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000efa:	4815      	ldr	r0, [pc, #84]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000efc:	f003 fb66 	bl	80045cc <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000f06:	f000 fa1d 	bl	8001344 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000f0a:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000f0c:	f003 fc0e 	bl	800472c <HAL_TIM_OC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000f16:	f000 fa15 	bl	8001344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f1a:	2330      	movs	r3, #48	; 0x30
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000f32:	f003 fd1f 	bl	8004974 <HAL_TIM_OC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000f3c:	f000 fa02 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM14_Init+0x94>)
 8000f42:	f000 fb21 	bl	8001588 <HAL_TIM_MspPostInit>

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000030c 	.word	0x2000030c
 8000f54:	40002000 	.word	0x40002000

08000f58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b090      	sub	sp, #64	; 0x40
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fbf7 	bl	800576c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000f80:	4a30      	ldr	r2, [pc, #192]	; (8001044 <MX_TIM16_Init+0xec>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_COUNT_PERIOD;
 8000f90:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000f92:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000f96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000faa:	4825      	ldr	r0, [pc, #148]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000fac:	f003 fb0e 	bl	80045cc <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000fb6:	f000 f9c5 	bl	8001344 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000fba:	4821      	ldr	r0, [pc, #132]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000fbc:	f003 fbb6 	bl	800472c <HAL_TIM_OC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000fc6:	f000 f9bd 	bl	8001344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fca:	2330      	movs	r3, #48	; 0x30
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_TIM16_Init+0xe8>)
 8000ff0:	f003 fcc0 	bl	8004974 <HAL_TIM_OC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000ffa:	f000 f9a3 	bl	8001344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001016:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <MX_TIM16_Init+0xe8>)
 8001022:	f003 ff1b 	bl	8004e5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800102c:	f000 f98a 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <MX_TIM16_Init+0xe8>)
 8001032:	f000 faa9 	bl	8001588 <HAL_TIM_MspPostInit>

}
 8001036:	bf00      	nop
 8001038:	3740      	adds	r7, #64	; 0x40
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000358 	.word	0x20000358
 8001044:	40014400 	.word	0x40014400

08001048 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <MX_USART2_UART_Init+0x5c>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800108c:	f003 ff38 	bl	8004f00 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001096:	f000 f955 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200003a4 	.word	0x200003a4
 80010a4:	40004400 	.word	0x40004400

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a50      	ldr	r2, [pc, #320]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	6153      	str	r3, [r2, #20]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a44      	ldr	r2, [pc, #272]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b42      	ldr	r3, [pc, #264]	; (8001204 <MX_GPIO_Init+0x15c>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <MX_GPIO_Init+0x15c>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <MX_GPIO_Init+0x15c>)
 800110c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <MX_GPIO_Init+0x15c>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f001 f88e 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f244 01c0 	movw	r1, #16576	; 0x40c0
 8001132:	4835      	ldr	r0, [pc, #212]	; (8001208 <MX_GPIO_Init+0x160>)
 8001134:	f001 f888 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001138:	2310      	movs	r3, #16
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f000 feff 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001156:	2302      	movs	r3, #2
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <MX_GPIO_Init+0x160>)
 800116c:	f000 fef2 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001170:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x160>)
 800118a:	f000 fee3 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 fed3 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80011ae:	23c0      	movs	r3, #192	; 0xc0
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4810      	ldr	r0, [pc, #64]	; (8001208 <MX_GPIO_Init+0x160>)
 80011c6:	f000 fec5 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80011dc:	2301      	movs	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <MX_GPIO_Init+0x160>)
 80011e8:	f000 feb4 	bl	8001f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2007      	movs	r0, #7
 80011f2:	f000 fe78 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f6:	2007      	movs	r0, #7
 80011f8:	f000 fe91 	bl	8001f1e <HAL_NVIC_EnableIRQ>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001214:	1d39      	adds	r1, r7, #4
 8001216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121a:	2201      	movs	r2, #1
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <__io_putchar+0x20>)
 800121e:	f003 febd 	bl	8004f9c <HAL_UART_Transmit>

    return ch;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200003a4 	.word	0x200003a4

08001230 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af02      	add	r7, sp, #8
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
	/* @todo correct EXTI pin */
    if ( GPIO_Pin == GPIO_PIN_6) {
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d171      	bne.n	8001324 <HAL_GPIO_EXTI_Callback+0xf4>
    	if(setup_done){
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_GPIO_EXTI_Callback+0xf4>
    		uint8_t val[5] = {0,0,0,0,0};
 800124a:	4a39      	ldr	r2, [pc, #228]	; (8001330 <HAL_GPIO_EXTI_Callback+0x100>)
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001254:	6018      	str	r0, [r3, #0]
 8001256:	3304      	adds	r3, #4
 8001258:	7019      	strb	r1, [r3, #0]
    		uint8_t cmd[5] = {0,0,0,0,0};
 800125a:	4a35      	ldr	r2, [pc, #212]	; (8001330 <HAL_GPIO_EXTI_Callback+0x100>)
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001264:	6018      	str	r0, [r3, #0]
 8001266:	3304      	adds	r3, #4
 8001268:	7019      	strb	r1, [r3, #0]
    		cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 800126a:	2341      	movs	r3, #65	; 0x41
 800126c:	753b      	strb	r3, [r7, #20]
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2110      	movs	r1, #16
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f000 ffe7 	bl	8002248 <HAL_GPIO_WritePin>
    		// non-blocking "HAL_SPI_TransmitReceive_IT" does not work
    		// because we need to create CS signal manually
    		// the timout therefore must not be greater than 1/fs
    		// e.g. at 300 Hz --> 3ms
    		HAL_SPI_TransmitReceive(&hspi1, &cmd[0], &val[0], 5, 1);
 800127a:	f107 021c 	add.w	r2, r7, #28
 800127e:	f107 0114 	add.w	r1, r7, #20
 8001282:	2301      	movs	r3, #1
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2305      	movs	r3, #5
 8001288:	482a      	ldr	r0, [pc, #168]	; (8001334 <HAL_GPIO_EXTI_Callback+0x104>)
 800128a:	f002 fe28 	bl	8003ede <HAL_SPI_TransmitReceive>
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	2110      	movs	r1, #16
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f000 ffd7 	bl	8002248 <HAL_GPIO_WritePin>
    		adc_val = (val[1] << 16) | (val[2] << 8) | val[3];
 800129a:	7f7b      	ldrb	r3, [r7, #29]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	7fbb      	ldrb	r3, [r7, #30]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	4313      	orrs	r3, r2
 80012a4:	7ffa      	ldrb	r2, [r7, #31]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_GPIO_EXTI_Callback+0x108>)
 80012ac:	601a      	str	r2, [r3, #0]

    		float volts = (float)adc_val/(8388607.0f)*3.3f;
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_GPIO_EXTI_Callback+0x108>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ba:	eddf 6a20 	vldr	s13, [pc, #128]	; 800133c <HAL_GPIO_EXTI_Callback+0x10c>
 80012be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001340 <HAL_GPIO_EXTI_Callback+0x110>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    		uint8_t str[11];
    		for(int i=0; i<10; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d2:	e008      	b.n	80012e6 <HAL_GPIO_EXTI_Callback+0xb6>
    			str[i] = ' ';
 80012d4:	f107 0208 	add.w	r2, r7, #8
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012da:	4413      	add	r3, r2
 80012dc:	2220      	movs	r2, #32
 80012de:	701a      	strb	r2, [r3, #0]
    		for(int i=0; i<10; i++)
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	3301      	adds	r3, #1
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	ddf3      	ble.n	80012d4 <HAL_GPIO_EXTI_Callback+0xa4>
    		int i = (int)(volts*9.0f/3.3f);
 80012ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012f0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80012f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001340 <HAL_GPIO_EXTI_Callback+0x110>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001304:	ee17 3a90 	vmov	r3, s15
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    		str[i] = '#';
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	4413      	add	r3, r2
 8001312:	2223      	movs	r2, #35	; 0x23
 8001314:	701a      	strb	r2, [r3, #0]
    		str[11] = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	74fb      	strb	r3, [r7, #19]
    		printf("%s\n", str);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4618      	mov	r0, r3
 8001320:	f004 ff32 	bl	8006188 <puts>
    		//printf("%03f\n", volts);
    		//printf("%d\n", (int)adc_val);  // updated in ISR
    	}
    }
}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000042c 	.word	0x2000042c
 8001330:	080083ac 	.word	0x080083ac
 8001334:	200001f8 	.word	0x200001f8
 8001338:	20000428 	.word	0x20000428
 800133c:	4afffffe 	.word	0x4afffffe
 8001340:	40533333 	.word	0x40533333

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_MspInit+0x44>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_MspInit+0x44>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_MspInit+0x44>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x44>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x44>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x44>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_SPI_MspInit+0x14c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d145      	bne.n	8001446 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ba:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001412:	2305      	movs	r3, #5
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f000 fd98 	bl	8001f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001424:	2301      	movs	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001434:	2305      	movs	r3, #5
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	482b      	ldr	r0, [pc, #172]	; (80014ec <HAL_SPI_MspInit+0x154>)
 8001440:	f000 fd88 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001444:	e04a      	b.n	80014dc <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a29      	ldr	r2, [pc, #164]	; (80014f0 <HAL_SPI_MspInit+0x158>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d145      	bne.n	80014dc <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145a:	61d3      	str	r3, [r2, #28]
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 800146e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001472:	6153      	str	r3, [r2, #20]
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 8001486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800148a:	6153      	str	r3, [r2, #20]
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_SPI_MspInit+0x150>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014aa:	2305      	movs	r3, #5
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <HAL_SPI_MspInit+0x154>)
 80014b6:	f000 fd4d 	bl	8001f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014cc:	2305      	movs	r3, #5
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4807      	ldr	r0, [pc, #28]	; (80014f4 <HAL_SPI_MspInit+0x15c>)
 80014d8:	f000 fd3c 	bl	8001f54 <HAL_GPIO_Init>
}
 80014dc:	bf00      	nop
 80014de:	3738      	adds	r7, #56	; 0x38
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	40003800 	.word	0x40003800
 80014f4:	48000c00 	.word	0x48000c00

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <HAL_TIM_Base_MspInit+0x80>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10c      	bne.n	8001524 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001522:	e022      	b.n	800156a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <HAL_TIM_Base_MspInit+0x88>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10c      	bne.n	8001548 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
}
 8001546:	e010      	b.n	800156a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_TIM_Base_MspInit+0x8c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10b      	bne.n	800156a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_TIM_Base_MspInit+0x84>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
}
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40001c00 	.word	0x40001c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40002000 	.word	0x40002000
 8001584:	40014400 	.word	0x40014400

08001588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_TIM_MspPostInit+0xb0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d11e      	bne.n	80015e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_TIM_MspPostInit+0xb4>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_TIM_MspPostInit+0xb4>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_TIM_MspPostInit+0xb4>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = FCLK_X_Pin;
 80015c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80015d4:	2309      	movs	r3, #9
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_X_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f000 fcb7 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80015e6:	e022      	b.n	800162e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM16)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_TIM_MspPostInit+0xb8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d11d      	bne.n	800162e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_TIM_MspPostInit+0xb4>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_TIM_MspPostInit+0xb4>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6153      	str	r3, [r2, #20]
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_TIM_MspPostInit+0xb4>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FCLK_Y_Pin;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_Y_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f000 fc93 	bl	8001f54 <HAL_GPIO_Init>
}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40002000 	.word	0x40002000
 800163c:	40021000 	.word	0x40021000
 8001640:	40014400 	.word	0x40014400

08001644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0x7c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d128      	bne.n	80016b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_UART_MspInit+0x80>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <HAL_UART_MspInit+0x80>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_UART_MspInit+0x80>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_UART_MspInit+0x80>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_UART_MspInit+0x80>)
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	6153      	str	r3, [r2, #20]
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_UART_MspInit+0x80>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001696:	230c      	movs	r3, #12
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f000 fc4e 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40004400 	.word	0x40004400
 80016c4:	40021000 	.word	0x40021000

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001714:	f000 fac8 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 8001720:	2002      	movs	r0, #2
 8001722:	f000 fdc3 	bl	80022ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}

0800172a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
	return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_kill>:

int _kill(int pid, int sig)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001744:	f003 ffe8 	bl	8005718 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	2216      	movs	r2, #22
 800174c:	601a      	str	r2, [r3, #0]
	return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_exit>:

void _exit (int status)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001762:	f04f 31ff 	mov.w	r1, #4294967295
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffe7 	bl	800173a <_kill>
	while (1) {}		/* Make sure we hang here */
 800176c:	e7fe      	b.n	800176c <_exit+0x12>

0800176e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e00a      	b.n	8001796 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001780:	f3af 8000 	nop.w
 8001784:	4601      	mov	r1, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	60ba      	str	r2, [r7, #8]
 800178c:	b2ca      	uxtb	r2, r1
 800178e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbf0      	blt.n	8001780 <_read+0x12>
	}

return len;
 800179e:	687b      	ldr	r3, [r7, #4]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e009      	b.n	80017ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	60ba      	str	r2, [r7, #8]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fd22 	bl	800120c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dbf1      	blt.n	80017ba <_write+0x12>
	}
	return len;
 80017d6:	687b      	ldr	r3, [r7, #4]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_close>:

int _close(int file)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	return -1;
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001808:	605a      	str	r2, [r3, #4]
	return 0;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_isatty>:

int _isatty(int file)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
	return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f003 ff4e 	bl	8005718 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20008000 	.word	0x20008000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	20000434 	.word	0x20000434
 80018b0:	20000450 	.word	0x20000450

080018b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopForever+0x6>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopForever+0xe>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopForever+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001902:	f7ff ffd7 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f003 ff0d 	bl	8005724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190a:	f7ff f94d 	bl	8000ba8 <main>

0800190e <LoopForever>:

LoopForever:
    b LoopForever
 800190e:	e7fe      	b.n	800190e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001910:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800191c:	08008834 	.word	0x08008834
  ldr r2, =_sbss
 8001920:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001924:	2000044c 	.word	0x2000044c

08001928 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC1_IRQHandler>

0800192a <_MCP3561_write>:
*/

#include "main.h"
#include "mcp3564.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2110      	movs	r1, #16
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f000 fc82 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	2303      	movs	r3, #3
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f002 f959 	bl	8003c02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2110      	movs	r1, #16
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f000 fc76 	bl	8002248 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_MCP3561_sread>:

uint8_t _MCP3561_sread(SPI_HandleTypeDef *hspi, uint8_t *cmd){
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af02      	add	r7, sp, #8
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	uint8_t reg8[2];
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2110      	movs	r1, #16
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f000 fc67 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
 800197a:	f107 020c 	add.w	r2, r7, #12
 800197e:	2303      	movs	r3, #3
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2302      	movs	r3, #2
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f002 faa9 	bl	8003ede <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2110      	movs	r1, #16
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f000 fc58 	bl	8002248 <HAL_GPIO_WritePin>
	return reg8[1];
 8001998:	7b7b      	ldrb	r3, [r7, #13]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]

	// be careful with the bitwise or operator "|"
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 80019ae:	2346      	movs	r3, #70	; 0x46
 80019b0:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG0_CLK_SEL_EXT;   // clock selection
 80019b2:	2300      	movs	r3, #0
 80019b4:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_ADC_MODE_CONV; // standby or converting
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	f043 0303 	orr.w	r3, r3, #3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_CS_SEL_NONE;   // input current
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2202      	movs	r2, #2
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffac 	bl	800192a <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 80019d2:	234a      	movs	r3, #74	; 0x4a
 80019d4:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG1_OSR_4096;       // over sampling rate
 80019d6:	231c      	movs	r3, #28
 80019d8:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG1_AMCLK_DIV8;    // sampling clock prescaler
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2202      	movs	r2, #2
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff9c 	bl	800192a <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 80019f2:	234e      	movs	r3, #78	; 0x4e
 80019f4:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG2_BOOST_x1;   // Boost
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_GAIN_x1;    // Gain
 80019fa:	7b7b      	ldrb	r3, [r7, #13]
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_AZ_MUX_OFF; // offset cancellation algorithm
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
 8001a06:	737b      	strb	r3, [r7, #13]
	cmd[1] += 3; // last two bits must always be '11'
 8001a08:	7b7b      	ldrb	r3, [r7, #13]
 8001a0a:	3303      	adds	r3, #3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2202      	movs	r2, #2
 8001a16:	4619      	mov	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff86 	bl	800192a <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8001a1e:	2352      	movs	r3, #82	; 0x52
 8001a20:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG3_CONV_MODE_CONTINUOUS; // conversion mode
 8001a22:	23c0      	movs	r3, #192	; 0xc0
 8001a24:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_DATA_FORMAT_24BIT;    // SPI output data format, (32 and 24 bit available)
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_CRCCOM_OFF;           // CRC
 8001a2a:	7b7b      	ldrb	r3, [r7, #13]
 8001a2c:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_GAINCAL_OFF;          // gain calibration
 8001a2e:	7b7b      	ldrb	r3, [r7, #13]
 8001a30:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_OFFCAL_OFF;           // offset calibration
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff73 	bl	800192a <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 8001a44:	2356      	movs	r3, #86	; 0x56
 8001a46:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_IRQ_MODE_IRQ_HIGH;  // IRQ default pin state
 8001a48:	2304      	movs	r3, #4
 8001a4a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_FASTCMD_ON;     // fast commands
 8001a4c:	7b7b      	ldrb	r3, [r7, #13]
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_STP_ON;         // start of conversion IRQ
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2202      	movs	r2, #2
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff5e 	bl	800192a <_MCP3561_write>

	cmd[0]  = MCP3561_MUX_WRITE;
 8001a6e:	235a      	movs	r3, #90	; 0x5a
 8001a70:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (MCP3561_MUX_CH0 << 4) | MCP3561_MUX_CH1;   // [7..4] VIN+ / [3..0] VIN-
 8001a72:	2301      	movs	r3, #1
 8001a74:	737b      	strb	r3, [r7, #13]
	//cmd[1]  = (MCP3561_MUX_CH_IntTemp_P << 4) | MCP3561_MUX_CH_IntTemp_M;   // [7..4] VIN+ / [3..0] VIN-
	_MCP3561_write(hspi, cmd, 2);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff53 	bl	800192a <_MCP3561_write>
	cmd[3] = 0;
	_MCP3561_write(hspi, cmd, 4);
	*/


}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <MCP3561_PrintRegisters>:

/**
 * @brief prints the configuration registers content
 */
void MCP3561_PrintRegisters(SPI_HandleTypeDef *hspi){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	uint8_t reg8 = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd [5] = {0,0,0,0,0};
 8001a98:	4a32      	ldr	r2, [pc, #200]	; (8001b64 <MCP3561_PrintRegisters+0xd8>)
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa2:	6018      	str	r0, [r3, #0]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	7019      	strb	r1, [r3, #0]

	cmd[0] = MCP3561_CONFIG0_SREAD;
 8001aa8:	2345      	movs	r3, #69	; 0x45
 8001aaa:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff56 	bl	8001964 <_MCP3561_sread>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]
	printf("CONF0: %02x\n", reg8);
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4829      	ldr	r0, [pc, #164]	; (8001b68 <MCP3561_PrintRegisters+0xdc>)
 8001ac2:	f004 fac5 	bl	8006050 <iprintf>

	cmd[0] = MCP3561_CONFIG1_SREAD;
 8001ac6:	2349      	movs	r3, #73	; 0x49
 8001ac8:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff47 	bl	8001964 <_MCP3561_sread>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
	printf("CONF1: %02x\n", reg8);
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4823      	ldr	r0, [pc, #140]	; (8001b6c <MCP3561_PrintRegisters+0xe0>)
 8001ae0:	f004 fab6 	bl	8006050 <iprintf>

	cmd[0] = MCP3561_CONFIG2_SREAD;
 8001ae4:	234d      	movs	r3, #77	; 0x4d
 8001ae6:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff38 	bl	8001964 <_MCP3561_sread>
 8001af4:	4603      	mov	r3, r0
 8001af6:	73fb      	strb	r3, [r7, #15]
	printf("CONF2: %02x\n", reg8);
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	4619      	mov	r1, r3
 8001afc:	481c      	ldr	r0, [pc, #112]	; (8001b70 <MCP3561_PrintRegisters+0xe4>)
 8001afe:	f004 faa7 	bl	8006050 <iprintf>

	cmd[0] = MCP3561_CONFIG3_SREAD;
 8001b02:	2351      	movs	r3, #81	; 0x51
 8001b04:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <_MCP3561_sread>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
	printf("CONF3: %02x\n", reg8);
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4816      	ldr	r0, [pc, #88]	; (8001b74 <MCP3561_PrintRegisters+0xe8>)
 8001b1c:	f004 fa98 	bl	8006050 <iprintf>

	cmd[0] = MCP3561_IRQ_SREAD;
 8001b20:	2355      	movs	r3, #85	; 0x55
 8001b22:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff1a 	bl	8001964 <_MCP3561_sread>
 8001b30:	4603      	mov	r3, r0
 8001b32:	73fb      	strb	r3, [r7, #15]
	printf("IRQ  : %02x\n", reg8);
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	4619      	mov	r1, r3
 8001b38:	480f      	ldr	r0, [pc, #60]	; (8001b78 <MCP3561_PrintRegisters+0xec>)
 8001b3a:	f004 fa89 	bl	8006050 <iprintf>

	cmd[0] = MCP3561_MUX_SREAD;
 8001b3e:	2359      	movs	r3, #89	; 0x59
 8001b40:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff0b 	bl	8001964 <_MCP3561_sread>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
	printf("MUX  : %02x\n", reg8);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MCP3561_PrintRegisters+0xf0>)
 8001b58:	f004 fa7a 	bl	8006050 <iprintf>

	/* @todo all the remaining registers */
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	08008414 	.word	0x08008414
 8001b68:	080083b4 	.word	0x080083b4
 8001b6c:	080083c4 	.word	0x080083c4
 8001b70:	080083d4 	.word	0x080083d4
 8001b74:	080083e4 	.word	0x080083e4
 8001b78:	080083f4 	.word	0x080083f4
 8001b7c:	08008404 	.word	0x08008404

08001b80 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8001b88:	237a      	movs	r3, #122	; 0x7a
 8001b8a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 8001b8c:	f107 010f 	add.w	r1, r7, #15
 8001b90:	230a      	movs	r3, #10
 8001b92:	2201      	movs	r2, #1
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f002 f834 	bl	8003c02 <HAL_SPI_Transmit>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <MCP3561_ReadADCData>:

/**
 * @brief read 24 Bit left justified ADC register
 * @todo  how to read from other data formats?
 */
uint32_t MCP3561_ReadADCData(SPI_HandleTypeDef *hspi){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	6078      	str	r0, [r7, #4]
	uint8_t val[5] = {0,0,0,0,0};
 8001bac:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <MCP3561_ReadADCData+0x74>)
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bb6:	6018      	str	r0, [r3, #0]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	7019      	strb	r1, [r3, #0]
	uint8_t cmd[5] = {0,0,0,0,0};
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <MCP3561_ReadADCData+0x74>)
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bc6:	6018      	str	r0, [r3, #0]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	7019      	strb	r1, [r3, #0]
	cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 8001bcc:	2341      	movs	r3, #65	; 0x41
 8001bce:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f000 fb36 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, val, 5, 10);
 8001bdc:	f107 0214 	add.w	r2, r7, #20
 8001be0:	f107 010c 	add.w	r1, r7, #12
 8001be4:	230a      	movs	r3, #10
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2305      	movs	r3, #5
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f002 f977 	bl	8003ede <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f000 fb26 	bl	8002248 <HAL_GPIO_WritePin>
	uint32_t value = (val[1] << 16) | (val[2] << 8) | val[3];
 8001bfc:	7d7b      	ldrb	r3, [r7, #21]
 8001bfe:	041a      	lsls	r2, r3, #16
 8001c00:	7dbb      	ldrb	r3, [r7, #22]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	4313      	orrs	r3, r2
 8001c06:	7dfa      	ldrb	r2, [r7, #23]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61fb      	str	r3, [r7, #28]
	return value;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	08008414 	.word	0x08008414

08001c1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f94f 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	200f      	movs	r0, #15
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fb8a 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f967 	bl	8001f3a <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f92f 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000438 	.word	0x20000438

08001cd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000438 	.word	0x20000438

08001ce8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff3e 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	e154      	b.n	800220e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8146 	beq.w	8002208 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <HAL_GPIO_Init+0x40>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d130      	bne.n	8001ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d017      	beq.n	8002032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d123      	bne.n	8002086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	6939      	ldr	r1, [r7, #16]
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80a0 	beq.w	8002208 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c8:	4b58      	ldr	r3, [pc, #352]	; (800222c <HAL_GPIO_Init+0x2d8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a57      	ldr	r2, [pc, #348]	; (800222c <HAL_GPIO_Init+0x2d8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b55      	ldr	r3, [pc, #340]	; (800222c <HAL_GPIO_Init+0x2d8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020e0:	4a53      	ldr	r2, [pc, #332]	; (8002230 <HAL_GPIO_Init+0x2dc>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210a:	d019      	beq.n	8002140 <HAL_GPIO_Init+0x1ec>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1e8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1e4>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a47      	ldr	r2, [pc, #284]	; (800223c <HAL_GPIO_Init+0x2e8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1e0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_GPIO_Init+0x2ec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1dc>
 800212c:	2304      	movs	r3, #4
 800212e:	e008      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002130:	2305      	movs	r3, #5
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002134:	2303      	movs	r3, #3
 8002136:	e004      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002140:	2300      	movs	r3, #0
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002152:	4937      	ldr	r1, [pc, #220]	; (8002230 <HAL_GPIO_Init+0x2dc>)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002184:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021d8:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f aea3 	bne.w	8001f64 <HAL_GPIO_Init+0x10>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	48000400 	.word	0x48000400
 8002238:	48000800 	.word	0x48000800
 800223c:	48000c00 	.word	0x48000c00
 8002240:	48001000 	.word	0x48001000
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002264:	e002      	b.n	800226c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43d9      	mvns	r1, r3
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	400b      	ands	r3, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe ffb0 	bl	8001230 <HAL_GPIO_EXTI_Callback>
  }
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f001 b823 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 817d 	beq.w	8002612 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002318:	4bbc      	ldr	r3, [pc, #752]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b04      	cmp	r3, #4
 8002322:	d00c      	beq.n	800233e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002324:	4bb9      	ldr	r3, [pc, #740]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d15c      	bne.n	80023ea <HAL_RCC_OscConfig+0x10e>
 8002330:	4bb6      	ldr	r3, [pc, #728]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d155      	bne.n	80023ea <HAL_RCC_OscConfig+0x10e>
 800233e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002342:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002352:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x94>
 800236a:	4ba8      	ldr	r3, [pc, #672]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0xc0>
 8002370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002374:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002388:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800238c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002398:	4b9c      	ldr	r3, [pc, #624]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80023a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023a8:	fa92 f2a2 	rbit	r2, r2
 80023ac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80023b0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023b4:	fab2 f282 	clz	r2, r2
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f042 0220 	orr.w	r2, r2, #32
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f002 021f 	and.w	r2, r2, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 811f 	beq.w	8002610 <HAL_RCC_OscConfig+0x334>
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8116 	bne.w	8002610 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f000 bfaf 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x12e>
 80023fc:	4b83      	ldr	r3, [pc, #524]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a82      	ldr	r2, [pc, #520]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e036      	b.n	8002478 <HAL_RCC_OscConfig+0x19c>
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x158>
 800241a:	4b7c      	ldr	r3, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7b      	ldr	r2, [pc, #492]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b79      	ldr	r3, [pc, #484]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a78      	ldr	r2, [pc, #480]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e021      	b.n	8002478 <HAL_RCC_OscConfig+0x19c>
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x184>
 8002446:	4b71      	ldr	r3, [pc, #452]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a70      	ldr	r2, [pc, #448]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b6e      	ldr	r3, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6d      	ldr	r2, [pc, #436]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0x19c>
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a66      	ldr	r2, [pc, #408]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002478:	4b64      	ldr	r3, [pc, #400]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f023 020f 	bic.w	r2, r3, #15
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	495f      	ldr	r1, [pc, #380]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800248e:	4313      	orrs	r3, r2
 8002490:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d059      	beq.n	8002556 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fc15 	bl	8001cd0 <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fc10 	bl	8001cd0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	; 0x64
 80024ba:	d902      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	f000 bf43 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 80024c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80024d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x218>
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e015      	b.n	8002520 <HAL_RCC_OscConfig+0x244>
 80024f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002510:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002524:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002528:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002534:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002538:	fab2 f282 	clz	r2, r2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f042 0220 	orr.w	r2, r2, #32
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f002 021f 	and.w	r2, r2, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ab      	beq.n	80024ac <HAL_RCC_OscConfig+0x1d0>
 8002554:	e05d      	b.n	8002612 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff fbbb 	bl	8001cd0 <HAL_GetTick>
 800255a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fbb6 	bl	8001cd0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	; 0x64
 800256e:	d902      	bls.n	8002576 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f000 bee9 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800258a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2cc>
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	e015      	b.n	80025d4 <HAL_RCC_OscConfig+0x2f8>
 80025a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80025dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025e0:	fa92 f2a2 	rbit	r2, r2
 80025e4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80025e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80025ec:	fab2 f282 	clz	r2, r2
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f002 021f 	and.w	r2, r2, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ab      	bne.n	8002560 <HAL_RCC_OscConfig+0x284>
 8002608:	e003      	b.n	8002612 <HAL_RCC_OscConfig+0x336>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 817d 	beq.w	8002922 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002628:	4ba6      	ldr	r3, [pc, #664]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002634:	4ba3      	ldr	r3, [pc, #652]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d172      	bne.n	8002726 <HAL_RCC_OscConfig+0x44a>
 8002640:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d16c      	bne.n	8002726 <HAL_RCC_OscConfig+0x44a>
 800264c:	2302      	movs	r3, #2
 800264e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800265e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_RCC_OscConfig+0x3a0>
 8002676:	4b93      	ldr	r3, [pc, #588]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0x3c8>
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002694:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026a0:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2202      	movs	r2, #2
 80026a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026ae:	fa92 f2a2 	rbit	r2, r2
 80026b2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026b6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCC_OscConfig+0x410>
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f000 be2e 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	21f8      	movs	r1, #248	; 0xf8
 8002702:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800270a:	fa91 f1a1 	rbit	r1, r1
 800270e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002712:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002716:	fab1 f181 	clz	r1, r1
 800271a:	b2c9      	uxtb	r1, r1
 800271c:	408b      	lsls	r3, r1
 800271e:	4969      	ldr	r1, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002724:	e0fd      	b.n	8002922 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8088 	beq.w	8002848 <HAL_RCC_OscConfig+0x56c>
 8002738:	2301      	movs	r3, #1
 800273a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800274a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	2301      	movs	r3, #1
 8002762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fab4 	bl	8001cd0 <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7ff faaf 	bl	8001cd0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	f000 bde2 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002784:	2302      	movs	r3, #2
 8002786:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002796:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4d8>
 80027ae:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e013      	b.n	80027dc <HAL_RCC_OscConfig+0x500>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2202      	movs	r2, #2
 80027de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80027e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80027ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0af      	beq.n	800276e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	21f8      	movs	r1, #248	; 0xf8
 8002824:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800282c:	fa91 f1a1 	rbit	r1, r1
 8002830:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002834:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002838:	fab1 f181 	clz	r1, r1
 800283c:	b2c9      	uxtb	r1, r1
 800283e:	408b      	lsls	r3, r1
 8002840:	4920      	ldr	r1, [pc, #128]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
 8002846:	e06c      	b.n	8002922 <HAL_RCC_OscConfig+0x646>
 8002848:	2301      	movs	r3, #1
 800284a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800285a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002868:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fa2c 	bl	8001cd0 <HAL_GetTick>
 8002878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287e:	f7ff fa27 	bl	8001cd0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	f000 bd5a 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d104      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5ec>
 80028be:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e015      	b.n	80028f0 <HAL_RCC_OscConfig+0x614>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80028ec:	4bc8      	ldr	r3, [pc, #800]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2202      	movs	r2, #2
 80028f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80028f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028fa:	fa92 f2a2 	rbit	r2, r2
 80028fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002902:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0220 	orr.w	r2, r2, #32
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ad      	bne.n	800287e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8110 	beq.w	8002b58 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d079      	beq.n	8002a3c <HAL_RCC_OscConfig+0x760>
 8002948:	2301      	movs	r3, #1
 800294a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800295a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4bab      	ldr	r3, [pc, #684]	; (8002c14 <HAL_RCC_OscConfig+0x938>)
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	461a      	mov	r2, r3
 800296e:	2301      	movs	r3, #1
 8002970:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7ff f9ad 	bl	8001cd0 <HAL_GetTick>
 8002976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297c:	f7ff f9a8 	bl	8001cd0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d902      	bls.n	8002992 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	f000 bcdb 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029d0:	2202      	movs	r2, #2
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	fa93 f2a3 	rbit	r2, r3
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 80029ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029f8:	2102      	movs	r1, #2
 80029fa:	6019      	str	r1, [r3, #0]
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f1a3 	rbit	r1, r3
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a12:	6019      	str	r1, [r3, #0]
  return result;
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0a0      	beq.n	800297c <HAL_RCC_OscConfig+0x6a0>
 8002a3a:	e08d      	b.n	8002b58 <HAL_RCC_OscConfig+0x87c>
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a5e:	601a      	str	r2, [r3, #0]
  return result;
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x938>)
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7ff f927 	bl	8001cd0 <HAL_GetTick>
 8002a82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a88:	f7ff f922 	bl	8001cd0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d902      	bls.n	8002a9e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f000 bc55 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002aca:	2202      	movs	r2, #2
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002aee:	2202      	movs	r2, #2
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	fa93 f2a3 	rbit	r2, r3
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b16:	2102      	movs	r1, #2
 8002b18:	6019      	str	r1, [r3, #0]
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f1a3 	rbit	r1, r3
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b30:	6019      	str	r1, [r3, #0]
  return result;
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d197      	bne.n	8002a88 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 81a1 	beq.w	8002eb0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d116      	bne.n	8002bae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ba6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7ff f883 	bl	8001cd0 <HAL_GetTick>
 8002bca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	e009      	b.n	8002be4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7ff f87e 	bl	8001cd0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b64      	cmp	r3, #100	; 0x64
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e3b1      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_OscConfig+0x940>
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a02      	ldr	r2, [pc, #8]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	e03c      	b.n	8002c88 <HAL_RCC_OscConfig+0x9ac>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	10908120 	.word	0x10908120
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x96a>
 8002c2c:	4bc1      	ldr	r3, [pc, #772]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4ac0      	ldr	r2, [pc, #768]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	4bbe      	ldr	r3, [pc, #760]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4abd      	ldr	r2, [pc, #756]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	e020      	b.n	8002c88 <HAL_RCC_OscConfig+0x9ac>
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x994>
 8002c56:	4bb7      	ldr	r3, [pc, #732]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4ab6      	ldr	r2, [pc, #728]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6213      	str	r3, [r2, #32]
 8002c62:	4bb4      	ldr	r3, [pc, #720]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4ab3      	ldr	r2, [pc, #716]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0x9ac>
 8002c70:	4bb0      	ldr	r3, [pc, #704]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4aaf      	ldr	r2, [pc, #700]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	4bad      	ldr	r3, [pc, #692]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4aac      	ldr	r2, [pc, #688]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8081 	beq.w	8002d9c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7ff f819 	bl	8001cd0 <HAL_GetTick>
 8002c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f814 	bl	8001cd0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e345      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ce8:	2202      	movs	r2, #2
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d0c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_OscConfig+0xa4c>
 8002d22:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	e013      	b.n	8002d50 <HAL_RCC_OscConfig+0xa74>
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d30:	2202      	movs	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d54:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d58:	2102      	movs	r1, #2
 8002d5a:	6011      	str	r1, [r2, #0]
 8002d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	fa92 f1a2 	rbit	r1, r2
 8002d6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d6e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d72:	6011      	str	r1, [r2, #0]
  return result;
 8002d74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d78:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d084      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x9c8>
 8002d9a:	e07f      	b.n	8002e9c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe ff98 	bl	8001cd0 <HAL_GetTick>
 8002da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe ff93 	bl	8001cd0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e2c4      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fa93 f2a3 	rbit	r2, r3
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e04:	601a      	str	r2, [r3, #0]
  return result;
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_OscConfig+0xb4e>
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	e013      	b.n	8002e52 <HAL_RCC_OscConfig+0xb76>
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e32:	2202      	movs	r2, #2
 8002e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	fa93 f2a3 	rbit	r2, r3
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e56:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	6011      	str	r1, [r2, #0]
 8002e5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fa92 f1a2 	rbit	r1, r2
 8002e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e74:	6011      	str	r1, [r2, #0]
  return result;
 8002e76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	fab2 f282 	clz	r2, r2
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	f002 021f 	and.w	r2, r2, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d184      	bne.n	8002da6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e9c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8242 	beq.w	8003346 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	f000 8213 	beq.w	80032f6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	f040 8162 	bne.w	80031a6 <HAL_RCC_OscConfig+0xeca>
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f06:	601a      	str	r2, [r3, #0]
  return result;
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	2300      	movs	r3, #0
 8002f26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fed2 	bl	8001cd0 <HAL_GetTick>
 8002f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f30:	e00c      	b.n	8002f4c <HAL_RCC_OscConfig+0xc70>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe feca 	bl	8001cd0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e1fd      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f70:	601a      	str	r2, [r3, #0]
  return result;
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d102      	bne.n	8002f96 <HAL_RCC_OscConfig+0xcba>
 8002f90:	4bb0      	ldr	r3, [pc, #704]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	e027      	b.n	8002fe6 <HAL_RCC_OscConfig+0xd0a>
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	4b9c      	ldr	r3, [pc, #624]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002fee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ff2:	6011      	str	r1, [r2, #0]
 8002ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	fa92 f1a2 	rbit	r1, r2
 8003002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003006:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800300a:	6011      	str	r1, [r2, #0]
  return result;
 800300c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003010:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f042 0220 	orr.w	r2, r2, #32
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f002 021f 	and.w	r2, r2, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d182      	bne.n	8002f38 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	430b      	orrs	r3, r1
 8003054:	497f      	ldr	r1, [pc, #508]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003062:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800307e:	601a      	str	r2, [r3, #0]
  return result;
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003088:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	461a      	mov	r2, r3
 800309c:	2301      	movs	r3, #1
 800309e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fe16 	bl	8001cd0 <HAL_GetTick>
 80030a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a8:	e009      	b.n	80030be <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe fe11 	bl	8001cd0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e144      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030e2:	601a      	str	r2, [r3, #0]
  return result;
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_RCC_OscConfig+0xe2c>
 8003102:	4b54      	ldr	r3, [pc, #336]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e027      	b.n	8003158 <HAL_RCC_OscConfig+0xe7c>
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003160:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800316a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	fa92 f1a2 	rbit	r1, r2
 8003174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003178:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800317c:	6011      	str	r1, [r2, #0]
  return result;
 800317e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003182:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d082      	beq.n	80030aa <HAL_RCC_OscConfig+0xdce>
 80031a4:	e0cf      	b.n	8003346 <HAL_RCC_OscConfig+0x106a>
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031ca:	601a      	str	r2, [r3, #0]
  return result;
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fd70 	bl	8001cd0 <HAL_GetTick>
 80031f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	e009      	b.n	800320a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fd6b 	bl	8001cd0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e09e      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fa93 f2a3 	rbit	r2, r3
 8003226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800322e:	601a      	str	r2, [r3, #0]
  return result;
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003238:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d104      	bne.n	8003258 <HAL_RCC_OscConfig+0xf7c>
 800324e:	4b01      	ldr	r3, [pc, #4]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e029      	b.n	80032a8 <HAL_RCC_OscConfig+0xfcc>
 8003254:	40021000 	.word	0x40021000
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_OscConfig+0x1078>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	fa92 f1a2 	rbit	r1, r2
 80032c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032cc:	6011      	str	r1, [r2, #0]
  return result;
 80032ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f002 021f 	and.w	r2, r2, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d180      	bne.n	80031f6 <HAL_RCC_OscConfig+0xf1a>
 80032f4:	e027      	b.n	8003346 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e01e      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_OscConfig+0x1078>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003312:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003316:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	429a      	cmp	r2, r3
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800332a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800332e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b09e      	sub	sp, #120	; 0x78
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e162      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003370:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d910      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b8d      	ldr	r3, [pc, #564]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 0207 	bic.w	r2, r3, #7
 8003386:	498b      	ldr	r1, [pc, #556]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b89      	ldr	r3, [pc, #548]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e14a      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	497f      	ldr	r1, [pc, #508]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80dc 	beq.w	8003584 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d13c      	bne.n	800344e <HAL_RCC_ClockConfig+0xf6>
 80033d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_ClockConfig+0xa6>
 80033f8:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	e00f      	b.n	800341e <HAL_RCC_ClockConfig+0xc6>
 80033fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003402:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	667b      	str	r3, [r7, #100]	; 0x64
 800340c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003410:	663b      	str	r3, [r7, #96]	; 0x60
 8003412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800341a:	4b67      	ldr	r3, [pc, #412]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003422:	65ba      	str	r2, [r7, #88]	; 0x58
 8003424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800342c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d17b      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0f3      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d13c      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x178>
 8003456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_RCC_ClockConfig+0x128>
 800347a:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e00f      	b.n	80034a0 <HAL_RCC_ClockConfig+0x148>
 8003480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	647b      	str	r3, [r7, #68]	; 0x44
 800348e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003492:	643b      	str	r3, [r7, #64]	; 0x40
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80034a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f042 0220 	orr.w	r2, r2, #32
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f002 021f 	and.w	r2, r2, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f202 	lsl.w	r2, r1, r2
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d13a      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b2      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
 80034d0:	2302      	movs	r3, #2
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x1a0>
 80034f2:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e00d      	b.n	8003514 <HAL_RCC_ClockConfig+0x1bc>
 80034f8:	2302      	movs	r3, #2
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	2302      	movs	r3, #2
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2202      	movs	r2, #2
 8003516:	61ba      	str	r2, [r7, #24]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	617a      	str	r2, [r7, #20]
  return result;
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f042 0220 	orr.w	r2, r2, #32
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f002 021f 	and.w	r2, r2, #31
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e079      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	491a      	ldr	r1, [pc, #104]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003554:	f7fe fbbc 	bl	8001cd0 <HAL_GetTick>
 8003558:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	e00a      	b.n	8003572 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fe fbb8 	bl	8001cd0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e061      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 020c 	and.w	r2, r3, #12
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	429a      	cmp	r2, r3
 8003582:	d1eb      	bne.n	800355c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d214      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4906      	ldr	r1, [pc, #24]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e040      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
 80035b4:	40022000 	.word	0x40022000
 80035b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	491a      	ldr	r1, [pc, #104]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4912      	ldr	r1, [pc, #72]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035fa:	f000 f829 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80035fe:	4601      	mov	r1, r0
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003608:	22f0      	movs	r2, #240	; 0xf0
 800360a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	fa92 f2a2 	rbit	r2, r2
 8003612:	60fa      	str	r2, [r7, #12]
  return result;
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	40d3      	lsrs	r3, r2
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x2ec>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	fa21 f303 	lsr.w	r3, r1, r3
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <HAL_RCC_ClockConfig+0x2f0>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCC_ClockConfig+0x2f4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fb0a 	bl	8001c48 <HAL_InitTick>
  
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3778      	adds	r7, #120	; 0x78
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	0800841c 	.word	0x0800841c
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004

08003650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b08b      	sub	sp, #44	; 0x2c
 8003654:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc0>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d002      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x30>
 800367a:	2b08      	cmp	r3, #8
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x36>
 800367e:	e03c      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003682:	623b      	str	r3, [r7, #32]
      break;
 8003684:	e03c      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800368c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003690:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	fa92 f2a2 	rbit	r2, r2
 8003698:	607a      	str	r2, [r7, #4]
  return result;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	40d3      	lsrs	r3, r2
 80036a4:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	220f      	movs	r2, #15
 80036b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	fa92 f2a2 	rbit	r2, r2
 80036bc:	60fa      	str	r2, [r7, #12]
  return result;
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	40d3      	lsrs	r3, r2
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <HAL_RCC_GetSysClockFreq+0xcc>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036d8:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
 80036e8:	e004      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	623b      	str	r3, [r7, #32]
      break;
 80036f8:	e002      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036fc:	623b      	str	r3, [r7, #32]
      break;
 80036fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003700:	6a3b      	ldr	r3, [r7, #32]
}
 8003702:	4618      	mov	r0, r3
 8003704:	372c      	adds	r7, #44	; 0x2c
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	007a1200 	.word	0x007a1200
 8003718:	08008434 	.word	0x08008434
 800371c:	08008444 	.word	0x08008444
 8003720:	003d0900 	.word	0x003d0900

08003724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCC_GetHCLKFreq+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000000 	.word	0x20000000

0800373c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003742:	f7ff ffef 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003746:	4601      	mov	r1, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003750:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003754:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	fa92 f2a2 	rbit	r2, r2
 800375c:	603a      	str	r2, [r7, #0]
  return result;
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	fab2 f282 	clz	r2, r2
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	40d3      	lsrs	r3, r2
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_RCC_GetPCLK1Freq+0x40>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	0800842c 	.word	0x0800842c

08003780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003786:	f7ff ffcd 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 800378a:	4601      	mov	r1, r0
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003794:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003798:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	fa92 f2a2 	rbit	r2, r2
 80037a0:	603a      	str	r2, [r7, #0]
  return result;
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	40d3      	lsrs	r3, r2
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	0800842c 	.word	0x0800842c

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b092      	sub	sp, #72	; 0x48
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80d4 	beq.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e8:	4b4e      	ldr	r3, [pc, #312]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10e      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	61d3      	str	r3, [r2, #28]
 8003800:	4b48      	ldr	r3, [pc, #288]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b45      	ldr	r3, [pc, #276]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b42      	ldr	r3, [pc, #264]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a41      	ldr	r2, [pc, #260]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fe fa51 	bl	8001cd0 <HAL_GetTick>
 800382e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fe fa4d 	bl	8001cd0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	; 0x64
 800383e:	d901      	bls.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e12d      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003850:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8084 	beq.w	800396a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800386c:	429a      	cmp	r2, r3
 800386e:	d07c      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003870:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	461a      	mov	r2, r3
 800389a:	2301      	movs	r3, #1
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	461a      	mov	r2, r3
 80038be:	2300      	movs	r3, #0
 80038c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d04b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d2:	f7fe f9fd 	bl	8001cd0 <HAL_GetTick>
 80038d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe f9f9 	bl	8001cd0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0d7      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80038f0:	2302      	movs	r3, #2
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	2302      	movs	r3, #2
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	61fb      	str	r3, [r7, #28]
  return result;
 8003908:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d108      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800391e:	4b01      	ldr	r3, [pc, #4]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	e00d      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003924:	40021000 	.word	0x40021000
 8003928:	40007000 	.word	0x40007000
 800392c:	10908100 	.word	0x10908100
 8003930:	2302      	movs	r3, #2
 8003932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	4b5a      	ldr	r3, [pc, #360]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2202      	movs	r2, #2
 8003942:	613a      	str	r2, [r7, #16]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	fa92 f2a2 	rbit	r2, r2
 800394a:	60fa      	str	r2, [r7, #12]
  return result;
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	fab2 f282 	clz	r2, r2
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f002 021f 	and.w	r2, r2, #31
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0b7      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800396a:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	494c      	ldr	r1, [pc, #304]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800397c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b48      	ldr	r3, [pc, #288]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4a47      	ldr	r2, [pc, #284]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800399c:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f023 0203 	bic.w	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	493f      	ldr	r1, [pc, #252]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4938      	ldr	r1, [pc, #224]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d8:	4b33      	ldr	r3, [pc, #204]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	4930      	ldr	r1, [pc, #192]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f6:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f023 0210 	bic.w	r2, r3, #16
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4929      	ldr	r1, [pc, #164]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	4921      	ldr	r1, [pc, #132]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f023 0220 	bic.w	r2, r3, #32
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	491a      	ldr	r1, [pc, #104]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003a50:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	4912      	ldr	r1, [pc, #72]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	490b      	ldr	r1, [pc, #44]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	4903      	ldr	r1, [pc, #12]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3748      	adds	r7, #72	; 0x48
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000

08003aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e09d      	b.n	8003bfa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ace:	d009      	beq.n	8003ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61da      	str	r2, [r3, #28]
 8003ad6:	e005      	b.n	8003ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fc4a 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b24:	d902      	bls.n	8003b2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e002      	b.n	8003b32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b3a:	d007      	beq.n	8003b4c <HAL_SPI_Init+0xa0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	ea42 0103 	orr.w	r1, r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	f003 0204 	and.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bc8:	ea42 0103 	orr.w	r1, r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b088      	sub	sp, #32
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_SPI_Transmit+0x22>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e158      	b.n	8003ed6 <HAL_SPI_Transmit+0x2d4>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c2c:	f7fe f850 	bl	8001cd0 <HAL_GetTick>
 8003c30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d002      	beq.n	8003c48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
 8003c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c46:	e13d      	b.n	8003ec4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Transmit+0x52>
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c58:	e134      	b.n	8003ec4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d007      	beq.n	8003ce4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cec:	d94b      	bls.n	8003d86 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_Transmit+0xfa>
 8003cf6:	8afb      	ldrh	r3, [r7, #22]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d13e      	bne.n	8003d7a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d20:	e02b      	b.n	8003d7a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d112      	bne.n	8003d56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	881a      	ldrh	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d54:	e011      	b.n	8003d7a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d56:	f7fd ffbb 	bl	8001cd0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d803      	bhi.n	8003d6e <HAL_SPI_Transmit+0x16c>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d102      	bne.n	8003d74 <HAL_SPI_Transmit+0x172>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d78:	e0a4      	b.n	8003ec4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ce      	bne.n	8003d22 <HAL_SPI_Transmit+0x120>
 8003d84:	e07c      	b.n	8003e80 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_Transmit+0x192>
 8003d8e:	8afb      	ldrh	r3, [r7, #22]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d170      	bne.n	8003e76 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d912      	bls.n	8003dc4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	881a      	ldrh	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b02      	subs	r3, #2
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc2:	e058      	b.n	8003e76 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dea:	e044      	b.n	8003e76 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d12b      	bne.n	8003e52 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d912      	bls.n	8003e2a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b02      	subs	r3, #2
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e28:	e025      	b.n	8003e76 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e50:	e011      	b.n	8003e76 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e52:	f7fd ff3d 	bl	8001cd0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d803      	bhi.n	8003e6a <HAL_SPI_Transmit+0x268>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d102      	bne.n	8003e70 <HAL_SPI_Transmit+0x26e>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e74:	e026      	b.n	8003ec4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1b5      	bne.n	8003dec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	6839      	ldr	r1, [r7, #0]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fb5b 	bl	8004540 <SPI_EndRxTxTransaction>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e000      	b.n	8003ec4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ec2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08a      	sub	sp, #40	; 0x28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eec:	2301      	movs	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x26>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e1fb      	b.n	80042fc <HAL_SPI_TransmitReceive+0x41e>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f0c:	f7fd fee0 	bl	8001cd0 <HAL_GetTick>
 8003f10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f28:	7efb      	ldrb	r3, [r7, #27]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d00e      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x6e>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f34:	d106      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x66>
 8003f3e:	7efb      	ldrb	r3, [r7, #27]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d003      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f4a:	e1cd      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x80>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x80>
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f64:	e1c0      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d003      	beq.n	8003f7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	887a      	ldrh	r2, [r7, #2]
 8003f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	887a      	ldrh	r2, [r7, #2]
 8003fa6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fbc:	d802      	bhi.n	8003fc4 <HAL_SPI_TransmitReceive+0xe6>
 8003fbe:	8a3b      	ldrh	r3, [r7, #16]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d908      	bls.n	8003fd6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	e007      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fe4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d007      	beq.n	8004004 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800400c:	d97c      	bls.n	8004108 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_TransmitReceive+0x13e>
 8004016:	8a7b      	ldrh	r3, [r7, #18]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d169      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	1c9a      	adds	r2, r3, #2
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004040:	e056      	b.n	80040f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d11b      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x1aa>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x1aa>
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	2b01      	cmp	r3, #1
 800405e:	d113      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d11c      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x1f2>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	b292      	uxth	r2, r2
 80040ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040cc:	2301      	movs	r3, #1
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040d0:	f7fd fdfe 	bl	8001cd0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040dc:	429a      	cmp	r2, r3
 80040de:	d807      	bhi.n	80040f0 <HAL_SPI_TransmitReceive+0x212>
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d003      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040ee:	e0fb      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1a3      	bne.n	8004042 <HAL_SPI_TransmitReceive+0x164>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d19d      	bne.n	8004042 <HAL_SPI_TransmitReceive+0x164>
 8004106:	e0df      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_SPI_TransmitReceive+0x23a>
 8004110:	8a7b      	ldrh	r3, [r7, #18]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 80cb 	bne.w	80042ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d912      	bls.n	8004148 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	881a      	ldrh	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	1c9a      	adds	r2, r3, #2
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b02      	subs	r3, #2
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004146:	e0b2      	b.n	80042ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416e:	e09e      	b.n	80042ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d134      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x30a>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02f      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x30a>
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	2b01      	cmp	r3, #1
 800418c:	d12c      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d912      	bls.n	80041be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	881a      	ldrh	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	1c9a      	adds	r2, r3, #2
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b02      	subs	r3, #2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041bc:	e012      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	7812      	ldrb	r2, [r2, #0]
 80041ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d148      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x3aa>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d042      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d923      	bls.n	8004256 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	b292      	uxth	r2, r2
 800421a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	1c9a      	adds	r2, r3, #2
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b02      	subs	r3, #2
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d81f      	bhi.n	8004284 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	e016      	b.n	8004284 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f103 020c 	add.w	r2, r3, #12
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004284:	2301      	movs	r3, #1
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004288:	f7fd fd22 	bl	8001cd0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004294:	429a      	cmp	r2, r3
 8004296:	d803      	bhi.n	80042a0 <HAL_SPI_TransmitReceive+0x3c2>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d102      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x3c8>
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042ac:	e01c      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f47f af5b 	bne.w	8004170 <HAL_SPI_TransmitReceive+0x292>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f47f af54 	bne.w	8004170 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f937 	bl	8004540 <SPI_EndRxTxTransaction>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d006      	beq.n	80042e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60
 80042e4:	e000      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80042e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3728      	adds	r7, #40	; 0x28
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004314:	f7fd fcdc 	bl	8001cd0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	4413      	add	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004324:	f7fd fcd4 	bl	8001cd0 <HAL_GetTick>
 8004328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	015b      	lsls	r3, r3, #5
 8004330:	0d1b      	lsrs	r3, r3, #20
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433a:	e054      	b.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d050      	beq.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004344:	f7fd fcc4 	bl	8001cd0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	429a      	cmp	r2, r3
 8004352:	d902      	bls.n	800435a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d13d      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004372:	d111      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d004      	beq.n	8004388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d107      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a0:	d10f      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e017      	b.n	8004406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d19b      	bne.n	800433c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000000 	.word	0x20000000

08004414 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004426:	f7fd fc53 	bl	8001cd0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4413      	add	r3, r2
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004436:	f7fd fc4b 	bl	8001cd0 <HAL_GetTick>
 800443a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004444:	4b3d      	ldr	r3, [pc, #244]	; (800453c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00da      	lsls	r2, r3, #3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	0d1b      	lsrs	r3, r3, #20
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800445c:	e060      	b.n	8004520 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004464:	d107      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004474:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d050      	beq.n	8004520 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800447e:	f7fd fc27 	bl	8001cd0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448a:	429a      	cmp	r2, r3
 800448c:	d902      	bls.n	8004494 <SPI_WaitFifoStateUntilTimeout+0x80>
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d13d      	bne.n	8004510 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ac:	d111      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b6:	d004      	beq.n	80044c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c0:	d107      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044da:	d10f      	bne.n	80044fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e010      	b.n	8004532 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	3b01      	subs	r3, #1
 800451e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d196      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3728      	adds	r7, #40	; 0x28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000000 	.word	0x20000000

08004540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2200      	movs	r2, #0
 8004554:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff ff5b 	bl	8004414 <SPI_WaitFifoStateUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e027      	b.n	80045c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff fec0 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e014      	b.n	80045c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff ff34 	bl	8004414 <SPI_WaitFifoStateUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e000      	b.n	80045c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e041      	b.n	8004662 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc ff80 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 fa0e 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d001      	beq.n	8004684 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e041      	b.n	8004708 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d01d      	beq.n	80046d2 <HAL_TIM_Base_Start+0x66>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_TIM_Base_Start+0xa8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_TIM_Base_Start+0x66>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_TIM_Base_Start+0xac>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_TIM_Base_Start+0x66>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_TIM_Base_Start+0xb0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_TIM_Base_Start+0x66>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_TIM_Base_Start+0xb4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIM_Base_Start+0x66>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_TIM_Base_Start+0xb8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIM_Base_Start+0x66>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_TIM_Base_Start+0xbc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d111      	bne.n	80046f6 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d010      	beq.n	8004706 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f4:	e007      	b.n	8004706 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40001800 	.word	0x40001800
 8004724:	40014000 	.word	0x40014000
 8004728:	40015c00 	.word	0x40015c00

0800472c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e041      	b.n	80047c2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f839 	bl	80047ca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 f95e 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <HAL_TIM_OC_Start+0x24>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e022      	b.n	800484a <HAL_TIM_OC_Start+0x6a>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b04      	cmp	r3, #4
 8004808:	d109      	bne.n	800481e <HAL_TIM_OC_Start+0x3e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b01      	cmp	r3, #1
 8004814:	bf14      	ite	ne
 8004816:	2301      	movne	r3, #1
 8004818:	2300      	moveq	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e015      	b.n	800484a <HAL_TIM_OC_Start+0x6a>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d109      	bne.n	8004838 <HAL_TIM_OC_Start+0x58>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e008      	b.n	800484a <HAL_TIM_OC_Start+0x6a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07c      	b.n	800494c <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <HAL_TIM_OC_Start+0x82>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	e013      	b.n	800488a <HAL_TIM_OC_Start+0xaa>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d104      	bne.n	8004872 <HAL_TIM_OC_Start+0x92>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004870:	e00b      	b.n	800488a <HAL_TIM_OC_Start+0xaa>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d104      	bne.n	8004882 <HAL_TIM_OC_Start+0xa2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004880:	e003      	b.n	800488a <HAL_TIM_OC_Start+0xaa>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fabd 	bl	8004e12 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <HAL_TIM_OC_Start+0x174>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIM_OC_Start+0xd6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <HAL_TIM_OC_Start+0x178>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_OC_Start+0xd6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <HAL_TIM_OC_Start+0x17c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_OC_Start+0xda>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_TIM_OC_Start+0xdc>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d8:	d01d      	beq.n	8004916 <HAL_TIM_OC_Start+0x136>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <HAL_TIM_OC_Start+0x180>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_TIM_OC_Start+0x136>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_TIM_OC_Start+0x184>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_TIM_OC_Start+0x136>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_TIM_OC_Start+0x188>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_TIM_OC_Start+0x136>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_TIM_OC_Start+0x18c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_TIM_OC_Start+0x136>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a13      	ldr	r2, [pc, #76]	; (8004954 <HAL_TIM_OC_Start+0x174>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_TIM_OC_Start+0x136>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_TIM_OC_Start+0x190>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d111      	bne.n	800493a <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b06      	cmp	r3, #6
 8004926:	d010      	beq.n	800494a <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	e007      	b.n	800494a <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40001800 	.word	0x40001800
 8004970:	40015c00 	.word	0x40015c00

08004974 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_TIM_OC_ConfigChannel+0x1e>
 800498e:	2302      	movs	r3, #2
 8004990:	e048      	b.n	8004a24 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d839      	bhi.n	8004a14 <HAL_TIM_OC_ConfigChannel+0xa0>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004a15 	.word	0x08004a15
 80049b4:	08004a15 	.word	0x08004a15
 80049b8:	080049eb 	.word	0x080049eb
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004a15 	.word	0x08004a15
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	08004a15 	.word	0x08004a15
 80049d0:	08004a15 	.word	0x08004a15
 80049d4:	08004a15 	.word	0x08004a15
 80049d8:	08004a07 	.word	0x08004a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f8bc 	bl	8004b60 <TIM_OC1_SetConfig>
      break;
 80049e8:	e017      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f92f 	bl	8004c54 <TIM_OC2_SetConfig>
      break;
 80049f6:	e010      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f98a 	bl	8004d18 <TIM_OC3_SetConfig>
      break;
 8004a04:	e009      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f9c1 	bl	8004d94 <TIM_OC4_SetConfig>
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
      break;
 8004a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a42:	d00f      	beq.n	8004a64 <TIM_Base_SetConfig+0x38>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a3c      	ldr	r2, [pc, #240]	; (8004b38 <TIM_Base_SetConfig+0x10c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_Base_SetConfig+0x38>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a3b      	ldr	r2, [pc, #236]	; (8004b3c <TIM_Base_SetConfig+0x110>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <TIM_Base_SetConfig+0x38>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a3a      	ldr	r2, [pc, #232]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_Base_SetConfig+0x38>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <TIM_Base_SetConfig+0x118>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d108      	bne.n	8004a76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7c:	d027      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2d      	ldr	r2, [pc, #180]	; (8004b38 <TIM_Base_SetConfig+0x10c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d023      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <TIM_Base_SetConfig+0x110>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01f      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01b      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2b      	ldr	r2, [pc, #172]	; (8004b48 <TIM_Base_SetConfig+0x11c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d017      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <TIM_Base_SetConfig+0x120>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a29      	ldr	r2, [pc, #164]	; (8004b50 <TIM_Base_SetConfig+0x124>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00f      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <TIM_Base_SetConfig+0x128>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <TIM_Base_SetConfig+0x12c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <TIM_Base_SetConfig+0x130>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_Base_SetConfig+0xa2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <TIM_Base_SetConfig+0x118>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d108      	bne.n	8004ae0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <TIM_Base_SetConfig+0x128>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_Base_SetConfig+0xf0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <TIM_Base_SetConfig+0x12c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_Base_SetConfig+0xf0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <TIM_Base_SetConfig+0x130>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d103      	bne.n	8004b24 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	615a      	str	r2, [r3, #20]
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40015c00 	.word	0x40015c00
 8004b48:	40001800 	.word	0x40001800
 8004b4c:	40001c00 	.word	0x40001c00
 8004b50:	40002000 	.word	0x40002000
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800

08004b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0302 	bic.w	r3, r3, #2
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <TIM_OC1_SetConfig+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_OC1_SetConfig+0x6c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <TIM_OC1_SetConfig+0xec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_OC1_SetConfig+0x6c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <TIM_OC1_SetConfig+0xf0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d10c      	bne.n	8004be6 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 0308 	bic.w	r3, r3, #8
 8004bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <TIM_OC1_SetConfig+0xe8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_OC1_SetConfig+0x9e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <TIM_OC1_SetConfig+0xec>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC1_SetConfig+0x9e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <TIM_OC1_SetConfig+0xf0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d111      	bne.n	8004c22 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40014400 	.word	0x40014400
 8004c50:	40014800 	.word	0x40014800

08004c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f023 0210 	bic.w	r2, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <TIM_OC2_SetConfig+0xb8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_OC2_SetConfig+0x70>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <TIM_OC2_SetConfig+0xbc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC2_SetConfig+0x70>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <TIM_OC2_SetConfig+0xc0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d10f      	bne.n	8004ce4 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cca:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800

08004d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	621a      	str	r2, [r3, #32]
}
 8004d88:	bf00      	nop
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	031b      	lsls	r3, r3, #12
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b087      	sub	sp, #28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	2201      	movs	r2, #1
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	401a      	ands	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1a      	ldr	r2, [r3, #32]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e03d      	b.n	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e040      	b.n	8004f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fb8e 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8c0 	bl	80050c4 <UART_SetConfig>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e022      	b.n	8004f94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa2e 	bl	80053b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fab5 	bl	80054fc <UART_CheckIdleState>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	f040 8082 	bne.w	80050ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_UART_Transmit+0x26>
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e07a      	b.n	80050bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_UART_Transmit+0x38>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e073      	b.n	80050bc <HAL_UART_Transmit+0x120>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2221      	movs	r2, #33	; 0x21
 8004fe8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fea:	f7fc fe71 	bl	8001cd0 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005008:	d108      	bne.n	800501c <HAL_UART_Transmit+0x80>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	e003      	b.n	8005024 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800502c:	e02d      	b.n	800508a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 faa8 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e039      	b.n	80050bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	881a      	ldrh	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800505a:	b292      	uxth	r2, r2
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3302      	adds	r3, #2
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e008      	b.n	8005078 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b292      	uxth	r2, r2
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1cb      	bne.n	800502e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2200      	movs	r2, #0
 800509e:	2140      	movs	r1, #64	; 0x40
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fa74 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e005      	b.n	80050bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e000      	b.n	80050bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
  }
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80050f2:	f023 030c 	bic.w	r3, r3, #12
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	6979      	ldr	r1, [r7, #20]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	430a      	orrs	r2, r1
 8005138:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a99      	ldr	r2, [pc, #612]	; (80053a4 <UART_SetConfig+0x2e0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d120      	bne.n	8005186 <UART_SetConfig+0xc2>
 8005144:	4b98      	ldr	r3, [pc, #608]	; (80053a8 <UART_SetConfig+0x2e4>)
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d817      	bhi.n	8005180 <UART_SetConfig+0xbc>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x94>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005169 	.word	0x08005169
 800515c:	08005175 	.word	0x08005175
 8005160:	0800517b 	.word	0x0800517b
 8005164:	0800516f 	.word	0x0800516f
 8005168:	2301      	movs	r3, #1
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e061      	b.n	8005232 <UART_SetConfig+0x16e>
 800516e:	2302      	movs	r3, #2
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	e05e      	b.n	8005232 <UART_SetConfig+0x16e>
 8005174:	2304      	movs	r3, #4
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e05b      	b.n	8005232 <UART_SetConfig+0x16e>
 800517a:	2308      	movs	r3, #8
 800517c:	77fb      	strb	r3, [r7, #31]
 800517e:	e058      	b.n	8005232 <UART_SetConfig+0x16e>
 8005180:	2310      	movs	r3, #16
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e055      	b.n	8005232 <UART_SetConfig+0x16e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a88      	ldr	r2, [pc, #544]	; (80053ac <UART_SetConfig+0x2e8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d124      	bne.n	80051da <UART_SetConfig+0x116>
 8005190:	4b85      	ldr	r3, [pc, #532]	; (80053a8 <UART_SetConfig+0x2e4>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800519c:	d011      	beq.n	80051c2 <UART_SetConfig+0xfe>
 800519e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051a2:	d817      	bhi.n	80051d4 <UART_SetConfig+0x110>
 80051a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051a8:	d011      	beq.n	80051ce <UART_SetConfig+0x10a>
 80051aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ae:	d811      	bhi.n	80051d4 <UART_SetConfig+0x110>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <UART_SetConfig+0xf8>
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b8:	d006      	beq.n	80051c8 <UART_SetConfig+0x104>
 80051ba:	e00b      	b.n	80051d4 <UART_SetConfig+0x110>
 80051bc:	2300      	movs	r3, #0
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e037      	b.n	8005232 <UART_SetConfig+0x16e>
 80051c2:	2302      	movs	r3, #2
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e034      	b.n	8005232 <UART_SetConfig+0x16e>
 80051c8:	2304      	movs	r3, #4
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e031      	b.n	8005232 <UART_SetConfig+0x16e>
 80051ce:	2308      	movs	r3, #8
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e02e      	b.n	8005232 <UART_SetConfig+0x16e>
 80051d4:	2310      	movs	r3, #16
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e02b      	b.n	8005232 <UART_SetConfig+0x16e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a74      	ldr	r2, [pc, #464]	; (80053b0 <UART_SetConfig+0x2ec>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d124      	bne.n	800522e <UART_SetConfig+0x16a>
 80051e4:	4b70      	ldr	r3, [pc, #448]	; (80053a8 <UART_SetConfig+0x2e4>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80051ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051f0:	d011      	beq.n	8005216 <UART_SetConfig+0x152>
 80051f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051f6:	d817      	bhi.n	8005228 <UART_SetConfig+0x164>
 80051f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051fc:	d011      	beq.n	8005222 <UART_SetConfig+0x15e>
 80051fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005202:	d811      	bhi.n	8005228 <UART_SetConfig+0x164>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <UART_SetConfig+0x14c>
 8005208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800520c:	d006      	beq.n	800521c <UART_SetConfig+0x158>
 800520e:	e00b      	b.n	8005228 <UART_SetConfig+0x164>
 8005210:	2300      	movs	r3, #0
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x16e>
 8005216:	2302      	movs	r3, #2
 8005218:	77fb      	strb	r3, [r7, #31]
 800521a:	e00a      	b.n	8005232 <UART_SetConfig+0x16e>
 800521c:	2304      	movs	r3, #4
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e007      	b.n	8005232 <UART_SetConfig+0x16e>
 8005222:	2308      	movs	r3, #8
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e004      	b.n	8005232 <UART_SetConfig+0x16e>
 8005228:	2310      	movs	r3, #16
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e001      	b.n	8005232 <UART_SetConfig+0x16e>
 800522e:	2310      	movs	r3, #16
 8005230:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523a:	d15b      	bne.n	80052f4 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	2b08      	cmp	r3, #8
 8005240:	d827      	bhi.n	8005292 <UART_SetConfig+0x1ce>
 8005242:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x184>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005275 	.word	0x08005275
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005293 	.word	0x08005293
 8005258:	08005283 	.word	0x08005283
 800525c:	08005293 	.word	0x08005293
 8005260:	08005293 	.word	0x08005293
 8005264:	08005293 	.word	0x08005293
 8005268:	0800528b 	.word	0x0800528b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800526c:	f7fe fa66 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8005270:	61b8      	str	r0, [r7, #24]
        break;
 8005272:	e013      	b.n	800529c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7fe fa84 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8005278:	61b8      	str	r0, [r7, #24]
        break;
 800527a:	e00f      	b.n	800529c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800527c:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <UART_SetConfig+0x2f0>)
 800527e:	61bb      	str	r3, [r7, #24]
        break;
 8005280:	e00c      	b.n	800529c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7fe f9e5 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005286:	61b8      	str	r0, [r7, #24]
        break;
 8005288:	e008      	b.n	800529c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528e:	61bb      	str	r3, [r7, #24]
        break;
 8005290:	e004      	b.n	800529c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	77bb      	strb	r3, [r7, #30]
        break;
 800529a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d074      	beq.n	800538c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	005a      	lsls	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b0f      	cmp	r3, #15
 80052be:	d916      	bls.n	80052ee <UART_SetConfig+0x22a>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d212      	bcs.n	80052ee <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f023 030f 	bic.w	r3, r3, #15
 80052d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	b29a      	uxth	r2, r3
 80052de:	89fb      	ldrh	r3, [r7, #14]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	89fa      	ldrh	r2, [r7, #14]
 80052ea:	60da      	str	r2, [r3, #12]
 80052ec:	e04e      	b.n	800538c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	77bb      	strb	r3, [r7, #30]
 80052f2:	e04b      	b.n	800538c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f4:	7ffb      	ldrb	r3, [r7, #31]
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d827      	bhi.n	800534a <UART_SetConfig+0x286>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <UART_SetConfig+0x23c>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005325 	.word	0x08005325
 8005304:	0800532d 	.word	0x0800532d
 8005308:	08005335 	.word	0x08005335
 800530c:	0800534b 	.word	0x0800534b
 8005310:	0800533b 	.word	0x0800533b
 8005314:	0800534b 	.word	0x0800534b
 8005318:	0800534b 	.word	0x0800534b
 800531c:	0800534b 	.word	0x0800534b
 8005320:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005324:	f7fe fa0a 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8005328:	61b8      	str	r0, [r7, #24]
        break;
 800532a:	e013      	b.n	8005354 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800532c:	f7fe fa28 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8005330:	61b8      	str	r0, [r7, #24]
        break;
 8005332:	e00f      	b.n	8005354 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b1f      	ldr	r3, [pc, #124]	; (80053b4 <UART_SetConfig+0x2f0>)
 8005336:	61bb      	str	r3, [r7, #24]
        break;
 8005338:	e00c      	b.n	8005354 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7fe f989 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800533e:	61b8      	str	r0, [r7, #24]
        break;
 8005340:	e008      	b.n	8005354 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005346:	61bb      	str	r3, [r7, #24]
        break;
 8005348:	e004      	b.n	8005354 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	77bb      	strb	r3, [r7, #30]
        break;
 8005352:	bf00      	nop
    }

    if (pclk != 0U)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d018      	beq.n	800538c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	085a      	lsrs	r2, r3, #1
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	b29b      	uxth	r3, r3
 800536e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d908      	bls.n	8005388 <UART_SetConfig+0x2c4>
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537c:	d204      	bcs.n	8005388 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	e001      	b.n	800538c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005398:	7fbb      	ldrb	r3, [r7, #30]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40013800 	.word	0x40013800
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40004400 	.word	0x40004400
 80053b0:	40004800 	.word	0x40004800
 80053b4:	007a1200 	.word	0x007a1200

080053b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01a      	beq.n	80054ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b6:	d10a      	bne.n	80054ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af02      	add	r7, sp, #8
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800550c:	f7fc fbe0 	bl	8001cd0 <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10e      	bne.n	800553e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f82d 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e023      	b.n	8005586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b04      	cmp	r3, #4
 800554a:	d10e      	bne.n	800556a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800554c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f817 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e00d      	b.n	8005586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b09c      	sub	sp, #112	; 0x70
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4613      	mov	r3, r2
 800559c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559e:	e0a5      	b.n	80056ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	f000 80a1 	beq.w	80056ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fc fb91 	bl	8001cd0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d13e      	bne.n	800563e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055d4:	667b      	str	r3, [r7, #100]	; 0x64
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e6      	bne.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	663b      	str	r3, [r7, #96]	; 0x60
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005612:	64ba      	str	r2, [r7, #72]	; 0x48
 8005614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e5      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e067      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d04f      	beq.n	80056ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565a:	d147      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005664:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800567a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
 8005686:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800568a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	613b      	str	r3, [r7, #16]
   return(result);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056b8:	623a      	str	r2, [r7, #32]
 80056ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	69f9      	ldr	r1, [r7, #28]
 80056be:	6a3a      	ldr	r2, [r7, #32]
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e010      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4013      	ands	r3, r2
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	429a      	cmp	r2, r3
 8005708:	f43f af4a 	beq.w	80055a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3770      	adds	r7, #112	; 0x70
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <__errno>:
 8005718:	4b01      	ldr	r3, [pc, #4]	; (8005720 <__errno+0x8>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	2000000c 	.word	0x2000000c

08005724 <__libc_init_array>:
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	4d0d      	ldr	r5, [pc, #52]	; (800575c <__libc_init_array+0x38>)
 8005728:	4c0d      	ldr	r4, [pc, #52]	; (8005760 <__libc_init_array+0x3c>)
 800572a:	1b64      	subs	r4, r4, r5
 800572c:	10a4      	asrs	r4, r4, #2
 800572e:	2600      	movs	r6, #0
 8005730:	42a6      	cmp	r6, r4
 8005732:	d109      	bne.n	8005748 <__libc_init_array+0x24>
 8005734:	4d0b      	ldr	r5, [pc, #44]	; (8005764 <__libc_init_array+0x40>)
 8005736:	4c0c      	ldr	r4, [pc, #48]	; (8005768 <__libc_init_array+0x44>)
 8005738:	f002 fe20 	bl	800837c <_init>
 800573c:	1b64      	subs	r4, r4, r5
 800573e:	10a4      	asrs	r4, r4, #2
 8005740:	2600      	movs	r6, #0
 8005742:	42a6      	cmp	r6, r4
 8005744:	d105      	bne.n	8005752 <__libc_init_array+0x2e>
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	f855 3b04 	ldr.w	r3, [r5], #4
 800574c:	4798      	blx	r3
 800574e:	3601      	adds	r6, #1
 8005750:	e7ee      	b.n	8005730 <__libc_init_array+0xc>
 8005752:	f855 3b04 	ldr.w	r3, [r5], #4
 8005756:	4798      	blx	r3
 8005758:	3601      	adds	r6, #1
 800575a:	e7f2      	b.n	8005742 <__libc_init_array+0x1e>
 800575c:	0800882c 	.word	0x0800882c
 8005760:	0800882c 	.word	0x0800882c
 8005764:	0800882c 	.word	0x0800882c
 8005768:	08008830 	.word	0x08008830

0800576c <memset>:
 800576c:	4402      	add	r2, r0
 800576e:	4603      	mov	r3, r0
 8005770:	4293      	cmp	r3, r2
 8005772:	d100      	bne.n	8005776 <memset+0xa>
 8005774:	4770      	bx	lr
 8005776:	f803 1b01 	strb.w	r1, [r3], #1
 800577a:	e7f9      	b.n	8005770 <memset+0x4>

0800577c <__cvt>:
 800577c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	ec55 4b10 	vmov	r4, r5, d0
 8005784:	2d00      	cmp	r5, #0
 8005786:	460e      	mov	r6, r1
 8005788:	4619      	mov	r1, r3
 800578a:	462b      	mov	r3, r5
 800578c:	bfbb      	ittet	lt
 800578e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005792:	461d      	movlt	r5, r3
 8005794:	2300      	movge	r3, #0
 8005796:	232d      	movlt	r3, #45	; 0x2d
 8005798:	700b      	strb	r3, [r1, #0]
 800579a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800579c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057a0:	4691      	mov	r9, r2
 80057a2:	f023 0820 	bic.w	r8, r3, #32
 80057a6:	bfbc      	itt	lt
 80057a8:	4622      	movlt	r2, r4
 80057aa:	4614      	movlt	r4, r2
 80057ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057b0:	d005      	beq.n	80057be <__cvt+0x42>
 80057b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057b6:	d100      	bne.n	80057ba <__cvt+0x3e>
 80057b8:	3601      	adds	r6, #1
 80057ba:	2102      	movs	r1, #2
 80057bc:	e000      	b.n	80057c0 <__cvt+0x44>
 80057be:	2103      	movs	r1, #3
 80057c0:	ab03      	add	r3, sp, #12
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	ab02      	add	r3, sp, #8
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	ec45 4b10 	vmov	d0, r4, r5
 80057cc:	4653      	mov	r3, sl
 80057ce:	4632      	mov	r2, r6
 80057d0:	f000 fe2e 	bl	8006430 <_dtoa_r>
 80057d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057d8:	4607      	mov	r7, r0
 80057da:	d102      	bne.n	80057e2 <__cvt+0x66>
 80057dc:	f019 0f01 	tst.w	r9, #1
 80057e0:	d022      	beq.n	8005828 <__cvt+0xac>
 80057e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057e6:	eb07 0906 	add.w	r9, r7, r6
 80057ea:	d110      	bne.n	800580e <__cvt+0x92>
 80057ec:	783b      	ldrb	r3, [r7, #0]
 80057ee:	2b30      	cmp	r3, #48	; 0x30
 80057f0:	d10a      	bne.n	8005808 <__cvt+0x8c>
 80057f2:	2200      	movs	r2, #0
 80057f4:	2300      	movs	r3, #0
 80057f6:	4620      	mov	r0, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	f7fb f965 	bl	8000ac8 <__aeabi_dcmpeq>
 80057fe:	b918      	cbnz	r0, 8005808 <__cvt+0x8c>
 8005800:	f1c6 0601 	rsb	r6, r6, #1
 8005804:	f8ca 6000 	str.w	r6, [sl]
 8005808:	f8da 3000 	ldr.w	r3, [sl]
 800580c:	4499      	add	r9, r3
 800580e:	2200      	movs	r2, #0
 8005810:	2300      	movs	r3, #0
 8005812:	4620      	mov	r0, r4
 8005814:	4629      	mov	r1, r5
 8005816:	f7fb f957 	bl	8000ac8 <__aeabi_dcmpeq>
 800581a:	b108      	cbz	r0, 8005820 <__cvt+0xa4>
 800581c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005820:	2230      	movs	r2, #48	; 0x30
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	454b      	cmp	r3, r9
 8005826:	d307      	bcc.n	8005838 <__cvt+0xbc>
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800582c:	1bdb      	subs	r3, r3, r7
 800582e:	4638      	mov	r0, r7
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	b004      	add	sp, #16
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	1c59      	adds	r1, r3, #1
 800583a:	9103      	str	r1, [sp, #12]
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e7f0      	b.n	8005822 <__cvt+0xa6>

08005840 <__exponent>:
 8005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005842:	4603      	mov	r3, r0
 8005844:	2900      	cmp	r1, #0
 8005846:	bfb8      	it	lt
 8005848:	4249      	neglt	r1, r1
 800584a:	f803 2b02 	strb.w	r2, [r3], #2
 800584e:	bfb4      	ite	lt
 8005850:	222d      	movlt	r2, #45	; 0x2d
 8005852:	222b      	movge	r2, #43	; 0x2b
 8005854:	2909      	cmp	r1, #9
 8005856:	7042      	strb	r2, [r0, #1]
 8005858:	dd2a      	ble.n	80058b0 <__exponent+0x70>
 800585a:	f10d 0407 	add.w	r4, sp, #7
 800585e:	46a4      	mov	ip, r4
 8005860:	270a      	movs	r7, #10
 8005862:	46a6      	mov	lr, r4
 8005864:	460a      	mov	r2, r1
 8005866:	fb91 f6f7 	sdiv	r6, r1, r7
 800586a:	fb07 1516 	mls	r5, r7, r6, r1
 800586e:	3530      	adds	r5, #48	; 0x30
 8005870:	2a63      	cmp	r2, #99	; 0x63
 8005872:	f104 34ff 	add.w	r4, r4, #4294967295
 8005876:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800587a:	4631      	mov	r1, r6
 800587c:	dcf1      	bgt.n	8005862 <__exponent+0x22>
 800587e:	3130      	adds	r1, #48	; 0x30
 8005880:	f1ae 0502 	sub.w	r5, lr, #2
 8005884:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005888:	1c44      	adds	r4, r0, #1
 800588a:	4629      	mov	r1, r5
 800588c:	4561      	cmp	r1, ip
 800588e:	d30a      	bcc.n	80058a6 <__exponent+0x66>
 8005890:	f10d 0209 	add.w	r2, sp, #9
 8005894:	eba2 020e 	sub.w	r2, r2, lr
 8005898:	4565      	cmp	r5, ip
 800589a:	bf88      	it	hi
 800589c:	2200      	movhi	r2, #0
 800589e:	4413      	add	r3, r2
 80058a0:	1a18      	subs	r0, r3, r0
 80058a2:	b003      	add	sp, #12
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058ae:	e7ed      	b.n	800588c <__exponent+0x4c>
 80058b0:	2330      	movs	r3, #48	; 0x30
 80058b2:	3130      	adds	r1, #48	; 0x30
 80058b4:	7083      	strb	r3, [r0, #2]
 80058b6:	70c1      	strb	r1, [r0, #3]
 80058b8:	1d03      	adds	r3, r0, #4
 80058ba:	e7f1      	b.n	80058a0 <__exponent+0x60>

080058bc <_printf_float>:
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	ed2d 8b02 	vpush	{d8}
 80058c4:	b08d      	sub	sp, #52	; 0x34
 80058c6:	460c      	mov	r4, r1
 80058c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058cc:	4616      	mov	r6, r2
 80058ce:	461f      	mov	r7, r3
 80058d0:	4605      	mov	r5, r0
 80058d2:	f001 fd53 	bl	800737c <_localeconv_r>
 80058d6:	f8d0 a000 	ldr.w	sl, [r0]
 80058da:	4650      	mov	r0, sl
 80058dc:	f7fa fc78 	bl	80001d0 <strlen>
 80058e0:	2300      	movs	r3, #0
 80058e2:	930a      	str	r3, [sp, #40]	; 0x28
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	9305      	str	r3, [sp, #20]
 80058e8:	f8d8 3000 	ldr.w	r3, [r8]
 80058ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058f0:	3307      	adds	r3, #7
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	f103 0208 	add.w	r2, r3, #8
 80058fa:	f8c8 2000 	str.w	r2, [r8]
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005906:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800590a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800590e:	9307      	str	r3, [sp, #28]
 8005910:	f8cd 8018 	str.w	r8, [sp, #24]
 8005914:	ee08 0a10 	vmov	s16, r0
 8005918:	4b9f      	ldr	r3, [pc, #636]	; (8005b98 <_printf_float+0x2dc>)
 800591a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	f7fb f903 	bl	8000b2c <__aeabi_dcmpun>
 8005926:	bb88      	cbnz	r0, 800598c <_printf_float+0xd0>
 8005928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800592c:	4b9a      	ldr	r3, [pc, #616]	; (8005b98 <_printf_float+0x2dc>)
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	f7fb f8dd 	bl	8000af0 <__aeabi_dcmple>
 8005936:	bb48      	cbnz	r0, 800598c <_printf_float+0xd0>
 8005938:	2200      	movs	r2, #0
 800593a:	2300      	movs	r3, #0
 800593c:	4640      	mov	r0, r8
 800593e:	4649      	mov	r1, r9
 8005940:	f7fb f8cc 	bl	8000adc <__aeabi_dcmplt>
 8005944:	b110      	cbz	r0, 800594c <_printf_float+0x90>
 8005946:	232d      	movs	r3, #45	; 0x2d
 8005948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594c:	4b93      	ldr	r3, [pc, #588]	; (8005b9c <_printf_float+0x2e0>)
 800594e:	4894      	ldr	r0, [pc, #592]	; (8005ba0 <_printf_float+0x2e4>)
 8005950:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005954:	bf94      	ite	ls
 8005956:	4698      	movls	r8, r3
 8005958:	4680      	movhi	r8, r0
 800595a:	2303      	movs	r3, #3
 800595c:	6123      	str	r3, [r4, #16]
 800595e:	9b05      	ldr	r3, [sp, #20]
 8005960:	f023 0204 	bic.w	r2, r3, #4
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	f04f 0900 	mov.w	r9, #0
 800596a:	9700      	str	r7, [sp, #0]
 800596c:	4633      	mov	r3, r6
 800596e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005970:	4621      	mov	r1, r4
 8005972:	4628      	mov	r0, r5
 8005974:	f000 f9d8 	bl	8005d28 <_printf_common>
 8005978:	3001      	adds	r0, #1
 800597a:	f040 8090 	bne.w	8005a9e <_printf_float+0x1e2>
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	b00d      	add	sp, #52	; 0x34
 8005984:	ecbd 8b02 	vpop	{d8}
 8005988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598c:	4642      	mov	r2, r8
 800598e:	464b      	mov	r3, r9
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fb f8ca 	bl	8000b2c <__aeabi_dcmpun>
 8005998:	b140      	cbz	r0, 80059ac <_printf_float+0xf0>
 800599a:	464b      	mov	r3, r9
 800599c:	2b00      	cmp	r3, #0
 800599e:	bfbc      	itt	lt
 80059a0:	232d      	movlt	r3, #45	; 0x2d
 80059a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059a6:	487f      	ldr	r0, [pc, #508]	; (8005ba4 <_printf_float+0x2e8>)
 80059a8:	4b7f      	ldr	r3, [pc, #508]	; (8005ba8 <_printf_float+0x2ec>)
 80059aa:	e7d1      	b.n	8005950 <_printf_float+0x94>
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059b2:	9206      	str	r2, [sp, #24]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	d13f      	bne.n	8005a38 <_printf_float+0x17c>
 80059b8:	2306      	movs	r3, #6
 80059ba:	6063      	str	r3, [r4, #4]
 80059bc:	9b05      	ldr	r3, [sp, #20]
 80059be:	6861      	ldr	r1, [r4, #4]
 80059c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059c4:	2300      	movs	r3, #0
 80059c6:	9303      	str	r3, [sp, #12]
 80059c8:	ab0a      	add	r3, sp, #40	; 0x28
 80059ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059ce:	ab09      	add	r3, sp, #36	; 0x24
 80059d0:	ec49 8b10 	vmov	d0, r8, r9
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	6022      	str	r2, [r4, #0]
 80059d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059dc:	4628      	mov	r0, r5
 80059de:	f7ff fecd 	bl	800577c <__cvt>
 80059e2:	9b06      	ldr	r3, [sp, #24]
 80059e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059e6:	2b47      	cmp	r3, #71	; 0x47
 80059e8:	4680      	mov	r8, r0
 80059ea:	d108      	bne.n	80059fe <_printf_float+0x142>
 80059ec:	1cc8      	adds	r0, r1, #3
 80059ee:	db02      	blt.n	80059f6 <_printf_float+0x13a>
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	4299      	cmp	r1, r3
 80059f4:	dd41      	ble.n	8005a7a <_printf_float+0x1be>
 80059f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80059fa:	fa5f fb8b 	uxtb.w	fp, fp
 80059fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a02:	d820      	bhi.n	8005a46 <_printf_float+0x18a>
 8005a04:	3901      	subs	r1, #1
 8005a06:	465a      	mov	r2, fp
 8005a08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a0c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a0e:	f7ff ff17 	bl	8005840 <__exponent>
 8005a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a14:	1813      	adds	r3, r2, r0
 8005a16:	2a01      	cmp	r2, #1
 8005a18:	4681      	mov	r9, r0
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	dc02      	bgt.n	8005a24 <_printf_float+0x168>
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	07d2      	lsls	r2, r2, #31
 8005a22:	d501      	bpl.n	8005a28 <_printf_float+0x16c>
 8005a24:	3301      	adds	r3, #1
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d09c      	beq.n	800596a <_printf_float+0xae>
 8005a30:	232d      	movs	r3, #45	; 0x2d
 8005a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a36:	e798      	b.n	800596a <_printf_float+0xae>
 8005a38:	9a06      	ldr	r2, [sp, #24]
 8005a3a:	2a47      	cmp	r2, #71	; 0x47
 8005a3c:	d1be      	bne.n	80059bc <_printf_float+0x100>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1bc      	bne.n	80059bc <_printf_float+0x100>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e7b9      	b.n	80059ba <_printf_float+0xfe>
 8005a46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a4a:	d118      	bne.n	8005a7e <_printf_float+0x1c2>
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	dd0b      	ble.n	8005a6a <_printf_float+0x1ae>
 8005a52:	6121      	str	r1, [r4, #16]
 8005a54:	b913      	cbnz	r3, 8005a5c <_printf_float+0x1a0>
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	07d0      	lsls	r0, r2, #31
 8005a5a:	d502      	bpl.n	8005a62 <_printf_float+0x1a6>
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	440b      	add	r3, r1
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a64:	f04f 0900 	mov.w	r9, #0
 8005a68:	e7de      	b.n	8005a28 <_printf_float+0x16c>
 8005a6a:	b913      	cbnz	r3, 8005a72 <_printf_float+0x1b6>
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	07d2      	lsls	r2, r2, #31
 8005a70:	d501      	bpl.n	8005a76 <_printf_float+0x1ba>
 8005a72:	3302      	adds	r3, #2
 8005a74:	e7f4      	b.n	8005a60 <_printf_float+0x1a4>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e7f2      	b.n	8005a60 <_printf_float+0x1a4>
 8005a7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a80:	4299      	cmp	r1, r3
 8005a82:	db05      	blt.n	8005a90 <_printf_float+0x1d4>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	6121      	str	r1, [r4, #16]
 8005a88:	07d8      	lsls	r0, r3, #31
 8005a8a:	d5ea      	bpl.n	8005a62 <_printf_float+0x1a6>
 8005a8c:	1c4b      	adds	r3, r1, #1
 8005a8e:	e7e7      	b.n	8005a60 <_printf_float+0x1a4>
 8005a90:	2900      	cmp	r1, #0
 8005a92:	bfd4      	ite	le
 8005a94:	f1c1 0202 	rsble	r2, r1, #2
 8005a98:	2201      	movgt	r2, #1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	e7e0      	b.n	8005a60 <_printf_float+0x1a4>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	055a      	lsls	r2, r3, #21
 8005aa2:	d407      	bmi.n	8005ab4 <_printf_float+0x1f8>
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d12c      	bne.n	8005b0c <_printf_float+0x250>
 8005ab2:	e764      	b.n	800597e <_printf_float+0xc2>
 8005ab4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ab8:	f240 80e0 	bls.w	8005c7c <_printf_float+0x3c0>
 8005abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f7fb f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d034      	beq.n	8005b36 <_printf_float+0x27a>
 8005acc:	4a37      	ldr	r2, [pc, #220]	; (8005bac <_printf_float+0x2f0>)
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f af51 	beq.w	800597e <_printf_float+0xc2>
 8005adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	db02      	blt.n	8005aea <_printf_float+0x22e>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	07d8      	lsls	r0, r3, #31
 8005ae8:	d510      	bpl.n	8005b0c <_printf_float+0x250>
 8005aea:	ee18 3a10 	vmov	r3, s16
 8005aee:	4652      	mov	r2, sl
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f af41 	beq.w	800597e <_printf_float+0xc2>
 8005afc:	f04f 0800 	mov.w	r8, #0
 8005b00:	f104 091a 	add.w	r9, r4, #26
 8005b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b06:	3b01      	subs	r3, #1
 8005b08:	4543      	cmp	r3, r8
 8005b0a:	dc09      	bgt.n	8005b20 <_printf_float+0x264>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	079b      	lsls	r3, r3, #30
 8005b10:	f100 8105 	bmi.w	8005d1e <_printf_float+0x462>
 8005b14:	68e0      	ldr	r0, [r4, #12]
 8005b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b18:	4298      	cmp	r0, r3
 8005b1a:	bfb8      	it	lt
 8005b1c:	4618      	movlt	r0, r3
 8005b1e:	e730      	b.n	8005982 <_printf_float+0xc6>
 8005b20:	2301      	movs	r3, #1
 8005b22:	464a      	mov	r2, r9
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f af27 	beq.w	800597e <_printf_float+0xc2>
 8005b30:	f108 0801 	add.w	r8, r8, #1
 8005b34:	e7e6      	b.n	8005b04 <_printf_float+0x248>
 8005b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	dc39      	bgt.n	8005bb0 <_printf_float+0x2f4>
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <_printf_float+0x2f0>)
 8005b3e:	2301      	movs	r3, #1
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f af19 	beq.w	800597e <_printf_float+0xc2>
 8005b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d102      	bne.n	8005b5a <_printf_float+0x29e>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07d9      	lsls	r1, r3, #31
 8005b58:	d5d8      	bpl.n	8005b0c <_printf_float+0x250>
 8005b5a:	ee18 3a10 	vmov	r3, s16
 8005b5e:	4652      	mov	r2, sl
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f af09 	beq.w	800597e <_printf_float+0xc2>
 8005b6c:	f04f 0900 	mov.w	r9, #0
 8005b70:	f104 0a1a 	add.w	sl, r4, #26
 8005b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b76:	425b      	negs	r3, r3
 8005b78:	454b      	cmp	r3, r9
 8005b7a:	dc01      	bgt.n	8005b80 <_printf_float+0x2c4>
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	e792      	b.n	8005aa6 <_printf_float+0x1ea>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4652      	mov	r2, sl
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f aef7 	beq.w	800597e <_printf_float+0xc2>
 8005b90:	f109 0901 	add.w	r9, r9, #1
 8005b94:	e7ee      	b.n	8005b74 <_printf_float+0x2b8>
 8005b96:	bf00      	nop
 8005b98:	7fefffff 	.word	0x7fefffff
 8005b9c:	08008458 	.word	0x08008458
 8005ba0:	0800845c 	.word	0x0800845c
 8005ba4:	08008464 	.word	0x08008464
 8005ba8:	08008460 	.word	0x08008460
 8005bac:	08008468 	.word	0x08008468
 8005bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	bfa8      	it	ge
 8005bb8:	461a      	movge	r2, r3
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	4691      	mov	r9, r2
 8005bbe:	dc37      	bgt.n	8005c30 <_printf_float+0x374>
 8005bc0:	f04f 0b00 	mov.w	fp, #0
 8005bc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bc8:	f104 021a 	add.w	r2, r4, #26
 8005bcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bce:	9305      	str	r3, [sp, #20]
 8005bd0:	eba3 0309 	sub.w	r3, r3, r9
 8005bd4:	455b      	cmp	r3, fp
 8005bd6:	dc33      	bgt.n	8005c40 <_printf_float+0x384>
 8005bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	db3b      	blt.n	8005c58 <_printf_float+0x39c>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	07da      	lsls	r2, r3, #31
 8005be4:	d438      	bmi.n	8005c58 <_printf_float+0x39c>
 8005be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be8:	9a05      	ldr	r2, [sp, #20]
 8005bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bec:	1a9a      	subs	r2, r3, r2
 8005bee:	eba3 0901 	sub.w	r9, r3, r1
 8005bf2:	4591      	cmp	r9, r2
 8005bf4:	bfa8      	it	ge
 8005bf6:	4691      	movge	r9, r2
 8005bf8:	f1b9 0f00 	cmp.w	r9, #0
 8005bfc:	dc35      	bgt.n	8005c6a <_printf_float+0x3ae>
 8005bfe:	f04f 0800 	mov.w	r8, #0
 8005c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c06:	f104 0a1a 	add.w	sl, r4, #26
 8005c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	eba3 0309 	sub.w	r3, r3, r9
 8005c14:	4543      	cmp	r3, r8
 8005c16:	f77f af79 	ble.w	8005b0c <_printf_float+0x250>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4652      	mov	r2, sl
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f aeaa 	beq.w	800597e <_printf_float+0xc2>
 8005c2a:	f108 0801 	add.w	r8, r8, #1
 8005c2e:	e7ec      	b.n	8005c0a <_printf_float+0x34e>
 8005c30:	4613      	mov	r3, r2
 8005c32:	4631      	mov	r1, r6
 8005c34:	4642      	mov	r2, r8
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d1c0      	bne.n	8005bc0 <_printf_float+0x304>
 8005c3e:	e69e      	b.n	800597e <_printf_float+0xc2>
 8005c40:	2301      	movs	r3, #1
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	9205      	str	r2, [sp, #20]
 8005c48:	47b8      	blx	r7
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	f43f ae97 	beq.w	800597e <_printf_float+0xc2>
 8005c50:	9a05      	ldr	r2, [sp, #20]
 8005c52:	f10b 0b01 	add.w	fp, fp, #1
 8005c56:	e7b9      	b.n	8005bcc <_printf_float+0x310>
 8005c58:	ee18 3a10 	vmov	r3, s16
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	d1be      	bne.n	8005be6 <_printf_float+0x32a>
 8005c68:	e689      	b.n	800597e <_printf_float+0xc2>
 8005c6a:	9a05      	ldr	r2, [sp, #20]
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	4442      	add	r2, r8
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	d1c1      	bne.n	8005bfe <_printf_float+0x342>
 8005c7a:	e680      	b.n	800597e <_printf_float+0xc2>
 8005c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c7e:	2a01      	cmp	r2, #1
 8005c80:	dc01      	bgt.n	8005c86 <_printf_float+0x3ca>
 8005c82:	07db      	lsls	r3, r3, #31
 8005c84:	d538      	bpl.n	8005cf8 <_printf_float+0x43c>
 8005c86:	2301      	movs	r3, #1
 8005c88:	4642      	mov	r2, r8
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	f43f ae74 	beq.w	800597e <_printf_float+0xc2>
 8005c96:	ee18 3a10 	vmov	r3, s16
 8005c9a:	4652      	mov	r2, sl
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b8      	blx	r7
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f43f ae6b 	beq.w	800597e <_printf_float+0xc2>
 8005ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cac:	2200      	movs	r2, #0
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f7fa ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cb4:	b9d8      	cbnz	r0, 8005cee <_printf_float+0x432>
 8005cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb8:	f108 0201 	add.w	r2, r8, #1
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d10e      	bne.n	8005ce6 <_printf_float+0x42a>
 8005cc8:	e659      	b.n	800597e <_printf_float+0xc2>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4652      	mov	r2, sl
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f ae52 	beq.w	800597e <_printf_float+0xc2>
 8005cda:	f108 0801 	add.w	r8, r8, #1
 8005cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	4543      	cmp	r3, r8
 8005ce4:	dcf1      	bgt.n	8005cca <_printf_float+0x40e>
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cec:	e6dc      	b.n	8005aa8 <_printf_float+0x1ec>
 8005cee:	f04f 0800 	mov.w	r8, #0
 8005cf2:	f104 0a1a 	add.w	sl, r4, #26
 8005cf6:	e7f2      	b.n	8005cde <_printf_float+0x422>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	e7df      	b.n	8005cbe <_printf_float+0x402>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	464a      	mov	r2, r9
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f ae38 	beq.w	800597e <_printf_float+0xc2>
 8005d0e:	f108 0801 	add.w	r8, r8, #1
 8005d12:	68e3      	ldr	r3, [r4, #12]
 8005d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d16:	1a5b      	subs	r3, r3, r1
 8005d18:	4543      	cmp	r3, r8
 8005d1a:	dcf0      	bgt.n	8005cfe <_printf_float+0x442>
 8005d1c:	e6fa      	b.n	8005b14 <_printf_float+0x258>
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	f104 0919 	add.w	r9, r4, #25
 8005d26:	e7f4      	b.n	8005d12 <_printf_float+0x456>

08005d28 <_printf_common>:
 8005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	4699      	mov	r9, r3
 8005d30:	688a      	ldr	r2, [r1, #8]
 8005d32:	690b      	ldr	r3, [r1, #16]
 8005d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	bfb8      	it	lt
 8005d3c:	4613      	movlt	r3, r2
 8005d3e:	6033      	str	r3, [r6, #0]
 8005d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d44:	4607      	mov	r7, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	b10a      	cbz	r2, 8005d4e <_printf_common+0x26>
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	0699      	lsls	r1, r3, #26
 8005d52:	bf42      	ittt	mi
 8005d54:	6833      	ldrmi	r3, [r6, #0]
 8005d56:	3302      	addmi	r3, #2
 8005d58:	6033      	strmi	r3, [r6, #0]
 8005d5a:	6825      	ldr	r5, [r4, #0]
 8005d5c:	f015 0506 	ands.w	r5, r5, #6
 8005d60:	d106      	bne.n	8005d70 <_printf_common+0x48>
 8005d62:	f104 0a19 	add.w	sl, r4, #25
 8005d66:	68e3      	ldr	r3, [r4, #12]
 8005d68:	6832      	ldr	r2, [r6, #0]
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	42ab      	cmp	r3, r5
 8005d6e:	dc26      	bgt.n	8005dbe <_printf_common+0x96>
 8005d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d74:	1e13      	subs	r3, r2, #0
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	bf18      	it	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	0692      	lsls	r2, r2, #26
 8005d7e:	d42b      	bmi.n	8005dd8 <_printf_common+0xb0>
 8005d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d84:	4649      	mov	r1, r9
 8005d86:	4638      	mov	r0, r7
 8005d88:	47c0      	blx	r8
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d01e      	beq.n	8005dcc <_printf_common+0xa4>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	68e5      	ldr	r5, [r4, #12]
 8005d92:	6832      	ldr	r2, [r6, #0]
 8005d94:	f003 0306 	and.w	r3, r3, #6
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	bf08      	it	eq
 8005d9c:	1aad      	subeq	r5, r5, r2
 8005d9e:	68a3      	ldr	r3, [r4, #8]
 8005da0:	6922      	ldr	r2, [r4, #16]
 8005da2:	bf0c      	ite	eq
 8005da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da8:	2500      	movne	r5, #0
 8005daa:	4293      	cmp	r3, r2
 8005dac:	bfc4      	itt	gt
 8005dae:	1a9b      	subgt	r3, r3, r2
 8005db0:	18ed      	addgt	r5, r5, r3
 8005db2:	2600      	movs	r6, #0
 8005db4:	341a      	adds	r4, #26
 8005db6:	42b5      	cmp	r5, r6
 8005db8:	d11a      	bne.n	8005df0 <_printf_common+0xc8>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e008      	b.n	8005dd0 <_printf_common+0xa8>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	47c0      	blx	r8
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d103      	bne.n	8005dd4 <_printf_common+0xac>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7c6      	b.n	8005d66 <_printf_common+0x3e>
 8005dd8:	18e1      	adds	r1, r4, r3
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	2030      	movs	r0, #48	; 0x30
 8005dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005de2:	4422      	add	r2, r4
 8005de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dec:	3302      	adds	r3, #2
 8005dee:	e7c7      	b.n	8005d80 <_printf_common+0x58>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4622      	mov	r2, r4
 8005df4:	4649      	mov	r1, r9
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c0      	blx	r8
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d0e6      	beq.n	8005dcc <_printf_common+0xa4>
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7d9      	b.n	8005db6 <_printf_common+0x8e>
	...

08005e04 <_printf_i>:
 8005e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	7e0f      	ldrb	r7, [r1, #24]
 8005e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e0c:	2f78      	cmp	r7, #120	; 0x78
 8005e0e:	4691      	mov	r9, r2
 8005e10:	4680      	mov	r8, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	469a      	mov	sl, r3
 8005e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e1a:	d807      	bhi.n	8005e2c <_printf_i+0x28>
 8005e1c:	2f62      	cmp	r7, #98	; 0x62
 8005e1e:	d80a      	bhi.n	8005e36 <_printf_i+0x32>
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	f000 80d8 	beq.w	8005fd6 <_printf_i+0x1d2>
 8005e26:	2f58      	cmp	r7, #88	; 0x58
 8005e28:	f000 80a3 	beq.w	8005f72 <_printf_i+0x16e>
 8005e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e34:	e03a      	b.n	8005eac <_printf_i+0xa8>
 8005e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e3a:	2b15      	cmp	r3, #21
 8005e3c:	d8f6      	bhi.n	8005e2c <_printf_i+0x28>
 8005e3e:	a101      	add	r1, pc, #4	; (adr r1, 8005e44 <_printf_i+0x40>)
 8005e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e44:	08005e9d 	.word	0x08005e9d
 8005e48:	08005eb1 	.word	0x08005eb1
 8005e4c:	08005e2d 	.word	0x08005e2d
 8005e50:	08005e2d 	.word	0x08005e2d
 8005e54:	08005e2d 	.word	0x08005e2d
 8005e58:	08005e2d 	.word	0x08005e2d
 8005e5c:	08005eb1 	.word	0x08005eb1
 8005e60:	08005e2d 	.word	0x08005e2d
 8005e64:	08005e2d 	.word	0x08005e2d
 8005e68:	08005e2d 	.word	0x08005e2d
 8005e6c:	08005e2d 	.word	0x08005e2d
 8005e70:	08005fbd 	.word	0x08005fbd
 8005e74:	08005ee1 	.word	0x08005ee1
 8005e78:	08005f9f 	.word	0x08005f9f
 8005e7c:	08005e2d 	.word	0x08005e2d
 8005e80:	08005e2d 	.word	0x08005e2d
 8005e84:	08005fdf 	.word	0x08005fdf
 8005e88:	08005e2d 	.word	0x08005e2d
 8005e8c:	08005ee1 	.word	0x08005ee1
 8005e90:	08005e2d 	.word	0x08005e2d
 8005e94:	08005e2d 	.word	0x08005e2d
 8005e98:	08005fa7 	.word	0x08005fa7
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	1d1a      	adds	r2, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	602a      	str	r2, [r5, #0]
 8005ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0a3      	b.n	8005ff8 <_printf_i+0x1f4>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	6829      	ldr	r1, [r5, #0]
 8005eb4:	0606      	lsls	r6, r0, #24
 8005eb6:	f101 0304 	add.w	r3, r1, #4
 8005eba:	d50a      	bpl.n	8005ed2 <_printf_i+0xce>
 8005ebc:	680e      	ldr	r6, [r1, #0]
 8005ebe:	602b      	str	r3, [r5, #0]
 8005ec0:	2e00      	cmp	r6, #0
 8005ec2:	da03      	bge.n	8005ecc <_printf_i+0xc8>
 8005ec4:	232d      	movs	r3, #45	; 0x2d
 8005ec6:	4276      	negs	r6, r6
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ecc:	485e      	ldr	r0, [pc, #376]	; (8006048 <_printf_i+0x244>)
 8005ece:	230a      	movs	r3, #10
 8005ed0:	e019      	b.n	8005f06 <_printf_i+0x102>
 8005ed2:	680e      	ldr	r6, [r1, #0]
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eda:	bf18      	it	ne
 8005edc:	b236      	sxthne	r6, r6
 8005ede:	e7ef      	b.n	8005ec0 <_printf_i+0xbc>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	1d19      	adds	r1, r3, #4
 8005ee6:	6029      	str	r1, [r5, #0]
 8005ee8:	0601      	lsls	r1, r0, #24
 8005eea:	d501      	bpl.n	8005ef0 <_printf_i+0xec>
 8005eec:	681e      	ldr	r6, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <_printf_i+0xf2>
 8005ef0:	0646      	lsls	r6, r0, #25
 8005ef2:	d5fb      	bpl.n	8005eec <_printf_i+0xe8>
 8005ef4:	881e      	ldrh	r6, [r3, #0]
 8005ef6:	4854      	ldr	r0, [pc, #336]	; (8006048 <_printf_i+0x244>)
 8005ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8005efa:	bf0c      	ite	eq
 8005efc:	2308      	moveq	r3, #8
 8005efe:	230a      	movne	r3, #10
 8005f00:	2100      	movs	r1, #0
 8005f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f06:	6865      	ldr	r5, [r4, #4]
 8005f08:	60a5      	str	r5, [r4, #8]
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	bfa2      	ittt	ge
 8005f0e:	6821      	ldrge	r1, [r4, #0]
 8005f10:	f021 0104 	bicge.w	r1, r1, #4
 8005f14:	6021      	strge	r1, [r4, #0]
 8005f16:	b90e      	cbnz	r6, 8005f1c <_printf_i+0x118>
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	d04d      	beq.n	8005fb8 <_printf_i+0x1b4>
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f22:	fb03 6711 	mls	r7, r3, r1, r6
 8005f26:	5dc7      	ldrb	r7, [r0, r7]
 8005f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f2c:	4637      	mov	r7, r6
 8005f2e:	42bb      	cmp	r3, r7
 8005f30:	460e      	mov	r6, r1
 8005f32:	d9f4      	bls.n	8005f1e <_printf_i+0x11a>
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d10b      	bne.n	8005f50 <_printf_i+0x14c>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	07de      	lsls	r6, r3, #31
 8005f3c:	d508      	bpl.n	8005f50 <_printf_i+0x14c>
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	6861      	ldr	r1, [r4, #4]
 8005f42:	4299      	cmp	r1, r3
 8005f44:	bfde      	ittt	le
 8005f46:	2330      	movle	r3, #48	; 0x30
 8005f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f50:	1b52      	subs	r2, r2, r5
 8005f52:	6122      	str	r2, [r4, #16]
 8005f54:	f8cd a000 	str.w	sl, [sp]
 8005f58:	464b      	mov	r3, r9
 8005f5a:	aa03      	add	r2, sp, #12
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4640      	mov	r0, r8
 8005f60:	f7ff fee2 	bl	8005d28 <_printf_common>
 8005f64:	3001      	adds	r0, #1
 8005f66:	d14c      	bne.n	8006002 <_printf_i+0x1fe>
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	b004      	add	sp, #16
 8005f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f72:	4835      	ldr	r0, [pc, #212]	; (8006048 <_printf_i+0x244>)
 8005f74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f78:	6829      	ldr	r1, [r5, #0]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f80:	6029      	str	r1, [r5, #0]
 8005f82:	061d      	lsls	r5, r3, #24
 8005f84:	d514      	bpl.n	8005fb0 <_printf_i+0x1ac>
 8005f86:	07df      	lsls	r7, r3, #31
 8005f88:	bf44      	itt	mi
 8005f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f8e:	6023      	strmi	r3, [r4, #0]
 8005f90:	b91e      	cbnz	r6, 8005f9a <_printf_i+0x196>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f023 0320 	bic.w	r3, r3, #32
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	e7b0      	b.n	8005f00 <_printf_i+0xfc>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	f043 0320 	orr.w	r3, r3, #32
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	2378      	movs	r3, #120	; 0x78
 8005fa8:	4828      	ldr	r0, [pc, #160]	; (800604c <_printf_i+0x248>)
 8005faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fae:	e7e3      	b.n	8005f78 <_printf_i+0x174>
 8005fb0:	0659      	lsls	r1, r3, #25
 8005fb2:	bf48      	it	mi
 8005fb4:	b2b6      	uxthmi	r6, r6
 8005fb6:	e7e6      	b.n	8005f86 <_printf_i+0x182>
 8005fb8:	4615      	mov	r5, r2
 8005fba:	e7bb      	b.n	8005f34 <_printf_i+0x130>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	6826      	ldr	r6, [r4, #0]
 8005fc0:	6961      	ldr	r1, [r4, #20]
 8005fc2:	1d18      	adds	r0, r3, #4
 8005fc4:	6028      	str	r0, [r5, #0]
 8005fc6:	0635      	lsls	r5, r6, #24
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	d501      	bpl.n	8005fd0 <_printf_i+0x1cc>
 8005fcc:	6019      	str	r1, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <_printf_i+0x1d2>
 8005fd0:	0670      	lsls	r0, r6, #25
 8005fd2:	d5fb      	bpl.n	8005fcc <_printf_i+0x1c8>
 8005fd4:	8019      	strh	r1, [r3, #0]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	4615      	mov	r5, r2
 8005fdc:	e7ba      	b.n	8005f54 <_printf_i+0x150>
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	1d1a      	adds	r2, r3, #4
 8005fe2:	602a      	str	r2, [r5, #0]
 8005fe4:	681d      	ldr	r5, [r3, #0]
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7fa f8f8 	bl	80001e0 <memchr>
 8005ff0:	b108      	cbz	r0, 8005ff6 <_printf_i+0x1f2>
 8005ff2:	1b40      	subs	r0, r0, r5
 8005ff4:	6060      	str	r0, [r4, #4]
 8005ff6:	6863      	ldr	r3, [r4, #4]
 8005ff8:	6123      	str	r3, [r4, #16]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006000:	e7a8      	b.n	8005f54 <_printf_i+0x150>
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	462a      	mov	r2, r5
 8006006:	4649      	mov	r1, r9
 8006008:	4640      	mov	r0, r8
 800600a:	47d0      	blx	sl
 800600c:	3001      	adds	r0, #1
 800600e:	d0ab      	beq.n	8005f68 <_printf_i+0x164>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	079b      	lsls	r3, r3, #30
 8006014:	d413      	bmi.n	800603e <_printf_i+0x23a>
 8006016:	68e0      	ldr	r0, [r4, #12]
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	4298      	cmp	r0, r3
 800601c:	bfb8      	it	lt
 800601e:	4618      	movlt	r0, r3
 8006020:	e7a4      	b.n	8005f6c <_printf_i+0x168>
 8006022:	2301      	movs	r3, #1
 8006024:	4632      	mov	r2, r6
 8006026:	4649      	mov	r1, r9
 8006028:	4640      	mov	r0, r8
 800602a:	47d0      	blx	sl
 800602c:	3001      	adds	r0, #1
 800602e:	d09b      	beq.n	8005f68 <_printf_i+0x164>
 8006030:	3501      	adds	r5, #1
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	9903      	ldr	r1, [sp, #12]
 8006036:	1a5b      	subs	r3, r3, r1
 8006038:	42ab      	cmp	r3, r5
 800603a:	dcf2      	bgt.n	8006022 <_printf_i+0x21e>
 800603c:	e7eb      	b.n	8006016 <_printf_i+0x212>
 800603e:	2500      	movs	r5, #0
 8006040:	f104 0619 	add.w	r6, r4, #25
 8006044:	e7f5      	b.n	8006032 <_printf_i+0x22e>
 8006046:	bf00      	nop
 8006048:	0800846a 	.word	0x0800846a
 800604c:	0800847b 	.word	0x0800847b

08006050 <iprintf>:
 8006050:	b40f      	push	{r0, r1, r2, r3}
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <iprintf+0x2c>)
 8006054:	b513      	push	{r0, r1, r4, lr}
 8006056:	681c      	ldr	r4, [r3, #0]
 8006058:	b124      	cbz	r4, 8006064 <iprintf+0x14>
 800605a:	69a3      	ldr	r3, [r4, #24]
 800605c:	b913      	cbnz	r3, 8006064 <iprintf+0x14>
 800605e:	4620      	mov	r0, r4
 8006060:	f001 f8ee 	bl	8007240 <__sinit>
 8006064:	ab05      	add	r3, sp, #20
 8006066:	9a04      	ldr	r2, [sp, #16]
 8006068:	68a1      	ldr	r1, [r4, #8]
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	4620      	mov	r0, r4
 800606e:	f001 feab 	bl	8007dc8 <_vfiprintf_r>
 8006072:	b002      	add	sp, #8
 8006074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006078:	b004      	add	sp, #16
 800607a:	4770      	bx	lr
 800607c:	2000000c 	.word	0x2000000c

08006080 <putchar>:
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <putchar+0x28>)
 8006082:	b513      	push	{r0, r1, r4, lr}
 8006084:	681c      	ldr	r4, [r3, #0]
 8006086:	4601      	mov	r1, r0
 8006088:	b134      	cbz	r4, 8006098 <putchar+0x18>
 800608a:	69a3      	ldr	r3, [r4, #24]
 800608c:	b923      	cbnz	r3, 8006098 <putchar+0x18>
 800608e:	9001      	str	r0, [sp, #4]
 8006090:	4620      	mov	r0, r4
 8006092:	f001 f8d5 	bl	8007240 <__sinit>
 8006096:	9901      	ldr	r1, [sp, #4]
 8006098:	68a2      	ldr	r2, [r4, #8]
 800609a:	4620      	mov	r0, r4
 800609c:	b002      	add	sp, #8
 800609e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a2:	f001 bfc1 	b.w	8008028 <_putc_r>
 80060a6:	bf00      	nop
 80060a8:	2000000c 	.word	0x2000000c

080060ac <_puts_r>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	460e      	mov	r6, r1
 80060b0:	4605      	mov	r5, r0
 80060b2:	b118      	cbz	r0, 80060bc <_puts_r+0x10>
 80060b4:	6983      	ldr	r3, [r0, #24]
 80060b6:	b90b      	cbnz	r3, 80060bc <_puts_r+0x10>
 80060b8:	f001 f8c2 	bl	8007240 <__sinit>
 80060bc:	69ab      	ldr	r3, [r5, #24]
 80060be:	68ac      	ldr	r4, [r5, #8]
 80060c0:	b913      	cbnz	r3, 80060c8 <_puts_r+0x1c>
 80060c2:	4628      	mov	r0, r5
 80060c4:	f001 f8bc 	bl	8007240 <__sinit>
 80060c8:	4b2c      	ldr	r3, [pc, #176]	; (800617c <_puts_r+0xd0>)
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d120      	bne.n	8006110 <_puts_r+0x64>
 80060ce:	686c      	ldr	r4, [r5, #4]
 80060d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060d2:	07db      	lsls	r3, r3, #31
 80060d4:	d405      	bmi.n	80060e2 <_puts_r+0x36>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	0598      	lsls	r0, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_puts_r+0x36>
 80060dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060de:	f001 f952 	bl	8007386 <__retarget_lock_acquire_recursive>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	0719      	lsls	r1, r3, #28
 80060e6:	d51d      	bpl.n	8006124 <_puts_r+0x78>
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	b1db      	cbz	r3, 8006124 <_puts_r+0x78>
 80060ec:	3e01      	subs	r6, #1
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060f4:	3b01      	subs	r3, #1
 80060f6:	60a3      	str	r3, [r4, #8]
 80060f8:	bb39      	cbnz	r1, 800614a <_puts_r+0x9e>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da38      	bge.n	8006170 <_puts_r+0xc4>
 80060fe:	4622      	mov	r2, r4
 8006100:	210a      	movs	r1, #10
 8006102:	4628      	mov	r0, r5
 8006104:	f000 f848 	bl	8006198 <__swbuf_r>
 8006108:	3001      	adds	r0, #1
 800610a:	d011      	beq.n	8006130 <_puts_r+0x84>
 800610c:	250a      	movs	r5, #10
 800610e:	e011      	b.n	8006134 <_puts_r+0x88>
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <_puts_r+0xd4>)
 8006112:	429c      	cmp	r4, r3
 8006114:	d101      	bne.n	800611a <_puts_r+0x6e>
 8006116:	68ac      	ldr	r4, [r5, #8]
 8006118:	e7da      	b.n	80060d0 <_puts_r+0x24>
 800611a:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <_puts_r+0xd8>)
 800611c:	429c      	cmp	r4, r3
 800611e:	bf08      	it	eq
 8006120:	68ec      	ldreq	r4, [r5, #12]
 8006122:	e7d5      	b.n	80060d0 <_puts_r+0x24>
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	f000 f888 	bl	800623c <__swsetup_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	d0dd      	beq.n	80060ec <_puts_r+0x40>
 8006130:	f04f 35ff 	mov.w	r5, #4294967295
 8006134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006136:	07da      	lsls	r2, r3, #31
 8006138:	d405      	bmi.n	8006146 <_puts_r+0x9a>
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	059b      	lsls	r3, r3, #22
 800613e:	d402      	bmi.n	8006146 <_puts_r+0x9a>
 8006140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006142:	f001 f921 	bl	8007388 <__retarget_lock_release_recursive>
 8006146:	4628      	mov	r0, r5
 8006148:	bd70      	pop	{r4, r5, r6, pc}
 800614a:	2b00      	cmp	r3, #0
 800614c:	da04      	bge.n	8006158 <_puts_r+0xac>
 800614e:	69a2      	ldr	r2, [r4, #24]
 8006150:	429a      	cmp	r2, r3
 8006152:	dc06      	bgt.n	8006162 <_puts_r+0xb6>
 8006154:	290a      	cmp	r1, #10
 8006156:	d004      	beq.n	8006162 <_puts_r+0xb6>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	6022      	str	r2, [r4, #0]
 800615e:	7019      	strb	r1, [r3, #0]
 8006160:	e7c5      	b.n	80060ee <_puts_r+0x42>
 8006162:	4622      	mov	r2, r4
 8006164:	4628      	mov	r0, r5
 8006166:	f000 f817 	bl	8006198 <__swbuf_r>
 800616a:	3001      	adds	r0, #1
 800616c:	d1bf      	bne.n	80060ee <_puts_r+0x42>
 800616e:	e7df      	b.n	8006130 <_puts_r+0x84>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	250a      	movs	r5, #10
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	6022      	str	r2, [r4, #0]
 8006178:	701d      	strb	r5, [r3, #0]
 800617a:	e7db      	b.n	8006134 <_puts_r+0x88>
 800617c:	0800853c 	.word	0x0800853c
 8006180:	0800855c 	.word	0x0800855c
 8006184:	0800851c 	.word	0x0800851c

08006188 <puts>:
 8006188:	4b02      	ldr	r3, [pc, #8]	; (8006194 <puts+0xc>)
 800618a:	4601      	mov	r1, r0
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	f7ff bf8d 	b.w	80060ac <_puts_r>
 8006192:	bf00      	nop
 8006194:	2000000c 	.word	0x2000000c

08006198 <__swbuf_r>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	460e      	mov	r6, r1
 800619c:	4614      	mov	r4, r2
 800619e:	4605      	mov	r5, r0
 80061a0:	b118      	cbz	r0, 80061aa <__swbuf_r+0x12>
 80061a2:	6983      	ldr	r3, [r0, #24]
 80061a4:	b90b      	cbnz	r3, 80061aa <__swbuf_r+0x12>
 80061a6:	f001 f84b 	bl	8007240 <__sinit>
 80061aa:	4b21      	ldr	r3, [pc, #132]	; (8006230 <__swbuf_r+0x98>)
 80061ac:	429c      	cmp	r4, r3
 80061ae:	d12b      	bne.n	8006208 <__swbuf_r+0x70>
 80061b0:	686c      	ldr	r4, [r5, #4]
 80061b2:	69a3      	ldr	r3, [r4, #24]
 80061b4:	60a3      	str	r3, [r4, #8]
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	071a      	lsls	r2, r3, #28
 80061ba:	d52f      	bpl.n	800621c <__swbuf_r+0x84>
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	b36b      	cbz	r3, 800621c <__swbuf_r+0x84>
 80061c0:	6923      	ldr	r3, [r4, #16]
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	1ac0      	subs	r0, r0, r3
 80061c6:	6963      	ldr	r3, [r4, #20]
 80061c8:	b2f6      	uxtb	r6, r6
 80061ca:	4283      	cmp	r3, r0
 80061cc:	4637      	mov	r7, r6
 80061ce:	dc04      	bgt.n	80061da <__swbuf_r+0x42>
 80061d0:	4621      	mov	r1, r4
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 ffa0 	bl	8007118 <_fflush_r>
 80061d8:	bb30      	cbnz	r0, 8006228 <__swbuf_r+0x90>
 80061da:	68a3      	ldr	r3, [r4, #8]
 80061dc:	3b01      	subs	r3, #1
 80061de:	60a3      	str	r3, [r4, #8]
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	6022      	str	r2, [r4, #0]
 80061e6:	701e      	strb	r6, [r3, #0]
 80061e8:	6963      	ldr	r3, [r4, #20]
 80061ea:	3001      	adds	r0, #1
 80061ec:	4283      	cmp	r3, r0
 80061ee:	d004      	beq.n	80061fa <__swbuf_r+0x62>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	07db      	lsls	r3, r3, #31
 80061f4:	d506      	bpl.n	8006204 <__swbuf_r+0x6c>
 80061f6:	2e0a      	cmp	r6, #10
 80061f8:	d104      	bne.n	8006204 <__swbuf_r+0x6c>
 80061fa:	4621      	mov	r1, r4
 80061fc:	4628      	mov	r0, r5
 80061fe:	f000 ff8b 	bl	8007118 <_fflush_r>
 8006202:	b988      	cbnz	r0, 8006228 <__swbuf_r+0x90>
 8006204:	4638      	mov	r0, r7
 8006206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <__swbuf_r+0x9c>)
 800620a:	429c      	cmp	r4, r3
 800620c:	d101      	bne.n	8006212 <__swbuf_r+0x7a>
 800620e:	68ac      	ldr	r4, [r5, #8]
 8006210:	e7cf      	b.n	80061b2 <__swbuf_r+0x1a>
 8006212:	4b09      	ldr	r3, [pc, #36]	; (8006238 <__swbuf_r+0xa0>)
 8006214:	429c      	cmp	r4, r3
 8006216:	bf08      	it	eq
 8006218:	68ec      	ldreq	r4, [r5, #12]
 800621a:	e7ca      	b.n	80061b2 <__swbuf_r+0x1a>
 800621c:	4621      	mov	r1, r4
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f80c 	bl	800623c <__swsetup_r>
 8006224:	2800      	cmp	r0, #0
 8006226:	d0cb      	beq.n	80061c0 <__swbuf_r+0x28>
 8006228:	f04f 37ff 	mov.w	r7, #4294967295
 800622c:	e7ea      	b.n	8006204 <__swbuf_r+0x6c>
 800622e:	bf00      	nop
 8006230:	0800853c 	.word	0x0800853c
 8006234:	0800855c 	.word	0x0800855c
 8006238:	0800851c 	.word	0x0800851c

0800623c <__swsetup_r>:
 800623c:	4b32      	ldr	r3, [pc, #200]	; (8006308 <__swsetup_r+0xcc>)
 800623e:	b570      	push	{r4, r5, r6, lr}
 8006240:	681d      	ldr	r5, [r3, #0]
 8006242:	4606      	mov	r6, r0
 8006244:	460c      	mov	r4, r1
 8006246:	b125      	cbz	r5, 8006252 <__swsetup_r+0x16>
 8006248:	69ab      	ldr	r3, [r5, #24]
 800624a:	b913      	cbnz	r3, 8006252 <__swsetup_r+0x16>
 800624c:	4628      	mov	r0, r5
 800624e:	f000 fff7 	bl	8007240 <__sinit>
 8006252:	4b2e      	ldr	r3, [pc, #184]	; (800630c <__swsetup_r+0xd0>)
 8006254:	429c      	cmp	r4, r3
 8006256:	d10f      	bne.n	8006278 <__swsetup_r+0x3c>
 8006258:	686c      	ldr	r4, [r5, #4]
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006260:	0719      	lsls	r1, r3, #28
 8006262:	d42c      	bmi.n	80062be <__swsetup_r+0x82>
 8006264:	06dd      	lsls	r5, r3, #27
 8006266:	d411      	bmi.n	800628c <__swsetup_r+0x50>
 8006268:	2309      	movs	r3, #9
 800626a:	6033      	str	r3, [r6, #0]
 800626c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006270:	81a3      	strh	r3, [r4, #12]
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	e03e      	b.n	80062f6 <__swsetup_r+0xba>
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <__swsetup_r+0xd4>)
 800627a:	429c      	cmp	r4, r3
 800627c:	d101      	bne.n	8006282 <__swsetup_r+0x46>
 800627e:	68ac      	ldr	r4, [r5, #8]
 8006280:	e7eb      	b.n	800625a <__swsetup_r+0x1e>
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <__swsetup_r+0xd8>)
 8006284:	429c      	cmp	r4, r3
 8006286:	bf08      	it	eq
 8006288:	68ec      	ldreq	r4, [r5, #12]
 800628a:	e7e6      	b.n	800625a <__swsetup_r+0x1e>
 800628c:	0758      	lsls	r0, r3, #29
 800628e:	d512      	bpl.n	80062b6 <__swsetup_r+0x7a>
 8006290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006292:	b141      	cbz	r1, 80062a6 <__swsetup_r+0x6a>
 8006294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006298:	4299      	cmp	r1, r3
 800629a:	d002      	beq.n	80062a2 <__swsetup_r+0x66>
 800629c:	4630      	mov	r0, r6
 800629e:	f001 fc89 	bl	8007bb4 <_free_r>
 80062a2:	2300      	movs	r3, #0
 80062a4:	6363      	str	r3, [r4, #52]	; 0x34
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	2300      	movs	r3, #0
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	f043 0308 	orr.w	r3, r3, #8
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	b94b      	cbnz	r3, 80062d6 <__swsetup_r+0x9a>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062cc:	d003      	beq.n	80062d6 <__swsetup_r+0x9a>
 80062ce:	4621      	mov	r1, r4
 80062d0:	4630      	mov	r0, r6
 80062d2:	f001 f87f 	bl	80073d4 <__smakebuf_r>
 80062d6:	89a0      	ldrh	r0, [r4, #12]
 80062d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062dc:	f010 0301 	ands.w	r3, r0, #1
 80062e0:	d00a      	beq.n	80062f8 <__swsetup_r+0xbc>
 80062e2:	2300      	movs	r3, #0
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	6963      	ldr	r3, [r4, #20]
 80062e8:	425b      	negs	r3, r3
 80062ea:	61a3      	str	r3, [r4, #24]
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	b943      	cbnz	r3, 8006302 <__swsetup_r+0xc6>
 80062f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062f4:	d1ba      	bne.n	800626c <__swsetup_r+0x30>
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	0781      	lsls	r1, r0, #30
 80062fa:	bf58      	it	pl
 80062fc:	6963      	ldrpl	r3, [r4, #20]
 80062fe:	60a3      	str	r3, [r4, #8]
 8006300:	e7f4      	b.n	80062ec <__swsetup_r+0xb0>
 8006302:	2000      	movs	r0, #0
 8006304:	e7f7      	b.n	80062f6 <__swsetup_r+0xba>
 8006306:	bf00      	nop
 8006308:	2000000c 	.word	0x2000000c
 800630c:	0800853c 	.word	0x0800853c
 8006310:	0800855c 	.word	0x0800855c
 8006314:	0800851c 	.word	0x0800851c

08006318 <quorem>:
 8006318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	6903      	ldr	r3, [r0, #16]
 800631e:	690c      	ldr	r4, [r1, #16]
 8006320:	42a3      	cmp	r3, r4
 8006322:	4607      	mov	r7, r0
 8006324:	f2c0 8081 	blt.w	800642a <quorem+0x112>
 8006328:	3c01      	subs	r4, #1
 800632a:	f101 0814 	add.w	r8, r1, #20
 800632e:	f100 0514 	add.w	r5, r0, #20
 8006332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800633c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006340:	3301      	adds	r3, #1
 8006342:	429a      	cmp	r2, r3
 8006344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800634c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006350:	d331      	bcc.n	80063b6 <quorem+0x9e>
 8006352:	f04f 0e00 	mov.w	lr, #0
 8006356:	4640      	mov	r0, r8
 8006358:	46ac      	mov	ip, r5
 800635a:	46f2      	mov	sl, lr
 800635c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006360:	b293      	uxth	r3, r2
 8006362:	fb06 e303 	mla	r3, r6, r3, lr
 8006366:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800636a:	b29b      	uxth	r3, r3
 800636c:	ebaa 0303 	sub.w	r3, sl, r3
 8006370:	f8dc a000 	ldr.w	sl, [ip]
 8006374:	0c12      	lsrs	r2, r2, #16
 8006376:	fa13 f38a 	uxtah	r3, r3, sl
 800637a:	fb06 e202 	mla	r2, r6, r2, lr
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	9b00      	ldr	r3, [sp, #0]
 8006382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006386:	b292      	uxth	r2, r2
 8006388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800638c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006390:	f8bd 3000 	ldrh.w	r3, [sp]
 8006394:	4581      	cmp	r9, r0
 8006396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800639a:	f84c 3b04 	str.w	r3, [ip], #4
 800639e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063a2:	d2db      	bcs.n	800635c <quorem+0x44>
 80063a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063a8:	b92b      	cbnz	r3, 80063b6 <quorem+0x9e>
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	429d      	cmp	r5, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	d32e      	bcc.n	8006412 <quorem+0xfa>
 80063b4:	613c      	str	r4, [r7, #16]
 80063b6:	4638      	mov	r0, r7
 80063b8:	f001 fae4 	bl	8007984 <__mcmp>
 80063bc:	2800      	cmp	r0, #0
 80063be:	db24      	blt.n	800640a <quorem+0xf2>
 80063c0:	3601      	adds	r6, #1
 80063c2:	4628      	mov	r0, r5
 80063c4:	f04f 0c00 	mov.w	ip, #0
 80063c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80063cc:	f8d0 e000 	ldr.w	lr, [r0]
 80063d0:	b293      	uxth	r3, r2
 80063d2:	ebac 0303 	sub.w	r3, ip, r3
 80063d6:	0c12      	lsrs	r2, r2, #16
 80063d8:	fa13 f38e 	uxtah	r3, r3, lr
 80063dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ea:	45c1      	cmp	r9, r8
 80063ec:	f840 3b04 	str.w	r3, [r0], #4
 80063f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063f4:	d2e8      	bcs.n	80063c8 <quorem+0xb0>
 80063f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fe:	b922      	cbnz	r2, 800640a <quorem+0xf2>
 8006400:	3b04      	subs	r3, #4
 8006402:	429d      	cmp	r5, r3
 8006404:	461a      	mov	r2, r3
 8006406:	d30a      	bcc.n	800641e <quorem+0x106>
 8006408:	613c      	str	r4, [r7, #16]
 800640a:	4630      	mov	r0, r6
 800640c:	b003      	add	sp, #12
 800640e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	3b04      	subs	r3, #4
 8006416:	2a00      	cmp	r2, #0
 8006418:	d1cc      	bne.n	80063b4 <quorem+0x9c>
 800641a:	3c01      	subs	r4, #1
 800641c:	e7c7      	b.n	80063ae <quorem+0x96>
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	3b04      	subs	r3, #4
 8006422:	2a00      	cmp	r2, #0
 8006424:	d1f0      	bne.n	8006408 <quorem+0xf0>
 8006426:	3c01      	subs	r4, #1
 8006428:	e7eb      	b.n	8006402 <quorem+0xea>
 800642a:	2000      	movs	r0, #0
 800642c:	e7ee      	b.n	800640c <quorem+0xf4>
	...

08006430 <_dtoa_r>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	ed2d 8b04 	vpush	{d8-d9}
 8006438:	ec57 6b10 	vmov	r6, r7, d0
 800643c:	b093      	sub	sp, #76	; 0x4c
 800643e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006444:	9106      	str	r1, [sp, #24]
 8006446:	ee10 aa10 	vmov	sl, s0
 800644a:	4604      	mov	r4, r0
 800644c:	9209      	str	r2, [sp, #36]	; 0x24
 800644e:	930c      	str	r3, [sp, #48]	; 0x30
 8006450:	46bb      	mov	fp, r7
 8006452:	b975      	cbnz	r5, 8006472 <_dtoa_r+0x42>
 8006454:	2010      	movs	r0, #16
 8006456:	f000 fffd 	bl	8007454 <malloc>
 800645a:	4602      	mov	r2, r0
 800645c:	6260      	str	r0, [r4, #36]	; 0x24
 800645e:	b920      	cbnz	r0, 800646a <_dtoa_r+0x3a>
 8006460:	4ba7      	ldr	r3, [pc, #668]	; (8006700 <_dtoa_r+0x2d0>)
 8006462:	21ea      	movs	r1, #234	; 0xea
 8006464:	48a7      	ldr	r0, [pc, #668]	; (8006704 <_dtoa_r+0x2d4>)
 8006466:	f001 fe8d 	bl	8008184 <__assert_func>
 800646a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800646e:	6005      	str	r5, [r0, #0]
 8006470:	60c5      	str	r5, [r0, #12]
 8006472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006474:	6819      	ldr	r1, [r3, #0]
 8006476:	b151      	cbz	r1, 800648e <_dtoa_r+0x5e>
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	604a      	str	r2, [r1, #4]
 800647c:	2301      	movs	r3, #1
 800647e:	4093      	lsls	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
 8006482:	4620      	mov	r0, r4
 8006484:	f001 f83c 	bl	8007500 <_Bfree>
 8006488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	1e3b      	subs	r3, r7, #0
 8006490:	bfaa      	itet	ge
 8006492:	2300      	movge	r3, #0
 8006494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006498:	f8c8 3000 	strge.w	r3, [r8]
 800649c:	4b9a      	ldr	r3, [pc, #616]	; (8006708 <_dtoa_r+0x2d8>)
 800649e:	bfbc      	itt	lt
 80064a0:	2201      	movlt	r2, #1
 80064a2:	f8c8 2000 	strlt.w	r2, [r8]
 80064a6:	ea33 030b 	bics.w	r3, r3, fp
 80064aa:	d11b      	bne.n	80064e4 <_dtoa_r+0xb4>
 80064ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064b8:	4333      	orrs	r3, r6
 80064ba:	f000 8592 	beq.w	8006fe2 <_dtoa_r+0xbb2>
 80064be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c0:	b963      	cbnz	r3, 80064dc <_dtoa_r+0xac>
 80064c2:	4b92      	ldr	r3, [pc, #584]	; (800670c <_dtoa_r+0x2dc>)
 80064c4:	e022      	b.n	800650c <_dtoa_r+0xdc>
 80064c6:	4b92      	ldr	r3, [pc, #584]	; (8006710 <_dtoa_r+0x2e0>)
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	3308      	adds	r3, #8
 80064cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	9801      	ldr	r0, [sp, #4]
 80064d2:	b013      	add	sp, #76	; 0x4c
 80064d4:	ecbd 8b04 	vpop	{d8-d9}
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4b8b      	ldr	r3, [pc, #556]	; (800670c <_dtoa_r+0x2dc>)
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	3303      	adds	r3, #3
 80064e2:	e7f3      	b.n	80064cc <_dtoa_r+0x9c>
 80064e4:	2200      	movs	r2, #0
 80064e6:	2300      	movs	r3, #0
 80064e8:	4650      	mov	r0, sl
 80064ea:	4659      	mov	r1, fp
 80064ec:	f7fa faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f0:	ec4b ab19 	vmov	d9, sl, fp
 80064f4:	4680      	mov	r8, r0
 80064f6:	b158      	cbz	r0, 8006510 <_dtoa_r+0xe0>
 80064f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064fa:	2301      	movs	r3, #1
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 856b 	beq.w	8006fdc <_dtoa_r+0xbac>
 8006506:	4883      	ldr	r0, [pc, #524]	; (8006714 <_dtoa_r+0x2e4>)
 8006508:	6018      	str	r0, [r3, #0]
 800650a:	1e43      	subs	r3, r0, #1
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	e7df      	b.n	80064d0 <_dtoa_r+0xa0>
 8006510:	ec4b ab10 	vmov	d0, sl, fp
 8006514:	aa10      	add	r2, sp, #64	; 0x40
 8006516:	a911      	add	r1, sp, #68	; 0x44
 8006518:	4620      	mov	r0, r4
 800651a:	f001 fad9 	bl	8007ad0 <__d2b>
 800651e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006522:	ee08 0a10 	vmov	s16, r0
 8006526:	2d00      	cmp	r5, #0
 8006528:	f000 8084 	beq.w	8006634 <_dtoa_r+0x204>
 800652c:	ee19 3a90 	vmov	r3, s19
 8006530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006538:	4656      	mov	r6, sl
 800653a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800653e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006546:	4b74      	ldr	r3, [pc, #464]	; (8006718 <_dtoa_r+0x2e8>)
 8006548:	2200      	movs	r2, #0
 800654a:	4630      	mov	r0, r6
 800654c:	4639      	mov	r1, r7
 800654e:	f7f9 fe9b 	bl	8000288 <__aeabi_dsub>
 8006552:	a365      	add	r3, pc, #404	; (adr r3, 80066e8 <_dtoa_r+0x2b8>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7fa f84e 	bl	80005f8 <__aeabi_dmul>
 800655c:	a364      	add	r3, pc, #400	; (adr r3, 80066f0 <_dtoa_r+0x2c0>)
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f7f9 fe93 	bl	800028c <__adddf3>
 8006566:	4606      	mov	r6, r0
 8006568:	4628      	mov	r0, r5
 800656a:	460f      	mov	r7, r1
 800656c:	f7f9 ffda 	bl	8000524 <__aeabi_i2d>
 8006570:	a361      	add	r3, pc, #388	; (adr r3, 80066f8 <_dtoa_r+0x2c8>)
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f7fa f83f 	bl	80005f8 <__aeabi_dmul>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	f7f9 fe83 	bl	800028c <__adddf3>
 8006586:	4606      	mov	r6, r0
 8006588:	460f      	mov	r7, r1
 800658a:	f7fa fae5 	bl	8000b58 <__aeabi_d2iz>
 800658e:	2200      	movs	r2, #0
 8006590:	9000      	str	r0, [sp, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7fa faa0 	bl	8000adc <__aeabi_dcmplt>
 800659c:	b150      	cbz	r0, 80065b4 <_dtoa_r+0x184>
 800659e:	9800      	ldr	r0, [sp, #0]
 80065a0:	f7f9 ffc0 	bl	8000524 <__aeabi_i2d>
 80065a4:	4632      	mov	r2, r6
 80065a6:	463b      	mov	r3, r7
 80065a8:	f7fa fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ac:	b910      	cbnz	r0, 80065b4 <_dtoa_r+0x184>
 80065ae:	9b00      	ldr	r3, [sp, #0]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	9b00      	ldr	r3, [sp, #0]
 80065b6:	2b16      	cmp	r3, #22
 80065b8:	d85a      	bhi.n	8006670 <_dtoa_r+0x240>
 80065ba:	9a00      	ldr	r2, [sp, #0]
 80065bc:	4b57      	ldr	r3, [pc, #348]	; (800671c <_dtoa_r+0x2ec>)
 80065be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	ec51 0b19 	vmov	r0, r1, d9
 80065ca:	f7fa fa87 	bl	8000adc <__aeabi_dcmplt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d050      	beq.n	8006674 <_dtoa_r+0x244>
 80065d2:	9b00      	ldr	r3, [sp, #0]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	2300      	movs	r3, #0
 80065da:	930b      	str	r3, [sp, #44]	; 0x2c
 80065dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065de:	1b5d      	subs	r5, r3, r5
 80065e0:	1e6b      	subs	r3, r5, #1
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	bf45      	ittet	mi
 80065e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80065ea:	9304      	strmi	r3, [sp, #16]
 80065ec:	2300      	movpl	r3, #0
 80065ee:	2300      	movmi	r3, #0
 80065f0:	bf4c      	ite	mi
 80065f2:	9305      	strmi	r3, [sp, #20]
 80065f4:	9304      	strpl	r3, [sp, #16]
 80065f6:	9b00      	ldr	r3, [sp, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	db3d      	blt.n	8006678 <_dtoa_r+0x248>
 80065fc:	9b05      	ldr	r3, [sp, #20]
 80065fe:	9a00      	ldr	r2, [sp, #0]
 8006600:	920a      	str	r2, [sp, #40]	; 0x28
 8006602:	4413      	add	r3, r2
 8006604:	9305      	str	r3, [sp, #20]
 8006606:	2300      	movs	r3, #0
 8006608:	9307      	str	r3, [sp, #28]
 800660a:	9b06      	ldr	r3, [sp, #24]
 800660c:	2b09      	cmp	r3, #9
 800660e:	f200 8089 	bhi.w	8006724 <_dtoa_r+0x2f4>
 8006612:	2b05      	cmp	r3, #5
 8006614:	bfc4      	itt	gt
 8006616:	3b04      	subgt	r3, #4
 8006618:	9306      	strgt	r3, [sp, #24]
 800661a:	9b06      	ldr	r3, [sp, #24]
 800661c:	f1a3 0302 	sub.w	r3, r3, #2
 8006620:	bfcc      	ite	gt
 8006622:	2500      	movgt	r5, #0
 8006624:	2501      	movle	r5, #1
 8006626:	2b03      	cmp	r3, #3
 8006628:	f200 8087 	bhi.w	800673a <_dtoa_r+0x30a>
 800662c:	e8df f003 	tbb	[pc, r3]
 8006630:	59383a2d 	.word	0x59383a2d
 8006634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006638:	441d      	add	r5, r3
 800663a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800663e:	2b20      	cmp	r3, #32
 8006640:	bfc1      	itttt	gt
 8006642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800664a:	fa0b f303 	lslgt.w	r3, fp, r3
 800664e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006652:	bfda      	itte	le
 8006654:	f1c3 0320 	rsble	r3, r3, #32
 8006658:	fa06 f003 	lslle.w	r0, r6, r3
 800665c:	4318      	orrgt	r0, r3
 800665e:	f7f9 ff51 	bl	8000504 <__aeabi_ui2d>
 8006662:	2301      	movs	r3, #1
 8006664:	4606      	mov	r6, r0
 8006666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800666a:	3d01      	subs	r5, #1
 800666c:	930e      	str	r3, [sp, #56]	; 0x38
 800666e:	e76a      	b.n	8006546 <_dtoa_r+0x116>
 8006670:	2301      	movs	r3, #1
 8006672:	e7b2      	b.n	80065da <_dtoa_r+0x1aa>
 8006674:	900b      	str	r0, [sp, #44]	; 0x2c
 8006676:	e7b1      	b.n	80065dc <_dtoa_r+0x1ac>
 8006678:	9b04      	ldr	r3, [sp, #16]
 800667a:	9a00      	ldr	r2, [sp, #0]
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	9304      	str	r3, [sp, #16]
 8006680:	4253      	negs	r3, r2
 8006682:	9307      	str	r3, [sp, #28]
 8006684:	2300      	movs	r3, #0
 8006686:	930a      	str	r3, [sp, #40]	; 0x28
 8006688:	e7bf      	b.n	800660a <_dtoa_r+0x1da>
 800668a:	2300      	movs	r3, #0
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006690:	2b00      	cmp	r3, #0
 8006692:	dc55      	bgt.n	8006740 <_dtoa_r+0x310>
 8006694:	2301      	movs	r3, #1
 8006696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800669a:	461a      	mov	r2, r3
 800669c:	9209      	str	r2, [sp, #36]	; 0x24
 800669e:	e00c      	b.n	80066ba <_dtoa_r+0x28a>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e7f3      	b.n	800668c <_dtoa_r+0x25c>
 80066a4:	2300      	movs	r3, #0
 80066a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a8:	9308      	str	r3, [sp, #32]
 80066aa:	9b00      	ldr	r3, [sp, #0]
 80066ac:	4413      	add	r3, r2
 80066ae:	9302      	str	r3, [sp, #8]
 80066b0:	3301      	adds	r3, #1
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	bfb8      	it	lt
 80066b8:	2301      	movlt	r3, #1
 80066ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066bc:	2200      	movs	r2, #0
 80066be:	6042      	str	r2, [r0, #4]
 80066c0:	2204      	movs	r2, #4
 80066c2:	f102 0614 	add.w	r6, r2, #20
 80066c6:	429e      	cmp	r6, r3
 80066c8:	6841      	ldr	r1, [r0, #4]
 80066ca:	d93d      	bls.n	8006748 <_dtoa_r+0x318>
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fed7 	bl	8007480 <_Balloc>
 80066d2:	9001      	str	r0, [sp, #4]
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d13b      	bne.n	8006750 <_dtoa_r+0x320>
 80066d8:	4b11      	ldr	r3, [pc, #68]	; (8006720 <_dtoa_r+0x2f0>)
 80066da:	4602      	mov	r2, r0
 80066dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066e0:	e6c0      	b.n	8006464 <_dtoa_r+0x34>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7df      	b.n	80066a6 <_dtoa_r+0x276>
 80066e6:	bf00      	nop
 80066e8:	636f4361 	.word	0x636f4361
 80066ec:	3fd287a7 	.word	0x3fd287a7
 80066f0:	8b60c8b3 	.word	0x8b60c8b3
 80066f4:	3fc68a28 	.word	0x3fc68a28
 80066f8:	509f79fb 	.word	0x509f79fb
 80066fc:	3fd34413 	.word	0x3fd34413
 8006700:	08008499 	.word	0x08008499
 8006704:	080084b0 	.word	0x080084b0
 8006708:	7ff00000 	.word	0x7ff00000
 800670c:	08008495 	.word	0x08008495
 8006710:	0800848c 	.word	0x0800848c
 8006714:	08008469 	.word	0x08008469
 8006718:	3ff80000 	.word	0x3ff80000
 800671c:	08008600 	.word	0x08008600
 8006720:	0800850b 	.word	0x0800850b
 8006724:	2501      	movs	r5, #1
 8006726:	2300      	movs	r3, #0
 8006728:	9306      	str	r3, [sp, #24]
 800672a:	9508      	str	r5, [sp, #32]
 800672c:	f04f 33ff 	mov.w	r3, #4294967295
 8006730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	2312      	movs	r3, #18
 8006738:	e7b0      	b.n	800669c <_dtoa_r+0x26c>
 800673a:	2301      	movs	r3, #1
 800673c:	9308      	str	r3, [sp, #32]
 800673e:	e7f5      	b.n	800672c <_dtoa_r+0x2fc>
 8006740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006746:	e7b8      	b.n	80066ba <_dtoa_r+0x28a>
 8006748:	3101      	adds	r1, #1
 800674a:	6041      	str	r1, [r0, #4]
 800674c:	0052      	lsls	r2, r2, #1
 800674e:	e7b8      	b.n	80066c2 <_dtoa_r+0x292>
 8006750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006752:	9a01      	ldr	r2, [sp, #4]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	2b0e      	cmp	r3, #14
 800675a:	f200 809d 	bhi.w	8006898 <_dtoa_r+0x468>
 800675e:	2d00      	cmp	r5, #0
 8006760:	f000 809a 	beq.w	8006898 <_dtoa_r+0x468>
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	dd32      	ble.n	80067d0 <_dtoa_r+0x3a0>
 800676a:	4ab7      	ldr	r2, [pc, #732]	; (8006a48 <_dtoa_r+0x618>)
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006778:	9b00      	ldr	r3, [sp, #0]
 800677a:	05d8      	lsls	r0, r3, #23
 800677c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006780:	d516      	bpl.n	80067b0 <_dtoa_r+0x380>
 8006782:	4bb2      	ldr	r3, [pc, #712]	; (8006a4c <_dtoa_r+0x61c>)
 8006784:	ec51 0b19 	vmov	r0, r1, d9
 8006788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800678c:	f7fa f85e 	bl	800084c <__aeabi_ddiv>
 8006790:	f007 070f 	and.w	r7, r7, #15
 8006794:	4682      	mov	sl, r0
 8006796:	468b      	mov	fp, r1
 8006798:	2503      	movs	r5, #3
 800679a:	4eac      	ldr	r6, [pc, #688]	; (8006a4c <_dtoa_r+0x61c>)
 800679c:	b957      	cbnz	r7, 80067b4 <_dtoa_r+0x384>
 800679e:	4642      	mov	r2, r8
 80067a0:	464b      	mov	r3, r9
 80067a2:	4650      	mov	r0, sl
 80067a4:	4659      	mov	r1, fp
 80067a6:	f7fa f851 	bl	800084c <__aeabi_ddiv>
 80067aa:	4682      	mov	sl, r0
 80067ac:	468b      	mov	fp, r1
 80067ae:	e028      	b.n	8006802 <_dtoa_r+0x3d2>
 80067b0:	2502      	movs	r5, #2
 80067b2:	e7f2      	b.n	800679a <_dtoa_r+0x36a>
 80067b4:	07f9      	lsls	r1, r7, #31
 80067b6:	d508      	bpl.n	80067ca <_dtoa_r+0x39a>
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067c0:	f7f9 ff1a 	bl	80005f8 <__aeabi_dmul>
 80067c4:	3501      	adds	r5, #1
 80067c6:	4680      	mov	r8, r0
 80067c8:	4689      	mov	r9, r1
 80067ca:	107f      	asrs	r7, r7, #1
 80067cc:	3608      	adds	r6, #8
 80067ce:	e7e5      	b.n	800679c <_dtoa_r+0x36c>
 80067d0:	f000 809b 	beq.w	800690a <_dtoa_r+0x4da>
 80067d4:	9b00      	ldr	r3, [sp, #0]
 80067d6:	4f9d      	ldr	r7, [pc, #628]	; (8006a4c <_dtoa_r+0x61c>)
 80067d8:	425e      	negs	r6, r3
 80067da:	4b9b      	ldr	r3, [pc, #620]	; (8006a48 <_dtoa_r+0x618>)
 80067dc:	f006 020f 	and.w	r2, r6, #15
 80067e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	ec51 0b19 	vmov	r0, r1, d9
 80067ec:	f7f9 ff04 	bl	80005f8 <__aeabi_dmul>
 80067f0:	1136      	asrs	r6, r6, #4
 80067f2:	4682      	mov	sl, r0
 80067f4:	468b      	mov	fp, r1
 80067f6:	2300      	movs	r3, #0
 80067f8:	2502      	movs	r5, #2
 80067fa:	2e00      	cmp	r6, #0
 80067fc:	d17a      	bne.n	80068f4 <_dtoa_r+0x4c4>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d3      	bne.n	80067aa <_dtoa_r+0x37a>
 8006802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8082 	beq.w	800690e <_dtoa_r+0x4de>
 800680a:	4b91      	ldr	r3, [pc, #580]	; (8006a50 <_dtoa_r+0x620>)
 800680c:	2200      	movs	r2, #0
 800680e:	4650      	mov	r0, sl
 8006810:	4659      	mov	r1, fp
 8006812:	f7fa f963 	bl	8000adc <__aeabi_dcmplt>
 8006816:	2800      	cmp	r0, #0
 8006818:	d079      	beq.n	800690e <_dtoa_r+0x4de>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d076      	beq.n	800690e <_dtoa_r+0x4de>
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	dd36      	ble.n	8006894 <_dtoa_r+0x464>
 8006826:	9b00      	ldr	r3, [sp, #0]
 8006828:	4650      	mov	r0, sl
 800682a:	4659      	mov	r1, fp
 800682c:	1e5f      	subs	r7, r3, #1
 800682e:	2200      	movs	r2, #0
 8006830:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <_dtoa_r+0x624>)
 8006832:	f7f9 fee1 	bl	80005f8 <__aeabi_dmul>
 8006836:	9e02      	ldr	r6, [sp, #8]
 8006838:	4682      	mov	sl, r0
 800683a:	468b      	mov	fp, r1
 800683c:	3501      	adds	r5, #1
 800683e:	4628      	mov	r0, r5
 8006840:	f7f9 fe70 	bl	8000524 <__aeabi_i2d>
 8006844:	4652      	mov	r2, sl
 8006846:	465b      	mov	r3, fp
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	4b82      	ldr	r3, [pc, #520]	; (8006a58 <_dtoa_r+0x628>)
 800684e:	2200      	movs	r2, #0
 8006850:	f7f9 fd1c 	bl	800028c <__adddf3>
 8006854:	46d0      	mov	r8, sl
 8006856:	46d9      	mov	r9, fp
 8006858:	4682      	mov	sl, r0
 800685a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800685e:	2e00      	cmp	r6, #0
 8006860:	d158      	bne.n	8006914 <_dtoa_r+0x4e4>
 8006862:	4b7e      	ldr	r3, [pc, #504]	; (8006a5c <_dtoa_r+0x62c>)
 8006864:	2200      	movs	r2, #0
 8006866:	4640      	mov	r0, r8
 8006868:	4649      	mov	r1, r9
 800686a:	f7f9 fd0d 	bl	8000288 <__aeabi_dsub>
 800686e:	4652      	mov	r2, sl
 8006870:	465b      	mov	r3, fp
 8006872:	4680      	mov	r8, r0
 8006874:	4689      	mov	r9, r1
 8006876:	f7fa f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800687a:	2800      	cmp	r0, #0
 800687c:	f040 8295 	bne.w	8006daa <_dtoa_r+0x97a>
 8006880:	4652      	mov	r2, sl
 8006882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006886:	4640      	mov	r0, r8
 8006888:	4649      	mov	r1, r9
 800688a:	f7fa f927 	bl	8000adc <__aeabi_dcmplt>
 800688e:	2800      	cmp	r0, #0
 8006890:	f040 8289 	bne.w	8006da6 <_dtoa_r+0x976>
 8006894:	ec5b ab19 	vmov	sl, fp, d9
 8006898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800689a:	2b00      	cmp	r3, #0
 800689c:	f2c0 8148 	blt.w	8006b30 <_dtoa_r+0x700>
 80068a0:	9a00      	ldr	r2, [sp, #0]
 80068a2:	2a0e      	cmp	r2, #14
 80068a4:	f300 8144 	bgt.w	8006b30 <_dtoa_r+0x700>
 80068a8:	4b67      	ldr	r3, [pc, #412]	; (8006a48 <_dtoa_r+0x618>)
 80068aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f280 80d5 	bge.w	8006a64 <_dtoa_r+0x634>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f300 80d1 	bgt.w	8006a64 <_dtoa_r+0x634>
 80068c2:	f040 826f 	bne.w	8006da4 <_dtoa_r+0x974>
 80068c6:	4b65      	ldr	r3, [pc, #404]	; (8006a5c <_dtoa_r+0x62c>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	4640      	mov	r0, r8
 80068cc:	4649      	mov	r1, r9
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	4652      	mov	r2, sl
 80068d4:	465b      	mov	r3, fp
 80068d6:	f7fa f915 	bl	8000b04 <__aeabi_dcmpge>
 80068da:	9e03      	ldr	r6, [sp, #12]
 80068dc:	4637      	mov	r7, r6
 80068de:	2800      	cmp	r0, #0
 80068e0:	f040 8245 	bne.w	8006d6e <_dtoa_r+0x93e>
 80068e4:	9d01      	ldr	r5, [sp, #4]
 80068e6:	2331      	movs	r3, #49	; 0x31
 80068e8:	f805 3b01 	strb.w	r3, [r5], #1
 80068ec:	9b00      	ldr	r3, [sp, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	e240      	b.n	8006d76 <_dtoa_r+0x946>
 80068f4:	07f2      	lsls	r2, r6, #31
 80068f6:	d505      	bpl.n	8006904 <_dtoa_r+0x4d4>
 80068f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068fc:	f7f9 fe7c 	bl	80005f8 <__aeabi_dmul>
 8006900:	3501      	adds	r5, #1
 8006902:	2301      	movs	r3, #1
 8006904:	1076      	asrs	r6, r6, #1
 8006906:	3708      	adds	r7, #8
 8006908:	e777      	b.n	80067fa <_dtoa_r+0x3ca>
 800690a:	2502      	movs	r5, #2
 800690c:	e779      	b.n	8006802 <_dtoa_r+0x3d2>
 800690e:	9f00      	ldr	r7, [sp, #0]
 8006910:	9e03      	ldr	r6, [sp, #12]
 8006912:	e794      	b.n	800683e <_dtoa_r+0x40e>
 8006914:	9901      	ldr	r1, [sp, #4]
 8006916:	4b4c      	ldr	r3, [pc, #304]	; (8006a48 <_dtoa_r+0x618>)
 8006918:	4431      	add	r1, r6
 800691a:	910d      	str	r1, [sp, #52]	; 0x34
 800691c:	9908      	ldr	r1, [sp, #32]
 800691e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006926:	2900      	cmp	r1, #0
 8006928:	d043      	beq.n	80069b2 <_dtoa_r+0x582>
 800692a:	494d      	ldr	r1, [pc, #308]	; (8006a60 <_dtoa_r+0x630>)
 800692c:	2000      	movs	r0, #0
 800692e:	f7f9 ff8d 	bl	800084c <__aeabi_ddiv>
 8006932:	4652      	mov	r2, sl
 8006934:	465b      	mov	r3, fp
 8006936:	f7f9 fca7 	bl	8000288 <__aeabi_dsub>
 800693a:	9d01      	ldr	r5, [sp, #4]
 800693c:	4682      	mov	sl, r0
 800693e:	468b      	mov	fp, r1
 8006940:	4649      	mov	r1, r9
 8006942:	4640      	mov	r0, r8
 8006944:	f7fa f908 	bl	8000b58 <__aeabi_d2iz>
 8006948:	4606      	mov	r6, r0
 800694a:	f7f9 fdeb 	bl	8000524 <__aeabi_i2d>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7f9 fc97 	bl	8000288 <__aeabi_dsub>
 800695a:	3630      	adds	r6, #48	; 0x30
 800695c:	f805 6b01 	strb.w	r6, [r5], #1
 8006960:	4652      	mov	r2, sl
 8006962:	465b      	mov	r3, fp
 8006964:	4680      	mov	r8, r0
 8006966:	4689      	mov	r9, r1
 8006968:	f7fa f8b8 	bl	8000adc <__aeabi_dcmplt>
 800696c:	2800      	cmp	r0, #0
 800696e:	d163      	bne.n	8006a38 <_dtoa_r+0x608>
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	4936      	ldr	r1, [pc, #216]	; (8006a50 <_dtoa_r+0x620>)
 8006976:	2000      	movs	r0, #0
 8006978:	f7f9 fc86 	bl	8000288 <__aeabi_dsub>
 800697c:	4652      	mov	r2, sl
 800697e:	465b      	mov	r3, fp
 8006980:	f7fa f8ac 	bl	8000adc <__aeabi_dcmplt>
 8006984:	2800      	cmp	r0, #0
 8006986:	f040 80b5 	bne.w	8006af4 <_dtoa_r+0x6c4>
 800698a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800698c:	429d      	cmp	r5, r3
 800698e:	d081      	beq.n	8006894 <_dtoa_r+0x464>
 8006990:	4b30      	ldr	r3, [pc, #192]	; (8006a54 <_dtoa_r+0x624>)
 8006992:	2200      	movs	r2, #0
 8006994:	4650      	mov	r0, sl
 8006996:	4659      	mov	r1, fp
 8006998:	f7f9 fe2e 	bl	80005f8 <__aeabi_dmul>
 800699c:	4b2d      	ldr	r3, [pc, #180]	; (8006a54 <_dtoa_r+0x624>)
 800699e:	4682      	mov	sl, r0
 80069a0:	468b      	mov	fp, r1
 80069a2:	4640      	mov	r0, r8
 80069a4:	4649      	mov	r1, r9
 80069a6:	2200      	movs	r2, #0
 80069a8:	f7f9 fe26 	bl	80005f8 <__aeabi_dmul>
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	e7c6      	b.n	8006940 <_dtoa_r+0x510>
 80069b2:	4650      	mov	r0, sl
 80069b4:	4659      	mov	r1, fp
 80069b6:	f7f9 fe1f 	bl	80005f8 <__aeabi_dmul>
 80069ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069bc:	9d01      	ldr	r5, [sp, #4]
 80069be:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c0:	4682      	mov	sl, r0
 80069c2:	468b      	mov	fp, r1
 80069c4:	4649      	mov	r1, r9
 80069c6:	4640      	mov	r0, r8
 80069c8:	f7fa f8c6 	bl	8000b58 <__aeabi_d2iz>
 80069cc:	4606      	mov	r6, r0
 80069ce:	f7f9 fda9 	bl	8000524 <__aeabi_i2d>
 80069d2:	3630      	adds	r6, #48	; 0x30
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4640      	mov	r0, r8
 80069da:	4649      	mov	r1, r9
 80069dc:	f7f9 fc54 	bl	8000288 <__aeabi_dsub>
 80069e0:	f805 6b01 	strb.w	r6, [r5], #1
 80069e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e6:	429d      	cmp	r5, r3
 80069e8:	4680      	mov	r8, r0
 80069ea:	4689      	mov	r9, r1
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	d124      	bne.n	8006a3c <_dtoa_r+0x60c>
 80069f2:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <_dtoa_r+0x630>)
 80069f4:	4650      	mov	r0, sl
 80069f6:	4659      	mov	r1, fp
 80069f8:	f7f9 fc48 	bl	800028c <__adddf3>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4640      	mov	r0, r8
 8006a02:	4649      	mov	r1, r9
 8006a04:	f7fa f888 	bl	8000b18 <__aeabi_dcmpgt>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d173      	bne.n	8006af4 <_dtoa_r+0x6c4>
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	465b      	mov	r3, fp
 8006a10:	4913      	ldr	r1, [pc, #76]	; (8006a60 <_dtoa_r+0x630>)
 8006a12:	2000      	movs	r0, #0
 8006a14:	f7f9 fc38 	bl	8000288 <__aeabi_dsub>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	4649      	mov	r1, r9
 8006a20:	f7fa f85c 	bl	8000adc <__aeabi_dcmplt>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f43f af35 	beq.w	8006894 <_dtoa_r+0x464>
 8006a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a2c:	1e6b      	subs	r3, r5, #1
 8006a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a34:	2b30      	cmp	r3, #48	; 0x30
 8006a36:	d0f8      	beq.n	8006a2a <_dtoa_r+0x5fa>
 8006a38:	9700      	str	r7, [sp, #0]
 8006a3a:	e049      	b.n	8006ad0 <_dtoa_r+0x6a0>
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <_dtoa_r+0x624>)
 8006a3e:	f7f9 fddb 	bl	80005f8 <__aeabi_dmul>
 8006a42:	4680      	mov	r8, r0
 8006a44:	4689      	mov	r9, r1
 8006a46:	e7bd      	b.n	80069c4 <_dtoa_r+0x594>
 8006a48:	08008600 	.word	0x08008600
 8006a4c:	080085d8 	.word	0x080085d8
 8006a50:	3ff00000 	.word	0x3ff00000
 8006a54:	40240000 	.word	0x40240000
 8006a58:	401c0000 	.word	0x401c0000
 8006a5c:	40140000 	.word	0x40140000
 8006a60:	3fe00000 	.word	0x3fe00000
 8006a64:	9d01      	ldr	r5, [sp, #4]
 8006a66:	4656      	mov	r6, sl
 8006a68:	465f      	mov	r7, fp
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	f7f9 feeb 	bl	800084c <__aeabi_ddiv>
 8006a76:	f7fa f86f 	bl	8000b58 <__aeabi_d2iz>
 8006a7a:	4682      	mov	sl, r0
 8006a7c:	f7f9 fd52 	bl	8000524 <__aeabi_i2d>
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f7f9 fdb8 	bl	80005f8 <__aeabi_dmul>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a94:	f7f9 fbf8 	bl	8000288 <__aeabi_dsub>
 8006a98:	f805 6b01 	strb.w	r6, [r5], #1
 8006a9c:	9e01      	ldr	r6, [sp, #4]
 8006a9e:	9f03      	ldr	r7, [sp, #12]
 8006aa0:	1bae      	subs	r6, r5, r6
 8006aa2:	42b7      	cmp	r7, r6
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	d135      	bne.n	8006b16 <_dtoa_r+0x6e6>
 8006aaa:	f7f9 fbef 	bl	800028c <__adddf3>
 8006aae:	4642      	mov	r2, r8
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7fa f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8006aba:	b9d0      	cbnz	r0, 8006af2 <_dtoa_r+0x6c2>
 8006abc:	4642      	mov	r2, r8
 8006abe:	464b      	mov	r3, r9
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7fa f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ac8:	b110      	cbz	r0, 8006ad0 <_dtoa_r+0x6a0>
 8006aca:	f01a 0f01 	tst.w	sl, #1
 8006ace:	d110      	bne.n	8006af2 <_dtoa_r+0x6c2>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	ee18 1a10 	vmov	r1, s16
 8006ad6:	f000 fd13 	bl	8007500 <_Bfree>
 8006ada:	2300      	movs	r3, #0
 8006adc:	9800      	ldr	r0, [sp, #0]
 8006ade:	702b      	strb	r3, [r5, #0]
 8006ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	6018      	str	r0, [r3, #0]
 8006ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f43f acf1 	beq.w	80064d0 <_dtoa_r+0xa0>
 8006aee:	601d      	str	r5, [r3, #0]
 8006af0:	e4ee      	b.n	80064d0 <_dtoa_r+0xa0>
 8006af2:	9f00      	ldr	r7, [sp, #0]
 8006af4:	462b      	mov	r3, r5
 8006af6:	461d      	mov	r5, r3
 8006af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006afc:	2a39      	cmp	r2, #57	; 0x39
 8006afe:	d106      	bne.n	8006b0e <_dtoa_r+0x6de>
 8006b00:	9a01      	ldr	r2, [sp, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d1f7      	bne.n	8006af6 <_dtoa_r+0x6c6>
 8006b06:	9901      	ldr	r1, [sp, #4]
 8006b08:	2230      	movs	r2, #48	; 0x30
 8006b0a:	3701      	adds	r7, #1
 8006b0c:	700a      	strb	r2, [r1, #0]
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	3201      	adds	r2, #1
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e790      	b.n	8006a38 <_dtoa_r+0x608>
 8006b16:	4ba6      	ldr	r3, [pc, #664]	; (8006db0 <_dtoa_r+0x980>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f7f9 fd6d 	bl	80005f8 <__aeabi_dmul>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2300      	movs	r3, #0
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	f7f9 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d09d      	beq.n	8006a6a <_dtoa_r+0x63a>
 8006b2e:	e7cf      	b.n	8006ad0 <_dtoa_r+0x6a0>
 8006b30:	9a08      	ldr	r2, [sp, #32]
 8006b32:	2a00      	cmp	r2, #0
 8006b34:	f000 80d7 	beq.w	8006ce6 <_dtoa_r+0x8b6>
 8006b38:	9a06      	ldr	r2, [sp, #24]
 8006b3a:	2a01      	cmp	r2, #1
 8006b3c:	f300 80ba 	bgt.w	8006cb4 <_dtoa_r+0x884>
 8006b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b42:	2a00      	cmp	r2, #0
 8006b44:	f000 80b2 	beq.w	8006cac <_dtoa_r+0x87c>
 8006b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b4c:	9e07      	ldr	r6, [sp, #28]
 8006b4e:	9d04      	ldr	r5, [sp, #16]
 8006b50:	9a04      	ldr	r2, [sp, #16]
 8006b52:	441a      	add	r2, r3
 8006b54:	9204      	str	r2, [sp, #16]
 8006b56:	9a05      	ldr	r2, [sp, #20]
 8006b58:	2101      	movs	r1, #1
 8006b5a:	441a      	add	r2, r3
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	9205      	str	r2, [sp, #20]
 8006b60:	f000 fd86 	bl	8007670 <__i2b>
 8006b64:	4607      	mov	r7, r0
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	dd0c      	ble.n	8006b84 <_dtoa_r+0x754>
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dd09      	ble.n	8006b84 <_dtoa_r+0x754>
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	bfa8      	it	ge
 8006b76:	462b      	movge	r3, r5
 8006b78:	1ad2      	subs	r2, r2, r3
 8006b7a:	9204      	str	r2, [sp, #16]
 8006b7c:	9a05      	ldr	r2, [sp, #20]
 8006b7e:	1aed      	subs	r5, r5, r3
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	9305      	str	r3, [sp, #20]
 8006b84:	9b07      	ldr	r3, [sp, #28]
 8006b86:	b31b      	cbz	r3, 8006bd0 <_dtoa_r+0x7a0>
 8006b88:	9b08      	ldr	r3, [sp, #32]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80af 	beq.w	8006cee <_dtoa_r+0x8be>
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	dd13      	ble.n	8006bbc <_dtoa_r+0x78c>
 8006b94:	4639      	mov	r1, r7
 8006b96:	4632      	mov	r2, r6
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fe29 	bl	80077f0 <__pow5mult>
 8006b9e:	ee18 2a10 	vmov	r2, s16
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 fd78 	bl	800769c <__multiply>
 8006bac:	ee18 1a10 	vmov	r1, s16
 8006bb0:	4680      	mov	r8, r0
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 fca4 	bl	8007500 <_Bfree>
 8006bb8:	ee08 8a10 	vmov	s16, r8
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	1b9a      	subs	r2, r3, r6
 8006bc0:	d006      	beq.n	8006bd0 <_dtoa_r+0x7a0>
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fe12 	bl	80077f0 <__pow5mult>
 8006bcc:	ee08 0a10 	vmov	s16, r0
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fd4c 	bl	8007670 <__i2b>
 8006bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	4606      	mov	r6, r0
 8006bde:	f340 8088 	ble.w	8006cf2 <_dtoa_r+0x8c2>
 8006be2:	461a      	mov	r2, r3
 8006be4:	4601      	mov	r1, r0
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fe02 	bl	80077f0 <__pow5mult>
 8006bec:	9b06      	ldr	r3, [sp, #24]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	f340 8081 	ble.w	8006cf8 <_dtoa_r+0x8c8>
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	6933      	ldr	r3, [r6, #16]
 8006bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c00:	6918      	ldr	r0, [r3, #16]
 8006c02:	f000 fce5 	bl	80075d0 <__hi0bits>
 8006c06:	f1c0 0020 	rsb	r0, r0, #32
 8006c0a:	9b05      	ldr	r3, [sp, #20]
 8006c0c:	4418      	add	r0, r3
 8006c0e:	f010 001f 	ands.w	r0, r0, #31
 8006c12:	f000 8092 	beq.w	8006d3a <_dtoa_r+0x90a>
 8006c16:	f1c0 0320 	rsb	r3, r0, #32
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	f340 808a 	ble.w	8006d34 <_dtoa_r+0x904>
 8006c20:	f1c0 001c 	rsb	r0, r0, #28
 8006c24:	9b04      	ldr	r3, [sp, #16]
 8006c26:	4403      	add	r3, r0
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	9b05      	ldr	r3, [sp, #20]
 8006c2c:	4403      	add	r3, r0
 8006c2e:	4405      	add	r5, r0
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	9b04      	ldr	r3, [sp, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dd07      	ble.n	8006c48 <_dtoa_r+0x818>
 8006c38:	ee18 1a10 	vmov	r1, s16
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fe30 	bl	80078a4 <__lshift>
 8006c44:	ee08 0a10 	vmov	s16, r0
 8006c48:	9b05      	ldr	r3, [sp, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dd05      	ble.n	8006c5a <_dtoa_r+0x82a>
 8006c4e:	4631      	mov	r1, r6
 8006c50:	461a      	mov	r2, r3
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 fe26 	bl	80078a4 <__lshift>
 8006c58:	4606      	mov	r6, r0
 8006c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d06e      	beq.n	8006d3e <_dtoa_r+0x90e>
 8006c60:	ee18 0a10 	vmov	r0, s16
 8006c64:	4631      	mov	r1, r6
 8006c66:	f000 fe8d 	bl	8007984 <__mcmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	da67      	bge.n	8006d3e <_dtoa_r+0x90e>
 8006c6e:	9b00      	ldr	r3, [sp, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	ee18 1a10 	vmov	r1, s16
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	220a      	movs	r2, #10
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 fc61 	bl	8007544 <__multadd>
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	ee08 0a10 	vmov	s16, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 81b1 	beq.w	8006ff0 <_dtoa_r+0xbc0>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4639      	mov	r1, r7
 8006c92:	220a      	movs	r2, #10
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fc55 	bl	8007544 <__multadd>
 8006c9a:	9b02      	ldr	r3, [sp, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	f300 808e 	bgt.w	8006dc0 <_dtoa_r+0x990>
 8006ca4:	9b06      	ldr	r3, [sp, #24]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	dc51      	bgt.n	8006d4e <_dtoa_r+0x91e>
 8006caa:	e089      	b.n	8006dc0 <_dtoa_r+0x990>
 8006cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cb2:	e74b      	b.n	8006b4c <_dtoa_r+0x71c>
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	1e5e      	subs	r6, r3, #1
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	42b3      	cmp	r3, r6
 8006cbc:	bfbf      	itttt	lt
 8006cbe:	9b07      	ldrlt	r3, [sp, #28]
 8006cc0:	9607      	strlt	r6, [sp, #28]
 8006cc2:	1af2      	sublt	r2, r6, r3
 8006cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cc6:	bfb6      	itet	lt
 8006cc8:	189b      	addlt	r3, r3, r2
 8006cca:	1b9e      	subge	r6, r3, r6
 8006ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	bfb8      	it	lt
 8006cd2:	2600      	movlt	r6, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfb7      	itett	lt
 8006cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ce0:	1a9d      	sublt	r5, r3, r2
 8006ce2:	2300      	movlt	r3, #0
 8006ce4:	e734      	b.n	8006b50 <_dtoa_r+0x720>
 8006ce6:	9e07      	ldr	r6, [sp, #28]
 8006ce8:	9d04      	ldr	r5, [sp, #16]
 8006cea:	9f08      	ldr	r7, [sp, #32]
 8006cec:	e73b      	b.n	8006b66 <_dtoa_r+0x736>
 8006cee:	9a07      	ldr	r2, [sp, #28]
 8006cf0:	e767      	b.n	8006bc2 <_dtoa_r+0x792>
 8006cf2:	9b06      	ldr	r3, [sp, #24]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	dc18      	bgt.n	8006d2a <_dtoa_r+0x8fa>
 8006cf8:	f1ba 0f00 	cmp.w	sl, #0
 8006cfc:	d115      	bne.n	8006d2a <_dtoa_r+0x8fa>
 8006cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d02:	b993      	cbnz	r3, 8006d2a <_dtoa_r+0x8fa>
 8006d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d08:	0d1b      	lsrs	r3, r3, #20
 8006d0a:	051b      	lsls	r3, r3, #20
 8006d0c:	b183      	cbz	r3, 8006d30 <_dtoa_r+0x900>
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	3301      	adds	r3, #1
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	3301      	adds	r3, #1
 8006d18:	9305      	str	r3, [sp, #20]
 8006d1a:	f04f 0801 	mov.w	r8, #1
 8006d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f47f af6a 	bne.w	8006bfa <_dtoa_r+0x7ca>
 8006d26:	2001      	movs	r0, #1
 8006d28:	e76f      	b.n	8006c0a <_dtoa_r+0x7da>
 8006d2a:	f04f 0800 	mov.w	r8, #0
 8006d2e:	e7f6      	b.n	8006d1e <_dtoa_r+0x8ee>
 8006d30:	4698      	mov	r8, r3
 8006d32:	e7f4      	b.n	8006d1e <_dtoa_r+0x8ee>
 8006d34:	f43f af7d 	beq.w	8006c32 <_dtoa_r+0x802>
 8006d38:	4618      	mov	r0, r3
 8006d3a:	301c      	adds	r0, #28
 8006d3c:	e772      	b.n	8006c24 <_dtoa_r+0x7f4>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc37      	bgt.n	8006db4 <_dtoa_r+0x984>
 8006d44:	9b06      	ldr	r3, [sp, #24]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	dd34      	ble.n	8006db4 <_dtoa_r+0x984>
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	9b02      	ldr	r3, [sp, #8]
 8006d50:	b96b      	cbnz	r3, 8006d6e <_dtoa_r+0x93e>
 8006d52:	4631      	mov	r1, r6
 8006d54:	2205      	movs	r2, #5
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fbf4 	bl	8007544 <__multadd>
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	4606      	mov	r6, r0
 8006d60:	ee18 0a10 	vmov	r0, s16
 8006d64:	f000 fe0e 	bl	8007984 <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f73f adbb 	bgt.w	80068e4 <_dtoa_r+0x4b4>
 8006d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d70:	9d01      	ldr	r5, [sp, #4]
 8006d72:	43db      	mvns	r3, r3
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	f04f 0800 	mov.w	r8, #0
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fbbf 	bl	8007500 <_Bfree>
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	f43f aea4 	beq.w	8006ad0 <_dtoa_r+0x6a0>
 8006d88:	f1b8 0f00 	cmp.w	r8, #0
 8006d8c:	d005      	beq.n	8006d9a <_dtoa_r+0x96a>
 8006d8e:	45b8      	cmp	r8, r7
 8006d90:	d003      	beq.n	8006d9a <_dtoa_r+0x96a>
 8006d92:	4641      	mov	r1, r8
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fbb3 	bl	8007500 <_Bfree>
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 fbaf 	bl	8007500 <_Bfree>
 8006da2:	e695      	b.n	8006ad0 <_dtoa_r+0x6a0>
 8006da4:	2600      	movs	r6, #0
 8006da6:	4637      	mov	r7, r6
 8006da8:	e7e1      	b.n	8006d6e <_dtoa_r+0x93e>
 8006daa:	9700      	str	r7, [sp, #0]
 8006dac:	4637      	mov	r7, r6
 8006dae:	e599      	b.n	80068e4 <_dtoa_r+0x4b4>
 8006db0:	40240000 	.word	0x40240000
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80ca 	beq.w	8006f50 <_dtoa_r+0xb20>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	9302      	str	r3, [sp, #8]
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	dd05      	ble.n	8006dd0 <_dtoa_r+0x9a0>
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fd6b 	bl	80078a4 <__lshift>
 8006dce:	4607      	mov	r7, r0
 8006dd0:	f1b8 0f00 	cmp.w	r8, #0
 8006dd4:	d05b      	beq.n	8006e8e <_dtoa_r+0xa5e>
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fb51 	bl	8007480 <_Balloc>
 8006dde:	4605      	mov	r5, r0
 8006de0:	b928      	cbnz	r0, 8006dee <_dtoa_r+0x9be>
 8006de2:	4b87      	ldr	r3, [pc, #540]	; (8007000 <_dtoa_r+0xbd0>)
 8006de4:	4602      	mov	r2, r0
 8006de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006dea:	f7ff bb3b 	b.w	8006464 <_dtoa_r+0x34>
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	3202      	adds	r2, #2
 8006df2:	0092      	lsls	r2, r2, #2
 8006df4:	f107 010c 	add.w	r1, r7, #12
 8006df8:	300c      	adds	r0, #12
 8006dfa:	f000 fb33 	bl	8007464 <memcpy>
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4629      	mov	r1, r5
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 fd4e 	bl	80078a4 <__lshift>
 8006e08:	9b01      	ldr	r3, [sp, #4]
 8006e0a:	f103 0901 	add.w	r9, r3, #1
 8006e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	9305      	str	r3, [sp, #20]
 8006e16:	f00a 0301 	and.w	r3, sl, #1
 8006e1a:	46b8      	mov	r8, r7
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	4607      	mov	r7, r0
 8006e20:	4631      	mov	r1, r6
 8006e22:	ee18 0a10 	vmov	r0, s16
 8006e26:	f7ff fa77 	bl	8006318 <quorem>
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	9002      	str	r0, [sp, #8]
 8006e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e32:	ee18 0a10 	vmov	r0, s16
 8006e36:	f000 fda5 	bl	8007984 <__mcmp>
 8006e3a:	463a      	mov	r2, r7
 8006e3c:	9003      	str	r0, [sp, #12]
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fdbb 	bl	80079bc <__mdiff>
 8006e46:	68c2      	ldr	r2, [r0, #12]
 8006e48:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	bb02      	cbnz	r2, 8006e92 <_dtoa_r+0xa62>
 8006e50:	4601      	mov	r1, r0
 8006e52:	ee18 0a10 	vmov	r0, s16
 8006e56:	f000 fd95 	bl	8007984 <__mcmp>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4620      	mov	r0, r4
 8006e60:	9207      	str	r2, [sp, #28]
 8006e62:	f000 fb4d 	bl	8007500 <_Bfree>
 8006e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e6a:	ea43 0102 	orr.w	r1, r3, r2
 8006e6e:	9b04      	ldr	r3, [sp, #16]
 8006e70:	430b      	orrs	r3, r1
 8006e72:	464d      	mov	r5, r9
 8006e74:	d10f      	bne.n	8006e96 <_dtoa_r+0xa66>
 8006e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e7a:	d02a      	beq.n	8006ed2 <_dtoa_r+0xaa2>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dd02      	ble.n	8006e88 <_dtoa_r+0xa58>
 8006e82:	9b02      	ldr	r3, [sp, #8]
 8006e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e88:	f88b a000 	strb.w	sl, [fp]
 8006e8c:	e775      	b.n	8006d7a <_dtoa_r+0x94a>
 8006e8e:	4638      	mov	r0, r7
 8006e90:	e7ba      	b.n	8006e08 <_dtoa_r+0x9d8>
 8006e92:	2201      	movs	r2, #1
 8006e94:	e7e2      	b.n	8006e5c <_dtoa_r+0xa2c>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db04      	blt.n	8006ea6 <_dtoa_r+0xa76>
 8006e9c:	9906      	ldr	r1, [sp, #24]
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	9904      	ldr	r1, [sp, #16]
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	d122      	bne.n	8006eec <_dtoa_r+0xabc>
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	ddee      	ble.n	8006e88 <_dtoa_r+0xa58>
 8006eaa:	ee18 1a10 	vmov	r1, s16
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fcf7 	bl	80078a4 <__lshift>
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	ee08 0a10 	vmov	s16, r0
 8006ebc:	f000 fd62 	bl	8007984 <__mcmp>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	dc03      	bgt.n	8006ecc <_dtoa_r+0xa9c>
 8006ec4:	d1e0      	bne.n	8006e88 <_dtoa_r+0xa58>
 8006ec6:	f01a 0f01 	tst.w	sl, #1
 8006eca:	d0dd      	beq.n	8006e88 <_dtoa_r+0xa58>
 8006ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ed0:	d1d7      	bne.n	8006e82 <_dtoa_r+0xa52>
 8006ed2:	2339      	movs	r3, #57	; 0x39
 8006ed4:	f88b 3000 	strb.w	r3, [fp]
 8006ed8:	462b      	mov	r3, r5
 8006eda:	461d      	mov	r5, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ee2:	2a39      	cmp	r2, #57	; 0x39
 8006ee4:	d071      	beq.n	8006fca <_dtoa_r+0xb9a>
 8006ee6:	3201      	adds	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e746      	b.n	8006d7a <_dtoa_r+0x94a>
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	dd07      	ble.n	8006f00 <_dtoa_r+0xad0>
 8006ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ef4:	d0ed      	beq.n	8006ed2 <_dtoa_r+0xaa2>
 8006ef6:	f10a 0301 	add.w	r3, sl, #1
 8006efa:	f88b 3000 	strb.w	r3, [fp]
 8006efe:	e73c      	b.n	8006d7a <_dtoa_r+0x94a>
 8006f00:	9b05      	ldr	r3, [sp, #20]
 8006f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f06:	4599      	cmp	r9, r3
 8006f08:	d047      	beq.n	8006f9a <_dtoa_r+0xb6a>
 8006f0a:	ee18 1a10 	vmov	r1, s16
 8006f0e:	2300      	movs	r3, #0
 8006f10:	220a      	movs	r2, #10
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 fb16 	bl	8007544 <__multadd>
 8006f18:	45b8      	cmp	r8, r7
 8006f1a:	ee08 0a10 	vmov	s16, r0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	f04f 020a 	mov.w	r2, #10
 8006f26:	4641      	mov	r1, r8
 8006f28:	4620      	mov	r0, r4
 8006f2a:	d106      	bne.n	8006f3a <_dtoa_r+0xb0a>
 8006f2c:	f000 fb0a 	bl	8007544 <__multadd>
 8006f30:	4680      	mov	r8, r0
 8006f32:	4607      	mov	r7, r0
 8006f34:	f109 0901 	add.w	r9, r9, #1
 8006f38:	e772      	b.n	8006e20 <_dtoa_r+0x9f0>
 8006f3a:	f000 fb03 	bl	8007544 <__multadd>
 8006f3e:	4639      	mov	r1, r7
 8006f40:	4680      	mov	r8, r0
 8006f42:	2300      	movs	r3, #0
 8006f44:	220a      	movs	r2, #10
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fafc 	bl	8007544 <__multadd>
 8006f4c:	4607      	mov	r7, r0
 8006f4e:	e7f1      	b.n	8006f34 <_dtoa_r+0xb04>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	9302      	str	r3, [sp, #8]
 8006f54:	9d01      	ldr	r5, [sp, #4]
 8006f56:	ee18 0a10 	vmov	r0, s16
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	f7ff f9dc 	bl	8006318 <quorem>
 8006f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	f805 ab01 	strb.w	sl, [r5], #1
 8006f6a:	1aea      	subs	r2, r5, r3
 8006f6c:	9b02      	ldr	r3, [sp, #8]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	dd09      	ble.n	8006f86 <_dtoa_r+0xb56>
 8006f72:	ee18 1a10 	vmov	r1, s16
 8006f76:	2300      	movs	r3, #0
 8006f78:	220a      	movs	r2, #10
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fae2 	bl	8007544 <__multadd>
 8006f80:	ee08 0a10 	vmov	s16, r0
 8006f84:	e7e7      	b.n	8006f56 <_dtoa_r+0xb26>
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bfc8      	it	gt
 8006f8c:	461d      	movgt	r5, r3
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	bfd8      	it	le
 8006f92:	2501      	movle	r5, #1
 8006f94:	441d      	add	r5, r3
 8006f96:	f04f 0800 	mov.w	r8, #0
 8006f9a:	ee18 1a10 	vmov	r1, s16
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fc7f 	bl	80078a4 <__lshift>
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	ee08 0a10 	vmov	s16, r0
 8006fac:	f000 fcea 	bl	8007984 <__mcmp>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	dc91      	bgt.n	8006ed8 <_dtoa_r+0xaa8>
 8006fb4:	d102      	bne.n	8006fbc <_dtoa_r+0xb8c>
 8006fb6:	f01a 0f01 	tst.w	sl, #1
 8006fba:	d18d      	bne.n	8006ed8 <_dtoa_r+0xaa8>
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	461d      	mov	r5, r3
 8006fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fc4:	2a30      	cmp	r2, #48	; 0x30
 8006fc6:	d0fa      	beq.n	8006fbe <_dtoa_r+0xb8e>
 8006fc8:	e6d7      	b.n	8006d7a <_dtoa_r+0x94a>
 8006fca:	9a01      	ldr	r2, [sp, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d184      	bne.n	8006eda <_dtoa_r+0xaaa>
 8006fd0:	9b00      	ldr	r3, [sp, #0]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2331      	movs	r3, #49	; 0x31
 8006fd8:	7013      	strb	r3, [r2, #0]
 8006fda:	e6ce      	b.n	8006d7a <_dtoa_r+0x94a>
 8006fdc:	4b09      	ldr	r3, [pc, #36]	; (8007004 <_dtoa_r+0xbd4>)
 8006fde:	f7ff ba95 	b.w	800650c <_dtoa_r+0xdc>
 8006fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f47f aa6e 	bne.w	80064c6 <_dtoa_r+0x96>
 8006fea:	4b07      	ldr	r3, [pc, #28]	; (8007008 <_dtoa_r+0xbd8>)
 8006fec:	f7ff ba8e 	b.w	800650c <_dtoa_r+0xdc>
 8006ff0:	9b02      	ldr	r3, [sp, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dcae      	bgt.n	8006f54 <_dtoa_r+0xb24>
 8006ff6:	9b06      	ldr	r3, [sp, #24]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	f73f aea8 	bgt.w	8006d4e <_dtoa_r+0x91e>
 8006ffe:	e7a9      	b.n	8006f54 <_dtoa_r+0xb24>
 8007000:	0800850b 	.word	0x0800850b
 8007004:	08008468 	.word	0x08008468
 8007008:	0800848c 	.word	0x0800848c

0800700c <__sflush_r>:
 800700c:	898a      	ldrh	r2, [r1, #12]
 800700e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	4605      	mov	r5, r0
 8007014:	0710      	lsls	r0, r2, #28
 8007016:	460c      	mov	r4, r1
 8007018:	d458      	bmi.n	80070cc <__sflush_r+0xc0>
 800701a:	684b      	ldr	r3, [r1, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	dc05      	bgt.n	800702c <__sflush_r+0x20>
 8007020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	dc02      	bgt.n	800702c <__sflush_r+0x20>
 8007026:	2000      	movs	r0, #0
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800702e:	2e00      	cmp	r6, #0
 8007030:	d0f9      	beq.n	8007026 <__sflush_r+0x1a>
 8007032:	2300      	movs	r3, #0
 8007034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007038:	682f      	ldr	r7, [r5, #0]
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	d032      	beq.n	80070a4 <__sflush_r+0x98>
 800703e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	075a      	lsls	r2, r3, #29
 8007044:	d505      	bpl.n	8007052 <__sflush_r+0x46>
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	1ac0      	subs	r0, r0, r3
 800704a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800704c:	b10b      	cbz	r3, 8007052 <__sflush_r+0x46>
 800704e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007050:	1ac0      	subs	r0, r0, r3
 8007052:	2300      	movs	r3, #0
 8007054:	4602      	mov	r2, r0
 8007056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007058:	6a21      	ldr	r1, [r4, #32]
 800705a:	4628      	mov	r0, r5
 800705c:	47b0      	blx	r6
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	d106      	bne.n	8007072 <__sflush_r+0x66>
 8007064:	6829      	ldr	r1, [r5, #0]
 8007066:	291d      	cmp	r1, #29
 8007068:	d82c      	bhi.n	80070c4 <__sflush_r+0xb8>
 800706a:	4a2a      	ldr	r2, [pc, #168]	; (8007114 <__sflush_r+0x108>)
 800706c:	40ca      	lsrs	r2, r1
 800706e:	07d6      	lsls	r6, r2, #31
 8007070:	d528      	bpl.n	80070c4 <__sflush_r+0xb8>
 8007072:	2200      	movs	r2, #0
 8007074:	6062      	str	r2, [r4, #4]
 8007076:	04d9      	lsls	r1, r3, #19
 8007078:	6922      	ldr	r2, [r4, #16]
 800707a:	6022      	str	r2, [r4, #0]
 800707c:	d504      	bpl.n	8007088 <__sflush_r+0x7c>
 800707e:	1c42      	adds	r2, r0, #1
 8007080:	d101      	bne.n	8007086 <__sflush_r+0x7a>
 8007082:	682b      	ldr	r3, [r5, #0]
 8007084:	b903      	cbnz	r3, 8007088 <__sflush_r+0x7c>
 8007086:	6560      	str	r0, [r4, #84]	; 0x54
 8007088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800708a:	602f      	str	r7, [r5, #0]
 800708c:	2900      	cmp	r1, #0
 800708e:	d0ca      	beq.n	8007026 <__sflush_r+0x1a>
 8007090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007094:	4299      	cmp	r1, r3
 8007096:	d002      	beq.n	800709e <__sflush_r+0x92>
 8007098:	4628      	mov	r0, r5
 800709a:	f000 fd8b 	bl	8007bb4 <_free_r>
 800709e:	2000      	movs	r0, #0
 80070a0:	6360      	str	r0, [r4, #52]	; 0x34
 80070a2:	e7c1      	b.n	8007028 <__sflush_r+0x1c>
 80070a4:	6a21      	ldr	r1, [r4, #32]
 80070a6:	2301      	movs	r3, #1
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b0      	blx	r6
 80070ac:	1c41      	adds	r1, r0, #1
 80070ae:	d1c7      	bne.n	8007040 <__sflush_r+0x34>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0c4      	beq.n	8007040 <__sflush_r+0x34>
 80070b6:	2b1d      	cmp	r3, #29
 80070b8:	d001      	beq.n	80070be <__sflush_r+0xb2>
 80070ba:	2b16      	cmp	r3, #22
 80070bc:	d101      	bne.n	80070c2 <__sflush_r+0xb6>
 80070be:	602f      	str	r7, [r5, #0]
 80070c0:	e7b1      	b.n	8007026 <__sflush_r+0x1a>
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	e7ad      	b.n	8007028 <__sflush_r+0x1c>
 80070cc:	690f      	ldr	r7, [r1, #16]
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	d0a9      	beq.n	8007026 <__sflush_r+0x1a>
 80070d2:	0793      	lsls	r3, r2, #30
 80070d4:	680e      	ldr	r6, [r1, #0]
 80070d6:	bf08      	it	eq
 80070d8:	694b      	ldreq	r3, [r1, #20]
 80070da:	600f      	str	r7, [r1, #0]
 80070dc:	bf18      	it	ne
 80070de:	2300      	movne	r3, #0
 80070e0:	eba6 0807 	sub.w	r8, r6, r7
 80070e4:	608b      	str	r3, [r1, #8]
 80070e6:	f1b8 0f00 	cmp.w	r8, #0
 80070ea:	dd9c      	ble.n	8007026 <__sflush_r+0x1a>
 80070ec:	6a21      	ldr	r1, [r4, #32]
 80070ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070f0:	4643      	mov	r3, r8
 80070f2:	463a      	mov	r2, r7
 80070f4:	4628      	mov	r0, r5
 80070f6:	47b0      	blx	r6
 80070f8:	2800      	cmp	r0, #0
 80070fa:	dc06      	bgt.n	800710a <__sflush_r+0xfe>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007102:	81a3      	strh	r3, [r4, #12]
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	e78e      	b.n	8007028 <__sflush_r+0x1c>
 800710a:	4407      	add	r7, r0
 800710c:	eba8 0800 	sub.w	r8, r8, r0
 8007110:	e7e9      	b.n	80070e6 <__sflush_r+0xda>
 8007112:	bf00      	nop
 8007114:	20400001 	.word	0x20400001

08007118 <_fflush_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	690b      	ldr	r3, [r1, #16]
 800711c:	4605      	mov	r5, r0
 800711e:	460c      	mov	r4, r1
 8007120:	b913      	cbnz	r3, 8007128 <_fflush_r+0x10>
 8007122:	2500      	movs	r5, #0
 8007124:	4628      	mov	r0, r5
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	b118      	cbz	r0, 8007132 <_fflush_r+0x1a>
 800712a:	6983      	ldr	r3, [r0, #24]
 800712c:	b90b      	cbnz	r3, 8007132 <_fflush_r+0x1a>
 800712e:	f000 f887 	bl	8007240 <__sinit>
 8007132:	4b14      	ldr	r3, [pc, #80]	; (8007184 <_fflush_r+0x6c>)
 8007134:	429c      	cmp	r4, r3
 8007136:	d11b      	bne.n	8007170 <_fflush_r+0x58>
 8007138:	686c      	ldr	r4, [r5, #4]
 800713a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0ef      	beq.n	8007122 <_fflush_r+0xa>
 8007142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007144:	07d0      	lsls	r0, r2, #31
 8007146:	d404      	bmi.n	8007152 <_fflush_r+0x3a>
 8007148:	0599      	lsls	r1, r3, #22
 800714a:	d402      	bmi.n	8007152 <_fflush_r+0x3a>
 800714c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800714e:	f000 f91a 	bl	8007386 <__retarget_lock_acquire_recursive>
 8007152:	4628      	mov	r0, r5
 8007154:	4621      	mov	r1, r4
 8007156:	f7ff ff59 	bl	800700c <__sflush_r>
 800715a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800715c:	07da      	lsls	r2, r3, #31
 800715e:	4605      	mov	r5, r0
 8007160:	d4e0      	bmi.n	8007124 <_fflush_r+0xc>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	059b      	lsls	r3, r3, #22
 8007166:	d4dd      	bmi.n	8007124 <_fflush_r+0xc>
 8007168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800716a:	f000 f90d 	bl	8007388 <__retarget_lock_release_recursive>
 800716e:	e7d9      	b.n	8007124 <_fflush_r+0xc>
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <_fflush_r+0x70>)
 8007172:	429c      	cmp	r4, r3
 8007174:	d101      	bne.n	800717a <_fflush_r+0x62>
 8007176:	68ac      	ldr	r4, [r5, #8]
 8007178:	e7df      	b.n	800713a <_fflush_r+0x22>
 800717a:	4b04      	ldr	r3, [pc, #16]	; (800718c <_fflush_r+0x74>)
 800717c:	429c      	cmp	r4, r3
 800717e:	bf08      	it	eq
 8007180:	68ec      	ldreq	r4, [r5, #12]
 8007182:	e7da      	b.n	800713a <_fflush_r+0x22>
 8007184:	0800853c 	.word	0x0800853c
 8007188:	0800855c 	.word	0x0800855c
 800718c:	0800851c 	.word	0x0800851c

08007190 <std>:
 8007190:	2300      	movs	r3, #0
 8007192:	b510      	push	{r4, lr}
 8007194:	4604      	mov	r4, r0
 8007196:	e9c0 3300 	strd	r3, r3, [r0]
 800719a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800719e:	6083      	str	r3, [r0, #8]
 80071a0:	8181      	strh	r1, [r0, #12]
 80071a2:	6643      	str	r3, [r0, #100]	; 0x64
 80071a4:	81c2      	strh	r2, [r0, #14]
 80071a6:	6183      	str	r3, [r0, #24]
 80071a8:	4619      	mov	r1, r3
 80071aa:	2208      	movs	r2, #8
 80071ac:	305c      	adds	r0, #92	; 0x5c
 80071ae:	f7fe fadd 	bl	800576c <memset>
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <std+0x38>)
 80071b4:	6263      	str	r3, [r4, #36]	; 0x24
 80071b6:	4b05      	ldr	r3, [pc, #20]	; (80071cc <std+0x3c>)
 80071b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <std+0x40>)
 80071bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <std+0x44>)
 80071c0:	6224      	str	r4, [r4, #32]
 80071c2:	6323      	str	r3, [r4, #48]	; 0x30
 80071c4:	bd10      	pop	{r4, pc}
 80071c6:	bf00      	nop
 80071c8:	080080d9 	.word	0x080080d9
 80071cc:	080080fb 	.word	0x080080fb
 80071d0:	08008133 	.word	0x08008133
 80071d4:	08008157 	.word	0x08008157

080071d8 <_cleanup_r>:
 80071d8:	4901      	ldr	r1, [pc, #4]	; (80071e0 <_cleanup_r+0x8>)
 80071da:	f000 b8af 	b.w	800733c <_fwalk_reent>
 80071de:	bf00      	nop
 80071e0:	08007119 	.word	0x08007119

080071e4 <__sfmoreglue>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	2268      	movs	r2, #104	; 0x68
 80071e8:	1e4d      	subs	r5, r1, #1
 80071ea:	4355      	muls	r5, r2
 80071ec:	460e      	mov	r6, r1
 80071ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071f2:	f000 fd4b 	bl	8007c8c <_malloc_r>
 80071f6:	4604      	mov	r4, r0
 80071f8:	b140      	cbz	r0, 800720c <__sfmoreglue+0x28>
 80071fa:	2100      	movs	r1, #0
 80071fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007200:	300c      	adds	r0, #12
 8007202:	60a0      	str	r0, [r4, #8]
 8007204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007208:	f7fe fab0 	bl	800576c <memset>
 800720c:	4620      	mov	r0, r4
 800720e:	bd70      	pop	{r4, r5, r6, pc}

08007210 <__sfp_lock_acquire>:
 8007210:	4801      	ldr	r0, [pc, #4]	; (8007218 <__sfp_lock_acquire+0x8>)
 8007212:	f000 b8b8 	b.w	8007386 <__retarget_lock_acquire_recursive>
 8007216:	bf00      	nop
 8007218:	2000043d 	.word	0x2000043d

0800721c <__sfp_lock_release>:
 800721c:	4801      	ldr	r0, [pc, #4]	; (8007224 <__sfp_lock_release+0x8>)
 800721e:	f000 b8b3 	b.w	8007388 <__retarget_lock_release_recursive>
 8007222:	bf00      	nop
 8007224:	2000043d 	.word	0x2000043d

08007228 <__sinit_lock_acquire>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__sinit_lock_acquire+0x8>)
 800722a:	f000 b8ac 	b.w	8007386 <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	2000043e 	.word	0x2000043e

08007234 <__sinit_lock_release>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__sinit_lock_release+0x8>)
 8007236:	f000 b8a7 	b.w	8007388 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	2000043e 	.word	0x2000043e

08007240 <__sinit>:
 8007240:	b510      	push	{r4, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	f7ff fff0 	bl	8007228 <__sinit_lock_acquire>
 8007248:	69a3      	ldr	r3, [r4, #24]
 800724a:	b11b      	cbz	r3, 8007254 <__sinit+0x14>
 800724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007250:	f7ff bff0 	b.w	8007234 <__sinit_lock_release>
 8007254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007258:	6523      	str	r3, [r4, #80]	; 0x50
 800725a:	4b13      	ldr	r3, [pc, #76]	; (80072a8 <__sinit+0x68>)
 800725c:	4a13      	ldr	r2, [pc, #76]	; (80072ac <__sinit+0x6c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	62a2      	str	r2, [r4, #40]	; 0x28
 8007262:	42a3      	cmp	r3, r4
 8007264:	bf04      	itt	eq
 8007266:	2301      	moveq	r3, #1
 8007268:	61a3      	streq	r3, [r4, #24]
 800726a:	4620      	mov	r0, r4
 800726c:	f000 f820 	bl	80072b0 <__sfp>
 8007270:	6060      	str	r0, [r4, #4]
 8007272:	4620      	mov	r0, r4
 8007274:	f000 f81c 	bl	80072b0 <__sfp>
 8007278:	60a0      	str	r0, [r4, #8]
 800727a:	4620      	mov	r0, r4
 800727c:	f000 f818 	bl	80072b0 <__sfp>
 8007280:	2200      	movs	r2, #0
 8007282:	60e0      	str	r0, [r4, #12]
 8007284:	2104      	movs	r1, #4
 8007286:	6860      	ldr	r0, [r4, #4]
 8007288:	f7ff ff82 	bl	8007190 <std>
 800728c:	68a0      	ldr	r0, [r4, #8]
 800728e:	2201      	movs	r2, #1
 8007290:	2109      	movs	r1, #9
 8007292:	f7ff ff7d 	bl	8007190 <std>
 8007296:	68e0      	ldr	r0, [r4, #12]
 8007298:	2202      	movs	r2, #2
 800729a:	2112      	movs	r1, #18
 800729c:	f7ff ff78 	bl	8007190 <std>
 80072a0:	2301      	movs	r3, #1
 80072a2:	61a3      	str	r3, [r4, #24]
 80072a4:	e7d2      	b.n	800724c <__sinit+0xc>
 80072a6:	bf00      	nop
 80072a8:	08008454 	.word	0x08008454
 80072ac:	080071d9 	.word	0x080071d9

080072b0 <__sfp>:
 80072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b2:	4607      	mov	r7, r0
 80072b4:	f7ff ffac 	bl	8007210 <__sfp_lock_acquire>
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <__sfp+0x84>)
 80072ba:	681e      	ldr	r6, [r3, #0]
 80072bc:	69b3      	ldr	r3, [r6, #24]
 80072be:	b913      	cbnz	r3, 80072c6 <__sfp+0x16>
 80072c0:	4630      	mov	r0, r6
 80072c2:	f7ff ffbd 	bl	8007240 <__sinit>
 80072c6:	3648      	adds	r6, #72	; 0x48
 80072c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	d503      	bpl.n	80072d8 <__sfp+0x28>
 80072d0:	6833      	ldr	r3, [r6, #0]
 80072d2:	b30b      	cbz	r3, 8007318 <__sfp+0x68>
 80072d4:	6836      	ldr	r6, [r6, #0]
 80072d6:	e7f7      	b.n	80072c8 <__sfp+0x18>
 80072d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072dc:	b9d5      	cbnz	r5, 8007314 <__sfp+0x64>
 80072de:	4b16      	ldr	r3, [pc, #88]	; (8007338 <__sfp+0x88>)
 80072e0:	60e3      	str	r3, [r4, #12]
 80072e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072e6:	6665      	str	r5, [r4, #100]	; 0x64
 80072e8:	f000 f84c 	bl	8007384 <__retarget_lock_init_recursive>
 80072ec:	f7ff ff96 	bl	800721c <__sfp_lock_release>
 80072f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072f8:	6025      	str	r5, [r4, #0]
 80072fa:	61a5      	str	r5, [r4, #24]
 80072fc:	2208      	movs	r2, #8
 80072fe:	4629      	mov	r1, r5
 8007300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007304:	f7fe fa32 	bl	800576c <memset>
 8007308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800730c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007310:	4620      	mov	r0, r4
 8007312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007314:	3468      	adds	r4, #104	; 0x68
 8007316:	e7d9      	b.n	80072cc <__sfp+0x1c>
 8007318:	2104      	movs	r1, #4
 800731a:	4638      	mov	r0, r7
 800731c:	f7ff ff62 	bl	80071e4 <__sfmoreglue>
 8007320:	4604      	mov	r4, r0
 8007322:	6030      	str	r0, [r6, #0]
 8007324:	2800      	cmp	r0, #0
 8007326:	d1d5      	bne.n	80072d4 <__sfp+0x24>
 8007328:	f7ff ff78 	bl	800721c <__sfp_lock_release>
 800732c:	230c      	movs	r3, #12
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	e7ee      	b.n	8007310 <__sfp+0x60>
 8007332:	bf00      	nop
 8007334:	08008454 	.word	0x08008454
 8007338:	ffff0001 	.word	0xffff0001

0800733c <_fwalk_reent>:
 800733c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007340:	4606      	mov	r6, r0
 8007342:	4688      	mov	r8, r1
 8007344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007348:	2700      	movs	r7, #0
 800734a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800734e:	f1b9 0901 	subs.w	r9, r9, #1
 8007352:	d505      	bpl.n	8007360 <_fwalk_reent+0x24>
 8007354:	6824      	ldr	r4, [r4, #0]
 8007356:	2c00      	cmp	r4, #0
 8007358:	d1f7      	bne.n	800734a <_fwalk_reent+0xe>
 800735a:	4638      	mov	r0, r7
 800735c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007360:	89ab      	ldrh	r3, [r5, #12]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d907      	bls.n	8007376 <_fwalk_reent+0x3a>
 8007366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800736a:	3301      	adds	r3, #1
 800736c:	d003      	beq.n	8007376 <_fwalk_reent+0x3a>
 800736e:	4629      	mov	r1, r5
 8007370:	4630      	mov	r0, r6
 8007372:	47c0      	blx	r8
 8007374:	4307      	orrs	r7, r0
 8007376:	3568      	adds	r5, #104	; 0x68
 8007378:	e7e9      	b.n	800734e <_fwalk_reent+0x12>
	...

0800737c <_localeconv_r>:
 800737c:	4800      	ldr	r0, [pc, #0]	; (8007380 <_localeconv_r+0x4>)
 800737e:	4770      	bx	lr
 8007380:	20000160 	.word	0x20000160

08007384 <__retarget_lock_init_recursive>:
 8007384:	4770      	bx	lr

08007386 <__retarget_lock_acquire_recursive>:
 8007386:	4770      	bx	lr

08007388 <__retarget_lock_release_recursive>:
 8007388:	4770      	bx	lr

0800738a <__swhatbuf_r>:
 800738a:	b570      	push	{r4, r5, r6, lr}
 800738c:	460e      	mov	r6, r1
 800738e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007392:	2900      	cmp	r1, #0
 8007394:	b096      	sub	sp, #88	; 0x58
 8007396:	4614      	mov	r4, r2
 8007398:	461d      	mov	r5, r3
 800739a:	da08      	bge.n	80073ae <__swhatbuf_r+0x24>
 800739c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	602a      	str	r2, [r5, #0]
 80073a4:	061a      	lsls	r2, r3, #24
 80073a6:	d410      	bmi.n	80073ca <__swhatbuf_r+0x40>
 80073a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ac:	e00e      	b.n	80073cc <__swhatbuf_r+0x42>
 80073ae:	466a      	mov	r2, sp
 80073b0:	f000 ff28 	bl	8008204 <_fstat_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	dbf1      	blt.n	800739c <__swhatbuf_r+0x12>
 80073b8:	9a01      	ldr	r2, [sp, #4]
 80073ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073c2:	425a      	negs	r2, r3
 80073c4:	415a      	adcs	r2, r3
 80073c6:	602a      	str	r2, [r5, #0]
 80073c8:	e7ee      	b.n	80073a8 <__swhatbuf_r+0x1e>
 80073ca:	2340      	movs	r3, #64	; 0x40
 80073cc:	2000      	movs	r0, #0
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	b016      	add	sp, #88	; 0x58
 80073d2:	bd70      	pop	{r4, r5, r6, pc}

080073d4 <__smakebuf_r>:
 80073d4:	898b      	ldrh	r3, [r1, #12]
 80073d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073d8:	079d      	lsls	r5, r3, #30
 80073da:	4606      	mov	r6, r0
 80073dc:	460c      	mov	r4, r1
 80073de:	d507      	bpl.n	80073f0 <__smakebuf_r+0x1c>
 80073e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	6123      	str	r3, [r4, #16]
 80073e8:	2301      	movs	r3, #1
 80073ea:	6163      	str	r3, [r4, #20]
 80073ec:	b002      	add	sp, #8
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	ab01      	add	r3, sp, #4
 80073f2:	466a      	mov	r2, sp
 80073f4:	f7ff ffc9 	bl	800738a <__swhatbuf_r>
 80073f8:	9900      	ldr	r1, [sp, #0]
 80073fa:	4605      	mov	r5, r0
 80073fc:	4630      	mov	r0, r6
 80073fe:	f000 fc45 	bl	8007c8c <_malloc_r>
 8007402:	b948      	cbnz	r0, 8007418 <__smakebuf_r+0x44>
 8007404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007408:	059a      	lsls	r2, r3, #22
 800740a:	d4ef      	bmi.n	80073ec <__smakebuf_r+0x18>
 800740c:	f023 0303 	bic.w	r3, r3, #3
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	e7e3      	b.n	80073e0 <__smakebuf_r+0xc>
 8007418:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <__smakebuf_r+0x7c>)
 800741a:	62b3      	str	r3, [r6, #40]	; 0x28
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	6020      	str	r0, [r4, #0]
 8007420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007424:	81a3      	strh	r3, [r4, #12]
 8007426:	9b00      	ldr	r3, [sp, #0]
 8007428:	6163      	str	r3, [r4, #20]
 800742a:	9b01      	ldr	r3, [sp, #4]
 800742c:	6120      	str	r0, [r4, #16]
 800742e:	b15b      	cbz	r3, 8007448 <__smakebuf_r+0x74>
 8007430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007434:	4630      	mov	r0, r6
 8007436:	f000 fef7 	bl	8008228 <_isatty_r>
 800743a:	b128      	cbz	r0, 8007448 <__smakebuf_r+0x74>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	f023 0303 	bic.w	r3, r3, #3
 8007442:	f043 0301 	orr.w	r3, r3, #1
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	89a0      	ldrh	r0, [r4, #12]
 800744a:	4305      	orrs	r5, r0
 800744c:	81a5      	strh	r5, [r4, #12]
 800744e:	e7cd      	b.n	80073ec <__smakebuf_r+0x18>
 8007450:	080071d9 	.word	0x080071d9

08007454 <malloc>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <malloc+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f000 bc17 	b.w	8007c8c <_malloc_r>
 800745e:	bf00      	nop
 8007460:	2000000c 	.word	0x2000000c

08007464 <memcpy>:
 8007464:	440a      	add	r2, r1
 8007466:	4291      	cmp	r1, r2
 8007468:	f100 33ff 	add.w	r3, r0, #4294967295
 800746c:	d100      	bne.n	8007470 <memcpy+0xc>
 800746e:	4770      	bx	lr
 8007470:	b510      	push	{r4, lr}
 8007472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800747a:	4291      	cmp	r1, r2
 800747c:	d1f9      	bne.n	8007472 <memcpy+0xe>
 800747e:	bd10      	pop	{r4, pc}

08007480 <_Balloc>:
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	b976      	cbnz	r6, 80074a8 <_Balloc+0x28>
 800748a:	2010      	movs	r0, #16
 800748c:	f7ff ffe2 	bl	8007454 <malloc>
 8007490:	4602      	mov	r2, r0
 8007492:	6260      	str	r0, [r4, #36]	; 0x24
 8007494:	b920      	cbnz	r0, 80074a0 <_Balloc+0x20>
 8007496:	4b18      	ldr	r3, [pc, #96]	; (80074f8 <_Balloc+0x78>)
 8007498:	4818      	ldr	r0, [pc, #96]	; (80074fc <_Balloc+0x7c>)
 800749a:	2166      	movs	r1, #102	; 0x66
 800749c:	f000 fe72 	bl	8008184 <__assert_func>
 80074a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074a4:	6006      	str	r6, [r0, #0]
 80074a6:	60c6      	str	r6, [r0, #12]
 80074a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074aa:	68f3      	ldr	r3, [r6, #12]
 80074ac:	b183      	cbz	r3, 80074d0 <_Balloc+0x50>
 80074ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074b6:	b9b8      	cbnz	r0, 80074e8 <_Balloc+0x68>
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f605 	lsl.w	r6, r1, r5
 80074be:	1d72      	adds	r2, r6, #5
 80074c0:	0092      	lsls	r2, r2, #2
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 fb60 	bl	8007b88 <_calloc_r>
 80074c8:	b160      	cbz	r0, 80074e4 <_Balloc+0x64>
 80074ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ce:	e00e      	b.n	80074ee <_Balloc+0x6e>
 80074d0:	2221      	movs	r2, #33	; 0x21
 80074d2:	2104      	movs	r1, #4
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 fb57 	bl	8007b88 <_calloc_r>
 80074da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074dc:	60f0      	str	r0, [r6, #12]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e4      	bne.n	80074ae <_Balloc+0x2e>
 80074e4:	2000      	movs	r0, #0
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	6802      	ldr	r2, [r0, #0]
 80074ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074ee:	2300      	movs	r3, #0
 80074f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074f4:	e7f7      	b.n	80074e6 <_Balloc+0x66>
 80074f6:	bf00      	nop
 80074f8:	08008499 	.word	0x08008499
 80074fc:	0800857c 	.word	0x0800857c

08007500 <_Bfree>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007504:	4605      	mov	r5, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b976      	cbnz	r6, 8007528 <_Bfree+0x28>
 800750a:	2010      	movs	r0, #16
 800750c:	f7ff ffa2 	bl	8007454 <malloc>
 8007510:	4602      	mov	r2, r0
 8007512:	6268      	str	r0, [r5, #36]	; 0x24
 8007514:	b920      	cbnz	r0, 8007520 <_Bfree+0x20>
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <_Bfree+0x3c>)
 8007518:	4809      	ldr	r0, [pc, #36]	; (8007540 <_Bfree+0x40>)
 800751a:	218a      	movs	r1, #138	; 0x8a
 800751c:	f000 fe32 	bl	8008184 <__assert_func>
 8007520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007524:	6006      	str	r6, [r0, #0]
 8007526:	60c6      	str	r6, [r0, #12]
 8007528:	b13c      	cbz	r4, 800753a <_Bfree+0x3a>
 800752a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800752c:	6862      	ldr	r2, [r4, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007534:	6021      	str	r1, [r4, #0]
 8007536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800753a:	bd70      	pop	{r4, r5, r6, pc}
 800753c:	08008499 	.word	0x08008499
 8007540:	0800857c 	.word	0x0800857c

08007544 <__multadd>:
 8007544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007548:	690d      	ldr	r5, [r1, #16]
 800754a:	4607      	mov	r7, r0
 800754c:	460c      	mov	r4, r1
 800754e:	461e      	mov	r6, r3
 8007550:	f101 0c14 	add.w	ip, r1, #20
 8007554:	2000      	movs	r0, #0
 8007556:	f8dc 3000 	ldr.w	r3, [ip]
 800755a:	b299      	uxth	r1, r3
 800755c:	fb02 6101 	mla	r1, r2, r1, r6
 8007560:	0c1e      	lsrs	r6, r3, #16
 8007562:	0c0b      	lsrs	r3, r1, #16
 8007564:	fb02 3306 	mla	r3, r2, r6, r3
 8007568:	b289      	uxth	r1, r1
 800756a:	3001      	adds	r0, #1
 800756c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007570:	4285      	cmp	r5, r0
 8007572:	f84c 1b04 	str.w	r1, [ip], #4
 8007576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800757a:	dcec      	bgt.n	8007556 <__multadd+0x12>
 800757c:	b30e      	cbz	r6, 80075c2 <__multadd+0x7e>
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	42ab      	cmp	r3, r5
 8007582:	dc19      	bgt.n	80075b8 <__multadd+0x74>
 8007584:	6861      	ldr	r1, [r4, #4]
 8007586:	4638      	mov	r0, r7
 8007588:	3101      	adds	r1, #1
 800758a:	f7ff ff79 	bl	8007480 <_Balloc>
 800758e:	4680      	mov	r8, r0
 8007590:	b928      	cbnz	r0, 800759e <__multadd+0x5a>
 8007592:	4602      	mov	r2, r0
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <__multadd+0x84>)
 8007596:	480d      	ldr	r0, [pc, #52]	; (80075cc <__multadd+0x88>)
 8007598:	21b5      	movs	r1, #181	; 0xb5
 800759a:	f000 fdf3 	bl	8008184 <__assert_func>
 800759e:	6922      	ldr	r2, [r4, #16]
 80075a0:	3202      	adds	r2, #2
 80075a2:	f104 010c 	add.w	r1, r4, #12
 80075a6:	0092      	lsls	r2, r2, #2
 80075a8:	300c      	adds	r0, #12
 80075aa:	f7ff ff5b 	bl	8007464 <memcpy>
 80075ae:	4621      	mov	r1, r4
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff ffa5 	bl	8007500 <_Bfree>
 80075b6:	4644      	mov	r4, r8
 80075b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075bc:	3501      	adds	r5, #1
 80075be:	615e      	str	r6, [r3, #20]
 80075c0:	6125      	str	r5, [r4, #16]
 80075c2:	4620      	mov	r0, r4
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c8:	0800850b 	.word	0x0800850b
 80075cc:	0800857c 	.word	0x0800857c

080075d0 <__hi0bits>:
 80075d0:	0c03      	lsrs	r3, r0, #16
 80075d2:	041b      	lsls	r3, r3, #16
 80075d4:	b9d3      	cbnz	r3, 800760c <__hi0bits+0x3c>
 80075d6:	0400      	lsls	r0, r0, #16
 80075d8:	2310      	movs	r3, #16
 80075da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075de:	bf04      	itt	eq
 80075e0:	0200      	lsleq	r0, r0, #8
 80075e2:	3308      	addeq	r3, #8
 80075e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075e8:	bf04      	itt	eq
 80075ea:	0100      	lsleq	r0, r0, #4
 80075ec:	3304      	addeq	r3, #4
 80075ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075f2:	bf04      	itt	eq
 80075f4:	0080      	lsleq	r0, r0, #2
 80075f6:	3302      	addeq	r3, #2
 80075f8:	2800      	cmp	r0, #0
 80075fa:	db05      	blt.n	8007608 <__hi0bits+0x38>
 80075fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007600:	f103 0301 	add.w	r3, r3, #1
 8007604:	bf08      	it	eq
 8007606:	2320      	moveq	r3, #32
 8007608:	4618      	mov	r0, r3
 800760a:	4770      	bx	lr
 800760c:	2300      	movs	r3, #0
 800760e:	e7e4      	b.n	80075da <__hi0bits+0xa>

08007610 <__lo0bits>:
 8007610:	6803      	ldr	r3, [r0, #0]
 8007612:	f013 0207 	ands.w	r2, r3, #7
 8007616:	4601      	mov	r1, r0
 8007618:	d00b      	beq.n	8007632 <__lo0bits+0x22>
 800761a:	07da      	lsls	r2, r3, #31
 800761c:	d423      	bmi.n	8007666 <__lo0bits+0x56>
 800761e:	0798      	lsls	r0, r3, #30
 8007620:	bf49      	itett	mi
 8007622:	085b      	lsrmi	r3, r3, #1
 8007624:	089b      	lsrpl	r3, r3, #2
 8007626:	2001      	movmi	r0, #1
 8007628:	600b      	strmi	r3, [r1, #0]
 800762a:	bf5c      	itt	pl
 800762c:	600b      	strpl	r3, [r1, #0]
 800762e:	2002      	movpl	r0, #2
 8007630:	4770      	bx	lr
 8007632:	b298      	uxth	r0, r3
 8007634:	b9a8      	cbnz	r0, 8007662 <__lo0bits+0x52>
 8007636:	0c1b      	lsrs	r3, r3, #16
 8007638:	2010      	movs	r0, #16
 800763a:	b2da      	uxtb	r2, r3
 800763c:	b90a      	cbnz	r2, 8007642 <__lo0bits+0x32>
 800763e:	3008      	adds	r0, #8
 8007640:	0a1b      	lsrs	r3, r3, #8
 8007642:	071a      	lsls	r2, r3, #28
 8007644:	bf04      	itt	eq
 8007646:	091b      	lsreq	r3, r3, #4
 8007648:	3004      	addeq	r0, #4
 800764a:	079a      	lsls	r2, r3, #30
 800764c:	bf04      	itt	eq
 800764e:	089b      	lsreq	r3, r3, #2
 8007650:	3002      	addeq	r0, #2
 8007652:	07da      	lsls	r2, r3, #31
 8007654:	d403      	bmi.n	800765e <__lo0bits+0x4e>
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	f100 0001 	add.w	r0, r0, #1
 800765c:	d005      	beq.n	800766a <__lo0bits+0x5a>
 800765e:	600b      	str	r3, [r1, #0]
 8007660:	4770      	bx	lr
 8007662:	4610      	mov	r0, r2
 8007664:	e7e9      	b.n	800763a <__lo0bits+0x2a>
 8007666:	2000      	movs	r0, #0
 8007668:	4770      	bx	lr
 800766a:	2020      	movs	r0, #32
 800766c:	4770      	bx	lr
	...

08007670 <__i2b>:
 8007670:	b510      	push	{r4, lr}
 8007672:	460c      	mov	r4, r1
 8007674:	2101      	movs	r1, #1
 8007676:	f7ff ff03 	bl	8007480 <_Balloc>
 800767a:	4602      	mov	r2, r0
 800767c:	b928      	cbnz	r0, 800768a <__i2b+0x1a>
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <__i2b+0x24>)
 8007680:	4805      	ldr	r0, [pc, #20]	; (8007698 <__i2b+0x28>)
 8007682:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007686:	f000 fd7d 	bl	8008184 <__assert_func>
 800768a:	2301      	movs	r3, #1
 800768c:	6144      	str	r4, [r0, #20]
 800768e:	6103      	str	r3, [r0, #16]
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	0800850b 	.word	0x0800850b
 8007698:	0800857c 	.word	0x0800857c

0800769c <__multiply>:
 800769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	4691      	mov	r9, r2
 80076a2:	690a      	ldr	r2, [r1, #16]
 80076a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	bfb8      	it	lt
 80076ac:	460b      	movlt	r3, r1
 80076ae:	460c      	mov	r4, r1
 80076b0:	bfbc      	itt	lt
 80076b2:	464c      	movlt	r4, r9
 80076b4:	4699      	movlt	r9, r3
 80076b6:	6927      	ldr	r7, [r4, #16]
 80076b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076bc:	68a3      	ldr	r3, [r4, #8]
 80076be:	6861      	ldr	r1, [r4, #4]
 80076c0:	eb07 060a 	add.w	r6, r7, sl
 80076c4:	42b3      	cmp	r3, r6
 80076c6:	b085      	sub	sp, #20
 80076c8:	bfb8      	it	lt
 80076ca:	3101      	addlt	r1, #1
 80076cc:	f7ff fed8 	bl	8007480 <_Balloc>
 80076d0:	b930      	cbnz	r0, 80076e0 <__multiply+0x44>
 80076d2:	4602      	mov	r2, r0
 80076d4:	4b44      	ldr	r3, [pc, #272]	; (80077e8 <__multiply+0x14c>)
 80076d6:	4845      	ldr	r0, [pc, #276]	; (80077ec <__multiply+0x150>)
 80076d8:	f240 115d 	movw	r1, #349	; 0x15d
 80076dc:	f000 fd52 	bl	8008184 <__assert_func>
 80076e0:	f100 0514 	add.w	r5, r0, #20
 80076e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076e8:	462b      	mov	r3, r5
 80076ea:	2200      	movs	r2, #0
 80076ec:	4543      	cmp	r3, r8
 80076ee:	d321      	bcc.n	8007734 <__multiply+0x98>
 80076f0:	f104 0314 	add.w	r3, r4, #20
 80076f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076f8:	f109 0314 	add.w	r3, r9, #20
 80076fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007700:	9202      	str	r2, [sp, #8]
 8007702:	1b3a      	subs	r2, r7, r4
 8007704:	3a15      	subs	r2, #21
 8007706:	f022 0203 	bic.w	r2, r2, #3
 800770a:	3204      	adds	r2, #4
 800770c:	f104 0115 	add.w	r1, r4, #21
 8007710:	428f      	cmp	r7, r1
 8007712:	bf38      	it	cc
 8007714:	2204      	movcc	r2, #4
 8007716:	9201      	str	r2, [sp, #4]
 8007718:	9a02      	ldr	r2, [sp, #8]
 800771a:	9303      	str	r3, [sp, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d80c      	bhi.n	800773a <__multiply+0x9e>
 8007720:	2e00      	cmp	r6, #0
 8007722:	dd03      	ble.n	800772c <__multiply+0x90>
 8007724:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007728:	2b00      	cmp	r3, #0
 800772a:	d05a      	beq.n	80077e2 <__multiply+0x146>
 800772c:	6106      	str	r6, [r0, #16]
 800772e:	b005      	add	sp, #20
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	f843 2b04 	str.w	r2, [r3], #4
 8007738:	e7d8      	b.n	80076ec <__multiply+0x50>
 800773a:	f8b3 a000 	ldrh.w	sl, [r3]
 800773e:	f1ba 0f00 	cmp.w	sl, #0
 8007742:	d024      	beq.n	800778e <__multiply+0xf2>
 8007744:	f104 0e14 	add.w	lr, r4, #20
 8007748:	46a9      	mov	r9, r5
 800774a:	f04f 0c00 	mov.w	ip, #0
 800774e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007752:	f8d9 1000 	ldr.w	r1, [r9]
 8007756:	fa1f fb82 	uxth.w	fp, r2
 800775a:	b289      	uxth	r1, r1
 800775c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007760:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007764:	f8d9 2000 	ldr.w	r2, [r9]
 8007768:	4461      	add	r1, ip
 800776a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800776e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007772:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007776:	b289      	uxth	r1, r1
 8007778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800777c:	4577      	cmp	r7, lr
 800777e:	f849 1b04 	str.w	r1, [r9], #4
 8007782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007786:	d8e2      	bhi.n	800774e <__multiply+0xb2>
 8007788:	9a01      	ldr	r2, [sp, #4]
 800778a:	f845 c002 	str.w	ip, [r5, r2]
 800778e:	9a03      	ldr	r2, [sp, #12]
 8007790:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007794:	3304      	adds	r3, #4
 8007796:	f1b9 0f00 	cmp.w	r9, #0
 800779a:	d020      	beq.n	80077de <__multiply+0x142>
 800779c:	6829      	ldr	r1, [r5, #0]
 800779e:	f104 0c14 	add.w	ip, r4, #20
 80077a2:	46ae      	mov	lr, r5
 80077a4:	f04f 0a00 	mov.w	sl, #0
 80077a8:	f8bc b000 	ldrh.w	fp, [ip]
 80077ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077b0:	fb09 220b 	mla	r2, r9, fp, r2
 80077b4:	4492      	add	sl, r2
 80077b6:	b289      	uxth	r1, r1
 80077b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077bc:	f84e 1b04 	str.w	r1, [lr], #4
 80077c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077c4:	f8be 1000 	ldrh.w	r1, [lr]
 80077c8:	0c12      	lsrs	r2, r2, #16
 80077ca:	fb09 1102 	mla	r1, r9, r2, r1
 80077ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077d2:	4567      	cmp	r7, ip
 80077d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077d8:	d8e6      	bhi.n	80077a8 <__multiply+0x10c>
 80077da:	9a01      	ldr	r2, [sp, #4]
 80077dc:	50a9      	str	r1, [r5, r2]
 80077de:	3504      	adds	r5, #4
 80077e0:	e79a      	b.n	8007718 <__multiply+0x7c>
 80077e2:	3e01      	subs	r6, #1
 80077e4:	e79c      	b.n	8007720 <__multiply+0x84>
 80077e6:	bf00      	nop
 80077e8:	0800850b 	.word	0x0800850b
 80077ec:	0800857c 	.word	0x0800857c

080077f0 <__pow5mult>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	4615      	mov	r5, r2
 80077f6:	f012 0203 	ands.w	r2, r2, #3
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	d007      	beq.n	8007810 <__pow5mult+0x20>
 8007800:	4c25      	ldr	r4, [pc, #148]	; (8007898 <__pow5mult+0xa8>)
 8007802:	3a01      	subs	r2, #1
 8007804:	2300      	movs	r3, #0
 8007806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800780a:	f7ff fe9b 	bl	8007544 <__multadd>
 800780e:	4607      	mov	r7, r0
 8007810:	10ad      	asrs	r5, r5, #2
 8007812:	d03d      	beq.n	8007890 <__pow5mult+0xa0>
 8007814:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007816:	b97c      	cbnz	r4, 8007838 <__pow5mult+0x48>
 8007818:	2010      	movs	r0, #16
 800781a:	f7ff fe1b 	bl	8007454 <malloc>
 800781e:	4602      	mov	r2, r0
 8007820:	6270      	str	r0, [r6, #36]	; 0x24
 8007822:	b928      	cbnz	r0, 8007830 <__pow5mult+0x40>
 8007824:	4b1d      	ldr	r3, [pc, #116]	; (800789c <__pow5mult+0xac>)
 8007826:	481e      	ldr	r0, [pc, #120]	; (80078a0 <__pow5mult+0xb0>)
 8007828:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800782c:	f000 fcaa 	bl	8008184 <__assert_func>
 8007830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007834:	6004      	str	r4, [r0, #0]
 8007836:	60c4      	str	r4, [r0, #12]
 8007838:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800783c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007840:	b94c      	cbnz	r4, 8007856 <__pow5mult+0x66>
 8007842:	f240 2171 	movw	r1, #625	; 0x271
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff ff12 	bl	8007670 <__i2b>
 800784c:	2300      	movs	r3, #0
 800784e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007852:	4604      	mov	r4, r0
 8007854:	6003      	str	r3, [r0, #0]
 8007856:	f04f 0900 	mov.w	r9, #0
 800785a:	07eb      	lsls	r3, r5, #31
 800785c:	d50a      	bpl.n	8007874 <__pow5mult+0x84>
 800785e:	4639      	mov	r1, r7
 8007860:	4622      	mov	r2, r4
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ff1a 	bl	800769c <__multiply>
 8007868:	4639      	mov	r1, r7
 800786a:	4680      	mov	r8, r0
 800786c:	4630      	mov	r0, r6
 800786e:	f7ff fe47 	bl	8007500 <_Bfree>
 8007872:	4647      	mov	r7, r8
 8007874:	106d      	asrs	r5, r5, #1
 8007876:	d00b      	beq.n	8007890 <__pow5mult+0xa0>
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	b938      	cbnz	r0, 800788c <__pow5mult+0x9c>
 800787c:	4622      	mov	r2, r4
 800787e:	4621      	mov	r1, r4
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ff0b 	bl	800769c <__multiply>
 8007886:	6020      	str	r0, [r4, #0]
 8007888:	f8c0 9000 	str.w	r9, [r0]
 800788c:	4604      	mov	r4, r0
 800788e:	e7e4      	b.n	800785a <__pow5mult+0x6a>
 8007890:	4638      	mov	r0, r7
 8007892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007896:	bf00      	nop
 8007898:	080086c8 	.word	0x080086c8
 800789c:	08008499 	.word	0x08008499
 80078a0:	0800857c 	.word	0x0800857c

080078a4 <__lshift>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	6849      	ldr	r1, [r1, #4]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078b2:	68a3      	ldr	r3, [r4, #8]
 80078b4:	4607      	mov	r7, r0
 80078b6:	4691      	mov	r9, r2
 80078b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078bc:	f108 0601 	add.w	r6, r8, #1
 80078c0:	42b3      	cmp	r3, r6
 80078c2:	db0b      	blt.n	80078dc <__lshift+0x38>
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff fddb 	bl	8007480 <_Balloc>
 80078ca:	4605      	mov	r5, r0
 80078cc:	b948      	cbnz	r0, 80078e2 <__lshift+0x3e>
 80078ce:	4602      	mov	r2, r0
 80078d0:	4b2a      	ldr	r3, [pc, #168]	; (800797c <__lshift+0xd8>)
 80078d2:	482b      	ldr	r0, [pc, #172]	; (8007980 <__lshift+0xdc>)
 80078d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078d8:	f000 fc54 	bl	8008184 <__assert_func>
 80078dc:	3101      	adds	r1, #1
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	e7ee      	b.n	80078c0 <__lshift+0x1c>
 80078e2:	2300      	movs	r3, #0
 80078e4:	f100 0114 	add.w	r1, r0, #20
 80078e8:	f100 0210 	add.w	r2, r0, #16
 80078ec:	4618      	mov	r0, r3
 80078ee:	4553      	cmp	r3, sl
 80078f0:	db37      	blt.n	8007962 <__lshift+0xbe>
 80078f2:	6920      	ldr	r0, [r4, #16]
 80078f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078f8:	f104 0314 	add.w	r3, r4, #20
 80078fc:	f019 091f 	ands.w	r9, r9, #31
 8007900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007904:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007908:	d02f      	beq.n	800796a <__lshift+0xc6>
 800790a:	f1c9 0e20 	rsb	lr, r9, #32
 800790e:	468a      	mov	sl, r1
 8007910:	f04f 0c00 	mov.w	ip, #0
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	fa02 f209 	lsl.w	r2, r2, r9
 800791a:	ea42 020c 	orr.w	r2, r2, ip
 800791e:	f84a 2b04 	str.w	r2, [sl], #4
 8007922:	f853 2b04 	ldr.w	r2, [r3], #4
 8007926:	4298      	cmp	r0, r3
 8007928:	fa22 fc0e 	lsr.w	ip, r2, lr
 800792c:	d8f2      	bhi.n	8007914 <__lshift+0x70>
 800792e:	1b03      	subs	r3, r0, r4
 8007930:	3b15      	subs	r3, #21
 8007932:	f023 0303 	bic.w	r3, r3, #3
 8007936:	3304      	adds	r3, #4
 8007938:	f104 0215 	add.w	r2, r4, #21
 800793c:	4290      	cmp	r0, r2
 800793e:	bf38      	it	cc
 8007940:	2304      	movcc	r3, #4
 8007942:	f841 c003 	str.w	ip, [r1, r3]
 8007946:	f1bc 0f00 	cmp.w	ip, #0
 800794a:	d001      	beq.n	8007950 <__lshift+0xac>
 800794c:	f108 0602 	add.w	r6, r8, #2
 8007950:	3e01      	subs	r6, #1
 8007952:	4638      	mov	r0, r7
 8007954:	612e      	str	r6, [r5, #16]
 8007956:	4621      	mov	r1, r4
 8007958:	f7ff fdd2 	bl	8007500 <_Bfree>
 800795c:	4628      	mov	r0, r5
 800795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007962:	f842 0f04 	str.w	r0, [r2, #4]!
 8007966:	3301      	adds	r3, #1
 8007968:	e7c1      	b.n	80078ee <__lshift+0x4a>
 800796a:	3904      	subs	r1, #4
 800796c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007970:	f841 2f04 	str.w	r2, [r1, #4]!
 8007974:	4298      	cmp	r0, r3
 8007976:	d8f9      	bhi.n	800796c <__lshift+0xc8>
 8007978:	e7ea      	b.n	8007950 <__lshift+0xac>
 800797a:	bf00      	nop
 800797c:	0800850b 	.word	0x0800850b
 8007980:	0800857c 	.word	0x0800857c

08007984 <__mcmp>:
 8007984:	b530      	push	{r4, r5, lr}
 8007986:	6902      	ldr	r2, [r0, #16]
 8007988:	690c      	ldr	r4, [r1, #16]
 800798a:	1b12      	subs	r2, r2, r4
 800798c:	d10e      	bne.n	80079ac <__mcmp+0x28>
 800798e:	f100 0314 	add.w	r3, r0, #20
 8007992:	3114      	adds	r1, #20
 8007994:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007998:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800799c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079a4:	42a5      	cmp	r5, r4
 80079a6:	d003      	beq.n	80079b0 <__mcmp+0x2c>
 80079a8:	d305      	bcc.n	80079b6 <__mcmp+0x32>
 80079aa:	2201      	movs	r2, #1
 80079ac:	4610      	mov	r0, r2
 80079ae:	bd30      	pop	{r4, r5, pc}
 80079b0:	4283      	cmp	r3, r0
 80079b2:	d3f3      	bcc.n	800799c <__mcmp+0x18>
 80079b4:	e7fa      	b.n	80079ac <__mcmp+0x28>
 80079b6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ba:	e7f7      	b.n	80079ac <__mcmp+0x28>

080079bc <__mdiff>:
 80079bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	460c      	mov	r4, r1
 80079c2:	4606      	mov	r6, r0
 80079c4:	4611      	mov	r1, r2
 80079c6:	4620      	mov	r0, r4
 80079c8:	4690      	mov	r8, r2
 80079ca:	f7ff ffdb 	bl	8007984 <__mcmp>
 80079ce:	1e05      	subs	r5, r0, #0
 80079d0:	d110      	bne.n	80079f4 <__mdiff+0x38>
 80079d2:	4629      	mov	r1, r5
 80079d4:	4630      	mov	r0, r6
 80079d6:	f7ff fd53 	bl	8007480 <_Balloc>
 80079da:	b930      	cbnz	r0, 80079ea <__mdiff+0x2e>
 80079dc:	4b3a      	ldr	r3, [pc, #232]	; (8007ac8 <__mdiff+0x10c>)
 80079de:	4602      	mov	r2, r0
 80079e0:	f240 2132 	movw	r1, #562	; 0x232
 80079e4:	4839      	ldr	r0, [pc, #228]	; (8007acc <__mdiff+0x110>)
 80079e6:	f000 fbcd 	bl	8008184 <__assert_func>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	bfa4      	itt	ge
 80079f6:	4643      	movge	r3, r8
 80079f8:	46a0      	movge	r8, r4
 80079fa:	4630      	mov	r0, r6
 80079fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a00:	bfa6      	itte	ge
 8007a02:	461c      	movge	r4, r3
 8007a04:	2500      	movge	r5, #0
 8007a06:	2501      	movlt	r5, #1
 8007a08:	f7ff fd3a 	bl	8007480 <_Balloc>
 8007a0c:	b920      	cbnz	r0, 8007a18 <__mdiff+0x5c>
 8007a0e:	4b2e      	ldr	r3, [pc, #184]	; (8007ac8 <__mdiff+0x10c>)
 8007a10:	4602      	mov	r2, r0
 8007a12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a16:	e7e5      	b.n	80079e4 <__mdiff+0x28>
 8007a18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a1c:	6926      	ldr	r6, [r4, #16]
 8007a1e:	60c5      	str	r5, [r0, #12]
 8007a20:	f104 0914 	add.w	r9, r4, #20
 8007a24:	f108 0514 	add.w	r5, r8, #20
 8007a28:	f100 0e14 	add.w	lr, r0, #20
 8007a2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a34:	f108 0210 	add.w	r2, r8, #16
 8007a38:	46f2      	mov	sl, lr
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a44:	fa1f f883 	uxth.w	r8, r3
 8007a48:	fa11 f18b 	uxtah	r1, r1, fp
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	eba1 0808 	sub.w	r8, r1, r8
 8007a52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a5a:	fa1f f888 	uxth.w	r8, r8
 8007a5e:	1419      	asrs	r1, r3, #16
 8007a60:	454e      	cmp	r6, r9
 8007a62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a66:	f84a 3b04 	str.w	r3, [sl], #4
 8007a6a:	d8e7      	bhi.n	8007a3c <__mdiff+0x80>
 8007a6c:	1b33      	subs	r3, r6, r4
 8007a6e:	3b15      	subs	r3, #21
 8007a70:	f023 0303 	bic.w	r3, r3, #3
 8007a74:	3304      	adds	r3, #4
 8007a76:	3415      	adds	r4, #21
 8007a78:	42a6      	cmp	r6, r4
 8007a7a:	bf38      	it	cc
 8007a7c:	2304      	movcc	r3, #4
 8007a7e:	441d      	add	r5, r3
 8007a80:	4473      	add	r3, lr
 8007a82:	469e      	mov	lr, r3
 8007a84:	462e      	mov	r6, r5
 8007a86:	4566      	cmp	r6, ip
 8007a88:	d30e      	bcc.n	8007aa8 <__mdiff+0xec>
 8007a8a:	f10c 0203 	add.w	r2, ip, #3
 8007a8e:	1b52      	subs	r2, r2, r5
 8007a90:	f022 0203 	bic.w	r2, r2, #3
 8007a94:	3d03      	subs	r5, #3
 8007a96:	45ac      	cmp	ip, r5
 8007a98:	bf38      	it	cc
 8007a9a:	2200      	movcc	r2, #0
 8007a9c:	441a      	add	r2, r3
 8007a9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007aa2:	b17b      	cbz	r3, 8007ac4 <__mdiff+0x108>
 8007aa4:	6107      	str	r7, [r0, #16]
 8007aa6:	e7a3      	b.n	80079f0 <__mdiff+0x34>
 8007aa8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007aac:	fa11 f288 	uxtah	r2, r1, r8
 8007ab0:	1414      	asrs	r4, r2, #16
 8007ab2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ab6:	b292      	uxth	r2, r2
 8007ab8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007abc:	f84e 2b04 	str.w	r2, [lr], #4
 8007ac0:	1421      	asrs	r1, r4, #16
 8007ac2:	e7e0      	b.n	8007a86 <__mdiff+0xca>
 8007ac4:	3f01      	subs	r7, #1
 8007ac6:	e7ea      	b.n	8007a9e <__mdiff+0xe2>
 8007ac8:	0800850b 	.word	0x0800850b
 8007acc:	0800857c 	.word	0x0800857c

08007ad0 <__d2b>:
 8007ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	4689      	mov	r9, r1
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	ec57 6b10 	vmov	r6, r7, d0
 8007adc:	4690      	mov	r8, r2
 8007ade:	f7ff fccf 	bl	8007480 <_Balloc>
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	b930      	cbnz	r0, 8007af4 <__d2b+0x24>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	4b25      	ldr	r3, [pc, #148]	; (8007b80 <__d2b+0xb0>)
 8007aea:	4826      	ldr	r0, [pc, #152]	; (8007b84 <__d2b+0xb4>)
 8007aec:	f240 310a 	movw	r1, #778	; 0x30a
 8007af0:	f000 fb48 	bl	8008184 <__assert_func>
 8007af4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007af8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007afc:	bb35      	cbnz	r5, 8007b4c <__d2b+0x7c>
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	d028      	beq.n	8007b56 <__d2b+0x86>
 8007b04:	4668      	mov	r0, sp
 8007b06:	9600      	str	r6, [sp, #0]
 8007b08:	f7ff fd82 	bl	8007610 <__lo0bits>
 8007b0c:	9900      	ldr	r1, [sp, #0]
 8007b0e:	b300      	cbz	r0, 8007b52 <__d2b+0x82>
 8007b10:	9a01      	ldr	r2, [sp, #4]
 8007b12:	f1c0 0320 	rsb	r3, r0, #32
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	40c2      	lsrs	r2, r0
 8007b1e:	6163      	str	r3, [r4, #20]
 8007b20:	9201      	str	r2, [sp, #4]
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	61a3      	str	r3, [r4, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bf14      	ite	ne
 8007b2a:	2202      	movne	r2, #2
 8007b2c:	2201      	moveq	r2, #1
 8007b2e:	6122      	str	r2, [r4, #16]
 8007b30:	b1d5      	cbz	r5, 8007b68 <__d2b+0x98>
 8007b32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b36:	4405      	add	r5, r0
 8007b38:	f8c9 5000 	str.w	r5, [r9]
 8007b3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b40:	f8c8 0000 	str.w	r0, [r8]
 8007b44:	4620      	mov	r0, r4
 8007b46:	b003      	add	sp, #12
 8007b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b50:	e7d5      	b.n	8007afe <__d2b+0x2e>
 8007b52:	6161      	str	r1, [r4, #20]
 8007b54:	e7e5      	b.n	8007b22 <__d2b+0x52>
 8007b56:	a801      	add	r0, sp, #4
 8007b58:	f7ff fd5a 	bl	8007610 <__lo0bits>
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	6163      	str	r3, [r4, #20]
 8007b60:	2201      	movs	r2, #1
 8007b62:	6122      	str	r2, [r4, #16]
 8007b64:	3020      	adds	r0, #32
 8007b66:	e7e3      	b.n	8007b30 <__d2b+0x60>
 8007b68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b70:	f8c9 0000 	str.w	r0, [r9]
 8007b74:	6918      	ldr	r0, [r3, #16]
 8007b76:	f7ff fd2b 	bl	80075d0 <__hi0bits>
 8007b7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b7e:	e7df      	b.n	8007b40 <__d2b+0x70>
 8007b80:	0800850b 	.word	0x0800850b
 8007b84:	0800857c 	.word	0x0800857c

08007b88 <_calloc_r>:
 8007b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b8a:	fba1 2402 	umull	r2, r4, r1, r2
 8007b8e:	b94c      	cbnz	r4, 8007ba4 <_calloc_r+0x1c>
 8007b90:	4611      	mov	r1, r2
 8007b92:	9201      	str	r2, [sp, #4]
 8007b94:	f000 f87a 	bl	8007c8c <_malloc_r>
 8007b98:	9a01      	ldr	r2, [sp, #4]
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	b930      	cbnz	r0, 8007bac <_calloc_r+0x24>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bd30      	pop	{r4, r5, pc}
 8007ba4:	220c      	movs	r2, #12
 8007ba6:	6002      	str	r2, [r0, #0]
 8007ba8:	2500      	movs	r5, #0
 8007baa:	e7f8      	b.n	8007b9e <_calloc_r+0x16>
 8007bac:	4621      	mov	r1, r4
 8007bae:	f7fd fddd 	bl	800576c <memset>
 8007bb2:	e7f4      	b.n	8007b9e <_calloc_r+0x16>

08007bb4 <_free_r>:
 8007bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	d044      	beq.n	8007c44 <_free_r+0x90>
 8007bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbe:	9001      	str	r0, [sp, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bc6:	bfb8      	it	lt
 8007bc8:	18e4      	addlt	r4, r4, r3
 8007bca:	f000 fb61 	bl	8008290 <__malloc_lock>
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <_free_r+0x94>)
 8007bd0:	9801      	ldr	r0, [sp, #4]
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	b933      	cbnz	r3, 8007be4 <_free_r+0x30>
 8007bd6:	6063      	str	r3, [r4, #4]
 8007bd8:	6014      	str	r4, [r2, #0]
 8007bda:	b003      	add	sp, #12
 8007bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007be0:	f000 bb5c 	b.w	800829c <__malloc_unlock>
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d908      	bls.n	8007bfa <_free_r+0x46>
 8007be8:	6825      	ldr	r5, [r4, #0]
 8007bea:	1961      	adds	r1, r4, r5
 8007bec:	428b      	cmp	r3, r1
 8007bee:	bf01      	itttt	eq
 8007bf0:	6819      	ldreq	r1, [r3, #0]
 8007bf2:	685b      	ldreq	r3, [r3, #4]
 8007bf4:	1949      	addeq	r1, r1, r5
 8007bf6:	6021      	streq	r1, [r4, #0]
 8007bf8:	e7ed      	b.n	8007bd6 <_free_r+0x22>
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b10b      	cbz	r3, 8007c04 <_free_r+0x50>
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d9fa      	bls.n	8007bfa <_free_r+0x46>
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	1855      	adds	r5, r2, r1
 8007c08:	42a5      	cmp	r5, r4
 8007c0a:	d10b      	bne.n	8007c24 <_free_r+0x70>
 8007c0c:	6824      	ldr	r4, [r4, #0]
 8007c0e:	4421      	add	r1, r4
 8007c10:	1854      	adds	r4, r2, r1
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	d1e0      	bne.n	8007bda <_free_r+0x26>
 8007c18:	681c      	ldr	r4, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	6053      	str	r3, [r2, #4]
 8007c1e:	4421      	add	r1, r4
 8007c20:	6011      	str	r1, [r2, #0]
 8007c22:	e7da      	b.n	8007bda <_free_r+0x26>
 8007c24:	d902      	bls.n	8007c2c <_free_r+0x78>
 8007c26:	230c      	movs	r3, #12
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	e7d6      	b.n	8007bda <_free_r+0x26>
 8007c2c:	6825      	ldr	r5, [r4, #0]
 8007c2e:	1961      	adds	r1, r4, r5
 8007c30:	428b      	cmp	r3, r1
 8007c32:	bf04      	itt	eq
 8007c34:	6819      	ldreq	r1, [r3, #0]
 8007c36:	685b      	ldreq	r3, [r3, #4]
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	bf04      	itt	eq
 8007c3c:	1949      	addeq	r1, r1, r5
 8007c3e:	6021      	streq	r1, [r4, #0]
 8007c40:	6054      	str	r4, [r2, #4]
 8007c42:	e7ca      	b.n	8007bda <_free_r+0x26>
 8007c44:	b003      	add	sp, #12
 8007c46:	bd30      	pop	{r4, r5, pc}
 8007c48:	20000440 	.word	0x20000440

08007c4c <sbrk_aligned>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	4e0e      	ldr	r6, [pc, #56]	; (8007c88 <sbrk_aligned+0x3c>)
 8007c50:	460c      	mov	r4, r1
 8007c52:	6831      	ldr	r1, [r6, #0]
 8007c54:	4605      	mov	r5, r0
 8007c56:	b911      	cbnz	r1, 8007c5e <sbrk_aligned+0x12>
 8007c58:	f000 fa2e 	bl	80080b8 <_sbrk_r>
 8007c5c:	6030      	str	r0, [r6, #0]
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 fa29 	bl	80080b8 <_sbrk_r>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	d00a      	beq.n	8007c80 <sbrk_aligned+0x34>
 8007c6a:	1cc4      	adds	r4, r0, #3
 8007c6c:	f024 0403 	bic.w	r4, r4, #3
 8007c70:	42a0      	cmp	r0, r4
 8007c72:	d007      	beq.n	8007c84 <sbrk_aligned+0x38>
 8007c74:	1a21      	subs	r1, r4, r0
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 fa1e 	bl	80080b8 <_sbrk_r>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d101      	bne.n	8007c84 <sbrk_aligned+0x38>
 8007c80:	f04f 34ff 	mov.w	r4, #4294967295
 8007c84:	4620      	mov	r0, r4
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	20000444 	.word	0x20000444

08007c8c <_malloc_r>:
 8007c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c90:	1ccd      	adds	r5, r1, #3
 8007c92:	f025 0503 	bic.w	r5, r5, #3
 8007c96:	3508      	adds	r5, #8
 8007c98:	2d0c      	cmp	r5, #12
 8007c9a:	bf38      	it	cc
 8007c9c:	250c      	movcc	r5, #12
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	db01      	blt.n	8007ca8 <_malloc_r+0x1c>
 8007ca4:	42a9      	cmp	r1, r5
 8007ca6:	d905      	bls.n	8007cb4 <_malloc_r+0x28>
 8007ca8:	230c      	movs	r3, #12
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	2600      	movs	r6, #0
 8007cae:	4630      	mov	r0, r6
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	4e2e      	ldr	r6, [pc, #184]	; (8007d70 <_malloc_r+0xe4>)
 8007cb6:	f000 faeb 	bl	8008290 <__malloc_lock>
 8007cba:	6833      	ldr	r3, [r6, #0]
 8007cbc:	461c      	mov	r4, r3
 8007cbe:	bb34      	cbnz	r4, 8007d0e <_malloc_r+0x82>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	f7ff ffc2 	bl	8007c4c <sbrk_aligned>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	4604      	mov	r4, r0
 8007ccc:	d14d      	bne.n	8007d6a <_malloc_r+0xde>
 8007cce:	6834      	ldr	r4, [r6, #0]
 8007cd0:	4626      	mov	r6, r4
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d140      	bne.n	8007d58 <_malloc_r+0xcc>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4638      	mov	r0, r7
 8007cdc:	eb04 0803 	add.w	r8, r4, r3
 8007ce0:	f000 f9ea 	bl	80080b8 <_sbrk_r>
 8007ce4:	4580      	cmp	r8, r0
 8007ce6:	d13a      	bne.n	8007d5e <_malloc_r+0xd2>
 8007ce8:	6821      	ldr	r1, [r4, #0]
 8007cea:	3503      	adds	r5, #3
 8007cec:	1a6d      	subs	r5, r5, r1
 8007cee:	f025 0503 	bic.w	r5, r5, #3
 8007cf2:	3508      	adds	r5, #8
 8007cf4:	2d0c      	cmp	r5, #12
 8007cf6:	bf38      	it	cc
 8007cf8:	250c      	movcc	r5, #12
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f7ff ffa5 	bl	8007c4c <sbrk_aligned>
 8007d02:	3001      	adds	r0, #1
 8007d04:	d02b      	beq.n	8007d5e <_malloc_r+0xd2>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	442b      	add	r3, r5
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	e00e      	b.n	8007d2c <_malloc_r+0xa0>
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	1b52      	subs	r2, r2, r5
 8007d12:	d41e      	bmi.n	8007d52 <_malloc_r+0xc6>
 8007d14:	2a0b      	cmp	r2, #11
 8007d16:	d916      	bls.n	8007d46 <_malloc_r+0xba>
 8007d18:	1961      	adds	r1, r4, r5
 8007d1a:	42a3      	cmp	r3, r4
 8007d1c:	6025      	str	r5, [r4, #0]
 8007d1e:	bf18      	it	ne
 8007d20:	6059      	strne	r1, [r3, #4]
 8007d22:	6863      	ldr	r3, [r4, #4]
 8007d24:	bf08      	it	eq
 8007d26:	6031      	streq	r1, [r6, #0]
 8007d28:	5162      	str	r2, [r4, r5]
 8007d2a:	604b      	str	r3, [r1, #4]
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f104 060b 	add.w	r6, r4, #11
 8007d32:	f000 fab3 	bl	800829c <__malloc_unlock>
 8007d36:	f026 0607 	bic.w	r6, r6, #7
 8007d3a:	1d23      	adds	r3, r4, #4
 8007d3c:	1af2      	subs	r2, r6, r3
 8007d3e:	d0b6      	beq.n	8007cae <_malloc_r+0x22>
 8007d40:	1b9b      	subs	r3, r3, r6
 8007d42:	50a3      	str	r3, [r4, r2]
 8007d44:	e7b3      	b.n	8007cae <_malloc_r+0x22>
 8007d46:	6862      	ldr	r2, [r4, #4]
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	bf0c      	ite	eq
 8007d4c:	6032      	streq	r2, [r6, #0]
 8007d4e:	605a      	strne	r2, [r3, #4]
 8007d50:	e7ec      	b.n	8007d2c <_malloc_r+0xa0>
 8007d52:	4623      	mov	r3, r4
 8007d54:	6864      	ldr	r4, [r4, #4]
 8007d56:	e7b2      	b.n	8007cbe <_malloc_r+0x32>
 8007d58:	4634      	mov	r4, r6
 8007d5a:	6876      	ldr	r6, [r6, #4]
 8007d5c:	e7b9      	b.n	8007cd2 <_malloc_r+0x46>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4638      	mov	r0, r7
 8007d64:	f000 fa9a 	bl	800829c <__malloc_unlock>
 8007d68:	e7a1      	b.n	8007cae <_malloc_r+0x22>
 8007d6a:	6025      	str	r5, [r4, #0]
 8007d6c:	e7de      	b.n	8007d2c <_malloc_r+0xa0>
 8007d6e:	bf00      	nop
 8007d70:	20000440 	.word	0x20000440

08007d74 <__sfputc_r>:
 8007d74:	6893      	ldr	r3, [r2, #8]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	b410      	push	{r4}
 8007d7c:	6093      	str	r3, [r2, #8]
 8007d7e:	da08      	bge.n	8007d92 <__sfputc_r+0x1e>
 8007d80:	6994      	ldr	r4, [r2, #24]
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	db01      	blt.n	8007d8a <__sfputc_r+0x16>
 8007d86:	290a      	cmp	r1, #10
 8007d88:	d103      	bne.n	8007d92 <__sfputc_r+0x1e>
 8007d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d8e:	f7fe ba03 	b.w	8006198 <__swbuf_r>
 8007d92:	6813      	ldr	r3, [r2, #0]
 8007d94:	1c58      	adds	r0, r3, #1
 8007d96:	6010      	str	r0, [r2, #0]
 8007d98:	7019      	strb	r1, [r3, #0]
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <__sfputs_r>:
 8007da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da4:	4606      	mov	r6, r0
 8007da6:	460f      	mov	r7, r1
 8007da8:	4614      	mov	r4, r2
 8007daa:	18d5      	adds	r5, r2, r3
 8007dac:	42ac      	cmp	r4, r5
 8007dae:	d101      	bne.n	8007db4 <__sfputs_r+0x12>
 8007db0:	2000      	movs	r0, #0
 8007db2:	e007      	b.n	8007dc4 <__sfputs_r+0x22>
 8007db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db8:	463a      	mov	r2, r7
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff ffda 	bl	8007d74 <__sfputc_r>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d1f3      	bne.n	8007dac <__sfputs_r+0xa>
 8007dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dc8 <_vfiprintf_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	460d      	mov	r5, r1
 8007dce:	b09d      	sub	sp, #116	; 0x74
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	4698      	mov	r8, r3
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	b118      	cbz	r0, 8007de0 <_vfiprintf_r+0x18>
 8007dd8:	6983      	ldr	r3, [r0, #24]
 8007dda:	b90b      	cbnz	r3, 8007de0 <_vfiprintf_r+0x18>
 8007ddc:	f7ff fa30 	bl	8007240 <__sinit>
 8007de0:	4b89      	ldr	r3, [pc, #548]	; (8008008 <_vfiprintf_r+0x240>)
 8007de2:	429d      	cmp	r5, r3
 8007de4:	d11b      	bne.n	8007e1e <_vfiprintf_r+0x56>
 8007de6:	6875      	ldr	r5, [r6, #4]
 8007de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	d405      	bmi.n	8007dfa <_vfiprintf_r+0x32>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	059a      	lsls	r2, r3, #22
 8007df2:	d402      	bmi.n	8007dfa <_vfiprintf_r+0x32>
 8007df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007df6:	f7ff fac6 	bl	8007386 <__retarget_lock_acquire_recursive>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	071b      	lsls	r3, r3, #28
 8007dfe:	d501      	bpl.n	8007e04 <_vfiprintf_r+0x3c>
 8007e00:	692b      	ldr	r3, [r5, #16]
 8007e02:	b9eb      	cbnz	r3, 8007e40 <_vfiprintf_r+0x78>
 8007e04:	4629      	mov	r1, r5
 8007e06:	4630      	mov	r0, r6
 8007e08:	f7fe fa18 	bl	800623c <__swsetup_r>
 8007e0c:	b1c0      	cbz	r0, 8007e40 <_vfiprintf_r+0x78>
 8007e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e10:	07dc      	lsls	r4, r3, #31
 8007e12:	d50e      	bpl.n	8007e32 <_vfiprintf_r+0x6a>
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	b01d      	add	sp, #116	; 0x74
 8007e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1e:	4b7b      	ldr	r3, [pc, #492]	; (800800c <_vfiprintf_r+0x244>)
 8007e20:	429d      	cmp	r5, r3
 8007e22:	d101      	bne.n	8007e28 <_vfiprintf_r+0x60>
 8007e24:	68b5      	ldr	r5, [r6, #8]
 8007e26:	e7df      	b.n	8007de8 <_vfiprintf_r+0x20>
 8007e28:	4b79      	ldr	r3, [pc, #484]	; (8008010 <_vfiprintf_r+0x248>)
 8007e2a:	429d      	cmp	r5, r3
 8007e2c:	bf08      	it	eq
 8007e2e:	68f5      	ldreq	r5, [r6, #12]
 8007e30:	e7da      	b.n	8007de8 <_vfiprintf_r+0x20>
 8007e32:	89ab      	ldrh	r3, [r5, #12]
 8007e34:	0598      	lsls	r0, r3, #22
 8007e36:	d4ed      	bmi.n	8007e14 <_vfiprintf_r+0x4c>
 8007e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e3a:	f7ff faa5 	bl	8007388 <__retarget_lock_release_recursive>
 8007e3e:	e7e9      	b.n	8007e14 <_vfiprintf_r+0x4c>
 8007e40:	2300      	movs	r3, #0
 8007e42:	9309      	str	r3, [sp, #36]	; 0x24
 8007e44:	2320      	movs	r3, #32
 8007e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e4e:	2330      	movs	r3, #48	; 0x30
 8007e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008014 <_vfiprintf_r+0x24c>
 8007e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e58:	f04f 0901 	mov.w	r9, #1
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	469a      	mov	sl, r3
 8007e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e64:	b10a      	cbz	r2, 8007e6a <_vfiprintf_r+0xa2>
 8007e66:	2a25      	cmp	r2, #37	; 0x25
 8007e68:	d1f9      	bne.n	8007e5e <_vfiprintf_r+0x96>
 8007e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e6e:	d00b      	beq.n	8007e88 <_vfiprintf_r+0xc0>
 8007e70:	465b      	mov	r3, fp
 8007e72:	4622      	mov	r2, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7ff ff93 	bl	8007da2 <__sfputs_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f000 80aa 	beq.w	8007fd6 <_vfiprintf_r+0x20e>
 8007e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e84:	445a      	add	r2, fp
 8007e86:	9209      	str	r2, [sp, #36]	; 0x24
 8007e88:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80a2 	beq.w	8007fd6 <_vfiprintf_r+0x20e>
 8007e92:	2300      	movs	r3, #0
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295
 8007e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e9c:	f10a 0a01 	add.w	sl, sl, #1
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	9307      	str	r3, [sp, #28]
 8007ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8007eaa:	4654      	mov	r4, sl
 8007eac:	2205      	movs	r2, #5
 8007eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb2:	4858      	ldr	r0, [pc, #352]	; (8008014 <_vfiprintf_r+0x24c>)
 8007eb4:	f7f8 f994 	bl	80001e0 <memchr>
 8007eb8:	9a04      	ldr	r2, [sp, #16]
 8007eba:	b9d8      	cbnz	r0, 8007ef4 <_vfiprintf_r+0x12c>
 8007ebc:	06d1      	lsls	r1, r2, #27
 8007ebe:	bf44      	itt	mi
 8007ec0:	2320      	movmi	r3, #32
 8007ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec6:	0713      	lsls	r3, r2, #28
 8007ec8:	bf44      	itt	mi
 8007eca:	232b      	movmi	r3, #43	; 0x2b
 8007ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed6:	d015      	beq.n	8007f04 <_vfiprintf_r+0x13c>
 8007ed8:	9a07      	ldr	r2, [sp, #28]
 8007eda:	4654      	mov	r4, sl
 8007edc:	2000      	movs	r0, #0
 8007ede:	f04f 0c0a 	mov.w	ip, #10
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee8:	3b30      	subs	r3, #48	; 0x30
 8007eea:	2b09      	cmp	r3, #9
 8007eec:	d94e      	bls.n	8007f8c <_vfiprintf_r+0x1c4>
 8007eee:	b1b0      	cbz	r0, 8007f1e <_vfiprintf_r+0x156>
 8007ef0:	9207      	str	r2, [sp, #28]
 8007ef2:	e014      	b.n	8007f1e <_vfiprintf_r+0x156>
 8007ef4:	eba0 0308 	sub.w	r3, r0, r8
 8007ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8007efc:	4313      	orrs	r3, r2
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	46a2      	mov	sl, r4
 8007f02:	e7d2      	b.n	8007eaa <_vfiprintf_r+0xe2>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	1d19      	adds	r1, r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	9103      	str	r1, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bfbb      	ittet	lt
 8007f10:	425b      	neglt	r3, r3
 8007f12:	f042 0202 	orrlt.w	r2, r2, #2
 8007f16:	9307      	strge	r3, [sp, #28]
 8007f18:	9307      	strlt	r3, [sp, #28]
 8007f1a:	bfb8      	it	lt
 8007f1c:	9204      	strlt	r2, [sp, #16]
 8007f1e:	7823      	ldrb	r3, [r4, #0]
 8007f20:	2b2e      	cmp	r3, #46	; 0x2e
 8007f22:	d10c      	bne.n	8007f3e <_vfiprintf_r+0x176>
 8007f24:	7863      	ldrb	r3, [r4, #1]
 8007f26:	2b2a      	cmp	r3, #42	; 0x2a
 8007f28:	d135      	bne.n	8007f96 <_vfiprintf_r+0x1ce>
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	1d1a      	adds	r2, r3, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	9203      	str	r2, [sp, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bfb8      	it	lt
 8007f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f3a:	3402      	adds	r4, #2
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008024 <_vfiprintf_r+0x25c>
 8007f42:	7821      	ldrb	r1, [r4, #0]
 8007f44:	2203      	movs	r2, #3
 8007f46:	4650      	mov	r0, sl
 8007f48:	f7f8 f94a 	bl	80001e0 <memchr>
 8007f4c:	b140      	cbz	r0, 8007f60 <_vfiprintf_r+0x198>
 8007f4e:	2340      	movs	r3, #64	; 0x40
 8007f50:	eba0 000a 	sub.w	r0, r0, sl
 8007f54:	fa03 f000 	lsl.w	r0, r3, r0
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	4303      	orrs	r3, r0
 8007f5c:	3401      	adds	r4, #1
 8007f5e:	9304      	str	r3, [sp, #16]
 8007f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f64:	482c      	ldr	r0, [pc, #176]	; (8008018 <_vfiprintf_r+0x250>)
 8007f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f6a:	2206      	movs	r2, #6
 8007f6c:	f7f8 f938 	bl	80001e0 <memchr>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d03f      	beq.n	8007ff4 <_vfiprintf_r+0x22c>
 8007f74:	4b29      	ldr	r3, [pc, #164]	; (800801c <_vfiprintf_r+0x254>)
 8007f76:	bb1b      	cbnz	r3, 8007fc0 <_vfiprintf_r+0x1f8>
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	3307      	adds	r3, #7
 8007f7c:	f023 0307 	bic.w	r3, r3, #7
 8007f80:	3308      	adds	r3, #8
 8007f82:	9303      	str	r3, [sp, #12]
 8007f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f86:	443b      	add	r3, r7
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8a:	e767      	b.n	8007e5c <_vfiprintf_r+0x94>
 8007f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f90:	460c      	mov	r4, r1
 8007f92:	2001      	movs	r0, #1
 8007f94:	e7a5      	b.n	8007ee2 <_vfiprintf_r+0x11a>
 8007f96:	2300      	movs	r3, #0
 8007f98:	3401      	adds	r4, #1
 8007f9a:	9305      	str	r3, [sp, #20]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f04f 0c0a 	mov.w	ip, #10
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa8:	3a30      	subs	r2, #48	; 0x30
 8007faa:	2a09      	cmp	r2, #9
 8007fac:	d903      	bls.n	8007fb6 <_vfiprintf_r+0x1ee>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0c5      	beq.n	8007f3e <_vfiprintf_r+0x176>
 8007fb2:	9105      	str	r1, [sp, #20]
 8007fb4:	e7c3      	b.n	8007f3e <_vfiprintf_r+0x176>
 8007fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fba:	4604      	mov	r4, r0
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e7f0      	b.n	8007fa2 <_vfiprintf_r+0x1da>
 8007fc0:	ab03      	add	r3, sp, #12
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4b16      	ldr	r3, [pc, #88]	; (8008020 <_vfiprintf_r+0x258>)
 8007fc8:	a904      	add	r1, sp, #16
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7fd fc76 	bl	80058bc <_printf_float>
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	1c78      	adds	r0, r7, #1
 8007fd4:	d1d6      	bne.n	8007f84 <_vfiprintf_r+0x1bc>
 8007fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fd8:	07d9      	lsls	r1, r3, #31
 8007fda:	d405      	bmi.n	8007fe8 <_vfiprintf_r+0x220>
 8007fdc:	89ab      	ldrh	r3, [r5, #12]
 8007fde:	059a      	lsls	r2, r3, #22
 8007fe0:	d402      	bmi.n	8007fe8 <_vfiprintf_r+0x220>
 8007fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fe4:	f7ff f9d0 	bl	8007388 <__retarget_lock_release_recursive>
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	065b      	lsls	r3, r3, #25
 8007fec:	f53f af12 	bmi.w	8007e14 <_vfiprintf_r+0x4c>
 8007ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ff2:	e711      	b.n	8007e18 <_vfiprintf_r+0x50>
 8007ff4:	ab03      	add	r3, sp, #12
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <_vfiprintf_r+0x258>)
 8007ffc:	a904      	add	r1, sp, #16
 8007ffe:	4630      	mov	r0, r6
 8008000:	f7fd ff00 	bl	8005e04 <_printf_i>
 8008004:	e7e4      	b.n	8007fd0 <_vfiprintf_r+0x208>
 8008006:	bf00      	nop
 8008008:	0800853c 	.word	0x0800853c
 800800c:	0800855c 	.word	0x0800855c
 8008010:	0800851c 	.word	0x0800851c
 8008014:	080086d4 	.word	0x080086d4
 8008018:	080086de 	.word	0x080086de
 800801c:	080058bd 	.word	0x080058bd
 8008020:	08007da3 	.word	0x08007da3
 8008024:	080086da 	.word	0x080086da

08008028 <_putc_r>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	460d      	mov	r5, r1
 800802c:	4614      	mov	r4, r2
 800802e:	4606      	mov	r6, r0
 8008030:	b118      	cbz	r0, 800803a <_putc_r+0x12>
 8008032:	6983      	ldr	r3, [r0, #24]
 8008034:	b90b      	cbnz	r3, 800803a <_putc_r+0x12>
 8008036:	f7ff f903 	bl	8007240 <__sinit>
 800803a:	4b1c      	ldr	r3, [pc, #112]	; (80080ac <_putc_r+0x84>)
 800803c:	429c      	cmp	r4, r3
 800803e:	d124      	bne.n	800808a <_putc_r+0x62>
 8008040:	6874      	ldr	r4, [r6, #4]
 8008042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008044:	07d8      	lsls	r0, r3, #31
 8008046:	d405      	bmi.n	8008054 <_putc_r+0x2c>
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	0599      	lsls	r1, r3, #22
 800804c:	d402      	bmi.n	8008054 <_putc_r+0x2c>
 800804e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008050:	f7ff f999 	bl	8007386 <__retarget_lock_acquire_recursive>
 8008054:	68a3      	ldr	r3, [r4, #8]
 8008056:	3b01      	subs	r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	60a3      	str	r3, [r4, #8]
 800805c:	da05      	bge.n	800806a <_putc_r+0x42>
 800805e:	69a2      	ldr	r2, [r4, #24]
 8008060:	4293      	cmp	r3, r2
 8008062:	db1c      	blt.n	800809e <_putc_r+0x76>
 8008064:	b2eb      	uxtb	r3, r5
 8008066:	2b0a      	cmp	r3, #10
 8008068:	d019      	beq.n	800809e <_putc_r+0x76>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	701d      	strb	r5, [r3, #0]
 8008072:	b2ed      	uxtb	r5, r5
 8008074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008076:	07da      	lsls	r2, r3, #31
 8008078:	d405      	bmi.n	8008086 <_putc_r+0x5e>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	059b      	lsls	r3, r3, #22
 800807e:	d402      	bmi.n	8008086 <_putc_r+0x5e>
 8008080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008082:	f7ff f981 	bl	8007388 <__retarget_lock_release_recursive>
 8008086:	4628      	mov	r0, r5
 8008088:	bd70      	pop	{r4, r5, r6, pc}
 800808a:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <_putc_r+0x88>)
 800808c:	429c      	cmp	r4, r3
 800808e:	d101      	bne.n	8008094 <_putc_r+0x6c>
 8008090:	68b4      	ldr	r4, [r6, #8]
 8008092:	e7d6      	b.n	8008042 <_putc_r+0x1a>
 8008094:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <_putc_r+0x8c>)
 8008096:	429c      	cmp	r4, r3
 8008098:	bf08      	it	eq
 800809a:	68f4      	ldreq	r4, [r6, #12]
 800809c:	e7d1      	b.n	8008042 <_putc_r+0x1a>
 800809e:	4629      	mov	r1, r5
 80080a0:	4622      	mov	r2, r4
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7fe f878 	bl	8006198 <__swbuf_r>
 80080a8:	4605      	mov	r5, r0
 80080aa:	e7e3      	b.n	8008074 <_putc_r+0x4c>
 80080ac:	0800853c 	.word	0x0800853c
 80080b0:	0800855c 	.word	0x0800855c
 80080b4:	0800851c 	.word	0x0800851c

080080b8 <_sbrk_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d06      	ldr	r5, [pc, #24]	; (80080d4 <_sbrk_r+0x1c>)
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	f7f9 fbc0 	bl	8001848 <_sbrk>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_sbrk_r+0x1a>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_sbrk_r+0x1a>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	20000448 	.word	0x20000448

080080d8 <__sread>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	460c      	mov	r4, r1
 80080dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e0:	f000 f8e2 	bl	80082a8 <_read_r>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	bfab      	itete	ge
 80080e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080ea:	89a3      	ldrhlt	r3, [r4, #12]
 80080ec:	181b      	addge	r3, r3, r0
 80080ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080f2:	bfac      	ite	ge
 80080f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080f6:	81a3      	strhlt	r3, [r4, #12]
 80080f8:	bd10      	pop	{r4, pc}

080080fa <__swrite>:
 80080fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	461f      	mov	r7, r3
 8008100:	898b      	ldrh	r3, [r1, #12]
 8008102:	05db      	lsls	r3, r3, #23
 8008104:	4605      	mov	r5, r0
 8008106:	460c      	mov	r4, r1
 8008108:	4616      	mov	r6, r2
 800810a:	d505      	bpl.n	8008118 <__swrite+0x1e>
 800810c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008110:	2302      	movs	r3, #2
 8008112:	2200      	movs	r2, #0
 8008114:	f000 f898 	bl	8008248 <_lseek_r>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800811e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	4632      	mov	r2, r6
 8008126:	463b      	mov	r3, r7
 8008128:	4628      	mov	r0, r5
 800812a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	f000 b817 	b.w	8008160 <_write_r>

08008132 <__sseek>:
 8008132:	b510      	push	{r4, lr}
 8008134:	460c      	mov	r4, r1
 8008136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813a:	f000 f885 	bl	8008248 <_lseek_r>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	bf15      	itete	ne
 8008144:	6560      	strne	r0, [r4, #84]	; 0x54
 8008146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800814a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800814e:	81a3      	strheq	r3, [r4, #12]
 8008150:	bf18      	it	ne
 8008152:	81a3      	strhne	r3, [r4, #12]
 8008154:	bd10      	pop	{r4, pc}

08008156 <__sclose>:
 8008156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815a:	f000 b831 	b.w	80081c0 <_close_r>
	...

08008160 <_write_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d07      	ldr	r5, [pc, #28]	; (8008180 <_write_r+0x20>)
 8008164:	4604      	mov	r4, r0
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	2200      	movs	r2, #0
 800816c:	602a      	str	r2, [r5, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f7f9 fb1a 	bl	80017a8 <_write>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_write_r+0x1e>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_write_r+0x1e>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	20000448 	.word	0x20000448

08008184 <__assert_func>:
 8008184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008186:	4614      	mov	r4, r2
 8008188:	461a      	mov	r2, r3
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <__assert_func+0x2c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4605      	mov	r5, r0
 8008190:	68d8      	ldr	r0, [r3, #12]
 8008192:	b14c      	cbz	r4, 80081a8 <__assert_func+0x24>
 8008194:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <__assert_func+0x30>)
 8008196:	9100      	str	r1, [sp, #0]
 8008198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800819c:	4906      	ldr	r1, [pc, #24]	; (80081b8 <__assert_func+0x34>)
 800819e:	462b      	mov	r3, r5
 80081a0:	f000 f81e 	bl	80081e0 <fiprintf>
 80081a4:	f000 f89f 	bl	80082e6 <abort>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__assert_func+0x38>)
 80081aa:	461c      	mov	r4, r3
 80081ac:	e7f3      	b.n	8008196 <__assert_func+0x12>
 80081ae:	bf00      	nop
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	080086e5 	.word	0x080086e5
 80081b8:	080086f2 	.word	0x080086f2
 80081bc:	08008720 	.word	0x08008720

080081c0 <_close_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d06      	ldr	r5, [pc, #24]	; (80081dc <_close_r+0x1c>)
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	f7f9 fb08 	bl	80017e0 <_close>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_close_r+0x1a>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_close_r+0x1a>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20000448 	.word	0x20000448

080081e0 <fiprintf>:
 80081e0:	b40e      	push	{r1, r2, r3}
 80081e2:	b503      	push	{r0, r1, lr}
 80081e4:	4601      	mov	r1, r0
 80081e6:	ab03      	add	r3, sp, #12
 80081e8:	4805      	ldr	r0, [pc, #20]	; (8008200 <fiprintf+0x20>)
 80081ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ee:	6800      	ldr	r0, [r0, #0]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	f7ff fde9 	bl	8007dc8 <_vfiprintf_r>
 80081f6:	b002      	add	sp, #8
 80081f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fc:	b003      	add	sp, #12
 80081fe:	4770      	bx	lr
 8008200:	2000000c 	.word	0x2000000c

08008204 <_fstat_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	; (8008224 <_fstat_r+0x20>)
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	f7f9 faf1 	bl	80017f8 <_fstat>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d102      	bne.n	8008220 <_fstat_r+0x1c>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	b103      	cbz	r3, 8008220 <_fstat_r+0x1c>
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	bf00      	nop
 8008224:	20000448 	.word	0x20000448

08008228 <_isatty_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d06      	ldr	r5, [pc, #24]	; (8008244 <_isatty_r+0x1c>)
 800822c:	2300      	movs	r3, #0
 800822e:	4604      	mov	r4, r0
 8008230:	4608      	mov	r0, r1
 8008232:	602b      	str	r3, [r5, #0]
 8008234:	f7f9 faf0 	bl	8001818 <_isatty>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_isatty_r+0x1a>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	b103      	cbz	r3, 8008242 <_isatty_r+0x1a>
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20000448 	.word	0x20000448

08008248 <_lseek_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d07      	ldr	r5, [pc, #28]	; (8008268 <_lseek_r+0x20>)
 800824c:	4604      	mov	r4, r0
 800824e:	4608      	mov	r0, r1
 8008250:	4611      	mov	r1, r2
 8008252:	2200      	movs	r2, #0
 8008254:	602a      	str	r2, [r5, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	f7f9 fae9 	bl	800182e <_lseek>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d102      	bne.n	8008266 <_lseek_r+0x1e>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	b103      	cbz	r3, 8008266 <_lseek_r+0x1e>
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	20000448 	.word	0x20000448

0800826c <__ascii_mbtowc>:
 800826c:	b082      	sub	sp, #8
 800826e:	b901      	cbnz	r1, 8008272 <__ascii_mbtowc+0x6>
 8008270:	a901      	add	r1, sp, #4
 8008272:	b142      	cbz	r2, 8008286 <__ascii_mbtowc+0x1a>
 8008274:	b14b      	cbz	r3, 800828a <__ascii_mbtowc+0x1e>
 8008276:	7813      	ldrb	r3, [r2, #0]
 8008278:	600b      	str	r3, [r1, #0]
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	1e10      	subs	r0, r2, #0
 800827e:	bf18      	it	ne
 8008280:	2001      	movne	r0, #1
 8008282:	b002      	add	sp, #8
 8008284:	4770      	bx	lr
 8008286:	4610      	mov	r0, r2
 8008288:	e7fb      	b.n	8008282 <__ascii_mbtowc+0x16>
 800828a:	f06f 0001 	mvn.w	r0, #1
 800828e:	e7f8      	b.n	8008282 <__ascii_mbtowc+0x16>

08008290 <__malloc_lock>:
 8008290:	4801      	ldr	r0, [pc, #4]	; (8008298 <__malloc_lock+0x8>)
 8008292:	f7ff b878 	b.w	8007386 <__retarget_lock_acquire_recursive>
 8008296:	bf00      	nop
 8008298:	2000043c 	.word	0x2000043c

0800829c <__malloc_unlock>:
 800829c:	4801      	ldr	r0, [pc, #4]	; (80082a4 <__malloc_unlock+0x8>)
 800829e:	f7ff b873 	b.w	8007388 <__retarget_lock_release_recursive>
 80082a2:	bf00      	nop
 80082a4:	2000043c 	.word	0x2000043c

080082a8 <_read_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_read_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f9 fa59 	bl	800176e <_read>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_read_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_read_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20000448 	.word	0x20000448

080082cc <__ascii_wctomb>:
 80082cc:	b149      	cbz	r1, 80082e2 <__ascii_wctomb+0x16>
 80082ce:	2aff      	cmp	r2, #255	; 0xff
 80082d0:	bf85      	ittet	hi
 80082d2:	238a      	movhi	r3, #138	; 0x8a
 80082d4:	6003      	strhi	r3, [r0, #0]
 80082d6:	700a      	strbls	r2, [r1, #0]
 80082d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80082dc:	bf98      	it	ls
 80082de:	2001      	movls	r0, #1
 80082e0:	4770      	bx	lr
 80082e2:	4608      	mov	r0, r1
 80082e4:	4770      	bx	lr

080082e6 <abort>:
 80082e6:	b508      	push	{r3, lr}
 80082e8:	2006      	movs	r0, #6
 80082ea:	f000 f82b 	bl	8008344 <raise>
 80082ee:	2001      	movs	r0, #1
 80082f0:	f7f9 fa33 	bl	800175a <_exit>

080082f4 <_raise_r>:
 80082f4:	291f      	cmp	r1, #31
 80082f6:	b538      	push	{r3, r4, r5, lr}
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	d904      	bls.n	8008308 <_raise_r+0x14>
 80082fe:	2316      	movs	r3, #22
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	f04f 30ff 	mov.w	r0, #4294967295
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800830a:	b112      	cbz	r2, 8008312 <_raise_r+0x1e>
 800830c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008310:	b94b      	cbnz	r3, 8008326 <_raise_r+0x32>
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f830 	bl	8008378 <_getpid_r>
 8008318:	462a      	mov	r2, r5
 800831a:	4601      	mov	r1, r0
 800831c:	4620      	mov	r0, r4
 800831e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008322:	f000 b817 	b.w	8008354 <_kill_r>
 8008326:	2b01      	cmp	r3, #1
 8008328:	d00a      	beq.n	8008340 <_raise_r+0x4c>
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	d103      	bne.n	8008336 <_raise_r+0x42>
 800832e:	2316      	movs	r3, #22
 8008330:	6003      	str	r3, [r0, #0]
 8008332:	2001      	movs	r0, #1
 8008334:	e7e7      	b.n	8008306 <_raise_r+0x12>
 8008336:	2400      	movs	r4, #0
 8008338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800833c:	4628      	mov	r0, r5
 800833e:	4798      	blx	r3
 8008340:	2000      	movs	r0, #0
 8008342:	e7e0      	b.n	8008306 <_raise_r+0x12>

08008344 <raise>:
 8008344:	4b02      	ldr	r3, [pc, #8]	; (8008350 <raise+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f7ff bfd3 	b.w	80082f4 <_raise_r>
 800834e:	bf00      	nop
 8008350:	2000000c 	.word	0x2000000c

08008354 <_kill_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_kill_r+0x20>)
 8008358:	2300      	movs	r3, #0
 800835a:	4604      	mov	r4, r0
 800835c:	4608      	mov	r0, r1
 800835e:	4611      	mov	r1, r2
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	f7f9 f9ea 	bl	800173a <_kill>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d102      	bne.n	8008370 <_kill_r+0x1c>
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	b103      	cbz	r3, 8008370 <_kill_r+0x1c>
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	bd38      	pop	{r3, r4, r5, pc}
 8008372:	bf00      	nop
 8008374:	20000448 	.word	0x20000448

08008378 <_getpid_r>:
 8008378:	f7f9 b9d7 	b.w	800172a <_getpid>

0800837c <_init>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr

08008388 <_fini>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr
