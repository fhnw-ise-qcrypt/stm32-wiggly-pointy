
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08009340  08009340  00019340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009b3c  08009b3c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b3c  08009b3c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b40  08009b40  00019b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001dc  08009d20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08009d20  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120fb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002559  00000000  00000000  00032307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  000357b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de29  00000000  00000000  00036608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001372b  00000000  00000000  00054431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad1ff  00000000  00000000  00067b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114d5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005228  00000000  00000000  00114dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009324 	.word	0x08009324

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009324 	.word	0x08009324

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f001 fa2f 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f911 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 fb1f 	bl	8001298 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c5a:	f000 f987 	bl	8000f6c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c5e:	f000 f9c3 	bl	8000fe8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000c62:	f000 fae9 	bl	8001238 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000c66:	f000 fa21 	bl	80010ac <MX_TIM14_Init>
  MX_TIM16_Init();
 8000c6a:	f000 fa6d 	bl	8001148 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000c6e:	f000 f9f9 	bl	8001064 <MX_TIM13_Init>
  MX_IWDG_Init();
 8000c72:	f000 f95d 	bl	8000f30 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  MEMS_DRIVER_HV_Disable();
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f001 fd2c 	bl	80026dc <HAL_GPIO_WritePin>

  printf("boink\n");
 8000c84:	486e      	ldr	r0, [pc, #440]	; (8000e40 <main+0x1f8>)
 8000c86:	f005 fcfb 	bl	8006680 <puts>
  HAL_IWDG_Refresh(&hiwdg);
 8000c8a:	486e      	ldr	r0, [pc, #440]	; (8000e44 <main+0x1fc>)
 8000c8c:	f001 fdbf 	bl	800280e <HAL_IWDG_Refresh>

  // start MEMS FCLK_X
  HAL_TIM_Base_Start(&htim14);
 8000c90:	486d      	ldr	r0, [pc, #436]	; (8000e48 <main+0x200>)
 8000c92:	f003 ff95 	bl	8004bc0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim14, TIM_CHANNEL_1);
 8000c96:	2100      	movs	r1, #0
 8000c98:	486b      	ldr	r0, [pc, #428]	; (8000e48 <main+0x200>)
 8000c9a:	f004 f84b 	bl	8004d34 <HAL_TIM_OC_Start>
  //htim14.Instance->CCR1 = 2;

  // start MEMS FCLK_Y
  HAL_TIM_Base_Start(&htim16);
 8000c9e:	486b      	ldr	r0, [pc, #428]	; (8000e4c <main+0x204>)
 8000ca0:	f003 ff8e 	bl	8004bc0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4869      	ldr	r0, [pc, #420]	; (8000e4c <main+0x204>)
 8000ca8:	f004 f844 	bl	8004d34 <HAL_TIM_OC_Start>
  //htim16.Instance->CCR1 = 2;
  HAL_IWDG_Refresh(&hiwdg);
 8000cac:	4865      	ldr	r0, [pc, #404]	; (8000e44 <main+0x1fc>)
 8000cae:	f001 fdae 	bl	800280e <HAL_IWDG_Refresh>

  // @note configure the chip inside the mcp3561_conf.h
  MCP3561_Reset(&hspi1);
 8000cb2:	4867      	ldr	r0, [pc, #412]	; (8000e50 <main+0x208>)
 8000cb4:	f001 f9ea 	bl	800208c <MCP3561_Reset>
  HAL_Delay(10);
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f001 fa5f 	bl	800217c <HAL_Delay>
  MCP3561_Init(&hspi1);
 8000cbe:	4864      	ldr	r0, [pc, #400]	; (8000e50 <main+0x208>)
 8000cc0:	f001 f96e 	bl	8001fa0 <MCP3561_Init>

  HAL_IWDG_Refresh(&hiwdg);
 8000cc4:	485f      	ldr	r0, [pc, #380]	; (8000e44 <main+0x1fc>)
 8000cc6:	f001 fda2 	bl	800280e <HAL_IWDG_Refresh>

  MEMS_DRIVER_Init(&hspi2);
 8000cca:	4862      	ldr	r0, [pc, #392]	; (8000e54 <main+0x20c>)
 8000ccc:	f000 fbb8 	bl	8001440 <MEMS_DRIVER_Init>
  MCP3561_Channels(&hspi1, MCP3561_MUX_CH0, MCP3561_MUX_CH1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	485e      	ldr	r0, [pc, #376]	; (8000e50 <main+0x208>)
 8000cd6:	f001 f943 	bl	8001f60 <MCP3561_Channels>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	485e      	ldr	r0, [pc, #376]	; (8000e58 <main+0x210>)
 8000ce0:	f001 fcfc 	bl	80026dc <HAL_GPIO_WritePin>

  HAL_IWDG_Refresh(&hiwdg);
 8000ce4:	4857      	ldr	r0, [pc, #348]	; (8000e44 <main+0x1fc>)
 8000ce6:	f001 fd92 	bl	800280e <HAL_IWDG_Refresh>
  // prepare ADC stream read request
  spi1_tx_buf[0] = MCP3561_DEVICE_ADDRESS_MASK | 1; // [a a 0 0 0 0 0 1]
 8000cea:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <main+0x214>)
 8000cec:	2241      	movs	r2, #65	; 0x41
 8000cee:	701a      	strb	r2, [r3, #0]

  // read first data (aka. clear any pending DRDY IRQ)
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 fcf0 	bl	80026dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, spi1_tx_buf, spi1_rx_buf, 5, 3);
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2305      	movs	r3, #5
 8000d02:	4a57      	ldr	r2, [pc, #348]	; (8000e60 <main+0x218>)
 8000d04:	4955      	ldr	r1, [pc, #340]	; (8000e5c <main+0x214>)
 8000d06:	4852      	ldr	r0, [pc, #328]	; (8000e50 <main+0x208>)
 8000d08:	f003 fb93 	bl	8004432 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f001 fce2 	bl	80026dc <HAL_GPIO_WritePin>
  flag_new_adc_data = 0;
 8000d18:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <main+0x21c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

  float f,k,Ts,t,sx,sy;
  k=0;
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  f=10;
 8000d24:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <main+0x220>)
 8000d26:	613b      	str	r3, [r7, #16]
  Ts=0.001f;
 8000d28:	4b50      	ldr	r3, [pc, #320]	; (8000e6c <main+0x224>)
 8000d2a:	60fb      	str	r3, [r7, #12]
  t=0;
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  MEMS_DRIVER_HV_Enable();
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f001 fcce 	bl	80026dc <HAL_GPIO_WritePin>

  HAL_IWDG_Refresh(&hiwdg);
 8000d40:	4840      	ldr	r0, [pc, #256]	; (8000e44 <main+0x1fc>)
 8000d42:	f001 fd64 	bl	800280e <HAL_IWDG_Refresh>
  setup_done = true;
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <main+0x228>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(++k >= 1000) k=0;
 8000d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d58:	edc7 7a05 	vstr	s15, [r7, #20]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000e74 <main+0x22c>
 8000d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6c:	db02      	blt.n	8000d74 <main+0x12c>
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
	t = k*Ts;
 8000d74:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d80:	edc7 7a02 	vstr	s15, [r7, #8]
	sx = sinf(2*3.14159*f*t);
 8000d84:	6938      	ldr	r0, [r7, #16]
 8000d86:	f7ff fbdf 	bl	8000548 <__aeabi_f2d>
 8000d8a:	a32b      	add	r3, pc, #172	; (adr r3, 8000e38 <main+0x1f0>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f7ff fc32 	bl	80005f8 <__aeabi_dmul>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4614      	mov	r4, r2
 8000d9a:	461d      	mov	r5, r3
 8000d9c:	68b8      	ldr	r0, [r7, #8]
 8000d9e:	f7ff fbd3 	bl	8000548 <__aeabi_f2d>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4620      	mov	r0, r4
 8000da8:	4629      	mov	r1, r5
 8000daa:	f7ff fc25 	bl	80005f8 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f7ff fef7 	bl	8000ba8 <__aeabi_d2f>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	ee00 3a10 	vmov	s0, r3
 8000dc0:	f007 fd54 	bl	800886c <sinf>
 8000dc4:	ed87 0a01 	vstr	s0, [r7, #4]
	sy = cosf(2*3.14159*f*t);
 8000dc8:	6938      	ldr	r0, [r7, #16]
 8000dca:	f7ff fbbd 	bl	8000548 <__aeabi_f2d>
 8000dce:	a31a      	add	r3, pc, #104	; (adr r3, 8000e38 <main+0x1f0>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fc10 	bl	80005f8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4614      	mov	r4, r2
 8000dde:	461d      	mov	r5, r3
 8000de0:	68b8      	ldr	r0, [r7, #8]
 8000de2:	f7ff fbb1 	bl	8000548 <__aeabi_f2d>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4620      	mov	r0, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	f7ff fc03 	bl	80005f8 <__aeabi_dmul>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fed5 	bl	8000ba8 <__aeabi_d2f>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	ee00 3a10 	vmov	s0, r3
 8000e04:	f007 fcee 	bl	80087e4 <cosf>
 8000e08:	ed87 0a00 	vstr	s0, [r7]

	MEMS_DRIVER_SetAngle(sx, sy);
 8000e0c:	edd7 0a00 	vldr	s1, [r7]
 8000e10:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e14:	f000 fb82 	bl	800151c <MEMS_DRIVER_SetAngle>
	MEMS_DRIVER_Write_Channel(&hspi2);
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <main+0x20c>)
 8000e1a:	f000 fc3d 	bl	8001698 <MEMS_DRIVER_Write_Channel>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <main+0x210>)
 8000e22:	f001 fc73 	bl	800270c <HAL_GPIO_TogglePin>
    HAL_Delay(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f001 f9a8 	bl	800217c <HAL_Delay>

    HAL_IWDG_Refresh(&hiwdg);
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <main+0x1fc>)
 8000e2e:	f001 fcee 	bl	800280e <HAL_IWDG_Refresh>
	if(++k >= 1000) k=0;
 8000e32:	e78b      	b.n	8000d4c <main+0x104>
 8000e34:	f3af 8000 	nop.w
 8000e38:	f01b866e 	.word	0xf01b866e
 8000e3c:	401921f9 	.word	0x401921f9
 8000e40:	08009340 	.word	0x08009340
 8000e44:	200001f8 	.word	0x200001f8
 8000e48:	2000031c 	.word	0x2000031c
 8000e4c:	20000368 	.word	0x20000368
 8000e50:	20000208 	.word	0x20000208
 8000e54:	2000026c 	.word	0x2000026c
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	2000043c 	.word	0x2000043c
 8000e60:	20000444 	.word	0x20000444
 8000e64:	2000045c 	.word	0x2000045c
 8000e68:	41200000 	.word	0x41200000
 8000e6c:	3a83126f 	.word	0x3a83126f
 8000e70:	20000438 	.word	0x20000438
 8000e74:	447a0000 	.word	0x447a0000

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09a      	sub	sp, #104	; 0x68
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e82:	2228      	movs	r2, #40	; 0x28
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f004 ff1a 	bl	8005cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	222c      	movs	r2, #44	; 0x2c
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 ff0c 	bl	8005cc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ea8:	2309      	movs	r3, #9
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000ec8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000ecc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fcac 	bl	8002830 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ede:	f000 faaa 	bl	8001436 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fcd4 	bl	80038ac <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f0a:	f000 fa94 	bl	8001436 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fefd 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f24:	f000 fa87 	bl	8001436 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3768      	adds	r7, #104	; 0x68
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_IWDG_Init+0x34>)
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <MX_IWDG_Init+0x38>)
 8000f38:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_IWDG_Init+0x34>)
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = IWDG_WINDOW_VAL;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_IWDG_Init+0x34>)
 8000f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f46:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = IWDG_COUNTER_VAL;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_IWDG_Init+0x34>)
 8000f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_IWDG_Init+0x34>)
 8000f52:	f001 fc0d 	bl	8002770 <HAL_IWDG_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000f5c:	f000 fa6b 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001f8 	.word	0x200001f8
 8000f68:	40003000 	.word	0x40003000

08000f6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <MX_SPI1_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fba:	2207      	movs	r2, #7
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fcc:	f003 f818 	bl	8004000 <HAL_SPI_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 fa2e 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000208 	.word	0x20000208
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_SPI2_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_SPI2_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_SPI2_Init+0x74>)
 8000ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_SPI2_Init+0x74>)
 8000ffc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001000:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_SPI2_Init+0x74>)
 8001004:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001008:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_SPI2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_SPI2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_SPI2_Init+0x74>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_SPI2_Init+0x74>)
 8001020:	2210      	movs	r2, #16
 8001022:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_SPI2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_SPI2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_SPI2_Init+0x74>)
 8001038:	2207      	movs	r2, #7
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_SPI2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_SPI2_Init+0x74>)
 8001044:	2208      	movs	r2, #8
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_SPI2_Init+0x74>)
 800104a:	f002 ffd9 	bl	8004000 <HAL_SPI_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 f9ef 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000026c 	.word	0x2000026c
 8001060:	40003800 	.word	0x40003800

08001064 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_TIM13_Init+0x40>)
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_TIM13_Init+0x44>)
 800106c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_TIM13_Init+0x40>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_TIM13_Init+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = TIM13_COUNT_PERIOD;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_TIM13_Init+0x40>)
 800107c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001080:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_TIM13_Init+0x40>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_TIM13_Init+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_TIM13_Init+0x40>)
 8001090:	f003 fd46 	bl	8004b20 <HAL_TIM_Base_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800109a:	f000 f9cc 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002d0 	.word	0x200002d0
 80010a8:	40001c00 	.word	0x40001c00

080010ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_TIM14_Init+0x94>)
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <MX_TIM14_Init+0x98>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM14_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM14_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = TIM14_COUNT_PERIOD;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM14_Init+0x94>)
 80010d8:	f640 02ad 	movw	r2, #2221	; 0x8ad
 80010dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM14_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_TIM14_Init+0x94>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010ea:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_TIM14_Init+0x94>)
 80010ec:	f003 fd18 	bl	8004b20 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80010f6:	f000 f99e 	bl	8001436 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_TIM14_Init+0x94>)
 80010fc:	f003 fdc0 	bl	8004c80 <HAL_TIM_OC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001106:	f000 f996 	bl	8001436 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800110a:	2330      	movs	r3, #48	; 0x30
 800110c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM14_Init+0x94>)
 8001122:	f003 fed1 	bl	8004ec8 <HAL_TIM_OC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800112c:	f000 f983 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM14_Init+0x94>)
 8001132:	f000 fccf 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000031c 	.word	0x2000031c
 8001144:	40002000 	.word	0x40002000

08001148 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b090      	sub	sp, #64	; 0x40
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fda9 	bl	8005cc0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <MX_TIM16_Init+0xe8>)
 8001170:	4a30      	ldr	r2, [pc, #192]	; (8001234 <MX_TIM16_Init+0xec>)
 8001172:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <MX_TIM16_Init+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_TIM16_Init+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_COUNT_PERIOD;
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_TIM16_Init+0xe8>)
 8001182:	f640 02ad 	movw	r2, #2221	; 0x8ad
 8001186:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_TIM16_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_TIM16_Init+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_TIM16_Init+0xe8>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119a:	4825      	ldr	r0, [pc, #148]	; (8001230 <MX_TIM16_Init+0xe8>)
 800119c:	f003 fcc0 	bl	8004b20 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80011a6:	f000 f946 	bl	8001436 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80011aa:	4821      	ldr	r0, [pc, #132]	; (8001230 <MX_TIM16_Init+0xe8>)
 80011ac:	f003 fd68 	bl	8004c80 <HAL_TIM_OC_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80011b6:	f000 f93e 	bl	8001436 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80011ba:	2330      	movs	r3, #48	; 0x30
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM16_Init+0xe8>)
 80011e0:	f003 fe72 	bl	8004ec8 <HAL_TIM_OC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80011ea:	f000 f924 	bl	8001436 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM16_Init+0xe8>)
 8001212:	f004 f8cd 	bl	80053b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800121c:	f000 f90b 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM16_Init+0xe8>)
 8001222:	f000 fc57 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8001226:	bf00      	nop
 8001228:	3740      	adds	r7, #64	; 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000368 	.word	0x20000368
 8001234:	40014400 	.word	0x40014400

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <MX_USART2_UART_Init+0x5c>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800127c:	f004 f8ea 	bl	8005454 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001286:	f000 f8d6 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200003b4 	.word	0x200003b4
 8001294:	40004400 	.word	0x40004400

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a4a      	ldr	r2, [pc, #296]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a44      	ldr	r2, [pc, #272]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <MX_GPIO_Init+0x15c>)
 80012fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <MX_GPIO_Init+0x15c>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f001 f9e0 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f244 01c0 	movw	r1, #16576	; 0x40c0
 8001322:	4835      	ldr	r0, [pc, #212]	; (80013f8 <MX_GPIO_Init+0x160>)
 8001324:	f001 f9da 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001328:	2310      	movs	r3, #16
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f001 f851 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_nIRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_nIRQ_Pin;
 8001346:	2302      	movs	r3, #2
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_nIRQ_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4827      	ldr	r0, [pc, #156]	; (80013f8 <MX_GPIO_Init+0x160>)
 800135c:	f001 f844 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	481f      	ldr	r0, [pc, #124]	; (80013f8 <MX_GPIO_Init+0x160>)
 800137a:	f001 f835 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f001 f825 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800139e:	23c0      	movs	r3, #192	; 0xc0
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4810      	ldr	r0, [pc, #64]	; (80013f8 <MX_GPIO_Init+0x160>)
 80013b6:	f001 f817 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <MX_GPIO_Init+0x160>)
 80013d8:	f001 f806 	bl	80023e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2007      	movs	r0, #7
 80013e2:	f000 ffca 	bl	800237a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013e6:	2007      	movs	r0, #7
 80013e8:	f000 ffe3 	bl	80023b2 <HAL_NVIC_EnableIRQ>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140a:	2201      	movs	r2, #1
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <__io_putchar+0x20>)
 800140e:	f004 f86f 	bl	80054f0 <HAL_UART_Transmit>

    return ch;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200003b4 	.word	0x200003b4

08001420 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]

}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143a:	b672      	cpsid	i
}
 800143c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143e:	e7fe      	b.n	800143e <Error_Handler+0x8>

08001440 <MEMS_DRIVER_Init>:
************************************************************************************
*/

#include "mirrorcle_mems_driver.h"

void MEMS_DRIVER_Init(SPI_HandleTypeDef *hspi){
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
   * 2097167 Decimal or 0x20000F to command ENABLE ALL DAC CHANNELS
   * 3145728 Decimal or 0x300000 to command ENABLE SOFTWARE LDAC
   */

  // FULL RESET
  dac_data[0] = 0x28;
 8001448:	2328      	movs	r3, #40	; 0x28
 800144a:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 800144c:	2300      	movs	r3, #0
 800144e:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x01;
 8001450:	2301      	movs	r3, #1
 8001452:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	482f      	ldr	r0, [pc, #188]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 800145c:	f001 f93e 	bl	80026dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001460:	f107 0108 	add.w	r1, r7, #8
 8001464:	2303      	movs	r3, #3
 8001466:	2203      	movs	r2, #3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f002 fe74 	bl	8004156 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001474:	4828      	ldr	r0, [pc, #160]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 8001476:	f001 f931 	bl	80026dc <HAL_GPIO_WritePin>

  // ENABLE INTERNAL REFERENCE
  dac_data[0] = 0x38;
 800147a:	2338      	movs	r3, #56	; 0x38
 800147c:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x01;
 8001482:	2301      	movs	r3, #1
 8001484:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148c:	4822      	ldr	r0, [pc, #136]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 800148e:	f001 f925 	bl	80026dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001492:	f107 0108 	add.w	r1, r7, #8
 8001496:	2303      	movs	r3, #3
 8001498:	2203      	movs	r2, #3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f002 fe5b 	bl	8004156 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 80014a8:	f001 f918 	bl	80026dc <HAL_GPIO_WritePin>

  // ENABLE ALL DAC CHANNELS
  dac_data[0] = 0x20;
 80014ac:	2320      	movs	r3, #32
 80014ae:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x0F;
 80014b4:	230f      	movs	r3, #15
 80014b6:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014be:	4816      	ldr	r0, [pc, #88]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 80014c0:	f001 f90c 	bl	80026dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80014c4:	f107 0108 	add.w	r1, r7, #8
 80014c8:	2303      	movs	r3, #3
 80014ca:	2203      	movs	r2, #3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f002 fe42 	bl	8004156 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d8:	480f      	ldr	r0, [pc, #60]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 80014da:	f001 f8ff 	bl	80026dc <HAL_GPIO_WritePin>

  // ENABLE SOFTWARE LDAC
  dac_data[0] = 0x30;
 80014de:	2330      	movs	r3, #48	; 0x30
 80014e0:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 80014f2:	f001 f8f3 	bl	80026dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	2303      	movs	r3, #3
 80014fc:	2203      	movs	r2, #3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f002 fe29 	bl	8004156 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <MEMS_DRIVER_Init+0xd8>)
 800150c:	f001 f8e6 	bl	80026dc <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	48000400 	.word	0x48000400

0800151c <MEMS_DRIVER_SetAngle>:

void MEMS_DRIVER_SetAngle(float phi_x, float phi_y){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	ed87 0a01 	vstr	s0, [r7, #4]
 8001526:	edc7 0a00 	vstr	s1, [r7]
	/* @todo calibrate angle to voltage */
	if(phi_x > ( MEMS_MIRROR_ANGLE_MAX_X)) phi_x = ( MEMS_MIRROR_ANGLE_MAX_X);
 800152a:	edd7 7a01 	vldr	s15, [r7, #4]
 800152e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001658 <MEMS_DRIVER_SetAngle+0x13c>
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd01      	ble.n	8001540 <MEMS_DRIVER_SetAngle+0x24>
 800153c:	4b47      	ldr	r3, [pc, #284]	; (800165c <MEMS_DRIVER_SetAngle+0x140>)
 800153e:	607b      	str	r3, [r7, #4]
	if(phi_x < (-MEMS_MIRROR_ANGLE_MAX_X)) phi_x = (-MEMS_MIRROR_ANGLE_MAX_X);
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001660 <MEMS_DRIVER_SetAngle+0x144>
 8001548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d501      	bpl.n	8001556 <MEMS_DRIVER_SetAngle+0x3a>
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <MEMS_DRIVER_SetAngle+0x148>)
 8001554:	607b      	str	r3, [r7, #4]
	if(phi_y > ( MEMS_MIRROR_ANGLE_MAX_Y)) phi_y = ( MEMS_MIRROR_ANGLE_MAX_Y);
 8001556:	edd7 7a00 	vldr	s15, [r7]
 800155a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001668 <MEMS_DRIVER_SetAngle+0x14c>
 800155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	dd01      	ble.n	800156c <MEMS_DRIVER_SetAngle+0x50>
 8001568:	4b40      	ldr	r3, [pc, #256]	; (800166c <MEMS_DRIVER_SetAngle+0x150>)
 800156a:	603b      	str	r3, [r7, #0]
	if(phi_y < (-MEMS_MIRROR_ANGLE_MAX_Y)) phi_y = (-MEMS_MIRROR_ANGLE_MAX_Y);
 800156c:	edd7 7a00 	vldr	s15, [r7]
 8001570:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001670 <MEMS_DRIVER_SetAngle+0x154>
 8001574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	d501      	bpl.n	8001582 <MEMS_DRIVER_SetAngle+0x66>
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <MEMS_DRIVER_SetAngle+0x158>)
 8001580:	603b      	str	r3, [r7, #0]

	// Equations: see Datasheet p. 31

	MEMS_DAC_ch_A = (uint32_t) (MEMS_VBIAS_CODE + ( phi_x*MEMS_DRIVER_VGAIN*65535/MEMS_DRIVER_MAX_V) );
 8001582:	edd7 7a01 	vldr	s15, [r7, #4]
 8001586:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001678 <MEMS_DRIVER_SetAngle+0x15c>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800167c <MEMS_DRIVER_SetAngle+0x160>
 8001592:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001596:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001680 <MEMS_DRIVER_SetAngle+0x164>
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001684 <MEMS_DRIVER_SetAngle+0x168>
 80015a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015aa:	ee17 3a90 	vmov	r3, s15
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <MEMS_DRIVER_SetAngle+0x16c>)
 80015b2:	801a      	strh	r2, [r3, #0]
	MEMS_DAC_ch_B = (uint32_t) (MEMS_VBIAS_CODE - ( phi_x*MEMS_DRIVER_VGAIN*65535/MEMS_DRIVER_MAX_V) );
 80015b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001678 <MEMS_DRIVER_SetAngle+0x15c>
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800167c <MEMS_DRIVER_SetAngle+0x160>
 80015c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015c8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001680 <MEMS_DRIVER_SetAngle+0x164>
 80015cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001684 <MEMS_DRIVER_SetAngle+0x168>
 80015d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015dc:	ee17 3a90 	vmov	r3, s15
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <MEMS_DRIVER_SetAngle+0x170>)
 80015e4:	801a      	strh	r2, [r3, #0]
	MEMS_DAC_ch_C = (uint32_t) (MEMS_VBIAS_CODE + ( phi_y*MEMS_DRIVER_VGAIN*65535/MEMS_DRIVER_MAX_V) );
 80015e6:	edd7 7a00 	vldr	s15, [r7]
 80015ea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001678 <MEMS_DRIVER_SetAngle+0x15c>
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800167c <MEMS_DRIVER_SetAngle+0x160>
 80015f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015fa:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001680 <MEMS_DRIVER_SetAngle+0x164>
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001684 <MEMS_DRIVER_SetAngle+0x168>
 8001606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MEMS_DRIVER_SetAngle+0x174>)
 8001616:	801a      	strh	r2, [r3, #0]
	MEMS_DAC_ch_D = (uint32_t) (MEMS_VBIAS_CODE - ( phi_y*MEMS_DRIVER_VGAIN*65535/MEMS_DRIVER_MAX_V) );
 8001618:	edd7 7a00 	vldr	s15, [r7]
 800161c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001678 <MEMS_DRIVER_SetAngle+0x15c>
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001624:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800167c <MEMS_DRIVER_SetAngle+0x160>
 8001628:	ee27 7a87 	vmul.f32	s14, s15, s14
 800162c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001680 <MEMS_DRIVER_SetAngle+0x164>
 8001630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001634:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001684 <MEMS_DRIVER_SetAngle+0x168>
 8001638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MEMS_DRIVER_SetAngle+0x178>)
 8001648:	801a      	strh	r2, [r3, #0]

}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	3f835dcc 	.word	0x3f835dcc
 800165c:	3f835dcc 	.word	0x3f835dcc
 8001660:	bf835dcc 	.word	0xbf835dcc
 8001664:	bf835dcc 	.word	0xbf835dcc
 8001668:	3f86c227 	.word	0x3f86c227
 800166c:	3f86c227 	.word	0x3f86c227
 8001670:	bf86c227 	.word	0xbf86c227
 8001674:	bf86c227 	.word	0xbf86c227
 8001678:	42800000 	.word	0x42800000
 800167c:	477fff00 	.word	0x477fff00
 8001680:	43480000 	.word	0x43480000
 8001684:	46cc6000 	.word	0x46cc6000
 8001688:	2000045e 	.word	0x2000045e
 800168c:	20000460 	.word	0x20000460
 8001690:	20000462 	.word	0x20000462
 8001694:	20000464 	.word	0x20000464

08001698 <MEMS_DRIVER_Write_Channel>:

void MEMS_DRIVER_Write_Channel(SPI_HandleTypeDef *hspi){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	/* @author: Michael Taylor
	 * @brief Check that max and min voltage levels will not be exceeded. Clamp if they are.
	 * */

	if(MEMS_DAC_ch_A > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way +x
 80016a0:	4b79      	ldr	r3, [pc, #484]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d908      	bls.n	80016be <MEMS_DRIVER_Write_Channel+0x26>
	  MEMS_DAC_ch_A = MEMS_DRIVER_MAX_DAC_WRITE;
 80016ac:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80016b0:	4b75      	ldr	r3, [pc, #468]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 80016b2:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_B = MEMS_DRIVER_MIN_DAC_WRITE;
 80016b4:	f240 1247 	movw	r2, #327	; 0x147
 80016b8:	4b74      	ldr	r3, [pc, #464]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	e00d      	b.n	80016da <MEMS_DRIVER_Write_Channel+0x42>
	} else if(MEMS_DAC_ch_A < MEMS_DRIVER_MIN_DAC_WRITE){
 80016be:	4b72      	ldr	r3, [pc, #456]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	f240 1247 	movw	r2, #327	; 0x147
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d207      	bcs.n	80016da <MEMS_DRIVER_Write_Channel+0x42>
	  MEMS_DAC_ch_A = MEMS_DRIVER_MIN_DAC_WRITE;
 80016ca:	f240 1247 	movw	r2, #327	; 0x147
 80016ce:	4b6e      	ldr	r3, [pc, #440]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 80016d0:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_B = MEMS_DRIVER_MAX_DAC_WRITE;
 80016d2:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80016d6:	4b6d      	ldr	r3, [pc, #436]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 80016d8:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_A over / under volt
	if(MEMS_DAC_ch_B > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way -x
 80016da:	4b6c      	ldr	r3, [pc, #432]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d908      	bls.n	80016f8 <MEMS_DRIVER_Write_Channel+0x60>
	  MEMS_DAC_ch_B = MEMS_DRIVER_MAX_DAC_WRITE;
 80016e6:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80016ea:	4b68      	ldr	r3, [pc, #416]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 80016ec:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_A = MEMS_DRIVER_MIN_DAC_WRITE;
 80016ee:	f240 1247 	movw	r2, #327	; 0x147
 80016f2:	4b65      	ldr	r3, [pc, #404]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	e00d      	b.n	8001714 <MEMS_DRIVER_Write_Channel+0x7c>
	} else if(MEMS_DAC_ch_B < MEMS_DRIVER_MIN_DAC_WRITE){
 80016f8:	4b64      	ldr	r3, [pc, #400]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	f240 1247 	movw	r2, #327	; 0x147
 8001700:	4293      	cmp	r3, r2
 8001702:	d207      	bcs.n	8001714 <MEMS_DRIVER_Write_Channel+0x7c>
	  MEMS_DAC_ch_B = MEMS_DRIVER_MIN_DAC_WRITE;
 8001704:	f240 1247 	movw	r2, #327	; 0x147
 8001708:	4b60      	ldr	r3, [pc, #384]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 800170a:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_A = MEMS_DRIVER_MAX_DAC_WRITE;
 800170c:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001710:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 8001712:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_B over / under volt
	if(MEMS_DAC_ch_C > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way +y
 8001714:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	f64c 3285 	movw	r2, #52101	; 0xcb85
 800171c:	4293      	cmp	r3, r2
 800171e:	d908      	bls.n	8001732 <MEMS_DRIVER_Write_Channel+0x9a>
	  MEMS_DAC_ch_C = MEMS_DRIVER_MAX_DAC_WRITE;
 8001720:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001726:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_D = MEMS_DRIVER_MIN_DAC_WRITE;
 8001728:	f240 1247 	movw	r2, #327	; 0x147
 800172c:	4b59      	ldr	r3, [pc, #356]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	e00d      	b.n	800174e <MEMS_DRIVER_Write_Channel+0xb6>
	} else if(MEMS_DAC_ch_C < MEMS_DRIVER_MIN_DAC_WRITE){
 8001732:	4b57      	ldr	r3, [pc, #348]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	f240 1247 	movw	r2, #327	; 0x147
 800173a:	4293      	cmp	r3, r2
 800173c:	d207      	bcs.n	800174e <MEMS_DRIVER_Write_Channel+0xb6>
	  MEMS_DAC_ch_C = MEMS_DRIVER_MIN_DAC_WRITE;
 800173e:	f240 1247 	movw	r2, #327	; 0x147
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001744:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_D = MEMS_DRIVER_MAX_DAC_WRITE;
 8001746:	f64c 3285 	movw	r2, #52101	; 0xcb85
 800174a:	4b52      	ldr	r3, [pc, #328]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 800174c:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_C over / under volt
	if(MEMS_DAC_ch_D > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way -y
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001756:	4293      	cmp	r3, r2
 8001758:	d908      	bls.n	800176c <MEMS_DRIVER_Write_Channel+0xd4>
	  MEMS_DAC_ch_D = MEMS_DRIVER_MAX_DAC_WRITE;
 800175a:	f64c 3285 	movw	r2, #52101	; 0xcb85
 800175e:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 8001760:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_C = MEMS_DRIVER_MIN_DAC_WRITE;
 8001762:	f240 1247 	movw	r2, #327	; 0x147
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001768:	801a      	strh	r2, [r3, #0]
 800176a:	e00d      	b.n	8001788 <MEMS_DRIVER_Write_Channel+0xf0>
	} else if(MEMS_DAC_ch_D < MEMS_DRIVER_MIN_DAC_WRITE){
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f240 1247 	movw	r2, #327	; 0x147
 8001774:	4293      	cmp	r3, r2
 8001776:	d207      	bcs.n	8001788 <MEMS_DRIVER_Write_Channel+0xf0>
	  MEMS_DAC_ch_D = MEMS_DRIVER_MIN_DAC_WRITE;
 8001778:	f240 1247 	movw	r2, #327	; 0x147
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 800177e:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_C = MEMS_DRIVER_MAX_DAC_WRITE;
 8001780:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001784:	4b42      	ldr	r3, [pc, #264]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001786:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_D over / under volt

	// 0b 0001 1000; // write to and update (C = 011) channel A DAC (A = 000), first 2 bits dont care.
	cmd[0] = 0x18;
 8001788:	2318      	movs	r3, #24
 800178a:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_A >> 8;   // uint16_t high byte
 800178c:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	b29b      	uxth	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_A & 0xff; // uint16_t low  byte
 8001798:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a6:	483c      	ldr	r0, [pc, #240]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 80017a8:	f000 ff98 	bl	80026dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80017ac:	f107 010c 	add.w	r1, r7, #12
 80017b0:	2303      	movs	r3, #3
 80017b2:	2203      	movs	r2, #3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f002 fcce 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c0:	4835      	ldr	r0, [pc, #212]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 80017c2:	f000 ff8b 	bl	80026dc <HAL_GPIO_WritePin>

	// 0b 0b0001 1001; // write to and update (C = 011) channel B DAC (B = 001), first 2 bits dont care.
	cmd[0] = 0x19;
 80017c6:	2319      	movs	r3, #25
 80017c8:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_B >> 8;   // uint16_t high byte
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_B & 0xff; // uint16_t low  byte
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <MEMS_DRIVER_Write_Channel+0x1f4>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e4:	482c      	ldr	r0, [pc, #176]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 80017e6:	f000 ff79 	bl	80026dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80017ea:	f107 010c 	add.w	r1, r7, #12
 80017ee:	2303      	movs	r3, #3
 80017f0:	2203      	movs	r2, #3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f002 fcaf 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fe:	4826      	ldr	r0, [pc, #152]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 8001800:	f000 ff6c 	bl	80026dc <HAL_GPIO_WritePin>

	// 0b 0001 1010; // write to and update (C = 011) channel C DAC (B = 010), first 2 bits dont care.
	cmd[0] = 0x1A;
 8001804:	231a      	movs	r3, #26
 8001806:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_C >> 8;   // uint16_t high byte
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	b29b      	uxth	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_C & 0xff; // uint16_t low  byte
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001822:	481d      	ldr	r0, [pc, #116]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 8001824:	f000 ff5a 	bl	80026dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	2303      	movs	r3, #3
 800182e:	2203      	movs	r2, #3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f002 fc90 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183c:	4816      	ldr	r0, [pc, #88]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 800183e:	f000 ff4d 	bl	80026dc <HAL_GPIO_WritePin>

	// 0b 0001 1011; // write to and update (C = 011) channel D DAC (B = 011), first 2 bits dont care.
	cmd[0] = 0x1B;
 8001842:	231b      	movs	r3, #27
 8001844:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_D >> 8;   // uint16_t high byte
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_D & 0xff; // uint16_t low  byte
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MEMS_DRIVER_Write_Channel+0x1fc>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 8001862:	f000 ff3b 	bl	80026dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001866:	f107 010c 	add.w	r1, r7, #12
 800186a:	2303      	movs	r3, #3
 800186c:	2203      	movs	r2, #3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f002 fc71 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <MEMS_DRIVER_Write_Channel+0x200>)
 800187c:	f000 ff2e 	bl	80026dc <HAL_GPIO_WritePin>

}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000045e 	.word	0x2000045e
 800188c:	20000460 	.word	0x20000460
 8001890:	20000462 	.word	0x20000462
 8001894:	20000464 	.word	0x20000464
 8001898:	48000400 	.word	0x48000400

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_MspInit+0x44>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_MspInit+0x44>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6193      	str	r3, [r2, #24]
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_MspInit+0x44>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_MspInit+0x44>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x44>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x44>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	; 0x38
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_SPI_MspInit+0x14c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d145      	bne.n	8001992 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001906:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 800190c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001910:	6193      	str	r3, [r2, #24]
 8001912:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4a3e      	ldr	r2, [pc, #248]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6153      	str	r3, [r2, #20]
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800194e:	2360      	movs	r3, #96	; 0x60
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800195e:	2305      	movs	r3, #5
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f000 fd3c 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001970:	2301      	movs	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001980:	2305      	movs	r3, #5
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	482b      	ldr	r0, [pc, #172]	; (8001a38 <HAL_SPI_MspInit+0x154>)
 800198c:	f000 fd2c 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001990:	e04a      	b.n	8001a28 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <HAL_SPI_MspInit+0x158>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d145      	bne.n	8001a28 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a6:	61d3      	str	r3, [r2, #28]
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	4a1e      	ldr	r2, [pc, #120]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019be:	6153      	str	r3, [r2, #20]
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019d6:	6153      	str	r3, [r2, #20]
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_SPI_MspInit+0x150>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f6:	2305      	movs	r3, #5
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <HAL_SPI_MspInit+0x154>)
 8001a02:	f000 fcf1 	bl	80023e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a18:	2305      	movs	r3, #5
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <HAL_SPI_MspInit+0x15c>)
 8001a24:	f000 fce0 	bl	80023e8 <HAL_GPIO_Init>
}
 8001a28:	bf00      	nop
 8001a2a:	3738      	adds	r7, #56	; 0x38
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013000 	.word	0x40013000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	40003800 	.word	0x40003800
 8001a40:	48000c00 	.word	0x48000c00

08001a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <HAL_TIM_Base_MspInit+0x80>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10c      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a6e:	e022      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <HAL_TIM_Base_MspInit+0x88>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10c      	bne.n	8001a94 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
}
 8001a92:	e010      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_Base_MspInit+0x84>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40001c00 	.word	0x40001c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40002000 	.word	0x40002000
 8001ad0:	40014400 	.word	0x40014400

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_TIM_MspPostInit+0xb0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11e      	bne.n	8001b34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_TIM_MspPostInit+0xb4>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <HAL_TIM_MspPostInit+0xb4>)
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_TIM_MspPostInit+0xb4>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = FCLK_X_Pin;
 8001b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001b20:	2309      	movs	r3, #9
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_X_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f000 fc5b 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001b32:	e022      	b.n	8001b7a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM16)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_TIM_MspPostInit+0xb8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d11d      	bne.n	8001b7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_TIM_MspPostInit+0xb4>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_TIM_MspPostInit+0xb4>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6153      	str	r3, [r2, #20]
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_TIM_MspPostInit+0xb4>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FCLK_Y_Pin;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_Y_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f000 fc37 	bl	80023e8 <HAL_GPIO_Init>
}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40002000 	.word	0x40002000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40014400 	.word	0x40014400

08001b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_UART_MspInit+0x7c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d128      	bne.n	8001c04 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_UART_MspInit+0x80>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_UART_MspInit+0x80>)
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_UART_MspInit+0x80>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_UART_MspInit+0x80>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <HAL_UART_MspInit+0x80>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6153      	str	r3, [r2, #20]
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_UART_MspInit+0x80>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001be2:	230c      	movs	r3, #12
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c00:	f000 fbf2 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40004400 	.word	0x40004400
 8001c10:	40021000 	.word	0x40021000

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <NMI_Handler+0x4>

08001c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <MemManage_Handler+0x4>

08001c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 fa6c 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  static uint8_t channel_id = 0;
  static uint32_t value = 0;
  //static float volt = 0.0f;
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	4823      	ldr	r0, [pc, #140]	; (8001d00 <EXTI1_IRQHandler+0x98>)
 8001c72:	f000 fd4b 	bl	800270c <HAL_GPIO_TogglePin>

  /* @todo HAL_SPI_TransmitReceive() is a BLOCKING function
   * it SHOULD NOT BE USED IN AN INTERRUPT
   * but HAL_SPI_TransmitReceive_IT() is just kind of broken ?? */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2110      	movs	r1, #16
 8001c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7e:	f000 fd2d 	bl	80026dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, spi1_tx_buf, spi1_rx_buf, 5, 3);
 8001c82:	2303      	movs	r3, #3
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2305      	movs	r3, #5
 8001c88:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <EXTI1_IRQHandler+0x9c>)
 8001c8a:	491f      	ldr	r1, [pc, #124]	; (8001d08 <EXTI1_IRQHandler+0xa0>)
 8001c8c:	481f      	ldr	r0, [pc, #124]	; (8001d0c <EXTI1_IRQHandler+0xa4>)
 8001c8e:	f002 fbd0 	bl	8004432 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001c92:	2201      	movs	r2, #1
 8001c94:	2110      	movs	r1, #16
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f000 fd1f 	bl	80026dc <HAL_GPIO_WritePin>

  channel_id = MCP3564_SCAN_ID_TO_CHANNEL[ (spi1_rx_buf[1] >> 4) & 0x0f ];
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <EXTI1_IRQHandler+0x9c>)
 8001ca0:	785b      	ldrb	r3, [r3, #1]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <EXTI1_IRQHandler+0xa8>)
 8001cac:	5cd2      	ldrb	r2, [r2, r3]
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <EXTI1_IRQHandler+0xac>)
 8001cb0:	701a      	strb	r2, [r3, #0]
  if(channel_id <= 4){
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <EXTI1_IRQHandler+0xac>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d81b      	bhi.n	8001cf2 <EXTI1_IRQHandler+0x8a>
	  value = (spi1_rx_buf[2] << 16) | (spi1_rx_buf[3] << 8) | spi1_rx_buf[4];
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <EXTI1_IRQHandler+0x9c>)
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	041a      	lsls	r2, r3, #16
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <EXTI1_IRQHandler+0x9c>)
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <EXTI1_IRQHandler+0x9c>)
 8001cca:	7912      	ldrb	r2, [r2, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <EXTI1_IRQHandler+0xb0>)
 8001cd2:	601a      	str	r2, [r3, #0]
	  adc_channels[channel_id] = value;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <EXTI1_IRQHandler+0xac>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <EXTI1_IRQHandler+0xb0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <EXTI1_IRQHandler+0xb4>)
 8001ce0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	  if(channel_id == 3) flag_new_adc_data = 1;  // only update once a SCAN cycle is complete
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <EXTI1_IRQHandler+0xac>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d102      	bne.n	8001cf2 <EXTI1_IRQHandler+0x8a>
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <EXTI1_IRQHandler+0xb8>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_nIRQ_Pin);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f000 fd24 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	48000400 	.word	0x48000400
 8001d04:	20000444 	.word	0x20000444
 8001d08:	2000043c 	.word	0x2000043c
 8001d0c:	20000208 	.word	0x20000208
 8001d10:	08009348 	.word	0x08009348
 8001d14:	20000466 	.word	0x20000466
 8001d18:	20000468 	.word	0x20000468
 8001d1c:	2000044c 	.word	0x2000044c
 8001d20:	2000045c 	.word	0x2000045c

08001d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_kill>:

int _kill(int pid, int sig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d3e:	f003 ff95 	bl	8005c6c <__errno>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2216      	movs	r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
	return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_exit>:

void _exit (int status)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffe7 	bl	8001d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d66:	e7fe      	b.n	8001d66 <_exit+0x12>

08001d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e00a      	b.n	8001d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d7a:	f3af 8000 	nop.w
 8001d7e:	4601      	mov	r1, r0
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	b2ca      	uxtb	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf0      	blt.n	8001d7a <_read+0x12>
	}

return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e009      	b.n	8001dc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fb1d 	bl	80013fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbf1      	blt.n	8001db4 <_write+0x12>
	}
	return len;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_close>:

int _close(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e02:	605a      	str	r2, [r3, #4]
	return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_isatty>:

int _isatty(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
	return 1;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
	return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f003 fefa 	bl	8005c6c <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20008000 	.word	0x20008000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	2000046c 	.word	0x2000046c
 8001eac:	20000488 	.word	0x20000488

08001eb0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eda:	490e      	ldr	r1, [pc, #56]	; (8001f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001edc:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <LoopForever+0xe>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef0:	4c0b      	ldr	r4, [pc, #44]	; (8001f20 <LoopForever+0x16>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001efe:	f7ff ffd7 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f02:	f003 feb9 	bl	8005c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f06:	f7fe fe9f 	bl	8000c48 <main>

08001f0a <LoopForever>:

LoopForever:
    b LoopForever
 8001f0a:	e7fe      	b.n	8001f0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f18:	08009b44 	.word	0x08009b44
  ldr r2, =_sbss
 8001f1c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f20:	20000484 	.word	0x20000484

08001f24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC1_IRQHandler>

08001f26 <_MCP3561_write>:

#include "main.h"
#include "mcp3564.h"
#include "mcp3564_conf.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	4613      	mov	r3, r2
 8001f32:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2110      	movs	r1, #16
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3c:	f000 fbce 	bl	80026dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	2303      	movs	r3, #3
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f002 f905 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2110      	movs	r1, #16
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f000 fbc2 	bl	80026dc <HAL_GPIO_WritePin>
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <MCP3561_Channels>:
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
	return reg8[1];
}

void MCP3561_Channels(SPI_HandleTypeDef *hspi, uint8_t ch_p, uint8_t ch_n){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd[4] = {0,0,0,0};
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
	cmd[0]  = MCP3561_MUX_WRITE;
 8001f74:	235a      	movs	r3, #90	; 0x5a
 8001f76:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (ch_p << 4) | ch_n;   // [7..4] VIN+ / [3..0] VIN-
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	b25a      	sxtb	r2, r3
 8001f7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	737b      	strb	r3, [r7, #13]
	//cmd[1]  = (MCP3561_MUX_CH_IntTemp_P << 4) | MCP3561_MUX_CH_IntTemp_M;   // [7..4] VIN+ / [3..0] VIN-
	_MCP3561_write(hspi, cmd, 2);
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffc7 	bl	8001f26 <_MCP3561_write>
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]

	// 8-bit CONFIG registers
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 8001fac:	2346      	movs	r3, #70	; 0x46
 8001fae:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG0;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001fb4:	f107 0308 	add.w	r3, r7, #8
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ffb2 	bl	8001f26 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 8001fc2:	234a      	movs	r3, #74	; 0x4a
 8001fc4:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG1;
 8001fc6:	231c      	movs	r3, #28
 8001fc8:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	2202      	movs	r2, #2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa7 	bl	8001f26 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 8001fd8:	234e      	movs	r3, #78	; 0x4e
 8001fda:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG2;
 8001fdc:	2388      	movs	r3, #136	; 0x88
 8001fde:	727b      	strb	r3, [r7, #9]
	cmd[1] += 3; // last two bits must always be '11'
 8001fe0:	7a7b      	ldrb	r3, [r7, #9]
 8001fe2:	3303      	adds	r3, #3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	2202      	movs	r2, #2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff98 	bl	8001f26 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8001ff6:	2352      	movs	r3, #82	; 0x52
 8001ff8:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG3;
 8001ffa:	23f0      	movs	r3, #240	; 0xf0
 8001ffc:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	2202      	movs	r2, #2
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff8d 	bl	8001f26 <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 800200c:	2356      	movs	r3, #86	; 0x56
 800200e:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_IRQ_REG;
 8002010:	2306      	movs	r3, #6
 8002012:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	2202      	movs	r2, #2
 800201a:	4619      	mov	r1, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff82 	bl	8001f26 <_MCP3561_write>
	// configure SCAN mode to automatically cycle through channels
	// only available for MCP3562 and MCP3564, and only for certain input combinations
	// @see Datasheet Table 5-14 on p. 54
	#ifdef MCP3561_USERCONF_SCAN_ENABLE
		uint32_t reg_val;
		reg_val = MCP3561_USERCONF_SCAN_REG;
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MCP3561_Init+0xe4>)
 8002024:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_SCAN_WRITE;
 8002026:	235e      	movs	r3, #94	; 0x5e
 8002028:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	b2db      	uxtb	r3, r3
 8002030:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	b2db      	uxtb	r3, r3
 8002038:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	2204      	movs	r2, #4
 8002046:	4619      	mov	r1, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff6c 	bl	8001f26 <_MCP3561_write>

		reg_val = MCP3561_USERCONF_TIMER_VAL;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MCP3561_Init+0xe8>)
 8002050:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_TIMER_WRITE;
 8002052:	2362      	movs	r3, #98	; 0x62
 8002054:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b2db      	uxtb	r3, r3
 8002064:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	2204      	movs	r2, #4
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff56 	bl	8001f26 <_MCP3561_write>
	#endif

}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	00e00f00 	.word	0x00e00f00
 8002088:	001267ce 	.word	0x001267ce

0800208c <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8002094:	237a      	movs	r3, #122	; 0x7a
 8002096:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 8002098:	f107 010f 	add.w	r1, r7, #15
 800209c:	230a      	movs	r3, #10
 800209e:	2201      	movs	r2, #1
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f002 f858 	bl	8004156 <HAL_SPI_Transmit>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_Init+0x28>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_Init+0x28>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 f94f 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f000 f808 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f7ff fbe6 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x54>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x58>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f967 	bl	80023ce <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d80a      	bhi.n	8002126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f000 f92f 	bl	800237a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_InitTick+0x5c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000000 	.word	0x20000000
 8002134:	20000008 	.word	0x20000008
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008
 8002160:	20000470 	.word	0x20000470

08002164 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;  
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000470 	.word	0x20000470

0800217c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff ffee 	bl	8002164 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d005      	beq.n	80021a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_Delay+0x44>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021a2:	bf00      	nop
 80021a4:	f7ff ffde 	bl	8002164 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f7      	bhi.n	80021a4 <HAL_Delay+0x28>
  {
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000008 	.word	0x20000008

080021c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <__NVIC_EnableIRQ+0x38>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d301      	bcc.n	8002336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002332:	2301      	movs	r3, #1
 8002334:	e00f      	b.n	8002356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <SysTick_Config+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233e:	210f      	movs	r1, #15
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f7ff ff8e 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <SysTick_Config+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SysTick_Config+0x40>)
 8002350:	2207      	movs	r2, #7
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff29 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800238c:	f7ff ff3e 	bl	800220c <__NVIC_GetPriorityGrouping>
 8002390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff8e 	bl	80022b8 <NVIC_EncodePriority>
 800239c:	4602      	mov	r2, r0
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff5d 	bl	8002264 <__NVIC_SetPriority>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff31 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffa2 	bl	8002320 <SysTick_Config>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f6:	e154      	b.n	80026a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8146 	beq.w	800269c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d005      	beq.n	8002428 <HAL_GPIO_Init+0x40>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d130      	bne.n	800248a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245e:	2201      	movs	r2, #1
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0201 	and.w	r2, r3, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b03      	cmp	r3, #3
 8002494:	d017      	beq.n	80024c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d123      	bne.n	800251a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	6939      	ldr	r1, [r7, #16]
 8002516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0203 	and.w	r2, r3, #3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80a0 	beq.w	800269c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255c:	4b58      	ldr	r3, [pc, #352]	; (80026c0 <HAL_GPIO_Init+0x2d8>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a57      	ldr	r2, [pc, #348]	; (80026c0 <HAL_GPIO_Init+0x2d8>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <HAL_GPIO_Init+0x2d8>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002574:	4a53      	ldr	r2, [pc, #332]	; (80026c4 <HAL_GPIO_Init+0x2dc>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3302      	adds	r3, #2
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800259e:	d019      	beq.n	80025d4 <HAL_GPIO_Init+0x1ec>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_GPIO_Init+0x2e0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d013      	beq.n	80025d0 <HAL_GPIO_Init+0x1e8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2e4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00d      	beq.n	80025cc <HAL_GPIO_Init+0x1e4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a47      	ldr	r2, [pc, #284]	; (80026d0 <HAL_GPIO_Init+0x2e8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d007      	beq.n	80025c8 <HAL_GPIO_Init+0x1e0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a46      	ldr	r2, [pc, #280]	; (80026d4 <HAL_GPIO_Init+0x2ec>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_GPIO_Init+0x1dc>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e008      	b.n	80025d6 <HAL_GPIO_Init+0x1ee>
 80025c4:	2305      	movs	r3, #5
 80025c6:	e006      	b.n	80025d6 <HAL_GPIO_Init+0x1ee>
 80025c8:	2303      	movs	r3, #3
 80025ca:	e004      	b.n	80025d6 <HAL_GPIO_Init+0x1ee>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e002      	b.n	80025d6 <HAL_GPIO_Init+0x1ee>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_GPIO_Init+0x1ee>
 80025d4:	2300      	movs	r3, #0
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	f002 0203 	and.w	r2, r2, #3
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	4093      	lsls	r3, r2
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025e6:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_GPIO_Init+0x2dc>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f4:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002618:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f aea3 	bne.w	80023f8 <HAL_GPIO_Init+0x10>
  }
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	48000400 	.word	0x48000400
 80026cc:	48000800 	.word	0x48000800
 80026d0:	48000c00 	.word	0x48000c00
 80026d4:	48001000 	.word	0x48001000
 80026d8:	40010400 	.word	0x40010400

080026dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026f8:	e002      	b.n	8002700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	041a      	lsls	r2, r3, #16
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	43d9      	mvns	r1, r3
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	400b      	ands	r3, r1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fe5e 	bl	8001420 <HAL_GPIO_EXTI_Callback>
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e041      	b.n	8002806 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800278a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f245 5255 	movw	r2, #21845	; 0x5555
 8002794:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6852      	ldr	r2, [r2, #4]
 800279e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6892      	ldr	r2, [r2, #8]
 80027a8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80027aa:	f7ff fcdb 	bl	8002164 <HAL_GetTick>
 80027ae:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027b0:	e00f      	b.n	80027d2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80027b2:	f7ff fcd7 	bl	8002164 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b27      	cmp	r3, #39	; 0x27
 80027be:	d908      	bls.n	80027d2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e019      	b.n	8002806 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e8      	bne.n	80027b2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d005      	beq.n	80027fa <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	e004      	b.n	8002804 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800281e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002836:	af00      	add	r7, sp, #0
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002840:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f001 b823 	b.w	800389c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 817d 	beq.w	8002b66 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800286c:	4bbc      	ldr	r3, [pc, #752]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b04      	cmp	r3, #4
 8002876:	d00c      	beq.n	8002892 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002878:	4bb9      	ldr	r3, [pc, #740]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d15c      	bne.n	800293e <HAL_RCC_OscConfig+0x10e>
 8002884:	4bb6      	ldr	r3, [pc, #728]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002890:	d155      	bne.n	800293e <HAL_RCC_OscConfig+0x10e>
 8002892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002896:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0x94>
 80028be:	4ba8      	ldr	r3, [pc, #672]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e015      	b.n	80028f0 <HAL_RCC_OscConfig+0xc0>
 80028c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80028d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80028e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80028ec:	4b9c      	ldr	r3, [pc, #624]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80028f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002904:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002908:	fab2 f282 	clz	r2, r2
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f042 0220 	orr.w	r2, r2, #32
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f002 021f 	and.w	r2, r2, #31
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 811f 	beq.w	8002b64 <HAL_RCC_OscConfig+0x334>
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 8116 	bne.w	8002b64 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	f000 bfaf 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x12e>
 8002950:	4b83      	ldr	r3, [pc, #524]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a82      	ldr	r2, [pc, #520]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e036      	b.n	80029cc <HAL_RCC_OscConfig+0x19c>
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x158>
 800296e:	4b7c      	ldr	r3, [pc, #496]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7b      	ldr	r2, [pc, #492]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b79      	ldr	r3, [pc, #484]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a78      	ldr	r2, [pc, #480]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e021      	b.n	80029cc <HAL_RCC_OscConfig+0x19c>
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x184>
 800299a:	4b71      	ldr	r3, [pc, #452]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a70      	ldr	r2, [pc, #448]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b6e      	ldr	r3, [pc, #440]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6d      	ldr	r2, [pc, #436]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x19c>
 80029b4:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a69      	ldr	r2, [pc, #420]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a66      	ldr	r2, [pc, #408]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029cc:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f023 020f 	bic.w	r2, r3, #15
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	495f      	ldr	r1, [pc, #380]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d059      	beq.n	8002aaa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7ff fbb5 	bl	8002164 <HAL_GetTick>
 80029fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff fbb0 	bl	8002164 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b64      	cmp	r3, #100	; 0x64
 8002a0e:	d902      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	f000 bf43 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
 8002a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0x218>
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e015      	b.n	8002a74 <HAL_RCC_OscConfig+0x244>
 8002a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a60:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a70:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a78:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a8c:	fab2 f282 	clz	r2, r2
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f002 021f 	and.w	r2, r2, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ab      	beq.n	8002a00 <HAL_RCC_OscConfig+0x1d0>
 8002aa8:	e05d      	b.n	8002b66 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff fb5b 	bl	8002164 <HAL_GetTick>
 8002aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fb56 	bl	8002164 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d902      	bls.n	8002aca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	f000 bee9 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
 8002aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ace:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ade:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_OscConfig+0x2cc>
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e015      	b.n	8002b28 <HAL_RCC_OscConfig+0x2f8>
 8002afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b00:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b14:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_RCC_OscConfig+0x330>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b30:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b3c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f042 0220 	orr.w	r2, r2, #32
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f002 021f 	and.w	r2, r2, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ab      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x284>
 8002b5c:	e003      	b.n	8002b66 <HAL_RCC_OscConfig+0x336>
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 817d 	beq.w	8002e76 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b7c:	4ba6      	ldr	r3, [pc, #664]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b88:	4ba3      	ldr	r3, [pc, #652]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d172      	bne.n	8002c7a <HAL_RCC_OscConfig+0x44a>
 8002b94:	4ba0      	ldr	r3, [pc, #640]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d16c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x44a>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002bb2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d102      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x3a0>
 8002bca:	4b93      	ldr	r3, [pc, #588]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	e013      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c8>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002be8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002bf4:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002bfe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c02:	fa92 f2a2 	rbit	r2, r2
 8002c06:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c0a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0220 	orr.w	r2, r2, #32
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCC_OscConfig+0x410>
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f000 be2e 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	21f8      	movs	r1, #248	; 0xf8
 8002c56:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c5e:	fa91 f1a1 	rbit	r1, r1
 8002c62:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c66:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c6a:	fab1 f181 	clz	r1, r1
 8002c6e:	b2c9      	uxtb	r1, r1
 8002c70:	408b      	lsls	r3, r1
 8002c72:	4969      	ldr	r1, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c78:	e0fd      	b.n	8002e76 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8088 	beq.w	8002d9c <HAL_RCC_OscConfig+0x56c>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fa54 	bl	8002164 <HAL_GetTick>
 8002cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7ff fa4f 	bl	8002164 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	f000 bde2 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002cea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4d8>
 8002d02:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e013      	b.n	8002d30 <HAL_RCC_OscConfig+0x500>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d20:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2202      	movs	r2, #2
 8002d32:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d36:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d3a:	fa92 f2a2 	rbit	r2, r2
 8002d3e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d42:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f042 0220 	orr.w	r2, r2, #32
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f002 021f 	and.w	r2, r2, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0af      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	21f8      	movs	r1, #248	; 0xf8
 8002d78:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d80:	fa91 f1a1 	rbit	r1, r1
 8002d84:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d88:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d8c:	fab1 f181 	clz	r1, r1
 8002d90:	b2c9      	uxtb	r1, r1
 8002d92:	408b      	lsls	r3, r1
 8002d94:	4920      	ldr	r1, [pc, #128]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
 8002d9a:	e06c      	b.n	8002e76 <HAL_RCC_OscConfig+0x646>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff f9cc 	bl	8002164 <HAL_GetTick>
 8002dcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7ff f9c7 	bl	8002164 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	f000 bd5a 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
 8002de8:	2302      	movs	r3, #2
 8002dea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d104      	bne.n	8002e1c <HAL_RCC_OscConfig+0x5ec>
 8002e12:	4b01      	ldr	r3, [pc, #4]	; (8002e18 <HAL_RCC_OscConfig+0x5e8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e015      	b.n	8002e44 <HAL_RCC_OscConfig+0x614>
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e2e:	2302      	movs	r3, #2
 8002e30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e40:	4bc8      	ldr	r3, [pc, #800]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2202      	movs	r2, #2
 8002e46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e4e:	fa92 f2a2 	rbit	r2, r2
 8002e52:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e56:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f042 0220 	orr.w	r2, r2, #32
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f002 021f 	and.w	r2, r2, #31
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ad      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8110 	beq.w	80030ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d079      	beq.n	8002f90 <HAL_RCC_OscConfig+0x760>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4bab      	ldr	r3, [pc, #684]	; (8003168 <HAL_RCC_OscConfig+0x938>)
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff f94d 	bl	8002164 <HAL_GetTick>
 8002eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7ff f948 	bl	8002164 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d902      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	f000 bcdb 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f00:	2202      	movs	r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f24:	2202      	movs	r2, #2
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	fa93 f2a3 	rbit	r2, r3
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f40:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 8002f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	6019      	str	r1, [r3, #0]
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f1a3 	rbit	r1, r3
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f66:	6019      	str	r1, [r3, #0]
  return result;
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0a0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x6a0>
 8002f8e:	e08d      	b.n	80030ac <HAL_RCC_OscConfig+0x87c>
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fb2:	601a      	str	r2, [r3, #0]
  return result;
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fbc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x938>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7ff f8c7 	bl	8002164 <HAL_GetTick>
 8002fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7ff f8c2 	bl	8002164 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d902      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	f000 bc55 	b.w	800389c <HAL_RCC_OscConfig+0x106c>
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800301e:	2202      	movs	r2, #2
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003042:	2202      	movs	r2, #2
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800305c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 8003060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800306a:	2102      	movs	r1, #2
 800306c:	6019      	str	r1, [r3, #0]
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f1a3 	rbit	r1, r3
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003084:	6019      	str	r1, [r3, #0]
  return result;
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d197      	bne.n	8002fdc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 81a1 	beq.w	8003404 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d116      	bne.n	8003102 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4a22      	ldr	r2, [pc, #136]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030de:	61d3      	str	r3, [r2, #28]
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_RCC_OscConfig+0x93c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11a      	bne.n	8003144 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310e:	4b17      	ldr	r3, [pc, #92]	; (800316c <HAL_RCC_OscConfig+0x93c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_RCC_OscConfig+0x93c>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7ff f823 	bl	8002164 <HAL_GetTick>
 800311e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	e009      	b.n	8003138 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003124:	f7ff f81e 	bl	8002164 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	; 0x64
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e3b1      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_RCC_OscConfig+0x93c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ef      	beq.n	8003124 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10d      	bne.n	8003170 <HAL_RCC_OscConfig+0x940>
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4a02      	ldr	r2, [pc, #8]	; (8003164 <HAL_RCC_OscConfig+0x934>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6213      	str	r3, [r2, #32]
 8003160:	e03c      	b.n	80031dc <HAL_RCC_OscConfig+0x9ac>
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	10908120 	.word	0x10908120
 800316c:	40007000 	.word	0x40007000
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10c      	bne.n	800319a <HAL_RCC_OscConfig+0x96a>
 8003180:	4bc1      	ldr	r3, [pc, #772]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4ac0      	ldr	r2, [pc, #768]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	4bbe      	ldr	r3, [pc, #760]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4abd      	ldr	r2, [pc, #756]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 8003192:	f023 0304 	bic.w	r3, r3, #4
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e020      	b.n	80031dc <HAL_RCC_OscConfig+0x9ac>
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x994>
 80031aa:	4bb7      	ldr	r3, [pc, #732]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4ab6      	ldr	r2, [pc, #728]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6213      	str	r3, [r2, #32]
 80031b6:	4bb4      	ldr	r3, [pc, #720]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4ab3      	ldr	r2, [pc, #716]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0x9ac>
 80031c4:	4bb0      	ldr	r3, [pc, #704]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4aaf      	ldr	r2, [pc, #700]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	4bad      	ldr	r3, [pc, #692]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4aac      	ldr	r2, [pc, #688]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8081 	beq.w	80032f0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe ffb9 	bl	8002164 <HAL_GetTick>
 80031f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe ffb4 	bl	8002164 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e345      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003218:	2202      	movs	r2, #2
 800321a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800323c:	2202      	movs	r2, #2
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	fa93 f2a3 	rbit	r2, r3
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003256:	601a      	str	r2, [r3, #0]
  return result;
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003260:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d102      	bne.n	800327c <HAL_RCC_OscConfig+0xa4c>
 8003276:	4b84      	ldr	r3, [pc, #528]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	e013      	b.n	80032a4 <HAL_RCC_OscConfig+0xa74>
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003284:	2202      	movs	r2, #2
 8003286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	fa93 f2a3 	rbit	r2, r3
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	4b79      	ldr	r3, [pc, #484]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80032ac:	2102      	movs	r1, #2
 80032ae:	6011      	str	r1, [r2, #0]
 80032b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	fa92 f1a2 	rbit	r1, r2
 80032be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032c6:	6011      	str	r1, [r2, #0]
  return result;
 80032c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032cc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	fab2 f282 	clz	r2, r2
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f002 021f 	and.w	r2, r2, #31
 80032e2:	2101      	movs	r1, #1
 80032e4:	fa01 f202 	lsl.w	r2, r1, r2
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d084      	beq.n	80031f8 <HAL_RCC_OscConfig+0x9c8>
 80032ee:	e07f      	b.n	80033f0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f0:	f7fe ff38 	bl	8002164 <HAL_GetTick>
 80032f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	e00b      	b.n	8003312 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe ff33 	bl	8002164 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e2c4      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800331a:	2202      	movs	r2, #2
 800331c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003358:	601a      	str	r2, [r3, #0]
  return result;
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003362:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d102      	bne.n	800337e <HAL_RCC_OscConfig+0xb4e>
 8003378:	4b43      	ldr	r3, [pc, #268]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	e013      	b.n	80033a6 <HAL_RCC_OscConfig+0xb76>
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003386:	2202      	movs	r2, #2
 8003388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	4b39      	ldr	r3, [pc, #228]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80033ae:	2102      	movs	r1, #2
 80033b0:	6011      	str	r1, [r2, #0]
 80033b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	fa92 f1a2 	rbit	r1, r2
 80033c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80033c8:	6011      	str	r1, [r2, #0]
  return result;
 80033ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	fab2 f282 	clz	r2, r2
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f002 021f 	and.w	r2, r2, #31
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d184      	bne.n	80032fa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003402:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8242 	beq.w	800389a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_RCC_OscConfig+0xc58>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	f000 8213 	beq.w	800384a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2b02      	cmp	r3, #2
 8003432:	f040 8162 	bne.w	80036fa <HAL_RCC_OscConfig+0xeca>
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800343e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	fa93 f2a3 	rbit	r2, r3
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800345a:	601a      	str	r2, [r3, #0]
  return result;
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003464:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003470:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	461a      	mov	r2, r3
 8003478:	2300      	movs	r3, #0
 800347a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fe72 	bl	8002164 <HAL_GetTick>
 8003480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003484:	e00c      	b.n	80034a0 <HAL_RCC_OscConfig+0xc70>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fe6a 	bl	8002164 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1fd      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034c4:	601a      	str	r2, [r3, #0]
  return result;
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d102      	bne.n	80034ea <HAL_RCC_OscConfig+0xcba>
 80034e4:	4bb0      	ldr	r3, [pc, #704]	; (80037a8 <HAL_RCC_OscConfig+0xf78>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e027      	b.n	800353a <HAL_RCC_OscConfig+0xd0a>
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f2a3 	rbit	r2, r3
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	4b9c      	ldr	r3, [pc, #624]	; (80037a8 <HAL_RCC_OscConfig+0xf78>)
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003542:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003546:	6011      	str	r1, [r2, #0]
 8003548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	fa92 f1a2 	rbit	r1, r2
 8003556:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800355a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800355e:	6011      	str	r1, [r2, #0]
  return result;
 8003560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003564:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	fab2 f282 	clz	r2, r2
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f042 0220 	orr.w	r2, r2, #32
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	f002 021f 	and.w	r2, r2, #31
 800357a:	2101      	movs	r1, #1
 800357c:	fa01 f202 	lsl.w	r2, r1, r2
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d182      	bne.n	800348c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0xf78>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	430b      	orrs	r3, r1
 80035a8:	497f      	ldr	r1, [pc, #508]	; (80037a8 <HAL_RCC_OscConfig+0xf78>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	fa93 f2a3 	rbit	r2, r3
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80035d2:	601a      	str	r2, [r3, #0]
  return result;
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80035dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	461a      	mov	r2, r3
 80035f0:	2301      	movs	r3, #1
 80035f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fdb6 	bl	8002164 <HAL_GetTick>
 80035f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035fc:	e009      	b.n	8003612 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fdb1 	bl	8002164 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e144      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800361a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f2a3 	rbit	r2, r3
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003636:	601a      	str	r2, [r3, #0]
  return result;
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003640:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HAL_RCC_OscConfig+0xe2c>
 8003656:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <HAL_RCC_OscConfig+0xf78>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	e027      	b.n	80036ac <HAL_RCC_OscConfig+0xe7c>
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	fa93 f2a3 	rbit	r2, r3
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800368a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_OscConfig+0xf78>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80036b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	fa92 f1a2 	rbit	r1, r2
 80036c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80036d0:	6011      	str	r1, [r2, #0]
  return result;
 80036d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f042 0220 	orr.w	r2, r2, #32
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f002 021f 	and.w	r2, r2, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d082      	beq.n	80035fe <HAL_RCC_OscConfig+0xdce>
 80036f8:	e0cf      	b.n	800389a <HAL_RCC_OscConfig+0x106a>
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003702:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800371e:	601a      	str	r2, [r3, #0]
  return result;
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003728:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	461a      	mov	r2, r3
 800373c:	2300      	movs	r3, #0
 800373e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fe fd10 	bl	8002164 <HAL_GetTick>
 8003744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003748:	e009      	b.n	800375e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe fd0b 	bl	8002164 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e09e      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800376a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003782:	601a      	str	r2, [r3, #0]
  return result;
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800378c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d104      	bne.n	80037ac <HAL_RCC_OscConfig+0xf7c>
 80037a2:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <HAL_RCC_OscConfig+0xf78>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	e029      	b.n	80037fc <HAL_RCC_OscConfig+0xfcc>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80037da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f2a3 	rbit	r2, r3
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_OscConfig+0x1078>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003800:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003804:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	fa92 f1a2 	rbit	r1, r2
 8003818:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800381c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003820:	6011      	str	r1, [r2, #0]
  return result;
 8003822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003826:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	fab2 f282 	clz	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f042 0220 	orr.w	r2, r2, #32
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	f002 021f 	and.w	r2, r2, #31
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d180      	bne.n	800374a <HAL_RCC_OscConfig+0xf1a>
 8003848:	e027      	b.n	800389a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e01e      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x1078>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003866:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800386a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	429a      	cmp	r2, r3
 800387c:	d10b      	bne.n	8003896 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800387e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003882:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000

080038ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b09e      	sub	sp, #120	; 0x78
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e162      	b.n	8003b8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c4:	4b90      	ldr	r3, [pc, #576]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d910      	bls.n	80038f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b8d      	ldr	r3, [pc, #564]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 0207 	bic.w	r2, r3, #7
 80038da:	498b      	ldr	r1, [pc, #556]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b89      	ldr	r3, [pc, #548]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e14a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b82      	ldr	r3, [pc, #520]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	497f      	ldr	r1, [pc, #508]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80dc 	beq.w	8003ad8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d13c      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xf6>
 8003928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800392c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003938:	fab3 f383 	clz	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d102      	bne.n	8003952 <HAL_RCC_ClockConfig+0xa6>
 800394c:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	e00f      	b.n	8003972 <HAL_RCC_ClockConfig+0xc6>
 8003952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003956:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	667b      	str	r3, [r7, #100]	; 0x64
 8003960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003964:	663b      	str	r3, [r7, #96]	; 0x60
 8003966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800396e:	4b67      	ldr	r3, [pc, #412]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003976:	65ba      	str	r2, [r7, #88]	; 0x58
 8003978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397a:	fa92 f2a2 	rbit	r2, r2
 800397e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003982:	fab2 f282 	clz	r2, r2
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	f042 0220 	orr.w	r2, r2, #32
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	f002 021f 	and.w	r2, r2, #31
 8003992:	2101      	movs	r1, #1
 8003994:	fa01 f202 	lsl.w	r2, r1, r2
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d17b      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0f3      	b.n	8003b8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d13c      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x178>
 80039aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x128>
 80039ce:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	e00f      	b.n	80039f4 <HAL_RCC_ClockConfig+0x148>
 80039d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	647b      	str	r3, [r7, #68]	; 0x44
 80039e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e6:	643b      	str	r3, [r7, #64]	; 0x40
 80039e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f0:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80039fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039fc:	fa92 f2a2 	rbit	r2, r2
 8003a00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f042 0220 	orr.w	r2, r2, #32
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f002 021f 	and.w	r2, r2, #31
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d13a      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b2      	b.n	8003b8a <HAL_RCC_ClockConfig+0x2de>
 8003a24:	2302      	movs	r3, #2
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x1a0>
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	e00d      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1bc>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	2302      	movs	r3, #2
 8003a5a:	623b      	str	r3, [r7, #32]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2202      	movs	r2, #2
 8003a6a:	61ba      	str	r2, [r7, #24]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	fa92 f2a2 	rbit	r2, r2
 8003a72:	617a      	str	r2, [r7, #20]
  return result;
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	fab2 f282 	clz	r2, r2
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	f042 0220 	orr.w	r2, r2, #32
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	f002 021f 	and.w	r2, r2, #31
 8003a86:	2101      	movs	r1, #1
 8003a88:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e079      	b.n	8003b8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	491a      	ldr	r1, [pc, #104]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fb5c 	bl	8002164 <HAL_GetTick>
 8003aac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fe fb58 	bl	8002164 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e061      	b.n	8003b8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d214      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4906      	ldr	r1, [pc, #24]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e040      	b.n	8003b8a <HAL_RCC_ClockConfig+0x2de>
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <HAL_RCC_ClockConfig+0x2e8>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	491a      	ldr	r1, [pc, #104]	; (8003b94 <HAL_RCC_ClockConfig+0x2e8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <HAL_RCC_ClockConfig+0x2e8>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4912      	ldr	r1, [pc, #72]	; (8003b94 <HAL_RCC_ClockConfig+0x2e8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b4e:	f000 f829 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b52:	4601      	mov	r1, r0
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_RCC_ClockConfig+0x2e8>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b5c:	22f0      	movs	r2, #240	; 0xf0
 8003b5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	fa92 f2a2 	rbit	r2, r2
 8003b66:	60fa      	str	r2, [r7, #12]
  return result;
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	fab2 f282 	clz	r2, r2
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	40d3      	lsrs	r3, r2
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x2ec>)
 8003b74:	5cd3      	ldrb	r3, [r2, r3]
 8003b76:	fa21 f303 	lsr.w	r3, r1, r3
 8003b7a:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <HAL_RCC_ClockConfig+0x2f0>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_RCC_ClockConfig+0x2f4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe faaa 	bl	80020dc <HAL_InitTick>
  
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3778      	adds	r7, #120	; 0x78
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	08009358 	.word	0x08009358
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b08b      	sub	sp, #44	; 0x2c
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003bbe:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x36>
 8003bd2:	e03c      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bd6:	623b      	str	r3, [r7, #32]
      break;
 8003bd8:	e03c      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003be0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003be4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	fa92 f2a2 	rbit	r2, r2
 8003bec:	607a      	str	r2, [r7, #4]
  return result;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	fab2 f282 	clz	r2, r2
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	40d3      	lsrs	r3, r2
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003bfe:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	220f      	movs	r2, #15
 8003c08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	fa92 f2a2 	rbit	r2, r2
 8003c10:	60fa      	str	r2, [r7, #12]
  return result;
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	fab2 f282 	clz	r2, r2
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	40d3      	lsrs	r3, r2
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c2c:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	e004      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	623b      	str	r3, [r7, #32]
      break;
 8003c4c:	e002      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c50:	623b      	str	r3, [r7, #32]
      break;
 8003c52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	372c      	adds	r7, #44	; 0x2c
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	007a1200 	.word	0x007a1200
 8003c6c:	08009370 	.word	0x08009370
 8003c70:	08009380 	.word	0x08009380
 8003c74:	003d0900 	.word	0x003d0900

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c96:	f7ff ffef 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ca4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ca8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	fa92 f2a2 	rbit	r2, r2
 8003cb0:	603a      	str	r2, [r7, #0]
  return result;
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	fab2 f282 	clz	r2, r2
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	40d3      	lsrs	r3, r2
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	08009368 	.word	0x08009368

08003cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003cda:	f7ff ffcd 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cde:	4601      	mov	r1, r0
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ce8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003cec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	fa92 f2a2 	rbit	r2, r2
 8003cf4:	603a      	str	r2, [r7, #0]
  return result;
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	fab2 f282 	clz	r2, r2
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	40d3      	lsrs	r3, r2
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	08009368 	.word	0x08009368

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b092      	sub	sp, #72	; 0x48
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80d4 	beq.w	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3c:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10e      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a4a      	ldr	r2, [pc, #296]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	61d3      	str	r3, [r2, #28]
 8003d54:	4b48      	ldr	r3, [pc, #288]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b45      	ldr	r3, [pc, #276]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d118      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d72:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7e:	f7fe f9f1 	bl	8002164 <HAL_GetTick>
 8003d82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	e008      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fe f9ed 	bl	8002164 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d901      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e12d      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8084 	beq.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d07c      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc4:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	461a      	mov	r2, r3
 8003dee:	2301      	movs	r3, #1
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	461a      	mov	r2, r3
 8003e12:	2300      	movs	r3, #0
 8003e14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e16:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04b      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe f99d 	bl	8002164 <HAL_GetTick>
 8003e2a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fe f999 	bl	8002164 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0d7      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003e44:	2302      	movs	r3, #2
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e50:	2302      	movs	r3, #2
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d108      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e72:	4b01      	ldr	r3, [pc, #4]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	e00d      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	10908100 	.word	0x10908100
 8003e84:	2302      	movs	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	4b5a      	ldr	r3, [pc, #360]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	2202      	movs	r2, #2
 8003e96:	613a      	str	r2, [r7, #16]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	fa92 f2a2 	rbit	r2, r2
 8003e9e:	60fa      	str	r2, [r7, #12]
  return result;
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	fab2 f282 	clz	r2, r2
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	f002 021f 	and.w	r2, r2, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0b7      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ebe:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	494c      	ldr	r1, [pc, #304]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ed0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed8:	4b48      	ldr	r3, [pc, #288]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	4a47      	ldr	r2, [pc, #284]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f023 0203 	bic.w	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	493f      	ldr	r1, [pc, #252]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f0e:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4938      	ldr	r1, [pc, #224]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f2c:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4930      	ldr	r1, [pc, #192]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4a:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f023 0210 	bic.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4929      	ldr	r1, [pc, #164]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	4921      	ldr	r1, [pc, #132]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f023 0220 	bic.w	r2, r3, #32
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	491a      	ldr	r1, [pc, #104]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4912      	ldr	r1, [pc, #72]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	490b      	ldr	r1, [pc, #44]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3748      	adds	r7, #72	; 0x48
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000

08004000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e09d      	b.n	800414e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d108      	bne.n	800402c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004022:	d009      	beq.n	8004038 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	61da      	str	r2, [r3, #28]
 800402a:	e005      	b.n	8004038 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fd fc46 	bl	80018e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004078:	d902      	bls.n	8004080 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e002      	b.n	8004086 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004084:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800408e:	d007      	beq.n	80040a0 <HAL_SPI_Init+0xa0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	ea42 0103 	orr.w	r1, r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	f003 0204 	and.w	r2, r3, #4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800411c:	ea42 0103 	orr.w	r1, r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b088      	sub	sp, #32
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_SPI_Transmit+0x22>
 8004174:	2302      	movs	r3, #2
 8004176:	e158      	b.n	800442a <HAL_SPI_Transmit+0x2d4>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004180:	f7fd fff0 	bl	8002164 <HAL_GetTick>
 8004184:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d002      	beq.n	800419c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	77fb      	strb	r3, [r7, #31]
    goto error;
 800419a:	e13d      	b.n	8004418 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_Transmit+0x52>
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041ac:	e134      	b.n	8004418 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2203      	movs	r2, #3
 80041b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f8:	d10f      	bne.n	800421a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004208:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004218:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d007      	beq.n	8004238 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004240:	d94b      	bls.n	80042da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_Transmit+0xfa>
 800424a:	8afb      	ldrh	r3, [r7, #22]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d13e      	bne.n	80042ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	881a      	ldrh	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004274:	e02b      	b.n	80042ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b02      	cmp	r3, #2
 8004282:	d112      	bne.n	80042aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042a8:	e011      	b.n	80042ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042aa:	f7fd ff5b 	bl	8002164 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d803      	bhi.n	80042c2 <HAL_SPI_Transmit+0x16c>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d102      	bne.n	80042c8 <HAL_SPI_Transmit+0x172>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042cc:	e0a4      	b.n	8004418 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ce      	bne.n	8004276 <HAL_SPI_Transmit+0x120>
 80042d8:	e07c      	b.n	80043d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_SPI_Transmit+0x192>
 80042e2:	8afb      	ldrh	r3, [r7, #22]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d170      	bne.n	80043ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d912      	bls.n	8004318 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	881a      	ldrh	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	1c9a      	adds	r2, r3, #2
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b02      	subs	r3, #2
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004316:	e058      	b.n	80043ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800433e:	e044      	b.n	80043ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d12b      	bne.n	80043a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d912      	bls.n	800437e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b02      	subs	r3, #2
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800437c:	e025      	b.n	80043ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	7812      	ldrb	r2, [r2, #0]
 800438a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043a4:	e011      	b.n	80043ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a6:	f7fd fedd 	bl	8002164 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d803      	bhi.n	80043be <HAL_SPI_Transmit+0x268>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d102      	bne.n	80043c4 <HAL_SPI_Transmit+0x26e>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043c8:	e026      	b.n	8004418 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1b5      	bne.n	8004340 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fb5b 	bl	8004a94 <SPI_EndRxTxTransaction>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e000      	b.n	8004418 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004428:	7ffb      	ldrb	r3, [r7, #31]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b08a      	sub	sp, #40	; 0x28
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004440:	2301      	movs	r3, #1
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x26>
 8004454:	2302      	movs	r3, #2
 8004456:	e1fb      	b.n	8004850 <HAL_SPI_TransmitReceive+0x41e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004460:	f7fd fe80 	bl	8002164 <HAL_GetTick>
 8004464:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800446c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800447c:	7efb      	ldrb	r3, [r7, #27]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d00e      	beq.n	80044a0 <HAL_SPI_TransmitReceive+0x6e>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004488:	d106      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x66>
 8004492:	7efb      	ldrb	r3, [r7, #27]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d003      	beq.n	80044a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004498:	2302      	movs	r3, #2
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800449e:	e1cd      	b.n	800483c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0x80>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0x80>
 80044ac:	887b      	ldrh	r3, [r7, #2]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80044b8:	e1c0      	b.n	800483c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d003      	beq.n	80044ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2205      	movs	r2, #5
 80044ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	887a      	ldrh	r2, [r7, #2]
 80044de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	887a      	ldrh	r2, [r7, #2]
 80044e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	887a      	ldrh	r2, [r7, #2]
 80044fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004510:	d802      	bhi.n	8004518 <HAL_SPI_TransmitReceive+0xe6>
 8004512:	8a3b      	ldrh	r3, [r7, #16]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d908      	bls.n	800452a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	e007      	b.n	800453a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004538:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d007      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004560:	d97c      	bls.n	800465c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_SPI_TransmitReceive+0x13e>
 800456a:	8a7b      	ldrh	r3, [r7, #18]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d169      	bne.n	8004644 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	881a      	ldrh	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004594:	e056      	b.n	8004644 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d11b      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x1aa>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d016      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x1aa>
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d113      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d11c      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x1f2>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	b292      	uxth	r2, r2
 8004602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004620:	2301      	movs	r3, #1
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004624:	f7fd fd9e 	bl	8002164 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004630:	429a      	cmp	r2, r3
 8004632:	d807      	bhi.n	8004644 <HAL_SPI_TransmitReceive+0x212>
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d003      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004642:	e0fb      	b.n	800483c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1a3      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x164>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d19d      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x164>
 800465a:	e0df      	b.n	800481c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_SPI_TransmitReceive+0x23a>
 8004664:	8a7b      	ldrh	r3, [r7, #18]
 8004666:	2b01      	cmp	r3, #1
 8004668:	f040 80cb 	bne.w	8004802 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d912      	bls.n	800469c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	881a      	ldrh	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b02      	subs	r3, #2
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	87da      	strh	r2, [r3, #62]	; 0x3e
 800469a:	e0b2      	b.n	8004802 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c2:	e09e      	b.n	8004802 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d134      	bne.n	800473c <HAL_SPI_TransmitReceive+0x30a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02f      	beq.n	800473c <HAL_SPI_TransmitReceive+0x30a>
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d12c      	bne.n	800473c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d912      	bls.n	8004712 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	1c9a      	adds	r2, r3, #2
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b02      	subs	r3, #2
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004710:	e012      	b.n	8004738 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d148      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x3aa>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d042      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d923      	bls.n	80047aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	b292      	uxth	r2, r2
 800476e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b02      	subs	r3, #2
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d81f      	bhi.n	80047d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	e016      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f103 020c 	add.w	r2, r3, #12
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047d8:	2301      	movs	r3, #1
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047dc:	f7fd fcc2 	bl	8002164 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d803      	bhi.n	80047f4 <HAL_SPI_TransmitReceive+0x3c2>
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d102      	bne.n	80047fa <HAL_SPI_TransmitReceive+0x3c8>
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004800:	e01c      	b.n	800483c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f af5b 	bne.w	80046c4 <HAL_SPI_TransmitReceive+0x292>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	f47f af54 	bne.w	80046c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f937 	bl	8004a94 <SPI_EndRxTxTransaction>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d006      	beq.n	800483a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	661a      	str	r2, [r3, #96]	; 0x60
 8004838:	e000      	b.n	800483c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800483a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800484c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	; 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004868:	f7fd fc7c 	bl	8002164 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	4413      	add	r3, r2
 8004876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004878:	f7fd fc74 	bl	8002164 <HAL_GetTick>
 800487c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	015b      	lsls	r3, r3, #5
 8004884:	0d1b      	lsrs	r3, r3, #20
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	fb02 f303 	mul.w	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800488e:	e054      	b.n	800493a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d050      	beq.n	800493a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004898:	f7fd fc64 	bl	8002164 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d902      	bls.n	80048ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d13d      	bne.n	800492a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d111      	bne.n	80048ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d0:	d004      	beq.n	80048dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048da:	d107      	bne.n	80048ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f4:	d10f      	bne.n	8004916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e017      	b.n	800495a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3b01      	subs	r3, #1
 8004938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	429a      	cmp	r2, r3
 8004956:	d19b      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000000 	.word	0x20000000

08004968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800497a:	f7fd fbf3 	bl	8002164 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	4413      	add	r3, r2
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800498a:	f7fd fbeb 	bl	8002164 <HAL_GetTick>
 800498e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004998:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00da      	lsls	r2, r3, #3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049b0:	e060      	b.n	8004a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049b8:	d107      	bne.n	80049ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d050      	beq.n	8004a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049d2:	f7fd fbc7 	bl	8002164 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	429a      	cmp	r2, r3
 80049e0:	d902      	bls.n	80049e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d13d      	bne.n	8004a64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a00:	d111      	bne.n	8004a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0a:	d004      	beq.n	8004a16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a14:	d107      	bne.n	8004a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2e:	d10f      	bne.n	8004a50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e010      	b.n	8004a86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d196      	bne.n	80049b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000000 	.word	0x20000000

08004a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff ff5b 	bl	8004968 <SPI_WaitFifoStateUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e027      	b.n	8004b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fec0 	bl	8004858 <SPI_WaitFlagStateUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e014      	b.n	8004b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff ff34 	bl	8004968 <SPI_WaitFifoStateUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e000      	b.n	8004b18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e041      	b.n	8004bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc ff7c 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f000 fa0e 	bl	8004f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d001      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e041      	b.n	8004c5c <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be8:	d01d      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_TIM_Base_Start+0xa8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_TIM_Base_Start+0xac>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_TIM_Base_Start+0xb0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_TIM_Base_Start+0xb4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_TIM_Base_Start+0xb8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <HAL_TIM_Base_Start+0xbc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d111      	bne.n	8004c4a <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b06      	cmp	r3, #6
 8004c36:	d010      	beq.n	8004c5a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	e007      	b.n	8004c5a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40001800 	.word	0x40001800
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40015c00 	.word	0x40015c00

08004c80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e041      	b.n	8004d16 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f839 	bl	8004d1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 f95e 	bl	8004f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_TIM_OC_Start+0x24>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e022      	b.n	8004d9e <HAL_TIM_OC_Start+0x6a>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d109      	bne.n	8004d72 <HAL_TIM_OC_Start+0x3e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	e015      	b.n	8004d9e <HAL_TIM_OC_Start+0x6a>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d109      	bne.n	8004d8c <HAL_TIM_OC_Start+0x58>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e008      	b.n	8004d9e <HAL_TIM_OC_Start+0x6a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e07c      	b.n	8004ea0 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_OC_Start+0x82>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db4:	e013      	b.n	8004dde <HAL_TIM_OC_Start+0xaa>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_OC_Start+0x92>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc4:	e00b      	b.n	8004dde <HAL_TIM_OC_Start+0xaa>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_OC_Start+0xa2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd4:	e003      	b.n	8004dde <HAL_TIM_OC_Start+0xaa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fabd 	bl	8005366 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2d      	ldr	r2, [pc, #180]	; (8004ea8 <HAL_TIM_OC_Start+0x174>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_TIM_OC_Start+0xd6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <HAL_TIM_OC_Start+0x178>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_TIM_OC_Start+0xd6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2a      	ldr	r2, [pc, #168]	; (8004eb0 <HAL_TIM_OC_Start+0x17c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_OC_Start+0xda>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_TIM_OC_Start+0xdc>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d01d      	beq.n	8004e6a <HAL_TIM_OC_Start+0x136>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <HAL_TIM_OC_Start+0x180>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_TIM_OC_Start+0x136>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <HAL_TIM_OC_Start+0x184>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_TIM_OC_Start+0x136>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_TIM_OC_Start+0x188>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIM_OC_Start+0x136>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_TIM_OC_Start+0x18c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_TIM_OC_Start+0x136>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <HAL_TIM_OC_Start+0x174>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_TIM_OC_Start+0x136>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_TIM_OC_Start+0x190>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d111      	bne.n	8004e8e <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b06      	cmp	r3, #6
 8004e7a:	d010      	beq.n	8004e9e <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8c:	e007      	b.n	8004e9e <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40001800 	.word	0x40001800
 8004ec4:	40015c00 	.word	0x40015c00

08004ec8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e048      	b.n	8004f78 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b0c      	cmp	r3, #12
 8004ef2:	d839      	bhi.n	8004f68 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f31 	.word	0x08004f31
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004f69 	.word	0x08004f69
 8004f08:	08004f69 	.word	0x08004f69
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	08004f69 	.word	0x08004f69
 8004f1c:	08004f4d 	.word	0x08004f4d
 8004f20:	08004f69 	.word	0x08004f69
 8004f24:	08004f69 	.word	0x08004f69
 8004f28:	08004f69 	.word	0x08004f69
 8004f2c:	08004f5b 	.word	0x08004f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f8bc 	bl	80050b4 <TIM_OC1_SetConfig>
      break;
 8004f3c:	e017      	b.n	8004f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f92f 	bl	80051a8 <TIM_OC2_SetConfig>
      break;
 8004f4a:	e010      	b.n	8004f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f98a 	bl	800526c <TIM_OC3_SetConfig>
      break;
 8004f58:	e009      	b.n	8004f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f9c1 	bl	80052e8 <TIM_OC4_SetConfig>
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d00f      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3c      	ldr	r2, [pc, #240]	; (800508c <TIM_Base_SetConfig+0x10c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3b      	ldr	r2, [pc, #236]	; (8005090 <TIM_Base_SetConfig+0x110>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3a      	ldr	r2, [pc, #232]	; (8005094 <TIM_Base_SetConfig+0x114>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a39      	ldr	r2, [pc, #228]	; (8005098 <TIM_Base_SetConfig+0x118>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d027      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <TIM_Base_SetConfig+0x10c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d023      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <TIM_Base_SetConfig+0x110>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01f      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <TIM_Base_SetConfig+0x114>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01b      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	; (800509c <TIM_Base_SetConfig+0x11c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d017      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <TIM_Base_SetConfig+0x120>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <TIM_Base_SetConfig+0x124>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <TIM_Base_SetConfig+0x128>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <TIM_Base_SetConfig+0x12c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <TIM_Base_SetConfig+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <TIM_Base_SetConfig+0x118>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <TIM_Base_SetConfig+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0xf0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a12      	ldr	r2, [pc, #72]	; (80050ac <TIM_Base_SetConfig+0x12c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0xf0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <TIM_Base_SetConfig+0x130>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d103      	bne.n	8005078 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	615a      	str	r2, [r3, #20]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40015c00 	.word	0x40015c00
 800509c:	40001800 	.word	0x40001800
 80050a0:	40001c00 	.word	0x40001c00
 80050a4:	40002000 	.word	0x40002000
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 0302 	bic.w	r3, r3, #2
 80050fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a24      	ldr	r2, [pc, #144]	; (800519c <TIM_OC1_SetConfig+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_OC1_SetConfig+0x6c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <TIM_OC1_SetConfig+0xec>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC1_SetConfig+0x6c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_OC1_SetConfig+0xf0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10c      	bne.n	800513a <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0308 	bic.w	r3, r3, #8
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a17      	ldr	r2, [pc, #92]	; (800519c <TIM_OC1_SetConfig+0xe8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_OC1_SetConfig+0x9e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <TIM_OC1_SetConfig+0xec>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_OC1_SetConfig+0x9e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <TIM_OC1_SetConfig+0xf0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d111      	bne.n	8005176 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800

080051a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f023 0210 	bic.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 0320 	bic.w	r3, r3, #32
 80051f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <TIM_OC2_SetConfig+0xb8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_OC2_SetConfig+0x70>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <TIM_OC2_SetConfig+0xbc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC2_SetConfig+0x70>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <TIM_OC2_SetConfig+0xc0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10f      	bne.n	8005238 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521e:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005366:	b480      	push	{r7}
 8005368:	b087      	sub	sp, #28
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	2201      	movs	r2, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	43db      	mvns	r3, r3
 8005388:	401a      	ands	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	431a      	orrs	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	621a      	str	r2, [r3, #32]
}
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e03d      	b.n	8005448 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e040      	b.n	80054e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc fb8a 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	; 0x24
 8005480:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8c0 	bl	8005618 <UART_SetConfig>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e022      	b.n	80054e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa2e 	bl	800590c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fab5 	bl	8005a50 <UART_CheckIdleState>
 80054e6:	4603      	mov	r3, r0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005504:	2b20      	cmp	r3, #32
 8005506:	f040 8082 	bne.w	800560e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_UART_Transmit+0x26>
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e07a      	b.n	8005610 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_UART_Transmit+0x38>
 8005524:	2302      	movs	r3, #2
 8005526:	e073      	b.n	8005610 <HAL_UART_Transmit+0x120>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2221      	movs	r2, #33	; 0x21
 800553c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800553e:	f7fc fe11 	bl	8002164 <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	88fa      	ldrh	r2, [r7, #6]
 8005548:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555c:	d108      	bne.n	8005570 <HAL_UART_Transmit+0x80>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	e003      	b.n	8005578 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005580:	e02d      	b.n	80055de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	2180      	movs	r1, #128	; 0x80
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 faa8 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e039      	b.n	8005610 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ae:	b292      	uxth	r2, r2
 80055b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	3302      	adds	r3, #2
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	e008      	b.n	80055cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	781a      	ldrb	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	b292      	uxth	r2, r2
 80055c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3301      	adds	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1cb      	bne.n	8005582 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2140      	movs	r1, #64	; 0x40
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fa74 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e005      	b.n	8005610 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e000      	b.n	8005610 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
  }
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005646:	f023 030c 	bic.w	r3, r3, #12
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	430b      	orrs	r3, r1
 8005652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a99      	ldr	r2, [pc, #612]	; (80058f8 <UART_SetConfig+0x2e0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d120      	bne.n	80056da <UART_SetConfig+0xc2>
 8005698:	4b98      	ldr	r3, [pc, #608]	; (80058fc <UART_SetConfig+0x2e4>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d817      	bhi.n	80056d4 <UART_SetConfig+0xbc>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x94>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056c9 	.word	0x080056c9
 80056b4:	080056cf 	.word	0x080056cf
 80056b8:	080056c3 	.word	0x080056c3
 80056bc:	2301      	movs	r3, #1
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e061      	b.n	8005786 <UART_SetConfig+0x16e>
 80056c2:	2302      	movs	r3, #2
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e05e      	b.n	8005786 <UART_SetConfig+0x16e>
 80056c8:	2304      	movs	r3, #4
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e05b      	b.n	8005786 <UART_SetConfig+0x16e>
 80056ce:	2308      	movs	r3, #8
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e058      	b.n	8005786 <UART_SetConfig+0x16e>
 80056d4:	2310      	movs	r3, #16
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e055      	b.n	8005786 <UART_SetConfig+0x16e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a88      	ldr	r2, [pc, #544]	; (8005900 <UART_SetConfig+0x2e8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d124      	bne.n	800572e <UART_SetConfig+0x116>
 80056e4:	4b85      	ldr	r3, [pc, #532]	; (80058fc <UART_SetConfig+0x2e4>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056f0:	d011      	beq.n	8005716 <UART_SetConfig+0xfe>
 80056f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056f6:	d817      	bhi.n	8005728 <UART_SetConfig+0x110>
 80056f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056fc:	d011      	beq.n	8005722 <UART_SetConfig+0x10a>
 80056fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005702:	d811      	bhi.n	8005728 <UART_SetConfig+0x110>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <UART_SetConfig+0xf8>
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d006      	beq.n	800571c <UART_SetConfig+0x104>
 800570e:	e00b      	b.n	8005728 <UART_SetConfig+0x110>
 8005710:	2300      	movs	r3, #0
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e037      	b.n	8005786 <UART_SetConfig+0x16e>
 8005716:	2302      	movs	r3, #2
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e034      	b.n	8005786 <UART_SetConfig+0x16e>
 800571c:	2304      	movs	r3, #4
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e031      	b.n	8005786 <UART_SetConfig+0x16e>
 8005722:	2308      	movs	r3, #8
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e02e      	b.n	8005786 <UART_SetConfig+0x16e>
 8005728:	2310      	movs	r3, #16
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e02b      	b.n	8005786 <UART_SetConfig+0x16e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a74      	ldr	r2, [pc, #464]	; (8005904 <UART_SetConfig+0x2ec>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d124      	bne.n	8005782 <UART_SetConfig+0x16a>
 8005738:	4b70      	ldr	r3, [pc, #448]	; (80058fc <UART_SetConfig+0x2e4>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005740:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005744:	d011      	beq.n	800576a <UART_SetConfig+0x152>
 8005746:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800574a:	d817      	bhi.n	800577c <UART_SetConfig+0x164>
 800574c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005750:	d011      	beq.n	8005776 <UART_SetConfig+0x15e>
 8005752:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005756:	d811      	bhi.n	800577c <UART_SetConfig+0x164>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <UART_SetConfig+0x14c>
 800575c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005760:	d006      	beq.n	8005770 <UART_SetConfig+0x158>
 8005762:	e00b      	b.n	800577c <UART_SetConfig+0x164>
 8005764:	2300      	movs	r3, #0
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e00d      	b.n	8005786 <UART_SetConfig+0x16e>
 800576a:	2302      	movs	r3, #2
 800576c:	77fb      	strb	r3, [r7, #31]
 800576e:	e00a      	b.n	8005786 <UART_SetConfig+0x16e>
 8005770:	2304      	movs	r3, #4
 8005772:	77fb      	strb	r3, [r7, #31]
 8005774:	e007      	b.n	8005786 <UART_SetConfig+0x16e>
 8005776:	2308      	movs	r3, #8
 8005778:	77fb      	strb	r3, [r7, #31]
 800577a:	e004      	b.n	8005786 <UART_SetConfig+0x16e>
 800577c:	2310      	movs	r3, #16
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e001      	b.n	8005786 <UART_SetConfig+0x16e>
 8005782:	2310      	movs	r3, #16
 8005784:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578e:	d15b      	bne.n	8005848 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8005790:	7ffb      	ldrb	r3, [r7, #31]
 8005792:	2b08      	cmp	r3, #8
 8005794:	d827      	bhi.n	80057e6 <UART_SetConfig+0x1ce>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x184>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057e7 	.word	0x080057e7
 80057b4:	080057e7 	.word	0x080057e7
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	080057df 	.word	0x080057df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c0:	f7fe fa66 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 80057c4:	61b8      	str	r0, [r7, #24]
        break;
 80057c6:	e013      	b.n	80057f0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fe fa84 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 80057cc:	61b8      	str	r0, [r7, #24]
        break;
 80057ce:	e00f      	b.n	80057f0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b4d      	ldr	r3, [pc, #308]	; (8005908 <UART_SetConfig+0x2f0>)
 80057d2:	61bb      	str	r3, [r7, #24]
        break;
 80057d4:	e00c      	b.n	80057f0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fe f9e5 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 80057da:	61b8      	str	r0, [r7, #24]
        break;
 80057dc:	e008      	b.n	80057f0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e2:	61bb      	str	r3, [r7, #24]
        break;
 80057e4:	e004      	b.n	80057f0 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	77bb      	strb	r3, [r7, #30]
        break;
 80057ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d074      	beq.n	80058e0 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	005a      	lsls	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	b29b      	uxth	r3, r3
 800580c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b0f      	cmp	r3, #15
 8005812:	d916      	bls.n	8005842 <UART_SetConfig+0x22a>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581a:	d212      	bcs.n	8005842 <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f023 030f 	bic.w	r3, r3, #15
 8005824:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	b29a      	uxth	r2, r3
 8005832:	89fb      	ldrh	r3, [r7, #14]
 8005834:	4313      	orrs	r3, r2
 8005836:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	89fa      	ldrh	r2, [r7, #14]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e04e      	b.n	80058e0 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	77bb      	strb	r3, [r7, #30]
 8005846:	e04b      	b.n	80058e0 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005848:	7ffb      	ldrb	r3, [r7, #31]
 800584a:	2b08      	cmp	r3, #8
 800584c:	d827      	bhi.n	800589e <UART_SetConfig+0x286>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x23c>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005879 	.word	0x08005879
 8005858:	08005881 	.word	0x08005881
 800585c:	08005889 	.word	0x08005889
 8005860:	0800589f 	.word	0x0800589f
 8005864:	0800588f 	.word	0x0800588f
 8005868:	0800589f 	.word	0x0800589f
 800586c:	0800589f 	.word	0x0800589f
 8005870:	0800589f 	.word	0x0800589f
 8005874:	08005897 	.word	0x08005897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005878:	f7fe fa0a 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 800587c:	61b8      	str	r0, [r7, #24]
        break;
 800587e:	e013      	b.n	80058a8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005880:	f7fe fa28 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 8005884:	61b8      	str	r0, [r7, #24]
        break;
 8005886:	e00f      	b.n	80058a8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005888:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <UART_SetConfig+0x2f0>)
 800588a:	61bb      	str	r3, [r7, #24]
        break;
 800588c:	e00c      	b.n	80058a8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588e:	f7fe f989 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8005892:	61b8      	str	r0, [r7, #24]
        break;
 8005894:	e008      	b.n	80058a8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589a:	61bb      	str	r3, [r7, #24]
        break;
 800589c:	e004      	b.n	80058a8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	77bb      	strb	r3, [r7, #30]
        break;
 80058a6:	bf00      	nop
    }

    if (pclk != 0U)
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	085a      	lsrs	r2, r3, #1
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	441a      	add	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	d908      	bls.n	80058dc <UART_SetConfig+0x2c4>
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d204      	bcs.n	80058dc <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	e001      	b.n	80058e0 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40013800 	.word	0x40013800
 80058fc:	40021000 	.word	0x40021000
 8005900:	40004400 	.word	0x40004400
 8005904:	40004800 	.word	0x40004800
 8005908:	007a1200 	.word	0x007a1200

0800590c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0a:	d10a      	bne.n	8005a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a60:	f7fc fb80 	bl	8002164 <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d10e      	bne.n	8005a92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f82d 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e023      	b.n	8005ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d10e      	bne.n	8005abe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f817 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00d      	b.n	8005ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b09c      	sub	sp, #112	; 0x70
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	e0a5      	b.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	f000 80a1 	beq.w	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7fc fb31 	bl	8002164 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d13e      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b28:	667b      	str	r3, [r7, #100]	; 0x64
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	f023 0301 	bic.w	r3, r3, #1
 8005b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b66:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e5      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e067      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d04f      	beq.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bae:	d147      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e6      	bne.n	8005bba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c0c:	623a      	str	r2, [r7, #32]
 8005c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	6a3a      	ldr	r2, [r7, #32]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e010      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69da      	ldr	r2, [r3, #28]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	f43f af4a 	beq.w	8005af4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3770      	adds	r7, #112	; 0x70
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <__errno>:
 8005c6c:	4b01      	ldr	r3, [pc, #4]	; (8005c74 <__errno+0x8>)
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c

08005c78 <__libc_init_array>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	4d0d      	ldr	r5, [pc, #52]	; (8005cb0 <__libc_init_array+0x38>)
 8005c7c:	4c0d      	ldr	r4, [pc, #52]	; (8005cb4 <__libc_init_array+0x3c>)
 8005c7e:	1b64      	subs	r4, r4, r5
 8005c80:	10a4      	asrs	r4, r4, #2
 8005c82:	2600      	movs	r6, #0
 8005c84:	42a6      	cmp	r6, r4
 8005c86:	d109      	bne.n	8005c9c <__libc_init_array+0x24>
 8005c88:	4d0b      	ldr	r5, [pc, #44]	; (8005cb8 <__libc_init_array+0x40>)
 8005c8a:	4c0c      	ldr	r4, [pc, #48]	; (8005cbc <__libc_init_array+0x44>)
 8005c8c:	f003 fb4a 	bl	8009324 <_init>
 8005c90:	1b64      	subs	r4, r4, r5
 8005c92:	10a4      	asrs	r4, r4, #2
 8005c94:	2600      	movs	r6, #0
 8005c96:	42a6      	cmp	r6, r4
 8005c98:	d105      	bne.n	8005ca6 <__libc_init_array+0x2e>
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca0:	4798      	blx	r3
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	e7ee      	b.n	8005c84 <__libc_init_array+0xc>
 8005ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005caa:	4798      	blx	r3
 8005cac:	3601      	adds	r6, #1
 8005cae:	e7f2      	b.n	8005c96 <__libc_init_array+0x1e>
 8005cb0:	08009b3c 	.word	0x08009b3c
 8005cb4:	08009b3c 	.word	0x08009b3c
 8005cb8:	08009b3c 	.word	0x08009b3c
 8005cbc:	08009b40 	.word	0x08009b40

08005cc0 <memset>:
 8005cc0:	4402      	add	r2, r0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d100      	bne.n	8005cca <memset+0xa>
 8005cc8:	4770      	bx	lr
 8005cca:	f803 1b01 	strb.w	r1, [r3], #1
 8005cce:	e7f9      	b.n	8005cc4 <memset+0x4>

08005cd0 <__cvt>:
 8005cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	ec55 4b10 	vmov	r4, r5, d0
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	460e      	mov	r6, r1
 8005cdc:	4619      	mov	r1, r3
 8005cde:	462b      	mov	r3, r5
 8005ce0:	bfbb      	ittet	lt
 8005ce2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ce6:	461d      	movlt	r5, r3
 8005ce8:	2300      	movge	r3, #0
 8005cea:	232d      	movlt	r3, #45	; 0x2d
 8005cec:	700b      	strb	r3, [r1, #0]
 8005cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cf4:	4691      	mov	r9, r2
 8005cf6:	f023 0820 	bic.w	r8, r3, #32
 8005cfa:	bfbc      	itt	lt
 8005cfc:	4622      	movlt	r2, r4
 8005cfe:	4614      	movlt	r4, r2
 8005d00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d04:	d005      	beq.n	8005d12 <__cvt+0x42>
 8005d06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d0a:	d100      	bne.n	8005d0e <__cvt+0x3e>
 8005d0c:	3601      	adds	r6, #1
 8005d0e:	2102      	movs	r1, #2
 8005d10:	e000      	b.n	8005d14 <__cvt+0x44>
 8005d12:	2103      	movs	r1, #3
 8005d14:	ab03      	add	r3, sp, #12
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	ab02      	add	r3, sp, #8
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	ec45 4b10 	vmov	d0, r4, r5
 8005d20:	4653      	mov	r3, sl
 8005d22:	4632      	mov	r2, r6
 8005d24:	f000 fe00 	bl	8006928 <_dtoa_r>
 8005d28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	d102      	bne.n	8005d36 <__cvt+0x66>
 8005d30:	f019 0f01 	tst.w	r9, #1
 8005d34:	d022      	beq.n	8005d7c <__cvt+0xac>
 8005d36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d3a:	eb07 0906 	add.w	r9, r7, r6
 8005d3e:	d110      	bne.n	8005d62 <__cvt+0x92>
 8005d40:	783b      	ldrb	r3, [r7, #0]
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	d10a      	bne.n	8005d5c <__cvt+0x8c>
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d52:	b918      	cbnz	r0, 8005d5c <__cvt+0x8c>
 8005d54:	f1c6 0601 	rsb	r6, r6, #1
 8005d58:	f8ca 6000 	str.w	r6, [sl]
 8005d5c:	f8da 3000 	ldr.w	r3, [sl]
 8005d60:	4499      	add	r9, r3
 8005d62:	2200      	movs	r2, #0
 8005d64:	2300      	movs	r3, #0
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7fa fead 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d6e:	b108      	cbz	r0, 8005d74 <__cvt+0xa4>
 8005d70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d74:	2230      	movs	r2, #48	; 0x30
 8005d76:	9b03      	ldr	r3, [sp, #12]
 8005d78:	454b      	cmp	r3, r9
 8005d7a:	d307      	bcc.n	8005d8c <__cvt+0xbc>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d80:	1bdb      	subs	r3, r3, r7
 8005d82:	4638      	mov	r0, r7
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	b004      	add	sp, #16
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	9103      	str	r1, [sp, #12]
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e7f0      	b.n	8005d76 <__cvt+0xa6>

08005d94 <__exponent>:
 8005d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d96:	4603      	mov	r3, r0
 8005d98:	2900      	cmp	r1, #0
 8005d9a:	bfb8      	it	lt
 8005d9c:	4249      	neglt	r1, r1
 8005d9e:	f803 2b02 	strb.w	r2, [r3], #2
 8005da2:	bfb4      	ite	lt
 8005da4:	222d      	movlt	r2, #45	; 0x2d
 8005da6:	222b      	movge	r2, #43	; 0x2b
 8005da8:	2909      	cmp	r1, #9
 8005daa:	7042      	strb	r2, [r0, #1]
 8005dac:	dd2a      	ble.n	8005e04 <__exponent+0x70>
 8005dae:	f10d 0407 	add.w	r4, sp, #7
 8005db2:	46a4      	mov	ip, r4
 8005db4:	270a      	movs	r7, #10
 8005db6:	46a6      	mov	lr, r4
 8005db8:	460a      	mov	r2, r1
 8005dba:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dbe:	fb07 1516 	mls	r5, r7, r6, r1
 8005dc2:	3530      	adds	r5, #48	; 0x30
 8005dc4:	2a63      	cmp	r2, #99	; 0x63
 8005dc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dce:	4631      	mov	r1, r6
 8005dd0:	dcf1      	bgt.n	8005db6 <__exponent+0x22>
 8005dd2:	3130      	adds	r1, #48	; 0x30
 8005dd4:	f1ae 0502 	sub.w	r5, lr, #2
 8005dd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ddc:	1c44      	adds	r4, r0, #1
 8005dde:	4629      	mov	r1, r5
 8005de0:	4561      	cmp	r1, ip
 8005de2:	d30a      	bcc.n	8005dfa <__exponent+0x66>
 8005de4:	f10d 0209 	add.w	r2, sp, #9
 8005de8:	eba2 020e 	sub.w	r2, r2, lr
 8005dec:	4565      	cmp	r5, ip
 8005dee:	bf88      	it	hi
 8005df0:	2200      	movhi	r2, #0
 8005df2:	4413      	add	r3, r2
 8005df4:	1a18      	subs	r0, r3, r0
 8005df6:	b003      	add	sp, #12
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e02:	e7ed      	b.n	8005de0 <__exponent+0x4c>
 8005e04:	2330      	movs	r3, #48	; 0x30
 8005e06:	3130      	adds	r1, #48	; 0x30
 8005e08:	7083      	strb	r3, [r0, #2]
 8005e0a:	70c1      	strb	r1, [r0, #3]
 8005e0c:	1d03      	adds	r3, r0, #4
 8005e0e:	e7f1      	b.n	8005df4 <__exponent+0x60>

08005e10 <_printf_float>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	ed2d 8b02 	vpush	{d8}
 8005e18:	b08d      	sub	sp, #52	; 0x34
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e20:	4616      	mov	r6, r2
 8005e22:	461f      	mov	r7, r3
 8005e24:	4605      	mov	r5, r0
 8005e26:	f001 fd25 	bl	8007874 <_localeconv_r>
 8005e2a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e2e:	4650      	mov	r0, sl
 8005e30:	f7fa f9ce 	bl	80001d0 <strlen>
 8005e34:	2300      	movs	r3, #0
 8005e36:	930a      	str	r3, [sp, #40]	; 0x28
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	9305      	str	r3, [sp, #20]
 8005e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e44:	3307      	adds	r3, #7
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	f103 0208 	add.w	r2, r3, #8
 8005e4e:	f8c8 2000 	str.w	r2, [r8]
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e62:	9307      	str	r3, [sp, #28]
 8005e64:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e68:	ee08 0a10 	vmov	s16, r0
 8005e6c:	4b9f      	ldr	r3, [pc, #636]	; (80060ec <_printf_float+0x2dc>)
 8005e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e72:	f04f 32ff 	mov.w	r2, #4294967295
 8005e76:	f7fa fe59 	bl	8000b2c <__aeabi_dcmpun>
 8005e7a:	bb88      	cbnz	r0, 8005ee0 <_printf_float+0xd0>
 8005e7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e80:	4b9a      	ldr	r3, [pc, #616]	; (80060ec <_printf_float+0x2dc>)
 8005e82:	f04f 32ff 	mov.w	r2, #4294967295
 8005e86:	f7fa fe33 	bl	8000af0 <__aeabi_dcmple>
 8005e8a:	bb48      	cbnz	r0, 8005ee0 <_printf_float+0xd0>
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa fe22 	bl	8000adc <__aeabi_dcmplt>
 8005e98:	b110      	cbz	r0, 8005ea0 <_printf_float+0x90>
 8005e9a:	232d      	movs	r3, #45	; 0x2d
 8005e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea0:	4b93      	ldr	r3, [pc, #588]	; (80060f0 <_printf_float+0x2e0>)
 8005ea2:	4894      	ldr	r0, [pc, #592]	; (80060f4 <_printf_float+0x2e4>)
 8005ea4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ea8:	bf94      	ite	ls
 8005eaa:	4698      	movls	r8, r3
 8005eac:	4680      	movhi	r8, r0
 8005eae:	2303      	movs	r3, #3
 8005eb0:	6123      	str	r3, [r4, #16]
 8005eb2:	9b05      	ldr	r3, [sp, #20]
 8005eb4:	f023 0204 	bic.w	r2, r3, #4
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	f04f 0900 	mov.w	r9, #0
 8005ebe:	9700      	str	r7, [sp, #0]
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f9d8 	bl	800627c <_printf_common>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f040 8090 	bne.w	8005ff2 <_printf_float+0x1e2>
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed6:	b00d      	add	sp, #52	; 0x34
 8005ed8:	ecbd 8b02 	vpop	{d8}
 8005edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	f7fa fe20 	bl	8000b2c <__aeabi_dcmpun>
 8005eec:	b140      	cbz	r0, 8005f00 <_printf_float+0xf0>
 8005eee:	464b      	mov	r3, r9
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfbc      	itt	lt
 8005ef4:	232d      	movlt	r3, #45	; 0x2d
 8005ef6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005efa:	487f      	ldr	r0, [pc, #508]	; (80060f8 <_printf_float+0x2e8>)
 8005efc:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <_printf_float+0x2ec>)
 8005efe:	e7d1      	b.n	8005ea4 <_printf_float+0x94>
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f06:	9206      	str	r2, [sp, #24]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	d13f      	bne.n	8005f8c <_printf_float+0x17c>
 8005f0c:	2306      	movs	r3, #6
 8005f0e:	6063      	str	r3, [r4, #4]
 8005f10:	9b05      	ldr	r3, [sp, #20]
 8005f12:	6861      	ldr	r1, [r4, #4]
 8005f14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9303      	str	r3, [sp, #12]
 8005f1c:	ab0a      	add	r3, sp, #40	; 0x28
 8005f1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f22:	ab09      	add	r3, sp, #36	; 0x24
 8005f24:	ec49 8b10 	vmov	d0, r8, r9
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	6022      	str	r2, [r4, #0]
 8005f2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f30:	4628      	mov	r0, r5
 8005f32:	f7ff fecd 	bl	8005cd0 <__cvt>
 8005f36:	9b06      	ldr	r3, [sp, #24]
 8005f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f3a:	2b47      	cmp	r3, #71	; 0x47
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	d108      	bne.n	8005f52 <_printf_float+0x142>
 8005f40:	1cc8      	adds	r0, r1, #3
 8005f42:	db02      	blt.n	8005f4a <_printf_float+0x13a>
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	4299      	cmp	r1, r3
 8005f48:	dd41      	ble.n	8005fce <_printf_float+0x1be>
 8005f4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f4e:	fa5f fb8b 	uxtb.w	fp, fp
 8005f52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f56:	d820      	bhi.n	8005f9a <_printf_float+0x18a>
 8005f58:	3901      	subs	r1, #1
 8005f5a:	465a      	mov	r2, fp
 8005f5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f60:	9109      	str	r1, [sp, #36]	; 0x24
 8005f62:	f7ff ff17 	bl	8005d94 <__exponent>
 8005f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f68:	1813      	adds	r3, r2, r0
 8005f6a:	2a01      	cmp	r2, #1
 8005f6c:	4681      	mov	r9, r0
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	dc02      	bgt.n	8005f78 <_printf_float+0x168>
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	07d2      	lsls	r2, r2, #31
 8005f76:	d501      	bpl.n	8005f7c <_printf_float+0x16c>
 8005f78:	3301      	adds	r3, #1
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d09c      	beq.n	8005ebe <_printf_float+0xae>
 8005f84:	232d      	movs	r3, #45	; 0x2d
 8005f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f8a:	e798      	b.n	8005ebe <_printf_float+0xae>
 8005f8c:	9a06      	ldr	r2, [sp, #24]
 8005f8e:	2a47      	cmp	r2, #71	; 0x47
 8005f90:	d1be      	bne.n	8005f10 <_printf_float+0x100>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1bc      	bne.n	8005f10 <_printf_float+0x100>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e7b9      	b.n	8005f0e <_printf_float+0xfe>
 8005f9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f9e:	d118      	bne.n	8005fd2 <_printf_float+0x1c2>
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	dd0b      	ble.n	8005fbe <_printf_float+0x1ae>
 8005fa6:	6121      	str	r1, [r4, #16]
 8005fa8:	b913      	cbnz	r3, 8005fb0 <_printf_float+0x1a0>
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	07d0      	lsls	r0, r2, #31
 8005fae:	d502      	bpl.n	8005fb6 <_printf_float+0x1a6>
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	440b      	add	r3, r1
 8005fb4:	6123      	str	r3, [r4, #16]
 8005fb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fb8:	f04f 0900 	mov.w	r9, #0
 8005fbc:	e7de      	b.n	8005f7c <_printf_float+0x16c>
 8005fbe:	b913      	cbnz	r3, 8005fc6 <_printf_float+0x1b6>
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	07d2      	lsls	r2, r2, #31
 8005fc4:	d501      	bpl.n	8005fca <_printf_float+0x1ba>
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	e7f4      	b.n	8005fb4 <_printf_float+0x1a4>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e7f2      	b.n	8005fb4 <_printf_float+0x1a4>
 8005fce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd4:	4299      	cmp	r1, r3
 8005fd6:	db05      	blt.n	8005fe4 <_printf_float+0x1d4>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	6121      	str	r1, [r4, #16]
 8005fdc:	07d8      	lsls	r0, r3, #31
 8005fde:	d5ea      	bpl.n	8005fb6 <_printf_float+0x1a6>
 8005fe0:	1c4b      	adds	r3, r1, #1
 8005fe2:	e7e7      	b.n	8005fb4 <_printf_float+0x1a4>
 8005fe4:	2900      	cmp	r1, #0
 8005fe6:	bfd4      	ite	le
 8005fe8:	f1c1 0202 	rsble	r2, r1, #2
 8005fec:	2201      	movgt	r2, #1
 8005fee:	4413      	add	r3, r2
 8005ff0:	e7e0      	b.n	8005fb4 <_printf_float+0x1a4>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	055a      	lsls	r2, r3, #21
 8005ff6:	d407      	bmi.n	8006008 <_printf_float+0x1f8>
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	d12c      	bne.n	8006060 <_printf_float+0x250>
 8006006:	e764      	b.n	8005ed2 <_printf_float+0xc2>
 8006008:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800600c:	f240 80e0 	bls.w	80061d0 <_printf_float+0x3c0>
 8006010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006014:	2200      	movs	r2, #0
 8006016:	2300      	movs	r3, #0
 8006018:	f7fa fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800601c:	2800      	cmp	r0, #0
 800601e:	d034      	beq.n	800608a <_printf_float+0x27a>
 8006020:	4a37      	ldr	r2, [pc, #220]	; (8006100 <_printf_float+0x2f0>)
 8006022:	2301      	movs	r3, #1
 8006024:	4631      	mov	r1, r6
 8006026:	4628      	mov	r0, r5
 8006028:	47b8      	blx	r7
 800602a:	3001      	adds	r0, #1
 800602c:	f43f af51 	beq.w	8005ed2 <_printf_float+0xc2>
 8006030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006034:	429a      	cmp	r2, r3
 8006036:	db02      	blt.n	800603e <_printf_float+0x22e>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	07d8      	lsls	r0, r3, #31
 800603c:	d510      	bpl.n	8006060 <_printf_float+0x250>
 800603e:	ee18 3a10 	vmov	r3, s16
 8006042:	4652      	mov	r2, sl
 8006044:	4631      	mov	r1, r6
 8006046:	4628      	mov	r0, r5
 8006048:	47b8      	blx	r7
 800604a:	3001      	adds	r0, #1
 800604c:	f43f af41 	beq.w	8005ed2 <_printf_float+0xc2>
 8006050:	f04f 0800 	mov.w	r8, #0
 8006054:	f104 091a 	add.w	r9, r4, #26
 8006058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800605a:	3b01      	subs	r3, #1
 800605c:	4543      	cmp	r3, r8
 800605e:	dc09      	bgt.n	8006074 <_printf_float+0x264>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	079b      	lsls	r3, r3, #30
 8006064:	f100 8105 	bmi.w	8006272 <_printf_float+0x462>
 8006068:	68e0      	ldr	r0, [r4, #12]
 800606a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800606c:	4298      	cmp	r0, r3
 800606e:	bfb8      	it	lt
 8006070:	4618      	movlt	r0, r3
 8006072:	e730      	b.n	8005ed6 <_printf_float+0xc6>
 8006074:	2301      	movs	r3, #1
 8006076:	464a      	mov	r2, r9
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f af27 	beq.w	8005ed2 <_printf_float+0xc2>
 8006084:	f108 0801 	add.w	r8, r8, #1
 8006088:	e7e6      	b.n	8006058 <_printf_float+0x248>
 800608a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	dc39      	bgt.n	8006104 <_printf_float+0x2f4>
 8006090:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <_printf_float+0x2f0>)
 8006092:	2301      	movs	r3, #1
 8006094:	4631      	mov	r1, r6
 8006096:	4628      	mov	r0, r5
 8006098:	47b8      	blx	r7
 800609a:	3001      	adds	r0, #1
 800609c:	f43f af19 	beq.w	8005ed2 <_printf_float+0xc2>
 80060a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d102      	bne.n	80060ae <_printf_float+0x29e>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	07d9      	lsls	r1, r3, #31
 80060ac:	d5d8      	bpl.n	8006060 <_printf_float+0x250>
 80060ae:	ee18 3a10 	vmov	r3, s16
 80060b2:	4652      	mov	r2, sl
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	f43f af09 	beq.w	8005ed2 <_printf_float+0xc2>
 80060c0:	f04f 0900 	mov.w	r9, #0
 80060c4:	f104 0a1a 	add.w	sl, r4, #26
 80060c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ca:	425b      	negs	r3, r3
 80060cc:	454b      	cmp	r3, r9
 80060ce:	dc01      	bgt.n	80060d4 <_printf_float+0x2c4>
 80060d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d2:	e792      	b.n	8005ffa <_printf_float+0x1ea>
 80060d4:	2301      	movs	r3, #1
 80060d6:	4652      	mov	r2, sl
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	f43f aef7 	beq.w	8005ed2 <_printf_float+0xc2>
 80060e4:	f109 0901 	add.w	r9, r9, #1
 80060e8:	e7ee      	b.n	80060c8 <_printf_float+0x2b8>
 80060ea:	bf00      	nop
 80060ec:	7fefffff 	.word	0x7fefffff
 80060f0:	08009394 	.word	0x08009394
 80060f4:	08009398 	.word	0x08009398
 80060f8:	080093a0 	.word	0x080093a0
 80060fc:	0800939c 	.word	0x0800939c
 8006100:	080093a4 	.word	0x080093a4
 8006104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006106:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006108:	429a      	cmp	r2, r3
 800610a:	bfa8      	it	ge
 800610c:	461a      	movge	r2, r3
 800610e:	2a00      	cmp	r2, #0
 8006110:	4691      	mov	r9, r2
 8006112:	dc37      	bgt.n	8006184 <_printf_float+0x374>
 8006114:	f04f 0b00 	mov.w	fp, #0
 8006118:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800611c:	f104 021a 	add.w	r2, r4, #26
 8006120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006122:	9305      	str	r3, [sp, #20]
 8006124:	eba3 0309 	sub.w	r3, r3, r9
 8006128:	455b      	cmp	r3, fp
 800612a:	dc33      	bgt.n	8006194 <_printf_float+0x384>
 800612c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006130:	429a      	cmp	r2, r3
 8006132:	db3b      	blt.n	80061ac <_printf_float+0x39c>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	07da      	lsls	r2, r3, #31
 8006138:	d438      	bmi.n	80061ac <_printf_float+0x39c>
 800613a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613c:	9a05      	ldr	r2, [sp, #20]
 800613e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006140:	1a9a      	subs	r2, r3, r2
 8006142:	eba3 0901 	sub.w	r9, r3, r1
 8006146:	4591      	cmp	r9, r2
 8006148:	bfa8      	it	ge
 800614a:	4691      	movge	r9, r2
 800614c:	f1b9 0f00 	cmp.w	r9, #0
 8006150:	dc35      	bgt.n	80061be <_printf_float+0x3ae>
 8006152:	f04f 0800 	mov.w	r8, #0
 8006156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800615a:	f104 0a1a 	add.w	sl, r4, #26
 800615e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006162:	1a9b      	subs	r3, r3, r2
 8006164:	eba3 0309 	sub.w	r3, r3, r9
 8006168:	4543      	cmp	r3, r8
 800616a:	f77f af79 	ble.w	8006060 <_printf_float+0x250>
 800616e:	2301      	movs	r3, #1
 8006170:	4652      	mov	r2, sl
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	f43f aeaa 	beq.w	8005ed2 <_printf_float+0xc2>
 800617e:	f108 0801 	add.w	r8, r8, #1
 8006182:	e7ec      	b.n	800615e <_printf_float+0x34e>
 8006184:	4613      	mov	r3, r2
 8006186:	4631      	mov	r1, r6
 8006188:	4642      	mov	r2, r8
 800618a:	4628      	mov	r0, r5
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	d1c0      	bne.n	8006114 <_printf_float+0x304>
 8006192:	e69e      	b.n	8005ed2 <_printf_float+0xc2>
 8006194:	2301      	movs	r3, #1
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	9205      	str	r2, [sp, #20]
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f ae97 	beq.w	8005ed2 <_printf_float+0xc2>
 80061a4:	9a05      	ldr	r2, [sp, #20]
 80061a6:	f10b 0b01 	add.w	fp, fp, #1
 80061aa:	e7b9      	b.n	8006120 <_printf_float+0x310>
 80061ac:	ee18 3a10 	vmov	r3, s16
 80061b0:	4652      	mov	r2, sl
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	d1be      	bne.n	800613a <_printf_float+0x32a>
 80061bc:	e689      	b.n	8005ed2 <_printf_float+0xc2>
 80061be:	9a05      	ldr	r2, [sp, #20]
 80061c0:	464b      	mov	r3, r9
 80061c2:	4442      	add	r2, r8
 80061c4:	4631      	mov	r1, r6
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	d1c1      	bne.n	8006152 <_printf_float+0x342>
 80061ce:	e680      	b.n	8005ed2 <_printf_float+0xc2>
 80061d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061d2:	2a01      	cmp	r2, #1
 80061d4:	dc01      	bgt.n	80061da <_printf_float+0x3ca>
 80061d6:	07db      	lsls	r3, r3, #31
 80061d8:	d538      	bpl.n	800624c <_printf_float+0x43c>
 80061da:	2301      	movs	r3, #1
 80061dc:	4642      	mov	r2, r8
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	f43f ae74 	beq.w	8005ed2 <_printf_float+0xc2>
 80061ea:	ee18 3a10 	vmov	r3, s16
 80061ee:	4652      	mov	r2, sl
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f ae6b 	beq.w	8005ed2 <_printf_float+0xc2>
 80061fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006200:	2200      	movs	r2, #0
 8006202:	2300      	movs	r3, #0
 8006204:	f7fa fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8006208:	b9d8      	cbnz	r0, 8006242 <_printf_float+0x432>
 800620a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620c:	f108 0201 	add.w	r2, r8, #1
 8006210:	3b01      	subs	r3, #1
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	d10e      	bne.n	800623a <_printf_float+0x42a>
 800621c:	e659      	b.n	8005ed2 <_printf_float+0xc2>
 800621e:	2301      	movs	r3, #1
 8006220:	4652      	mov	r2, sl
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	47b8      	blx	r7
 8006228:	3001      	adds	r0, #1
 800622a:	f43f ae52 	beq.w	8005ed2 <_printf_float+0xc2>
 800622e:	f108 0801 	add.w	r8, r8, #1
 8006232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006234:	3b01      	subs	r3, #1
 8006236:	4543      	cmp	r3, r8
 8006238:	dcf1      	bgt.n	800621e <_printf_float+0x40e>
 800623a:	464b      	mov	r3, r9
 800623c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006240:	e6dc      	b.n	8005ffc <_printf_float+0x1ec>
 8006242:	f04f 0800 	mov.w	r8, #0
 8006246:	f104 0a1a 	add.w	sl, r4, #26
 800624a:	e7f2      	b.n	8006232 <_printf_float+0x422>
 800624c:	2301      	movs	r3, #1
 800624e:	4642      	mov	r2, r8
 8006250:	e7df      	b.n	8006212 <_printf_float+0x402>
 8006252:	2301      	movs	r3, #1
 8006254:	464a      	mov	r2, r9
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f ae38 	beq.w	8005ed2 <_printf_float+0xc2>
 8006262:	f108 0801 	add.w	r8, r8, #1
 8006266:	68e3      	ldr	r3, [r4, #12]
 8006268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800626a:	1a5b      	subs	r3, r3, r1
 800626c:	4543      	cmp	r3, r8
 800626e:	dcf0      	bgt.n	8006252 <_printf_float+0x442>
 8006270:	e6fa      	b.n	8006068 <_printf_float+0x258>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	f104 0919 	add.w	r9, r4, #25
 800627a:	e7f4      	b.n	8006266 <_printf_float+0x456>

0800627c <_printf_common>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	4616      	mov	r6, r2
 8006282:	4699      	mov	r9, r3
 8006284:	688a      	ldr	r2, [r1, #8]
 8006286:	690b      	ldr	r3, [r1, #16]
 8006288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800628c:	4293      	cmp	r3, r2
 800628e:	bfb8      	it	lt
 8006290:	4613      	movlt	r3, r2
 8006292:	6033      	str	r3, [r6, #0]
 8006294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006298:	4607      	mov	r7, r0
 800629a:	460c      	mov	r4, r1
 800629c:	b10a      	cbz	r2, 80062a2 <_printf_common+0x26>
 800629e:	3301      	adds	r3, #1
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	0699      	lsls	r1, r3, #26
 80062a6:	bf42      	ittt	mi
 80062a8:	6833      	ldrmi	r3, [r6, #0]
 80062aa:	3302      	addmi	r3, #2
 80062ac:	6033      	strmi	r3, [r6, #0]
 80062ae:	6825      	ldr	r5, [r4, #0]
 80062b0:	f015 0506 	ands.w	r5, r5, #6
 80062b4:	d106      	bne.n	80062c4 <_printf_common+0x48>
 80062b6:	f104 0a19 	add.w	sl, r4, #25
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	6832      	ldr	r2, [r6, #0]
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dc26      	bgt.n	8006312 <_printf_common+0x96>
 80062c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062c8:	1e13      	subs	r3, r2, #0
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	bf18      	it	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	0692      	lsls	r2, r2, #26
 80062d2:	d42b      	bmi.n	800632c <_printf_common+0xb0>
 80062d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062d8:	4649      	mov	r1, r9
 80062da:	4638      	mov	r0, r7
 80062dc:	47c0      	blx	r8
 80062de:	3001      	adds	r0, #1
 80062e0:	d01e      	beq.n	8006320 <_printf_common+0xa4>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	68e5      	ldr	r5, [r4, #12]
 80062e6:	6832      	ldr	r2, [r6, #0]
 80062e8:	f003 0306 	and.w	r3, r3, #6
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	bf08      	it	eq
 80062f0:	1aad      	subeq	r5, r5, r2
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	bf0c      	ite	eq
 80062f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062fc:	2500      	movne	r5, #0
 80062fe:	4293      	cmp	r3, r2
 8006300:	bfc4      	itt	gt
 8006302:	1a9b      	subgt	r3, r3, r2
 8006304:	18ed      	addgt	r5, r5, r3
 8006306:	2600      	movs	r6, #0
 8006308:	341a      	adds	r4, #26
 800630a:	42b5      	cmp	r5, r6
 800630c:	d11a      	bne.n	8006344 <_printf_common+0xc8>
 800630e:	2000      	movs	r0, #0
 8006310:	e008      	b.n	8006324 <_printf_common+0xa8>
 8006312:	2301      	movs	r3, #1
 8006314:	4652      	mov	r2, sl
 8006316:	4649      	mov	r1, r9
 8006318:	4638      	mov	r0, r7
 800631a:	47c0      	blx	r8
 800631c:	3001      	adds	r0, #1
 800631e:	d103      	bne.n	8006328 <_printf_common+0xac>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	3501      	adds	r5, #1
 800632a:	e7c6      	b.n	80062ba <_printf_common+0x3e>
 800632c:	18e1      	adds	r1, r4, r3
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	2030      	movs	r0, #48	; 0x30
 8006332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006336:	4422      	add	r2, r4
 8006338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800633c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006340:	3302      	adds	r3, #2
 8006342:	e7c7      	b.n	80062d4 <_printf_common+0x58>
 8006344:	2301      	movs	r3, #1
 8006346:	4622      	mov	r2, r4
 8006348:	4649      	mov	r1, r9
 800634a:	4638      	mov	r0, r7
 800634c:	47c0      	blx	r8
 800634e:	3001      	adds	r0, #1
 8006350:	d0e6      	beq.n	8006320 <_printf_common+0xa4>
 8006352:	3601      	adds	r6, #1
 8006354:	e7d9      	b.n	800630a <_printf_common+0x8e>
	...

08006358 <_printf_i>:
 8006358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	7e0f      	ldrb	r7, [r1, #24]
 800635e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006360:	2f78      	cmp	r7, #120	; 0x78
 8006362:	4691      	mov	r9, r2
 8006364:	4680      	mov	r8, r0
 8006366:	460c      	mov	r4, r1
 8006368:	469a      	mov	sl, r3
 800636a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800636e:	d807      	bhi.n	8006380 <_printf_i+0x28>
 8006370:	2f62      	cmp	r7, #98	; 0x62
 8006372:	d80a      	bhi.n	800638a <_printf_i+0x32>
 8006374:	2f00      	cmp	r7, #0
 8006376:	f000 80d8 	beq.w	800652a <_printf_i+0x1d2>
 800637a:	2f58      	cmp	r7, #88	; 0x58
 800637c:	f000 80a3 	beq.w	80064c6 <_printf_i+0x16e>
 8006380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006388:	e03a      	b.n	8006400 <_printf_i+0xa8>
 800638a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800638e:	2b15      	cmp	r3, #21
 8006390:	d8f6      	bhi.n	8006380 <_printf_i+0x28>
 8006392:	a101      	add	r1, pc, #4	; (adr r1, 8006398 <_printf_i+0x40>)
 8006394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006398:	080063f1 	.word	0x080063f1
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006381 	.word	0x08006381
 80063a4:	08006381 	.word	0x08006381
 80063a8:	08006381 	.word	0x08006381
 80063ac:	08006381 	.word	0x08006381
 80063b0:	08006405 	.word	0x08006405
 80063b4:	08006381 	.word	0x08006381
 80063b8:	08006381 	.word	0x08006381
 80063bc:	08006381 	.word	0x08006381
 80063c0:	08006381 	.word	0x08006381
 80063c4:	08006511 	.word	0x08006511
 80063c8:	08006435 	.word	0x08006435
 80063cc:	080064f3 	.word	0x080064f3
 80063d0:	08006381 	.word	0x08006381
 80063d4:	08006381 	.word	0x08006381
 80063d8:	08006533 	.word	0x08006533
 80063dc:	08006381 	.word	0x08006381
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006381 	.word	0x08006381
 80063e8:	08006381 	.word	0x08006381
 80063ec:	080064fb 	.word	0x080064fb
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	1d1a      	adds	r2, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	602a      	str	r2, [r5, #0]
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006400:	2301      	movs	r3, #1
 8006402:	e0a3      	b.n	800654c <_printf_i+0x1f4>
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	6829      	ldr	r1, [r5, #0]
 8006408:	0606      	lsls	r6, r0, #24
 800640a:	f101 0304 	add.w	r3, r1, #4
 800640e:	d50a      	bpl.n	8006426 <_printf_i+0xce>
 8006410:	680e      	ldr	r6, [r1, #0]
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	2e00      	cmp	r6, #0
 8006416:	da03      	bge.n	8006420 <_printf_i+0xc8>
 8006418:	232d      	movs	r3, #45	; 0x2d
 800641a:	4276      	negs	r6, r6
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006420:	485e      	ldr	r0, [pc, #376]	; (800659c <_printf_i+0x244>)
 8006422:	230a      	movs	r3, #10
 8006424:	e019      	b.n	800645a <_printf_i+0x102>
 8006426:	680e      	ldr	r6, [r1, #0]
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800642e:	bf18      	it	ne
 8006430:	b236      	sxthne	r6, r6
 8006432:	e7ef      	b.n	8006414 <_printf_i+0xbc>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1d19      	adds	r1, r3, #4
 800643a:	6029      	str	r1, [r5, #0]
 800643c:	0601      	lsls	r1, r0, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0xec>
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	e002      	b.n	800644a <_printf_i+0xf2>
 8006444:	0646      	lsls	r6, r0, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0xe8>
 8006448:	881e      	ldrh	r6, [r3, #0]
 800644a:	4854      	ldr	r0, [pc, #336]	; (800659c <_printf_i+0x244>)
 800644c:	2f6f      	cmp	r7, #111	; 0x6f
 800644e:	bf0c      	ite	eq
 8006450:	2308      	moveq	r3, #8
 8006452:	230a      	movne	r3, #10
 8006454:	2100      	movs	r1, #0
 8006456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800645a:	6865      	ldr	r5, [r4, #4]
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	2d00      	cmp	r5, #0
 8006460:	bfa2      	ittt	ge
 8006462:	6821      	ldrge	r1, [r4, #0]
 8006464:	f021 0104 	bicge.w	r1, r1, #4
 8006468:	6021      	strge	r1, [r4, #0]
 800646a:	b90e      	cbnz	r6, 8006470 <_printf_i+0x118>
 800646c:	2d00      	cmp	r5, #0
 800646e:	d04d      	beq.n	800650c <_printf_i+0x1b4>
 8006470:	4615      	mov	r5, r2
 8006472:	fbb6 f1f3 	udiv	r1, r6, r3
 8006476:	fb03 6711 	mls	r7, r3, r1, r6
 800647a:	5dc7      	ldrb	r7, [r0, r7]
 800647c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006480:	4637      	mov	r7, r6
 8006482:	42bb      	cmp	r3, r7
 8006484:	460e      	mov	r6, r1
 8006486:	d9f4      	bls.n	8006472 <_printf_i+0x11a>
 8006488:	2b08      	cmp	r3, #8
 800648a:	d10b      	bne.n	80064a4 <_printf_i+0x14c>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	07de      	lsls	r6, r3, #31
 8006490:	d508      	bpl.n	80064a4 <_printf_i+0x14c>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	4299      	cmp	r1, r3
 8006498:	bfde      	ittt	le
 800649a:	2330      	movle	r3, #48	; 0x30
 800649c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064a4:	1b52      	subs	r2, r2, r5
 80064a6:	6122      	str	r2, [r4, #16]
 80064a8:	f8cd a000 	str.w	sl, [sp]
 80064ac:	464b      	mov	r3, r9
 80064ae:	aa03      	add	r2, sp, #12
 80064b0:	4621      	mov	r1, r4
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff fee2 	bl	800627c <_printf_common>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d14c      	bne.n	8006556 <_printf_i+0x1fe>
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	b004      	add	sp, #16
 80064c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c6:	4835      	ldr	r0, [pc, #212]	; (800659c <_printf_i+0x244>)
 80064c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064cc:	6829      	ldr	r1, [r5, #0]
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064d4:	6029      	str	r1, [r5, #0]
 80064d6:	061d      	lsls	r5, r3, #24
 80064d8:	d514      	bpl.n	8006504 <_printf_i+0x1ac>
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	bf44      	itt	mi
 80064de:	f043 0320 	orrmi.w	r3, r3, #32
 80064e2:	6023      	strmi	r3, [r4, #0]
 80064e4:	b91e      	cbnz	r6, 80064ee <_printf_i+0x196>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f023 0320 	bic.w	r3, r3, #32
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	2310      	movs	r3, #16
 80064f0:	e7b0      	b.n	8006454 <_printf_i+0xfc>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	2378      	movs	r3, #120	; 0x78
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <_printf_i+0x248>)
 80064fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006502:	e7e3      	b.n	80064cc <_printf_i+0x174>
 8006504:	0659      	lsls	r1, r3, #25
 8006506:	bf48      	it	mi
 8006508:	b2b6      	uxthmi	r6, r6
 800650a:	e7e6      	b.n	80064da <_printf_i+0x182>
 800650c:	4615      	mov	r5, r2
 800650e:	e7bb      	b.n	8006488 <_printf_i+0x130>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	6826      	ldr	r6, [r4, #0]
 8006514:	6961      	ldr	r1, [r4, #20]
 8006516:	1d18      	adds	r0, r3, #4
 8006518:	6028      	str	r0, [r5, #0]
 800651a:	0635      	lsls	r5, r6, #24
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	d501      	bpl.n	8006524 <_printf_i+0x1cc>
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0x1d2>
 8006524:	0670      	lsls	r0, r6, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0x1c8>
 8006528:	8019      	strh	r1, [r3, #0]
 800652a:	2300      	movs	r3, #0
 800652c:	6123      	str	r3, [r4, #16]
 800652e:	4615      	mov	r5, r2
 8006530:	e7ba      	b.n	80064a8 <_printf_i+0x150>
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	1d1a      	adds	r2, r3, #4
 8006536:	602a      	str	r2, [r5, #0]
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	2100      	movs	r1, #0
 800653e:	4628      	mov	r0, r5
 8006540:	f7f9 fe4e 	bl	80001e0 <memchr>
 8006544:	b108      	cbz	r0, 800654a <_printf_i+0x1f2>
 8006546:	1b40      	subs	r0, r0, r5
 8006548:	6060      	str	r0, [r4, #4]
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	2300      	movs	r3, #0
 8006550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006554:	e7a8      	b.n	80064a8 <_printf_i+0x150>
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	462a      	mov	r2, r5
 800655a:	4649      	mov	r1, r9
 800655c:	4640      	mov	r0, r8
 800655e:	47d0      	blx	sl
 8006560:	3001      	adds	r0, #1
 8006562:	d0ab      	beq.n	80064bc <_printf_i+0x164>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	079b      	lsls	r3, r3, #30
 8006568:	d413      	bmi.n	8006592 <_printf_i+0x23a>
 800656a:	68e0      	ldr	r0, [r4, #12]
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	4298      	cmp	r0, r3
 8006570:	bfb8      	it	lt
 8006572:	4618      	movlt	r0, r3
 8006574:	e7a4      	b.n	80064c0 <_printf_i+0x168>
 8006576:	2301      	movs	r3, #1
 8006578:	4632      	mov	r2, r6
 800657a:	4649      	mov	r1, r9
 800657c:	4640      	mov	r0, r8
 800657e:	47d0      	blx	sl
 8006580:	3001      	adds	r0, #1
 8006582:	d09b      	beq.n	80064bc <_printf_i+0x164>
 8006584:	3501      	adds	r5, #1
 8006586:	68e3      	ldr	r3, [r4, #12]
 8006588:	9903      	ldr	r1, [sp, #12]
 800658a:	1a5b      	subs	r3, r3, r1
 800658c:	42ab      	cmp	r3, r5
 800658e:	dcf2      	bgt.n	8006576 <_printf_i+0x21e>
 8006590:	e7eb      	b.n	800656a <_printf_i+0x212>
 8006592:	2500      	movs	r5, #0
 8006594:	f104 0619 	add.w	r6, r4, #25
 8006598:	e7f5      	b.n	8006586 <_printf_i+0x22e>
 800659a:	bf00      	nop
 800659c:	080093a6 	.word	0x080093a6
 80065a0:	080093b7 	.word	0x080093b7

080065a4 <_puts_r>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	460e      	mov	r6, r1
 80065a8:	4605      	mov	r5, r0
 80065aa:	b118      	cbz	r0, 80065b4 <_puts_r+0x10>
 80065ac:	6983      	ldr	r3, [r0, #24]
 80065ae:	b90b      	cbnz	r3, 80065b4 <_puts_r+0x10>
 80065b0:	f001 f8c2 	bl	8007738 <__sinit>
 80065b4:	69ab      	ldr	r3, [r5, #24]
 80065b6:	68ac      	ldr	r4, [r5, #8]
 80065b8:	b913      	cbnz	r3, 80065c0 <_puts_r+0x1c>
 80065ba:	4628      	mov	r0, r5
 80065bc:	f001 f8bc 	bl	8007738 <__sinit>
 80065c0:	4b2c      	ldr	r3, [pc, #176]	; (8006674 <_puts_r+0xd0>)
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d120      	bne.n	8006608 <_puts_r+0x64>
 80065c6:	686c      	ldr	r4, [r5, #4]
 80065c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ca:	07db      	lsls	r3, r3, #31
 80065cc:	d405      	bmi.n	80065da <_puts_r+0x36>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	0598      	lsls	r0, r3, #22
 80065d2:	d402      	bmi.n	80065da <_puts_r+0x36>
 80065d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d6:	f001 f952 	bl	800787e <__retarget_lock_acquire_recursive>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	0719      	lsls	r1, r3, #28
 80065de:	d51d      	bpl.n	800661c <_puts_r+0x78>
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	b1db      	cbz	r3, 800661c <_puts_r+0x78>
 80065e4:	3e01      	subs	r6, #1
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60a3      	str	r3, [r4, #8]
 80065f0:	bb39      	cbnz	r1, 8006642 <_puts_r+0x9e>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da38      	bge.n	8006668 <_puts_r+0xc4>
 80065f6:	4622      	mov	r2, r4
 80065f8:	210a      	movs	r1, #10
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f848 	bl	8006690 <__swbuf_r>
 8006600:	3001      	adds	r0, #1
 8006602:	d011      	beq.n	8006628 <_puts_r+0x84>
 8006604:	250a      	movs	r5, #10
 8006606:	e011      	b.n	800662c <_puts_r+0x88>
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <_puts_r+0xd4>)
 800660a:	429c      	cmp	r4, r3
 800660c:	d101      	bne.n	8006612 <_puts_r+0x6e>
 800660e:	68ac      	ldr	r4, [r5, #8]
 8006610:	e7da      	b.n	80065c8 <_puts_r+0x24>
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <_puts_r+0xd8>)
 8006614:	429c      	cmp	r4, r3
 8006616:	bf08      	it	eq
 8006618:	68ec      	ldreq	r4, [r5, #12]
 800661a:	e7d5      	b.n	80065c8 <_puts_r+0x24>
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f000 f888 	bl	8006734 <__swsetup_r>
 8006624:	2800      	cmp	r0, #0
 8006626:	d0dd      	beq.n	80065e4 <_puts_r+0x40>
 8006628:	f04f 35ff 	mov.w	r5, #4294967295
 800662c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800662e:	07da      	lsls	r2, r3, #31
 8006630:	d405      	bmi.n	800663e <_puts_r+0x9a>
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	059b      	lsls	r3, r3, #22
 8006636:	d402      	bmi.n	800663e <_puts_r+0x9a>
 8006638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663a:	f001 f921 	bl	8007880 <__retarget_lock_release_recursive>
 800663e:	4628      	mov	r0, r5
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	2b00      	cmp	r3, #0
 8006644:	da04      	bge.n	8006650 <_puts_r+0xac>
 8006646:	69a2      	ldr	r2, [r4, #24]
 8006648:	429a      	cmp	r2, r3
 800664a:	dc06      	bgt.n	800665a <_puts_r+0xb6>
 800664c:	290a      	cmp	r1, #10
 800664e:	d004      	beq.n	800665a <_puts_r+0xb6>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	6022      	str	r2, [r4, #0]
 8006656:	7019      	strb	r1, [r3, #0]
 8006658:	e7c5      	b.n	80065e6 <_puts_r+0x42>
 800665a:	4622      	mov	r2, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f817 	bl	8006690 <__swbuf_r>
 8006662:	3001      	adds	r0, #1
 8006664:	d1bf      	bne.n	80065e6 <_puts_r+0x42>
 8006666:	e7df      	b.n	8006628 <_puts_r+0x84>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	250a      	movs	r5, #10
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	701d      	strb	r5, [r3, #0]
 8006672:	e7db      	b.n	800662c <_puts_r+0x88>
 8006674:	08009478 	.word	0x08009478
 8006678:	08009498 	.word	0x08009498
 800667c:	08009458 	.word	0x08009458

08006680 <puts>:
 8006680:	4b02      	ldr	r3, [pc, #8]	; (800668c <puts+0xc>)
 8006682:	4601      	mov	r1, r0
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	f7ff bf8d 	b.w	80065a4 <_puts_r>
 800668a:	bf00      	nop
 800668c:	2000000c 	.word	0x2000000c

08006690 <__swbuf_r>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	460e      	mov	r6, r1
 8006694:	4614      	mov	r4, r2
 8006696:	4605      	mov	r5, r0
 8006698:	b118      	cbz	r0, 80066a2 <__swbuf_r+0x12>
 800669a:	6983      	ldr	r3, [r0, #24]
 800669c:	b90b      	cbnz	r3, 80066a2 <__swbuf_r+0x12>
 800669e:	f001 f84b 	bl	8007738 <__sinit>
 80066a2:	4b21      	ldr	r3, [pc, #132]	; (8006728 <__swbuf_r+0x98>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	d12b      	bne.n	8006700 <__swbuf_r+0x70>
 80066a8:	686c      	ldr	r4, [r5, #4]
 80066aa:	69a3      	ldr	r3, [r4, #24]
 80066ac:	60a3      	str	r3, [r4, #8]
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	071a      	lsls	r2, r3, #28
 80066b2:	d52f      	bpl.n	8006714 <__swbuf_r+0x84>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	b36b      	cbz	r3, 8006714 <__swbuf_r+0x84>
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	6820      	ldr	r0, [r4, #0]
 80066bc:	1ac0      	subs	r0, r0, r3
 80066be:	6963      	ldr	r3, [r4, #20]
 80066c0:	b2f6      	uxtb	r6, r6
 80066c2:	4283      	cmp	r3, r0
 80066c4:	4637      	mov	r7, r6
 80066c6:	dc04      	bgt.n	80066d2 <__swbuf_r+0x42>
 80066c8:	4621      	mov	r1, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	f000 ffa0 	bl	8007610 <_fflush_r>
 80066d0:	bb30      	cbnz	r0, 8006720 <__swbuf_r+0x90>
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	60a3      	str	r3, [r4, #8]
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	6022      	str	r2, [r4, #0]
 80066de:	701e      	strb	r6, [r3, #0]
 80066e0:	6963      	ldr	r3, [r4, #20]
 80066e2:	3001      	adds	r0, #1
 80066e4:	4283      	cmp	r3, r0
 80066e6:	d004      	beq.n	80066f2 <__swbuf_r+0x62>
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	07db      	lsls	r3, r3, #31
 80066ec:	d506      	bpl.n	80066fc <__swbuf_r+0x6c>
 80066ee:	2e0a      	cmp	r6, #10
 80066f0:	d104      	bne.n	80066fc <__swbuf_r+0x6c>
 80066f2:	4621      	mov	r1, r4
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 ff8b 	bl	8007610 <_fflush_r>
 80066fa:	b988      	cbnz	r0, 8006720 <__swbuf_r+0x90>
 80066fc:	4638      	mov	r0, r7
 80066fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <__swbuf_r+0x9c>)
 8006702:	429c      	cmp	r4, r3
 8006704:	d101      	bne.n	800670a <__swbuf_r+0x7a>
 8006706:	68ac      	ldr	r4, [r5, #8]
 8006708:	e7cf      	b.n	80066aa <__swbuf_r+0x1a>
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <__swbuf_r+0xa0>)
 800670c:	429c      	cmp	r4, r3
 800670e:	bf08      	it	eq
 8006710:	68ec      	ldreq	r4, [r5, #12]
 8006712:	e7ca      	b.n	80066aa <__swbuf_r+0x1a>
 8006714:	4621      	mov	r1, r4
 8006716:	4628      	mov	r0, r5
 8006718:	f000 f80c 	bl	8006734 <__swsetup_r>
 800671c:	2800      	cmp	r0, #0
 800671e:	d0cb      	beq.n	80066b8 <__swbuf_r+0x28>
 8006720:	f04f 37ff 	mov.w	r7, #4294967295
 8006724:	e7ea      	b.n	80066fc <__swbuf_r+0x6c>
 8006726:	bf00      	nop
 8006728:	08009478 	.word	0x08009478
 800672c:	08009498 	.word	0x08009498
 8006730:	08009458 	.word	0x08009458

08006734 <__swsetup_r>:
 8006734:	4b32      	ldr	r3, [pc, #200]	; (8006800 <__swsetup_r+0xcc>)
 8006736:	b570      	push	{r4, r5, r6, lr}
 8006738:	681d      	ldr	r5, [r3, #0]
 800673a:	4606      	mov	r6, r0
 800673c:	460c      	mov	r4, r1
 800673e:	b125      	cbz	r5, 800674a <__swsetup_r+0x16>
 8006740:	69ab      	ldr	r3, [r5, #24]
 8006742:	b913      	cbnz	r3, 800674a <__swsetup_r+0x16>
 8006744:	4628      	mov	r0, r5
 8006746:	f000 fff7 	bl	8007738 <__sinit>
 800674a:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <__swsetup_r+0xd0>)
 800674c:	429c      	cmp	r4, r3
 800674e:	d10f      	bne.n	8006770 <__swsetup_r+0x3c>
 8006750:	686c      	ldr	r4, [r5, #4]
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006758:	0719      	lsls	r1, r3, #28
 800675a:	d42c      	bmi.n	80067b6 <__swsetup_r+0x82>
 800675c:	06dd      	lsls	r5, r3, #27
 800675e:	d411      	bmi.n	8006784 <__swsetup_r+0x50>
 8006760:	2309      	movs	r3, #9
 8006762:	6033      	str	r3, [r6, #0]
 8006764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006768:	81a3      	strh	r3, [r4, #12]
 800676a:	f04f 30ff 	mov.w	r0, #4294967295
 800676e:	e03e      	b.n	80067ee <__swsetup_r+0xba>
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <__swsetup_r+0xd4>)
 8006772:	429c      	cmp	r4, r3
 8006774:	d101      	bne.n	800677a <__swsetup_r+0x46>
 8006776:	68ac      	ldr	r4, [r5, #8]
 8006778:	e7eb      	b.n	8006752 <__swsetup_r+0x1e>
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <__swsetup_r+0xd8>)
 800677c:	429c      	cmp	r4, r3
 800677e:	bf08      	it	eq
 8006780:	68ec      	ldreq	r4, [r5, #12]
 8006782:	e7e6      	b.n	8006752 <__swsetup_r+0x1e>
 8006784:	0758      	lsls	r0, r3, #29
 8006786:	d512      	bpl.n	80067ae <__swsetup_r+0x7a>
 8006788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800678a:	b141      	cbz	r1, 800679e <__swsetup_r+0x6a>
 800678c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006790:	4299      	cmp	r1, r3
 8006792:	d002      	beq.n	800679a <__swsetup_r+0x66>
 8006794:	4630      	mov	r0, r6
 8006796:	f001 fc89 	bl	80080ac <_free_r>
 800679a:	2300      	movs	r3, #0
 800679c:	6363      	str	r3, [r4, #52]	; 0x34
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	2300      	movs	r3, #0
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f043 0308 	orr.w	r3, r3, #8
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	b94b      	cbnz	r3, 80067ce <__swsetup_r+0x9a>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d003      	beq.n	80067ce <__swsetup_r+0x9a>
 80067c6:	4621      	mov	r1, r4
 80067c8:	4630      	mov	r0, r6
 80067ca:	f001 f87f 	bl	80078cc <__smakebuf_r>
 80067ce:	89a0      	ldrh	r0, [r4, #12]
 80067d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067d4:	f010 0301 	ands.w	r3, r0, #1
 80067d8:	d00a      	beq.n	80067f0 <__swsetup_r+0xbc>
 80067da:	2300      	movs	r3, #0
 80067dc:	60a3      	str	r3, [r4, #8]
 80067de:	6963      	ldr	r3, [r4, #20]
 80067e0:	425b      	negs	r3, r3
 80067e2:	61a3      	str	r3, [r4, #24]
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	b943      	cbnz	r3, 80067fa <__swsetup_r+0xc6>
 80067e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067ec:	d1ba      	bne.n	8006764 <__swsetup_r+0x30>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	0781      	lsls	r1, r0, #30
 80067f2:	bf58      	it	pl
 80067f4:	6963      	ldrpl	r3, [r4, #20]
 80067f6:	60a3      	str	r3, [r4, #8]
 80067f8:	e7f4      	b.n	80067e4 <__swsetup_r+0xb0>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e7f7      	b.n	80067ee <__swsetup_r+0xba>
 80067fe:	bf00      	nop
 8006800:	2000000c 	.word	0x2000000c
 8006804:	08009478 	.word	0x08009478
 8006808:	08009498 	.word	0x08009498
 800680c:	08009458 	.word	0x08009458

08006810 <quorem>:
 8006810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	6903      	ldr	r3, [r0, #16]
 8006816:	690c      	ldr	r4, [r1, #16]
 8006818:	42a3      	cmp	r3, r4
 800681a:	4607      	mov	r7, r0
 800681c:	f2c0 8081 	blt.w	8006922 <quorem+0x112>
 8006820:	3c01      	subs	r4, #1
 8006822:	f101 0814 	add.w	r8, r1, #20
 8006826:	f100 0514 	add.w	r5, r0, #20
 800682a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006838:	3301      	adds	r3, #1
 800683a:	429a      	cmp	r2, r3
 800683c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006844:	fbb2 f6f3 	udiv	r6, r2, r3
 8006848:	d331      	bcc.n	80068ae <quorem+0x9e>
 800684a:	f04f 0e00 	mov.w	lr, #0
 800684e:	4640      	mov	r0, r8
 8006850:	46ac      	mov	ip, r5
 8006852:	46f2      	mov	sl, lr
 8006854:	f850 2b04 	ldr.w	r2, [r0], #4
 8006858:	b293      	uxth	r3, r2
 800685a:	fb06 e303 	mla	r3, r6, r3, lr
 800685e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006862:	b29b      	uxth	r3, r3
 8006864:	ebaa 0303 	sub.w	r3, sl, r3
 8006868:	f8dc a000 	ldr.w	sl, [ip]
 800686c:	0c12      	lsrs	r2, r2, #16
 800686e:	fa13 f38a 	uxtah	r3, r3, sl
 8006872:	fb06 e202 	mla	r2, r6, r2, lr
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	9b00      	ldr	r3, [sp, #0]
 800687a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800687e:	b292      	uxth	r2, r2
 8006880:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006888:	f8bd 3000 	ldrh.w	r3, [sp]
 800688c:	4581      	cmp	r9, r0
 800688e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006892:	f84c 3b04 	str.w	r3, [ip], #4
 8006896:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800689a:	d2db      	bcs.n	8006854 <quorem+0x44>
 800689c:	f855 300b 	ldr.w	r3, [r5, fp]
 80068a0:	b92b      	cbnz	r3, 80068ae <quorem+0x9e>
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	3b04      	subs	r3, #4
 80068a6:	429d      	cmp	r5, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	d32e      	bcc.n	800690a <quorem+0xfa>
 80068ac:	613c      	str	r4, [r7, #16]
 80068ae:	4638      	mov	r0, r7
 80068b0:	f001 fae4 	bl	8007e7c <__mcmp>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	db24      	blt.n	8006902 <quorem+0xf2>
 80068b8:	3601      	adds	r6, #1
 80068ba:	4628      	mov	r0, r5
 80068bc:	f04f 0c00 	mov.w	ip, #0
 80068c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80068c4:	f8d0 e000 	ldr.w	lr, [r0]
 80068c8:	b293      	uxth	r3, r2
 80068ca:	ebac 0303 	sub.w	r3, ip, r3
 80068ce:	0c12      	lsrs	r2, r2, #16
 80068d0:	fa13 f38e 	uxtah	r3, r3, lr
 80068d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068dc:	b29b      	uxth	r3, r3
 80068de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068e2:	45c1      	cmp	r9, r8
 80068e4:	f840 3b04 	str.w	r3, [r0], #4
 80068e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068ec:	d2e8      	bcs.n	80068c0 <quorem+0xb0>
 80068ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f6:	b922      	cbnz	r2, 8006902 <quorem+0xf2>
 80068f8:	3b04      	subs	r3, #4
 80068fa:	429d      	cmp	r5, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	d30a      	bcc.n	8006916 <quorem+0x106>
 8006900:	613c      	str	r4, [r7, #16]
 8006902:	4630      	mov	r0, r6
 8006904:	b003      	add	sp, #12
 8006906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	3b04      	subs	r3, #4
 800690e:	2a00      	cmp	r2, #0
 8006910:	d1cc      	bne.n	80068ac <quorem+0x9c>
 8006912:	3c01      	subs	r4, #1
 8006914:	e7c7      	b.n	80068a6 <quorem+0x96>
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	3b04      	subs	r3, #4
 800691a:	2a00      	cmp	r2, #0
 800691c:	d1f0      	bne.n	8006900 <quorem+0xf0>
 800691e:	3c01      	subs	r4, #1
 8006920:	e7eb      	b.n	80068fa <quorem+0xea>
 8006922:	2000      	movs	r0, #0
 8006924:	e7ee      	b.n	8006904 <quorem+0xf4>
	...

08006928 <_dtoa_r>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	ed2d 8b04 	vpush	{d8-d9}
 8006930:	ec57 6b10 	vmov	r6, r7, d0
 8006934:	b093      	sub	sp, #76	; 0x4c
 8006936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800693c:	9106      	str	r1, [sp, #24]
 800693e:	ee10 aa10 	vmov	sl, s0
 8006942:	4604      	mov	r4, r0
 8006944:	9209      	str	r2, [sp, #36]	; 0x24
 8006946:	930c      	str	r3, [sp, #48]	; 0x30
 8006948:	46bb      	mov	fp, r7
 800694a:	b975      	cbnz	r5, 800696a <_dtoa_r+0x42>
 800694c:	2010      	movs	r0, #16
 800694e:	f000 fffd 	bl	800794c <malloc>
 8006952:	4602      	mov	r2, r0
 8006954:	6260      	str	r0, [r4, #36]	; 0x24
 8006956:	b920      	cbnz	r0, 8006962 <_dtoa_r+0x3a>
 8006958:	4ba7      	ldr	r3, [pc, #668]	; (8006bf8 <_dtoa_r+0x2d0>)
 800695a:	21ea      	movs	r1, #234	; 0xea
 800695c:	48a7      	ldr	r0, [pc, #668]	; (8006bfc <_dtoa_r+0x2d4>)
 800695e:	f001 fe45 	bl	80085ec <__assert_func>
 8006962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006966:	6005      	str	r5, [r0, #0]
 8006968:	60c5      	str	r5, [r0, #12]
 800696a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	b151      	cbz	r1, 8006986 <_dtoa_r+0x5e>
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	604a      	str	r2, [r1, #4]
 8006974:	2301      	movs	r3, #1
 8006976:	4093      	lsls	r3, r2
 8006978:	608b      	str	r3, [r1, #8]
 800697a:	4620      	mov	r0, r4
 800697c:	f001 f83c 	bl	80079f8 <_Bfree>
 8006980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	1e3b      	subs	r3, r7, #0
 8006988:	bfaa      	itet	ge
 800698a:	2300      	movge	r3, #0
 800698c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006990:	f8c8 3000 	strge.w	r3, [r8]
 8006994:	4b9a      	ldr	r3, [pc, #616]	; (8006c00 <_dtoa_r+0x2d8>)
 8006996:	bfbc      	itt	lt
 8006998:	2201      	movlt	r2, #1
 800699a:	f8c8 2000 	strlt.w	r2, [r8]
 800699e:	ea33 030b 	bics.w	r3, r3, fp
 80069a2:	d11b      	bne.n	80069dc <_dtoa_r+0xb4>
 80069a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069b0:	4333      	orrs	r3, r6
 80069b2:	f000 8592 	beq.w	80074da <_dtoa_r+0xbb2>
 80069b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069b8:	b963      	cbnz	r3, 80069d4 <_dtoa_r+0xac>
 80069ba:	4b92      	ldr	r3, [pc, #584]	; (8006c04 <_dtoa_r+0x2dc>)
 80069bc:	e022      	b.n	8006a04 <_dtoa_r+0xdc>
 80069be:	4b92      	ldr	r3, [pc, #584]	; (8006c08 <_dtoa_r+0x2e0>)
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	3308      	adds	r3, #8
 80069c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	9801      	ldr	r0, [sp, #4]
 80069ca:	b013      	add	sp, #76	; 0x4c
 80069cc:	ecbd 8b04 	vpop	{d8-d9}
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	4b8b      	ldr	r3, [pc, #556]	; (8006c04 <_dtoa_r+0x2dc>)
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	3303      	adds	r3, #3
 80069da:	e7f3      	b.n	80069c4 <_dtoa_r+0x9c>
 80069dc:	2200      	movs	r2, #0
 80069de:	2300      	movs	r3, #0
 80069e0:	4650      	mov	r0, sl
 80069e2:	4659      	mov	r1, fp
 80069e4:	f7fa f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80069e8:	ec4b ab19 	vmov	d9, sl, fp
 80069ec:	4680      	mov	r8, r0
 80069ee:	b158      	cbz	r0, 8006a08 <_dtoa_r+0xe0>
 80069f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069f2:	2301      	movs	r3, #1
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 856b 	beq.w	80074d4 <_dtoa_r+0xbac>
 80069fe:	4883      	ldr	r0, [pc, #524]	; (8006c0c <_dtoa_r+0x2e4>)
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	1e43      	subs	r3, r0, #1
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	e7df      	b.n	80069c8 <_dtoa_r+0xa0>
 8006a08:	ec4b ab10 	vmov	d0, sl, fp
 8006a0c:	aa10      	add	r2, sp, #64	; 0x40
 8006a0e:	a911      	add	r1, sp, #68	; 0x44
 8006a10:	4620      	mov	r0, r4
 8006a12:	f001 fad9 	bl	8007fc8 <__d2b>
 8006a16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a1a:	ee08 0a10 	vmov	s16, r0
 8006a1e:	2d00      	cmp	r5, #0
 8006a20:	f000 8084 	beq.w	8006b2c <_dtoa_r+0x204>
 8006a24:	ee19 3a90 	vmov	r3, s19
 8006a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a30:	4656      	mov	r6, sl
 8006a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a3e:	4b74      	ldr	r3, [pc, #464]	; (8006c10 <_dtoa_r+0x2e8>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7f9 fc1f 	bl	8000288 <__aeabi_dsub>
 8006a4a:	a365      	add	r3, pc, #404	; (adr r3, 8006be0 <_dtoa_r+0x2b8>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fdd2 	bl	80005f8 <__aeabi_dmul>
 8006a54:	a364      	add	r3, pc, #400	; (adr r3, 8006be8 <_dtoa_r+0x2c0>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 fc17 	bl	800028c <__adddf3>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	4628      	mov	r0, r5
 8006a62:	460f      	mov	r7, r1
 8006a64:	f7f9 fd5e 	bl	8000524 <__aeabi_i2d>
 8006a68:	a361      	add	r3, pc, #388	; (adr r3, 8006bf0 <_dtoa_r+0x2c8>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 fdc3 	bl	80005f8 <__aeabi_dmul>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7f9 fc07 	bl	800028c <__adddf3>
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	f7fa f869 	bl	8000b58 <__aeabi_d2iz>
 8006a86:	2200      	movs	r2, #0
 8006a88:	9000      	str	r0, [sp, #0]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7fa f824 	bl	8000adc <__aeabi_dcmplt>
 8006a94:	b150      	cbz	r0, 8006aac <_dtoa_r+0x184>
 8006a96:	9800      	ldr	r0, [sp, #0]
 8006a98:	f7f9 fd44 	bl	8000524 <__aeabi_i2d>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7fa f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa4:	b910      	cbnz	r0, 8006aac <_dtoa_r+0x184>
 8006aa6:	9b00      	ldr	r3, [sp, #0]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	9b00      	ldr	r3, [sp, #0]
 8006aae:	2b16      	cmp	r3, #22
 8006ab0:	d85a      	bhi.n	8006b68 <_dtoa_r+0x240>
 8006ab2:	9a00      	ldr	r2, [sp, #0]
 8006ab4:	4b57      	ldr	r3, [pc, #348]	; (8006c14 <_dtoa_r+0x2ec>)
 8006ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	ec51 0b19 	vmov	r0, r1, d9
 8006ac2:	f7fa f80b 	bl	8000adc <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d050      	beq.n	8006b6c <_dtoa_r+0x244>
 8006aca:	9b00      	ldr	r3, [sp, #0]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ad6:	1b5d      	subs	r5, r3, r5
 8006ad8:	1e6b      	subs	r3, r5, #1
 8006ada:	9305      	str	r3, [sp, #20]
 8006adc:	bf45      	ittet	mi
 8006ade:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ae2:	9304      	strmi	r3, [sp, #16]
 8006ae4:	2300      	movpl	r3, #0
 8006ae6:	2300      	movmi	r3, #0
 8006ae8:	bf4c      	ite	mi
 8006aea:	9305      	strmi	r3, [sp, #20]
 8006aec:	9304      	strpl	r3, [sp, #16]
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	db3d      	blt.n	8006b70 <_dtoa_r+0x248>
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	9a00      	ldr	r2, [sp, #0]
 8006af8:	920a      	str	r2, [sp, #40]	; 0x28
 8006afa:	4413      	add	r3, r2
 8006afc:	9305      	str	r3, [sp, #20]
 8006afe:	2300      	movs	r3, #0
 8006b00:	9307      	str	r3, [sp, #28]
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	2b09      	cmp	r3, #9
 8006b06:	f200 8089 	bhi.w	8006c1c <_dtoa_r+0x2f4>
 8006b0a:	2b05      	cmp	r3, #5
 8006b0c:	bfc4      	itt	gt
 8006b0e:	3b04      	subgt	r3, #4
 8006b10:	9306      	strgt	r3, [sp, #24]
 8006b12:	9b06      	ldr	r3, [sp, #24]
 8006b14:	f1a3 0302 	sub.w	r3, r3, #2
 8006b18:	bfcc      	ite	gt
 8006b1a:	2500      	movgt	r5, #0
 8006b1c:	2501      	movle	r5, #1
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	f200 8087 	bhi.w	8006c32 <_dtoa_r+0x30a>
 8006b24:	e8df f003 	tbb	[pc, r3]
 8006b28:	59383a2d 	.word	0x59383a2d
 8006b2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b30:	441d      	add	r5, r3
 8006b32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	bfc1      	itttt	gt
 8006b3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b42:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b4a:	bfda      	itte	le
 8006b4c:	f1c3 0320 	rsble	r3, r3, #32
 8006b50:	fa06 f003 	lslle.w	r0, r6, r3
 8006b54:	4318      	orrgt	r0, r3
 8006b56:	f7f9 fcd5 	bl	8000504 <__aeabi_ui2d>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b62:	3d01      	subs	r5, #1
 8006b64:	930e      	str	r3, [sp, #56]	; 0x38
 8006b66:	e76a      	b.n	8006a3e <_dtoa_r+0x116>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e7b2      	b.n	8006ad2 <_dtoa_r+0x1aa>
 8006b6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b6e:	e7b1      	b.n	8006ad4 <_dtoa_r+0x1ac>
 8006b70:	9b04      	ldr	r3, [sp, #16]
 8006b72:	9a00      	ldr	r2, [sp, #0]
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	4253      	negs	r3, r2
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b80:	e7bf      	b.n	8006b02 <_dtoa_r+0x1da>
 8006b82:	2300      	movs	r3, #0
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc55      	bgt.n	8006c38 <_dtoa_r+0x310>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b92:	461a      	mov	r2, r3
 8006b94:	9209      	str	r2, [sp, #36]	; 0x24
 8006b96:	e00c      	b.n	8006bb2 <_dtoa_r+0x28a>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e7f3      	b.n	8006b84 <_dtoa_r+0x25c>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	9b00      	ldr	r3, [sp, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	9303      	str	r3, [sp, #12]
 8006bae:	bfb8      	it	lt
 8006bb0:	2301      	movlt	r3, #1
 8006bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	6042      	str	r2, [r0, #4]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	f102 0614 	add.w	r6, r2, #20
 8006bbe:	429e      	cmp	r6, r3
 8006bc0:	6841      	ldr	r1, [r0, #4]
 8006bc2:	d93d      	bls.n	8006c40 <_dtoa_r+0x318>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fed7 	bl	8007978 <_Balloc>
 8006bca:	9001      	str	r0, [sp, #4]
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d13b      	bne.n	8006c48 <_dtoa_r+0x320>
 8006bd0:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <_dtoa_r+0x2f0>)
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bd8:	e6c0      	b.n	800695c <_dtoa_r+0x34>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e7df      	b.n	8006b9e <_dtoa_r+0x276>
 8006bde:	bf00      	nop
 8006be0:	636f4361 	.word	0x636f4361
 8006be4:	3fd287a7 	.word	0x3fd287a7
 8006be8:	8b60c8b3 	.word	0x8b60c8b3
 8006bec:	3fc68a28 	.word	0x3fc68a28
 8006bf0:	509f79fb 	.word	0x509f79fb
 8006bf4:	3fd34413 	.word	0x3fd34413
 8006bf8:	080093d5 	.word	0x080093d5
 8006bfc:	080093ec 	.word	0x080093ec
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	080093d1 	.word	0x080093d1
 8006c08:	080093c8 	.word	0x080093c8
 8006c0c:	080093a5 	.word	0x080093a5
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	08009540 	.word	0x08009540
 8006c18:	08009447 	.word	0x08009447
 8006c1c:	2501      	movs	r5, #1
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9306      	str	r3, [sp, #24]
 8006c22:	9508      	str	r5, [sp, #32]
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295
 8006c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2312      	movs	r3, #18
 8006c30:	e7b0      	b.n	8006b94 <_dtoa_r+0x26c>
 8006c32:	2301      	movs	r3, #1
 8006c34:	9308      	str	r3, [sp, #32]
 8006c36:	e7f5      	b.n	8006c24 <_dtoa_r+0x2fc>
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c3e:	e7b8      	b.n	8006bb2 <_dtoa_r+0x28a>
 8006c40:	3101      	adds	r1, #1
 8006c42:	6041      	str	r1, [r0, #4]
 8006c44:	0052      	lsls	r2, r2, #1
 8006c46:	e7b8      	b.n	8006bba <_dtoa_r+0x292>
 8006c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4a:	9a01      	ldr	r2, [sp, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	2b0e      	cmp	r3, #14
 8006c52:	f200 809d 	bhi.w	8006d90 <_dtoa_r+0x468>
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	f000 809a 	beq.w	8006d90 <_dtoa_r+0x468>
 8006c5c:	9b00      	ldr	r3, [sp, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dd32      	ble.n	8006cc8 <_dtoa_r+0x3a0>
 8006c62:	4ab7      	ldr	r2, [pc, #732]	; (8006f40 <_dtoa_r+0x618>)
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c70:	9b00      	ldr	r3, [sp, #0]
 8006c72:	05d8      	lsls	r0, r3, #23
 8006c74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c78:	d516      	bpl.n	8006ca8 <_dtoa_r+0x380>
 8006c7a:	4bb2      	ldr	r3, [pc, #712]	; (8006f44 <_dtoa_r+0x61c>)
 8006c7c:	ec51 0b19 	vmov	r0, r1, d9
 8006c80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c84:	f7f9 fde2 	bl	800084c <__aeabi_ddiv>
 8006c88:	f007 070f 	and.w	r7, r7, #15
 8006c8c:	4682      	mov	sl, r0
 8006c8e:	468b      	mov	fp, r1
 8006c90:	2503      	movs	r5, #3
 8006c92:	4eac      	ldr	r6, [pc, #688]	; (8006f44 <_dtoa_r+0x61c>)
 8006c94:	b957      	cbnz	r7, 8006cac <_dtoa_r+0x384>
 8006c96:	4642      	mov	r2, r8
 8006c98:	464b      	mov	r3, r9
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	f7f9 fdd5 	bl	800084c <__aeabi_ddiv>
 8006ca2:	4682      	mov	sl, r0
 8006ca4:	468b      	mov	fp, r1
 8006ca6:	e028      	b.n	8006cfa <_dtoa_r+0x3d2>
 8006ca8:	2502      	movs	r5, #2
 8006caa:	e7f2      	b.n	8006c92 <_dtoa_r+0x36a>
 8006cac:	07f9      	lsls	r1, r7, #31
 8006cae:	d508      	bpl.n	8006cc2 <_dtoa_r+0x39a>
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cb8:	f7f9 fc9e 	bl	80005f8 <__aeabi_dmul>
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	4689      	mov	r9, r1
 8006cc2:	107f      	asrs	r7, r7, #1
 8006cc4:	3608      	adds	r6, #8
 8006cc6:	e7e5      	b.n	8006c94 <_dtoa_r+0x36c>
 8006cc8:	f000 809b 	beq.w	8006e02 <_dtoa_r+0x4da>
 8006ccc:	9b00      	ldr	r3, [sp, #0]
 8006cce:	4f9d      	ldr	r7, [pc, #628]	; (8006f44 <_dtoa_r+0x61c>)
 8006cd0:	425e      	negs	r6, r3
 8006cd2:	4b9b      	ldr	r3, [pc, #620]	; (8006f40 <_dtoa_r+0x618>)
 8006cd4:	f006 020f 	and.w	r2, r6, #15
 8006cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	ec51 0b19 	vmov	r0, r1, d9
 8006ce4:	f7f9 fc88 	bl	80005f8 <__aeabi_dmul>
 8006ce8:	1136      	asrs	r6, r6, #4
 8006cea:	4682      	mov	sl, r0
 8006cec:	468b      	mov	fp, r1
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2502      	movs	r5, #2
 8006cf2:	2e00      	cmp	r6, #0
 8006cf4:	d17a      	bne.n	8006dec <_dtoa_r+0x4c4>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1d3      	bne.n	8006ca2 <_dtoa_r+0x37a>
 8006cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8082 	beq.w	8006e06 <_dtoa_r+0x4de>
 8006d02:	4b91      	ldr	r3, [pc, #580]	; (8006f48 <_dtoa_r+0x620>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	4650      	mov	r0, sl
 8006d08:	4659      	mov	r1, fp
 8006d0a:	f7f9 fee7 	bl	8000adc <__aeabi_dcmplt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d079      	beq.n	8006e06 <_dtoa_r+0x4de>
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d076      	beq.n	8006e06 <_dtoa_r+0x4de>
 8006d18:	9b02      	ldr	r3, [sp, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dd36      	ble.n	8006d8c <_dtoa_r+0x464>
 8006d1e:	9b00      	ldr	r3, [sp, #0]
 8006d20:	4650      	mov	r0, sl
 8006d22:	4659      	mov	r1, fp
 8006d24:	1e5f      	subs	r7, r3, #1
 8006d26:	2200      	movs	r2, #0
 8006d28:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <_dtoa_r+0x624>)
 8006d2a:	f7f9 fc65 	bl	80005f8 <__aeabi_dmul>
 8006d2e:	9e02      	ldr	r6, [sp, #8]
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	3501      	adds	r5, #1
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7f9 fbf4 	bl	8000524 <__aeabi_i2d>
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	465b      	mov	r3, fp
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	4b82      	ldr	r3, [pc, #520]	; (8006f50 <_dtoa_r+0x628>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	f7f9 faa0 	bl	800028c <__adddf3>
 8006d4c:	46d0      	mov	r8, sl
 8006d4e:	46d9      	mov	r9, fp
 8006d50:	4682      	mov	sl, r0
 8006d52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006d56:	2e00      	cmp	r6, #0
 8006d58:	d158      	bne.n	8006e0c <_dtoa_r+0x4e4>
 8006d5a:	4b7e      	ldr	r3, [pc, #504]	; (8006f54 <_dtoa_r+0x62c>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	f7f9 fa91 	bl	8000288 <__aeabi_dsub>
 8006d66:	4652      	mov	r2, sl
 8006d68:	465b      	mov	r3, fp
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	f7f9 fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f040 8295 	bne.w	80072a2 <_dtoa_r+0x97a>
 8006d78:	4652      	mov	r2, sl
 8006d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 feab 	bl	8000adc <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f040 8289 	bne.w	800729e <_dtoa_r+0x976>
 8006d8c:	ec5b ab19 	vmov	sl, fp, d9
 8006d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f2c0 8148 	blt.w	8007028 <_dtoa_r+0x700>
 8006d98:	9a00      	ldr	r2, [sp, #0]
 8006d9a:	2a0e      	cmp	r2, #14
 8006d9c:	f300 8144 	bgt.w	8007028 <_dtoa_r+0x700>
 8006da0:	4b67      	ldr	r3, [pc, #412]	; (8006f40 <_dtoa_r+0x618>)
 8006da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f280 80d5 	bge.w	8006f5c <_dtoa_r+0x634>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f300 80d1 	bgt.w	8006f5c <_dtoa_r+0x634>
 8006dba:	f040 826f 	bne.w	800729c <_dtoa_r+0x974>
 8006dbe:	4b65      	ldr	r3, [pc, #404]	; (8006f54 <_dtoa_r+0x62c>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	f7f9 fc17 	bl	80005f8 <__aeabi_dmul>
 8006dca:	4652      	mov	r2, sl
 8006dcc:	465b      	mov	r3, fp
 8006dce:	f7f9 fe99 	bl	8000b04 <__aeabi_dcmpge>
 8006dd2:	9e03      	ldr	r6, [sp, #12]
 8006dd4:	4637      	mov	r7, r6
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f040 8245 	bne.w	8007266 <_dtoa_r+0x93e>
 8006ddc:	9d01      	ldr	r5, [sp, #4]
 8006dde:	2331      	movs	r3, #49	; 0x31
 8006de0:	f805 3b01 	strb.w	r3, [r5], #1
 8006de4:	9b00      	ldr	r3, [sp, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	e240      	b.n	800726e <_dtoa_r+0x946>
 8006dec:	07f2      	lsls	r2, r6, #31
 8006dee:	d505      	bpl.n	8006dfc <_dtoa_r+0x4d4>
 8006df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df4:	f7f9 fc00 	bl	80005f8 <__aeabi_dmul>
 8006df8:	3501      	adds	r5, #1
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	1076      	asrs	r6, r6, #1
 8006dfe:	3708      	adds	r7, #8
 8006e00:	e777      	b.n	8006cf2 <_dtoa_r+0x3ca>
 8006e02:	2502      	movs	r5, #2
 8006e04:	e779      	b.n	8006cfa <_dtoa_r+0x3d2>
 8006e06:	9f00      	ldr	r7, [sp, #0]
 8006e08:	9e03      	ldr	r6, [sp, #12]
 8006e0a:	e794      	b.n	8006d36 <_dtoa_r+0x40e>
 8006e0c:	9901      	ldr	r1, [sp, #4]
 8006e0e:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <_dtoa_r+0x618>)
 8006e10:	4431      	add	r1, r6
 8006e12:	910d      	str	r1, [sp, #52]	; 0x34
 8006e14:	9908      	ldr	r1, [sp, #32]
 8006e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	d043      	beq.n	8006eaa <_dtoa_r+0x582>
 8006e22:	494d      	ldr	r1, [pc, #308]	; (8006f58 <_dtoa_r+0x630>)
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7f9 fd11 	bl	800084c <__aeabi_ddiv>
 8006e2a:	4652      	mov	r2, sl
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	f7f9 fa2b 	bl	8000288 <__aeabi_dsub>
 8006e32:	9d01      	ldr	r5, [sp, #4]
 8006e34:	4682      	mov	sl, r0
 8006e36:	468b      	mov	fp, r1
 8006e38:	4649      	mov	r1, r9
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f7f9 fe8c 	bl	8000b58 <__aeabi_d2iz>
 8006e40:	4606      	mov	r6, r0
 8006e42:	f7f9 fb6f 	bl	8000524 <__aeabi_i2d>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	f7f9 fa1b 	bl	8000288 <__aeabi_dsub>
 8006e52:	3630      	adds	r6, #48	; 0x30
 8006e54:	f805 6b01 	strb.w	r6, [r5], #1
 8006e58:	4652      	mov	r2, sl
 8006e5a:	465b      	mov	r3, fp
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	4689      	mov	r9, r1
 8006e60:	f7f9 fe3c 	bl	8000adc <__aeabi_dcmplt>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d163      	bne.n	8006f30 <_dtoa_r+0x608>
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4936      	ldr	r1, [pc, #216]	; (8006f48 <_dtoa_r+0x620>)
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f7f9 fa0a 	bl	8000288 <__aeabi_dsub>
 8006e74:	4652      	mov	r2, sl
 8006e76:	465b      	mov	r3, fp
 8006e78:	f7f9 fe30 	bl	8000adc <__aeabi_dcmplt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f040 80b5 	bne.w	8006fec <_dtoa_r+0x6c4>
 8006e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e84:	429d      	cmp	r5, r3
 8006e86:	d081      	beq.n	8006d8c <_dtoa_r+0x464>
 8006e88:	4b30      	ldr	r3, [pc, #192]	; (8006f4c <_dtoa_r+0x624>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	4659      	mov	r1, fp
 8006e90:	f7f9 fbb2 	bl	80005f8 <__aeabi_dmul>
 8006e94:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <_dtoa_r+0x624>)
 8006e96:	4682      	mov	sl, r0
 8006e98:	468b      	mov	fp, r1
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f7f9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	e7c6      	b.n	8006e38 <_dtoa_r+0x510>
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	f7f9 fba3 	bl	80005f8 <__aeabi_dmul>
 8006eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb4:	9d01      	ldr	r5, [sp, #4]
 8006eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eb8:	4682      	mov	sl, r0
 8006eba:	468b      	mov	fp, r1
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	f7f9 fe4a 	bl	8000b58 <__aeabi_d2iz>
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	f7f9 fb2d 	bl	8000524 <__aeabi_i2d>
 8006eca:	3630      	adds	r6, #48	; 0x30
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 f9d8 	bl	8000288 <__aeabi_dsub>
 8006ed8:	f805 6b01 	strb.w	r6, [r5], #1
 8006edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	4689      	mov	r9, r1
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	d124      	bne.n	8006f34 <_dtoa_r+0x60c>
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <_dtoa_r+0x630>)
 8006eec:	4650      	mov	r0, sl
 8006eee:	4659      	mov	r1, fp
 8006ef0:	f7f9 f9cc 	bl	800028c <__adddf3>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4649      	mov	r1, r9
 8006efc:	f7f9 fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d173      	bne.n	8006fec <_dtoa_r+0x6c4>
 8006f04:	4652      	mov	r2, sl
 8006f06:	465b      	mov	r3, fp
 8006f08:	4913      	ldr	r1, [pc, #76]	; (8006f58 <_dtoa_r+0x630>)
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f7f9 f9bc 	bl	8000288 <__aeabi_dsub>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	f7f9 fde0 	bl	8000adc <__aeabi_dcmplt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f43f af35 	beq.w	8006d8c <_dtoa_r+0x464>
 8006f22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f24:	1e6b      	subs	r3, r5, #1
 8006f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d0f8      	beq.n	8006f22 <_dtoa_r+0x5fa>
 8006f30:	9700      	str	r7, [sp, #0]
 8006f32:	e049      	b.n	8006fc8 <_dtoa_r+0x6a0>
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <_dtoa_r+0x624>)
 8006f36:	f7f9 fb5f 	bl	80005f8 <__aeabi_dmul>
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	4689      	mov	r9, r1
 8006f3e:	e7bd      	b.n	8006ebc <_dtoa_r+0x594>
 8006f40:	08009540 	.word	0x08009540
 8006f44:	08009518 	.word	0x08009518
 8006f48:	3ff00000 	.word	0x3ff00000
 8006f4c:	40240000 	.word	0x40240000
 8006f50:	401c0000 	.word	0x401c0000
 8006f54:	40140000 	.word	0x40140000
 8006f58:	3fe00000 	.word	0x3fe00000
 8006f5c:	9d01      	ldr	r5, [sp, #4]
 8006f5e:	4656      	mov	r6, sl
 8006f60:	465f      	mov	r7, fp
 8006f62:	4642      	mov	r2, r8
 8006f64:	464b      	mov	r3, r9
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 fc6f 	bl	800084c <__aeabi_ddiv>
 8006f6e:	f7f9 fdf3 	bl	8000b58 <__aeabi_d2iz>
 8006f72:	4682      	mov	sl, r0
 8006f74:	f7f9 fad6 	bl	8000524 <__aeabi_i2d>
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	f7f9 fb3c 	bl	80005f8 <__aeabi_dmul>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f8c:	f7f9 f97c 	bl	8000288 <__aeabi_dsub>
 8006f90:	f805 6b01 	strb.w	r6, [r5], #1
 8006f94:	9e01      	ldr	r6, [sp, #4]
 8006f96:	9f03      	ldr	r7, [sp, #12]
 8006f98:	1bae      	subs	r6, r5, r6
 8006f9a:	42b7      	cmp	r7, r6
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	d135      	bne.n	800700e <_dtoa_r+0x6e6>
 8006fa2:	f7f9 f973 	bl	800028c <__adddf3>
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	464b      	mov	r3, r9
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	f7f9 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8006fb2:	b9d0      	cbnz	r0, 8006fea <_dtoa_r+0x6c2>
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	4630      	mov	r0, r6
 8006fba:	4639      	mov	r1, r7
 8006fbc:	f7f9 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fc0:	b110      	cbz	r0, 8006fc8 <_dtoa_r+0x6a0>
 8006fc2:	f01a 0f01 	tst.w	sl, #1
 8006fc6:	d110      	bne.n	8006fea <_dtoa_r+0x6c2>
 8006fc8:	4620      	mov	r0, r4
 8006fca:	ee18 1a10 	vmov	r1, s16
 8006fce:	f000 fd13 	bl	80079f8 <_Bfree>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9800      	ldr	r0, [sp, #0]
 8006fd6:	702b      	strb	r3, [r5, #0]
 8006fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fda:	3001      	adds	r0, #1
 8006fdc:	6018      	str	r0, [r3, #0]
 8006fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f43f acf1 	beq.w	80069c8 <_dtoa_r+0xa0>
 8006fe6:	601d      	str	r5, [r3, #0]
 8006fe8:	e4ee      	b.n	80069c8 <_dtoa_r+0xa0>
 8006fea:	9f00      	ldr	r7, [sp, #0]
 8006fec:	462b      	mov	r3, r5
 8006fee:	461d      	mov	r5, r3
 8006ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ff4:	2a39      	cmp	r2, #57	; 0x39
 8006ff6:	d106      	bne.n	8007006 <_dtoa_r+0x6de>
 8006ff8:	9a01      	ldr	r2, [sp, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d1f7      	bne.n	8006fee <_dtoa_r+0x6c6>
 8006ffe:	9901      	ldr	r1, [sp, #4]
 8007000:	2230      	movs	r2, #48	; 0x30
 8007002:	3701      	adds	r7, #1
 8007004:	700a      	strb	r2, [r1, #0]
 8007006:	781a      	ldrb	r2, [r3, #0]
 8007008:	3201      	adds	r2, #1
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e790      	b.n	8006f30 <_dtoa_r+0x608>
 800700e:	4ba6      	ldr	r3, [pc, #664]	; (80072a8 <_dtoa_r+0x980>)
 8007010:	2200      	movs	r2, #0
 8007012:	f7f9 faf1 	bl	80005f8 <__aeabi_dmul>
 8007016:	2200      	movs	r2, #0
 8007018:	2300      	movs	r3, #0
 800701a:	4606      	mov	r6, r0
 800701c:	460f      	mov	r7, r1
 800701e:	f7f9 fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8007022:	2800      	cmp	r0, #0
 8007024:	d09d      	beq.n	8006f62 <_dtoa_r+0x63a>
 8007026:	e7cf      	b.n	8006fc8 <_dtoa_r+0x6a0>
 8007028:	9a08      	ldr	r2, [sp, #32]
 800702a:	2a00      	cmp	r2, #0
 800702c:	f000 80d7 	beq.w	80071de <_dtoa_r+0x8b6>
 8007030:	9a06      	ldr	r2, [sp, #24]
 8007032:	2a01      	cmp	r2, #1
 8007034:	f300 80ba 	bgt.w	80071ac <_dtoa_r+0x884>
 8007038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800703a:	2a00      	cmp	r2, #0
 800703c:	f000 80b2 	beq.w	80071a4 <_dtoa_r+0x87c>
 8007040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007044:	9e07      	ldr	r6, [sp, #28]
 8007046:	9d04      	ldr	r5, [sp, #16]
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	441a      	add	r2, r3
 800704c:	9204      	str	r2, [sp, #16]
 800704e:	9a05      	ldr	r2, [sp, #20]
 8007050:	2101      	movs	r1, #1
 8007052:	441a      	add	r2, r3
 8007054:	4620      	mov	r0, r4
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	f000 fd86 	bl	8007b68 <__i2b>
 800705c:	4607      	mov	r7, r0
 800705e:	2d00      	cmp	r5, #0
 8007060:	dd0c      	ble.n	800707c <_dtoa_r+0x754>
 8007062:	9b05      	ldr	r3, [sp, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	dd09      	ble.n	800707c <_dtoa_r+0x754>
 8007068:	42ab      	cmp	r3, r5
 800706a:	9a04      	ldr	r2, [sp, #16]
 800706c:	bfa8      	it	ge
 800706e:	462b      	movge	r3, r5
 8007070:	1ad2      	subs	r2, r2, r3
 8007072:	9204      	str	r2, [sp, #16]
 8007074:	9a05      	ldr	r2, [sp, #20]
 8007076:	1aed      	subs	r5, r5, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	b31b      	cbz	r3, 80070c8 <_dtoa_r+0x7a0>
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80af 	beq.w	80071e6 <_dtoa_r+0x8be>
 8007088:	2e00      	cmp	r6, #0
 800708a:	dd13      	ble.n	80070b4 <_dtoa_r+0x78c>
 800708c:	4639      	mov	r1, r7
 800708e:	4632      	mov	r2, r6
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fe29 	bl	8007ce8 <__pow5mult>
 8007096:	ee18 2a10 	vmov	r2, s16
 800709a:	4601      	mov	r1, r0
 800709c:	4607      	mov	r7, r0
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fd78 	bl	8007b94 <__multiply>
 80070a4:	ee18 1a10 	vmov	r1, s16
 80070a8:	4680      	mov	r8, r0
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fca4 	bl	80079f8 <_Bfree>
 80070b0:	ee08 8a10 	vmov	s16, r8
 80070b4:	9b07      	ldr	r3, [sp, #28]
 80070b6:	1b9a      	subs	r2, r3, r6
 80070b8:	d006      	beq.n	80070c8 <_dtoa_r+0x7a0>
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fe12 	bl	8007ce8 <__pow5mult>
 80070c4:	ee08 0a10 	vmov	s16, r0
 80070c8:	2101      	movs	r1, #1
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fd4c 	bl	8007b68 <__i2b>
 80070d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	f340 8088 	ble.w	80071ea <_dtoa_r+0x8c2>
 80070da:	461a      	mov	r2, r3
 80070dc:	4601      	mov	r1, r0
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 fe02 	bl	8007ce8 <__pow5mult>
 80070e4:	9b06      	ldr	r3, [sp, #24]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	4606      	mov	r6, r0
 80070ea:	f340 8081 	ble.w	80071f0 <_dtoa_r+0x8c8>
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	6933      	ldr	r3, [r6, #16]
 80070f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070f8:	6918      	ldr	r0, [r3, #16]
 80070fa:	f000 fce5 	bl	8007ac8 <__hi0bits>
 80070fe:	f1c0 0020 	rsb	r0, r0, #32
 8007102:	9b05      	ldr	r3, [sp, #20]
 8007104:	4418      	add	r0, r3
 8007106:	f010 001f 	ands.w	r0, r0, #31
 800710a:	f000 8092 	beq.w	8007232 <_dtoa_r+0x90a>
 800710e:	f1c0 0320 	rsb	r3, r0, #32
 8007112:	2b04      	cmp	r3, #4
 8007114:	f340 808a 	ble.w	800722c <_dtoa_r+0x904>
 8007118:	f1c0 001c 	rsb	r0, r0, #28
 800711c:	9b04      	ldr	r3, [sp, #16]
 800711e:	4403      	add	r3, r0
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	4403      	add	r3, r0
 8007126:	4405      	add	r5, r0
 8007128:	9305      	str	r3, [sp, #20]
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd07      	ble.n	8007140 <_dtoa_r+0x818>
 8007130:	ee18 1a10 	vmov	r1, s16
 8007134:	461a      	mov	r2, r3
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fe30 	bl	8007d9c <__lshift>
 800713c:	ee08 0a10 	vmov	s16, r0
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dd05      	ble.n	8007152 <_dtoa_r+0x82a>
 8007146:	4631      	mov	r1, r6
 8007148:	461a      	mov	r2, r3
 800714a:	4620      	mov	r0, r4
 800714c:	f000 fe26 	bl	8007d9c <__lshift>
 8007150:	4606      	mov	r6, r0
 8007152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d06e      	beq.n	8007236 <_dtoa_r+0x90e>
 8007158:	ee18 0a10 	vmov	r0, s16
 800715c:	4631      	mov	r1, r6
 800715e:	f000 fe8d 	bl	8007e7c <__mcmp>
 8007162:	2800      	cmp	r0, #0
 8007164:	da67      	bge.n	8007236 <_dtoa_r+0x90e>
 8007166:	9b00      	ldr	r3, [sp, #0]
 8007168:	3b01      	subs	r3, #1
 800716a:	ee18 1a10 	vmov	r1, s16
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	220a      	movs	r2, #10
 8007172:	2300      	movs	r3, #0
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fc61 	bl	8007a3c <__multadd>
 800717a:	9b08      	ldr	r3, [sp, #32]
 800717c:	ee08 0a10 	vmov	s16, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 81b1 	beq.w	80074e8 <_dtoa_r+0xbc0>
 8007186:	2300      	movs	r3, #0
 8007188:	4639      	mov	r1, r7
 800718a:	220a      	movs	r2, #10
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fc55 	bl	8007a3c <__multadd>
 8007192:	9b02      	ldr	r3, [sp, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	4607      	mov	r7, r0
 8007198:	f300 808e 	bgt.w	80072b8 <_dtoa_r+0x990>
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	dc51      	bgt.n	8007246 <_dtoa_r+0x91e>
 80071a2:	e089      	b.n	80072b8 <_dtoa_r+0x990>
 80071a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071aa:	e74b      	b.n	8007044 <_dtoa_r+0x71c>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	1e5e      	subs	r6, r3, #1
 80071b0:	9b07      	ldr	r3, [sp, #28]
 80071b2:	42b3      	cmp	r3, r6
 80071b4:	bfbf      	itttt	lt
 80071b6:	9b07      	ldrlt	r3, [sp, #28]
 80071b8:	9607      	strlt	r6, [sp, #28]
 80071ba:	1af2      	sublt	r2, r6, r3
 80071bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071be:	bfb6      	itet	lt
 80071c0:	189b      	addlt	r3, r3, r2
 80071c2:	1b9e      	subge	r6, r3, r6
 80071c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	bfb8      	it	lt
 80071ca:	2600      	movlt	r6, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfb7      	itett	lt
 80071d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80071d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80071d8:	1a9d      	sublt	r5, r3, r2
 80071da:	2300      	movlt	r3, #0
 80071dc:	e734      	b.n	8007048 <_dtoa_r+0x720>
 80071de:	9e07      	ldr	r6, [sp, #28]
 80071e0:	9d04      	ldr	r5, [sp, #16]
 80071e2:	9f08      	ldr	r7, [sp, #32]
 80071e4:	e73b      	b.n	800705e <_dtoa_r+0x736>
 80071e6:	9a07      	ldr	r2, [sp, #28]
 80071e8:	e767      	b.n	80070ba <_dtoa_r+0x792>
 80071ea:	9b06      	ldr	r3, [sp, #24]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	dc18      	bgt.n	8007222 <_dtoa_r+0x8fa>
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	d115      	bne.n	8007222 <_dtoa_r+0x8fa>
 80071f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071fa:	b993      	cbnz	r3, 8007222 <_dtoa_r+0x8fa>
 80071fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007200:	0d1b      	lsrs	r3, r3, #20
 8007202:	051b      	lsls	r3, r3, #20
 8007204:	b183      	cbz	r3, 8007228 <_dtoa_r+0x900>
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	9b05      	ldr	r3, [sp, #20]
 800720e:	3301      	adds	r3, #1
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	f04f 0801 	mov.w	r8, #1
 8007216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	f47f af6a 	bne.w	80070f2 <_dtoa_r+0x7ca>
 800721e:	2001      	movs	r0, #1
 8007220:	e76f      	b.n	8007102 <_dtoa_r+0x7da>
 8007222:	f04f 0800 	mov.w	r8, #0
 8007226:	e7f6      	b.n	8007216 <_dtoa_r+0x8ee>
 8007228:	4698      	mov	r8, r3
 800722a:	e7f4      	b.n	8007216 <_dtoa_r+0x8ee>
 800722c:	f43f af7d 	beq.w	800712a <_dtoa_r+0x802>
 8007230:	4618      	mov	r0, r3
 8007232:	301c      	adds	r0, #28
 8007234:	e772      	b.n	800711c <_dtoa_r+0x7f4>
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc37      	bgt.n	80072ac <_dtoa_r+0x984>
 800723c:	9b06      	ldr	r3, [sp, #24]
 800723e:	2b02      	cmp	r3, #2
 8007240:	dd34      	ble.n	80072ac <_dtoa_r+0x984>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	9b02      	ldr	r3, [sp, #8]
 8007248:	b96b      	cbnz	r3, 8007266 <_dtoa_r+0x93e>
 800724a:	4631      	mov	r1, r6
 800724c:	2205      	movs	r2, #5
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fbf4 	bl	8007a3c <__multadd>
 8007254:	4601      	mov	r1, r0
 8007256:	4606      	mov	r6, r0
 8007258:	ee18 0a10 	vmov	r0, s16
 800725c:	f000 fe0e 	bl	8007e7c <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	f73f adbb 	bgt.w	8006ddc <_dtoa_r+0x4b4>
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	9d01      	ldr	r5, [sp, #4]
 800726a:	43db      	mvns	r3, r3
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	f04f 0800 	mov.w	r8, #0
 8007272:	4631      	mov	r1, r6
 8007274:	4620      	mov	r0, r4
 8007276:	f000 fbbf 	bl	80079f8 <_Bfree>
 800727a:	2f00      	cmp	r7, #0
 800727c:	f43f aea4 	beq.w	8006fc8 <_dtoa_r+0x6a0>
 8007280:	f1b8 0f00 	cmp.w	r8, #0
 8007284:	d005      	beq.n	8007292 <_dtoa_r+0x96a>
 8007286:	45b8      	cmp	r8, r7
 8007288:	d003      	beq.n	8007292 <_dtoa_r+0x96a>
 800728a:	4641      	mov	r1, r8
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fbb3 	bl	80079f8 <_Bfree>
 8007292:	4639      	mov	r1, r7
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fbaf 	bl	80079f8 <_Bfree>
 800729a:	e695      	b.n	8006fc8 <_dtoa_r+0x6a0>
 800729c:	2600      	movs	r6, #0
 800729e:	4637      	mov	r7, r6
 80072a0:	e7e1      	b.n	8007266 <_dtoa_r+0x93e>
 80072a2:	9700      	str	r7, [sp, #0]
 80072a4:	4637      	mov	r7, r6
 80072a6:	e599      	b.n	8006ddc <_dtoa_r+0x4b4>
 80072a8:	40240000 	.word	0x40240000
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80ca 	beq.w	8007448 <_dtoa_r+0xb20>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	9302      	str	r3, [sp, #8]
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dd05      	ble.n	80072c8 <_dtoa_r+0x9a0>
 80072bc:	4639      	mov	r1, r7
 80072be:	462a      	mov	r2, r5
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fd6b 	bl	8007d9c <__lshift>
 80072c6:	4607      	mov	r7, r0
 80072c8:	f1b8 0f00 	cmp.w	r8, #0
 80072cc:	d05b      	beq.n	8007386 <_dtoa_r+0xa5e>
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fb51 	bl	8007978 <_Balloc>
 80072d6:	4605      	mov	r5, r0
 80072d8:	b928      	cbnz	r0, 80072e6 <_dtoa_r+0x9be>
 80072da:	4b87      	ldr	r3, [pc, #540]	; (80074f8 <_dtoa_r+0xbd0>)
 80072dc:	4602      	mov	r2, r0
 80072de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072e2:	f7ff bb3b 	b.w	800695c <_dtoa_r+0x34>
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	3202      	adds	r2, #2
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	f107 010c 	add.w	r1, r7, #12
 80072f0:	300c      	adds	r0, #12
 80072f2:	f000 fb33 	bl	800795c <memcpy>
 80072f6:	2201      	movs	r2, #1
 80072f8:	4629      	mov	r1, r5
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fd4e 	bl	8007d9c <__lshift>
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	f103 0901 	add.w	r9, r3, #1
 8007306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800730a:	4413      	add	r3, r2
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	f00a 0301 	and.w	r3, sl, #1
 8007312:	46b8      	mov	r8, r7
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	4607      	mov	r7, r0
 8007318:	4631      	mov	r1, r6
 800731a:	ee18 0a10 	vmov	r0, s16
 800731e:	f7ff fa77 	bl	8006810 <quorem>
 8007322:	4641      	mov	r1, r8
 8007324:	9002      	str	r0, [sp, #8]
 8007326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800732a:	ee18 0a10 	vmov	r0, s16
 800732e:	f000 fda5 	bl	8007e7c <__mcmp>
 8007332:	463a      	mov	r2, r7
 8007334:	9003      	str	r0, [sp, #12]
 8007336:	4631      	mov	r1, r6
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fdbb 	bl	8007eb4 <__mdiff>
 800733e:	68c2      	ldr	r2, [r0, #12]
 8007340:	f109 3bff 	add.w	fp, r9, #4294967295
 8007344:	4605      	mov	r5, r0
 8007346:	bb02      	cbnz	r2, 800738a <_dtoa_r+0xa62>
 8007348:	4601      	mov	r1, r0
 800734a:	ee18 0a10 	vmov	r0, s16
 800734e:	f000 fd95 	bl	8007e7c <__mcmp>
 8007352:	4602      	mov	r2, r0
 8007354:	4629      	mov	r1, r5
 8007356:	4620      	mov	r0, r4
 8007358:	9207      	str	r2, [sp, #28]
 800735a:	f000 fb4d 	bl	80079f8 <_Bfree>
 800735e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007362:	ea43 0102 	orr.w	r1, r3, r2
 8007366:	9b04      	ldr	r3, [sp, #16]
 8007368:	430b      	orrs	r3, r1
 800736a:	464d      	mov	r5, r9
 800736c:	d10f      	bne.n	800738e <_dtoa_r+0xa66>
 800736e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007372:	d02a      	beq.n	80073ca <_dtoa_r+0xaa2>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	dd02      	ble.n	8007380 <_dtoa_r+0xa58>
 800737a:	9b02      	ldr	r3, [sp, #8]
 800737c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007380:	f88b a000 	strb.w	sl, [fp]
 8007384:	e775      	b.n	8007272 <_dtoa_r+0x94a>
 8007386:	4638      	mov	r0, r7
 8007388:	e7ba      	b.n	8007300 <_dtoa_r+0x9d8>
 800738a:	2201      	movs	r2, #1
 800738c:	e7e2      	b.n	8007354 <_dtoa_r+0xa2c>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db04      	blt.n	800739e <_dtoa_r+0xa76>
 8007394:	9906      	ldr	r1, [sp, #24]
 8007396:	430b      	orrs	r3, r1
 8007398:	9904      	ldr	r1, [sp, #16]
 800739a:	430b      	orrs	r3, r1
 800739c:	d122      	bne.n	80073e4 <_dtoa_r+0xabc>
 800739e:	2a00      	cmp	r2, #0
 80073a0:	ddee      	ble.n	8007380 <_dtoa_r+0xa58>
 80073a2:	ee18 1a10 	vmov	r1, s16
 80073a6:	2201      	movs	r2, #1
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fcf7 	bl	8007d9c <__lshift>
 80073ae:	4631      	mov	r1, r6
 80073b0:	ee08 0a10 	vmov	s16, r0
 80073b4:	f000 fd62 	bl	8007e7c <__mcmp>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	dc03      	bgt.n	80073c4 <_dtoa_r+0xa9c>
 80073bc:	d1e0      	bne.n	8007380 <_dtoa_r+0xa58>
 80073be:	f01a 0f01 	tst.w	sl, #1
 80073c2:	d0dd      	beq.n	8007380 <_dtoa_r+0xa58>
 80073c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073c8:	d1d7      	bne.n	800737a <_dtoa_r+0xa52>
 80073ca:	2339      	movs	r3, #57	; 0x39
 80073cc:	f88b 3000 	strb.w	r3, [fp]
 80073d0:	462b      	mov	r3, r5
 80073d2:	461d      	mov	r5, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073da:	2a39      	cmp	r2, #57	; 0x39
 80073dc:	d071      	beq.n	80074c2 <_dtoa_r+0xb9a>
 80073de:	3201      	adds	r2, #1
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e746      	b.n	8007272 <_dtoa_r+0x94a>
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	dd07      	ble.n	80073f8 <_dtoa_r+0xad0>
 80073e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073ec:	d0ed      	beq.n	80073ca <_dtoa_r+0xaa2>
 80073ee:	f10a 0301 	add.w	r3, sl, #1
 80073f2:	f88b 3000 	strb.w	r3, [fp]
 80073f6:	e73c      	b.n	8007272 <_dtoa_r+0x94a>
 80073f8:	9b05      	ldr	r3, [sp, #20]
 80073fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80073fe:	4599      	cmp	r9, r3
 8007400:	d047      	beq.n	8007492 <_dtoa_r+0xb6a>
 8007402:	ee18 1a10 	vmov	r1, s16
 8007406:	2300      	movs	r3, #0
 8007408:	220a      	movs	r2, #10
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fb16 	bl	8007a3c <__multadd>
 8007410:	45b8      	cmp	r8, r7
 8007412:	ee08 0a10 	vmov	s16, r0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	f04f 020a 	mov.w	r2, #10
 800741e:	4641      	mov	r1, r8
 8007420:	4620      	mov	r0, r4
 8007422:	d106      	bne.n	8007432 <_dtoa_r+0xb0a>
 8007424:	f000 fb0a 	bl	8007a3c <__multadd>
 8007428:	4680      	mov	r8, r0
 800742a:	4607      	mov	r7, r0
 800742c:	f109 0901 	add.w	r9, r9, #1
 8007430:	e772      	b.n	8007318 <_dtoa_r+0x9f0>
 8007432:	f000 fb03 	bl	8007a3c <__multadd>
 8007436:	4639      	mov	r1, r7
 8007438:	4680      	mov	r8, r0
 800743a:	2300      	movs	r3, #0
 800743c:	220a      	movs	r2, #10
 800743e:	4620      	mov	r0, r4
 8007440:	f000 fafc 	bl	8007a3c <__multadd>
 8007444:	4607      	mov	r7, r0
 8007446:	e7f1      	b.n	800742c <_dtoa_r+0xb04>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	9d01      	ldr	r5, [sp, #4]
 800744e:	ee18 0a10 	vmov	r0, s16
 8007452:	4631      	mov	r1, r6
 8007454:	f7ff f9dc 	bl	8006810 <quorem>
 8007458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	f805 ab01 	strb.w	sl, [r5], #1
 8007462:	1aea      	subs	r2, r5, r3
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	4293      	cmp	r3, r2
 8007468:	dd09      	ble.n	800747e <_dtoa_r+0xb56>
 800746a:	ee18 1a10 	vmov	r1, s16
 800746e:	2300      	movs	r3, #0
 8007470:	220a      	movs	r2, #10
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fae2 	bl	8007a3c <__multadd>
 8007478:	ee08 0a10 	vmov	s16, r0
 800747c:	e7e7      	b.n	800744e <_dtoa_r+0xb26>
 800747e:	9b02      	ldr	r3, [sp, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfc8      	it	gt
 8007484:	461d      	movgt	r5, r3
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	bfd8      	it	le
 800748a:	2501      	movle	r5, #1
 800748c:	441d      	add	r5, r3
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	ee18 1a10 	vmov	r1, s16
 8007496:	2201      	movs	r2, #1
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fc7f 	bl	8007d9c <__lshift>
 800749e:	4631      	mov	r1, r6
 80074a0:	ee08 0a10 	vmov	s16, r0
 80074a4:	f000 fcea 	bl	8007e7c <__mcmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	dc91      	bgt.n	80073d0 <_dtoa_r+0xaa8>
 80074ac:	d102      	bne.n	80074b4 <_dtoa_r+0xb8c>
 80074ae:	f01a 0f01 	tst.w	sl, #1
 80074b2:	d18d      	bne.n	80073d0 <_dtoa_r+0xaa8>
 80074b4:	462b      	mov	r3, r5
 80074b6:	461d      	mov	r5, r3
 80074b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074bc:	2a30      	cmp	r2, #48	; 0x30
 80074be:	d0fa      	beq.n	80074b6 <_dtoa_r+0xb8e>
 80074c0:	e6d7      	b.n	8007272 <_dtoa_r+0x94a>
 80074c2:	9a01      	ldr	r2, [sp, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d184      	bne.n	80073d2 <_dtoa_r+0xaaa>
 80074c8:	9b00      	ldr	r3, [sp, #0]
 80074ca:	3301      	adds	r3, #1
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2331      	movs	r3, #49	; 0x31
 80074d0:	7013      	strb	r3, [r2, #0]
 80074d2:	e6ce      	b.n	8007272 <_dtoa_r+0x94a>
 80074d4:	4b09      	ldr	r3, [pc, #36]	; (80074fc <_dtoa_r+0xbd4>)
 80074d6:	f7ff ba95 	b.w	8006a04 <_dtoa_r+0xdc>
 80074da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f47f aa6e 	bne.w	80069be <_dtoa_r+0x96>
 80074e2:	4b07      	ldr	r3, [pc, #28]	; (8007500 <_dtoa_r+0xbd8>)
 80074e4:	f7ff ba8e 	b.w	8006a04 <_dtoa_r+0xdc>
 80074e8:	9b02      	ldr	r3, [sp, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dcae      	bgt.n	800744c <_dtoa_r+0xb24>
 80074ee:	9b06      	ldr	r3, [sp, #24]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	f73f aea8 	bgt.w	8007246 <_dtoa_r+0x91e>
 80074f6:	e7a9      	b.n	800744c <_dtoa_r+0xb24>
 80074f8:	08009447 	.word	0x08009447
 80074fc:	080093a4 	.word	0x080093a4
 8007500:	080093c8 	.word	0x080093c8

08007504 <__sflush_r>:
 8007504:	898a      	ldrh	r2, [r1, #12]
 8007506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750a:	4605      	mov	r5, r0
 800750c:	0710      	lsls	r0, r2, #28
 800750e:	460c      	mov	r4, r1
 8007510:	d458      	bmi.n	80075c4 <__sflush_r+0xc0>
 8007512:	684b      	ldr	r3, [r1, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dc05      	bgt.n	8007524 <__sflush_r+0x20>
 8007518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	dc02      	bgt.n	8007524 <__sflush_r+0x20>
 800751e:	2000      	movs	r0, #0
 8007520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007526:	2e00      	cmp	r6, #0
 8007528:	d0f9      	beq.n	800751e <__sflush_r+0x1a>
 800752a:	2300      	movs	r3, #0
 800752c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007530:	682f      	ldr	r7, [r5, #0]
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	d032      	beq.n	800759c <__sflush_r+0x98>
 8007536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	075a      	lsls	r2, r3, #29
 800753c:	d505      	bpl.n	800754a <__sflush_r+0x46>
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	1ac0      	subs	r0, r0, r3
 8007542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007544:	b10b      	cbz	r3, 800754a <__sflush_r+0x46>
 8007546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007548:	1ac0      	subs	r0, r0, r3
 800754a:	2300      	movs	r3, #0
 800754c:	4602      	mov	r2, r0
 800754e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007550:	6a21      	ldr	r1, [r4, #32]
 8007552:	4628      	mov	r0, r5
 8007554:	47b0      	blx	r6
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	d106      	bne.n	800756a <__sflush_r+0x66>
 800755c:	6829      	ldr	r1, [r5, #0]
 800755e:	291d      	cmp	r1, #29
 8007560:	d82c      	bhi.n	80075bc <__sflush_r+0xb8>
 8007562:	4a2a      	ldr	r2, [pc, #168]	; (800760c <__sflush_r+0x108>)
 8007564:	40ca      	lsrs	r2, r1
 8007566:	07d6      	lsls	r6, r2, #31
 8007568:	d528      	bpl.n	80075bc <__sflush_r+0xb8>
 800756a:	2200      	movs	r2, #0
 800756c:	6062      	str	r2, [r4, #4]
 800756e:	04d9      	lsls	r1, r3, #19
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	d504      	bpl.n	8007580 <__sflush_r+0x7c>
 8007576:	1c42      	adds	r2, r0, #1
 8007578:	d101      	bne.n	800757e <__sflush_r+0x7a>
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	b903      	cbnz	r3, 8007580 <__sflush_r+0x7c>
 800757e:	6560      	str	r0, [r4, #84]	; 0x54
 8007580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007582:	602f      	str	r7, [r5, #0]
 8007584:	2900      	cmp	r1, #0
 8007586:	d0ca      	beq.n	800751e <__sflush_r+0x1a>
 8007588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800758c:	4299      	cmp	r1, r3
 800758e:	d002      	beq.n	8007596 <__sflush_r+0x92>
 8007590:	4628      	mov	r0, r5
 8007592:	f000 fd8b 	bl	80080ac <_free_r>
 8007596:	2000      	movs	r0, #0
 8007598:	6360      	str	r0, [r4, #52]	; 0x34
 800759a:	e7c1      	b.n	8007520 <__sflush_r+0x1c>
 800759c:	6a21      	ldr	r1, [r4, #32]
 800759e:	2301      	movs	r3, #1
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b0      	blx	r6
 80075a4:	1c41      	adds	r1, r0, #1
 80075a6:	d1c7      	bne.n	8007538 <__sflush_r+0x34>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0c4      	beq.n	8007538 <__sflush_r+0x34>
 80075ae:	2b1d      	cmp	r3, #29
 80075b0:	d001      	beq.n	80075b6 <__sflush_r+0xb2>
 80075b2:	2b16      	cmp	r3, #22
 80075b4:	d101      	bne.n	80075ba <__sflush_r+0xb6>
 80075b6:	602f      	str	r7, [r5, #0]
 80075b8:	e7b1      	b.n	800751e <__sflush_r+0x1a>
 80075ba:	89a3      	ldrh	r3, [r4, #12]
 80075bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	e7ad      	b.n	8007520 <__sflush_r+0x1c>
 80075c4:	690f      	ldr	r7, [r1, #16]
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	d0a9      	beq.n	800751e <__sflush_r+0x1a>
 80075ca:	0793      	lsls	r3, r2, #30
 80075cc:	680e      	ldr	r6, [r1, #0]
 80075ce:	bf08      	it	eq
 80075d0:	694b      	ldreq	r3, [r1, #20]
 80075d2:	600f      	str	r7, [r1, #0]
 80075d4:	bf18      	it	ne
 80075d6:	2300      	movne	r3, #0
 80075d8:	eba6 0807 	sub.w	r8, r6, r7
 80075dc:	608b      	str	r3, [r1, #8]
 80075de:	f1b8 0f00 	cmp.w	r8, #0
 80075e2:	dd9c      	ble.n	800751e <__sflush_r+0x1a>
 80075e4:	6a21      	ldr	r1, [r4, #32]
 80075e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075e8:	4643      	mov	r3, r8
 80075ea:	463a      	mov	r2, r7
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b0      	blx	r6
 80075f0:	2800      	cmp	r0, #0
 80075f2:	dc06      	bgt.n	8007602 <__sflush_r+0xfe>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007600:	e78e      	b.n	8007520 <__sflush_r+0x1c>
 8007602:	4407      	add	r7, r0
 8007604:	eba8 0800 	sub.w	r8, r8, r0
 8007608:	e7e9      	b.n	80075de <__sflush_r+0xda>
 800760a:	bf00      	nop
 800760c:	20400001 	.word	0x20400001

08007610 <_fflush_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	690b      	ldr	r3, [r1, #16]
 8007614:	4605      	mov	r5, r0
 8007616:	460c      	mov	r4, r1
 8007618:	b913      	cbnz	r3, 8007620 <_fflush_r+0x10>
 800761a:	2500      	movs	r5, #0
 800761c:	4628      	mov	r0, r5
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	b118      	cbz	r0, 800762a <_fflush_r+0x1a>
 8007622:	6983      	ldr	r3, [r0, #24]
 8007624:	b90b      	cbnz	r3, 800762a <_fflush_r+0x1a>
 8007626:	f000 f887 	bl	8007738 <__sinit>
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <_fflush_r+0x6c>)
 800762c:	429c      	cmp	r4, r3
 800762e:	d11b      	bne.n	8007668 <_fflush_r+0x58>
 8007630:	686c      	ldr	r4, [r5, #4]
 8007632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0ef      	beq.n	800761a <_fflush_r+0xa>
 800763a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800763c:	07d0      	lsls	r0, r2, #31
 800763e:	d404      	bmi.n	800764a <_fflush_r+0x3a>
 8007640:	0599      	lsls	r1, r3, #22
 8007642:	d402      	bmi.n	800764a <_fflush_r+0x3a>
 8007644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007646:	f000 f91a 	bl	800787e <__retarget_lock_acquire_recursive>
 800764a:	4628      	mov	r0, r5
 800764c:	4621      	mov	r1, r4
 800764e:	f7ff ff59 	bl	8007504 <__sflush_r>
 8007652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007654:	07da      	lsls	r2, r3, #31
 8007656:	4605      	mov	r5, r0
 8007658:	d4e0      	bmi.n	800761c <_fflush_r+0xc>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	059b      	lsls	r3, r3, #22
 800765e:	d4dd      	bmi.n	800761c <_fflush_r+0xc>
 8007660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007662:	f000 f90d 	bl	8007880 <__retarget_lock_release_recursive>
 8007666:	e7d9      	b.n	800761c <_fflush_r+0xc>
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <_fflush_r+0x70>)
 800766a:	429c      	cmp	r4, r3
 800766c:	d101      	bne.n	8007672 <_fflush_r+0x62>
 800766e:	68ac      	ldr	r4, [r5, #8]
 8007670:	e7df      	b.n	8007632 <_fflush_r+0x22>
 8007672:	4b04      	ldr	r3, [pc, #16]	; (8007684 <_fflush_r+0x74>)
 8007674:	429c      	cmp	r4, r3
 8007676:	bf08      	it	eq
 8007678:	68ec      	ldreq	r4, [r5, #12]
 800767a:	e7da      	b.n	8007632 <_fflush_r+0x22>
 800767c:	08009478 	.word	0x08009478
 8007680:	08009498 	.word	0x08009498
 8007684:	08009458 	.word	0x08009458

08007688 <std>:
 8007688:	2300      	movs	r3, #0
 800768a:	b510      	push	{r4, lr}
 800768c:	4604      	mov	r4, r0
 800768e:	e9c0 3300 	strd	r3, r3, [r0]
 8007692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007696:	6083      	str	r3, [r0, #8]
 8007698:	8181      	strh	r1, [r0, #12]
 800769a:	6643      	str	r3, [r0, #100]	; 0x64
 800769c:	81c2      	strh	r2, [r0, #14]
 800769e:	6183      	str	r3, [r0, #24]
 80076a0:	4619      	mov	r1, r3
 80076a2:	2208      	movs	r2, #8
 80076a4:	305c      	adds	r0, #92	; 0x5c
 80076a6:	f7fe fb0b 	bl	8005cc0 <memset>
 80076aa:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <std+0x38>)
 80076ac:	6263      	str	r3, [r4, #36]	; 0x24
 80076ae:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <std+0x3c>)
 80076b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <std+0x40>)
 80076b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <std+0x44>)
 80076b8:	6224      	str	r4, [r4, #32]
 80076ba:	6323      	str	r3, [r4, #48]	; 0x30
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	bf00      	nop
 80076c0:	08008541 	.word	0x08008541
 80076c4:	08008563 	.word	0x08008563
 80076c8:	0800859b 	.word	0x0800859b
 80076cc:	080085bf 	.word	0x080085bf

080076d0 <_cleanup_r>:
 80076d0:	4901      	ldr	r1, [pc, #4]	; (80076d8 <_cleanup_r+0x8>)
 80076d2:	f000 b8af 	b.w	8007834 <_fwalk_reent>
 80076d6:	bf00      	nop
 80076d8:	08007611 	.word	0x08007611

080076dc <__sfmoreglue>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	2268      	movs	r2, #104	; 0x68
 80076e0:	1e4d      	subs	r5, r1, #1
 80076e2:	4355      	muls	r5, r2
 80076e4:	460e      	mov	r6, r1
 80076e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076ea:	f000 fd4b 	bl	8008184 <_malloc_r>
 80076ee:	4604      	mov	r4, r0
 80076f0:	b140      	cbz	r0, 8007704 <__sfmoreglue+0x28>
 80076f2:	2100      	movs	r1, #0
 80076f4:	e9c0 1600 	strd	r1, r6, [r0]
 80076f8:	300c      	adds	r0, #12
 80076fa:	60a0      	str	r0, [r4, #8]
 80076fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007700:	f7fe fade 	bl	8005cc0 <memset>
 8007704:	4620      	mov	r0, r4
 8007706:	bd70      	pop	{r4, r5, r6, pc}

08007708 <__sfp_lock_acquire>:
 8007708:	4801      	ldr	r0, [pc, #4]	; (8007710 <__sfp_lock_acquire+0x8>)
 800770a:	f000 b8b8 	b.w	800787e <__retarget_lock_acquire_recursive>
 800770e:	bf00      	nop
 8007710:	20000475 	.word	0x20000475

08007714 <__sfp_lock_release>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__sfp_lock_release+0x8>)
 8007716:	f000 b8b3 	b.w	8007880 <__retarget_lock_release_recursive>
 800771a:	bf00      	nop
 800771c:	20000475 	.word	0x20000475

08007720 <__sinit_lock_acquire>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__sinit_lock_acquire+0x8>)
 8007722:	f000 b8ac 	b.w	800787e <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	20000476 	.word	0x20000476

0800772c <__sinit_lock_release>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sinit_lock_release+0x8>)
 800772e:	f000 b8a7 	b.w	8007880 <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	20000476 	.word	0x20000476

08007738 <__sinit>:
 8007738:	b510      	push	{r4, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	f7ff fff0 	bl	8007720 <__sinit_lock_acquire>
 8007740:	69a3      	ldr	r3, [r4, #24]
 8007742:	b11b      	cbz	r3, 800774c <__sinit+0x14>
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	f7ff bff0 	b.w	800772c <__sinit_lock_release>
 800774c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007750:	6523      	str	r3, [r4, #80]	; 0x50
 8007752:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <__sinit+0x68>)
 8007754:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <__sinit+0x6c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	62a2      	str	r2, [r4, #40]	; 0x28
 800775a:	42a3      	cmp	r3, r4
 800775c:	bf04      	itt	eq
 800775e:	2301      	moveq	r3, #1
 8007760:	61a3      	streq	r3, [r4, #24]
 8007762:	4620      	mov	r0, r4
 8007764:	f000 f820 	bl	80077a8 <__sfp>
 8007768:	6060      	str	r0, [r4, #4]
 800776a:	4620      	mov	r0, r4
 800776c:	f000 f81c 	bl	80077a8 <__sfp>
 8007770:	60a0      	str	r0, [r4, #8]
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f818 	bl	80077a8 <__sfp>
 8007778:	2200      	movs	r2, #0
 800777a:	60e0      	str	r0, [r4, #12]
 800777c:	2104      	movs	r1, #4
 800777e:	6860      	ldr	r0, [r4, #4]
 8007780:	f7ff ff82 	bl	8007688 <std>
 8007784:	68a0      	ldr	r0, [r4, #8]
 8007786:	2201      	movs	r2, #1
 8007788:	2109      	movs	r1, #9
 800778a:	f7ff ff7d 	bl	8007688 <std>
 800778e:	68e0      	ldr	r0, [r4, #12]
 8007790:	2202      	movs	r2, #2
 8007792:	2112      	movs	r1, #18
 8007794:	f7ff ff78 	bl	8007688 <std>
 8007798:	2301      	movs	r3, #1
 800779a:	61a3      	str	r3, [r4, #24]
 800779c:	e7d2      	b.n	8007744 <__sinit+0xc>
 800779e:	bf00      	nop
 80077a0:	08009390 	.word	0x08009390
 80077a4:	080076d1 	.word	0x080076d1

080077a8 <__sfp>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	4607      	mov	r7, r0
 80077ac:	f7ff ffac 	bl	8007708 <__sfp_lock_acquire>
 80077b0:	4b1e      	ldr	r3, [pc, #120]	; (800782c <__sfp+0x84>)
 80077b2:	681e      	ldr	r6, [r3, #0]
 80077b4:	69b3      	ldr	r3, [r6, #24]
 80077b6:	b913      	cbnz	r3, 80077be <__sfp+0x16>
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7ff ffbd 	bl	8007738 <__sinit>
 80077be:	3648      	adds	r6, #72	; 0x48
 80077c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	d503      	bpl.n	80077d0 <__sfp+0x28>
 80077c8:	6833      	ldr	r3, [r6, #0]
 80077ca:	b30b      	cbz	r3, 8007810 <__sfp+0x68>
 80077cc:	6836      	ldr	r6, [r6, #0]
 80077ce:	e7f7      	b.n	80077c0 <__sfp+0x18>
 80077d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077d4:	b9d5      	cbnz	r5, 800780c <__sfp+0x64>
 80077d6:	4b16      	ldr	r3, [pc, #88]	; (8007830 <__sfp+0x88>)
 80077d8:	60e3      	str	r3, [r4, #12]
 80077da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077de:	6665      	str	r5, [r4, #100]	; 0x64
 80077e0:	f000 f84c 	bl	800787c <__retarget_lock_init_recursive>
 80077e4:	f7ff ff96 	bl	8007714 <__sfp_lock_release>
 80077e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077f0:	6025      	str	r5, [r4, #0]
 80077f2:	61a5      	str	r5, [r4, #24]
 80077f4:	2208      	movs	r2, #8
 80077f6:	4629      	mov	r1, r5
 80077f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077fc:	f7fe fa60 	bl	8005cc0 <memset>
 8007800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007808:	4620      	mov	r0, r4
 800780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780c:	3468      	adds	r4, #104	; 0x68
 800780e:	e7d9      	b.n	80077c4 <__sfp+0x1c>
 8007810:	2104      	movs	r1, #4
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ff62 	bl	80076dc <__sfmoreglue>
 8007818:	4604      	mov	r4, r0
 800781a:	6030      	str	r0, [r6, #0]
 800781c:	2800      	cmp	r0, #0
 800781e:	d1d5      	bne.n	80077cc <__sfp+0x24>
 8007820:	f7ff ff78 	bl	8007714 <__sfp_lock_release>
 8007824:	230c      	movs	r3, #12
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	e7ee      	b.n	8007808 <__sfp+0x60>
 800782a:	bf00      	nop
 800782c:	08009390 	.word	0x08009390
 8007830:	ffff0001 	.word	0xffff0001

08007834 <_fwalk_reent>:
 8007834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007838:	4606      	mov	r6, r0
 800783a:	4688      	mov	r8, r1
 800783c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007840:	2700      	movs	r7, #0
 8007842:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007846:	f1b9 0901 	subs.w	r9, r9, #1
 800784a:	d505      	bpl.n	8007858 <_fwalk_reent+0x24>
 800784c:	6824      	ldr	r4, [r4, #0]
 800784e:	2c00      	cmp	r4, #0
 8007850:	d1f7      	bne.n	8007842 <_fwalk_reent+0xe>
 8007852:	4638      	mov	r0, r7
 8007854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007858:	89ab      	ldrh	r3, [r5, #12]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d907      	bls.n	800786e <_fwalk_reent+0x3a>
 800785e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007862:	3301      	adds	r3, #1
 8007864:	d003      	beq.n	800786e <_fwalk_reent+0x3a>
 8007866:	4629      	mov	r1, r5
 8007868:	4630      	mov	r0, r6
 800786a:	47c0      	blx	r8
 800786c:	4307      	orrs	r7, r0
 800786e:	3568      	adds	r5, #104	; 0x68
 8007870:	e7e9      	b.n	8007846 <_fwalk_reent+0x12>
	...

08007874 <_localeconv_r>:
 8007874:	4800      	ldr	r0, [pc, #0]	; (8007878 <_localeconv_r+0x4>)
 8007876:	4770      	bx	lr
 8007878:	20000160 	.word	0x20000160

0800787c <__retarget_lock_init_recursive>:
 800787c:	4770      	bx	lr

0800787e <__retarget_lock_acquire_recursive>:
 800787e:	4770      	bx	lr

08007880 <__retarget_lock_release_recursive>:
 8007880:	4770      	bx	lr

08007882 <__swhatbuf_r>:
 8007882:	b570      	push	{r4, r5, r6, lr}
 8007884:	460e      	mov	r6, r1
 8007886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788a:	2900      	cmp	r1, #0
 800788c:	b096      	sub	sp, #88	; 0x58
 800788e:	4614      	mov	r4, r2
 8007890:	461d      	mov	r5, r3
 8007892:	da08      	bge.n	80078a6 <__swhatbuf_r+0x24>
 8007894:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	602a      	str	r2, [r5, #0]
 800789c:	061a      	lsls	r2, r3, #24
 800789e:	d410      	bmi.n	80078c2 <__swhatbuf_r+0x40>
 80078a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a4:	e00e      	b.n	80078c4 <__swhatbuf_r+0x42>
 80078a6:	466a      	mov	r2, sp
 80078a8:	f000 fee0 	bl	800866c <_fstat_r>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	dbf1      	blt.n	8007894 <__swhatbuf_r+0x12>
 80078b0:	9a01      	ldr	r2, [sp, #4]
 80078b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078ba:	425a      	negs	r2, r3
 80078bc:	415a      	adcs	r2, r3
 80078be:	602a      	str	r2, [r5, #0]
 80078c0:	e7ee      	b.n	80078a0 <__swhatbuf_r+0x1e>
 80078c2:	2340      	movs	r3, #64	; 0x40
 80078c4:	2000      	movs	r0, #0
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	b016      	add	sp, #88	; 0x58
 80078ca:	bd70      	pop	{r4, r5, r6, pc}

080078cc <__smakebuf_r>:
 80078cc:	898b      	ldrh	r3, [r1, #12]
 80078ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078d0:	079d      	lsls	r5, r3, #30
 80078d2:	4606      	mov	r6, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	d507      	bpl.n	80078e8 <__smakebuf_r+0x1c>
 80078d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	2301      	movs	r3, #1
 80078e2:	6163      	str	r3, [r4, #20]
 80078e4:	b002      	add	sp, #8
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	ab01      	add	r3, sp, #4
 80078ea:	466a      	mov	r2, sp
 80078ec:	f7ff ffc9 	bl	8007882 <__swhatbuf_r>
 80078f0:	9900      	ldr	r1, [sp, #0]
 80078f2:	4605      	mov	r5, r0
 80078f4:	4630      	mov	r0, r6
 80078f6:	f000 fc45 	bl	8008184 <_malloc_r>
 80078fa:	b948      	cbnz	r0, 8007910 <__smakebuf_r+0x44>
 80078fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007900:	059a      	lsls	r2, r3, #22
 8007902:	d4ef      	bmi.n	80078e4 <__smakebuf_r+0x18>
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	f043 0302 	orr.w	r3, r3, #2
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	e7e3      	b.n	80078d8 <__smakebuf_r+0xc>
 8007910:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <__smakebuf_r+0x7c>)
 8007912:	62b3      	str	r3, [r6, #40]	; 0x28
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	6020      	str	r0, [r4, #0]
 8007918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	9b00      	ldr	r3, [sp, #0]
 8007920:	6163      	str	r3, [r4, #20]
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	6120      	str	r0, [r4, #16]
 8007926:	b15b      	cbz	r3, 8007940 <__smakebuf_r+0x74>
 8007928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800792c:	4630      	mov	r0, r6
 800792e:	f000 feaf 	bl	8008690 <_isatty_r>
 8007932:	b128      	cbz	r0, 8007940 <__smakebuf_r+0x74>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	89a0      	ldrh	r0, [r4, #12]
 8007942:	4305      	orrs	r5, r0
 8007944:	81a5      	strh	r5, [r4, #12]
 8007946:	e7cd      	b.n	80078e4 <__smakebuf_r+0x18>
 8007948:	080076d1 	.word	0x080076d1

0800794c <malloc>:
 800794c:	4b02      	ldr	r3, [pc, #8]	; (8007958 <malloc+0xc>)
 800794e:	4601      	mov	r1, r0
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f000 bc17 	b.w	8008184 <_malloc_r>
 8007956:	bf00      	nop
 8007958:	2000000c 	.word	0x2000000c

0800795c <memcpy>:
 800795c:	440a      	add	r2, r1
 800795e:	4291      	cmp	r1, r2
 8007960:	f100 33ff 	add.w	r3, r0, #4294967295
 8007964:	d100      	bne.n	8007968 <memcpy+0xc>
 8007966:	4770      	bx	lr
 8007968:	b510      	push	{r4, lr}
 800796a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007972:	4291      	cmp	r1, r2
 8007974:	d1f9      	bne.n	800796a <memcpy+0xe>
 8007976:	bd10      	pop	{r4, pc}

08007978 <_Balloc>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	b976      	cbnz	r6, 80079a0 <_Balloc+0x28>
 8007982:	2010      	movs	r0, #16
 8007984:	f7ff ffe2 	bl	800794c <malloc>
 8007988:	4602      	mov	r2, r0
 800798a:	6260      	str	r0, [r4, #36]	; 0x24
 800798c:	b920      	cbnz	r0, 8007998 <_Balloc+0x20>
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <_Balloc+0x78>)
 8007990:	4818      	ldr	r0, [pc, #96]	; (80079f4 <_Balloc+0x7c>)
 8007992:	2166      	movs	r1, #102	; 0x66
 8007994:	f000 fe2a 	bl	80085ec <__assert_func>
 8007998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800799c:	6006      	str	r6, [r0, #0]
 800799e:	60c6      	str	r6, [r0, #12]
 80079a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079a2:	68f3      	ldr	r3, [r6, #12]
 80079a4:	b183      	cbz	r3, 80079c8 <_Balloc+0x50>
 80079a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ae:	b9b8      	cbnz	r0, 80079e0 <_Balloc+0x68>
 80079b0:	2101      	movs	r1, #1
 80079b2:	fa01 f605 	lsl.w	r6, r1, r5
 80079b6:	1d72      	adds	r2, r6, #5
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fb60 	bl	8008080 <_calloc_r>
 80079c0:	b160      	cbz	r0, 80079dc <_Balloc+0x64>
 80079c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079c6:	e00e      	b.n	80079e6 <_Balloc+0x6e>
 80079c8:	2221      	movs	r2, #33	; 0x21
 80079ca:	2104      	movs	r1, #4
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fb57 	bl	8008080 <_calloc_r>
 80079d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079d4:	60f0      	str	r0, [r6, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e4      	bne.n	80079a6 <_Balloc+0x2e>
 80079dc:	2000      	movs	r0, #0
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	6802      	ldr	r2, [r0, #0]
 80079e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079e6:	2300      	movs	r3, #0
 80079e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079ec:	e7f7      	b.n	80079de <_Balloc+0x66>
 80079ee:	bf00      	nop
 80079f0:	080093d5 	.word	0x080093d5
 80079f4:	080094b8 	.word	0x080094b8

080079f8 <_Bfree>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	b976      	cbnz	r6, 8007a20 <_Bfree+0x28>
 8007a02:	2010      	movs	r0, #16
 8007a04:	f7ff ffa2 	bl	800794c <malloc>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6268      	str	r0, [r5, #36]	; 0x24
 8007a0c:	b920      	cbnz	r0, 8007a18 <_Bfree+0x20>
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <_Bfree+0x3c>)
 8007a10:	4809      	ldr	r0, [pc, #36]	; (8007a38 <_Bfree+0x40>)
 8007a12:	218a      	movs	r1, #138	; 0x8a
 8007a14:	f000 fdea 	bl	80085ec <__assert_func>
 8007a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a1c:	6006      	str	r6, [r0, #0]
 8007a1e:	60c6      	str	r6, [r0, #12]
 8007a20:	b13c      	cbz	r4, 8007a32 <_Bfree+0x3a>
 8007a22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a2c:	6021      	str	r1, [r4, #0]
 8007a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	080093d5 	.word	0x080093d5
 8007a38:	080094b8 	.word	0x080094b8

08007a3c <__multadd>:
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	690d      	ldr	r5, [r1, #16]
 8007a42:	4607      	mov	r7, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	461e      	mov	r6, r3
 8007a48:	f101 0c14 	add.w	ip, r1, #20
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007a52:	b299      	uxth	r1, r3
 8007a54:	fb02 6101 	mla	r1, r2, r1, r6
 8007a58:	0c1e      	lsrs	r6, r3, #16
 8007a5a:	0c0b      	lsrs	r3, r1, #16
 8007a5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007a60:	b289      	uxth	r1, r1
 8007a62:	3001      	adds	r0, #1
 8007a64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a68:	4285      	cmp	r5, r0
 8007a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a72:	dcec      	bgt.n	8007a4e <__multadd+0x12>
 8007a74:	b30e      	cbz	r6, 8007aba <__multadd+0x7e>
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	42ab      	cmp	r3, r5
 8007a7a:	dc19      	bgt.n	8007ab0 <__multadd+0x74>
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4638      	mov	r0, r7
 8007a80:	3101      	adds	r1, #1
 8007a82:	f7ff ff79 	bl	8007978 <_Balloc>
 8007a86:	4680      	mov	r8, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <__multadd+0x5a>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <__multadd+0x84>)
 8007a8e:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <__multadd+0x88>)
 8007a90:	21b5      	movs	r1, #181	; 0xb5
 8007a92:	f000 fdab 	bl	80085ec <__assert_func>
 8007a96:	6922      	ldr	r2, [r4, #16]
 8007a98:	3202      	adds	r2, #2
 8007a9a:	f104 010c 	add.w	r1, r4, #12
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	f7ff ff5b 	bl	800795c <memcpy>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ffa5 	bl	80079f8 <_Bfree>
 8007aae:	4644      	mov	r4, r8
 8007ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	615e      	str	r6, [r3, #20]
 8007ab8:	6125      	str	r5, [r4, #16]
 8007aba:	4620      	mov	r0, r4
 8007abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac0:	08009447 	.word	0x08009447
 8007ac4:	080094b8 	.word	0x080094b8

08007ac8 <__hi0bits>:
 8007ac8:	0c03      	lsrs	r3, r0, #16
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	b9d3      	cbnz	r3, 8007b04 <__hi0bits+0x3c>
 8007ace:	0400      	lsls	r0, r0, #16
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ad6:	bf04      	itt	eq
 8007ad8:	0200      	lsleq	r0, r0, #8
 8007ada:	3308      	addeq	r3, #8
 8007adc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ae0:	bf04      	itt	eq
 8007ae2:	0100      	lsleq	r0, r0, #4
 8007ae4:	3304      	addeq	r3, #4
 8007ae6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007aea:	bf04      	itt	eq
 8007aec:	0080      	lsleq	r0, r0, #2
 8007aee:	3302      	addeq	r3, #2
 8007af0:	2800      	cmp	r0, #0
 8007af2:	db05      	blt.n	8007b00 <__hi0bits+0x38>
 8007af4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007af8:	f103 0301 	add.w	r3, r3, #1
 8007afc:	bf08      	it	eq
 8007afe:	2320      	moveq	r3, #32
 8007b00:	4618      	mov	r0, r3
 8007b02:	4770      	bx	lr
 8007b04:	2300      	movs	r3, #0
 8007b06:	e7e4      	b.n	8007ad2 <__hi0bits+0xa>

08007b08 <__lo0bits>:
 8007b08:	6803      	ldr	r3, [r0, #0]
 8007b0a:	f013 0207 	ands.w	r2, r3, #7
 8007b0e:	4601      	mov	r1, r0
 8007b10:	d00b      	beq.n	8007b2a <__lo0bits+0x22>
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d423      	bmi.n	8007b5e <__lo0bits+0x56>
 8007b16:	0798      	lsls	r0, r3, #30
 8007b18:	bf49      	itett	mi
 8007b1a:	085b      	lsrmi	r3, r3, #1
 8007b1c:	089b      	lsrpl	r3, r3, #2
 8007b1e:	2001      	movmi	r0, #1
 8007b20:	600b      	strmi	r3, [r1, #0]
 8007b22:	bf5c      	itt	pl
 8007b24:	600b      	strpl	r3, [r1, #0]
 8007b26:	2002      	movpl	r0, #2
 8007b28:	4770      	bx	lr
 8007b2a:	b298      	uxth	r0, r3
 8007b2c:	b9a8      	cbnz	r0, 8007b5a <__lo0bits+0x52>
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	2010      	movs	r0, #16
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	b90a      	cbnz	r2, 8007b3a <__lo0bits+0x32>
 8007b36:	3008      	adds	r0, #8
 8007b38:	0a1b      	lsrs	r3, r3, #8
 8007b3a:	071a      	lsls	r2, r3, #28
 8007b3c:	bf04      	itt	eq
 8007b3e:	091b      	lsreq	r3, r3, #4
 8007b40:	3004      	addeq	r0, #4
 8007b42:	079a      	lsls	r2, r3, #30
 8007b44:	bf04      	itt	eq
 8007b46:	089b      	lsreq	r3, r3, #2
 8007b48:	3002      	addeq	r0, #2
 8007b4a:	07da      	lsls	r2, r3, #31
 8007b4c:	d403      	bmi.n	8007b56 <__lo0bits+0x4e>
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	f100 0001 	add.w	r0, r0, #1
 8007b54:	d005      	beq.n	8007b62 <__lo0bits+0x5a>
 8007b56:	600b      	str	r3, [r1, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	e7e9      	b.n	8007b32 <__lo0bits+0x2a>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	4770      	bx	lr
 8007b62:	2020      	movs	r0, #32
 8007b64:	4770      	bx	lr
	...

08007b68 <__i2b>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	f7ff ff03 	bl	8007978 <_Balloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__i2b+0x1a>
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <__i2b+0x24>)
 8007b78:	4805      	ldr	r0, [pc, #20]	; (8007b90 <__i2b+0x28>)
 8007b7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b7e:	f000 fd35 	bl	80085ec <__assert_func>
 8007b82:	2301      	movs	r3, #1
 8007b84:	6144      	str	r4, [r0, #20]
 8007b86:	6103      	str	r3, [r0, #16]
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	08009447 	.word	0x08009447
 8007b90:	080094b8 	.word	0x080094b8

08007b94 <__multiply>:
 8007b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	4691      	mov	r9, r2
 8007b9a:	690a      	ldr	r2, [r1, #16]
 8007b9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	bfb8      	it	lt
 8007ba4:	460b      	movlt	r3, r1
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	bfbc      	itt	lt
 8007baa:	464c      	movlt	r4, r9
 8007bac:	4699      	movlt	r9, r3
 8007bae:	6927      	ldr	r7, [r4, #16]
 8007bb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bb4:	68a3      	ldr	r3, [r4, #8]
 8007bb6:	6861      	ldr	r1, [r4, #4]
 8007bb8:	eb07 060a 	add.w	r6, r7, sl
 8007bbc:	42b3      	cmp	r3, r6
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	bfb8      	it	lt
 8007bc2:	3101      	addlt	r1, #1
 8007bc4:	f7ff fed8 	bl	8007978 <_Balloc>
 8007bc8:	b930      	cbnz	r0, 8007bd8 <__multiply+0x44>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b44      	ldr	r3, [pc, #272]	; (8007ce0 <__multiply+0x14c>)
 8007bce:	4845      	ldr	r0, [pc, #276]	; (8007ce4 <__multiply+0x150>)
 8007bd0:	f240 115d 	movw	r1, #349	; 0x15d
 8007bd4:	f000 fd0a 	bl	80085ec <__assert_func>
 8007bd8:	f100 0514 	add.w	r5, r0, #20
 8007bdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007be0:	462b      	mov	r3, r5
 8007be2:	2200      	movs	r2, #0
 8007be4:	4543      	cmp	r3, r8
 8007be6:	d321      	bcc.n	8007c2c <__multiply+0x98>
 8007be8:	f104 0314 	add.w	r3, r4, #20
 8007bec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bf0:	f109 0314 	add.w	r3, r9, #20
 8007bf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bf8:	9202      	str	r2, [sp, #8]
 8007bfa:	1b3a      	subs	r2, r7, r4
 8007bfc:	3a15      	subs	r2, #21
 8007bfe:	f022 0203 	bic.w	r2, r2, #3
 8007c02:	3204      	adds	r2, #4
 8007c04:	f104 0115 	add.w	r1, r4, #21
 8007c08:	428f      	cmp	r7, r1
 8007c0a:	bf38      	it	cc
 8007c0c:	2204      	movcc	r2, #4
 8007c0e:	9201      	str	r2, [sp, #4]
 8007c10:	9a02      	ldr	r2, [sp, #8]
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d80c      	bhi.n	8007c32 <__multiply+0x9e>
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	dd03      	ble.n	8007c24 <__multiply+0x90>
 8007c1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d05a      	beq.n	8007cda <__multiply+0x146>
 8007c24:	6106      	str	r6, [r0, #16]
 8007c26:	b005      	add	sp, #20
 8007c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2c:	f843 2b04 	str.w	r2, [r3], #4
 8007c30:	e7d8      	b.n	8007be4 <__multiply+0x50>
 8007c32:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c36:	f1ba 0f00 	cmp.w	sl, #0
 8007c3a:	d024      	beq.n	8007c86 <__multiply+0xf2>
 8007c3c:	f104 0e14 	add.w	lr, r4, #20
 8007c40:	46a9      	mov	r9, r5
 8007c42:	f04f 0c00 	mov.w	ip, #0
 8007c46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c4a:	f8d9 1000 	ldr.w	r1, [r9]
 8007c4e:	fa1f fb82 	uxth.w	fp, r2
 8007c52:	b289      	uxth	r1, r1
 8007c54:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8007c60:	4461      	add	r1, ip
 8007c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c66:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c6e:	b289      	uxth	r1, r1
 8007c70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c74:	4577      	cmp	r7, lr
 8007c76:	f849 1b04 	str.w	r1, [r9], #4
 8007c7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c7e:	d8e2      	bhi.n	8007c46 <__multiply+0xb2>
 8007c80:	9a01      	ldr	r2, [sp, #4]
 8007c82:	f845 c002 	str.w	ip, [r5, r2]
 8007c86:	9a03      	ldr	r2, [sp, #12]
 8007c88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	f1b9 0f00 	cmp.w	r9, #0
 8007c92:	d020      	beq.n	8007cd6 <__multiply+0x142>
 8007c94:	6829      	ldr	r1, [r5, #0]
 8007c96:	f104 0c14 	add.w	ip, r4, #20
 8007c9a:	46ae      	mov	lr, r5
 8007c9c:	f04f 0a00 	mov.w	sl, #0
 8007ca0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ca4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ca8:	fb09 220b 	mla	r2, r9, fp, r2
 8007cac:	4492      	add	sl, r2
 8007cae:	b289      	uxth	r1, r1
 8007cb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007cb4:	f84e 1b04 	str.w	r1, [lr], #4
 8007cb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007cbc:	f8be 1000 	ldrh.w	r1, [lr]
 8007cc0:	0c12      	lsrs	r2, r2, #16
 8007cc2:	fb09 1102 	mla	r1, r9, r2, r1
 8007cc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007cca:	4567      	cmp	r7, ip
 8007ccc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cd0:	d8e6      	bhi.n	8007ca0 <__multiply+0x10c>
 8007cd2:	9a01      	ldr	r2, [sp, #4]
 8007cd4:	50a9      	str	r1, [r5, r2]
 8007cd6:	3504      	adds	r5, #4
 8007cd8:	e79a      	b.n	8007c10 <__multiply+0x7c>
 8007cda:	3e01      	subs	r6, #1
 8007cdc:	e79c      	b.n	8007c18 <__multiply+0x84>
 8007cde:	bf00      	nop
 8007ce0:	08009447 	.word	0x08009447
 8007ce4:	080094b8 	.word	0x080094b8

08007ce8 <__pow5mult>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	4615      	mov	r5, r2
 8007cee:	f012 0203 	ands.w	r2, r2, #3
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	d007      	beq.n	8007d08 <__pow5mult+0x20>
 8007cf8:	4c25      	ldr	r4, [pc, #148]	; (8007d90 <__pow5mult+0xa8>)
 8007cfa:	3a01      	subs	r2, #1
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d02:	f7ff fe9b 	bl	8007a3c <__multadd>
 8007d06:	4607      	mov	r7, r0
 8007d08:	10ad      	asrs	r5, r5, #2
 8007d0a:	d03d      	beq.n	8007d88 <__pow5mult+0xa0>
 8007d0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d0e:	b97c      	cbnz	r4, 8007d30 <__pow5mult+0x48>
 8007d10:	2010      	movs	r0, #16
 8007d12:	f7ff fe1b 	bl	800794c <malloc>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6270      	str	r0, [r6, #36]	; 0x24
 8007d1a:	b928      	cbnz	r0, 8007d28 <__pow5mult+0x40>
 8007d1c:	4b1d      	ldr	r3, [pc, #116]	; (8007d94 <__pow5mult+0xac>)
 8007d1e:	481e      	ldr	r0, [pc, #120]	; (8007d98 <__pow5mult+0xb0>)
 8007d20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d24:	f000 fc62 	bl	80085ec <__assert_func>
 8007d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d2c:	6004      	str	r4, [r0, #0]
 8007d2e:	60c4      	str	r4, [r0, #12]
 8007d30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d38:	b94c      	cbnz	r4, 8007d4e <__pow5mult+0x66>
 8007d3a:	f240 2171 	movw	r1, #625	; 0x271
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff12 	bl	8007b68 <__i2b>
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	07eb      	lsls	r3, r5, #31
 8007d54:	d50a      	bpl.n	8007d6c <__pow5mult+0x84>
 8007d56:	4639      	mov	r1, r7
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ff1a 	bl	8007b94 <__multiply>
 8007d60:	4639      	mov	r1, r7
 8007d62:	4680      	mov	r8, r0
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff fe47 	bl	80079f8 <_Bfree>
 8007d6a:	4647      	mov	r7, r8
 8007d6c:	106d      	asrs	r5, r5, #1
 8007d6e:	d00b      	beq.n	8007d88 <__pow5mult+0xa0>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	b938      	cbnz	r0, 8007d84 <__pow5mult+0x9c>
 8007d74:	4622      	mov	r2, r4
 8007d76:	4621      	mov	r1, r4
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7ff ff0b 	bl	8007b94 <__multiply>
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f8c0 9000 	str.w	r9, [r0]
 8007d84:	4604      	mov	r4, r0
 8007d86:	e7e4      	b.n	8007d52 <__pow5mult+0x6a>
 8007d88:	4638      	mov	r0, r7
 8007d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8e:	bf00      	nop
 8007d90:	08009608 	.word	0x08009608
 8007d94:	080093d5 	.word	0x080093d5
 8007d98:	080094b8 	.word	0x080094b8

08007d9c <__lshift>:
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	460c      	mov	r4, r1
 8007da2:	6849      	ldr	r1, [r1, #4]
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	4607      	mov	r7, r0
 8007dae:	4691      	mov	r9, r2
 8007db0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007db4:	f108 0601 	add.w	r6, r8, #1
 8007db8:	42b3      	cmp	r3, r6
 8007dba:	db0b      	blt.n	8007dd4 <__lshift+0x38>
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f7ff fddb 	bl	8007978 <_Balloc>
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	b948      	cbnz	r0, 8007dda <__lshift+0x3e>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	4b2a      	ldr	r3, [pc, #168]	; (8007e74 <__lshift+0xd8>)
 8007dca:	482b      	ldr	r0, [pc, #172]	; (8007e78 <__lshift+0xdc>)
 8007dcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007dd0:	f000 fc0c 	bl	80085ec <__assert_func>
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	e7ee      	b.n	8007db8 <__lshift+0x1c>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f100 0114 	add.w	r1, r0, #20
 8007de0:	f100 0210 	add.w	r2, r0, #16
 8007de4:	4618      	mov	r0, r3
 8007de6:	4553      	cmp	r3, sl
 8007de8:	db37      	blt.n	8007e5a <__lshift+0xbe>
 8007dea:	6920      	ldr	r0, [r4, #16]
 8007dec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007df0:	f104 0314 	add.w	r3, r4, #20
 8007df4:	f019 091f 	ands.w	r9, r9, #31
 8007df8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e00:	d02f      	beq.n	8007e62 <__lshift+0xc6>
 8007e02:	f1c9 0e20 	rsb	lr, r9, #32
 8007e06:	468a      	mov	sl, r1
 8007e08:	f04f 0c00 	mov.w	ip, #0
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	fa02 f209 	lsl.w	r2, r2, r9
 8007e12:	ea42 020c 	orr.w	r2, r2, ip
 8007e16:	f84a 2b04 	str.w	r2, [sl], #4
 8007e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1e:	4298      	cmp	r0, r3
 8007e20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e24:	d8f2      	bhi.n	8007e0c <__lshift+0x70>
 8007e26:	1b03      	subs	r3, r0, r4
 8007e28:	3b15      	subs	r3, #21
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	3304      	adds	r3, #4
 8007e30:	f104 0215 	add.w	r2, r4, #21
 8007e34:	4290      	cmp	r0, r2
 8007e36:	bf38      	it	cc
 8007e38:	2304      	movcc	r3, #4
 8007e3a:	f841 c003 	str.w	ip, [r1, r3]
 8007e3e:	f1bc 0f00 	cmp.w	ip, #0
 8007e42:	d001      	beq.n	8007e48 <__lshift+0xac>
 8007e44:	f108 0602 	add.w	r6, r8, #2
 8007e48:	3e01      	subs	r6, #1
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	612e      	str	r6, [r5, #16]
 8007e4e:	4621      	mov	r1, r4
 8007e50:	f7ff fdd2 	bl	80079f8 <_Bfree>
 8007e54:	4628      	mov	r0, r5
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e5e:	3301      	adds	r3, #1
 8007e60:	e7c1      	b.n	8007de6 <__lshift+0x4a>
 8007e62:	3904      	subs	r1, #4
 8007e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e6c:	4298      	cmp	r0, r3
 8007e6e:	d8f9      	bhi.n	8007e64 <__lshift+0xc8>
 8007e70:	e7ea      	b.n	8007e48 <__lshift+0xac>
 8007e72:	bf00      	nop
 8007e74:	08009447 	.word	0x08009447
 8007e78:	080094b8 	.word	0x080094b8

08007e7c <__mcmp>:
 8007e7c:	b530      	push	{r4, r5, lr}
 8007e7e:	6902      	ldr	r2, [r0, #16]
 8007e80:	690c      	ldr	r4, [r1, #16]
 8007e82:	1b12      	subs	r2, r2, r4
 8007e84:	d10e      	bne.n	8007ea4 <__mcmp+0x28>
 8007e86:	f100 0314 	add.w	r3, r0, #20
 8007e8a:	3114      	adds	r1, #20
 8007e8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e9c:	42a5      	cmp	r5, r4
 8007e9e:	d003      	beq.n	8007ea8 <__mcmp+0x2c>
 8007ea0:	d305      	bcc.n	8007eae <__mcmp+0x32>
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	bd30      	pop	{r4, r5, pc}
 8007ea8:	4283      	cmp	r3, r0
 8007eaa:	d3f3      	bcc.n	8007e94 <__mcmp+0x18>
 8007eac:	e7fa      	b.n	8007ea4 <__mcmp+0x28>
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	e7f7      	b.n	8007ea4 <__mcmp+0x28>

08007eb4 <__mdiff>:
 8007eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	460c      	mov	r4, r1
 8007eba:	4606      	mov	r6, r0
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4690      	mov	r8, r2
 8007ec2:	f7ff ffdb 	bl	8007e7c <__mcmp>
 8007ec6:	1e05      	subs	r5, r0, #0
 8007ec8:	d110      	bne.n	8007eec <__mdiff+0x38>
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff fd53 	bl	8007978 <_Balloc>
 8007ed2:	b930      	cbnz	r0, 8007ee2 <__mdiff+0x2e>
 8007ed4:	4b3a      	ldr	r3, [pc, #232]	; (8007fc0 <__mdiff+0x10c>)
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	f240 2132 	movw	r1, #562	; 0x232
 8007edc:	4839      	ldr	r0, [pc, #228]	; (8007fc4 <__mdiff+0x110>)
 8007ede:	f000 fb85 	bl	80085ec <__assert_func>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	bfa4      	itt	ge
 8007eee:	4643      	movge	r3, r8
 8007ef0:	46a0      	movge	r8, r4
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ef8:	bfa6      	itte	ge
 8007efa:	461c      	movge	r4, r3
 8007efc:	2500      	movge	r5, #0
 8007efe:	2501      	movlt	r5, #1
 8007f00:	f7ff fd3a 	bl	8007978 <_Balloc>
 8007f04:	b920      	cbnz	r0, 8007f10 <__mdiff+0x5c>
 8007f06:	4b2e      	ldr	r3, [pc, #184]	; (8007fc0 <__mdiff+0x10c>)
 8007f08:	4602      	mov	r2, r0
 8007f0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f0e:	e7e5      	b.n	8007edc <__mdiff+0x28>
 8007f10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f14:	6926      	ldr	r6, [r4, #16]
 8007f16:	60c5      	str	r5, [r0, #12]
 8007f18:	f104 0914 	add.w	r9, r4, #20
 8007f1c:	f108 0514 	add.w	r5, r8, #20
 8007f20:	f100 0e14 	add.w	lr, r0, #20
 8007f24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f2c:	f108 0210 	add.w	r2, r8, #16
 8007f30:	46f2      	mov	sl, lr
 8007f32:	2100      	movs	r1, #0
 8007f34:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f3c:	fa1f f883 	uxth.w	r8, r3
 8007f40:	fa11 f18b 	uxtah	r1, r1, fp
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	eba1 0808 	sub.w	r8, r1, r8
 8007f4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f52:	fa1f f888 	uxth.w	r8, r8
 8007f56:	1419      	asrs	r1, r3, #16
 8007f58:	454e      	cmp	r6, r9
 8007f5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f5e:	f84a 3b04 	str.w	r3, [sl], #4
 8007f62:	d8e7      	bhi.n	8007f34 <__mdiff+0x80>
 8007f64:	1b33      	subs	r3, r6, r4
 8007f66:	3b15      	subs	r3, #21
 8007f68:	f023 0303 	bic.w	r3, r3, #3
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	3415      	adds	r4, #21
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	bf38      	it	cc
 8007f74:	2304      	movcc	r3, #4
 8007f76:	441d      	add	r5, r3
 8007f78:	4473      	add	r3, lr
 8007f7a:	469e      	mov	lr, r3
 8007f7c:	462e      	mov	r6, r5
 8007f7e:	4566      	cmp	r6, ip
 8007f80:	d30e      	bcc.n	8007fa0 <__mdiff+0xec>
 8007f82:	f10c 0203 	add.w	r2, ip, #3
 8007f86:	1b52      	subs	r2, r2, r5
 8007f88:	f022 0203 	bic.w	r2, r2, #3
 8007f8c:	3d03      	subs	r5, #3
 8007f8e:	45ac      	cmp	ip, r5
 8007f90:	bf38      	it	cc
 8007f92:	2200      	movcc	r2, #0
 8007f94:	441a      	add	r2, r3
 8007f96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f9a:	b17b      	cbz	r3, 8007fbc <__mdiff+0x108>
 8007f9c:	6107      	str	r7, [r0, #16]
 8007f9e:	e7a3      	b.n	8007ee8 <__mdiff+0x34>
 8007fa0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007fa4:	fa11 f288 	uxtah	r2, r1, r8
 8007fa8:	1414      	asrs	r4, r2, #16
 8007faa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fb4:	f84e 2b04 	str.w	r2, [lr], #4
 8007fb8:	1421      	asrs	r1, r4, #16
 8007fba:	e7e0      	b.n	8007f7e <__mdiff+0xca>
 8007fbc:	3f01      	subs	r7, #1
 8007fbe:	e7ea      	b.n	8007f96 <__mdiff+0xe2>
 8007fc0:	08009447 	.word	0x08009447
 8007fc4:	080094b8 	.word	0x080094b8

08007fc8 <__d2b>:
 8007fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4689      	mov	r9, r1
 8007fce:	2101      	movs	r1, #1
 8007fd0:	ec57 6b10 	vmov	r6, r7, d0
 8007fd4:	4690      	mov	r8, r2
 8007fd6:	f7ff fccf 	bl	8007978 <_Balloc>
 8007fda:	4604      	mov	r4, r0
 8007fdc:	b930      	cbnz	r0, 8007fec <__d2b+0x24>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <__d2b+0xb0>)
 8007fe2:	4826      	ldr	r0, [pc, #152]	; (800807c <__d2b+0xb4>)
 8007fe4:	f240 310a 	movw	r1, #778	; 0x30a
 8007fe8:	f000 fb00 	bl	80085ec <__assert_func>
 8007fec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ff4:	bb35      	cbnz	r5, 8008044 <__d2b+0x7c>
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	d028      	beq.n	800804e <__d2b+0x86>
 8007ffc:	4668      	mov	r0, sp
 8007ffe:	9600      	str	r6, [sp, #0]
 8008000:	f7ff fd82 	bl	8007b08 <__lo0bits>
 8008004:	9900      	ldr	r1, [sp, #0]
 8008006:	b300      	cbz	r0, 800804a <__d2b+0x82>
 8008008:	9a01      	ldr	r2, [sp, #4]
 800800a:	f1c0 0320 	rsb	r3, r0, #32
 800800e:	fa02 f303 	lsl.w	r3, r2, r3
 8008012:	430b      	orrs	r3, r1
 8008014:	40c2      	lsrs	r2, r0
 8008016:	6163      	str	r3, [r4, #20]
 8008018:	9201      	str	r2, [sp, #4]
 800801a:	9b01      	ldr	r3, [sp, #4]
 800801c:	61a3      	str	r3, [r4, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	bf14      	ite	ne
 8008022:	2202      	movne	r2, #2
 8008024:	2201      	moveq	r2, #1
 8008026:	6122      	str	r2, [r4, #16]
 8008028:	b1d5      	cbz	r5, 8008060 <__d2b+0x98>
 800802a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800802e:	4405      	add	r5, r0
 8008030:	f8c9 5000 	str.w	r5, [r9]
 8008034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008038:	f8c8 0000 	str.w	r0, [r8]
 800803c:	4620      	mov	r0, r4
 800803e:	b003      	add	sp, #12
 8008040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008048:	e7d5      	b.n	8007ff6 <__d2b+0x2e>
 800804a:	6161      	str	r1, [r4, #20]
 800804c:	e7e5      	b.n	800801a <__d2b+0x52>
 800804e:	a801      	add	r0, sp, #4
 8008050:	f7ff fd5a 	bl	8007b08 <__lo0bits>
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	6163      	str	r3, [r4, #20]
 8008058:	2201      	movs	r2, #1
 800805a:	6122      	str	r2, [r4, #16]
 800805c:	3020      	adds	r0, #32
 800805e:	e7e3      	b.n	8008028 <__d2b+0x60>
 8008060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008068:	f8c9 0000 	str.w	r0, [r9]
 800806c:	6918      	ldr	r0, [r3, #16]
 800806e:	f7ff fd2b 	bl	8007ac8 <__hi0bits>
 8008072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008076:	e7df      	b.n	8008038 <__d2b+0x70>
 8008078:	08009447 	.word	0x08009447
 800807c:	080094b8 	.word	0x080094b8

08008080 <_calloc_r>:
 8008080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008082:	fba1 2402 	umull	r2, r4, r1, r2
 8008086:	b94c      	cbnz	r4, 800809c <_calloc_r+0x1c>
 8008088:	4611      	mov	r1, r2
 800808a:	9201      	str	r2, [sp, #4]
 800808c:	f000 f87a 	bl	8008184 <_malloc_r>
 8008090:	9a01      	ldr	r2, [sp, #4]
 8008092:	4605      	mov	r5, r0
 8008094:	b930      	cbnz	r0, 80080a4 <_calloc_r+0x24>
 8008096:	4628      	mov	r0, r5
 8008098:	b003      	add	sp, #12
 800809a:	bd30      	pop	{r4, r5, pc}
 800809c:	220c      	movs	r2, #12
 800809e:	6002      	str	r2, [r0, #0]
 80080a0:	2500      	movs	r5, #0
 80080a2:	e7f8      	b.n	8008096 <_calloc_r+0x16>
 80080a4:	4621      	mov	r1, r4
 80080a6:	f7fd fe0b 	bl	8005cc0 <memset>
 80080aa:	e7f4      	b.n	8008096 <_calloc_r+0x16>

080080ac <_free_r>:
 80080ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d044      	beq.n	800813c <_free_r+0x90>
 80080b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b6:	9001      	str	r0, [sp, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f1a1 0404 	sub.w	r4, r1, #4
 80080be:	bfb8      	it	lt
 80080c0:	18e4      	addlt	r4, r4, r3
 80080c2:	f000 fb19 	bl	80086f8 <__malloc_lock>
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <_free_r+0x94>)
 80080c8:	9801      	ldr	r0, [sp, #4]
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	b933      	cbnz	r3, 80080dc <_free_r+0x30>
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	6014      	str	r4, [r2, #0]
 80080d2:	b003      	add	sp, #12
 80080d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d8:	f000 bb14 	b.w	8008704 <__malloc_unlock>
 80080dc:	42a3      	cmp	r3, r4
 80080de:	d908      	bls.n	80080f2 <_free_r+0x46>
 80080e0:	6825      	ldr	r5, [r4, #0]
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	428b      	cmp	r3, r1
 80080e6:	bf01      	itttt	eq
 80080e8:	6819      	ldreq	r1, [r3, #0]
 80080ea:	685b      	ldreq	r3, [r3, #4]
 80080ec:	1949      	addeq	r1, r1, r5
 80080ee:	6021      	streq	r1, [r4, #0]
 80080f0:	e7ed      	b.n	80080ce <_free_r+0x22>
 80080f2:	461a      	mov	r2, r3
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	b10b      	cbz	r3, 80080fc <_free_r+0x50>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d9fa      	bls.n	80080f2 <_free_r+0x46>
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	1855      	adds	r5, r2, r1
 8008100:	42a5      	cmp	r5, r4
 8008102:	d10b      	bne.n	800811c <_free_r+0x70>
 8008104:	6824      	ldr	r4, [r4, #0]
 8008106:	4421      	add	r1, r4
 8008108:	1854      	adds	r4, r2, r1
 800810a:	42a3      	cmp	r3, r4
 800810c:	6011      	str	r1, [r2, #0]
 800810e:	d1e0      	bne.n	80080d2 <_free_r+0x26>
 8008110:	681c      	ldr	r4, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	6053      	str	r3, [r2, #4]
 8008116:	4421      	add	r1, r4
 8008118:	6011      	str	r1, [r2, #0]
 800811a:	e7da      	b.n	80080d2 <_free_r+0x26>
 800811c:	d902      	bls.n	8008124 <_free_r+0x78>
 800811e:	230c      	movs	r3, #12
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	e7d6      	b.n	80080d2 <_free_r+0x26>
 8008124:	6825      	ldr	r5, [r4, #0]
 8008126:	1961      	adds	r1, r4, r5
 8008128:	428b      	cmp	r3, r1
 800812a:	bf04      	itt	eq
 800812c:	6819      	ldreq	r1, [r3, #0]
 800812e:	685b      	ldreq	r3, [r3, #4]
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	bf04      	itt	eq
 8008134:	1949      	addeq	r1, r1, r5
 8008136:	6021      	streq	r1, [r4, #0]
 8008138:	6054      	str	r4, [r2, #4]
 800813a:	e7ca      	b.n	80080d2 <_free_r+0x26>
 800813c:	b003      	add	sp, #12
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	20000478 	.word	0x20000478

08008144 <sbrk_aligned>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4e0e      	ldr	r6, [pc, #56]	; (8008180 <sbrk_aligned+0x3c>)
 8008148:	460c      	mov	r4, r1
 800814a:	6831      	ldr	r1, [r6, #0]
 800814c:	4605      	mov	r5, r0
 800814e:	b911      	cbnz	r1, 8008156 <sbrk_aligned+0x12>
 8008150:	f000 f9e6 	bl	8008520 <_sbrk_r>
 8008154:	6030      	str	r0, [r6, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 f9e1 	bl	8008520 <_sbrk_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	d00a      	beq.n	8008178 <sbrk_aligned+0x34>
 8008162:	1cc4      	adds	r4, r0, #3
 8008164:	f024 0403 	bic.w	r4, r4, #3
 8008168:	42a0      	cmp	r0, r4
 800816a:	d007      	beq.n	800817c <sbrk_aligned+0x38>
 800816c:	1a21      	subs	r1, r4, r0
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f9d6 	bl	8008520 <_sbrk_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d101      	bne.n	800817c <sbrk_aligned+0x38>
 8008178:	f04f 34ff 	mov.w	r4, #4294967295
 800817c:	4620      	mov	r0, r4
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	2000047c 	.word	0x2000047c

08008184 <_malloc_r>:
 8008184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008188:	1ccd      	adds	r5, r1, #3
 800818a:	f025 0503 	bic.w	r5, r5, #3
 800818e:	3508      	adds	r5, #8
 8008190:	2d0c      	cmp	r5, #12
 8008192:	bf38      	it	cc
 8008194:	250c      	movcc	r5, #12
 8008196:	2d00      	cmp	r5, #0
 8008198:	4607      	mov	r7, r0
 800819a:	db01      	blt.n	80081a0 <_malloc_r+0x1c>
 800819c:	42a9      	cmp	r1, r5
 800819e:	d905      	bls.n	80081ac <_malloc_r+0x28>
 80081a0:	230c      	movs	r3, #12
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	2600      	movs	r6, #0
 80081a6:	4630      	mov	r0, r6
 80081a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ac:	4e2e      	ldr	r6, [pc, #184]	; (8008268 <_malloc_r+0xe4>)
 80081ae:	f000 faa3 	bl	80086f8 <__malloc_lock>
 80081b2:	6833      	ldr	r3, [r6, #0]
 80081b4:	461c      	mov	r4, r3
 80081b6:	bb34      	cbnz	r4, 8008206 <_malloc_r+0x82>
 80081b8:	4629      	mov	r1, r5
 80081ba:	4638      	mov	r0, r7
 80081bc:	f7ff ffc2 	bl	8008144 <sbrk_aligned>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	4604      	mov	r4, r0
 80081c4:	d14d      	bne.n	8008262 <_malloc_r+0xde>
 80081c6:	6834      	ldr	r4, [r6, #0]
 80081c8:	4626      	mov	r6, r4
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d140      	bne.n	8008250 <_malloc_r+0xcc>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	4631      	mov	r1, r6
 80081d2:	4638      	mov	r0, r7
 80081d4:	eb04 0803 	add.w	r8, r4, r3
 80081d8:	f000 f9a2 	bl	8008520 <_sbrk_r>
 80081dc:	4580      	cmp	r8, r0
 80081de:	d13a      	bne.n	8008256 <_malloc_r+0xd2>
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	3503      	adds	r5, #3
 80081e4:	1a6d      	subs	r5, r5, r1
 80081e6:	f025 0503 	bic.w	r5, r5, #3
 80081ea:	3508      	adds	r5, #8
 80081ec:	2d0c      	cmp	r5, #12
 80081ee:	bf38      	it	cc
 80081f0:	250c      	movcc	r5, #12
 80081f2:	4629      	mov	r1, r5
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ffa5 	bl	8008144 <sbrk_aligned>
 80081fa:	3001      	adds	r0, #1
 80081fc:	d02b      	beq.n	8008256 <_malloc_r+0xd2>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	442b      	add	r3, r5
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	e00e      	b.n	8008224 <_malloc_r+0xa0>
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	1b52      	subs	r2, r2, r5
 800820a:	d41e      	bmi.n	800824a <_malloc_r+0xc6>
 800820c:	2a0b      	cmp	r2, #11
 800820e:	d916      	bls.n	800823e <_malloc_r+0xba>
 8008210:	1961      	adds	r1, r4, r5
 8008212:	42a3      	cmp	r3, r4
 8008214:	6025      	str	r5, [r4, #0]
 8008216:	bf18      	it	ne
 8008218:	6059      	strne	r1, [r3, #4]
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	bf08      	it	eq
 800821e:	6031      	streq	r1, [r6, #0]
 8008220:	5162      	str	r2, [r4, r5]
 8008222:	604b      	str	r3, [r1, #4]
 8008224:	4638      	mov	r0, r7
 8008226:	f104 060b 	add.w	r6, r4, #11
 800822a:	f000 fa6b 	bl	8008704 <__malloc_unlock>
 800822e:	f026 0607 	bic.w	r6, r6, #7
 8008232:	1d23      	adds	r3, r4, #4
 8008234:	1af2      	subs	r2, r6, r3
 8008236:	d0b6      	beq.n	80081a6 <_malloc_r+0x22>
 8008238:	1b9b      	subs	r3, r3, r6
 800823a:	50a3      	str	r3, [r4, r2]
 800823c:	e7b3      	b.n	80081a6 <_malloc_r+0x22>
 800823e:	6862      	ldr	r2, [r4, #4]
 8008240:	42a3      	cmp	r3, r4
 8008242:	bf0c      	ite	eq
 8008244:	6032      	streq	r2, [r6, #0]
 8008246:	605a      	strne	r2, [r3, #4]
 8008248:	e7ec      	b.n	8008224 <_malloc_r+0xa0>
 800824a:	4623      	mov	r3, r4
 800824c:	6864      	ldr	r4, [r4, #4]
 800824e:	e7b2      	b.n	80081b6 <_malloc_r+0x32>
 8008250:	4634      	mov	r4, r6
 8008252:	6876      	ldr	r6, [r6, #4]
 8008254:	e7b9      	b.n	80081ca <_malloc_r+0x46>
 8008256:	230c      	movs	r3, #12
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	4638      	mov	r0, r7
 800825c:	f000 fa52 	bl	8008704 <__malloc_unlock>
 8008260:	e7a1      	b.n	80081a6 <_malloc_r+0x22>
 8008262:	6025      	str	r5, [r4, #0]
 8008264:	e7de      	b.n	8008224 <_malloc_r+0xa0>
 8008266:	bf00      	nop
 8008268:	20000478 	.word	0x20000478

0800826c <__sfputc_r>:
 800826c:	6893      	ldr	r3, [r2, #8]
 800826e:	3b01      	subs	r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	b410      	push	{r4}
 8008274:	6093      	str	r3, [r2, #8]
 8008276:	da08      	bge.n	800828a <__sfputc_r+0x1e>
 8008278:	6994      	ldr	r4, [r2, #24]
 800827a:	42a3      	cmp	r3, r4
 800827c:	db01      	blt.n	8008282 <__sfputc_r+0x16>
 800827e:	290a      	cmp	r1, #10
 8008280:	d103      	bne.n	800828a <__sfputc_r+0x1e>
 8008282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008286:	f7fe ba03 	b.w	8006690 <__swbuf_r>
 800828a:	6813      	ldr	r3, [r2, #0]
 800828c:	1c58      	adds	r0, r3, #1
 800828e:	6010      	str	r0, [r2, #0]
 8008290:	7019      	strb	r1, [r3, #0]
 8008292:	4608      	mov	r0, r1
 8008294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008298:	4770      	bx	lr

0800829a <__sfputs_r>:
 800829a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829c:	4606      	mov	r6, r0
 800829e:	460f      	mov	r7, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	18d5      	adds	r5, r2, r3
 80082a4:	42ac      	cmp	r4, r5
 80082a6:	d101      	bne.n	80082ac <__sfputs_r+0x12>
 80082a8:	2000      	movs	r0, #0
 80082aa:	e007      	b.n	80082bc <__sfputs_r+0x22>
 80082ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b0:	463a      	mov	r2, r7
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ffda 	bl	800826c <__sfputc_r>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d1f3      	bne.n	80082a4 <__sfputs_r+0xa>
 80082bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082c0 <_vfiprintf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	460d      	mov	r5, r1
 80082c6:	b09d      	sub	sp, #116	; 0x74
 80082c8:	4614      	mov	r4, r2
 80082ca:	4698      	mov	r8, r3
 80082cc:	4606      	mov	r6, r0
 80082ce:	b118      	cbz	r0, 80082d8 <_vfiprintf_r+0x18>
 80082d0:	6983      	ldr	r3, [r0, #24]
 80082d2:	b90b      	cbnz	r3, 80082d8 <_vfiprintf_r+0x18>
 80082d4:	f7ff fa30 	bl	8007738 <__sinit>
 80082d8:	4b89      	ldr	r3, [pc, #548]	; (8008500 <_vfiprintf_r+0x240>)
 80082da:	429d      	cmp	r5, r3
 80082dc:	d11b      	bne.n	8008316 <_vfiprintf_r+0x56>
 80082de:	6875      	ldr	r5, [r6, #4]
 80082e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	d405      	bmi.n	80082f2 <_vfiprintf_r+0x32>
 80082e6:	89ab      	ldrh	r3, [r5, #12]
 80082e8:	059a      	lsls	r2, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_vfiprintf_r+0x32>
 80082ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ee:	f7ff fac6 	bl	800787e <__retarget_lock_acquire_recursive>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	071b      	lsls	r3, r3, #28
 80082f6:	d501      	bpl.n	80082fc <_vfiprintf_r+0x3c>
 80082f8:	692b      	ldr	r3, [r5, #16]
 80082fa:	b9eb      	cbnz	r3, 8008338 <_vfiprintf_r+0x78>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4630      	mov	r0, r6
 8008300:	f7fe fa18 	bl	8006734 <__swsetup_r>
 8008304:	b1c0      	cbz	r0, 8008338 <_vfiprintf_r+0x78>
 8008306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008308:	07dc      	lsls	r4, r3, #31
 800830a:	d50e      	bpl.n	800832a <_vfiprintf_r+0x6a>
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	b01d      	add	sp, #116	; 0x74
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	4b7b      	ldr	r3, [pc, #492]	; (8008504 <_vfiprintf_r+0x244>)
 8008318:	429d      	cmp	r5, r3
 800831a:	d101      	bne.n	8008320 <_vfiprintf_r+0x60>
 800831c:	68b5      	ldr	r5, [r6, #8]
 800831e:	e7df      	b.n	80082e0 <_vfiprintf_r+0x20>
 8008320:	4b79      	ldr	r3, [pc, #484]	; (8008508 <_vfiprintf_r+0x248>)
 8008322:	429d      	cmp	r5, r3
 8008324:	bf08      	it	eq
 8008326:	68f5      	ldreq	r5, [r6, #12]
 8008328:	e7da      	b.n	80082e0 <_vfiprintf_r+0x20>
 800832a:	89ab      	ldrh	r3, [r5, #12]
 800832c:	0598      	lsls	r0, r3, #22
 800832e:	d4ed      	bmi.n	800830c <_vfiprintf_r+0x4c>
 8008330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008332:	f7ff faa5 	bl	8007880 <__retarget_lock_release_recursive>
 8008336:	e7e9      	b.n	800830c <_vfiprintf_r+0x4c>
 8008338:	2300      	movs	r3, #0
 800833a:	9309      	str	r3, [sp, #36]	; 0x24
 800833c:	2320      	movs	r3, #32
 800833e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008342:	f8cd 800c 	str.w	r8, [sp, #12]
 8008346:	2330      	movs	r3, #48	; 0x30
 8008348:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800850c <_vfiprintf_r+0x24c>
 800834c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008350:	f04f 0901 	mov.w	r9, #1
 8008354:	4623      	mov	r3, r4
 8008356:	469a      	mov	sl, r3
 8008358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800835c:	b10a      	cbz	r2, 8008362 <_vfiprintf_r+0xa2>
 800835e:	2a25      	cmp	r2, #37	; 0x25
 8008360:	d1f9      	bne.n	8008356 <_vfiprintf_r+0x96>
 8008362:	ebba 0b04 	subs.w	fp, sl, r4
 8008366:	d00b      	beq.n	8008380 <_vfiprintf_r+0xc0>
 8008368:	465b      	mov	r3, fp
 800836a:	4622      	mov	r2, r4
 800836c:	4629      	mov	r1, r5
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff ff93 	bl	800829a <__sfputs_r>
 8008374:	3001      	adds	r0, #1
 8008376:	f000 80aa 	beq.w	80084ce <_vfiprintf_r+0x20e>
 800837a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800837c:	445a      	add	r2, fp
 800837e:	9209      	str	r2, [sp, #36]	; 0x24
 8008380:	f89a 3000 	ldrb.w	r3, [sl]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80a2 	beq.w	80084ce <_vfiprintf_r+0x20e>
 800838a:	2300      	movs	r3, #0
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008394:	f10a 0a01 	add.w	sl, sl, #1
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	9307      	str	r3, [sp, #28]
 800839c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a0:	931a      	str	r3, [sp, #104]	; 0x68
 80083a2:	4654      	mov	r4, sl
 80083a4:	2205      	movs	r2, #5
 80083a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083aa:	4858      	ldr	r0, [pc, #352]	; (800850c <_vfiprintf_r+0x24c>)
 80083ac:	f7f7 ff18 	bl	80001e0 <memchr>
 80083b0:	9a04      	ldr	r2, [sp, #16]
 80083b2:	b9d8      	cbnz	r0, 80083ec <_vfiprintf_r+0x12c>
 80083b4:	06d1      	lsls	r1, r2, #27
 80083b6:	bf44      	itt	mi
 80083b8:	2320      	movmi	r3, #32
 80083ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083be:	0713      	lsls	r3, r2, #28
 80083c0:	bf44      	itt	mi
 80083c2:	232b      	movmi	r3, #43	; 0x2b
 80083c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c8:	f89a 3000 	ldrb.w	r3, [sl]
 80083cc:	2b2a      	cmp	r3, #42	; 0x2a
 80083ce:	d015      	beq.n	80083fc <_vfiprintf_r+0x13c>
 80083d0:	9a07      	ldr	r2, [sp, #28]
 80083d2:	4654      	mov	r4, sl
 80083d4:	2000      	movs	r0, #0
 80083d6:	f04f 0c0a 	mov.w	ip, #10
 80083da:	4621      	mov	r1, r4
 80083dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e0:	3b30      	subs	r3, #48	; 0x30
 80083e2:	2b09      	cmp	r3, #9
 80083e4:	d94e      	bls.n	8008484 <_vfiprintf_r+0x1c4>
 80083e6:	b1b0      	cbz	r0, 8008416 <_vfiprintf_r+0x156>
 80083e8:	9207      	str	r2, [sp, #28]
 80083ea:	e014      	b.n	8008416 <_vfiprintf_r+0x156>
 80083ec:	eba0 0308 	sub.w	r3, r0, r8
 80083f0:	fa09 f303 	lsl.w	r3, r9, r3
 80083f4:	4313      	orrs	r3, r2
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	46a2      	mov	sl, r4
 80083fa:	e7d2      	b.n	80083a2 <_vfiprintf_r+0xe2>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	1d19      	adds	r1, r3, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	9103      	str	r1, [sp, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	bfbb      	ittet	lt
 8008408:	425b      	neglt	r3, r3
 800840a:	f042 0202 	orrlt.w	r2, r2, #2
 800840e:	9307      	strge	r3, [sp, #28]
 8008410:	9307      	strlt	r3, [sp, #28]
 8008412:	bfb8      	it	lt
 8008414:	9204      	strlt	r2, [sp, #16]
 8008416:	7823      	ldrb	r3, [r4, #0]
 8008418:	2b2e      	cmp	r3, #46	; 0x2e
 800841a:	d10c      	bne.n	8008436 <_vfiprintf_r+0x176>
 800841c:	7863      	ldrb	r3, [r4, #1]
 800841e:	2b2a      	cmp	r3, #42	; 0x2a
 8008420:	d135      	bne.n	800848e <_vfiprintf_r+0x1ce>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	1d1a      	adds	r2, r3, #4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	9203      	str	r2, [sp, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	bfb8      	it	lt
 800842e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008432:	3402      	adds	r4, #2
 8008434:	9305      	str	r3, [sp, #20]
 8008436:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800851c <_vfiprintf_r+0x25c>
 800843a:	7821      	ldrb	r1, [r4, #0]
 800843c:	2203      	movs	r2, #3
 800843e:	4650      	mov	r0, sl
 8008440:	f7f7 fece 	bl	80001e0 <memchr>
 8008444:	b140      	cbz	r0, 8008458 <_vfiprintf_r+0x198>
 8008446:	2340      	movs	r3, #64	; 0x40
 8008448:	eba0 000a 	sub.w	r0, r0, sl
 800844c:	fa03 f000 	lsl.w	r0, r3, r0
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	4303      	orrs	r3, r0
 8008454:	3401      	adds	r4, #1
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845c:	482c      	ldr	r0, [pc, #176]	; (8008510 <_vfiprintf_r+0x250>)
 800845e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008462:	2206      	movs	r2, #6
 8008464:	f7f7 febc 	bl	80001e0 <memchr>
 8008468:	2800      	cmp	r0, #0
 800846a:	d03f      	beq.n	80084ec <_vfiprintf_r+0x22c>
 800846c:	4b29      	ldr	r3, [pc, #164]	; (8008514 <_vfiprintf_r+0x254>)
 800846e:	bb1b      	cbnz	r3, 80084b8 <_vfiprintf_r+0x1f8>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	3307      	adds	r3, #7
 8008474:	f023 0307 	bic.w	r3, r3, #7
 8008478:	3308      	adds	r3, #8
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847e:	443b      	add	r3, r7
 8008480:	9309      	str	r3, [sp, #36]	; 0x24
 8008482:	e767      	b.n	8008354 <_vfiprintf_r+0x94>
 8008484:	fb0c 3202 	mla	r2, ip, r2, r3
 8008488:	460c      	mov	r4, r1
 800848a:	2001      	movs	r0, #1
 800848c:	e7a5      	b.n	80083da <_vfiprintf_r+0x11a>
 800848e:	2300      	movs	r3, #0
 8008490:	3401      	adds	r4, #1
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	4619      	mov	r1, r3
 8008496:	f04f 0c0a 	mov.w	ip, #10
 800849a:	4620      	mov	r0, r4
 800849c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a0:	3a30      	subs	r2, #48	; 0x30
 80084a2:	2a09      	cmp	r2, #9
 80084a4:	d903      	bls.n	80084ae <_vfiprintf_r+0x1ee>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0c5      	beq.n	8008436 <_vfiprintf_r+0x176>
 80084aa:	9105      	str	r1, [sp, #20]
 80084ac:	e7c3      	b.n	8008436 <_vfiprintf_r+0x176>
 80084ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80084b2:	4604      	mov	r4, r0
 80084b4:	2301      	movs	r3, #1
 80084b6:	e7f0      	b.n	800849a <_vfiprintf_r+0x1da>
 80084b8:	ab03      	add	r3, sp, #12
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	462a      	mov	r2, r5
 80084be:	4b16      	ldr	r3, [pc, #88]	; (8008518 <_vfiprintf_r+0x258>)
 80084c0:	a904      	add	r1, sp, #16
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7fd fca4 	bl	8005e10 <_printf_float>
 80084c8:	4607      	mov	r7, r0
 80084ca:	1c78      	adds	r0, r7, #1
 80084cc:	d1d6      	bne.n	800847c <_vfiprintf_r+0x1bc>
 80084ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084d0:	07d9      	lsls	r1, r3, #31
 80084d2:	d405      	bmi.n	80084e0 <_vfiprintf_r+0x220>
 80084d4:	89ab      	ldrh	r3, [r5, #12]
 80084d6:	059a      	lsls	r2, r3, #22
 80084d8:	d402      	bmi.n	80084e0 <_vfiprintf_r+0x220>
 80084da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084dc:	f7ff f9d0 	bl	8007880 <__retarget_lock_release_recursive>
 80084e0:	89ab      	ldrh	r3, [r5, #12]
 80084e2:	065b      	lsls	r3, r3, #25
 80084e4:	f53f af12 	bmi.w	800830c <_vfiprintf_r+0x4c>
 80084e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ea:	e711      	b.n	8008310 <_vfiprintf_r+0x50>
 80084ec:	ab03      	add	r3, sp, #12
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	462a      	mov	r2, r5
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <_vfiprintf_r+0x258>)
 80084f4:	a904      	add	r1, sp, #16
 80084f6:	4630      	mov	r0, r6
 80084f8:	f7fd ff2e 	bl	8006358 <_printf_i>
 80084fc:	e7e4      	b.n	80084c8 <_vfiprintf_r+0x208>
 80084fe:	bf00      	nop
 8008500:	08009478 	.word	0x08009478
 8008504:	08009498 	.word	0x08009498
 8008508:	08009458 	.word	0x08009458
 800850c:	08009614 	.word	0x08009614
 8008510:	0800961e 	.word	0x0800961e
 8008514:	08005e11 	.word	0x08005e11
 8008518:	0800829b 	.word	0x0800829b
 800851c:	0800961a 	.word	0x0800961a

08008520 <_sbrk_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d06      	ldr	r5, [pc, #24]	; (800853c <_sbrk_r+0x1c>)
 8008524:	2300      	movs	r3, #0
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	f7f9 fc8a 	bl	8001e44 <_sbrk>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_sbrk_r+0x1a>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_sbrk_r+0x1a>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	20000480 	.word	0x20000480

08008540 <__sread>:
 8008540:	b510      	push	{r4, lr}
 8008542:	460c      	mov	r4, r1
 8008544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008548:	f000 f8e2 	bl	8008710 <_read_r>
 800854c:	2800      	cmp	r0, #0
 800854e:	bfab      	itete	ge
 8008550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008552:	89a3      	ldrhlt	r3, [r4, #12]
 8008554:	181b      	addge	r3, r3, r0
 8008556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800855a:	bfac      	ite	ge
 800855c:	6563      	strge	r3, [r4, #84]	; 0x54
 800855e:	81a3      	strhlt	r3, [r4, #12]
 8008560:	bd10      	pop	{r4, pc}

08008562 <__swrite>:
 8008562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008566:	461f      	mov	r7, r3
 8008568:	898b      	ldrh	r3, [r1, #12]
 800856a:	05db      	lsls	r3, r3, #23
 800856c:	4605      	mov	r5, r0
 800856e:	460c      	mov	r4, r1
 8008570:	4616      	mov	r6, r2
 8008572:	d505      	bpl.n	8008580 <__swrite+0x1e>
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	2302      	movs	r3, #2
 800857a:	2200      	movs	r2, #0
 800857c:	f000 f898 	bl	80086b0 <_lseek_r>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	4632      	mov	r2, r6
 800858e:	463b      	mov	r3, r7
 8008590:	4628      	mov	r0, r5
 8008592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	f000 b817 	b.w	80085c8 <_write_r>

0800859a <__sseek>:
 800859a:	b510      	push	{r4, lr}
 800859c:	460c      	mov	r4, r1
 800859e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a2:	f000 f885 	bl	80086b0 <_lseek_r>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	bf15      	itete	ne
 80085ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085b6:	81a3      	strheq	r3, [r4, #12]
 80085b8:	bf18      	it	ne
 80085ba:	81a3      	strhne	r3, [r4, #12]
 80085bc:	bd10      	pop	{r4, pc}

080085be <__sclose>:
 80085be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c2:	f000 b831 	b.w	8008628 <_close_r>
	...

080085c8 <_write_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <_write_r+0x20>)
 80085cc:	4604      	mov	r4, r0
 80085ce:	4608      	mov	r0, r1
 80085d0:	4611      	mov	r1, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	602a      	str	r2, [r5, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f7f9 fbe3 	bl	8001da2 <_write>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d102      	bne.n	80085e6 <_write_r+0x1e>
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	b103      	cbz	r3, 80085e6 <_write_r+0x1e>
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	20000480 	.word	0x20000480

080085ec <__assert_func>:
 80085ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ee:	4614      	mov	r4, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	4b09      	ldr	r3, [pc, #36]	; (8008618 <__assert_func+0x2c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4605      	mov	r5, r0
 80085f8:	68d8      	ldr	r0, [r3, #12]
 80085fa:	b14c      	cbz	r4, 8008610 <__assert_func+0x24>
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <__assert_func+0x30>)
 80085fe:	9100      	str	r1, [sp, #0]
 8008600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008604:	4906      	ldr	r1, [pc, #24]	; (8008620 <__assert_func+0x34>)
 8008606:	462b      	mov	r3, r5
 8008608:	f000 f81e 	bl	8008648 <fiprintf>
 800860c:	f000 f89f 	bl	800874e <abort>
 8008610:	4b04      	ldr	r3, [pc, #16]	; (8008624 <__assert_func+0x38>)
 8008612:	461c      	mov	r4, r3
 8008614:	e7f3      	b.n	80085fe <__assert_func+0x12>
 8008616:	bf00      	nop
 8008618:	2000000c 	.word	0x2000000c
 800861c:	08009625 	.word	0x08009625
 8008620:	08009632 	.word	0x08009632
 8008624:	08009660 	.word	0x08009660

08008628 <_close_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d06      	ldr	r5, [pc, #24]	; (8008644 <_close_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f9 fbd1 	bl	8001dda <_close>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_close_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_close_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20000480 	.word	0x20000480

08008648 <fiprintf>:
 8008648:	b40e      	push	{r1, r2, r3}
 800864a:	b503      	push	{r0, r1, lr}
 800864c:	4601      	mov	r1, r0
 800864e:	ab03      	add	r3, sp, #12
 8008650:	4805      	ldr	r0, [pc, #20]	; (8008668 <fiprintf+0x20>)
 8008652:	f853 2b04 	ldr.w	r2, [r3], #4
 8008656:	6800      	ldr	r0, [r0, #0]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	f7ff fe31 	bl	80082c0 <_vfiprintf_r>
 800865e:	b002      	add	sp, #8
 8008660:	f85d eb04 	ldr.w	lr, [sp], #4
 8008664:	b003      	add	sp, #12
 8008666:	4770      	bx	lr
 8008668:	2000000c 	.word	0x2000000c

0800866c <_fstat_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d07      	ldr	r5, [pc, #28]	; (800868c <_fstat_r+0x20>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	4611      	mov	r1, r2
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	f7f9 fbba 	bl	8001df2 <_fstat>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d102      	bne.n	8008688 <_fstat_r+0x1c>
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	b103      	cbz	r3, 8008688 <_fstat_r+0x1c>
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	bd38      	pop	{r3, r4, r5, pc}
 800868a:	bf00      	nop
 800868c:	20000480 	.word	0x20000480

08008690 <_isatty_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d06      	ldr	r5, [pc, #24]	; (80086ac <_isatty_r+0x1c>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	f7f9 fbb9 	bl	8001e12 <_isatty>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_isatty_r+0x1a>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_isatty_r+0x1a>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20000480 	.word	0x20000480

080086b0 <_lseek_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d07      	ldr	r5, [pc, #28]	; (80086d0 <_lseek_r+0x20>)
 80086b4:	4604      	mov	r4, r0
 80086b6:	4608      	mov	r0, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	f7f9 fbb2 	bl	8001e28 <_lseek>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_lseek_r+0x1e>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_lseek_r+0x1e>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20000480 	.word	0x20000480

080086d4 <__ascii_mbtowc>:
 80086d4:	b082      	sub	sp, #8
 80086d6:	b901      	cbnz	r1, 80086da <__ascii_mbtowc+0x6>
 80086d8:	a901      	add	r1, sp, #4
 80086da:	b142      	cbz	r2, 80086ee <__ascii_mbtowc+0x1a>
 80086dc:	b14b      	cbz	r3, 80086f2 <__ascii_mbtowc+0x1e>
 80086de:	7813      	ldrb	r3, [r2, #0]
 80086e0:	600b      	str	r3, [r1, #0]
 80086e2:	7812      	ldrb	r2, [r2, #0]
 80086e4:	1e10      	subs	r0, r2, #0
 80086e6:	bf18      	it	ne
 80086e8:	2001      	movne	r0, #1
 80086ea:	b002      	add	sp, #8
 80086ec:	4770      	bx	lr
 80086ee:	4610      	mov	r0, r2
 80086f0:	e7fb      	b.n	80086ea <__ascii_mbtowc+0x16>
 80086f2:	f06f 0001 	mvn.w	r0, #1
 80086f6:	e7f8      	b.n	80086ea <__ascii_mbtowc+0x16>

080086f8 <__malloc_lock>:
 80086f8:	4801      	ldr	r0, [pc, #4]	; (8008700 <__malloc_lock+0x8>)
 80086fa:	f7ff b8c0 	b.w	800787e <__retarget_lock_acquire_recursive>
 80086fe:	bf00      	nop
 8008700:	20000474 	.word	0x20000474

08008704 <__malloc_unlock>:
 8008704:	4801      	ldr	r0, [pc, #4]	; (800870c <__malloc_unlock+0x8>)
 8008706:	f7ff b8bb 	b.w	8007880 <__retarget_lock_release_recursive>
 800870a:	bf00      	nop
 800870c:	20000474 	.word	0x20000474

08008710 <_read_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_read_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7f9 fb22 	bl	8001d68 <_read>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_read_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_read_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20000480 	.word	0x20000480

08008734 <__ascii_wctomb>:
 8008734:	b149      	cbz	r1, 800874a <__ascii_wctomb+0x16>
 8008736:	2aff      	cmp	r2, #255	; 0xff
 8008738:	bf85      	ittet	hi
 800873a:	238a      	movhi	r3, #138	; 0x8a
 800873c:	6003      	strhi	r3, [r0, #0]
 800873e:	700a      	strbls	r2, [r1, #0]
 8008740:	f04f 30ff 	movhi.w	r0, #4294967295
 8008744:	bf98      	it	ls
 8008746:	2001      	movls	r0, #1
 8008748:	4770      	bx	lr
 800874a:	4608      	mov	r0, r1
 800874c:	4770      	bx	lr

0800874e <abort>:
 800874e:	b508      	push	{r3, lr}
 8008750:	2006      	movs	r0, #6
 8008752:	f000 f82b 	bl	80087ac <raise>
 8008756:	2001      	movs	r0, #1
 8008758:	f7f9 fafc 	bl	8001d54 <_exit>

0800875c <_raise_r>:
 800875c:	291f      	cmp	r1, #31
 800875e:	b538      	push	{r3, r4, r5, lr}
 8008760:	4604      	mov	r4, r0
 8008762:	460d      	mov	r5, r1
 8008764:	d904      	bls.n	8008770 <_raise_r+0x14>
 8008766:	2316      	movs	r3, #22
 8008768:	6003      	str	r3, [r0, #0]
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008772:	b112      	cbz	r2, 800877a <_raise_r+0x1e>
 8008774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008778:	b94b      	cbnz	r3, 800878e <_raise_r+0x32>
 800877a:	4620      	mov	r0, r4
 800877c:	f000 f830 	bl	80087e0 <_getpid_r>
 8008780:	462a      	mov	r2, r5
 8008782:	4601      	mov	r1, r0
 8008784:	4620      	mov	r0, r4
 8008786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800878a:	f000 b817 	b.w	80087bc <_kill_r>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d00a      	beq.n	80087a8 <_raise_r+0x4c>
 8008792:	1c59      	adds	r1, r3, #1
 8008794:	d103      	bne.n	800879e <_raise_r+0x42>
 8008796:	2316      	movs	r3, #22
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	2001      	movs	r0, #1
 800879c:	e7e7      	b.n	800876e <_raise_r+0x12>
 800879e:	2400      	movs	r4, #0
 80087a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087a4:	4628      	mov	r0, r5
 80087a6:	4798      	blx	r3
 80087a8:	2000      	movs	r0, #0
 80087aa:	e7e0      	b.n	800876e <_raise_r+0x12>

080087ac <raise>:
 80087ac:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <raise+0xc>)
 80087ae:	4601      	mov	r1, r0
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f7ff bfd3 	b.w	800875c <_raise_r>
 80087b6:	bf00      	nop
 80087b8:	2000000c 	.word	0x2000000c

080087bc <_kill_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d07      	ldr	r5, [pc, #28]	; (80087dc <_kill_r+0x20>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	f7f9 fab3 	bl	8001d34 <_kill>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d102      	bne.n	80087d8 <_kill_r+0x1c>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	b103      	cbz	r3, 80087d8 <_kill_r+0x1c>
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	bd38      	pop	{r3, r4, r5, pc}
 80087da:	bf00      	nop
 80087dc:	20000480 	.word	0x20000480

080087e0 <_getpid_r>:
 80087e0:	f7f9 baa0 	b.w	8001d24 <_getpid>

080087e4 <cosf>:
 80087e4:	ee10 3a10 	vmov	r3, s0
 80087e8:	b507      	push	{r0, r1, r2, lr}
 80087ea:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <cosf+0x80>)
 80087ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	4293      	cmp	r3, r2
 80087f2:	dc06      	bgt.n	8008802 <cosf+0x1e>
 80087f4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8008868 <cosf+0x84>
 80087f8:	b003      	add	sp, #12
 80087fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80087fe:	f000 b9b7 	b.w	8008b70 <__kernel_cosf>
 8008802:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008806:	db04      	blt.n	8008812 <cosf+0x2e>
 8008808:	ee30 0a40 	vsub.f32	s0, s0, s0
 800880c:	b003      	add	sp, #12
 800880e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008812:	4668      	mov	r0, sp
 8008814:	f000 f870 	bl	80088f8 <__ieee754_rem_pio2f>
 8008818:	f000 0003 	and.w	r0, r0, #3
 800881c:	2801      	cmp	r0, #1
 800881e:	d009      	beq.n	8008834 <cosf+0x50>
 8008820:	2802      	cmp	r0, #2
 8008822:	d010      	beq.n	8008846 <cosf+0x62>
 8008824:	b9b0      	cbnz	r0, 8008854 <cosf+0x70>
 8008826:	eddd 0a01 	vldr	s1, [sp, #4]
 800882a:	ed9d 0a00 	vldr	s0, [sp]
 800882e:	f000 f99f 	bl	8008b70 <__kernel_cosf>
 8008832:	e7eb      	b.n	800880c <cosf+0x28>
 8008834:	eddd 0a01 	vldr	s1, [sp, #4]
 8008838:	ed9d 0a00 	vldr	s0, [sp]
 800883c:	f000 fc6e 	bl	800911c <__kernel_sinf>
 8008840:	eeb1 0a40 	vneg.f32	s0, s0
 8008844:	e7e2      	b.n	800880c <cosf+0x28>
 8008846:	eddd 0a01 	vldr	s1, [sp, #4]
 800884a:	ed9d 0a00 	vldr	s0, [sp]
 800884e:	f000 f98f 	bl	8008b70 <__kernel_cosf>
 8008852:	e7f5      	b.n	8008840 <cosf+0x5c>
 8008854:	eddd 0a01 	vldr	s1, [sp, #4]
 8008858:	ed9d 0a00 	vldr	s0, [sp]
 800885c:	2001      	movs	r0, #1
 800885e:	f000 fc5d 	bl	800911c <__kernel_sinf>
 8008862:	e7d3      	b.n	800880c <cosf+0x28>
 8008864:	3f490fd8 	.word	0x3f490fd8
 8008868:	00000000 	.word	0x00000000

0800886c <sinf>:
 800886c:	ee10 3a10 	vmov	r3, s0
 8008870:	b507      	push	{r0, r1, r2, lr}
 8008872:	4a1f      	ldr	r2, [pc, #124]	; (80088f0 <sinf+0x84>)
 8008874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008878:	4293      	cmp	r3, r2
 800887a:	dc07      	bgt.n	800888c <sinf+0x20>
 800887c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80088f4 <sinf+0x88>
 8008880:	2000      	movs	r0, #0
 8008882:	b003      	add	sp, #12
 8008884:	f85d eb04 	ldr.w	lr, [sp], #4
 8008888:	f000 bc48 	b.w	800911c <__kernel_sinf>
 800888c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008890:	db04      	blt.n	800889c <sinf+0x30>
 8008892:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008896:	b003      	add	sp, #12
 8008898:	f85d fb04 	ldr.w	pc, [sp], #4
 800889c:	4668      	mov	r0, sp
 800889e:	f000 f82b 	bl	80088f8 <__ieee754_rem_pio2f>
 80088a2:	f000 0003 	and.w	r0, r0, #3
 80088a6:	2801      	cmp	r0, #1
 80088a8:	d00a      	beq.n	80088c0 <sinf+0x54>
 80088aa:	2802      	cmp	r0, #2
 80088ac:	d00f      	beq.n	80088ce <sinf+0x62>
 80088ae:	b9c0      	cbnz	r0, 80088e2 <sinf+0x76>
 80088b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80088b4:	ed9d 0a00 	vldr	s0, [sp]
 80088b8:	2001      	movs	r0, #1
 80088ba:	f000 fc2f 	bl	800911c <__kernel_sinf>
 80088be:	e7ea      	b.n	8008896 <sinf+0x2a>
 80088c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80088c4:	ed9d 0a00 	vldr	s0, [sp]
 80088c8:	f000 f952 	bl	8008b70 <__kernel_cosf>
 80088cc:	e7e3      	b.n	8008896 <sinf+0x2a>
 80088ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80088d2:	ed9d 0a00 	vldr	s0, [sp]
 80088d6:	2001      	movs	r0, #1
 80088d8:	f000 fc20 	bl	800911c <__kernel_sinf>
 80088dc:	eeb1 0a40 	vneg.f32	s0, s0
 80088e0:	e7d9      	b.n	8008896 <sinf+0x2a>
 80088e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80088e6:	ed9d 0a00 	vldr	s0, [sp]
 80088ea:	f000 f941 	bl	8008b70 <__kernel_cosf>
 80088ee:	e7f5      	b.n	80088dc <sinf+0x70>
 80088f0:	3f490fd8 	.word	0x3f490fd8
 80088f4:	00000000 	.word	0x00000000

080088f8 <__ieee754_rem_pio2f>:
 80088f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fa:	ee10 6a10 	vmov	r6, s0
 80088fe:	4b8e      	ldr	r3, [pc, #568]	; (8008b38 <__ieee754_rem_pio2f+0x240>)
 8008900:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	b087      	sub	sp, #28
 8008908:	eef0 7a40 	vmov.f32	s15, s0
 800890c:	4604      	mov	r4, r0
 800890e:	dc05      	bgt.n	800891c <__ieee754_rem_pio2f+0x24>
 8008910:	2300      	movs	r3, #0
 8008912:	ed80 0a00 	vstr	s0, [r0]
 8008916:	6043      	str	r3, [r0, #4]
 8008918:	2000      	movs	r0, #0
 800891a:	e01a      	b.n	8008952 <__ieee754_rem_pio2f+0x5a>
 800891c:	4b87      	ldr	r3, [pc, #540]	; (8008b3c <__ieee754_rem_pio2f+0x244>)
 800891e:	429d      	cmp	r5, r3
 8008920:	dc46      	bgt.n	80089b0 <__ieee754_rem_pio2f+0xb8>
 8008922:	2e00      	cmp	r6, #0
 8008924:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008b40 <__ieee754_rem_pio2f+0x248>
 8008928:	4b86      	ldr	r3, [pc, #536]	; (8008b44 <__ieee754_rem_pio2f+0x24c>)
 800892a:	f025 050f 	bic.w	r5, r5, #15
 800892e:	dd1f      	ble.n	8008970 <__ieee754_rem_pio2f+0x78>
 8008930:	429d      	cmp	r5, r3
 8008932:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008936:	d00e      	beq.n	8008956 <__ieee754_rem_pio2f+0x5e>
 8008938:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008b48 <__ieee754_rem_pio2f+0x250>
 800893c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008940:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008944:	ed80 0a00 	vstr	s0, [r0]
 8008948:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800894c:	2001      	movs	r0, #1
 800894e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008952:	b007      	add	sp, #28
 8008954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008956:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008b4c <__ieee754_rem_pio2f+0x254>
 800895a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008b50 <__ieee754_rem_pio2f+0x258>
 800895e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008962:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008966:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800896a:	edc0 6a00 	vstr	s13, [r0]
 800896e:	e7eb      	b.n	8008948 <__ieee754_rem_pio2f+0x50>
 8008970:	429d      	cmp	r5, r3
 8008972:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008976:	d00e      	beq.n	8008996 <__ieee754_rem_pio2f+0x9e>
 8008978:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008b48 <__ieee754_rem_pio2f+0x250>
 800897c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008980:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008984:	ed80 0a00 	vstr	s0, [r0]
 8008988:	ee77 7a87 	vadd.f32	s15, s15, s14
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	edc4 7a01 	vstr	s15, [r4, #4]
 8008994:	e7dd      	b.n	8008952 <__ieee754_rem_pio2f+0x5a>
 8008996:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008b4c <__ieee754_rem_pio2f+0x254>
 800899a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008b50 <__ieee754_rem_pio2f+0x258>
 800899e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80089a2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80089a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089aa:	edc0 6a00 	vstr	s13, [r0]
 80089ae:	e7eb      	b.n	8008988 <__ieee754_rem_pio2f+0x90>
 80089b0:	4b68      	ldr	r3, [pc, #416]	; (8008b54 <__ieee754_rem_pio2f+0x25c>)
 80089b2:	429d      	cmp	r5, r3
 80089b4:	dc72      	bgt.n	8008a9c <__ieee754_rem_pio2f+0x1a4>
 80089b6:	f000 fbf9 	bl	80091ac <fabsf>
 80089ba:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008b58 <__ieee754_rem_pio2f+0x260>
 80089be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80089c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80089c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089ce:	ee17 0a90 	vmov	r0, s15
 80089d2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008b40 <__ieee754_rem_pio2f+0x248>
 80089d6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80089da:	281f      	cmp	r0, #31
 80089dc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008b48 <__ieee754_rem_pio2f+0x250>
 80089e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e4:	eeb1 6a47 	vneg.f32	s12, s14
 80089e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80089ec:	ee16 2a90 	vmov	r2, s13
 80089f0:	dc1c      	bgt.n	8008a2c <__ieee754_rem_pio2f+0x134>
 80089f2:	495a      	ldr	r1, [pc, #360]	; (8008b5c <__ieee754_rem_pio2f+0x264>)
 80089f4:	1e47      	subs	r7, r0, #1
 80089f6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80089fa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80089fe:	428b      	cmp	r3, r1
 8008a00:	d014      	beq.n	8008a2c <__ieee754_rem_pio2f+0x134>
 8008a02:	6022      	str	r2, [r4, #0]
 8008a04:	ed94 7a00 	vldr	s14, [r4]
 8008a08:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008a0c:	2e00      	cmp	r6, #0
 8008a0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a12:	ed84 0a01 	vstr	s0, [r4, #4]
 8008a16:	da9c      	bge.n	8008952 <__ieee754_rem_pio2f+0x5a>
 8008a18:	eeb1 7a47 	vneg.f32	s14, s14
 8008a1c:	eeb1 0a40 	vneg.f32	s0, s0
 8008a20:	ed84 7a00 	vstr	s14, [r4]
 8008a24:	ed84 0a01 	vstr	s0, [r4, #4]
 8008a28:	4240      	negs	r0, r0
 8008a2a:	e792      	b.n	8008952 <__ieee754_rem_pio2f+0x5a>
 8008a2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008a30:	15eb      	asrs	r3, r5, #23
 8008a32:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008a36:	2d08      	cmp	r5, #8
 8008a38:	dde3      	ble.n	8008a02 <__ieee754_rem_pio2f+0x10a>
 8008a3a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008b4c <__ieee754_rem_pio2f+0x254>
 8008a3e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008b50 <__ieee754_rem_pio2f+0x258>
 8008a42:	eef0 6a40 	vmov.f32	s13, s0
 8008a46:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008a4a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008a4e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008a52:	eef0 7a40 	vmov.f32	s15, s0
 8008a56:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008a5a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008a5e:	ee15 2a90 	vmov	r2, s11
 8008a62:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008a66:	1a5b      	subs	r3, r3, r1
 8008a68:	2b19      	cmp	r3, #25
 8008a6a:	dc04      	bgt.n	8008a76 <__ieee754_rem_pio2f+0x17e>
 8008a6c:	edc4 5a00 	vstr	s11, [r4]
 8008a70:	eeb0 0a66 	vmov.f32	s0, s13
 8008a74:	e7c6      	b.n	8008a04 <__ieee754_rem_pio2f+0x10c>
 8008a76:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008b60 <__ieee754_rem_pio2f+0x268>
 8008a7a:	eeb0 0a66 	vmov.f32	s0, s13
 8008a7e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008a82:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008a86:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008b64 <__ieee754_rem_pio2f+0x26c>
 8008a8a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008a8e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008a92:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008a96:	ed84 7a00 	vstr	s14, [r4]
 8008a9a:	e7b3      	b.n	8008a04 <__ieee754_rem_pio2f+0x10c>
 8008a9c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008aa0:	db06      	blt.n	8008ab0 <__ieee754_rem_pio2f+0x1b8>
 8008aa2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008aa6:	edc0 7a01 	vstr	s15, [r0, #4]
 8008aaa:	edc0 7a00 	vstr	s15, [r0]
 8008aae:	e733      	b.n	8008918 <__ieee754_rem_pio2f+0x20>
 8008ab0:	15ea      	asrs	r2, r5, #23
 8008ab2:	3a86      	subs	r2, #134	; 0x86
 8008ab4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008ab8:	ee07 3a90 	vmov	s15, r3
 8008abc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ac0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008b68 <__ieee754_rem_pio2f+0x270>
 8008ac4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008acc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008ad0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ad4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ad8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008adc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ae0:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ae8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af0:	edcd 7a05 	vstr	s15, [sp, #20]
 8008af4:	d11e      	bne.n	8008b34 <__ieee754_rem_pio2f+0x23c>
 8008af6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	bf14      	ite	ne
 8008b00:	2302      	movne	r3, #2
 8008b02:	2301      	moveq	r3, #1
 8008b04:	4919      	ldr	r1, [pc, #100]	; (8008b6c <__ieee754_rem_pio2f+0x274>)
 8008b06:	9101      	str	r1, [sp, #4]
 8008b08:	2102      	movs	r1, #2
 8008b0a:	9100      	str	r1, [sp, #0]
 8008b0c:	a803      	add	r0, sp, #12
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f000 f88e 	bl	8008c30 <__kernel_rem_pio2f>
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	f6bf af1c 	bge.w	8008952 <__ieee754_rem_pio2f+0x5a>
 8008b1a:	edd4 7a00 	vldr	s15, [r4]
 8008b1e:	eef1 7a67 	vneg.f32	s15, s15
 8008b22:	edc4 7a00 	vstr	s15, [r4]
 8008b26:	edd4 7a01 	vldr	s15, [r4, #4]
 8008b2a:	eef1 7a67 	vneg.f32	s15, s15
 8008b2e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008b32:	e779      	b.n	8008a28 <__ieee754_rem_pio2f+0x130>
 8008b34:	2303      	movs	r3, #3
 8008b36:	e7e5      	b.n	8008b04 <__ieee754_rem_pio2f+0x20c>
 8008b38:	3f490fd8 	.word	0x3f490fd8
 8008b3c:	4016cbe3 	.word	0x4016cbe3
 8008b40:	3fc90f80 	.word	0x3fc90f80
 8008b44:	3fc90fd0 	.word	0x3fc90fd0
 8008b48:	37354443 	.word	0x37354443
 8008b4c:	37354400 	.word	0x37354400
 8008b50:	2e85a308 	.word	0x2e85a308
 8008b54:	43490f80 	.word	0x43490f80
 8008b58:	3f22f984 	.word	0x3f22f984
 8008b5c:	0800976c 	.word	0x0800976c
 8008b60:	2e85a300 	.word	0x2e85a300
 8008b64:	248d3132 	.word	0x248d3132
 8008b68:	43800000 	.word	0x43800000
 8008b6c:	080097ec 	.word	0x080097ec

08008b70 <__kernel_cosf>:
 8008b70:	ee10 3a10 	vmov	r3, s0
 8008b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008b7c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008b80:	da05      	bge.n	8008b8e <__kernel_cosf+0x1e>
 8008b82:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008b86:	ee17 2a90 	vmov	r2, s15
 8008b8a:	2a00      	cmp	r2, #0
 8008b8c:	d03d      	beq.n	8008c0a <__kernel_cosf+0x9a>
 8008b8e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008b92:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008c10 <__kernel_cosf+0xa0>
 8008b96:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008c14 <__kernel_cosf+0xa4>
 8008b9a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008c18 <__kernel_cosf+0xa8>
 8008b9e:	4a1f      	ldr	r2, [pc, #124]	; (8008c1c <__kernel_cosf+0xac>)
 8008ba0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008c20 <__kernel_cosf+0xb0>
 8008baa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008bae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008c24 <__kernel_cosf+0xb4>
 8008bb2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008bb6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008c28 <__kernel_cosf+0xb8>
 8008bba:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008bbe:	eeb0 7a66 	vmov.f32	s14, s13
 8008bc2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008bc6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008bca:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008bce:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008bd2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008bd6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008bda:	dc04      	bgt.n	8008be6 <__kernel_cosf+0x76>
 8008bdc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008be0:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008be4:	4770      	bx	lr
 8008be6:	4a11      	ldr	r2, [pc, #68]	; (8008c2c <__kernel_cosf+0xbc>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	bfda      	itte	le
 8008bec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008bf0:	ee06 3a90 	vmovle	s13, r3
 8008bf4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008bf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bfc:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c08:	4770      	bx	lr
 8008c0a:	eeb0 0a46 	vmov.f32	s0, s12
 8008c0e:	4770      	bx	lr
 8008c10:	ad47d74e 	.word	0xad47d74e
 8008c14:	310f74f6 	.word	0x310f74f6
 8008c18:	3d2aaaab 	.word	0x3d2aaaab
 8008c1c:	3e999999 	.word	0x3e999999
 8008c20:	b493f27c 	.word	0xb493f27c
 8008c24:	37d00d01 	.word	0x37d00d01
 8008c28:	bab60b61 	.word	0xbab60b61
 8008c2c:	3f480000 	.word	0x3f480000

08008c30 <__kernel_rem_pio2f>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	ed2d 8b04 	vpush	{d8-d9}
 8008c38:	b0d9      	sub	sp, #356	; 0x164
 8008c3a:	4688      	mov	r8, r1
 8008c3c:	9002      	str	r0, [sp, #8]
 8008c3e:	49bb      	ldr	r1, [pc, #748]	; (8008f2c <__kernel_rem_pio2f+0x2fc>)
 8008c40:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008c48:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008c4c:	1e59      	subs	r1, r3, #1
 8008c4e:	1d13      	adds	r3, r2, #4
 8008c50:	db27      	blt.n	8008ca2 <__kernel_rem_pio2f+0x72>
 8008c52:	f1b2 0b03 	subs.w	fp, r2, #3
 8008c56:	bf48      	it	mi
 8008c58:	f102 0b04 	addmi.w	fp, r2, #4
 8008c5c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008c60:	1c45      	adds	r5, r0, #1
 8008c62:	00ec      	lsls	r4, r5, #3
 8008c64:	1a47      	subs	r7, r0, r1
 8008c66:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008f3c <__kernel_rem_pio2f+0x30c>
 8008c6a:	9403      	str	r4, [sp, #12]
 8008c6c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008c70:	eb0a 0c01 	add.w	ip, sl, r1
 8008c74:	ae1c      	add	r6, sp, #112	; 0x70
 8008c76:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	4564      	cmp	r4, ip
 8008c7e:	dd12      	ble.n	8008ca6 <__kernel_rem_pio2f+0x76>
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	ac1c      	add	r4, sp, #112	; 0x70
 8008c84:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008c88:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008c8c:	f04f 0c00 	mov.w	ip, #0
 8008c90:	45d4      	cmp	ip, sl
 8008c92:	dc27      	bgt.n	8008ce4 <__kernel_rem_pio2f+0xb4>
 8008c94:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008c98:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008f3c <__kernel_rem_pio2f+0x30c>
 8008c9c:	4627      	mov	r7, r4
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	e016      	b.n	8008cd0 <__kernel_rem_pio2f+0xa0>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e7dc      	b.n	8008c60 <__kernel_rem_pio2f+0x30>
 8008ca6:	42e7      	cmn	r7, r4
 8008ca8:	bf5d      	ittte	pl
 8008caa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008cae:	ee07 3a90 	vmovpl	s15, r3
 8008cb2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008cb6:	eef0 7a47 	vmovmi.f32	s15, s14
 8008cba:	ece6 7a01 	vstmia	r6!, {s15}
 8008cbe:	3401      	adds	r4, #1
 8008cc0:	e7dc      	b.n	8008c7c <__kernel_rem_pio2f+0x4c>
 8008cc2:	ecf9 6a01 	vldmia	r9!, {s13}
 8008cc6:	ed97 7a00 	vldr	s14, [r7]
 8008cca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008cce:	3601      	adds	r6, #1
 8008cd0:	428e      	cmp	r6, r1
 8008cd2:	f1a7 0704 	sub.w	r7, r7, #4
 8008cd6:	ddf4      	ble.n	8008cc2 <__kernel_rem_pio2f+0x92>
 8008cd8:	eceb 7a01 	vstmia	fp!, {s15}
 8008cdc:	f10c 0c01 	add.w	ip, ip, #1
 8008ce0:	3404      	adds	r4, #4
 8008ce2:	e7d5      	b.n	8008c90 <__kernel_rem_pio2f+0x60>
 8008ce4:	ab08      	add	r3, sp, #32
 8008ce6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008cea:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008f38 <__kernel_rem_pio2f+0x308>
 8008cee:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008f34 <__kernel_rem_pio2f+0x304>
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008cf8:	4656      	mov	r6, sl
 8008cfa:	00b3      	lsls	r3, r6, #2
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	ab58      	add	r3, sp, #352	; 0x160
 8008d00:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008d04:	ac08      	add	r4, sp, #32
 8008d06:	ab44      	add	r3, sp, #272	; 0x110
 8008d08:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008d0c:	46a4      	mov	ip, r4
 8008d0e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008d12:	4637      	mov	r7, r6
 8008d14:	2f00      	cmp	r7, #0
 8008d16:	f1a0 0004 	sub.w	r0, r0, #4
 8008d1a:	dc4f      	bgt.n	8008dbc <__kernel_rem_pio2f+0x18c>
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008d22:	f000 fa8d 	bl	8009240 <scalbnf>
 8008d26:	eeb0 8a40 	vmov.f32	s16, s0
 8008d2a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008d2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008d32:	f000 fa43 	bl	80091bc <floorf>
 8008d36:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008d3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008d44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008d48:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008d4c:	ee17 9a90 	vmov	r9, s15
 8008d50:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008d54:	dd44      	ble.n	8008de0 <__kernel_rem_pio2f+0x1b0>
 8008d56:	f106 3cff 	add.w	ip, r6, #4294967295
 8008d5a:	ab08      	add	r3, sp, #32
 8008d5c:	f1c5 0e08 	rsb	lr, r5, #8
 8008d60:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008d64:	fa47 f00e 	asr.w	r0, r7, lr
 8008d68:	4481      	add	r9, r0
 8008d6a:	fa00 f00e 	lsl.w	r0, r0, lr
 8008d6e:	1a3f      	subs	r7, r7, r0
 8008d70:	f1c5 0007 	rsb	r0, r5, #7
 8008d74:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008d78:	4107      	asrs	r7, r0
 8008d7a:	2f00      	cmp	r7, #0
 8008d7c:	dd3f      	ble.n	8008dfe <__kernel_rem_pio2f+0x1ce>
 8008d7e:	f04f 0e00 	mov.w	lr, #0
 8008d82:	f109 0901 	add.w	r9, r9, #1
 8008d86:	4673      	mov	r3, lr
 8008d88:	4576      	cmp	r6, lr
 8008d8a:	dc6b      	bgt.n	8008e64 <__kernel_rem_pio2f+0x234>
 8008d8c:	2d00      	cmp	r5, #0
 8008d8e:	dd04      	ble.n	8008d9a <__kernel_rem_pio2f+0x16a>
 8008d90:	2d01      	cmp	r5, #1
 8008d92:	d078      	beq.n	8008e86 <__kernel_rem_pio2f+0x256>
 8008d94:	2d02      	cmp	r5, #2
 8008d96:	f000 8081 	beq.w	8008e9c <__kernel_rem_pio2f+0x26c>
 8008d9a:	2f02      	cmp	r7, #2
 8008d9c:	d12f      	bne.n	8008dfe <__kernel_rem_pio2f+0x1ce>
 8008d9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008da2:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008da6:	b353      	cbz	r3, 8008dfe <__kernel_rem_pio2f+0x1ce>
 8008da8:	4628      	mov	r0, r5
 8008daa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008dae:	f000 fa47 	bl	8009240 <scalbnf>
 8008db2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008db6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008dba:	e020      	b.n	8008dfe <__kernel_rem_pio2f+0x1ce>
 8008dbc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008dc0:	3f01      	subs	r7, #1
 8008dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008dce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008dd2:	ecac 0a01 	vstmia	ip!, {s0}
 8008dd6:	ed90 0a00 	vldr	s0, [r0]
 8008dda:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008dde:	e799      	b.n	8008d14 <__kernel_rem_pio2f+0xe4>
 8008de0:	d105      	bne.n	8008dee <__kernel_rem_pio2f+0x1be>
 8008de2:	1e70      	subs	r0, r6, #1
 8008de4:	ab08      	add	r3, sp, #32
 8008de6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008dea:	11ff      	asrs	r7, r7, #7
 8008dec:	e7c5      	b.n	8008d7a <__kernel_rem_pio2f+0x14a>
 8008dee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008df2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfa:	da31      	bge.n	8008e60 <__kernel_rem_pio2f+0x230>
 8008dfc:	2700      	movs	r7, #0
 8008dfe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e06:	f040 809b 	bne.w	8008f40 <__kernel_rem_pio2f+0x310>
 8008e0a:	1e74      	subs	r4, r6, #1
 8008e0c:	46a4      	mov	ip, r4
 8008e0e:	2000      	movs	r0, #0
 8008e10:	45d4      	cmp	ip, sl
 8008e12:	da4a      	bge.n	8008eaa <__kernel_rem_pio2f+0x27a>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d07a      	beq.n	8008f0e <__kernel_rem_pio2f+0x2de>
 8008e18:	ab08      	add	r3, sp, #32
 8008e1a:	3d08      	subs	r5, #8
 8008e1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 8081 	beq.w	8008f28 <__kernel_rem_pio2f+0x2f8>
 8008e26:	4628      	mov	r0, r5
 8008e28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008e2c:	00a5      	lsls	r5, r4, #2
 8008e2e:	f000 fa07 	bl	8009240 <scalbnf>
 8008e32:	aa44      	add	r2, sp, #272	; 0x110
 8008e34:	1d2b      	adds	r3, r5, #4
 8008e36:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008f38 <__kernel_rem_pio2f+0x308>
 8008e3a:	18d1      	adds	r1, r2, r3
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	f280 80ae 	bge.w	8008fa0 <__kernel_rem_pio2f+0x370>
 8008e44:	4622      	mov	r2, r4
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	f2c0 80cc 	blt.w	8008fe4 <__kernel_rem_pio2f+0x3b4>
 8008e4c:	a944      	add	r1, sp, #272	; 0x110
 8008e4e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008e52:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008f30 <__kernel_rem_pio2f+0x300>
 8008e56:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008f3c <__kernel_rem_pio2f+0x30c>
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	1aa1      	subs	r1, r4, r2
 8008e5e:	e0b6      	b.n	8008fce <__kernel_rem_pio2f+0x39e>
 8008e60:	2702      	movs	r7, #2
 8008e62:	e78c      	b.n	8008d7e <__kernel_rem_pio2f+0x14e>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	b94b      	cbnz	r3, 8008e7c <__kernel_rem_pio2f+0x24c>
 8008e68:	b118      	cbz	r0, 8008e72 <__kernel_rem_pio2f+0x242>
 8008e6a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008e6e:	6020      	str	r0, [r4, #0]
 8008e70:	2001      	movs	r0, #1
 8008e72:	f10e 0e01 	add.w	lr, lr, #1
 8008e76:	3404      	adds	r4, #4
 8008e78:	4603      	mov	r3, r0
 8008e7a:	e785      	b.n	8008d88 <__kernel_rem_pio2f+0x158>
 8008e7c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008e80:	6020      	str	r0, [r4, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	e7f5      	b.n	8008e72 <__kernel_rem_pio2f+0x242>
 8008e86:	1e74      	subs	r4, r6, #1
 8008e88:	a808      	add	r0, sp, #32
 8008e8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008e8e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008e92:	f10d 0c20 	add.w	ip, sp, #32
 8008e96:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008e9a:	e77e      	b.n	8008d9a <__kernel_rem_pio2f+0x16a>
 8008e9c:	1e74      	subs	r4, r6, #1
 8008e9e:	a808      	add	r0, sp, #32
 8008ea0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008ea4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008ea8:	e7f3      	b.n	8008e92 <__kernel_rem_pio2f+0x262>
 8008eaa:	ab08      	add	r3, sp, #32
 8008eac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008eb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008eb4:	4318      	orrs	r0, r3
 8008eb6:	e7ab      	b.n	8008e10 <__kernel_rem_pio2f+0x1e0>
 8008eb8:	f10c 0c01 	add.w	ip, ip, #1
 8008ebc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008ec0:	2c00      	cmp	r4, #0
 8008ec2:	d0f9      	beq.n	8008eb8 <__kernel_rem_pio2f+0x288>
 8008ec4:	9b05      	ldr	r3, [sp, #20]
 8008ec6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008eca:	eb0d 0003 	add.w	r0, sp, r3
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	18f4      	adds	r4, r6, r3
 8008ed2:	ab1c      	add	r3, sp, #112	; 0x70
 8008ed4:	1c77      	adds	r7, r6, #1
 8008ed6:	384c      	subs	r0, #76	; 0x4c
 8008ed8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008edc:	4466      	add	r6, ip
 8008ede:	42be      	cmp	r6, r7
 8008ee0:	f6ff af0b 	blt.w	8008cfa <__kernel_rem_pio2f+0xca>
 8008ee4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008ee8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef4:	f04f 0c00 	mov.w	ip, #0
 8008ef8:	ece4 7a01 	vstmia	r4!, {s15}
 8008efc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008f3c <__kernel_rem_pio2f+0x30c>
 8008f00:	46a1      	mov	r9, r4
 8008f02:	458c      	cmp	ip, r1
 8008f04:	dd07      	ble.n	8008f16 <__kernel_rem_pio2f+0x2e6>
 8008f06:	ece0 7a01 	vstmia	r0!, {s15}
 8008f0a:	3701      	adds	r7, #1
 8008f0c:	e7e7      	b.n	8008ede <__kernel_rem_pio2f+0x2ae>
 8008f0e:	9804      	ldr	r0, [sp, #16]
 8008f10:	f04f 0c01 	mov.w	ip, #1
 8008f14:	e7d2      	b.n	8008ebc <__kernel_rem_pio2f+0x28c>
 8008f16:	ecfe 6a01 	vldmia	lr!, {s13}
 8008f1a:	ed39 7a01 	vldmdb	r9!, {s14}
 8008f1e:	f10c 0c01 	add.w	ip, ip, #1
 8008f22:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008f26:	e7ec      	b.n	8008f02 <__kernel_rem_pio2f+0x2d2>
 8008f28:	3c01      	subs	r4, #1
 8008f2a:	e775      	b.n	8008e18 <__kernel_rem_pio2f+0x1e8>
 8008f2c:	08009b30 	.word	0x08009b30
 8008f30:	08009b04 	.word	0x08009b04
 8008f34:	43800000 	.word	0x43800000
 8008f38:	3b800000 	.word	0x3b800000
 8008f3c:	00000000 	.word	0x00000000
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	eeb0 0a48 	vmov.f32	s0, s16
 8008f46:	1a98      	subs	r0, r3, r2
 8008f48:	f000 f97a 	bl	8009240 <scalbnf>
 8008f4c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008f34 <__kernel_rem_pio2f+0x304>
 8008f50:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f58:	db19      	blt.n	8008f8e <__kernel_rem_pio2f+0x35e>
 8008f5a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008f38 <__kernel_rem_pio2f+0x308>
 8008f5e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008f62:	aa08      	add	r2, sp, #32
 8008f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f68:	1c74      	adds	r4, r6, #1
 8008f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f6e:	3508      	adds	r5, #8
 8008f70:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008f7c:	ee10 3a10 	vmov	r3, s0
 8008f80:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008f84:	ee17 3a90 	vmov	r3, s15
 8008f88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008f8c:	e74b      	b.n	8008e26 <__kernel_rem_pio2f+0x1f6>
 8008f8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008f92:	aa08      	add	r2, sp, #32
 8008f94:	ee10 3a10 	vmov	r3, s0
 8008f98:	4634      	mov	r4, r6
 8008f9a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008f9e:	e742      	b.n	8008e26 <__kernel_rem_pio2f+0x1f6>
 8008fa0:	a808      	add	r0, sp, #32
 8008fa2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008fa6:	9001      	str	r0, [sp, #4]
 8008fa8:	ee07 0a90 	vmov	s15, r0
 8008fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fb0:	3a01      	subs	r2, #1
 8008fb2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008fb6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008fba:	ed61 7a01 	vstmdb	r1!, {s15}
 8008fbe:	e73e      	b.n	8008e3e <__kernel_rem_pio2f+0x20e>
 8008fc0:	ecfc 6a01 	vldmia	ip!, {s13}
 8008fc4:	ecb6 7a01 	vldmia	r6!, {s14}
 8008fc8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008fcc:	3001      	adds	r0, #1
 8008fce:	4550      	cmp	r0, sl
 8008fd0:	dc01      	bgt.n	8008fd6 <__kernel_rem_pio2f+0x3a6>
 8008fd2:	4288      	cmp	r0, r1
 8008fd4:	ddf4      	ble.n	8008fc0 <__kernel_rem_pio2f+0x390>
 8008fd6:	a858      	add	r0, sp, #352	; 0x160
 8008fd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fdc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008fe0:	3a01      	subs	r2, #1
 8008fe2:	e730      	b.n	8008e46 <__kernel_rem_pio2f+0x216>
 8008fe4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008fe6:	2a02      	cmp	r2, #2
 8008fe8:	dc09      	bgt.n	8008ffe <__kernel_rem_pio2f+0x3ce>
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	dc2a      	bgt.n	8009044 <__kernel_rem_pio2f+0x414>
 8008fee:	d043      	beq.n	8009078 <__kernel_rem_pio2f+0x448>
 8008ff0:	f009 0007 	and.w	r0, r9, #7
 8008ff4:	b059      	add	sp, #356	; 0x164
 8008ff6:	ecbd 8b04 	vpop	{d8-d9}
 8008ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009000:	2b03      	cmp	r3, #3
 8009002:	d1f5      	bne.n	8008ff0 <__kernel_rem_pio2f+0x3c0>
 8009004:	ab30      	add	r3, sp, #192	; 0xc0
 8009006:	442b      	add	r3, r5
 8009008:	461a      	mov	r2, r3
 800900a:	4619      	mov	r1, r3
 800900c:	4620      	mov	r0, r4
 800900e:	2800      	cmp	r0, #0
 8009010:	f1a1 0104 	sub.w	r1, r1, #4
 8009014:	dc51      	bgt.n	80090ba <__kernel_rem_pio2f+0x48a>
 8009016:	4621      	mov	r1, r4
 8009018:	2901      	cmp	r1, #1
 800901a:	f1a2 0204 	sub.w	r2, r2, #4
 800901e:	dc5c      	bgt.n	80090da <__kernel_rem_pio2f+0x4aa>
 8009020:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008f3c <__kernel_rem_pio2f+0x30c>
 8009024:	3304      	adds	r3, #4
 8009026:	2c01      	cmp	r4, #1
 8009028:	dc67      	bgt.n	80090fa <__kernel_rem_pio2f+0x4ca>
 800902a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800902e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009032:	2f00      	cmp	r7, #0
 8009034:	d167      	bne.n	8009106 <__kernel_rem_pio2f+0x4d6>
 8009036:	edc8 6a00 	vstr	s13, [r8]
 800903a:	ed88 7a01 	vstr	s14, [r8, #4]
 800903e:	edc8 7a02 	vstr	s15, [r8, #8]
 8009042:	e7d5      	b.n	8008ff0 <__kernel_rem_pio2f+0x3c0>
 8009044:	aa30      	add	r2, sp, #192	; 0xc0
 8009046:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008f3c <__kernel_rem_pio2f+0x30c>
 800904a:	4413      	add	r3, r2
 800904c:	4622      	mov	r2, r4
 800904e:	2a00      	cmp	r2, #0
 8009050:	da24      	bge.n	800909c <__kernel_rem_pio2f+0x46c>
 8009052:	b34f      	cbz	r7, 80090a8 <__kernel_rem_pio2f+0x478>
 8009054:	eef1 7a47 	vneg.f32	s15, s14
 8009058:	edc8 7a00 	vstr	s15, [r8]
 800905c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009064:	aa31      	add	r2, sp, #196	; 0xc4
 8009066:	2301      	movs	r3, #1
 8009068:	429c      	cmp	r4, r3
 800906a:	da20      	bge.n	80090ae <__kernel_rem_pio2f+0x47e>
 800906c:	b10f      	cbz	r7, 8009072 <__kernel_rem_pio2f+0x442>
 800906e:	eef1 7a67 	vneg.f32	s15, s15
 8009072:	edc8 7a01 	vstr	s15, [r8, #4]
 8009076:	e7bb      	b.n	8008ff0 <__kernel_rem_pio2f+0x3c0>
 8009078:	aa30      	add	r2, sp, #192	; 0xc0
 800907a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008f3c <__kernel_rem_pio2f+0x30c>
 800907e:	4413      	add	r3, r2
 8009080:	2c00      	cmp	r4, #0
 8009082:	da05      	bge.n	8009090 <__kernel_rem_pio2f+0x460>
 8009084:	b10f      	cbz	r7, 800908a <__kernel_rem_pio2f+0x45a>
 8009086:	eef1 7a67 	vneg.f32	s15, s15
 800908a:	edc8 7a00 	vstr	s15, [r8]
 800908e:	e7af      	b.n	8008ff0 <__kernel_rem_pio2f+0x3c0>
 8009090:	ed33 7a01 	vldmdb	r3!, {s14}
 8009094:	3c01      	subs	r4, #1
 8009096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800909a:	e7f1      	b.n	8009080 <__kernel_rem_pio2f+0x450>
 800909c:	ed73 7a01 	vldmdb	r3!, {s15}
 80090a0:	3a01      	subs	r2, #1
 80090a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090a6:	e7d2      	b.n	800904e <__kernel_rem_pio2f+0x41e>
 80090a8:	eef0 7a47 	vmov.f32	s15, s14
 80090ac:	e7d4      	b.n	8009058 <__kernel_rem_pio2f+0x428>
 80090ae:	ecb2 7a01 	vldmia	r2!, {s14}
 80090b2:	3301      	adds	r3, #1
 80090b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090b8:	e7d6      	b.n	8009068 <__kernel_rem_pio2f+0x438>
 80090ba:	edd1 7a00 	vldr	s15, [r1]
 80090be:	edd1 6a01 	vldr	s13, [r1, #4]
 80090c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80090c6:	3801      	subs	r0, #1
 80090c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090cc:	ed81 7a00 	vstr	s14, [r1]
 80090d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d4:	edc1 7a01 	vstr	s15, [r1, #4]
 80090d8:	e799      	b.n	800900e <__kernel_rem_pio2f+0x3de>
 80090da:	edd2 7a00 	vldr	s15, [r2]
 80090de:	edd2 6a01 	vldr	s13, [r2, #4]
 80090e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80090e6:	3901      	subs	r1, #1
 80090e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090ec:	ed82 7a00 	vstr	s14, [r2]
 80090f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f4:	edc2 7a01 	vstr	s15, [r2, #4]
 80090f8:	e78e      	b.n	8009018 <__kernel_rem_pio2f+0x3e8>
 80090fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80090fe:	3c01      	subs	r4, #1
 8009100:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009104:	e78f      	b.n	8009026 <__kernel_rem_pio2f+0x3f6>
 8009106:	eef1 6a66 	vneg.f32	s13, s13
 800910a:	eeb1 7a47 	vneg.f32	s14, s14
 800910e:	edc8 6a00 	vstr	s13, [r8]
 8009112:	ed88 7a01 	vstr	s14, [r8, #4]
 8009116:	eef1 7a67 	vneg.f32	s15, s15
 800911a:	e790      	b.n	800903e <__kernel_rem_pio2f+0x40e>

0800911c <__kernel_sinf>:
 800911c:	ee10 3a10 	vmov	r3, s0
 8009120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009124:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009128:	da04      	bge.n	8009134 <__kernel_sinf+0x18>
 800912a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800912e:	ee17 3a90 	vmov	r3, s15
 8009132:	b35b      	cbz	r3, 800918c <__kernel_sinf+0x70>
 8009134:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009138:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009190 <__kernel_sinf+0x74>
 800913c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009194 <__kernel_sinf+0x78>
 8009140:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009144:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009198 <__kernel_sinf+0x7c>
 8009148:	eee6 7a07 	vfma.f32	s15, s12, s14
 800914c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800919c <__kernel_sinf+0x80>
 8009150:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009154:	eddf 7a12 	vldr	s15, [pc, #72]	; 80091a0 <__kernel_sinf+0x84>
 8009158:	ee60 6a07 	vmul.f32	s13, s0, s14
 800915c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009160:	b930      	cbnz	r0, 8009170 <__kernel_sinf+0x54>
 8009162:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80091a4 <__kernel_sinf+0x88>
 8009166:	eea7 6a27 	vfma.f32	s12, s14, s15
 800916a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800916e:	4770      	bx	lr
 8009170:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009174:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009178:	eee0 7a86 	vfma.f32	s15, s1, s12
 800917c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009180:	eddf 7a09 	vldr	s15, [pc, #36]	; 80091a8 <__kernel_sinf+0x8c>
 8009184:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009188:	ee30 0a60 	vsub.f32	s0, s0, s1
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	2f2ec9d3 	.word	0x2f2ec9d3
 8009194:	b2d72f34 	.word	0xb2d72f34
 8009198:	3638ef1b 	.word	0x3638ef1b
 800919c:	b9500d01 	.word	0xb9500d01
 80091a0:	3c088889 	.word	0x3c088889
 80091a4:	be2aaaab 	.word	0xbe2aaaab
 80091a8:	3e2aaaab 	.word	0x3e2aaaab

080091ac <fabsf>:
 80091ac:	ee10 3a10 	vmov	r3, s0
 80091b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091b4:	ee00 3a10 	vmov	s0, r3
 80091b8:	4770      	bx	lr
	...

080091bc <floorf>:
 80091bc:	ee10 3a10 	vmov	r3, s0
 80091c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80091c4:	3a7f      	subs	r2, #127	; 0x7f
 80091c6:	2a16      	cmp	r2, #22
 80091c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091cc:	dc2a      	bgt.n	8009224 <floorf+0x68>
 80091ce:	2a00      	cmp	r2, #0
 80091d0:	da11      	bge.n	80091f6 <floorf+0x3a>
 80091d2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009234 <floorf+0x78>
 80091d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80091da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80091de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e2:	dd05      	ble.n	80091f0 <floorf+0x34>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	da23      	bge.n	8009230 <floorf+0x74>
 80091e8:	4a13      	ldr	r2, [pc, #76]	; (8009238 <floorf+0x7c>)
 80091ea:	2900      	cmp	r1, #0
 80091ec:	bf18      	it	ne
 80091ee:	4613      	movne	r3, r2
 80091f0:	ee00 3a10 	vmov	s0, r3
 80091f4:	4770      	bx	lr
 80091f6:	4911      	ldr	r1, [pc, #68]	; (800923c <floorf+0x80>)
 80091f8:	4111      	asrs	r1, r2
 80091fa:	420b      	tst	r3, r1
 80091fc:	d0fa      	beq.n	80091f4 <floorf+0x38>
 80091fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009234 <floorf+0x78>
 8009202:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009206:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920e:	ddef      	ble.n	80091f0 <floorf+0x34>
 8009210:	2b00      	cmp	r3, #0
 8009212:	bfbe      	ittt	lt
 8009214:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009218:	fa40 f202 	asrlt.w	r2, r0, r2
 800921c:	189b      	addlt	r3, r3, r2
 800921e:	ea23 0301 	bic.w	r3, r3, r1
 8009222:	e7e5      	b.n	80091f0 <floorf+0x34>
 8009224:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009228:	d3e4      	bcc.n	80091f4 <floorf+0x38>
 800922a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800922e:	4770      	bx	lr
 8009230:	2300      	movs	r3, #0
 8009232:	e7dd      	b.n	80091f0 <floorf+0x34>
 8009234:	7149f2ca 	.word	0x7149f2ca
 8009238:	bf800000 	.word	0xbf800000
 800923c:	007fffff 	.word	0x007fffff

08009240 <scalbnf>:
 8009240:	ee10 3a10 	vmov	r3, s0
 8009244:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009248:	d025      	beq.n	8009296 <scalbnf+0x56>
 800924a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800924e:	d302      	bcc.n	8009256 <scalbnf+0x16>
 8009250:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009254:	4770      	bx	lr
 8009256:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800925a:	d122      	bne.n	80092a2 <scalbnf+0x62>
 800925c:	4b2a      	ldr	r3, [pc, #168]	; (8009308 <scalbnf+0xc8>)
 800925e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800930c <scalbnf+0xcc>
 8009262:	4298      	cmp	r0, r3
 8009264:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009268:	db16      	blt.n	8009298 <scalbnf+0x58>
 800926a:	ee10 3a10 	vmov	r3, s0
 800926e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009272:	3a19      	subs	r2, #25
 8009274:	4402      	add	r2, r0
 8009276:	2afe      	cmp	r2, #254	; 0xfe
 8009278:	dd15      	ble.n	80092a6 <scalbnf+0x66>
 800927a:	ee10 3a10 	vmov	r3, s0
 800927e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009310 <scalbnf+0xd0>
 8009282:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009314 <scalbnf+0xd4>
 8009286:	2b00      	cmp	r3, #0
 8009288:	eeb0 7a67 	vmov.f32	s14, s15
 800928c:	bfb8      	it	lt
 800928e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009292:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009296:	4770      	bx	lr
 8009298:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009318 <scalbnf+0xd8>
 800929c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80092a0:	4770      	bx	lr
 80092a2:	0dd2      	lsrs	r2, r2, #23
 80092a4:	e7e6      	b.n	8009274 <scalbnf+0x34>
 80092a6:	2a00      	cmp	r2, #0
 80092a8:	dd06      	ble.n	80092b8 <scalbnf+0x78>
 80092aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80092b2:	ee00 3a10 	vmov	s0, r3
 80092b6:	4770      	bx	lr
 80092b8:	f112 0f16 	cmn.w	r2, #22
 80092bc:	da1a      	bge.n	80092f4 <scalbnf+0xb4>
 80092be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80092c2:	4298      	cmp	r0, r3
 80092c4:	ee10 3a10 	vmov	r3, s0
 80092c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092cc:	dd0a      	ble.n	80092e4 <scalbnf+0xa4>
 80092ce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009310 <scalbnf+0xd0>
 80092d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009314 <scalbnf+0xd4>
 80092d6:	eef0 7a40 	vmov.f32	s15, s0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bf18      	it	ne
 80092de:	eeb0 0a47 	vmovne.f32	s0, s14
 80092e2:	e7db      	b.n	800929c <scalbnf+0x5c>
 80092e4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009318 <scalbnf+0xd8>
 80092e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800931c <scalbnf+0xdc>
 80092ec:	eef0 7a40 	vmov.f32	s15, s0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	e7f3      	b.n	80092dc <scalbnf+0x9c>
 80092f4:	3219      	adds	r2, #25
 80092f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80092fe:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009320 <scalbnf+0xe0>
 8009302:	ee07 3a10 	vmov	s14, r3
 8009306:	e7c4      	b.n	8009292 <scalbnf+0x52>
 8009308:	ffff3cb0 	.word	0xffff3cb0
 800930c:	4c000000 	.word	0x4c000000
 8009310:	7149f2ca 	.word	0x7149f2ca
 8009314:	f149f2ca 	.word	0xf149f2ca
 8009318:	0da24260 	.word	0x0da24260
 800931c:	8da24260 	.word	0x8da24260
 8009320:	33000000 	.word	0x33000000

08009324 <_init>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr

08009330 <_fini>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	bf00      	nop
 8009334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009336:	bc08      	pop	{r3}
 8009338:	469e      	mov	lr, r3
 800933a:	4770      	bx	lr
