
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008420  08008420  00018420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088ac  080088ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080088ac  080088ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088ac  080088ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088ac  080088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088b0  080088b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080088b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  08008a90  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08008a90  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cd5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002160  00000000  00000000  00030ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00033048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00033f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d419  00000000  00000000  00034d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012336  00000000  00000000  00052169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab6af  00000000  00000000  0006449f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fb4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005054  00000000  00000000  0010fba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008404 	.word	0x08008404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008404 	.word	0x08008404

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f001 f878 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f862 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fac8 	bl	8001148 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bb8:	f000 f8b8 	bl	8000d2c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bbc:	f000 f8f4 	bl	8000da8 <MX_SPI2_Init>
  MX_TIM17_Init();
 8000bc0:	f000 fa1a 	bl	8000ff8 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000bc4:	f000 fa90 	bl	80010e8 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc8:	f000 f950 	bl	8000e6c <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bcc:	f000 f99c 	bl	8000f08 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000bd0:	f000 f928 	bl	8000e24 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  printf("boink\n");
 8000bd4:	4821      	ldr	r0, [pc, #132]	; (8000c5c <main+0xb4>)
 8000bd6:	f005 fb19 	bl	800620c <puts>

  HAL_TIM_Base_Start(&htim17);
 8000bda:	4821      	ldr	r0, [pc, #132]	; (8000c60 <main+0xb8>)
 8000bdc:	f003 fd88 	bl	80046f0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1);
 8000be0:	2100      	movs	r1, #0
 8000be2:	481f      	ldr	r0, [pc, #124]	; (8000c60 <main+0xb8>)
 8000be4:	f003 fe3e 	bl	8004864 <HAL_TIM_OC_Start>
  HAL_Delay(10);
 8000be8:	200a      	movs	r0, #10
 8000bea:	f001 f8bf 	bl	8001d6c <HAL_Delay>

  MCP3561_Reset(&hspi1);
 8000bee:	481d      	ldr	r0, [pc, #116]	; (8000c64 <main+0xbc>)
 8000bf0:	f001 f844 	bl	8001c7c <MCP3561_Reset>
  HAL_Delay(10);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f001 f8b9 	bl	8001d6c <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000bfa:	481a      	ldr	r0, [pc, #104]	; (8000c64 <main+0xbc>)
 8000bfc:	f000 ffc4 	bl	8001b88 <MCP3561_PrintRegisters>
  printf("\n");
 8000c00:	200a      	movs	r0, #10
 8000c02:	f005 fa7f 	bl	8006104 <putchar>

  MCP3561_Init(&hspi1);
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <main+0xbc>)
 8000c08:	f000 ff45 	bl	8001a96 <MCP3561_Init>
  printf("\n");
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f005 fa79 	bl	8006104 <putchar>
  HAL_Delay(10);
 8000c12:	200a      	movs	r0, #10
 8000c14:	f001 f8aa 	bl	8001d6c <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <main+0xbc>)
 8000c1a:	f000 ffb5 	bl	8001b88 <MCP3561_PrintRegisters>
  printf("\n");
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f005 fa70 	bl	8006104 <putchar>


  setup_done = true;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <main+0xc0>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MCP3561_PrintRegisters(&hspi1);
 8000c2a:	480e      	ldr	r0, [pc, #56]	; (8000c64 <main+0xbc>)
 8000c2c:	f000 ffac 	bl	8001b88 <MCP3561_PrintRegisters>
	   * CONF2: 8b
	   * CONF3: d0
	   * IRQ  : 37
	   * MUX  : 01
	   */
	  printf("\n");
 8000c30:	200a      	movs	r0, #10
 8000c32:	f005 fa67 	bl	8006104 <putchar>
	  HAL_Delay(1000);
 8000c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3a:	f001 f897 	bl	8001d6c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <main+0xc4>)
 8000c42:	f001 fb5b 	bl	80022fc <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <main+0xc4>)
 8000c4a:	f001 fb57 	bl	80022fc <HAL_GPIO_TogglePin>

	  printf("%d\n", (int)adc_val);  // updated in ISR
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <main+0xc8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <main+0xcc>)
 8000c56:	f005 fa3d 	bl	80060d4 <iprintf>
	  MCP3561_PrintRegisters(&hspi1);
 8000c5a:	e7e6      	b.n	8000c2a <main+0x82>
 8000c5c:	08008420 	.word	0x08008420
 8000c60:	200003a4 	.word	0x200003a4
 8000c64:	200001f8 	.word	0x200001f8
 8000c68:	20000478 	.word	0x20000478
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	20000474 	.word	0x20000474
 8000c74:	08008428 	.word	0x08008428

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09a      	sub	sp, #104	; 0x68
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c82:	2228      	movs	r2, #40	; 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 fdb2 	bl	80057f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	222c      	movs	r2, #44	; 0x2c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 fda4 	bl	80057f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000cc4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000cc8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fb46 	bl	8002360 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cda:	f000 fb73 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fb6e 	bl	80033dc <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d06:	f000 fb5d 	bl	80013c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fd97 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d20:	f000 fb50 	bl	80013c4 <Error_Handler>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3768      	adds	r7, #104	; 0x68
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <MX_SPI1_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d62:	2210      	movs	r2, #16
 8000d64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_SPI1_Init+0x74>)
 8000d8c:	f002 fed0 	bl	8003b30 <HAL_SPI_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 fb15 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001f8 	.word	0x200001f8
 8000da4:	40013000 	.word	0x40013000

08000da8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_SPI2_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dc0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000de0:	2210      	movs	r2, #16
 8000de2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_SPI2_Init+0x74>)
 8000e0a:	f002 fe91 	bl	8003b30 <HAL_SPI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000e14:	f000 fad6 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000025c 	.word	0x2000025c
 8000e20:	40003800 	.word	0x40003800

08000e24 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_TIM13_Init+0x40>)
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <MX_TIM13_Init+0x44>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_TIM13_Init+0x40>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_TIM13_Init+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_TIM13_Init+0x40>)
 8000e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e40:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_TIM13_Init+0x40>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_TIM13_Init+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_TIM13_Init+0x40>)
 8000e50:	f003 fbfe 	bl	8004650 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000e5a:	f000 fab3 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200002c0 	.word	0x200002c0
 8000e68:	40001c00 	.word	0x40001c00

08000e6c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <MX_TIM14_Init+0x98>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eaa:	4815      	ldr	r0, [pc, #84]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000eac:	f003 fbd0 	bl	8004650 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000eb6:	f000 fa85 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000ebc:	f003 fc78 	bl	80047b0 <HAL_TIM_OC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000ec6:	f000 fa7d 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000ee2:	f003 fd89 	bl	80049f8 <HAL_TIM_OC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000eec:	f000 fa6a 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM14_Init+0x94>)
 8000ef2:	f000 fb9d 	bl	8001630 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000030c 	.word	0x2000030c
 8000f04:	40002000 	.word	0x40002000

08000f08 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2220      	movs	r2, #32
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fc61 	bl	80057f0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f30:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <MX_TIM16_Init+0xec>)
 8000f32:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000f34:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f5a:	4825      	ldr	r0, [pc, #148]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f5c:	f003 fb78 	bl	8004650 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000f66:	f000 fa2d 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000f6c:	f003 fc20 	bl	80047b0 <HAL_TIM_OC_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000f76:	f000 fa25 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000fa0:	f003 fd2a 	bl	80049f8 <HAL_TIM_OC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000faa:	f000 fa0b 	bl	80013c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000fd2:	f003 ff85 	bl	8004ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000fdc:	f000 f9f2 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <MX_TIM16_Init+0xe8>)
 8000fe2:	f000 fb25 	bl	8001630 <HAL_TIM_MspPostInit>

}
 8000fe6:	bf00      	nop
 8000fe8:	3740      	adds	r7, #64	; 0x40
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000358 	.word	0x20000358
 8000ff4:	40014400 	.word	0x40014400

08000ff8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b090      	sub	sp, #64	; 0x40
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2220      	movs	r2, #32
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fbe9 	bl	80057f0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <MX_TIM17_Init+0xe8>)
 8001020:	4a30      	ldr	r2, [pc, #192]	; (80010e4 <MX_TIM17_Init+0xec>)
 8001022:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_TIM17_Init+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <MX_TIM17_Init+0xe8>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <MX_TIM17_Init+0xe8>)
 8001032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001036:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_TIM17_Init+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_TIM17_Init+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_TIM17_Init+0xe8>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800104a:	4825      	ldr	r0, [pc, #148]	; (80010e0 <MX_TIM17_Init+0xe8>)
 800104c:	f003 fb00 	bl	8004650 <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001056:	f000 f9b5 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800105a:	4821      	ldr	r0, [pc, #132]	; (80010e0 <MX_TIM17_Init+0xe8>)
 800105c:	f003 fba8 	bl	80047b0 <HAL_TIM_OC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001066:	f000 f9ad 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	4814      	ldr	r0, [pc, #80]	; (80010e0 <MX_TIM17_Init+0xe8>)
 8001090:	f003 fcb2 	bl	80049f8 <HAL_TIM_OC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800109a:	f000 f993 	bl	80013c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_TIM17_Init+0xe8>)
 80010c2:	f003 ff0d 	bl	8004ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 80010cc:	f000 f97a 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <MX_TIM17_Init+0xe8>)
 80010d2:	f000 faad 	bl	8001630 <HAL_TIM_MspPostInit>

}
 80010d6:	bf00      	nop
 80010d8:	3740      	adds	r7, #64	; 0x40
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200003a4 	.word	0x200003a4
 80010e4:	40014800 	.word	0x40014800

080010e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <MX_USART2_UART_Init+0x5c>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800112c:	f003 ff2a 	bl	8004f84 <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001136:	f000 f945 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200003f0 	.word	0x200003f0
 8001144:	40004400 	.word	0x40004400

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <MX_GPIO_Init+0x13c>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a48      	ldr	r2, [pc, #288]	; (8001284 <MX_GPIO_Init+0x13c>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <MX_GPIO_Init+0x13c>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <MX_GPIO_Init+0x13c>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a42      	ldr	r2, [pc, #264]	; (8001284 <MX_GPIO_Init+0x13c>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b40      	ldr	r3, [pc, #256]	; (8001284 <MX_GPIO_Init+0x13c>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <MX_GPIO_Init+0x13c>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a3c      	ldr	r2, [pc, #240]	; (8001284 <MX_GPIO_Init+0x13c>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <MX_GPIO_Init+0x13c>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b37      	ldr	r3, [pc, #220]	; (8001284 <MX_GPIO_Init+0x13c>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a36      	ldr	r2, [pc, #216]	; (8001284 <MX_GPIO_Init+0x13c>)
 80011ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b34      	ldr	r3, [pc, #208]	; (8001284 <MX_GPIO_Init+0x13c>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f001 f880 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f244 01c0 	movw	r1, #16576	; 0x40c0
 80011d2:	482d      	ldr	r0, [pc, #180]	; (8001288 <MX_GPIO_Init+0x140>)
 80011d4:	f001 f87a 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011d8:	2310      	movs	r3, #16
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f000 fef1 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 80011f6:	2302      	movs	r3, #2
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	481f      	ldr	r0, [pc, #124]	; (8001288 <MX_GPIO_Init+0x140>)
 800120c:	f000 fee4 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4817      	ldr	r0, [pc, #92]	; (8001288 <MX_GPIO_Init+0x140>)
 800122a:	f000 fed5 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fec5 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <MX_GPIO_Init+0x140>)
 8001266:	f000 feb7 	bl	8001fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2007      	movs	r0, #7
 8001270:	f000 fe7b 	bl	8001f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001274:	2007      	movs	r0, #7
 8001276:	f000 fe94 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	48000400 	.word	0x48000400

0800128c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001294:	1d39      	adds	r1, r7, #4
 8001296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129a:	2201      	movs	r2, #1
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <__io_putchar+0x20>)
 800129e:	f003 febf 	bl	8005020 <HAL_UART_Transmit>

    return ch;
 80012a2:	687b      	ldr	r3, [r7, #4]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200003f0 	.word	0x200003f0

080012b0 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
	/* @todo correct EXTI pin */
    if ( GPIO_Pin == GPIO_PIN_6) {
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	2b40      	cmp	r3, #64	; 0x40
 80012be:	d171      	bne.n	80013a4 <HAL_GPIO_EXTI_Callback+0xf4>
    	if(setup_done){
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_GPIO_EXTI_Callback+0xfc>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d06c      	beq.n	80013a4 <HAL_GPIO_EXTI_Callback+0xf4>
    		uint8_t val[5] = {0,0,0,0,0};
 80012ca:	4a39      	ldr	r2, [pc, #228]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x100>)
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d4:	6018      	str	r0, [r3, #0]
 80012d6:	3304      	adds	r3, #4
 80012d8:	7019      	strb	r1, [r3, #0]
    		uint8_t cmd[5] = {0,0,0,0,0};
 80012da:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x100>)
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e4:	6018      	str	r0, [r3, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	7019      	strb	r1, [r3, #0]
    		cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 80012ea:	2341      	movs	r3, #65	; 0x41
 80012ec:	753b      	strb	r3, [r7, #20]
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2110      	movs	r1, #16
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f000 ffe9 	bl	80022cc <HAL_GPIO_WritePin>
    		// non-blocking "HAL_SPI_TransmitReceive_IT" does not work
    		// because we need to create CS signal manually
    		// the timout therefore must not be greater than 1/fs
    		// e.g. at 300 Hz --> 3ms
    		HAL_SPI_TransmitReceive(&hspi1, &cmd[0], &val[0], 5, 1);
 80012fa:	f107 021c 	add.w	r2, r7, #28
 80012fe:	f107 0114 	add.w	r1, r7, #20
 8001302:	2301      	movs	r3, #1
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2305      	movs	r3, #5
 8001308:	482a      	ldr	r0, [pc, #168]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x104>)
 800130a:	f002 fe2a 	bl	8003f62 <HAL_SPI_TransmitReceive>
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 800130e:	2201      	movs	r2, #1
 8001310:	2110      	movs	r1, #16
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f000 ffd9 	bl	80022cc <HAL_GPIO_WritePin>
    		adc_val = (val[1] << 16) | (val[2] << 8) | val[3];
 800131a:	7f7b      	ldrb	r3, [r7, #29]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	7fbb      	ldrb	r3, [r7, #30]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4313      	orrs	r3, r2
 8001324:	7ffa      	ldrb	r2, [r7, #31]
 8001326:	4313      	orrs	r3, r2
 8001328:	461a      	mov	r2, r3
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x108>)
 800132c:	601a      	str	r2, [r3, #0]

    		float volts = (float)adc_val/(8388607.0f)*3.3f;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x108>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800133a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80013bc <HAL_GPIO_EXTI_Callback+0x10c>
 800133e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001342:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80013c0 <HAL_GPIO_EXTI_Callback+0x110>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    		uint8_t str[11];
    		for(int i=0; i<10; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001352:	e008      	b.n	8001366 <HAL_GPIO_EXTI_Callback+0xb6>
    			str[i] = ' ';
 8001354:	f107 0208 	add.w	r2, r7, #8
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135a:	4413      	add	r3, r2
 800135c:	2220      	movs	r2, #32
 800135e:	701a      	strb	r2, [r3, #0]
    		for(int i=0; i<10; i++)
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	3301      	adds	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	2b09      	cmp	r3, #9
 800136a:	ddf3      	ble.n	8001354 <HAL_GPIO_EXTI_Callback+0xa4>
    		int i = (int)(volts*9.0f/3.3f);
 800136c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001370:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001374:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001378:	eddf 6a11 	vldr	s13, [pc, #68]	; 80013c0 <HAL_GPIO_EXTI_Callback+0x110>
 800137c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    		str[i] = '#';
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	4413      	add	r3, r2
 8001392:	2223      	movs	r2, #35	; 0x23
 8001394:	701a      	strb	r2, [r3, #0]
    		str[11] = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	74fb      	strb	r3, [r7, #19]
    		printf("%s\n", str);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 ff34 	bl	800620c <puts>
    		//printf("%03f\n", volts);
    		//printf("%d\n", (int)adc_val);  // updated in ISR
    	}
    }
}
 80013a4:	bf00      	nop
 80013a6:	3730      	adds	r7, #48	; 0x30
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000478 	.word	0x20000478
 80013b0:	0800842c 	.word	0x0800842c
 80013b4:	200001f8 	.word	0x200001f8
 80013b8:	20000474 	.word	0x20000474
 80013bc:	4afffffe 	.word	0x4afffffe
 80013c0:	40533333 	.word	0x40533333

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x44>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x44>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x44>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x44>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x44>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d145      	bne.n	80014c6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <HAL_SPI_MspInit+0x150>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b48      	ldr	r3, [pc, #288]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b45      	ldr	r3, [pc, #276]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a44      	ldr	r2, [pc, #272]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_SPI_MspInit+0x150>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001482:	2360      	movs	r3, #96	; 0x60
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f000 fd9a 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a4:	2301      	movs	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b4:	2305      	movs	r3, #5
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	482b      	ldr	r0, [pc, #172]	; (800156c <HAL_SPI_MspInit+0x154>)
 80014c0:	f000 fd8a 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014c4:	e04a      	b.n	800155c <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a29      	ldr	r2, [pc, #164]	; (8001570 <HAL_SPI_MspInit+0x158>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d145      	bne.n	800155c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_SPI_MspInit+0x150>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_SPI_MspInit+0x150>)
 80014d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014da:	61d3      	str	r3, [r2, #28]
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_SPI_MspInit+0x150>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_SPI_MspInit+0x150>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <HAL_SPI_MspInit+0x150>)
 80014ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f2:	6153      	str	r3, [r2, #20]
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_SPI_MspInit+0x150>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150a:	6153      	str	r3, [r2, #20]
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_SPI_MspInit+0x150>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152a:	2305      	movs	r3, #5
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <HAL_SPI_MspInit+0x154>)
 8001536:	f000 fd4f 	bl	8001fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800154c:	2305      	movs	r3, #5
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 8001558:	f000 fd3e 	bl	8001fd8 <HAL_GPIO_Init>
}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	; 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013000 	.word	0x40013000
 8001568:	40021000 	.word	0x40021000
 800156c:	48000400 	.word	0x48000400
 8001570:	40003800 	.word	0x40003800
 8001574:	48000c00 	.word	0x48000c00

08001578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_TIM_Base_MspInit+0xa4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10c      	bne.n	80015a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a24      	ldr	r2, [pc, #144]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015a2:	e034      	b.n	800160e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_TIM_Base_MspInit+0xac>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10c      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
}
 80015c6:	e022      	b.n	800160e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a16      	ldr	r2, [pc, #88]	; (8001628 <HAL_TIM_Base_MspInit+0xb0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10c      	bne.n	80015ec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	6193      	str	r3, [r2, #24]
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
}
 80015ea:	e010      	b.n	800160e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_TIM_Base_MspInit+0xb4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d10b      	bne.n	800160e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_TIM_Base_MspInit+0xa8>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
}
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40001c00 	.word	0x40001c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40002000 	.word	0x40002000
 8001628:	40014400 	.word	0x40014400
 800162c:	40014800 	.word	0x40014800

08001630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a35      	ldr	r2, [pc, #212]	; (8001724 <HAL_TIM_MspPostInit+0xf4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d11e      	bne.n	8001690 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a34      	ldr	r2, [pc, #208]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800167c:	2309      	movs	r3, #9
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f000 fca5 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800168e:	e045      	b.n	800171c <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM16)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d11e      	bne.n	80016d8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80016c4:	2301      	movs	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f000 fc81 	bl	8001fd8 <HAL_GPIO_Init>
}
 80016d6:	e021      	b.n	800171c <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM17)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_TIM_MspPostInit+0x100>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d11c      	bne.n	800171c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800170c:	2301      	movs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <HAL_TIM_MspPostInit+0x104>)
 8001718:	f000 fc5e 	bl	8001fd8 <HAL_GPIO_Init>
}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40002000 	.word	0x40002000
 8001728:	40021000 	.word	0x40021000
 800172c:	40014400 	.word	0x40014400
 8001730:	40014800 	.word	0x40014800
 8001734:	48000400 	.word	0x48000400

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_UART_MspInit+0x7c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d128      	bne.n	80017ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_UART_MspInit+0x80>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <HAL_UART_MspInit+0x80>)
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_UART_MspInit+0x80>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_UART_MspInit+0x80>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_UART_MspInit+0x80>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	6153      	str	r3, [r2, #20]
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_UART_MspInit+0x80>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800178a:	230c      	movs	r3, #12
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179a:	2307      	movs	r3, #7
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f000 fc16 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40004400 	.word	0x40004400
 80017b8:	40021000 	.word	0x40021000

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001808:	f000 fa90 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 8001814:	2002      	movs	r0, #2
 8001816:	f000 fd8b 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}

0800181e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
	return 1;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_kill>:

int _kill(int pid, int sig)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001838:	f003 ffb0 	bl	800579c <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	2216      	movs	r2, #22
 8001840:	601a      	str	r2, [r3, #0]
	return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_exit>:

void _exit (int status)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001856:	f04f 31ff 	mov.w	r1, #4294967295
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffe7 	bl	800182e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001860:	e7fe      	b.n	8001860 <_exit+0x12>

08001862 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e00a      	b.n	800188a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001874:	f3af 8000 	nop.w
 8001878:	4601      	mov	r1, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	60ba      	str	r2, [r7, #8]
 8001880:	b2ca      	uxtb	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	dbf0      	blt.n	8001874 <_read+0x12>
	}

return len;
 8001892:	687b      	ldr	r3, [r7, #4]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e009      	b.n	80018c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	60ba      	str	r2, [r7, #8]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fce8 	bl	800128c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbf1      	blt.n	80018ae <_write+0x12>
	}
	return len;
 80018ca:	687b      	ldr	r3, [r7, #4]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_close>:

int _close(int file)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fc:	605a      	str	r2, [r3, #4]
	return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_isatty>:

int _isatty(int file)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
	return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f003 ff16 	bl	800579c <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20008000 	.word	0x20008000
 800199c:	00000400 	.word	0x00000400
 80019a0:	2000047c 	.word	0x2000047c
 80019a4:	20000498 	.word	0x20000498

080019a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d2:	490e      	ldr	r1, [pc, #56]	; (8001a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <LoopForever+0xe>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e8:	4c0b      	ldr	r4, [pc, #44]	; (8001a18 <LoopForever+0x16>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019f6:	f7ff ffd7 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f003 fed5 	bl	80057a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fe:	f7ff f8d3 	bl	8000ba8 <main>

08001a02 <LoopForever>:

LoopForever:
    b LoopForever
 8001a02:	e7fe      	b.n	8001a02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a10:	080088b4 	.word	0x080088b4
  ldr r2, =_sbss
 8001a14:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a18:	20000494 	.word	0x20000494

08001a1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC1_IRQHandler>

08001a1e <_MCP3561_write>:
*/

#include "main.h"
#include "mcp3564.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2110      	movs	r1, #16
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f000 fc4a 	bl	80022cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f002 f921 	bl	8003c86 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2110      	movs	r1, #16
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f000 fc3e 	bl	80022cc <HAL_GPIO_WritePin>
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_MCP3561_sread>:

uint8_t _MCP3561_sread(SPI_HandleTypeDef *hspi, uint8_t *cmd){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	uint8_t reg8[2];
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2110      	movs	r1, #16
 8001a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6a:	f000 fc2f 	bl	80022cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
 8001a6e:	f107 020c 	add.w	r2, r7, #12
 8001a72:	2303      	movs	r3, #3
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2302      	movs	r3, #2
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f002 fa71 	bl	8003f62 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2110      	movs	r1, #16
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f000 fc20 	bl	80022cc <HAL_GPIO_WritePin>
	return reg8[1];
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]

	// be careful with the bitwise or operator "|"
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 8001aa2:	2346      	movs	r3, #70	; 0x46
 8001aa4:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG0_CLK_SEL_EXT;   // clock selection
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_ADC_MODE_CONV; // standby or converting
 8001aaa:	7b7b      	ldrb	r3, [r7, #13]
 8001aac:	f043 0303 	orr.w	r3, r3, #3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_CS_SEL_NONE;   // input current
 8001ab4:	7b7b      	ldrb	r3, [r7, #13]
 8001ab6:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2202      	movs	r2, #2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffac 	bl	8001a1e <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 8001ac6:	234a      	movs	r3, #74	; 0x4a
 8001ac8:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG1_OSR_4096;       // over sampling rate
 8001aca:	231c      	movs	r3, #28
 8001acc:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG1_AMCLK_DIV8;    // sampling clock prescaler
 8001ace:	7b7b      	ldrb	r3, [r7, #13]
 8001ad0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2202      	movs	r2, #2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff9c 	bl	8001a1e <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 8001ae6:	234e      	movs	r3, #78	; 0x4e
 8001ae8:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG2_BOOST_x1;   // Boost
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_GAIN_x1;    // Gain
 8001aee:	7b7b      	ldrb	r3, [r7, #13]
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_AZ_MUX_OFF; // offset cancellation algorithm
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	737b      	strb	r3, [r7, #13]
	cmd[1] += 3; // last two bits must always be '11'
 8001afc:	7b7b      	ldrb	r3, [r7, #13]
 8001afe:	3303      	adds	r3, #3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff86 	bl	8001a1e <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8001b12:	2352      	movs	r3, #82	; 0x52
 8001b14:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG3_CONV_MODE_CONTINUOUS; // conversion mode
 8001b16:	23c0      	movs	r3, #192	; 0xc0
 8001b18:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_DATA_FORMAT_32BIT;    // SPI output data format, (32 and 24 bit available)
 8001b1a:	7b7b      	ldrb	r3, [r7, #13]
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_CRCCOM_OFF;           // CRC
 8001b24:	7b7b      	ldrb	r3, [r7, #13]
 8001b26:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_GAINCAL_OFF;          // gain calibration
 8001b28:	7b7b      	ldrb	r3, [r7, #13]
 8001b2a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_OFFCAL_OFF;           // offset calibration
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2202      	movs	r2, #2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff70 	bl	8001a1e <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 8001b3e:	2356      	movs	r3, #86	; 0x56
 8001b40:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_IRQ_MODE_IRQ_HIGH;  // IRQ default pin state
 8001b42:	2304      	movs	r3, #4
 8001b44:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_FASTCMD_ON;     // fast commands
 8001b46:	7b7b      	ldrb	r3, [r7, #13]
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_STP_ON;         // start of conversion IRQ
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff5b 	bl	8001a1e <_MCP3561_write>

	cmd[0]  = MCP3561_MUX_WRITE;
 8001b68:	235a      	movs	r3, #90	; 0x5a
 8001b6a:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (MCP3561_MUX_CH0 << 4) | MCP3561_MUX_CH1;   // [7..4] VIN+ / [3..0] VIN-
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2202      	movs	r2, #2
 8001b76:	4619      	mov	r1, r3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff50 	bl	8001a1e <_MCP3561_write>
	cmd[3] = 0;
	_MCP3561_write(hspi, cmd, 4);
	*/


}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <MCP3561_PrintRegisters>:

/**
 * @brief prints the configuration registers content
 */
void MCP3561_PrintRegisters(SPI_HandleTypeDef *hspi){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	uint8_t reg8 = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd [5] = {0,0,0,0,0};
 8001b94:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <MCP3561_PrintRegisters+0xd8>)
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b9e:	6018      	str	r0, [r3, #0]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	7019      	strb	r1, [r3, #0]

	cmd[0] = MCP3561_CONFIG0_SREAD;
 8001ba4:	2345      	movs	r3, #69	; 0x45
 8001ba6:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff52 	bl	8001a58 <_MCP3561_sread>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
	printf("CONF0: %02x\n", reg8);
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4829      	ldr	r0, [pc, #164]	; (8001c64 <MCP3561_PrintRegisters+0xdc>)
 8001bbe:	f004 fa89 	bl	80060d4 <iprintf>

	cmd[0] = MCP3561_CONFIG1_SREAD;
 8001bc2:	2349      	movs	r3, #73	; 0x49
 8001bc4:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff43 	bl	8001a58 <_MCP3561_sread>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
	printf("CONF1: %02x\n", reg8);
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4823      	ldr	r0, [pc, #140]	; (8001c68 <MCP3561_PrintRegisters+0xe0>)
 8001bdc:	f004 fa7a 	bl	80060d4 <iprintf>

	cmd[0] = MCP3561_CONFIG2_SREAD;
 8001be0:	234d      	movs	r3, #77	; 0x4d
 8001be2:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff34 	bl	8001a58 <_MCP3561_sread>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
	printf("CONF2: %02x\n", reg8);
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481c      	ldr	r0, [pc, #112]	; (8001c6c <MCP3561_PrintRegisters+0xe4>)
 8001bfa:	f004 fa6b 	bl	80060d4 <iprintf>

	cmd[0] = MCP3561_CONFIG3_SREAD;
 8001bfe:	2351      	movs	r3, #81	; 0x51
 8001c00:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff25 	bl	8001a58 <_MCP3561_sread>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]
	printf("CONF3: %02x\n", reg8);
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4619      	mov	r1, r3
 8001c16:	4816      	ldr	r0, [pc, #88]	; (8001c70 <MCP3561_PrintRegisters+0xe8>)
 8001c18:	f004 fa5c 	bl	80060d4 <iprintf>

	cmd[0] = MCP3561_IRQ_SREAD;
 8001c1c:	2355      	movs	r3, #85	; 0x55
 8001c1e:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff16 	bl	8001a58 <_MCP3561_sread>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]
	printf("IRQ  : %02x\n", reg8);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	4619      	mov	r1, r3
 8001c34:	480f      	ldr	r0, [pc, #60]	; (8001c74 <MCP3561_PrintRegisters+0xec>)
 8001c36:	f004 fa4d 	bl	80060d4 <iprintf>

	cmd[0] = MCP3561_MUX_SREAD;
 8001c3a:	2359      	movs	r3, #89	; 0x59
 8001c3c:	723b      	strb	r3, [r7, #8]
	reg8 = _MCP3561_sread(hspi, cmd);
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	4619      	mov	r1, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff07 	bl	8001a58 <_MCP3561_sread>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
	printf("MUX  : %02x\n", reg8);
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4809      	ldr	r0, [pc, #36]	; (8001c78 <MCP3561_PrintRegisters+0xf0>)
 8001c54:	f004 fa3e 	bl	80060d4 <iprintf>

	/* @todo all the remaining registers */
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	08008494 	.word	0x08008494
 8001c64:	08008434 	.word	0x08008434
 8001c68:	08008444 	.word	0x08008444
 8001c6c:	08008454 	.word	0x08008454
 8001c70:	08008464 	.word	0x08008464
 8001c74:	08008474 	.word	0x08008474
 8001c78:	08008484 	.word	0x08008484

08001c7c <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8001c84:	237a      	movs	r3, #122	; 0x7a
 8001c86:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 8001c88:	f107 010f 	add.w	r1, r7, #15
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	2201      	movs	r2, #1
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f001 fff8 	bl	8003c86 <HAL_SPI_Transmit>
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_Init+0x28>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_Init+0x28>)
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f94f 	bl	8001f54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb6:	200f      	movs	r0, #15
 8001cb8:	f000 f808 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cbc:	f7ff fb88 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40022000 	.word	0x40022000

08001ccc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x54>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x58>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f967 	bl	8001fbe <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f000 f92f 	bl	8001f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x5c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000480 	.word	0x20000480

08001d54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000480 	.word	0x20000480

08001d6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff ffee 	bl	8001d54 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_Delay+0x44>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffde 	bl	8001d54 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000008 	.word	0x20000008

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	60d3      	str	r3, [r2, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db0b      	blt.n	8001e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	4907      	ldr	r1, [pc, #28]	; (8001e50 <__NVIC_EnableIRQ+0x38>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db0a      	blt.n	8001e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <__NVIC_SetPriority+0x4c>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e7c:	e00a      	b.n	8001e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <__NVIC_SetPriority+0x50>)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	761a      	strb	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f1c3 0307 	rsb	r3, r3, #7
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	bf28      	it	cs
 8001ec6:	2304      	movcs	r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d902      	bls.n	8001ed8 <NVIC_EncodePriority+0x30>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3b03      	subs	r3, #3
 8001ed6:	e000      	b.n	8001eda <NVIC_EncodePriority+0x32>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	401a      	ands	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	4313      	orrs	r3, r2
         );
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f20:	d301      	bcc.n	8001f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00f      	b.n	8001f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <SysTick_Config+0x40>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2e:	210f      	movs	r1, #15
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f7ff ff8e 	bl	8001e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <SysTick_Config+0x40>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <SysTick_Config+0x40>)
 8001f40:	2207      	movs	r2, #7
 8001f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	e000e010 	.word	0xe000e010

08001f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff29 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7c:	f7ff ff3e 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ff8e 	bl	8001ea8 <NVIC_EncodePriority>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff5d 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff31 	bl	8001e18 <__NVIC_EnableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffa2 	bl	8001f10 <SysTick_Config>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	e154      	b.n	8002292 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8146 	beq.w	800228c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d005      	beq.n	8002018 <HAL_GPIO_Init+0x40>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d130      	bne.n	800207a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204e:	2201      	movs	r2, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 0201 	and.w	r2, r3, #1
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b03      	cmp	r3, #3
 8002084:	d017      	beq.n	80020b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d123      	bne.n	800210a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	6939      	ldr	r1, [r7, #16]
 8002106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0203 	and.w	r2, r3, #3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80a0 	beq.w	800228c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214c:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <HAL_GPIO_Init+0x2d8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a57      	ldr	r2, [pc, #348]	; (80022b0 <HAL_GPIO_Init+0x2d8>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <HAL_GPIO_Init+0x2d8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002164:	4a53      	ldr	r2, [pc, #332]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800218e:	d019      	beq.n	80021c4 <HAL_GPIO_Init+0x1ec>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a49      	ldr	r2, [pc, #292]	; (80022b8 <HAL_GPIO_Init+0x2e0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_GPIO_Init+0x1e8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a48      	ldr	r2, [pc, #288]	; (80022bc <HAL_GPIO_Init+0x2e4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00d      	beq.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <HAL_GPIO_Init+0x1e0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a46      	ldr	r2, [pc, #280]	; (80022c4 <HAL_GPIO_Init+0x2ec>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_GPIO_Init+0x1dc>
 80021b0:	2304      	movs	r3, #4
 80021b2:	e008      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021b4:	2305      	movs	r3, #5
 80021b6:	e006      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e004      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021bc:	2302      	movs	r3, #2
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021c4:	2300      	movs	r3, #0
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	f002 0203 	and.w	r2, r2, #3
 80021cc:	0092      	lsls	r2, r2, #2
 80021ce:	4093      	lsls	r3, r2
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d6:	4937      	ldr	r1, [pc, #220]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e4:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002208:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002232:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800225c:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_GPIO_Init+0x2f0>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3301      	adds	r3, #1
 8002290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	f47f aea3 	bne.w	8001fe8 <HAL_GPIO_Init+0x10>
  }
}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010000 	.word	0x40010000
 80022b8:	48000400 	.word	0x48000400
 80022bc:	48000800 	.word	0x48000800
 80022c0:	48000c00 	.word	0x48000c00
 80022c4:	48001000 	.word	0x48001000
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43d9      	mvns	r1, r3
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	400b      	ands	r3, r1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe ffae 	bl	80012b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002366:	af00      	add	r7, sp, #0
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002370:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	f001 b823 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 817d 	beq.w	8002696 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800239c:	4bbc      	ldr	r3, [pc, #752]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d00c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a8:	4bb9      	ldr	r3, [pc, #740]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d15c      	bne.n	800246e <HAL_RCC_OscConfig+0x10e>
 80023b4:	4bb6      	ldr	r3, [pc, #728]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d155      	bne.n	800246e <HAL_RCC_OscConfig+0x10e>
 80023c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_RCC_OscConfig+0x94>
 80023ee:	4ba8      	ldr	r3, [pc, #672]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e015      	b.n	8002420 <HAL_RCC_OscConfig+0xc0>
 80023f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002410:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800241c:	4b9c      	ldr	r3, [pc, #624]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002424:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002428:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800242c:	fa92 f2a2 	rbit	r2, r2
 8002430:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002434:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002438:	fab2 f282 	clz	r2, r2
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	f042 0220 	orr.w	r2, r2, #32
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	f002 021f 	and.w	r2, r2, #31
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 811f 	beq.w	8002694 <HAL_RCC_OscConfig+0x334>
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8116 	bne.w	8002694 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f000 bfaf 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x12e>
 8002480:	4b83      	ldr	r3, [pc, #524]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a82      	ldr	r2, [pc, #520]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 8002486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e036      	b.n	80024fc <HAL_RCC_OscConfig+0x19c>
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x158>
 800249e:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7b      	ldr	r2, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b79      	ldr	r3, [pc, #484]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a78      	ldr	r2, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e021      	b.n	80024fc <HAL_RCC_OscConfig+0x19c>
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x184>
 80024ca:	4b71      	ldr	r3, [pc, #452]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a70      	ldr	r2, [pc, #448]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6d      	ldr	r2, [pc, #436]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x19c>
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a69      	ldr	r2, [pc, #420]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b67      	ldr	r3, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a66      	ldr	r2, [pc, #408]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fc:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f023 020f 	bic.w	r2, r3, #15
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	495f      	ldr	r1, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 8002512:	4313      	orrs	r3, r2
 8002514:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d059      	beq.n	80025da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff fc15 	bl	8001d54 <HAL_GetTick>
 800252a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff fc10 	bl	8001d54 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b64      	cmp	r3, #100	; 0x64
 800253e:	d902      	bls.n	8002546 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	f000 bf43 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
 8002546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800255a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_RCC_OscConfig+0x218>
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	e015      	b.n	80025a4 <HAL_RCC_OscConfig+0x244>
 8002578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800258c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002590:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002594:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025a0:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025b0:	fa92 f2a2 	rbit	r2, r2
 80025b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f002 021f 	and.w	r2, r2, #31
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ab      	beq.n	8002530 <HAL_RCC_OscConfig+0x1d0>
 80025d8:	e05d      	b.n	8002696 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff fbbb 	bl	8001d54 <HAL_GetTick>
 80025de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff fbb6 	bl	8001d54 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d902      	bls.n	80025fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	f000 bee9 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
 80025fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800260e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0x2cc>
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e015      	b.n	8002658 <HAL_RCC_OscConfig+0x2f8>
 800262c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002630:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002644:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002648:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_RCC_OscConfig+0x330>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002660:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002664:	fa92 f2a2 	rbit	r2, r2
 8002668:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800266c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002670:	fab2 f282 	clz	r2, r2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f042 0220 	orr.w	r2, r2, #32
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f002 021f 	and.w	r2, r2, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f202 	lsl.w	r2, r1, r2
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ab      	bne.n	80025e4 <HAL_RCC_OscConfig+0x284>
 800268c:	e003      	b.n	8002696 <HAL_RCC_OscConfig+0x336>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 817d 	beq.w	80029a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026ac:	4ba6      	ldr	r3, [pc, #664]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026b8:	4ba3      	ldr	r3, [pc, #652]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d172      	bne.n	80027aa <HAL_RCC_OscConfig+0x44a>
 80026c4:	4ba0      	ldr	r3, [pc, #640]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d16c      	bne.n	80027aa <HAL_RCC_OscConfig+0x44a>
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_OscConfig+0x3a0>
 80026fa:	4b93      	ldr	r3, [pc, #588]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0x3c8>
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002718:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002724:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2202      	movs	r2, #2
 800272a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800272e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800273a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800273e:	fab2 f282 	clz	r2, r2
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f042 0220 	orr.w	r2, r2, #32
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f002 021f 	and.w	r2, r2, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCC_OscConfig+0x410>
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d002      	beq.n	8002770 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f000 be2e 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b75      	ldr	r3, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	21f8      	movs	r1, #248	; 0xf8
 8002786:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800278e:	fa91 f1a1 	rbit	r1, r1
 8002792:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002796:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800279a:	fab1 f181 	clz	r1, r1
 800279e:	b2c9      	uxtb	r1, r1
 80027a0:	408b      	lsls	r3, r1
 80027a2:	4969      	ldr	r1, [pc, #420]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a8:	e0fd      	b.n	80029a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8088 	beq.w	80028cc <HAL_RCC_OscConfig+0x56c>
 80027bc:	2301      	movs	r3, #1
 80027be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	461a      	mov	r2, r3
 80027e4:	2301      	movs	r3, #1
 80027e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fab4 	bl	8001d54 <HAL_GetTick>
 80027ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f2:	f7ff faaf 	bl	8001d54 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d902      	bls.n	8002808 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	f000 bde2 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
 8002808:	2302      	movs	r3, #2
 800280a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800281a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0x4d8>
 8002832:	4b45      	ldr	r3, [pc, #276]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e013      	b.n	8002860 <HAL_RCC_OscConfig+0x500>
 8002838:	2302      	movs	r3, #2
 800283a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800284a:	2302      	movs	r3, #2
 800284c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002850:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2202      	movs	r2, #2
 8002862:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002866:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002872:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002876:	fab2 f282 	clz	r2, r2
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f042 0220 	orr.w	r2, r2, #32
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f002 021f 	and.w	r2, r2, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0af      	beq.n	80027f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	21f8      	movs	r1, #248	; 0xf8
 80028a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028b0:	fa91 f1a1 	rbit	r1, r1
 80028b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028bc:	fab1 f181 	clz	r1, r1
 80028c0:	b2c9      	uxtb	r1, r1
 80028c2:	408b      	lsls	r3, r1
 80028c4:	4920      	ldr	r1, [pc, #128]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
 80028ca:	e06c      	b.n	80029a6 <HAL_RCC_OscConfig+0x646>
 80028cc:	2301      	movs	r3, #1
 80028ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	461a      	mov	r2, r3
 80028f4:	2300      	movs	r3, #0
 80028f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7ff fa2c 	bl	8001d54 <HAL_GetTick>
 80028fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002902:	f7ff fa27 	bl	8001d54 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	f000 bd5a 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
 8002918:	2302      	movs	r3, #2
 800291a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800292a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d104      	bne.n	800294c <HAL_RCC_OscConfig+0x5ec>
 8002942:	4b01      	ldr	r3, [pc, #4]	; (8002948 <HAL_RCC_OscConfig+0x5e8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e015      	b.n	8002974 <HAL_RCC_OscConfig+0x614>
 8002948:	40021000 	.word	0x40021000
 800294c:	2302      	movs	r3, #2
 800294e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800295e:	2302      	movs	r3, #2
 8002960:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002964:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002970:	4bc8      	ldr	r3, [pc, #800]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2202      	movs	r2, #2
 8002976:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800297a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002986:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800298a:	fab2 f282 	clz	r2, r2
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f042 0220 	orr.w	r2, r2, #32
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f002 021f 	and.w	r2, r2, #31
 800299a:	2101      	movs	r1, #1
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ad      	bne.n	8002902 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8110 	beq.w	8002bdc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d079      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x760>
 80029cc:	2301      	movs	r3, #1
 80029ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	4bab      	ldr	r3, [pc, #684]	; (8002c98 <HAL_RCC_OscConfig+0x938>)
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	461a      	mov	r2, r3
 80029f2:	2301      	movs	r3, #1
 80029f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7ff f9ad 	bl	8001d54 <HAL_GetTick>
 80029fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7ff f9a8 	bl	8001d54 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d902      	bls.n	8002a16 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	f000 bcdb 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
 8002a16:	2302      	movs	r3, #2
 8002a18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a30:	2202      	movs	r2, #2
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a54:	2202      	movs	r2, #2
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a70:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	6019      	str	r1, [r3, #0]
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f1a3 	rbit	r1, r3
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a96:	6019      	str	r1, [r3, #0]
  return result;
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0a0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x6a0>
 8002abe:	e08d      	b.n	8002bdc <HAL_RCC_OscConfig+0x87c>
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ae2:	601a      	str	r2, [r3, #0]
  return result;
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002aec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_OscConfig+0x938>)
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	2300      	movs	r3, #0
 8002b00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7ff f927 	bl	8001d54 <HAL_GetTick>
 8002b06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7ff f922 	bl	8001d54 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f000 bc55 	b.w	80033cc <HAL_RCC_OscConfig+0x106c>
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fa93 f2a3 	rbit	r2, r3
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b72:	2202      	movs	r2, #2
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	6019      	str	r1, [r3, #0]
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fa93 f1a3 	rbit	r1, r3
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bb4:	6019      	str	r1, [r3, #0]
  return result;
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d197      	bne.n	8002b0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 81a1 	beq.w	8002f34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf8:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d116      	bne.n	8002c32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	61d3      	str	r3, [r2, #28]
 8002c10:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_OscConfig+0x93c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11a      	bne.n	8002c74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_RCC_OscConfig+0x93c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <HAL_RCC_OscConfig+0x93c>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7ff f883 	bl	8001d54 <HAL_GetTick>
 8002c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	e009      	b.n	8002c68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7ff f87e 	bl	8001d54 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	; 0x64
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e3b1      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_OscConfig+0x93c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10d      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x940>
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a02      	ldr	r2, [pc, #8]	; (8002c94 <HAL_RCC_OscConfig+0x934>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	e03c      	b.n	8002d0c <HAL_RCC_OscConfig+0x9ac>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	10908120 	.word	0x10908120
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x96a>
 8002cb0:	4bc1      	ldr	r3, [pc, #772]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4ac0      	ldr	r2, [pc, #768]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	4bbe      	ldr	r3, [pc, #760]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4abd      	ldr	r2, [pc, #756]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e020      	b.n	8002d0c <HAL_RCC_OscConfig+0x9ac>
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x994>
 8002cda:	4bb7      	ldr	r3, [pc, #732]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4ab6      	ldr	r2, [pc, #728]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4bb4      	ldr	r3, [pc, #720]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4ab3      	ldr	r2, [pc, #716]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0x9ac>
 8002cf4:	4bb0      	ldr	r3, [pc, #704]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4aaf      	ldr	r2, [pc, #700]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	4bad      	ldr	r3, [pc, #692]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4aac      	ldr	r2, [pc, #688]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8081 	beq.w	8002e20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff f819 	bl	8001d54 <HAL_GetTick>
 8002d22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7ff f814 	bl	8001d54 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e345      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d86:	601a      	str	r2, [r3, #0]
  return result;
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0xa4c>
 8002da6:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	e013      	b.n	8002dd4 <HAL_RCC_OscConfig+0xa74>
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002db4:	2202      	movs	r2, #2
 8002db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f2a3 	rbit	r2, r3
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ddc:	2102      	movs	r1, #2
 8002dde:	6011      	str	r1, [r2, #0]
 8002de0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	fa92 f1a2 	rbit	r1, r2
 8002dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002df6:	6011      	str	r1, [r2, #0]
  return result;
 8002df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dfc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	fab2 f282 	clz	r2, r2
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	f002 021f 	and.w	r2, r2, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f202 	lsl.w	r2, r1, r2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d084      	beq.n	8002d28 <HAL_RCC_OscConfig+0x9c8>
 8002e1e:	e07f      	b.n	8002f20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7fe ff98 	bl	8001d54 <HAL_GetTick>
 8002e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	e00b      	b.n	8002e42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe ff93 	bl	8001d54 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e2c4      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e6e:	2202      	movs	r2, #2
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fa93 f2a3 	rbit	r2, r3
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e88:	601a      	str	r2, [r3, #0]
  return result;
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_OscConfig+0xb4e>
 8002ea8:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	e013      	b.n	8002ed6 <HAL_RCC_OscConfig+0xb76>
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ede:	2102      	movs	r1, #2
 8002ee0:	6011      	str	r1, [r2, #0]
 8002ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	fa92 f1a2 	rbit	r1, r2
 8002ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ef8:	6011      	str	r1, [r2, #0]
  return result;
 8002efa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002efe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	fab2 f282 	clz	r2, r2
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f002 021f 	and.w	r2, r2, #31
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d184      	bne.n	8002e2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8242 	beq.w	80033ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_RCC_OscConfig+0xc58>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	f000 8213 	beq.w	800337a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	f040 8162 	bne.w	800322a <HAL_RCC_OscConfig+0xeca>
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f8a:	601a      	str	r2, [r3, #0]
  return result;
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fed2 	bl	8001d54 <HAL_GetTick>
 8002fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	e00c      	b.n	8002fd0 <HAL_RCC_OscConfig+0xc70>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe feca 	bl	8001d54 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1fd      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ff4:	601a      	str	r2, [r3, #0]
  return result;
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ffe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_RCC_OscConfig+0xcba>
 8003014:	4bb0      	ldr	r3, [pc, #704]	; (80032d8 <HAL_RCC_OscConfig+0xf78>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	e027      	b.n	800306a <HAL_RCC_OscConfig+0xd0a>
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4b9c      	ldr	r3, [pc, #624]	; (80032d8 <HAL_RCC_OscConfig+0xf78>)
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003072:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003076:	6011      	str	r1, [r2, #0]
 8003078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	fa92 f1a2 	rbit	r1, r2
 8003086:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800308e:	6011      	str	r1, [r2, #0]
  return result;
 8003090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003094:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	fab2 f282 	clz	r2, r2
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	f042 0220 	orr.w	r2, r2, #32
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	f002 021f 	and.w	r2, r2, #31
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f202 	lsl.w	r2, r1, r2
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d182      	bne.n	8002fbc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0xf78>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	430b      	orrs	r3, r1
 80030d8:	497f      	ldr	r1, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0xf78>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003102:	601a      	str	r2, [r3, #0]
  return result;
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800310c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003118:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	461a      	mov	r2, r3
 8003120:	2301      	movs	r3, #1
 8003122:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe fe16 	bl	8001d54 <HAL_GetTick>
 8003128:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	e009      	b.n	8003142 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312e:	f7fe fe11 	bl	8001d54 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e144      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800314a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800314e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	fa93 f2a3 	rbit	r2, r3
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003166:	601a      	str	r2, [r3, #0]
  return result;
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003170:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_RCC_OscConfig+0xe2c>
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <HAL_RCC_OscConfig+0xf78>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e027      	b.n	80031dc <HAL_RCC_OscConfig+0xe7c>
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	fa93 f2a3 	rbit	r2, r3
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_OscConfig+0xf78>)
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031e8:	6011      	str	r1, [r2, #0]
 80031ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	fa92 f1a2 	rbit	r1, r2
 80031f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003200:	6011      	str	r1, [r2, #0]
  return result;
 8003202:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003206:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	f042 0220 	orr.w	r2, r2, #32
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f002 021f 	and.w	r2, r2, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f202 	lsl.w	r2, r1, r2
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d082      	beq.n	800312e <HAL_RCC_OscConfig+0xdce>
 8003228:	e0cf      	b.n	80033ca <HAL_RCC_OscConfig+0x106a>
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fa93 f2a3 	rbit	r2, r3
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800324e:	601a      	str	r2, [r3, #0]
  return result;
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003258:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	461a      	mov	r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fd70 	bl	8001d54 <HAL_GetTick>
 8003274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003278:	e009      	b.n	800328e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe fd6b 	bl	8001d54 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e09e      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003296:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800329a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	fa93 f2a3 	rbit	r2, r3
 80032aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032b2:	601a      	str	r2, [r3, #0]
  return result;
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d104      	bne.n	80032dc <HAL_RCC_OscConfig+0xf7c>
 80032d2:	4b01      	ldr	r3, [pc, #4]	; (80032d8 <HAL_RCC_OscConfig+0xf78>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	e029      	b.n	800332c <HAL_RCC_OscConfig+0xfcc>
 80032d8:	40021000 	.word	0x40021000
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800330a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003314:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x1078>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003330:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003334:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003338:	6011      	str	r1, [r2, #0]
 800333a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800333e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	fa92 f1a2 	rbit	r1, r2
 8003348:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800334c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003350:	6011      	str	r1, [r2, #0]
  return result;
 8003352:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003356:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d180      	bne.n	800327a <HAL_RCC_OscConfig+0xf1a>
 8003378:	e027      	b.n	80033ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e01e      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_OscConfig+0x1078>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003396:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800339a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d10b      	bne.n	80033c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000

080033dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b09e      	sub	sp, #120	; 0x78
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e162      	b.n	80036ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b90      	ldr	r3, [pc, #576]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d910      	bls.n	8003424 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b8d      	ldr	r3, [pc, #564]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 0207 	bic.w	r2, r3, #7
 800340a:	498b      	ldr	r1, [pc, #556]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b89      	ldr	r3, [pc, #548]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e14a      	b.n	80036ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b82      	ldr	r3, [pc, #520]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	497f      	ldr	r1, [pc, #508]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80dc 	beq.w	8003608 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d13c      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xf6>
 8003458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <HAL_RCC_ClockConfig+0xa6>
 800347c:	4b6f      	ldr	r3, [pc, #444]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	e00f      	b.n	80034a2 <HAL_RCC_ClockConfig+0xc6>
 8003482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003486:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	667b      	str	r3, [r7, #100]	; 0x64
 8003490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003494:	663b      	str	r3, [r7, #96]	; 0x60
 8003496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800349e:	4b67      	ldr	r3, [pc, #412]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80034a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034aa:	fa92 f2a2 	rbit	r2, r2
 80034ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d17b      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0f3      	b.n	80036ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d13c      	bne.n	8003554 <HAL_RCC_ClockConfig+0x178>
 80034da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_RCC_ClockConfig+0x128>
 80034fe:	4b4f      	ldr	r3, [pc, #316]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	e00f      	b.n	8003524 <HAL_RCC_ClockConfig+0x148>
 8003504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003508:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	647b      	str	r3, [r7, #68]	; 0x44
 8003512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003516:	643b      	str	r3, [r7, #64]	; 0x40
 8003518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003520:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003528:	63ba      	str	r2, [r7, #56]	; 0x38
 800352a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352c:	fa92 f2a2 	rbit	r2, r2
 8003530:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003534:	fab2 f282 	clz	r2, r2
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	f042 0220 	orr.w	r2, r2, #32
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	f002 021f 	and.w	r2, r2, #31
 8003544:	2101      	movs	r1, #1
 8003546:	fa01 f202 	lsl.w	r2, r1, r2
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d13a      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b2      	b.n	80036ba <HAL_RCC_ClockConfig+0x2de>
 8003554:	2302      	movs	r3, #2
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_RCC_ClockConfig+0x1a0>
 8003576:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e00d      	b.n	8003598 <HAL_RCC_ClockConfig+0x1bc>
 800357c:	2302      	movs	r3, #2
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	2302      	movs	r3, #2
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2202      	movs	r2, #2
 800359a:	61ba      	str	r2, [r7, #24]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	fa92 f2a2 	rbit	r2, r2
 80035a2:	617a      	str	r2, [r7, #20]
  return result;
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	fab2 f282 	clz	r2, r2
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	f042 0220 	orr.w	r2, r2, #32
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f002 021f 	and.w	r2, r2, #31
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e079      	b.n	80036ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	491a      	ldr	r1, [pc, #104]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d8:	f7fe fbbc 	bl	8001d54 <HAL_GetTick>
 80035dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fe fbb8 	bl	8001d54 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e061      	b.n	80036ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d214      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0207 	bic.w	r2, r3, #7
 800361e:	4906      	ldr	r1, [pc, #24]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_RCC_ClockConfig+0x25c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e040      	b.n	80036ba <HAL_RCC_ClockConfig+0x2de>
 8003638:	40022000 	.word	0x40022000
 800363c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_ClockConfig+0x2e8>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	491a      	ldr	r1, [pc, #104]	; (80036c4 <HAL_RCC_ClockConfig+0x2e8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x2e8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4912      	ldr	r1, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x2e8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800367e:	f000 f829 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003682:	4601      	mov	r1, r0
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368c:	22f0      	movs	r2, #240	; 0xf0
 800368e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	60fa      	str	r2, [r7, #12]
  return result;
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	fab2 f282 	clz	r2, r2
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	40d3      	lsrs	r3, r2
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x2ec>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	fa21 f303 	lsr.w	r3, r1, r3
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <HAL_RCC_ClockConfig+0x2f0>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <HAL_RCC_ClockConfig+0x2f4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fb0a 	bl	8001ccc <HAL_InitTick>
  
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3778      	adds	r7, #120	; 0x78
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	0800849c 	.word	0x0800849c
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b08b      	sub	sp, #44	; 0x2c
 80036d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d002      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x30>
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d003      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x36>
 8003702:	e03c      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003706:	623b      	str	r3, [r7, #32]
      break;
 8003708:	e03c      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003710:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003714:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	607a      	str	r2, [r7, #4]
  return result;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	40d3      	lsrs	r3, r2
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_RCC_GetSysClockFreq+0xc8>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	220f      	movs	r2, #15
 8003738:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	60fa      	str	r2, [r7, #12]
  return result;
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	40d3      	lsrs	r3, r2
 800374c:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800374e:	5cd3      	ldrb	r3, [r2, r3]
 8003750:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <HAL_RCC_GetSysClockFreq+0xc4>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	fbb2 f2f3 	udiv	r2, r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	e004      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	4a0c      	ldr	r2, [pc, #48]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	623b      	str	r3, [r7, #32]
      break;
 800377c:	e002      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003780:	623b      	str	r3, [r7, #32]
      break;
 8003782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003784:	6a3b      	ldr	r3, [r7, #32]
}
 8003786:	4618      	mov	r0, r3
 8003788:	372c      	adds	r7, #44	; 0x2c
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	007a1200 	.word	0x007a1200
 800379c:	080084b4 	.word	0x080084b4
 80037a0:	080084c4 	.word	0x080084c4
 80037a4:	003d0900 	.word	0x003d0900

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037c6:	f7ff ffef 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037ca:	4601      	mov	r1, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	fa92 f2a2 	rbit	r2, r2
 80037e0:	603a      	str	r2, [r7, #0]
  return result;
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	fab2 f282 	clz	r2, r2
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	40d3      	lsrs	r3, r2
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037ee:	5cd3      	ldrb	r3, [r2, r3]
 80037f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	080084ac 	.word	0x080084ac

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800380a:	f7ff ffcd 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 800380e:	4601      	mov	r1, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003818:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800381c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	fa92 f2a2 	rbit	r2, r2
 8003824:	603a      	str	r2, [r7, #0]
  return result;
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	fab2 f282 	clz	r2, r2
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	40d3      	lsrs	r3, r2
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	080084ac 	.word	0x080084ac

08003848 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b092      	sub	sp, #72	; 0x48
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80d4 	beq.w	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386c:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10e      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003878:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003882:	61d3      	str	r3, [r2, #28]
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	4b45      	ldr	r3, [pc, #276]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d118      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a2:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a41      	ldr	r2, [pc, #260]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ae:	f7fe fa51 	bl	8001d54 <HAL_GetTick>
 80038b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	e008      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b6:	f7fe fa4d 	bl	8001d54 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b64      	cmp	r3, #100	; 0x64
 80038c2:	d901      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e12d      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038d4:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8084 	beq.w	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d07c      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038f4:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	461a      	mov	r2, r3
 800391e:	2301      	movs	r3, #1
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	461a      	mov	r2, r3
 8003942:	2300      	movs	r3, #0
 8003944:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04b      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fe f9fd 	bl	8001d54 <HAL_GetTick>
 800395a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fe f9f9 	bl	8001d54 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0d7      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003974:	2302      	movs	r3, #2
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	2302      	movs	r3, #2
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
  return result;
 800398c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d108      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039a2:	4b01      	ldr	r3, [pc, #4]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	e00d      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
 80039b0:	10908100 	.word	0x10908100
 80039b4:	2302      	movs	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	4b5a      	ldr	r3, [pc, #360]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2202      	movs	r2, #2
 80039c6:	613a      	str	r2, [r7, #16]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	fa92 f2a2 	rbit	r2, r2
 80039ce:	60fa      	str	r2, [r7, #12]
  return result;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	fab2 f282 	clz	r2, r2
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	f002 021f 	and.w	r2, r2, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0b7      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039ee:	4b4f      	ldr	r3, [pc, #316]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	494c      	ldr	r1, [pc, #304]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a08:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4a47      	ldr	r2, [pc, #284]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a20:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	f023 0203 	bic.w	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	493f      	ldr	r1, [pc, #252]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4938      	ldr	r1, [pc, #224]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a5c:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4930      	ldr	r1, [pc, #192]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f023 0210 	bic.w	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4929      	ldr	r1, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	4921      	ldr	r1, [pc, #132]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f023 0220 	bic.w	r2, r3, #32
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	491a      	ldr	r1, [pc, #104]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4912      	ldr	r1, [pc, #72]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	490b      	ldr	r1, [pc, #44]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3748      	adds	r7, #72	; 0x48
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e09d      	b.n	8003c7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b52:	d009      	beq.n	8003b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
 8003b5a:	e005      	b.n	8003b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fc48 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba8:	d902      	bls.n	8003bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e002      	b.n	8003bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bbe:	d007      	beq.n	8003bd0 <HAL_SPI_Init+0xa0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	ea42 0103 	orr.w	r1, r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	0c1b      	lsrs	r3, r3, #16
 8003c2c:	f003 0204 	and.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c4c:	ea42 0103 	orr.w	r1, r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b088      	sub	sp, #32
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_SPI_Transmit+0x22>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e158      	b.n	8003f5a <HAL_SPI_Transmit+0x2d4>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb0:	f7fe f850 	bl	8001d54 <HAL_GetTick>
 8003cb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d002      	beq.n	8003ccc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cca:	e13d      	b.n	8003f48 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Transmit+0x52>
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cdc:	e134      	b.n	8003f48 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d28:	d10f      	bne.n	8003d4a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d007      	beq.n	8003d68 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d70:	d94b      	bls.n	8003e0a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_SPI_Transmit+0xfa>
 8003d7a:	8afb      	ldrh	r3, [r7, #22]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d13e      	bne.n	8003dfe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003da4:	e02b      	b.n	8003dfe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d112      	bne.n	8003dda <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	881a      	ldrh	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd8:	e011      	b.n	8003dfe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dda:	f7fd ffbb 	bl	8001d54 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d803      	bhi.n	8003df2 <HAL_SPI_Transmit+0x16c>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d102      	bne.n	8003df8 <HAL_SPI_Transmit+0x172>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dfc:	e0a4      	b.n	8003f48 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ce      	bne.n	8003da6 <HAL_SPI_Transmit+0x120>
 8003e08:	e07c      	b.n	8003f04 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0x192>
 8003e12:	8afb      	ldrh	r3, [r7, #22]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d170      	bne.n	8003efa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d912      	bls.n	8003e48 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	881a      	ldrh	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	1c9a      	adds	r2, r3, #2
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b02      	subs	r3, #2
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e46:	e058      	b.n	8003efa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e6e:	e044      	b.n	8003efa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d12b      	bne.n	8003ed6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d912      	bls.n	8003eae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	881a      	ldrh	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b02      	subs	r3, #2
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eac:	e025      	b.n	8003efa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed4:	e011      	b.n	8003efa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed6:	f7fd ff3d 	bl	8001d54 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d803      	bhi.n	8003eee <HAL_SPI_Transmit+0x268>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d102      	bne.n	8003ef4 <HAL_SPI_Transmit+0x26e>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef8:	e026      	b.n	8003f48 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1b5      	bne.n	8003e70 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fb5b 	bl	80045c4 <SPI_EndRxTxTransaction>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e000      	b.n	8003f48 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003f46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08a      	sub	sp, #40	; 0x28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f70:	2301      	movs	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x26>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e1fb      	b.n	8004380 <HAL_SPI_TransmitReceive+0x41e>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f90:	f7fd fee0 	bl	8001d54 <HAL_GetTick>
 8003f94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fac:	7efb      	ldrb	r3, [r7, #27]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x6e>
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb8:	d106      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x66>
 8003fc2:	7efb      	ldrb	r3, [r7, #27]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d003      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fce:	e1cd      	b.n	800436c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x80>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x80>
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fe8:	e1c0      	b.n	800436c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	887a      	ldrh	r2, [r7, #2]
 8004016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	887a      	ldrh	r2, [r7, #2]
 800402a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004040:	d802      	bhi.n	8004048 <HAL_SPI_TransmitReceive+0xe6>
 8004042:	8a3b      	ldrh	r3, [r7, #16]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d908      	bls.n	800405a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	e007      	b.n	800406a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d007      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004090:	d97c      	bls.n	800418c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x13e>
 800409a:	8a7b      	ldrh	r3, [r7, #18]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d169      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c4:	e056      	b.n	8004174 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d11b      	bne.n	800410c <HAL_SPI_TransmitReceive+0x1aa>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_SPI_TransmitReceive+0x1aa>
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d113      	bne.n	800410c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d11c      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x1f2>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	b292      	uxth	r2, r2
 8004132:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004150:	2301      	movs	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004154:	f7fd fdfe 	bl	8001d54 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004160:	429a      	cmp	r2, r3
 8004162:	d807      	bhi.n	8004174 <HAL_SPI_TransmitReceive+0x212>
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d003      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004172:	e0fb      	b.n	800436c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1a3      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x164>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d19d      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x164>
 800418a:	e0df      	b.n	800434c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_SPI_TransmitReceive+0x23a>
 8004194:	8a7b      	ldrh	r3, [r7, #18]
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 80cb 	bne.w	8004332 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d912      	bls.n	80041cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b02      	subs	r3, #2
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ca:	e0b2      	b.n	8004332 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f2:	e09e      	b.n	8004332 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d134      	bne.n	800426c <HAL_SPI_TransmitReceive+0x30a>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d02f      	beq.n	800426c <HAL_SPI_TransmitReceive+0x30a>
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	2b01      	cmp	r3, #1
 8004210:	d12c      	bne.n	800426c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d912      	bls.n	8004242 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	1c9a      	adds	r2, r3, #2
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b02      	subs	r3, #2
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004240:	e012      	b.n	8004268 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d148      	bne.n	800430c <HAL_SPI_TransmitReceive+0x3aa>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d042      	beq.n	800430c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d923      	bls.n	80042da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	b292      	uxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b02      	subs	r3, #2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d81f      	bhi.n	8004308 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	e016      	b.n	8004308 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f103 020c 	add.w	r2, r3, #12
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	7812      	ldrb	r2, [r2, #0]
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004308:	2301      	movs	r3, #1
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800430c:	f7fd fd22 	bl	8001d54 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004318:	429a      	cmp	r2, r3
 800431a:	d803      	bhi.n	8004324 <HAL_SPI_TransmitReceive+0x3c2>
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d102      	bne.n	800432a <HAL_SPI_TransmitReceive+0x3c8>
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004330:	e01c      	b.n	800436c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f af5b 	bne.w	80041f4 <HAL_SPI_TransmitReceive+0x292>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	f47f af54 	bne.w	80041f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f937 	bl	80045c4 <SPI_EndRxTxTransaction>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d006      	beq.n	800436a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	661a      	str	r2, [r3, #96]	; 0x60
 8004368:	e000      	b.n	800436c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800436a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800437c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004380:	4618      	mov	r0, r3
 8004382:	3728      	adds	r7, #40	; 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004398:	f7fd fcdc 	bl	8001d54 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043a8:	f7fd fcd4 	bl	8001d54 <HAL_GetTick>
 80043ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ae:	4b39      	ldr	r3, [pc, #228]	; (8004494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	015b      	lsls	r3, r3, #5
 80043b4:	0d1b      	lsrs	r3, r3, #20
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043be:	e054      	b.n	800446a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d050      	beq.n	800446a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043c8:	f7fd fcc4 	bl	8001d54 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d902      	bls.n	80043de <SPI_WaitFlagStateUntilTimeout+0x56>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d13d      	bne.n	800445a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f6:	d111      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0x94>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004400:	d004      	beq.n	800440c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440a:	d107      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004424:	d10f      	bne.n	8004446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e017      	b.n	800448a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3b01      	subs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d19b      	bne.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000000 	.word	0x20000000

08004498 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044aa:	f7fd fc53 	bl	8001d54 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80044ba:	f7fd fc4b 	bl	8001d54 <HAL_GetTick>
 80044be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044c8:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00da      	lsls	r2, r3, #3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	0d1b      	lsrs	r3, r3, #20
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044e0:	e060      	b.n	80045a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044e8:	d107      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d050      	beq.n	80045a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004502:	f7fd fc27 	bl	8001d54 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	429a      	cmp	r2, r3
 8004510:	d902      	bls.n	8004518 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d13d      	bne.n	8004594 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004526:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004530:	d111      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453a:	d004      	beq.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004544:	d107      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004554:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	d10f      	bne.n	8004580 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800457e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e010      	b.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d196      	bne.n	80044e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3728      	adds	r7, #40	; 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000

080045c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff ff5b 	bl	8004498 <SPI_WaitFifoStateUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e027      	b.n	8004648 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2200      	movs	r2, #0
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff fec0 	bl	8004388 <SPI_WaitFlagStateUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004612:	f043 0220 	orr.w	r2, r3, #32
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e014      	b.n	8004648 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7ff ff34 	bl	8004498 <SPI_WaitFifoStateUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e000      	b.n	8004648 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e041      	b.n	80046e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc ff7e 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f000 fa0e 	bl	8004ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d001      	beq.n	8004708 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e041      	b.n	800478c <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d01d      	beq.n	8004756 <HAL_TIM_Base_Start+0x66>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_TIM_Base_Start+0xa8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_TIM_Base_Start+0x66>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1c      	ldr	r2, [pc, #112]	; (800479c <HAL_TIM_Base_Start+0xac>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_TIM_Base_Start+0x66>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_TIM_Base_Start+0xb0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIM_Base_Start+0x66>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_TIM_Base_Start+0xb4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_TIM_Base_Start+0x66>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_TIM_Base_Start+0xb8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIM_Base_Start+0x66>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a16      	ldr	r2, [pc, #88]	; (80047ac <HAL_TIM_Base_Start+0xbc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d111      	bne.n	800477a <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b06      	cmp	r3, #6
 8004766:	d010      	beq.n	800478a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	e007      	b.n	800478a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40001800 	.word	0x40001800
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40015c00 	.word	0x40015c00

080047b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e041      	b.n	8004846 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f839 	bl	800484e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f000 f95e 	bl	8004ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <HAL_TIM_OC_Start+0x24>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e022      	b.n	80048ce <HAL_TIM_OC_Start+0x6a>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d109      	bne.n	80048a2 <HAL_TIM_OC_Start+0x3e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	e015      	b.n	80048ce <HAL_TIM_OC_Start+0x6a>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_OC_Start+0x58>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e008      	b.n	80048ce <HAL_TIM_OC_Start+0x6a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e07c      	b.n	80049d0 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_OC_Start+0x82>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	e013      	b.n	800490e <HAL_TIM_OC_Start+0xaa>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_OC_Start+0x92>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	e00b      	b.n	800490e <HAL_TIM_OC_Start+0xaa>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_OC_Start+0xa2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	e003      	b.n	800490e <HAL_TIM_OC_Start+0xaa>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2201      	movs	r2, #1
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fabd 	bl	8004e96 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <HAL_TIM_OC_Start+0x174>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_TIM_OC_Start+0xd6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <HAL_TIM_OC_Start+0x178>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_TIM_OC_Start+0xd6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2a      	ldr	r2, [pc, #168]	; (80049e0 <HAL_TIM_OC_Start+0x17c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <HAL_TIM_OC_Start+0xda>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_TIM_OC_Start+0xdc>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495c:	d01d      	beq.n	800499a <HAL_TIM_OC_Start+0x136>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_TIM_OC_Start+0x180>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d018      	beq.n	800499a <HAL_TIM_OC_Start+0x136>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_TIM_OC_Start+0x184>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_TIM_OC_Start+0x136>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_TIM_OC_Start+0x188>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_TIM_OC_Start+0x136>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <HAL_TIM_OC_Start+0x18c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_TIM_OC_Start+0x136>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <HAL_TIM_OC_Start+0x174>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_TIM_OC_Start+0x136>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_TIM_OC_Start+0x190>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d111      	bne.n	80049be <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b06      	cmp	r3, #6
 80049aa:	d010      	beq.n	80049ce <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	e007      	b.n	80049ce <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40001800 	.word	0x40001800
 80049f4:	40015c00 	.word	0x40015c00

080049f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e048      	b.n	8004aa8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d839      	bhi.n	8004a98 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004a99 	.word	0x08004a99
 8004a38:	08004a99 	.word	0x08004a99
 8004a3c:	08004a6f 	.word	0x08004a6f
 8004a40:	08004a99 	.word	0x08004a99
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	08004a7d 	.word	0x08004a7d
 8004a50:	08004a99 	.word	0x08004a99
 8004a54:	08004a99 	.word	0x08004a99
 8004a58:	08004a99 	.word	0x08004a99
 8004a5c:	08004a8b 	.word	0x08004a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f8bc 	bl	8004be4 <TIM_OC1_SetConfig>
      break;
 8004a6c:	e017      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 f92f 	bl	8004cd8 <TIM_OC2_SetConfig>
      break;
 8004a7a:	e010      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f98a 	bl	8004d9c <TIM_OC3_SetConfig>
      break;
 8004a88:	e009      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 f9c1 	bl	8004e18 <TIM_OC4_SetConfig>
      break;
 8004a96:	e002      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac6:	d00f      	beq.n	8004ae8 <TIM_Base_SetConfig+0x38>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a3c      	ldr	r2, [pc, #240]	; (8004bbc <TIM_Base_SetConfig+0x10c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <TIM_Base_SetConfig+0x38>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a3b      	ldr	r2, [pc, #236]	; (8004bc0 <TIM_Base_SetConfig+0x110>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <TIM_Base_SetConfig+0x38>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a3a      	ldr	r2, [pc, #232]	; (8004bc4 <TIM_Base_SetConfig+0x114>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_Base_SetConfig+0x38>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a39      	ldr	r2, [pc, #228]	; (8004bc8 <TIM_Base_SetConfig+0x118>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d108      	bne.n	8004afa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d027      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <TIM_Base_SetConfig+0x10c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d023      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <TIM_Base_SetConfig+0x110>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01f      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <TIM_Base_SetConfig+0x114>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01b      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2b      	ldr	r2, [pc, #172]	; (8004bcc <TIM_Base_SetConfig+0x11c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d017      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2a      	ldr	r2, [pc, #168]	; (8004bd0 <TIM_Base_SetConfig+0x120>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a29      	ldr	r2, [pc, #164]	; (8004bd4 <TIM_Base_SetConfig+0x124>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00f      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a28      	ldr	r2, [pc, #160]	; (8004bd8 <TIM_Base_SetConfig+0x128>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00b      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a27      	ldr	r2, [pc, #156]	; (8004bdc <TIM_Base_SetConfig+0x12c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <TIM_Base_SetConfig+0x130>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_Base_SetConfig+0xa2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <TIM_Base_SetConfig+0x118>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <TIM_Base_SetConfig+0x128>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0xf0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <TIM_Base_SetConfig+0x12c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0xf0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <TIM_Base_SetConfig+0x130>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d103      	bne.n	8004ba8 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	615a      	str	r2, [r3, #20]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40015c00 	.word	0x40015c00
 8004bcc:	40001800 	.word	0x40001800
 8004bd0:	40001c00 	.word	0x40001c00
 8004bd4:	40002000 	.word	0x40002000
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f023 0201 	bic.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 0302 	bic.w	r3, r3, #2
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <TIM_OC1_SetConfig+0xe8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_OC1_SetConfig+0x6c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <TIM_OC1_SetConfig+0xec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC1_SetConfig+0x6c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <TIM_OC1_SetConfig+0xf0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10c      	bne.n	8004c6a <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0308 	bic.w	r3, r3, #8
 8004c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <TIM_OC1_SetConfig+0xe8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_OC1_SetConfig+0x9e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <TIM_OC1_SetConfig+0xec>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_OC1_SetConfig+0x9e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <TIM_OC1_SetConfig+0xf0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	621a      	str	r2, [r3, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f023 0210 	bic.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 0320 	bic.w	r3, r3, #32
 8004d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <TIM_OC2_SetConfig+0xb8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_OC2_SetConfig+0x70>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <TIM_OC2_SetConfig+0xbc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC2_SetConfig+0x70>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM_OC2_SetConfig+0xc0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10f      	bne.n	8004d68 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d4e:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800

08004d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1a      	ldr	r2, [r3, #32]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	401a      	ands	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	621a      	str	r2, [r3, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e03d      	b.n	8004f78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e040      	b.n	8005018 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fc fbc6 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2224      	movs	r2, #36	; 0x24
 8004fb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0201 	bic.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8c0 	bl	8005148 <UART_SetConfig>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e022      	b.n	8005018 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa2e 	bl	800543c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ffe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fab5 	bl	8005580 <UART_CheckIdleState>
 8005016:	4603      	mov	r3, r0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005034:	2b20      	cmp	r3, #32
 8005036:	f040 8082 	bne.w	800513e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_UART_Transmit+0x26>
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07a      	b.n	8005140 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_UART_Transmit+0x38>
 8005054:	2302      	movs	r3, #2
 8005056:	e073      	b.n	8005140 <HAL_UART_Transmit+0x120>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2221      	movs	r2, #33	; 0x21
 800506c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800506e:	f7fc fe71 	bl	8001d54 <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508c:	d108      	bne.n	80050a0 <HAL_UART_Transmit+0x80>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	e003      	b.n	80050a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050b0:	e02d      	b.n	800510e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 faa8 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e039      	b.n	8005140 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050de:	b292      	uxth	r2, r2
 80050e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	3302      	adds	r3, #2
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e008      	b.n	80050fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b292      	uxth	r2, r2
 80050f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1cb      	bne.n	80050b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	2140      	movs	r1, #64	; 0x40
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fa74 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e005      	b.n	8005140 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e000      	b.n	8005140 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800513e:	2302      	movs	r3, #2
  }
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005176:	f023 030c 	bic.w	r3, r3, #12
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	6979      	ldr	r1, [r7, #20]
 8005180:	430b      	orrs	r3, r1
 8005182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a99      	ldr	r2, [pc, #612]	; (8005428 <UART_SetConfig+0x2e0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d120      	bne.n	800520a <UART_SetConfig+0xc2>
 80051c8:	4b98      	ldr	r3, [pc, #608]	; (800542c <UART_SetConfig+0x2e4>)
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d817      	bhi.n	8005204 <UART_SetConfig+0xbc>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x94>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	080051ff 	.word	0x080051ff
 80051e8:	080051f3 	.word	0x080051f3
 80051ec:	2301      	movs	r3, #1
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e061      	b.n	80052b6 <UART_SetConfig+0x16e>
 80051f2:	2302      	movs	r3, #2
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e05e      	b.n	80052b6 <UART_SetConfig+0x16e>
 80051f8:	2304      	movs	r3, #4
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e05b      	b.n	80052b6 <UART_SetConfig+0x16e>
 80051fe:	2308      	movs	r3, #8
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e058      	b.n	80052b6 <UART_SetConfig+0x16e>
 8005204:	2310      	movs	r3, #16
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e055      	b.n	80052b6 <UART_SetConfig+0x16e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a88      	ldr	r2, [pc, #544]	; (8005430 <UART_SetConfig+0x2e8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d124      	bne.n	800525e <UART_SetConfig+0x116>
 8005214:	4b85      	ldr	r3, [pc, #532]	; (800542c <UART_SetConfig+0x2e4>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800521c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005220:	d011      	beq.n	8005246 <UART_SetConfig+0xfe>
 8005222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005226:	d817      	bhi.n	8005258 <UART_SetConfig+0x110>
 8005228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800522c:	d011      	beq.n	8005252 <UART_SetConfig+0x10a>
 800522e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005232:	d811      	bhi.n	8005258 <UART_SetConfig+0x110>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <UART_SetConfig+0xf8>
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d006      	beq.n	800524c <UART_SetConfig+0x104>
 800523e:	e00b      	b.n	8005258 <UART_SetConfig+0x110>
 8005240:	2300      	movs	r3, #0
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e037      	b.n	80052b6 <UART_SetConfig+0x16e>
 8005246:	2302      	movs	r3, #2
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e034      	b.n	80052b6 <UART_SetConfig+0x16e>
 800524c:	2304      	movs	r3, #4
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e031      	b.n	80052b6 <UART_SetConfig+0x16e>
 8005252:	2308      	movs	r3, #8
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e02e      	b.n	80052b6 <UART_SetConfig+0x16e>
 8005258:	2310      	movs	r3, #16
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e02b      	b.n	80052b6 <UART_SetConfig+0x16e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a74      	ldr	r2, [pc, #464]	; (8005434 <UART_SetConfig+0x2ec>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d124      	bne.n	80052b2 <UART_SetConfig+0x16a>
 8005268:	4b70      	ldr	r3, [pc, #448]	; (800542c <UART_SetConfig+0x2e4>)
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005270:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005274:	d011      	beq.n	800529a <UART_SetConfig+0x152>
 8005276:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800527a:	d817      	bhi.n	80052ac <UART_SetConfig+0x164>
 800527c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005280:	d011      	beq.n	80052a6 <UART_SetConfig+0x15e>
 8005282:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005286:	d811      	bhi.n	80052ac <UART_SetConfig+0x164>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <UART_SetConfig+0x14c>
 800528c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005290:	d006      	beq.n	80052a0 <UART_SetConfig+0x158>
 8005292:	e00b      	b.n	80052ac <UART_SetConfig+0x164>
 8005294:	2300      	movs	r3, #0
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e00d      	b.n	80052b6 <UART_SetConfig+0x16e>
 800529a:	2302      	movs	r3, #2
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e00a      	b.n	80052b6 <UART_SetConfig+0x16e>
 80052a0:	2304      	movs	r3, #4
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e007      	b.n	80052b6 <UART_SetConfig+0x16e>
 80052a6:	2308      	movs	r3, #8
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e004      	b.n	80052b6 <UART_SetConfig+0x16e>
 80052ac:	2310      	movs	r3, #16
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e001      	b.n	80052b6 <UART_SetConfig+0x16e>
 80052b2:	2310      	movs	r3, #16
 80052b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052be:	d15b      	bne.n	8005378 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 80052c0:	7ffb      	ldrb	r3, [r7, #31]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d827      	bhi.n	8005316 <UART_SetConfig+0x1ce>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x184>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080052f9 	.word	0x080052f9
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005307 	.word	0x08005307
 80052e0:	08005317 	.word	0x08005317
 80052e4:	08005317 	.word	0x08005317
 80052e8:	08005317 	.word	0x08005317
 80052ec:	0800530f 	.word	0x0800530f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fe fa66 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 80052f4:	61b8      	str	r0, [r7, #24]
        break;
 80052f6:	e013      	b.n	8005320 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7fe fa84 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 80052fc:	61b8      	str	r0, [r7, #24]
        break;
 80052fe:	e00f      	b.n	8005320 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005300:	4b4d      	ldr	r3, [pc, #308]	; (8005438 <UART_SetConfig+0x2f0>)
 8005302:	61bb      	str	r3, [r7, #24]
        break;
 8005304:	e00c      	b.n	8005320 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005306:	f7fe f9e5 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 800530a:	61b8      	str	r0, [r7, #24]
        break;
 800530c:	e008      	b.n	8005320 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	61bb      	str	r3, [r7, #24]
        break;
 8005314:	e004      	b.n	8005320 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	77bb      	strb	r3, [r7, #30]
        break;
 800531e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d074      	beq.n	8005410 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	005a      	lsls	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	441a      	add	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b0f      	cmp	r3, #15
 8005342:	d916      	bls.n	8005372 <UART_SetConfig+0x22a>
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534a:	d212      	bcs.n	8005372 <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f023 030f 	bic.w	r3, r3, #15
 8005354:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	b29b      	uxth	r3, r3
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	b29a      	uxth	r2, r3
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	4313      	orrs	r3, r2
 8005366:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	89fa      	ldrh	r2, [r7, #14]
 800536e:	60da      	str	r2, [r3, #12]
 8005370:	e04e      	b.n	8005410 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	77bb      	strb	r3, [r7, #30]
 8005376:	e04b      	b.n	8005410 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005378:	7ffb      	ldrb	r3, [r7, #31]
 800537a:	2b08      	cmp	r3, #8
 800537c:	d827      	bhi.n	80053ce <UART_SetConfig+0x286>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0x23c>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	080053cf 	.word	0x080053cf
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053cf 	.word	0x080053cf
 800539c:	080053cf 	.word	0x080053cf
 80053a0:	080053cf 	.word	0x080053cf
 80053a4:	080053c7 	.word	0x080053c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a8:	f7fe fa0a 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 80053ac:	61b8      	str	r0, [r7, #24]
        break;
 80053ae:	e013      	b.n	80053d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b0:	f7fe fa28 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 80053b4:	61b8      	str	r0, [r7, #24]
        break;
 80053b6:	e00f      	b.n	80053d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b8:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <UART_SetConfig+0x2f0>)
 80053ba:	61bb      	str	r3, [r7, #24]
        break;
 80053bc:	e00c      	b.n	80053d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053be:	f7fe f989 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 80053c2:	61b8      	str	r0, [r7, #24]
        break;
 80053c4:	e008      	b.n	80053d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ca:	61bb      	str	r3, [r7, #24]
        break;
 80053cc:	e004      	b.n	80053d8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	77bb      	strb	r3, [r7, #30]
        break;
 80053d6:	bf00      	nop
    }

    if (pclk != 0U)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d018      	beq.n	8005410 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	085a      	lsrs	r2, r3, #1
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	441a      	add	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d908      	bls.n	800540c <UART_SetConfig+0x2c4>
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d204      	bcs.n	800540c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	e001      	b.n	8005410 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800541c:	7fbb      	ldrb	r3, [r7, #30]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40013800 	.word	0x40013800
 800542c:	40021000 	.word	0x40021000
 8005430:	40004400 	.word	0x40004400
 8005434:	40004800 	.word	0x40004800
 8005438:	007a1200 	.word	0x007a1200

0800543c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01a      	beq.n	8005552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553a:	d10a      	bne.n	8005552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af02      	add	r7, sp, #8
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005590:	f7fc fbe0 	bl	8001d54 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d10e      	bne.n	80055c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f82d 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e023      	b.n	800560a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d10e      	bne.n	80055ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f817 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e00d      	b.n	800560a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b09c      	sub	sp, #112	; 0x70
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005622:	e0a5      	b.n	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	f000 80a1 	beq.w	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fc fb91 	bl	8001d54 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <UART_WaitOnFlagUntilTimeout+0x32>
 800563e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005640:	2b00      	cmp	r3, #0
 8005642:	d13e      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005658:	667b      	str	r3, [r7, #100]	; 0x64
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005664:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	663b      	str	r3, [r7, #96]	; 0x60
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005696:	64ba      	str	r2, [r7, #72]	; 0x48
 8005698:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800569c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e067      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d04f      	beq.n	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056de:	d147      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800570e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	613b      	str	r3, [r7, #16]
   return(result);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	66bb      	str	r3, [r7, #104]	; 0x68
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800573c:	623a      	str	r2, [r7, #32]
 800573e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	69f9      	ldr	r1, [r7, #28]
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	61bb      	str	r3, [r7, #24]
   return(result);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e010      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4013      	ands	r3, r2
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	429a      	cmp	r2, r3
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	429a      	cmp	r2, r3
 800578c:	f43f af4a 	beq.w	8005624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3770      	adds	r7, #112	; 0x70
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <__errno>:
 800579c:	4b01      	ldr	r3, [pc, #4]	; (80057a4 <__errno+0x8>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	2000000c 	.word	0x2000000c

080057a8 <__libc_init_array>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	4d0d      	ldr	r5, [pc, #52]	; (80057e0 <__libc_init_array+0x38>)
 80057ac:	4c0d      	ldr	r4, [pc, #52]	; (80057e4 <__libc_init_array+0x3c>)
 80057ae:	1b64      	subs	r4, r4, r5
 80057b0:	10a4      	asrs	r4, r4, #2
 80057b2:	2600      	movs	r6, #0
 80057b4:	42a6      	cmp	r6, r4
 80057b6:	d109      	bne.n	80057cc <__libc_init_array+0x24>
 80057b8:	4d0b      	ldr	r5, [pc, #44]	; (80057e8 <__libc_init_array+0x40>)
 80057ba:	4c0c      	ldr	r4, [pc, #48]	; (80057ec <__libc_init_array+0x44>)
 80057bc:	f002 fe22 	bl	8008404 <_init>
 80057c0:	1b64      	subs	r4, r4, r5
 80057c2:	10a4      	asrs	r4, r4, #2
 80057c4:	2600      	movs	r6, #0
 80057c6:	42a6      	cmp	r6, r4
 80057c8:	d105      	bne.n	80057d6 <__libc_init_array+0x2e>
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d0:	4798      	blx	r3
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7ee      	b.n	80057b4 <__libc_init_array+0xc>
 80057d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057da:	4798      	blx	r3
 80057dc:	3601      	adds	r6, #1
 80057de:	e7f2      	b.n	80057c6 <__libc_init_array+0x1e>
 80057e0:	080088ac 	.word	0x080088ac
 80057e4:	080088ac 	.word	0x080088ac
 80057e8:	080088ac 	.word	0x080088ac
 80057ec:	080088b0 	.word	0x080088b0

080057f0 <memset>:
 80057f0:	4402      	add	r2, r0
 80057f2:	4603      	mov	r3, r0
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d100      	bne.n	80057fa <memset+0xa>
 80057f8:	4770      	bx	lr
 80057fa:	f803 1b01 	strb.w	r1, [r3], #1
 80057fe:	e7f9      	b.n	80057f4 <memset+0x4>

08005800 <__cvt>:
 8005800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	ec55 4b10 	vmov	r4, r5, d0
 8005808:	2d00      	cmp	r5, #0
 800580a:	460e      	mov	r6, r1
 800580c:	4619      	mov	r1, r3
 800580e:	462b      	mov	r3, r5
 8005810:	bfbb      	ittet	lt
 8005812:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005816:	461d      	movlt	r5, r3
 8005818:	2300      	movge	r3, #0
 800581a:	232d      	movlt	r3, #45	; 0x2d
 800581c:	700b      	strb	r3, [r1, #0]
 800581e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005820:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005824:	4691      	mov	r9, r2
 8005826:	f023 0820 	bic.w	r8, r3, #32
 800582a:	bfbc      	itt	lt
 800582c:	4622      	movlt	r2, r4
 800582e:	4614      	movlt	r4, r2
 8005830:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005834:	d005      	beq.n	8005842 <__cvt+0x42>
 8005836:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800583a:	d100      	bne.n	800583e <__cvt+0x3e>
 800583c:	3601      	adds	r6, #1
 800583e:	2102      	movs	r1, #2
 8005840:	e000      	b.n	8005844 <__cvt+0x44>
 8005842:	2103      	movs	r1, #3
 8005844:	ab03      	add	r3, sp, #12
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	ab02      	add	r3, sp, #8
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	ec45 4b10 	vmov	d0, r4, r5
 8005850:	4653      	mov	r3, sl
 8005852:	4632      	mov	r2, r6
 8005854:	f000 fe30 	bl	80064b8 <_dtoa_r>
 8005858:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800585c:	4607      	mov	r7, r0
 800585e:	d102      	bne.n	8005866 <__cvt+0x66>
 8005860:	f019 0f01 	tst.w	r9, #1
 8005864:	d022      	beq.n	80058ac <__cvt+0xac>
 8005866:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800586a:	eb07 0906 	add.w	r9, r7, r6
 800586e:	d110      	bne.n	8005892 <__cvt+0x92>
 8005870:	783b      	ldrb	r3, [r7, #0]
 8005872:	2b30      	cmp	r3, #48	; 0x30
 8005874:	d10a      	bne.n	800588c <__cvt+0x8c>
 8005876:	2200      	movs	r2, #0
 8005878:	2300      	movs	r3, #0
 800587a:	4620      	mov	r0, r4
 800587c:	4629      	mov	r1, r5
 800587e:	f7fb f923 	bl	8000ac8 <__aeabi_dcmpeq>
 8005882:	b918      	cbnz	r0, 800588c <__cvt+0x8c>
 8005884:	f1c6 0601 	rsb	r6, r6, #1
 8005888:	f8ca 6000 	str.w	r6, [sl]
 800588c:	f8da 3000 	ldr.w	r3, [sl]
 8005890:	4499      	add	r9, r3
 8005892:	2200      	movs	r2, #0
 8005894:	2300      	movs	r3, #0
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fb f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800589e:	b108      	cbz	r0, 80058a4 <__cvt+0xa4>
 80058a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80058a4:	2230      	movs	r2, #48	; 0x30
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	454b      	cmp	r3, r9
 80058aa:	d307      	bcc.n	80058bc <__cvt+0xbc>
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058b0:	1bdb      	subs	r3, r3, r7
 80058b2:	4638      	mov	r0, r7
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	b004      	add	sp, #16
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	1c59      	adds	r1, r3, #1
 80058be:	9103      	str	r1, [sp, #12]
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e7f0      	b.n	80058a6 <__cvt+0xa6>

080058c4 <__exponent>:
 80058c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c6:	4603      	mov	r3, r0
 80058c8:	2900      	cmp	r1, #0
 80058ca:	bfb8      	it	lt
 80058cc:	4249      	neglt	r1, r1
 80058ce:	f803 2b02 	strb.w	r2, [r3], #2
 80058d2:	bfb4      	ite	lt
 80058d4:	222d      	movlt	r2, #45	; 0x2d
 80058d6:	222b      	movge	r2, #43	; 0x2b
 80058d8:	2909      	cmp	r1, #9
 80058da:	7042      	strb	r2, [r0, #1]
 80058dc:	dd2a      	ble.n	8005934 <__exponent+0x70>
 80058de:	f10d 0407 	add.w	r4, sp, #7
 80058e2:	46a4      	mov	ip, r4
 80058e4:	270a      	movs	r7, #10
 80058e6:	46a6      	mov	lr, r4
 80058e8:	460a      	mov	r2, r1
 80058ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80058ee:	fb07 1516 	mls	r5, r7, r6, r1
 80058f2:	3530      	adds	r5, #48	; 0x30
 80058f4:	2a63      	cmp	r2, #99	; 0x63
 80058f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80058fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058fe:	4631      	mov	r1, r6
 8005900:	dcf1      	bgt.n	80058e6 <__exponent+0x22>
 8005902:	3130      	adds	r1, #48	; 0x30
 8005904:	f1ae 0502 	sub.w	r5, lr, #2
 8005908:	f804 1c01 	strb.w	r1, [r4, #-1]
 800590c:	1c44      	adds	r4, r0, #1
 800590e:	4629      	mov	r1, r5
 8005910:	4561      	cmp	r1, ip
 8005912:	d30a      	bcc.n	800592a <__exponent+0x66>
 8005914:	f10d 0209 	add.w	r2, sp, #9
 8005918:	eba2 020e 	sub.w	r2, r2, lr
 800591c:	4565      	cmp	r5, ip
 800591e:	bf88      	it	hi
 8005920:	2200      	movhi	r2, #0
 8005922:	4413      	add	r3, r2
 8005924:	1a18      	subs	r0, r3, r0
 8005926:	b003      	add	sp, #12
 8005928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800592a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800592e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005932:	e7ed      	b.n	8005910 <__exponent+0x4c>
 8005934:	2330      	movs	r3, #48	; 0x30
 8005936:	3130      	adds	r1, #48	; 0x30
 8005938:	7083      	strb	r3, [r0, #2]
 800593a:	70c1      	strb	r1, [r0, #3]
 800593c:	1d03      	adds	r3, r0, #4
 800593e:	e7f1      	b.n	8005924 <__exponent+0x60>

08005940 <_printf_float>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	ed2d 8b02 	vpush	{d8}
 8005948:	b08d      	sub	sp, #52	; 0x34
 800594a:	460c      	mov	r4, r1
 800594c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005950:	4616      	mov	r6, r2
 8005952:	461f      	mov	r7, r3
 8005954:	4605      	mov	r5, r0
 8005956:	f001 fd55 	bl	8007404 <_localeconv_r>
 800595a:	f8d0 a000 	ldr.w	sl, [r0]
 800595e:	4650      	mov	r0, sl
 8005960:	f7fa fc36 	bl	80001d0 <strlen>
 8005964:	2300      	movs	r3, #0
 8005966:	930a      	str	r3, [sp, #40]	; 0x28
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	9305      	str	r3, [sp, #20]
 800596c:	f8d8 3000 	ldr.w	r3, [r8]
 8005970:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005974:	3307      	adds	r3, #7
 8005976:	f023 0307 	bic.w	r3, r3, #7
 800597a:	f103 0208 	add.w	r2, r3, #8
 800597e:	f8c8 2000 	str.w	r2, [r8]
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800598a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800598e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005992:	9307      	str	r3, [sp, #28]
 8005994:	f8cd 8018 	str.w	r8, [sp, #24]
 8005998:	ee08 0a10 	vmov	s16, r0
 800599c:	4b9f      	ldr	r3, [pc, #636]	; (8005c1c <_printf_float+0x2dc>)
 800599e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	f7fb f8c1 	bl	8000b2c <__aeabi_dcmpun>
 80059aa:	bb88      	cbnz	r0, 8005a10 <_printf_float+0xd0>
 80059ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059b0:	4b9a      	ldr	r3, [pc, #616]	; (8005c1c <_printf_float+0x2dc>)
 80059b2:	f04f 32ff 	mov.w	r2, #4294967295
 80059b6:	f7fb f89b 	bl	8000af0 <__aeabi_dcmple>
 80059ba:	bb48      	cbnz	r0, 8005a10 <_printf_float+0xd0>
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	4640      	mov	r0, r8
 80059c2:	4649      	mov	r1, r9
 80059c4:	f7fb f88a 	bl	8000adc <__aeabi_dcmplt>
 80059c8:	b110      	cbz	r0, 80059d0 <_printf_float+0x90>
 80059ca:	232d      	movs	r3, #45	; 0x2d
 80059cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d0:	4b93      	ldr	r3, [pc, #588]	; (8005c20 <_printf_float+0x2e0>)
 80059d2:	4894      	ldr	r0, [pc, #592]	; (8005c24 <_printf_float+0x2e4>)
 80059d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059d8:	bf94      	ite	ls
 80059da:	4698      	movls	r8, r3
 80059dc:	4680      	movhi	r8, r0
 80059de:	2303      	movs	r3, #3
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	9b05      	ldr	r3, [sp, #20]
 80059e4:	f023 0204 	bic.w	r2, r3, #4
 80059e8:	6022      	str	r2, [r4, #0]
 80059ea:	f04f 0900 	mov.w	r9, #0
 80059ee:	9700      	str	r7, [sp, #0]
 80059f0:	4633      	mov	r3, r6
 80059f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80059f4:	4621      	mov	r1, r4
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 f9d8 	bl	8005dac <_printf_common>
 80059fc:	3001      	adds	r0, #1
 80059fe:	f040 8090 	bne.w	8005b22 <_printf_float+0x1e2>
 8005a02:	f04f 30ff 	mov.w	r0, #4294967295
 8005a06:	b00d      	add	sp, #52	; 0x34
 8005a08:	ecbd 8b02 	vpop	{d8}
 8005a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	4640      	mov	r0, r8
 8005a16:	4649      	mov	r1, r9
 8005a18:	f7fb f888 	bl	8000b2c <__aeabi_dcmpun>
 8005a1c:	b140      	cbz	r0, 8005a30 <_printf_float+0xf0>
 8005a1e:	464b      	mov	r3, r9
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfbc      	itt	lt
 8005a24:	232d      	movlt	r3, #45	; 0x2d
 8005a26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a2a:	487f      	ldr	r0, [pc, #508]	; (8005c28 <_printf_float+0x2e8>)
 8005a2c:	4b7f      	ldr	r3, [pc, #508]	; (8005c2c <_printf_float+0x2ec>)
 8005a2e:	e7d1      	b.n	80059d4 <_printf_float+0x94>
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a36:	9206      	str	r2, [sp, #24]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	d13f      	bne.n	8005abc <_printf_float+0x17c>
 8005a3c:	2306      	movs	r3, #6
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	9b05      	ldr	r3, [sp, #20]
 8005a42:	6861      	ldr	r1, [r4, #4]
 8005a44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9303      	str	r3, [sp, #12]
 8005a4c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a52:	ab09      	add	r3, sp, #36	; 0x24
 8005a54:	ec49 8b10 	vmov	d0, r8, r9
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	6022      	str	r2, [r4, #0]
 8005a5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a60:	4628      	mov	r0, r5
 8005a62:	f7ff fecd 	bl	8005800 <__cvt>
 8005a66:	9b06      	ldr	r3, [sp, #24]
 8005a68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a6a:	2b47      	cmp	r3, #71	; 0x47
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	d108      	bne.n	8005a82 <_printf_float+0x142>
 8005a70:	1cc8      	adds	r0, r1, #3
 8005a72:	db02      	blt.n	8005a7a <_printf_float+0x13a>
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	4299      	cmp	r1, r3
 8005a78:	dd41      	ble.n	8005afe <_printf_float+0x1be>
 8005a7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a7e:	fa5f fb8b 	uxtb.w	fp, fp
 8005a82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a86:	d820      	bhi.n	8005aca <_printf_float+0x18a>
 8005a88:	3901      	subs	r1, #1
 8005a8a:	465a      	mov	r2, fp
 8005a8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a90:	9109      	str	r1, [sp, #36]	; 0x24
 8005a92:	f7ff ff17 	bl	80058c4 <__exponent>
 8005a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a98:	1813      	adds	r3, r2, r0
 8005a9a:	2a01      	cmp	r2, #1
 8005a9c:	4681      	mov	r9, r0
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	dc02      	bgt.n	8005aa8 <_printf_float+0x168>
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	07d2      	lsls	r2, r2, #31
 8005aa6:	d501      	bpl.n	8005aac <_printf_float+0x16c>
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d09c      	beq.n	80059ee <_printf_float+0xae>
 8005ab4:	232d      	movs	r3, #45	; 0x2d
 8005ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aba:	e798      	b.n	80059ee <_printf_float+0xae>
 8005abc:	9a06      	ldr	r2, [sp, #24]
 8005abe:	2a47      	cmp	r2, #71	; 0x47
 8005ac0:	d1be      	bne.n	8005a40 <_printf_float+0x100>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1bc      	bne.n	8005a40 <_printf_float+0x100>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e7b9      	b.n	8005a3e <_printf_float+0xfe>
 8005aca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ace:	d118      	bne.n	8005b02 <_printf_float+0x1c2>
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	6863      	ldr	r3, [r4, #4]
 8005ad4:	dd0b      	ble.n	8005aee <_printf_float+0x1ae>
 8005ad6:	6121      	str	r1, [r4, #16]
 8005ad8:	b913      	cbnz	r3, 8005ae0 <_printf_float+0x1a0>
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	07d0      	lsls	r0, r2, #31
 8005ade:	d502      	bpl.n	8005ae6 <_printf_float+0x1a6>
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	440b      	add	r3, r1
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ae8:	f04f 0900 	mov.w	r9, #0
 8005aec:	e7de      	b.n	8005aac <_printf_float+0x16c>
 8005aee:	b913      	cbnz	r3, 8005af6 <_printf_float+0x1b6>
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	07d2      	lsls	r2, r2, #31
 8005af4:	d501      	bpl.n	8005afa <_printf_float+0x1ba>
 8005af6:	3302      	adds	r3, #2
 8005af8:	e7f4      	b.n	8005ae4 <_printf_float+0x1a4>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e7f2      	b.n	8005ae4 <_printf_float+0x1a4>
 8005afe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b04:	4299      	cmp	r1, r3
 8005b06:	db05      	blt.n	8005b14 <_printf_float+0x1d4>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	6121      	str	r1, [r4, #16]
 8005b0c:	07d8      	lsls	r0, r3, #31
 8005b0e:	d5ea      	bpl.n	8005ae6 <_printf_float+0x1a6>
 8005b10:	1c4b      	adds	r3, r1, #1
 8005b12:	e7e7      	b.n	8005ae4 <_printf_float+0x1a4>
 8005b14:	2900      	cmp	r1, #0
 8005b16:	bfd4      	ite	le
 8005b18:	f1c1 0202 	rsble	r2, r1, #2
 8005b1c:	2201      	movgt	r2, #1
 8005b1e:	4413      	add	r3, r2
 8005b20:	e7e0      	b.n	8005ae4 <_printf_float+0x1a4>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	055a      	lsls	r2, r3, #21
 8005b26:	d407      	bmi.n	8005b38 <_printf_float+0x1f8>
 8005b28:	6923      	ldr	r3, [r4, #16]
 8005b2a:	4642      	mov	r2, r8
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	d12c      	bne.n	8005b90 <_printf_float+0x250>
 8005b36:	e764      	b.n	8005a02 <_printf_float+0xc2>
 8005b38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b3c:	f240 80e0 	bls.w	8005d00 <_printf_float+0x3c0>
 8005b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b44:	2200      	movs	r2, #0
 8005b46:	2300      	movs	r3, #0
 8005b48:	f7fa ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d034      	beq.n	8005bba <_printf_float+0x27a>
 8005b50:	4a37      	ldr	r2, [pc, #220]	; (8005c30 <_printf_float+0x2f0>)
 8005b52:	2301      	movs	r3, #1
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f af51 	beq.w	8005a02 <_printf_float+0xc2>
 8005b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b64:	429a      	cmp	r2, r3
 8005b66:	db02      	blt.n	8005b6e <_printf_float+0x22e>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	07d8      	lsls	r0, r3, #31
 8005b6c:	d510      	bpl.n	8005b90 <_printf_float+0x250>
 8005b6e:	ee18 3a10 	vmov	r3, s16
 8005b72:	4652      	mov	r2, sl
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f af41 	beq.w	8005a02 <_printf_float+0xc2>
 8005b80:	f04f 0800 	mov.w	r8, #0
 8005b84:	f104 091a 	add.w	r9, r4, #26
 8005b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	4543      	cmp	r3, r8
 8005b8e:	dc09      	bgt.n	8005ba4 <_printf_float+0x264>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	f100 8105 	bmi.w	8005da2 <_printf_float+0x462>
 8005b98:	68e0      	ldr	r0, [r4, #12]
 8005b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b9c:	4298      	cmp	r0, r3
 8005b9e:	bfb8      	it	lt
 8005ba0:	4618      	movlt	r0, r3
 8005ba2:	e730      	b.n	8005a06 <_printf_float+0xc6>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	464a      	mov	r2, r9
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af27 	beq.w	8005a02 <_printf_float+0xc2>
 8005bb4:	f108 0801 	add.w	r8, r8, #1
 8005bb8:	e7e6      	b.n	8005b88 <_printf_float+0x248>
 8005bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dc39      	bgt.n	8005c34 <_printf_float+0x2f4>
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	; (8005c30 <_printf_float+0x2f0>)
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af19 	beq.w	8005a02 <_printf_float+0xc2>
 8005bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d102      	bne.n	8005bde <_printf_float+0x29e>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	07d9      	lsls	r1, r3, #31
 8005bdc:	d5d8      	bpl.n	8005b90 <_printf_float+0x250>
 8005bde:	ee18 3a10 	vmov	r3, s16
 8005be2:	4652      	mov	r2, sl
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f43f af09 	beq.w	8005a02 <_printf_float+0xc2>
 8005bf0:	f04f 0900 	mov.w	r9, #0
 8005bf4:	f104 0a1a 	add.w	sl, r4, #26
 8005bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfa:	425b      	negs	r3, r3
 8005bfc:	454b      	cmp	r3, r9
 8005bfe:	dc01      	bgt.n	8005c04 <_printf_float+0x2c4>
 8005c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c02:	e792      	b.n	8005b2a <_printf_float+0x1ea>
 8005c04:	2301      	movs	r3, #1
 8005c06:	4652      	mov	r2, sl
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	f43f aef7 	beq.w	8005a02 <_printf_float+0xc2>
 8005c14:	f109 0901 	add.w	r9, r9, #1
 8005c18:	e7ee      	b.n	8005bf8 <_printf_float+0x2b8>
 8005c1a:	bf00      	nop
 8005c1c:	7fefffff 	.word	0x7fefffff
 8005c20:	080084d8 	.word	0x080084d8
 8005c24:	080084dc 	.word	0x080084dc
 8005c28:	080084e4 	.word	0x080084e4
 8005c2c:	080084e0 	.word	0x080084e0
 8005c30:	080084e8 	.word	0x080084e8
 8005c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	bfa8      	it	ge
 8005c3c:	461a      	movge	r2, r3
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	4691      	mov	r9, r2
 8005c42:	dc37      	bgt.n	8005cb4 <_printf_float+0x374>
 8005c44:	f04f 0b00 	mov.w	fp, #0
 8005c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4c:	f104 021a 	add.w	r2, r4, #26
 8005c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	eba3 0309 	sub.w	r3, r3, r9
 8005c58:	455b      	cmp	r3, fp
 8005c5a:	dc33      	bgt.n	8005cc4 <_printf_float+0x384>
 8005c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c60:	429a      	cmp	r2, r3
 8005c62:	db3b      	blt.n	8005cdc <_printf_float+0x39c>
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	07da      	lsls	r2, r3, #31
 8005c68:	d438      	bmi.n	8005cdc <_printf_float+0x39c>
 8005c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6c:	9a05      	ldr	r2, [sp, #20]
 8005c6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c70:	1a9a      	subs	r2, r3, r2
 8005c72:	eba3 0901 	sub.w	r9, r3, r1
 8005c76:	4591      	cmp	r9, r2
 8005c78:	bfa8      	it	ge
 8005c7a:	4691      	movge	r9, r2
 8005c7c:	f1b9 0f00 	cmp.w	r9, #0
 8005c80:	dc35      	bgt.n	8005cee <_printf_float+0x3ae>
 8005c82:	f04f 0800 	mov.w	r8, #0
 8005c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c8a:	f104 0a1a 	add.w	sl, r4, #26
 8005c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	eba3 0309 	sub.w	r3, r3, r9
 8005c98:	4543      	cmp	r3, r8
 8005c9a:	f77f af79 	ble.w	8005b90 <_printf_float+0x250>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f43f aeaa 	beq.w	8005a02 <_printf_float+0xc2>
 8005cae:	f108 0801 	add.w	r8, r8, #1
 8005cb2:	e7ec      	b.n	8005c8e <_printf_float+0x34e>
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4642      	mov	r2, r8
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d1c0      	bne.n	8005c44 <_printf_float+0x304>
 8005cc2:	e69e      	b.n	8005a02 <_printf_float+0xc2>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4628      	mov	r0, r5
 8005cca:	9205      	str	r2, [sp, #20]
 8005ccc:	47b8      	blx	r7
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f43f ae97 	beq.w	8005a02 <_printf_float+0xc2>
 8005cd4:	9a05      	ldr	r2, [sp, #20]
 8005cd6:	f10b 0b01 	add.w	fp, fp, #1
 8005cda:	e7b9      	b.n	8005c50 <_printf_float+0x310>
 8005cdc:	ee18 3a10 	vmov	r3, s16
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d1be      	bne.n	8005c6a <_printf_float+0x32a>
 8005cec:	e689      	b.n	8005a02 <_printf_float+0xc2>
 8005cee:	9a05      	ldr	r2, [sp, #20]
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	4442      	add	r2, r8
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d1c1      	bne.n	8005c82 <_printf_float+0x342>
 8005cfe:	e680      	b.n	8005a02 <_printf_float+0xc2>
 8005d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d02:	2a01      	cmp	r2, #1
 8005d04:	dc01      	bgt.n	8005d0a <_printf_float+0x3ca>
 8005d06:	07db      	lsls	r3, r3, #31
 8005d08:	d538      	bpl.n	8005d7c <_printf_float+0x43c>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	f43f ae74 	beq.w	8005a02 <_printf_float+0xc2>
 8005d1a:	ee18 3a10 	vmov	r3, s16
 8005d1e:	4652      	mov	r2, sl
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	f43f ae6b 	beq.w	8005a02 <_printf_float+0xc2>
 8005d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d30:	2200      	movs	r2, #0
 8005d32:	2300      	movs	r3, #0
 8005d34:	f7fa fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d38:	b9d8      	cbnz	r0, 8005d72 <_printf_float+0x432>
 8005d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3c:	f108 0201 	add.w	r2, r8, #1
 8005d40:	3b01      	subs	r3, #1
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d10e      	bne.n	8005d6a <_printf_float+0x42a>
 8005d4c:	e659      	b.n	8005a02 <_printf_float+0xc2>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4652      	mov	r2, sl
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f43f ae52 	beq.w	8005a02 <_printf_float+0xc2>
 8005d5e:	f108 0801 	add.w	r8, r8, #1
 8005d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4543      	cmp	r3, r8
 8005d68:	dcf1      	bgt.n	8005d4e <_printf_float+0x40e>
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d70:	e6dc      	b.n	8005b2c <_printf_float+0x1ec>
 8005d72:	f04f 0800 	mov.w	r8, #0
 8005d76:	f104 0a1a 	add.w	sl, r4, #26
 8005d7a:	e7f2      	b.n	8005d62 <_printf_float+0x422>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4642      	mov	r2, r8
 8005d80:	e7df      	b.n	8005d42 <_printf_float+0x402>
 8005d82:	2301      	movs	r3, #1
 8005d84:	464a      	mov	r2, r9
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f ae38 	beq.w	8005a02 <_printf_float+0xc2>
 8005d92:	f108 0801 	add.w	r8, r8, #1
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	4543      	cmp	r3, r8
 8005d9e:	dcf0      	bgt.n	8005d82 <_printf_float+0x442>
 8005da0:	e6fa      	b.n	8005b98 <_printf_float+0x258>
 8005da2:	f04f 0800 	mov.w	r8, #0
 8005da6:	f104 0919 	add.w	r9, r4, #25
 8005daa:	e7f4      	b.n	8005d96 <_printf_float+0x456>

08005dac <_printf_common>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	4616      	mov	r6, r2
 8005db2:	4699      	mov	r9, r3
 8005db4:	688a      	ldr	r2, [r1, #8]
 8005db6:	690b      	ldr	r3, [r1, #16]
 8005db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	bfb8      	it	lt
 8005dc0:	4613      	movlt	r3, r2
 8005dc2:	6033      	str	r3, [r6, #0]
 8005dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dc8:	4607      	mov	r7, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	b10a      	cbz	r2, 8005dd2 <_printf_common+0x26>
 8005dce:	3301      	adds	r3, #1
 8005dd0:	6033      	str	r3, [r6, #0]
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	0699      	lsls	r1, r3, #26
 8005dd6:	bf42      	ittt	mi
 8005dd8:	6833      	ldrmi	r3, [r6, #0]
 8005dda:	3302      	addmi	r3, #2
 8005ddc:	6033      	strmi	r3, [r6, #0]
 8005dde:	6825      	ldr	r5, [r4, #0]
 8005de0:	f015 0506 	ands.w	r5, r5, #6
 8005de4:	d106      	bne.n	8005df4 <_printf_common+0x48>
 8005de6:	f104 0a19 	add.w	sl, r4, #25
 8005dea:	68e3      	ldr	r3, [r4, #12]
 8005dec:	6832      	ldr	r2, [r6, #0]
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	dc26      	bgt.n	8005e42 <_printf_common+0x96>
 8005df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005df8:	1e13      	subs	r3, r2, #0
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	bf18      	it	ne
 8005dfe:	2301      	movne	r3, #1
 8005e00:	0692      	lsls	r2, r2, #26
 8005e02:	d42b      	bmi.n	8005e5c <_printf_common+0xb0>
 8005e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e08:	4649      	mov	r1, r9
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c0      	blx	r8
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d01e      	beq.n	8005e50 <_printf_common+0xa4>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	68e5      	ldr	r5, [r4, #12]
 8005e16:	6832      	ldr	r2, [r6, #0]
 8005e18:	f003 0306 	and.w	r3, r3, #6
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	bf08      	it	eq
 8005e20:	1aad      	subeq	r5, r5, r2
 8005e22:	68a3      	ldr	r3, [r4, #8]
 8005e24:	6922      	ldr	r2, [r4, #16]
 8005e26:	bf0c      	ite	eq
 8005e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e2c:	2500      	movne	r5, #0
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	bfc4      	itt	gt
 8005e32:	1a9b      	subgt	r3, r3, r2
 8005e34:	18ed      	addgt	r5, r5, r3
 8005e36:	2600      	movs	r6, #0
 8005e38:	341a      	adds	r4, #26
 8005e3a:	42b5      	cmp	r5, r6
 8005e3c:	d11a      	bne.n	8005e74 <_printf_common+0xc8>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e008      	b.n	8005e54 <_printf_common+0xa8>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4652      	mov	r2, sl
 8005e46:	4649      	mov	r1, r9
 8005e48:	4638      	mov	r0, r7
 8005e4a:	47c0      	blx	r8
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d103      	bne.n	8005e58 <_printf_common+0xac>
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e58:	3501      	adds	r5, #1
 8005e5a:	e7c6      	b.n	8005dea <_printf_common+0x3e>
 8005e5c:	18e1      	adds	r1, r4, r3
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	2030      	movs	r0, #48	; 0x30
 8005e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e66:	4422      	add	r2, r4
 8005e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e70:	3302      	adds	r3, #2
 8005e72:	e7c7      	b.n	8005e04 <_printf_common+0x58>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4622      	mov	r2, r4
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c0      	blx	r8
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d0e6      	beq.n	8005e50 <_printf_common+0xa4>
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7d9      	b.n	8005e3a <_printf_common+0x8e>
	...

08005e88 <_printf_i>:
 8005e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	7e0f      	ldrb	r7, [r1, #24]
 8005e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e90:	2f78      	cmp	r7, #120	; 0x78
 8005e92:	4691      	mov	r9, r2
 8005e94:	4680      	mov	r8, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	469a      	mov	sl, r3
 8005e9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e9e:	d807      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ea0:	2f62      	cmp	r7, #98	; 0x62
 8005ea2:	d80a      	bhi.n	8005eba <_printf_i+0x32>
 8005ea4:	2f00      	cmp	r7, #0
 8005ea6:	f000 80d8 	beq.w	800605a <_printf_i+0x1d2>
 8005eaa:	2f58      	cmp	r7, #88	; 0x58
 8005eac:	f000 80a3 	beq.w	8005ff6 <_printf_i+0x16e>
 8005eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eb8:	e03a      	b.n	8005f30 <_printf_i+0xa8>
 8005eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ebe:	2b15      	cmp	r3, #21
 8005ec0:	d8f6      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ec2:	a101      	add	r1, pc, #4	; (adr r1, 8005ec8 <_printf_i+0x40>)
 8005ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f35 	.word	0x08005f35
 8005ed0:	08005eb1 	.word	0x08005eb1
 8005ed4:	08005eb1 	.word	0x08005eb1
 8005ed8:	08005eb1 	.word	0x08005eb1
 8005edc:	08005eb1 	.word	0x08005eb1
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	08005eb1 	.word	0x08005eb1
 8005ee8:	08005eb1 	.word	0x08005eb1
 8005eec:	08005eb1 	.word	0x08005eb1
 8005ef0:	08005eb1 	.word	0x08005eb1
 8005ef4:	08006041 	.word	0x08006041
 8005ef8:	08005f65 	.word	0x08005f65
 8005efc:	08006023 	.word	0x08006023
 8005f00:	08005eb1 	.word	0x08005eb1
 8005f04:	08005eb1 	.word	0x08005eb1
 8005f08:	08006063 	.word	0x08006063
 8005f0c:	08005eb1 	.word	0x08005eb1
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	08005eb1 	.word	0x08005eb1
 8005f18:	08005eb1 	.word	0x08005eb1
 8005f1c:	0800602b 	.word	0x0800602b
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	1d1a      	adds	r2, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	602a      	str	r2, [r5, #0]
 8005f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0a3      	b.n	800607c <_printf_i+0x1f4>
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	6829      	ldr	r1, [r5, #0]
 8005f38:	0606      	lsls	r6, r0, #24
 8005f3a:	f101 0304 	add.w	r3, r1, #4
 8005f3e:	d50a      	bpl.n	8005f56 <_printf_i+0xce>
 8005f40:	680e      	ldr	r6, [r1, #0]
 8005f42:	602b      	str	r3, [r5, #0]
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	da03      	bge.n	8005f50 <_printf_i+0xc8>
 8005f48:	232d      	movs	r3, #45	; 0x2d
 8005f4a:	4276      	negs	r6, r6
 8005f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f50:	485e      	ldr	r0, [pc, #376]	; (80060cc <_printf_i+0x244>)
 8005f52:	230a      	movs	r3, #10
 8005f54:	e019      	b.n	8005f8a <_printf_i+0x102>
 8005f56:	680e      	ldr	r6, [r1, #0]
 8005f58:	602b      	str	r3, [r5, #0]
 8005f5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f5e:	bf18      	it	ne
 8005f60:	b236      	sxthne	r6, r6
 8005f62:	e7ef      	b.n	8005f44 <_printf_i+0xbc>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	6820      	ldr	r0, [r4, #0]
 8005f68:	1d19      	adds	r1, r3, #4
 8005f6a:	6029      	str	r1, [r5, #0]
 8005f6c:	0601      	lsls	r1, r0, #24
 8005f6e:	d501      	bpl.n	8005f74 <_printf_i+0xec>
 8005f70:	681e      	ldr	r6, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <_printf_i+0xf2>
 8005f74:	0646      	lsls	r6, r0, #25
 8005f76:	d5fb      	bpl.n	8005f70 <_printf_i+0xe8>
 8005f78:	881e      	ldrh	r6, [r3, #0]
 8005f7a:	4854      	ldr	r0, [pc, #336]	; (80060cc <_printf_i+0x244>)
 8005f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f7e:	bf0c      	ite	eq
 8005f80:	2308      	moveq	r3, #8
 8005f82:	230a      	movne	r3, #10
 8005f84:	2100      	movs	r1, #0
 8005f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f8a:	6865      	ldr	r5, [r4, #4]
 8005f8c:	60a5      	str	r5, [r4, #8]
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	bfa2      	ittt	ge
 8005f92:	6821      	ldrge	r1, [r4, #0]
 8005f94:	f021 0104 	bicge.w	r1, r1, #4
 8005f98:	6021      	strge	r1, [r4, #0]
 8005f9a:	b90e      	cbnz	r6, 8005fa0 <_printf_i+0x118>
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	d04d      	beq.n	800603c <_printf_i+0x1b4>
 8005fa0:	4615      	mov	r5, r2
 8005fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8005faa:	5dc7      	ldrb	r7, [r0, r7]
 8005fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fb0:	4637      	mov	r7, r6
 8005fb2:	42bb      	cmp	r3, r7
 8005fb4:	460e      	mov	r6, r1
 8005fb6:	d9f4      	bls.n	8005fa2 <_printf_i+0x11a>
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d10b      	bne.n	8005fd4 <_printf_i+0x14c>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	07de      	lsls	r6, r3, #31
 8005fc0:	d508      	bpl.n	8005fd4 <_printf_i+0x14c>
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	6861      	ldr	r1, [r4, #4]
 8005fc6:	4299      	cmp	r1, r3
 8005fc8:	bfde      	ittt	le
 8005fca:	2330      	movle	r3, #48	; 0x30
 8005fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fd4:	1b52      	subs	r2, r2, r5
 8005fd6:	6122      	str	r2, [r4, #16]
 8005fd8:	f8cd a000 	str.w	sl, [sp]
 8005fdc:	464b      	mov	r3, r9
 8005fde:	aa03      	add	r2, sp, #12
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f7ff fee2 	bl	8005dac <_printf_common>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d14c      	bne.n	8006086 <_printf_i+0x1fe>
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	b004      	add	sp, #16
 8005ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff6:	4835      	ldr	r0, [pc, #212]	; (80060cc <_printf_i+0x244>)
 8005ff8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ffc:	6829      	ldr	r1, [r5, #0]
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	f851 6b04 	ldr.w	r6, [r1], #4
 8006004:	6029      	str	r1, [r5, #0]
 8006006:	061d      	lsls	r5, r3, #24
 8006008:	d514      	bpl.n	8006034 <_printf_i+0x1ac>
 800600a:	07df      	lsls	r7, r3, #31
 800600c:	bf44      	itt	mi
 800600e:	f043 0320 	orrmi.w	r3, r3, #32
 8006012:	6023      	strmi	r3, [r4, #0]
 8006014:	b91e      	cbnz	r6, 800601e <_printf_i+0x196>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f023 0320 	bic.w	r3, r3, #32
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	2310      	movs	r3, #16
 8006020:	e7b0      	b.n	8005f84 <_printf_i+0xfc>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	f043 0320 	orr.w	r3, r3, #32
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	2378      	movs	r3, #120	; 0x78
 800602c:	4828      	ldr	r0, [pc, #160]	; (80060d0 <_printf_i+0x248>)
 800602e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006032:	e7e3      	b.n	8005ffc <_printf_i+0x174>
 8006034:	0659      	lsls	r1, r3, #25
 8006036:	bf48      	it	mi
 8006038:	b2b6      	uxthmi	r6, r6
 800603a:	e7e6      	b.n	800600a <_printf_i+0x182>
 800603c:	4615      	mov	r5, r2
 800603e:	e7bb      	b.n	8005fb8 <_printf_i+0x130>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	6826      	ldr	r6, [r4, #0]
 8006044:	6961      	ldr	r1, [r4, #20]
 8006046:	1d18      	adds	r0, r3, #4
 8006048:	6028      	str	r0, [r5, #0]
 800604a:	0635      	lsls	r5, r6, #24
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	d501      	bpl.n	8006054 <_printf_i+0x1cc>
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	e002      	b.n	800605a <_printf_i+0x1d2>
 8006054:	0670      	lsls	r0, r6, #25
 8006056:	d5fb      	bpl.n	8006050 <_printf_i+0x1c8>
 8006058:	8019      	strh	r1, [r3, #0]
 800605a:	2300      	movs	r3, #0
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	4615      	mov	r5, r2
 8006060:	e7ba      	b.n	8005fd8 <_printf_i+0x150>
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	1d1a      	adds	r2, r3, #4
 8006066:	602a      	str	r2, [r5, #0]
 8006068:	681d      	ldr	r5, [r3, #0]
 800606a:	6862      	ldr	r2, [r4, #4]
 800606c:	2100      	movs	r1, #0
 800606e:	4628      	mov	r0, r5
 8006070:	f7fa f8b6 	bl	80001e0 <memchr>
 8006074:	b108      	cbz	r0, 800607a <_printf_i+0x1f2>
 8006076:	1b40      	subs	r0, r0, r5
 8006078:	6060      	str	r0, [r4, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	2300      	movs	r3, #0
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006084:	e7a8      	b.n	8005fd8 <_printf_i+0x150>
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	462a      	mov	r2, r5
 800608a:	4649      	mov	r1, r9
 800608c:	4640      	mov	r0, r8
 800608e:	47d0      	blx	sl
 8006090:	3001      	adds	r0, #1
 8006092:	d0ab      	beq.n	8005fec <_printf_i+0x164>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	079b      	lsls	r3, r3, #30
 8006098:	d413      	bmi.n	80060c2 <_printf_i+0x23a>
 800609a:	68e0      	ldr	r0, [r4, #12]
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	4298      	cmp	r0, r3
 80060a0:	bfb8      	it	lt
 80060a2:	4618      	movlt	r0, r3
 80060a4:	e7a4      	b.n	8005ff0 <_printf_i+0x168>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4632      	mov	r2, r6
 80060aa:	4649      	mov	r1, r9
 80060ac:	4640      	mov	r0, r8
 80060ae:	47d0      	blx	sl
 80060b0:	3001      	adds	r0, #1
 80060b2:	d09b      	beq.n	8005fec <_printf_i+0x164>
 80060b4:	3501      	adds	r5, #1
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	9903      	ldr	r1, [sp, #12]
 80060ba:	1a5b      	subs	r3, r3, r1
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dcf2      	bgt.n	80060a6 <_printf_i+0x21e>
 80060c0:	e7eb      	b.n	800609a <_printf_i+0x212>
 80060c2:	2500      	movs	r5, #0
 80060c4:	f104 0619 	add.w	r6, r4, #25
 80060c8:	e7f5      	b.n	80060b6 <_printf_i+0x22e>
 80060ca:	bf00      	nop
 80060cc:	080084ea 	.word	0x080084ea
 80060d0:	080084fb 	.word	0x080084fb

080060d4 <iprintf>:
 80060d4:	b40f      	push	{r0, r1, r2, r3}
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <iprintf+0x2c>)
 80060d8:	b513      	push	{r0, r1, r4, lr}
 80060da:	681c      	ldr	r4, [r3, #0]
 80060dc:	b124      	cbz	r4, 80060e8 <iprintf+0x14>
 80060de:	69a3      	ldr	r3, [r4, #24]
 80060e0:	b913      	cbnz	r3, 80060e8 <iprintf+0x14>
 80060e2:	4620      	mov	r0, r4
 80060e4:	f001 f8f0 	bl	80072c8 <__sinit>
 80060e8:	ab05      	add	r3, sp, #20
 80060ea:	9a04      	ldr	r2, [sp, #16]
 80060ec:	68a1      	ldr	r1, [r4, #8]
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	4620      	mov	r0, r4
 80060f2:	f001 fead 	bl	8007e50 <_vfiprintf_r>
 80060f6:	b002      	add	sp, #8
 80060f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fc:	b004      	add	sp, #16
 80060fe:	4770      	bx	lr
 8006100:	2000000c 	.word	0x2000000c

08006104 <putchar>:
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <putchar+0x28>)
 8006106:	b513      	push	{r0, r1, r4, lr}
 8006108:	681c      	ldr	r4, [r3, #0]
 800610a:	4601      	mov	r1, r0
 800610c:	b134      	cbz	r4, 800611c <putchar+0x18>
 800610e:	69a3      	ldr	r3, [r4, #24]
 8006110:	b923      	cbnz	r3, 800611c <putchar+0x18>
 8006112:	9001      	str	r0, [sp, #4]
 8006114:	4620      	mov	r0, r4
 8006116:	f001 f8d7 	bl	80072c8 <__sinit>
 800611a:	9901      	ldr	r1, [sp, #4]
 800611c:	68a2      	ldr	r2, [r4, #8]
 800611e:	4620      	mov	r0, r4
 8006120:	b002      	add	sp, #8
 8006122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006126:	f001 bfc3 	b.w	80080b0 <_putc_r>
 800612a:	bf00      	nop
 800612c:	2000000c 	.word	0x2000000c

08006130 <_puts_r>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	460e      	mov	r6, r1
 8006134:	4605      	mov	r5, r0
 8006136:	b118      	cbz	r0, 8006140 <_puts_r+0x10>
 8006138:	6983      	ldr	r3, [r0, #24]
 800613a:	b90b      	cbnz	r3, 8006140 <_puts_r+0x10>
 800613c:	f001 f8c4 	bl	80072c8 <__sinit>
 8006140:	69ab      	ldr	r3, [r5, #24]
 8006142:	68ac      	ldr	r4, [r5, #8]
 8006144:	b913      	cbnz	r3, 800614c <_puts_r+0x1c>
 8006146:	4628      	mov	r0, r5
 8006148:	f001 f8be 	bl	80072c8 <__sinit>
 800614c:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <_puts_r+0xd0>)
 800614e:	429c      	cmp	r4, r3
 8006150:	d120      	bne.n	8006194 <_puts_r+0x64>
 8006152:	686c      	ldr	r4, [r5, #4]
 8006154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006156:	07db      	lsls	r3, r3, #31
 8006158:	d405      	bmi.n	8006166 <_puts_r+0x36>
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	0598      	lsls	r0, r3, #22
 800615e:	d402      	bmi.n	8006166 <_puts_r+0x36>
 8006160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006162:	f001 f954 	bl	800740e <__retarget_lock_acquire_recursive>
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	0719      	lsls	r1, r3, #28
 800616a:	d51d      	bpl.n	80061a8 <_puts_r+0x78>
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	b1db      	cbz	r3, 80061a8 <_puts_r+0x78>
 8006170:	3e01      	subs	r6, #1
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006178:	3b01      	subs	r3, #1
 800617a:	60a3      	str	r3, [r4, #8]
 800617c:	bb39      	cbnz	r1, 80061ce <_puts_r+0x9e>
 800617e:	2b00      	cmp	r3, #0
 8006180:	da38      	bge.n	80061f4 <_puts_r+0xc4>
 8006182:	4622      	mov	r2, r4
 8006184:	210a      	movs	r1, #10
 8006186:	4628      	mov	r0, r5
 8006188:	f000 f848 	bl	800621c <__swbuf_r>
 800618c:	3001      	adds	r0, #1
 800618e:	d011      	beq.n	80061b4 <_puts_r+0x84>
 8006190:	250a      	movs	r5, #10
 8006192:	e011      	b.n	80061b8 <_puts_r+0x88>
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <_puts_r+0xd4>)
 8006196:	429c      	cmp	r4, r3
 8006198:	d101      	bne.n	800619e <_puts_r+0x6e>
 800619a:	68ac      	ldr	r4, [r5, #8]
 800619c:	e7da      	b.n	8006154 <_puts_r+0x24>
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <_puts_r+0xd8>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	bf08      	it	eq
 80061a4:	68ec      	ldreq	r4, [r5, #12]
 80061a6:	e7d5      	b.n	8006154 <_puts_r+0x24>
 80061a8:	4621      	mov	r1, r4
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 f888 	bl	80062c0 <__swsetup_r>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d0dd      	beq.n	8006170 <_puts_r+0x40>
 80061b4:	f04f 35ff 	mov.w	r5, #4294967295
 80061b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ba:	07da      	lsls	r2, r3, #31
 80061bc:	d405      	bmi.n	80061ca <_puts_r+0x9a>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	059b      	lsls	r3, r3, #22
 80061c2:	d402      	bmi.n	80061ca <_puts_r+0x9a>
 80061c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c6:	f001 f923 	bl	8007410 <__retarget_lock_release_recursive>
 80061ca:	4628      	mov	r0, r5
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da04      	bge.n	80061dc <_puts_r+0xac>
 80061d2:	69a2      	ldr	r2, [r4, #24]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	dc06      	bgt.n	80061e6 <_puts_r+0xb6>
 80061d8:	290a      	cmp	r1, #10
 80061da:	d004      	beq.n	80061e6 <_puts_r+0xb6>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	6022      	str	r2, [r4, #0]
 80061e2:	7019      	strb	r1, [r3, #0]
 80061e4:	e7c5      	b.n	8006172 <_puts_r+0x42>
 80061e6:	4622      	mov	r2, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 f817 	bl	800621c <__swbuf_r>
 80061ee:	3001      	adds	r0, #1
 80061f0:	d1bf      	bne.n	8006172 <_puts_r+0x42>
 80061f2:	e7df      	b.n	80061b4 <_puts_r+0x84>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	250a      	movs	r5, #10
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	6022      	str	r2, [r4, #0]
 80061fc:	701d      	strb	r5, [r3, #0]
 80061fe:	e7db      	b.n	80061b8 <_puts_r+0x88>
 8006200:	080085bc 	.word	0x080085bc
 8006204:	080085dc 	.word	0x080085dc
 8006208:	0800859c 	.word	0x0800859c

0800620c <puts>:
 800620c:	4b02      	ldr	r3, [pc, #8]	; (8006218 <puts+0xc>)
 800620e:	4601      	mov	r1, r0
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	f7ff bf8d 	b.w	8006130 <_puts_r>
 8006216:	bf00      	nop
 8006218:	2000000c 	.word	0x2000000c

0800621c <__swbuf_r>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	460e      	mov	r6, r1
 8006220:	4614      	mov	r4, r2
 8006222:	4605      	mov	r5, r0
 8006224:	b118      	cbz	r0, 800622e <__swbuf_r+0x12>
 8006226:	6983      	ldr	r3, [r0, #24]
 8006228:	b90b      	cbnz	r3, 800622e <__swbuf_r+0x12>
 800622a:	f001 f84d 	bl	80072c8 <__sinit>
 800622e:	4b21      	ldr	r3, [pc, #132]	; (80062b4 <__swbuf_r+0x98>)
 8006230:	429c      	cmp	r4, r3
 8006232:	d12b      	bne.n	800628c <__swbuf_r+0x70>
 8006234:	686c      	ldr	r4, [r5, #4]
 8006236:	69a3      	ldr	r3, [r4, #24]
 8006238:	60a3      	str	r3, [r4, #8]
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	071a      	lsls	r2, r3, #28
 800623e:	d52f      	bpl.n	80062a0 <__swbuf_r+0x84>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	b36b      	cbz	r3, 80062a0 <__swbuf_r+0x84>
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	6820      	ldr	r0, [r4, #0]
 8006248:	1ac0      	subs	r0, r0, r3
 800624a:	6963      	ldr	r3, [r4, #20]
 800624c:	b2f6      	uxtb	r6, r6
 800624e:	4283      	cmp	r3, r0
 8006250:	4637      	mov	r7, r6
 8006252:	dc04      	bgt.n	800625e <__swbuf_r+0x42>
 8006254:	4621      	mov	r1, r4
 8006256:	4628      	mov	r0, r5
 8006258:	f000 ffa2 	bl	80071a0 <_fflush_r>
 800625c:	bb30      	cbnz	r0, 80062ac <__swbuf_r+0x90>
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	3b01      	subs	r3, #1
 8006262:	60a3      	str	r3, [r4, #8]
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	6022      	str	r2, [r4, #0]
 800626a:	701e      	strb	r6, [r3, #0]
 800626c:	6963      	ldr	r3, [r4, #20]
 800626e:	3001      	adds	r0, #1
 8006270:	4283      	cmp	r3, r0
 8006272:	d004      	beq.n	800627e <__swbuf_r+0x62>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	07db      	lsls	r3, r3, #31
 8006278:	d506      	bpl.n	8006288 <__swbuf_r+0x6c>
 800627a:	2e0a      	cmp	r6, #10
 800627c:	d104      	bne.n	8006288 <__swbuf_r+0x6c>
 800627e:	4621      	mov	r1, r4
 8006280:	4628      	mov	r0, r5
 8006282:	f000 ff8d 	bl	80071a0 <_fflush_r>
 8006286:	b988      	cbnz	r0, 80062ac <__swbuf_r+0x90>
 8006288:	4638      	mov	r0, r7
 800628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800628c:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <__swbuf_r+0x9c>)
 800628e:	429c      	cmp	r4, r3
 8006290:	d101      	bne.n	8006296 <__swbuf_r+0x7a>
 8006292:	68ac      	ldr	r4, [r5, #8]
 8006294:	e7cf      	b.n	8006236 <__swbuf_r+0x1a>
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <__swbuf_r+0xa0>)
 8006298:	429c      	cmp	r4, r3
 800629a:	bf08      	it	eq
 800629c:	68ec      	ldreq	r4, [r5, #12]
 800629e:	e7ca      	b.n	8006236 <__swbuf_r+0x1a>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 f80c 	bl	80062c0 <__swsetup_r>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d0cb      	beq.n	8006244 <__swbuf_r+0x28>
 80062ac:	f04f 37ff 	mov.w	r7, #4294967295
 80062b0:	e7ea      	b.n	8006288 <__swbuf_r+0x6c>
 80062b2:	bf00      	nop
 80062b4:	080085bc 	.word	0x080085bc
 80062b8:	080085dc 	.word	0x080085dc
 80062bc:	0800859c 	.word	0x0800859c

080062c0 <__swsetup_r>:
 80062c0:	4b32      	ldr	r3, [pc, #200]	; (800638c <__swsetup_r+0xcc>)
 80062c2:	b570      	push	{r4, r5, r6, lr}
 80062c4:	681d      	ldr	r5, [r3, #0]
 80062c6:	4606      	mov	r6, r0
 80062c8:	460c      	mov	r4, r1
 80062ca:	b125      	cbz	r5, 80062d6 <__swsetup_r+0x16>
 80062cc:	69ab      	ldr	r3, [r5, #24]
 80062ce:	b913      	cbnz	r3, 80062d6 <__swsetup_r+0x16>
 80062d0:	4628      	mov	r0, r5
 80062d2:	f000 fff9 	bl	80072c8 <__sinit>
 80062d6:	4b2e      	ldr	r3, [pc, #184]	; (8006390 <__swsetup_r+0xd0>)
 80062d8:	429c      	cmp	r4, r3
 80062da:	d10f      	bne.n	80062fc <__swsetup_r+0x3c>
 80062dc:	686c      	ldr	r4, [r5, #4]
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e4:	0719      	lsls	r1, r3, #28
 80062e6:	d42c      	bmi.n	8006342 <__swsetup_r+0x82>
 80062e8:	06dd      	lsls	r5, r3, #27
 80062ea:	d411      	bmi.n	8006310 <__swsetup_r+0x50>
 80062ec:	2309      	movs	r3, #9
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	e03e      	b.n	800637a <__swsetup_r+0xba>
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <__swsetup_r+0xd4>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d101      	bne.n	8006306 <__swsetup_r+0x46>
 8006302:	68ac      	ldr	r4, [r5, #8]
 8006304:	e7eb      	b.n	80062de <__swsetup_r+0x1e>
 8006306:	4b24      	ldr	r3, [pc, #144]	; (8006398 <__swsetup_r+0xd8>)
 8006308:	429c      	cmp	r4, r3
 800630a:	bf08      	it	eq
 800630c:	68ec      	ldreq	r4, [r5, #12]
 800630e:	e7e6      	b.n	80062de <__swsetup_r+0x1e>
 8006310:	0758      	lsls	r0, r3, #29
 8006312:	d512      	bpl.n	800633a <__swsetup_r+0x7a>
 8006314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006316:	b141      	cbz	r1, 800632a <__swsetup_r+0x6a>
 8006318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800631c:	4299      	cmp	r1, r3
 800631e:	d002      	beq.n	8006326 <__swsetup_r+0x66>
 8006320:	4630      	mov	r0, r6
 8006322:	f001 fc8b 	bl	8007c3c <_free_r>
 8006326:	2300      	movs	r3, #0
 8006328:	6363      	str	r3, [r4, #52]	; 0x34
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	2300      	movs	r3, #0
 8006334:	6063      	str	r3, [r4, #4]
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f043 0308 	orr.w	r3, r3, #8
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	6923      	ldr	r3, [r4, #16]
 8006344:	b94b      	cbnz	r3, 800635a <__swsetup_r+0x9a>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800634c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006350:	d003      	beq.n	800635a <__swsetup_r+0x9a>
 8006352:	4621      	mov	r1, r4
 8006354:	4630      	mov	r0, r6
 8006356:	f001 f881 	bl	800745c <__smakebuf_r>
 800635a:	89a0      	ldrh	r0, [r4, #12]
 800635c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006360:	f010 0301 	ands.w	r3, r0, #1
 8006364:	d00a      	beq.n	800637c <__swsetup_r+0xbc>
 8006366:	2300      	movs	r3, #0
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	6963      	ldr	r3, [r4, #20]
 800636c:	425b      	negs	r3, r3
 800636e:	61a3      	str	r3, [r4, #24]
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	b943      	cbnz	r3, 8006386 <__swsetup_r+0xc6>
 8006374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006378:	d1ba      	bne.n	80062f0 <__swsetup_r+0x30>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	0781      	lsls	r1, r0, #30
 800637e:	bf58      	it	pl
 8006380:	6963      	ldrpl	r3, [r4, #20]
 8006382:	60a3      	str	r3, [r4, #8]
 8006384:	e7f4      	b.n	8006370 <__swsetup_r+0xb0>
 8006386:	2000      	movs	r0, #0
 8006388:	e7f7      	b.n	800637a <__swsetup_r+0xba>
 800638a:	bf00      	nop
 800638c:	2000000c 	.word	0x2000000c
 8006390:	080085bc 	.word	0x080085bc
 8006394:	080085dc 	.word	0x080085dc
 8006398:	0800859c 	.word	0x0800859c

0800639c <quorem>:
 800639c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	6903      	ldr	r3, [r0, #16]
 80063a2:	690c      	ldr	r4, [r1, #16]
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	4607      	mov	r7, r0
 80063a8:	f2c0 8081 	blt.w	80064ae <quorem+0x112>
 80063ac:	3c01      	subs	r4, #1
 80063ae:	f101 0814 	add.w	r8, r1, #20
 80063b2:	f100 0514 	add.w	r5, r0, #20
 80063b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c4:	3301      	adds	r3, #1
 80063c6:	429a      	cmp	r2, r3
 80063c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80063d4:	d331      	bcc.n	800643a <quorem+0x9e>
 80063d6:	f04f 0e00 	mov.w	lr, #0
 80063da:	4640      	mov	r0, r8
 80063dc:	46ac      	mov	ip, r5
 80063de:	46f2      	mov	sl, lr
 80063e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80063e4:	b293      	uxth	r3, r2
 80063e6:	fb06 e303 	mla	r3, r6, r3, lr
 80063ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ebaa 0303 	sub.w	r3, sl, r3
 80063f4:	f8dc a000 	ldr.w	sl, [ip]
 80063f8:	0c12      	lsrs	r2, r2, #16
 80063fa:	fa13 f38a 	uxtah	r3, r3, sl
 80063fe:	fb06 e202 	mla	r2, r6, r2, lr
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	9b00      	ldr	r3, [sp, #0]
 8006406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800640a:	b292      	uxth	r2, r2
 800640c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006414:	f8bd 3000 	ldrh.w	r3, [sp]
 8006418:	4581      	cmp	r9, r0
 800641a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800641e:	f84c 3b04 	str.w	r3, [ip], #4
 8006422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006426:	d2db      	bcs.n	80063e0 <quorem+0x44>
 8006428:	f855 300b 	ldr.w	r3, [r5, fp]
 800642c:	b92b      	cbnz	r3, 800643a <quorem+0x9e>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	3b04      	subs	r3, #4
 8006432:	429d      	cmp	r5, r3
 8006434:	461a      	mov	r2, r3
 8006436:	d32e      	bcc.n	8006496 <quorem+0xfa>
 8006438:	613c      	str	r4, [r7, #16]
 800643a:	4638      	mov	r0, r7
 800643c:	f001 fae6 	bl	8007a0c <__mcmp>
 8006440:	2800      	cmp	r0, #0
 8006442:	db24      	blt.n	800648e <quorem+0xf2>
 8006444:	3601      	adds	r6, #1
 8006446:	4628      	mov	r0, r5
 8006448:	f04f 0c00 	mov.w	ip, #0
 800644c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006450:	f8d0 e000 	ldr.w	lr, [r0]
 8006454:	b293      	uxth	r3, r2
 8006456:	ebac 0303 	sub.w	r3, ip, r3
 800645a:	0c12      	lsrs	r2, r2, #16
 800645c:	fa13 f38e 	uxtah	r3, r3, lr
 8006460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800646e:	45c1      	cmp	r9, r8
 8006470:	f840 3b04 	str.w	r3, [r0], #4
 8006474:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006478:	d2e8      	bcs.n	800644c <quorem+0xb0>
 800647a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800647e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006482:	b922      	cbnz	r2, 800648e <quorem+0xf2>
 8006484:	3b04      	subs	r3, #4
 8006486:	429d      	cmp	r5, r3
 8006488:	461a      	mov	r2, r3
 800648a:	d30a      	bcc.n	80064a2 <quorem+0x106>
 800648c:	613c      	str	r4, [r7, #16]
 800648e:	4630      	mov	r0, r6
 8006490:	b003      	add	sp, #12
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	3b04      	subs	r3, #4
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1cc      	bne.n	8006438 <quorem+0x9c>
 800649e:	3c01      	subs	r4, #1
 80064a0:	e7c7      	b.n	8006432 <quorem+0x96>
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	d1f0      	bne.n	800648c <quorem+0xf0>
 80064aa:	3c01      	subs	r4, #1
 80064ac:	e7eb      	b.n	8006486 <quorem+0xea>
 80064ae:	2000      	movs	r0, #0
 80064b0:	e7ee      	b.n	8006490 <quorem+0xf4>
 80064b2:	0000      	movs	r0, r0
 80064b4:	0000      	movs	r0, r0
	...

080064b8 <_dtoa_r>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ed2d 8b04 	vpush	{d8-d9}
 80064c0:	ec57 6b10 	vmov	r6, r7, d0
 80064c4:	b093      	sub	sp, #76	; 0x4c
 80064c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064cc:	9106      	str	r1, [sp, #24]
 80064ce:	ee10 aa10 	vmov	sl, s0
 80064d2:	4604      	mov	r4, r0
 80064d4:	9209      	str	r2, [sp, #36]	; 0x24
 80064d6:	930c      	str	r3, [sp, #48]	; 0x30
 80064d8:	46bb      	mov	fp, r7
 80064da:	b975      	cbnz	r5, 80064fa <_dtoa_r+0x42>
 80064dc:	2010      	movs	r0, #16
 80064de:	f000 fffd 	bl	80074dc <malloc>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6260      	str	r0, [r4, #36]	; 0x24
 80064e6:	b920      	cbnz	r0, 80064f2 <_dtoa_r+0x3a>
 80064e8:	4ba7      	ldr	r3, [pc, #668]	; (8006788 <_dtoa_r+0x2d0>)
 80064ea:	21ea      	movs	r1, #234	; 0xea
 80064ec:	48a7      	ldr	r0, [pc, #668]	; (800678c <_dtoa_r+0x2d4>)
 80064ee:	f001 fe8d 	bl	800820c <__assert_func>
 80064f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064f6:	6005      	str	r5, [r0, #0]
 80064f8:	60c5      	str	r5, [r0, #12]
 80064fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064fc:	6819      	ldr	r1, [r3, #0]
 80064fe:	b151      	cbz	r1, 8006516 <_dtoa_r+0x5e>
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	604a      	str	r2, [r1, #4]
 8006504:	2301      	movs	r3, #1
 8006506:	4093      	lsls	r3, r2
 8006508:	608b      	str	r3, [r1, #8]
 800650a:	4620      	mov	r0, r4
 800650c:	f001 f83c 	bl	8007588 <_Bfree>
 8006510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	1e3b      	subs	r3, r7, #0
 8006518:	bfaa      	itet	ge
 800651a:	2300      	movge	r3, #0
 800651c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006520:	f8c8 3000 	strge.w	r3, [r8]
 8006524:	4b9a      	ldr	r3, [pc, #616]	; (8006790 <_dtoa_r+0x2d8>)
 8006526:	bfbc      	itt	lt
 8006528:	2201      	movlt	r2, #1
 800652a:	f8c8 2000 	strlt.w	r2, [r8]
 800652e:	ea33 030b 	bics.w	r3, r3, fp
 8006532:	d11b      	bne.n	800656c <_dtoa_r+0xb4>
 8006534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006536:	f242 730f 	movw	r3, #9999	; 0x270f
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006540:	4333      	orrs	r3, r6
 8006542:	f000 8592 	beq.w	800706a <_dtoa_r+0xbb2>
 8006546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006548:	b963      	cbnz	r3, 8006564 <_dtoa_r+0xac>
 800654a:	4b92      	ldr	r3, [pc, #584]	; (8006794 <_dtoa_r+0x2dc>)
 800654c:	e022      	b.n	8006594 <_dtoa_r+0xdc>
 800654e:	4b92      	ldr	r3, [pc, #584]	; (8006798 <_dtoa_r+0x2e0>)
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	3308      	adds	r3, #8
 8006554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	9801      	ldr	r0, [sp, #4]
 800655a:	b013      	add	sp, #76	; 0x4c
 800655c:	ecbd 8b04 	vpop	{d8-d9}
 8006560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006564:	4b8b      	ldr	r3, [pc, #556]	; (8006794 <_dtoa_r+0x2dc>)
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	3303      	adds	r3, #3
 800656a:	e7f3      	b.n	8006554 <_dtoa_r+0x9c>
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4650      	mov	r0, sl
 8006572:	4659      	mov	r1, fp
 8006574:	f7fa faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006578:	ec4b ab19 	vmov	d9, sl, fp
 800657c:	4680      	mov	r8, r0
 800657e:	b158      	cbz	r0, 8006598 <_dtoa_r+0xe0>
 8006580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006582:	2301      	movs	r3, #1
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 856b 	beq.w	8007064 <_dtoa_r+0xbac>
 800658e:	4883      	ldr	r0, [pc, #524]	; (800679c <_dtoa_r+0x2e4>)
 8006590:	6018      	str	r0, [r3, #0]
 8006592:	1e43      	subs	r3, r0, #1
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	e7df      	b.n	8006558 <_dtoa_r+0xa0>
 8006598:	ec4b ab10 	vmov	d0, sl, fp
 800659c:	aa10      	add	r2, sp, #64	; 0x40
 800659e:	a911      	add	r1, sp, #68	; 0x44
 80065a0:	4620      	mov	r0, r4
 80065a2:	f001 fad9 	bl	8007b58 <__d2b>
 80065a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065aa:	ee08 0a10 	vmov	s16, r0
 80065ae:	2d00      	cmp	r5, #0
 80065b0:	f000 8084 	beq.w	80066bc <_dtoa_r+0x204>
 80065b4:	ee19 3a90 	vmov	r3, s19
 80065b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065c0:	4656      	mov	r6, sl
 80065c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065ce:	4b74      	ldr	r3, [pc, #464]	; (80067a0 <_dtoa_r+0x2e8>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	4630      	mov	r0, r6
 80065d4:	4639      	mov	r1, r7
 80065d6:	f7f9 fe57 	bl	8000288 <__aeabi_dsub>
 80065da:	a365      	add	r3, pc, #404	; (adr r3, 8006770 <_dtoa_r+0x2b8>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f7fa f80a 	bl	80005f8 <__aeabi_dmul>
 80065e4:	a364      	add	r3, pc, #400	; (adr r3, 8006778 <_dtoa_r+0x2c0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7f9 fe4f 	bl	800028c <__adddf3>
 80065ee:	4606      	mov	r6, r0
 80065f0:	4628      	mov	r0, r5
 80065f2:	460f      	mov	r7, r1
 80065f4:	f7f9 ff96 	bl	8000524 <__aeabi_i2d>
 80065f8:	a361      	add	r3, pc, #388	; (adr r3, 8006780 <_dtoa_r+0x2c8>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7f9 fffb 	bl	80005f8 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4630      	mov	r0, r6
 8006608:	4639      	mov	r1, r7
 800660a:	f7f9 fe3f 	bl	800028c <__adddf3>
 800660e:	4606      	mov	r6, r0
 8006610:	460f      	mov	r7, r1
 8006612:	f7fa faa1 	bl	8000b58 <__aeabi_d2iz>
 8006616:	2200      	movs	r2, #0
 8006618:	9000      	str	r0, [sp, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	f7fa fa5c 	bl	8000adc <__aeabi_dcmplt>
 8006624:	b150      	cbz	r0, 800663c <_dtoa_r+0x184>
 8006626:	9800      	ldr	r0, [sp, #0]
 8006628:	f7f9 ff7c 	bl	8000524 <__aeabi_i2d>
 800662c:	4632      	mov	r2, r6
 800662e:	463b      	mov	r3, r7
 8006630:	f7fa fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006634:	b910      	cbnz	r0, 800663c <_dtoa_r+0x184>
 8006636:	9b00      	ldr	r3, [sp, #0]
 8006638:	3b01      	subs	r3, #1
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	9b00      	ldr	r3, [sp, #0]
 800663e:	2b16      	cmp	r3, #22
 8006640:	d85a      	bhi.n	80066f8 <_dtoa_r+0x240>
 8006642:	9a00      	ldr	r2, [sp, #0]
 8006644:	4b57      	ldr	r3, [pc, #348]	; (80067a4 <_dtoa_r+0x2ec>)
 8006646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	ec51 0b19 	vmov	r0, r1, d9
 8006652:	f7fa fa43 	bl	8000adc <__aeabi_dcmplt>
 8006656:	2800      	cmp	r0, #0
 8006658:	d050      	beq.n	80066fc <_dtoa_r+0x244>
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	3b01      	subs	r3, #1
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2300      	movs	r3, #0
 8006662:	930b      	str	r3, [sp, #44]	; 0x2c
 8006664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006666:	1b5d      	subs	r5, r3, r5
 8006668:	1e6b      	subs	r3, r5, #1
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	bf45      	ittet	mi
 800666e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006672:	9304      	strmi	r3, [sp, #16]
 8006674:	2300      	movpl	r3, #0
 8006676:	2300      	movmi	r3, #0
 8006678:	bf4c      	ite	mi
 800667a:	9305      	strmi	r3, [sp, #20]
 800667c:	9304      	strpl	r3, [sp, #16]
 800667e:	9b00      	ldr	r3, [sp, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	db3d      	blt.n	8006700 <_dtoa_r+0x248>
 8006684:	9b05      	ldr	r3, [sp, #20]
 8006686:	9a00      	ldr	r2, [sp, #0]
 8006688:	920a      	str	r2, [sp, #40]	; 0x28
 800668a:	4413      	add	r3, r2
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	2300      	movs	r3, #0
 8006690:	9307      	str	r3, [sp, #28]
 8006692:	9b06      	ldr	r3, [sp, #24]
 8006694:	2b09      	cmp	r3, #9
 8006696:	f200 8089 	bhi.w	80067ac <_dtoa_r+0x2f4>
 800669a:	2b05      	cmp	r3, #5
 800669c:	bfc4      	itt	gt
 800669e:	3b04      	subgt	r3, #4
 80066a0:	9306      	strgt	r3, [sp, #24]
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	f1a3 0302 	sub.w	r3, r3, #2
 80066a8:	bfcc      	ite	gt
 80066aa:	2500      	movgt	r5, #0
 80066ac:	2501      	movle	r5, #1
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	f200 8087 	bhi.w	80067c2 <_dtoa_r+0x30a>
 80066b4:	e8df f003 	tbb	[pc, r3]
 80066b8:	59383a2d 	.word	0x59383a2d
 80066bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066c0:	441d      	add	r5, r3
 80066c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	bfc1      	itttt	gt
 80066ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80066d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066da:	bfda      	itte	le
 80066dc:	f1c3 0320 	rsble	r3, r3, #32
 80066e0:	fa06 f003 	lslle.w	r0, r6, r3
 80066e4:	4318      	orrgt	r0, r3
 80066e6:	f7f9 ff0d 	bl	8000504 <__aeabi_ui2d>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4606      	mov	r6, r0
 80066ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066f2:	3d01      	subs	r5, #1
 80066f4:	930e      	str	r3, [sp, #56]	; 0x38
 80066f6:	e76a      	b.n	80065ce <_dtoa_r+0x116>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e7b2      	b.n	8006662 <_dtoa_r+0x1aa>
 80066fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80066fe:	e7b1      	b.n	8006664 <_dtoa_r+0x1ac>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	9a00      	ldr	r2, [sp, #0]
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	9304      	str	r3, [sp, #16]
 8006708:	4253      	negs	r3, r2
 800670a:	9307      	str	r3, [sp, #28]
 800670c:	2300      	movs	r3, #0
 800670e:	930a      	str	r3, [sp, #40]	; 0x28
 8006710:	e7bf      	b.n	8006692 <_dtoa_r+0x1da>
 8006712:	2300      	movs	r3, #0
 8006714:	9308      	str	r3, [sp, #32]
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	dc55      	bgt.n	80067c8 <_dtoa_r+0x310>
 800671c:	2301      	movs	r3, #1
 800671e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006722:	461a      	mov	r2, r3
 8006724:	9209      	str	r2, [sp, #36]	; 0x24
 8006726:	e00c      	b.n	8006742 <_dtoa_r+0x28a>
 8006728:	2301      	movs	r3, #1
 800672a:	e7f3      	b.n	8006714 <_dtoa_r+0x25c>
 800672c:	2300      	movs	r3, #0
 800672e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006730:	9308      	str	r3, [sp, #32]
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	4413      	add	r3, r2
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	3301      	adds	r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	bfb8      	it	lt
 8006740:	2301      	movlt	r3, #1
 8006742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006744:	2200      	movs	r2, #0
 8006746:	6042      	str	r2, [r0, #4]
 8006748:	2204      	movs	r2, #4
 800674a:	f102 0614 	add.w	r6, r2, #20
 800674e:	429e      	cmp	r6, r3
 8006750:	6841      	ldr	r1, [r0, #4]
 8006752:	d93d      	bls.n	80067d0 <_dtoa_r+0x318>
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fed7 	bl	8007508 <_Balloc>
 800675a:	9001      	str	r0, [sp, #4]
 800675c:	2800      	cmp	r0, #0
 800675e:	d13b      	bne.n	80067d8 <_dtoa_r+0x320>
 8006760:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <_dtoa_r+0x2f0>)
 8006762:	4602      	mov	r2, r0
 8006764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006768:	e6c0      	b.n	80064ec <_dtoa_r+0x34>
 800676a:	2301      	movs	r3, #1
 800676c:	e7df      	b.n	800672e <_dtoa_r+0x276>
 800676e:	bf00      	nop
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	08008519 	.word	0x08008519
 800678c:	08008530 	.word	0x08008530
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	08008515 	.word	0x08008515
 8006798:	0800850c 	.word	0x0800850c
 800679c:	080084e9 	.word	0x080084e9
 80067a0:	3ff80000 	.word	0x3ff80000
 80067a4:	08008680 	.word	0x08008680
 80067a8:	0800858b 	.word	0x0800858b
 80067ac:	2501      	movs	r5, #1
 80067ae:	2300      	movs	r3, #0
 80067b0:	9306      	str	r3, [sp, #24]
 80067b2:	9508      	str	r5, [sp, #32]
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
 80067b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	2312      	movs	r3, #18
 80067c0:	e7b0      	b.n	8006724 <_dtoa_r+0x26c>
 80067c2:	2301      	movs	r3, #1
 80067c4:	9308      	str	r3, [sp, #32]
 80067c6:	e7f5      	b.n	80067b4 <_dtoa_r+0x2fc>
 80067c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ce:	e7b8      	b.n	8006742 <_dtoa_r+0x28a>
 80067d0:	3101      	adds	r1, #1
 80067d2:	6041      	str	r1, [r0, #4]
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	e7b8      	b.n	800674a <_dtoa_r+0x292>
 80067d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	2b0e      	cmp	r3, #14
 80067e2:	f200 809d 	bhi.w	8006920 <_dtoa_r+0x468>
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	f000 809a 	beq.w	8006920 <_dtoa_r+0x468>
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dd32      	ble.n	8006858 <_dtoa_r+0x3a0>
 80067f2:	4ab7      	ldr	r2, [pc, #732]	; (8006ad0 <_dtoa_r+0x618>)
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	05d8      	lsls	r0, r3, #23
 8006804:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006808:	d516      	bpl.n	8006838 <_dtoa_r+0x380>
 800680a:	4bb2      	ldr	r3, [pc, #712]	; (8006ad4 <_dtoa_r+0x61c>)
 800680c:	ec51 0b19 	vmov	r0, r1, d9
 8006810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006814:	f7fa f81a 	bl	800084c <__aeabi_ddiv>
 8006818:	f007 070f 	and.w	r7, r7, #15
 800681c:	4682      	mov	sl, r0
 800681e:	468b      	mov	fp, r1
 8006820:	2503      	movs	r5, #3
 8006822:	4eac      	ldr	r6, [pc, #688]	; (8006ad4 <_dtoa_r+0x61c>)
 8006824:	b957      	cbnz	r7, 800683c <_dtoa_r+0x384>
 8006826:	4642      	mov	r2, r8
 8006828:	464b      	mov	r3, r9
 800682a:	4650      	mov	r0, sl
 800682c:	4659      	mov	r1, fp
 800682e:	f7fa f80d 	bl	800084c <__aeabi_ddiv>
 8006832:	4682      	mov	sl, r0
 8006834:	468b      	mov	fp, r1
 8006836:	e028      	b.n	800688a <_dtoa_r+0x3d2>
 8006838:	2502      	movs	r5, #2
 800683a:	e7f2      	b.n	8006822 <_dtoa_r+0x36a>
 800683c:	07f9      	lsls	r1, r7, #31
 800683e:	d508      	bpl.n	8006852 <_dtoa_r+0x39a>
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	3501      	adds	r5, #1
 800684e:	4680      	mov	r8, r0
 8006850:	4689      	mov	r9, r1
 8006852:	107f      	asrs	r7, r7, #1
 8006854:	3608      	adds	r6, #8
 8006856:	e7e5      	b.n	8006824 <_dtoa_r+0x36c>
 8006858:	f000 809b 	beq.w	8006992 <_dtoa_r+0x4da>
 800685c:	9b00      	ldr	r3, [sp, #0]
 800685e:	4f9d      	ldr	r7, [pc, #628]	; (8006ad4 <_dtoa_r+0x61c>)
 8006860:	425e      	negs	r6, r3
 8006862:	4b9b      	ldr	r3, [pc, #620]	; (8006ad0 <_dtoa_r+0x618>)
 8006864:	f006 020f 	and.w	r2, r6, #15
 8006868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	ec51 0b19 	vmov	r0, r1, d9
 8006874:	f7f9 fec0 	bl	80005f8 <__aeabi_dmul>
 8006878:	1136      	asrs	r6, r6, #4
 800687a:	4682      	mov	sl, r0
 800687c:	468b      	mov	fp, r1
 800687e:	2300      	movs	r3, #0
 8006880:	2502      	movs	r5, #2
 8006882:	2e00      	cmp	r6, #0
 8006884:	d17a      	bne.n	800697c <_dtoa_r+0x4c4>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1d3      	bne.n	8006832 <_dtoa_r+0x37a>
 800688a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8082 	beq.w	8006996 <_dtoa_r+0x4de>
 8006892:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <_dtoa_r+0x620>)
 8006894:	2200      	movs	r2, #0
 8006896:	4650      	mov	r0, sl
 8006898:	4659      	mov	r1, fp
 800689a:	f7fa f91f 	bl	8000adc <__aeabi_dcmplt>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d079      	beq.n	8006996 <_dtoa_r+0x4de>
 80068a2:	9b03      	ldr	r3, [sp, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d076      	beq.n	8006996 <_dtoa_r+0x4de>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dd36      	ble.n	800691c <_dtoa_r+0x464>
 80068ae:	9b00      	ldr	r3, [sp, #0]
 80068b0:	4650      	mov	r0, sl
 80068b2:	4659      	mov	r1, fp
 80068b4:	1e5f      	subs	r7, r3, #1
 80068b6:	2200      	movs	r2, #0
 80068b8:	4b88      	ldr	r3, [pc, #544]	; (8006adc <_dtoa_r+0x624>)
 80068ba:	f7f9 fe9d 	bl	80005f8 <__aeabi_dmul>
 80068be:	9e02      	ldr	r6, [sp, #8]
 80068c0:	4682      	mov	sl, r0
 80068c2:	468b      	mov	fp, r1
 80068c4:	3501      	adds	r5, #1
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7f9 fe2c 	bl	8000524 <__aeabi_i2d>
 80068cc:	4652      	mov	r2, sl
 80068ce:	465b      	mov	r3, fp
 80068d0:	f7f9 fe92 	bl	80005f8 <__aeabi_dmul>
 80068d4:	4b82      	ldr	r3, [pc, #520]	; (8006ae0 <_dtoa_r+0x628>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	f7f9 fcd8 	bl	800028c <__adddf3>
 80068dc:	46d0      	mov	r8, sl
 80068de:	46d9      	mov	r9, fp
 80068e0:	4682      	mov	sl, r0
 80068e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	d158      	bne.n	800699c <_dtoa_r+0x4e4>
 80068ea:	4b7e      	ldr	r3, [pc, #504]	; (8006ae4 <_dtoa_r+0x62c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	4640      	mov	r0, r8
 80068f0:	4649      	mov	r1, r9
 80068f2:	f7f9 fcc9 	bl	8000288 <__aeabi_dsub>
 80068f6:	4652      	mov	r2, sl
 80068f8:	465b      	mov	r3, fp
 80068fa:	4680      	mov	r8, r0
 80068fc:	4689      	mov	r9, r1
 80068fe:	f7fa f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8006902:	2800      	cmp	r0, #0
 8006904:	f040 8295 	bne.w	8006e32 <_dtoa_r+0x97a>
 8006908:	4652      	mov	r2, sl
 800690a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800690e:	4640      	mov	r0, r8
 8006910:	4649      	mov	r1, r9
 8006912:	f7fa f8e3 	bl	8000adc <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	f040 8289 	bne.w	8006e2e <_dtoa_r+0x976>
 800691c:	ec5b ab19 	vmov	sl, fp, d9
 8006920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006922:	2b00      	cmp	r3, #0
 8006924:	f2c0 8148 	blt.w	8006bb8 <_dtoa_r+0x700>
 8006928:	9a00      	ldr	r2, [sp, #0]
 800692a:	2a0e      	cmp	r2, #14
 800692c:	f300 8144 	bgt.w	8006bb8 <_dtoa_r+0x700>
 8006930:	4b67      	ldr	r3, [pc, #412]	; (8006ad0 <_dtoa_r+0x618>)
 8006932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800693a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	f280 80d5 	bge.w	8006aec <_dtoa_r+0x634>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f300 80d1 	bgt.w	8006aec <_dtoa_r+0x634>
 800694a:	f040 826f 	bne.w	8006e2c <_dtoa_r+0x974>
 800694e:	4b65      	ldr	r3, [pc, #404]	; (8006ae4 <_dtoa_r+0x62c>)
 8006950:	2200      	movs	r2, #0
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7f9 fe4f 	bl	80005f8 <__aeabi_dmul>
 800695a:	4652      	mov	r2, sl
 800695c:	465b      	mov	r3, fp
 800695e:	f7fa f8d1 	bl	8000b04 <__aeabi_dcmpge>
 8006962:	9e03      	ldr	r6, [sp, #12]
 8006964:	4637      	mov	r7, r6
 8006966:	2800      	cmp	r0, #0
 8006968:	f040 8245 	bne.w	8006df6 <_dtoa_r+0x93e>
 800696c:	9d01      	ldr	r5, [sp, #4]
 800696e:	2331      	movs	r3, #49	; 0x31
 8006970:	f805 3b01 	strb.w	r3, [r5], #1
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	e240      	b.n	8006dfe <_dtoa_r+0x946>
 800697c:	07f2      	lsls	r2, r6, #31
 800697e:	d505      	bpl.n	800698c <_dtoa_r+0x4d4>
 8006980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006984:	f7f9 fe38 	bl	80005f8 <__aeabi_dmul>
 8006988:	3501      	adds	r5, #1
 800698a:	2301      	movs	r3, #1
 800698c:	1076      	asrs	r6, r6, #1
 800698e:	3708      	adds	r7, #8
 8006990:	e777      	b.n	8006882 <_dtoa_r+0x3ca>
 8006992:	2502      	movs	r5, #2
 8006994:	e779      	b.n	800688a <_dtoa_r+0x3d2>
 8006996:	9f00      	ldr	r7, [sp, #0]
 8006998:	9e03      	ldr	r6, [sp, #12]
 800699a:	e794      	b.n	80068c6 <_dtoa_r+0x40e>
 800699c:	9901      	ldr	r1, [sp, #4]
 800699e:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <_dtoa_r+0x618>)
 80069a0:	4431      	add	r1, r6
 80069a2:	910d      	str	r1, [sp, #52]	; 0x34
 80069a4:	9908      	ldr	r1, [sp, #32]
 80069a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069ae:	2900      	cmp	r1, #0
 80069b0:	d043      	beq.n	8006a3a <_dtoa_r+0x582>
 80069b2:	494d      	ldr	r1, [pc, #308]	; (8006ae8 <_dtoa_r+0x630>)
 80069b4:	2000      	movs	r0, #0
 80069b6:	f7f9 ff49 	bl	800084c <__aeabi_ddiv>
 80069ba:	4652      	mov	r2, sl
 80069bc:	465b      	mov	r3, fp
 80069be:	f7f9 fc63 	bl	8000288 <__aeabi_dsub>
 80069c2:	9d01      	ldr	r5, [sp, #4]
 80069c4:	4682      	mov	sl, r0
 80069c6:	468b      	mov	fp, r1
 80069c8:	4649      	mov	r1, r9
 80069ca:	4640      	mov	r0, r8
 80069cc:	f7fa f8c4 	bl	8000b58 <__aeabi_d2iz>
 80069d0:	4606      	mov	r6, r0
 80069d2:	f7f9 fda7 	bl	8000524 <__aeabi_i2d>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fc53 	bl	8000288 <__aeabi_dsub>
 80069e2:	3630      	adds	r6, #48	; 0x30
 80069e4:	f805 6b01 	strb.w	r6, [r5], #1
 80069e8:	4652      	mov	r2, sl
 80069ea:	465b      	mov	r3, fp
 80069ec:	4680      	mov	r8, r0
 80069ee:	4689      	mov	r9, r1
 80069f0:	f7fa f874 	bl	8000adc <__aeabi_dcmplt>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d163      	bne.n	8006ac0 <_dtoa_r+0x608>
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	4936      	ldr	r1, [pc, #216]	; (8006ad8 <_dtoa_r+0x620>)
 80069fe:	2000      	movs	r0, #0
 8006a00:	f7f9 fc42 	bl	8000288 <__aeabi_dsub>
 8006a04:	4652      	mov	r2, sl
 8006a06:	465b      	mov	r3, fp
 8006a08:	f7fa f868 	bl	8000adc <__aeabi_dcmplt>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f040 80b5 	bne.w	8006b7c <_dtoa_r+0x6c4>
 8006a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a14:	429d      	cmp	r5, r3
 8006a16:	d081      	beq.n	800691c <_dtoa_r+0x464>
 8006a18:	4b30      	ldr	r3, [pc, #192]	; (8006adc <_dtoa_r+0x624>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	4659      	mov	r1, fp
 8006a20:	f7f9 fdea 	bl	80005f8 <__aeabi_dmul>
 8006a24:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <_dtoa_r+0x624>)
 8006a26:	4682      	mov	sl, r0
 8006a28:	468b      	mov	fp, r1
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f7f9 fde2 	bl	80005f8 <__aeabi_dmul>
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	e7c6      	b.n	80069c8 <_dtoa_r+0x510>
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	f7f9 fddb 	bl	80005f8 <__aeabi_dmul>
 8006a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a44:	9d01      	ldr	r5, [sp, #4]
 8006a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a48:	4682      	mov	sl, r0
 8006a4a:	468b      	mov	fp, r1
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7fa f882 	bl	8000b58 <__aeabi_d2iz>
 8006a54:	4606      	mov	r6, r0
 8006a56:	f7f9 fd65 	bl	8000524 <__aeabi_i2d>
 8006a5a:	3630      	adds	r6, #48	; 0x30
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7f9 fc10 	bl	8000288 <__aeabi_dsub>
 8006a68:	f805 6b01 	strb.w	r6, [r5], #1
 8006a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	4680      	mov	r8, r0
 8006a72:	4689      	mov	r9, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	d124      	bne.n	8006ac4 <_dtoa_r+0x60c>
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <_dtoa_r+0x630>)
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	4659      	mov	r1, fp
 8006a80:	f7f9 fc04 	bl	800028c <__adddf3>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7fa f844 	bl	8000b18 <__aeabi_dcmpgt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d173      	bne.n	8006b7c <_dtoa_r+0x6c4>
 8006a94:	4652      	mov	r2, sl
 8006a96:	465b      	mov	r3, fp
 8006a98:	4913      	ldr	r1, [pc, #76]	; (8006ae8 <_dtoa_r+0x630>)
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7f9 fbf4 	bl	8000288 <__aeabi_dsub>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	f7fa f818 	bl	8000adc <__aeabi_dcmplt>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f43f af35 	beq.w	800691c <_dtoa_r+0x464>
 8006ab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ab4:	1e6b      	subs	r3, r5, #1
 8006ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006abc:	2b30      	cmp	r3, #48	; 0x30
 8006abe:	d0f8      	beq.n	8006ab2 <_dtoa_r+0x5fa>
 8006ac0:	9700      	str	r7, [sp, #0]
 8006ac2:	e049      	b.n	8006b58 <_dtoa_r+0x6a0>
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <_dtoa_r+0x624>)
 8006ac6:	f7f9 fd97 	bl	80005f8 <__aeabi_dmul>
 8006aca:	4680      	mov	r8, r0
 8006acc:	4689      	mov	r9, r1
 8006ace:	e7bd      	b.n	8006a4c <_dtoa_r+0x594>
 8006ad0:	08008680 	.word	0x08008680
 8006ad4:	08008658 	.word	0x08008658
 8006ad8:	3ff00000 	.word	0x3ff00000
 8006adc:	40240000 	.word	0x40240000
 8006ae0:	401c0000 	.word	0x401c0000
 8006ae4:	40140000 	.word	0x40140000
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	9d01      	ldr	r5, [sp, #4]
 8006aee:	4656      	mov	r6, sl
 8006af0:	465f      	mov	r7, fp
 8006af2:	4642      	mov	r2, r8
 8006af4:	464b      	mov	r3, r9
 8006af6:	4630      	mov	r0, r6
 8006af8:	4639      	mov	r1, r7
 8006afa:	f7f9 fea7 	bl	800084c <__aeabi_ddiv>
 8006afe:	f7fa f82b 	bl	8000b58 <__aeabi_d2iz>
 8006b02:	4682      	mov	sl, r0
 8006b04:	f7f9 fd0e 	bl	8000524 <__aeabi_i2d>
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	f7f9 fd74 	bl	80005f8 <__aeabi_dmul>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b1c:	f7f9 fbb4 	bl	8000288 <__aeabi_dsub>
 8006b20:	f805 6b01 	strb.w	r6, [r5], #1
 8006b24:	9e01      	ldr	r6, [sp, #4]
 8006b26:	9f03      	ldr	r7, [sp, #12]
 8006b28:	1bae      	subs	r6, r5, r6
 8006b2a:	42b7      	cmp	r7, r6
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	d135      	bne.n	8006b9e <_dtoa_r+0x6e6>
 8006b32:	f7f9 fbab 	bl	800028c <__adddf3>
 8006b36:	4642      	mov	r2, r8
 8006b38:	464b      	mov	r3, r9
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	f7f9 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 8006b42:	b9d0      	cbnz	r0, 8006b7a <_dtoa_r+0x6c2>
 8006b44:	4642      	mov	r2, r8
 8006b46:	464b      	mov	r3, r9
 8006b48:	4630      	mov	r0, r6
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	f7f9 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b50:	b110      	cbz	r0, 8006b58 <_dtoa_r+0x6a0>
 8006b52:	f01a 0f01 	tst.w	sl, #1
 8006b56:	d110      	bne.n	8006b7a <_dtoa_r+0x6c2>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	ee18 1a10 	vmov	r1, s16
 8006b5e:	f000 fd13 	bl	8007588 <_Bfree>
 8006b62:	2300      	movs	r3, #0
 8006b64:	9800      	ldr	r0, [sp, #0]
 8006b66:	702b      	strb	r3, [r5, #0]
 8006b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	6018      	str	r0, [r3, #0]
 8006b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f43f acf1 	beq.w	8006558 <_dtoa_r+0xa0>
 8006b76:	601d      	str	r5, [r3, #0]
 8006b78:	e4ee      	b.n	8006558 <_dtoa_r+0xa0>
 8006b7a:	9f00      	ldr	r7, [sp, #0]
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	461d      	mov	r5, r3
 8006b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b84:	2a39      	cmp	r2, #57	; 0x39
 8006b86:	d106      	bne.n	8006b96 <_dtoa_r+0x6de>
 8006b88:	9a01      	ldr	r2, [sp, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d1f7      	bne.n	8006b7e <_dtoa_r+0x6c6>
 8006b8e:	9901      	ldr	r1, [sp, #4]
 8006b90:	2230      	movs	r2, #48	; 0x30
 8006b92:	3701      	adds	r7, #1
 8006b94:	700a      	strb	r2, [r1, #0]
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	3201      	adds	r2, #1
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e790      	b.n	8006ac0 <_dtoa_r+0x608>
 8006b9e:	4ba6      	ldr	r3, [pc, #664]	; (8006e38 <_dtoa_r+0x980>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f7f9 fd29 	bl	80005f8 <__aeabi_dmul>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4606      	mov	r6, r0
 8006bac:	460f      	mov	r7, r1
 8006bae:	f7f9 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d09d      	beq.n	8006af2 <_dtoa_r+0x63a>
 8006bb6:	e7cf      	b.n	8006b58 <_dtoa_r+0x6a0>
 8006bb8:	9a08      	ldr	r2, [sp, #32]
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	f000 80d7 	beq.w	8006d6e <_dtoa_r+0x8b6>
 8006bc0:	9a06      	ldr	r2, [sp, #24]
 8006bc2:	2a01      	cmp	r2, #1
 8006bc4:	f300 80ba 	bgt.w	8006d3c <_dtoa_r+0x884>
 8006bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	f000 80b2 	beq.w	8006d34 <_dtoa_r+0x87c>
 8006bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bd4:	9e07      	ldr	r6, [sp, #28]
 8006bd6:	9d04      	ldr	r5, [sp, #16]
 8006bd8:	9a04      	ldr	r2, [sp, #16]
 8006bda:	441a      	add	r2, r3
 8006bdc:	9204      	str	r2, [sp, #16]
 8006bde:	9a05      	ldr	r2, [sp, #20]
 8006be0:	2101      	movs	r1, #1
 8006be2:	441a      	add	r2, r3
 8006be4:	4620      	mov	r0, r4
 8006be6:	9205      	str	r2, [sp, #20]
 8006be8:	f000 fd86 	bl	80076f8 <__i2b>
 8006bec:	4607      	mov	r7, r0
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	dd0c      	ble.n	8006c0c <_dtoa_r+0x754>
 8006bf2:	9b05      	ldr	r3, [sp, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dd09      	ble.n	8006c0c <_dtoa_r+0x754>
 8006bf8:	42ab      	cmp	r3, r5
 8006bfa:	9a04      	ldr	r2, [sp, #16]
 8006bfc:	bfa8      	it	ge
 8006bfe:	462b      	movge	r3, r5
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	9204      	str	r2, [sp, #16]
 8006c04:	9a05      	ldr	r2, [sp, #20]
 8006c06:	1aed      	subs	r5, r5, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	b31b      	cbz	r3, 8006c58 <_dtoa_r+0x7a0>
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 80af 	beq.w	8006d76 <_dtoa_r+0x8be>
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	dd13      	ble.n	8006c44 <_dtoa_r+0x78c>
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	4632      	mov	r2, r6
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fe29 	bl	8007878 <__pow5mult>
 8006c26:	ee18 2a10 	vmov	r2, s16
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fd78 	bl	8007724 <__multiply>
 8006c34:	ee18 1a10 	vmov	r1, s16
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fca4 	bl	8007588 <_Bfree>
 8006c40:	ee08 8a10 	vmov	s16, r8
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	1b9a      	subs	r2, r3, r6
 8006c48:	d006      	beq.n	8006c58 <_dtoa_r+0x7a0>
 8006c4a:	ee18 1a10 	vmov	r1, s16
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 fe12 	bl	8007878 <__pow5mult>
 8006c54:	ee08 0a10 	vmov	s16, r0
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fd4c 	bl	80076f8 <__i2b>
 8006c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	4606      	mov	r6, r0
 8006c66:	f340 8088 	ble.w	8006d7a <_dtoa_r+0x8c2>
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 fe02 	bl	8007878 <__pow5mult>
 8006c74:	9b06      	ldr	r3, [sp, #24]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	4606      	mov	r6, r0
 8006c7a:	f340 8081 	ble.w	8006d80 <_dtoa_r+0x8c8>
 8006c7e:	f04f 0800 	mov.w	r8, #0
 8006c82:	6933      	ldr	r3, [r6, #16]
 8006c84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c88:	6918      	ldr	r0, [r3, #16]
 8006c8a:	f000 fce5 	bl	8007658 <__hi0bits>
 8006c8e:	f1c0 0020 	rsb	r0, r0, #32
 8006c92:	9b05      	ldr	r3, [sp, #20]
 8006c94:	4418      	add	r0, r3
 8006c96:	f010 001f 	ands.w	r0, r0, #31
 8006c9a:	f000 8092 	beq.w	8006dc2 <_dtoa_r+0x90a>
 8006c9e:	f1c0 0320 	rsb	r3, r0, #32
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	f340 808a 	ble.w	8006dbc <_dtoa_r+0x904>
 8006ca8:	f1c0 001c 	rsb	r0, r0, #28
 8006cac:	9b04      	ldr	r3, [sp, #16]
 8006cae:	4403      	add	r3, r0
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	4403      	add	r3, r0
 8006cb6:	4405      	add	r5, r0
 8006cb8:	9305      	str	r3, [sp, #20]
 8006cba:	9b04      	ldr	r3, [sp, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dd07      	ble.n	8006cd0 <_dtoa_r+0x818>
 8006cc0:	ee18 1a10 	vmov	r1, s16
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 fe30 	bl	800792c <__lshift>
 8006ccc:	ee08 0a10 	vmov	s16, r0
 8006cd0:	9b05      	ldr	r3, [sp, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd05      	ble.n	8006ce2 <_dtoa_r+0x82a>
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fe26 	bl	800792c <__lshift>
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d06e      	beq.n	8006dc6 <_dtoa_r+0x90e>
 8006ce8:	ee18 0a10 	vmov	r0, s16
 8006cec:	4631      	mov	r1, r6
 8006cee:	f000 fe8d 	bl	8007a0c <__mcmp>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	da67      	bge.n	8006dc6 <_dtoa_r+0x90e>
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	ee18 1a10 	vmov	r1, s16
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	220a      	movs	r2, #10
 8006d02:	2300      	movs	r3, #0
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fc61 	bl	80075cc <__multadd>
 8006d0a:	9b08      	ldr	r3, [sp, #32]
 8006d0c:	ee08 0a10 	vmov	s16, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 81b1 	beq.w	8007078 <_dtoa_r+0xbc0>
 8006d16:	2300      	movs	r3, #0
 8006d18:	4639      	mov	r1, r7
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 fc55 	bl	80075cc <__multadd>
 8006d22:	9b02      	ldr	r3, [sp, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	4607      	mov	r7, r0
 8006d28:	f300 808e 	bgt.w	8006e48 <_dtoa_r+0x990>
 8006d2c:	9b06      	ldr	r3, [sp, #24]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	dc51      	bgt.n	8006dd6 <_dtoa_r+0x91e>
 8006d32:	e089      	b.n	8006e48 <_dtoa_r+0x990>
 8006d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d3a:	e74b      	b.n	8006bd4 <_dtoa_r+0x71c>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	1e5e      	subs	r6, r3, #1
 8006d40:	9b07      	ldr	r3, [sp, #28]
 8006d42:	42b3      	cmp	r3, r6
 8006d44:	bfbf      	itttt	lt
 8006d46:	9b07      	ldrlt	r3, [sp, #28]
 8006d48:	9607      	strlt	r6, [sp, #28]
 8006d4a:	1af2      	sublt	r2, r6, r3
 8006d4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d4e:	bfb6      	itet	lt
 8006d50:	189b      	addlt	r3, r3, r2
 8006d52:	1b9e      	subge	r6, r3, r6
 8006d54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	bfb8      	it	lt
 8006d5a:	2600      	movlt	r6, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfb7      	itett	lt
 8006d60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d68:	1a9d      	sublt	r5, r3, r2
 8006d6a:	2300      	movlt	r3, #0
 8006d6c:	e734      	b.n	8006bd8 <_dtoa_r+0x720>
 8006d6e:	9e07      	ldr	r6, [sp, #28]
 8006d70:	9d04      	ldr	r5, [sp, #16]
 8006d72:	9f08      	ldr	r7, [sp, #32]
 8006d74:	e73b      	b.n	8006bee <_dtoa_r+0x736>
 8006d76:	9a07      	ldr	r2, [sp, #28]
 8006d78:	e767      	b.n	8006c4a <_dtoa_r+0x792>
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	dc18      	bgt.n	8006db2 <_dtoa_r+0x8fa>
 8006d80:	f1ba 0f00 	cmp.w	sl, #0
 8006d84:	d115      	bne.n	8006db2 <_dtoa_r+0x8fa>
 8006d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d8a:	b993      	cbnz	r3, 8006db2 <_dtoa_r+0x8fa>
 8006d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d90:	0d1b      	lsrs	r3, r3, #20
 8006d92:	051b      	lsls	r3, r3, #20
 8006d94:	b183      	cbz	r3, 8006db8 <_dtoa_r+0x900>
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	9b05      	ldr	r3, [sp, #20]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	9305      	str	r3, [sp, #20]
 8006da2:	f04f 0801 	mov.w	r8, #1
 8006da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f47f af6a 	bne.w	8006c82 <_dtoa_r+0x7ca>
 8006dae:	2001      	movs	r0, #1
 8006db0:	e76f      	b.n	8006c92 <_dtoa_r+0x7da>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	e7f6      	b.n	8006da6 <_dtoa_r+0x8ee>
 8006db8:	4698      	mov	r8, r3
 8006dba:	e7f4      	b.n	8006da6 <_dtoa_r+0x8ee>
 8006dbc:	f43f af7d 	beq.w	8006cba <_dtoa_r+0x802>
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	301c      	adds	r0, #28
 8006dc4:	e772      	b.n	8006cac <_dtoa_r+0x7f4>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc37      	bgt.n	8006e3c <_dtoa_r+0x984>
 8006dcc:	9b06      	ldr	r3, [sp, #24]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	dd34      	ble.n	8006e3c <_dtoa_r+0x984>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	9302      	str	r3, [sp, #8]
 8006dd6:	9b02      	ldr	r3, [sp, #8]
 8006dd8:	b96b      	cbnz	r3, 8006df6 <_dtoa_r+0x93e>
 8006dda:	4631      	mov	r1, r6
 8006ddc:	2205      	movs	r2, #5
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fbf4 	bl	80075cc <__multadd>
 8006de4:	4601      	mov	r1, r0
 8006de6:	4606      	mov	r6, r0
 8006de8:	ee18 0a10 	vmov	r0, s16
 8006dec:	f000 fe0e 	bl	8007a0c <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f73f adbb 	bgt.w	800696c <_dtoa_r+0x4b4>
 8006df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df8:	9d01      	ldr	r5, [sp, #4]
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	4631      	mov	r1, r6
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 fbbf 	bl	8007588 <_Bfree>
 8006e0a:	2f00      	cmp	r7, #0
 8006e0c:	f43f aea4 	beq.w	8006b58 <_dtoa_r+0x6a0>
 8006e10:	f1b8 0f00 	cmp.w	r8, #0
 8006e14:	d005      	beq.n	8006e22 <_dtoa_r+0x96a>
 8006e16:	45b8      	cmp	r8, r7
 8006e18:	d003      	beq.n	8006e22 <_dtoa_r+0x96a>
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fbb3 	bl	8007588 <_Bfree>
 8006e22:	4639      	mov	r1, r7
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fbaf 	bl	8007588 <_Bfree>
 8006e2a:	e695      	b.n	8006b58 <_dtoa_r+0x6a0>
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4637      	mov	r7, r6
 8006e30:	e7e1      	b.n	8006df6 <_dtoa_r+0x93e>
 8006e32:	9700      	str	r7, [sp, #0]
 8006e34:	4637      	mov	r7, r6
 8006e36:	e599      	b.n	800696c <_dtoa_r+0x4b4>
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80ca 	beq.w	8006fd8 <_dtoa_r+0xb20>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	9302      	str	r3, [sp, #8]
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x9a0>
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	462a      	mov	r2, r5
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fd6b 	bl	800792c <__lshift>
 8006e56:	4607      	mov	r7, r0
 8006e58:	f1b8 0f00 	cmp.w	r8, #0
 8006e5c:	d05b      	beq.n	8006f16 <_dtoa_r+0xa5e>
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fb51 	bl	8007508 <_Balloc>
 8006e66:	4605      	mov	r5, r0
 8006e68:	b928      	cbnz	r0, 8006e76 <_dtoa_r+0x9be>
 8006e6a:	4b87      	ldr	r3, [pc, #540]	; (8007088 <_dtoa_r+0xbd0>)
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e72:	f7ff bb3b 	b.w	80064ec <_dtoa_r+0x34>
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	3202      	adds	r2, #2
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	f107 010c 	add.w	r1, r7, #12
 8006e80:	300c      	adds	r0, #12
 8006e82:	f000 fb33 	bl	80074ec <memcpy>
 8006e86:	2201      	movs	r2, #1
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fd4e 	bl	800792c <__lshift>
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	f103 0901 	add.w	r9, r3, #1
 8006e96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	f00a 0301 	and.w	r3, sl, #1
 8006ea2:	46b8      	mov	r8, r7
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	ee18 0a10 	vmov	r0, s16
 8006eae:	f7ff fa75 	bl	800639c <quorem>
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	9002      	str	r0, [sp, #8]
 8006eb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eba:	ee18 0a10 	vmov	r0, s16
 8006ebe:	f000 fda5 	bl	8007a0c <__mcmp>
 8006ec2:	463a      	mov	r2, r7
 8006ec4:	9003      	str	r0, [sp, #12]
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fdbb 	bl	8007a44 <__mdiff>
 8006ece:	68c2      	ldr	r2, [r0, #12]
 8006ed0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	bb02      	cbnz	r2, 8006f1a <_dtoa_r+0xa62>
 8006ed8:	4601      	mov	r1, r0
 8006eda:	ee18 0a10 	vmov	r0, s16
 8006ede:	f000 fd95 	bl	8007a0c <__mcmp>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	9207      	str	r2, [sp, #28]
 8006eea:	f000 fb4d 	bl	8007588 <_Bfree>
 8006eee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ef2:	ea43 0102 	orr.w	r1, r3, r2
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	464d      	mov	r5, r9
 8006efc:	d10f      	bne.n	8006f1e <_dtoa_r+0xa66>
 8006efe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f02:	d02a      	beq.n	8006f5a <_dtoa_r+0xaa2>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dd02      	ble.n	8006f10 <_dtoa_r+0xa58>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f10:	f88b a000 	strb.w	sl, [fp]
 8006f14:	e775      	b.n	8006e02 <_dtoa_r+0x94a>
 8006f16:	4638      	mov	r0, r7
 8006f18:	e7ba      	b.n	8006e90 <_dtoa_r+0x9d8>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	e7e2      	b.n	8006ee4 <_dtoa_r+0xa2c>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	db04      	blt.n	8006f2e <_dtoa_r+0xa76>
 8006f24:	9906      	ldr	r1, [sp, #24]
 8006f26:	430b      	orrs	r3, r1
 8006f28:	9904      	ldr	r1, [sp, #16]
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	d122      	bne.n	8006f74 <_dtoa_r+0xabc>
 8006f2e:	2a00      	cmp	r2, #0
 8006f30:	ddee      	ble.n	8006f10 <_dtoa_r+0xa58>
 8006f32:	ee18 1a10 	vmov	r1, s16
 8006f36:	2201      	movs	r2, #1
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fcf7 	bl	800792c <__lshift>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	ee08 0a10 	vmov	s16, r0
 8006f44:	f000 fd62 	bl	8007a0c <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dc03      	bgt.n	8006f54 <_dtoa_r+0xa9c>
 8006f4c:	d1e0      	bne.n	8006f10 <_dtoa_r+0xa58>
 8006f4e:	f01a 0f01 	tst.w	sl, #1
 8006f52:	d0dd      	beq.n	8006f10 <_dtoa_r+0xa58>
 8006f54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f58:	d1d7      	bne.n	8006f0a <_dtoa_r+0xa52>
 8006f5a:	2339      	movs	r3, #57	; 0x39
 8006f5c:	f88b 3000 	strb.w	r3, [fp]
 8006f60:	462b      	mov	r3, r5
 8006f62:	461d      	mov	r5, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f6a:	2a39      	cmp	r2, #57	; 0x39
 8006f6c:	d071      	beq.n	8007052 <_dtoa_r+0xb9a>
 8006f6e:	3201      	adds	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e746      	b.n	8006e02 <_dtoa_r+0x94a>
 8006f74:	2a00      	cmp	r2, #0
 8006f76:	dd07      	ble.n	8006f88 <_dtoa_r+0xad0>
 8006f78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f7c:	d0ed      	beq.n	8006f5a <_dtoa_r+0xaa2>
 8006f7e:	f10a 0301 	add.w	r3, sl, #1
 8006f82:	f88b 3000 	strb.w	r3, [fp]
 8006f86:	e73c      	b.n	8006e02 <_dtoa_r+0x94a>
 8006f88:	9b05      	ldr	r3, [sp, #20]
 8006f8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f8e:	4599      	cmp	r9, r3
 8006f90:	d047      	beq.n	8007022 <_dtoa_r+0xb6a>
 8006f92:	ee18 1a10 	vmov	r1, s16
 8006f96:	2300      	movs	r3, #0
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 fb16 	bl	80075cc <__multadd>
 8006fa0:	45b8      	cmp	r8, r7
 8006fa2:	ee08 0a10 	vmov	s16, r0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	f04f 020a 	mov.w	r2, #10
 8006fae:	4641      	mov	r1, r8
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	d106      	bne.n	8006fc2 <_dtoa_r+0xb0a>
 8006fb4:	f000 fb0a 	bl	80075cc <__multadd>
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4607      	mov	r7, r0
 8006fbc:	f109 0901 	add.w	r9, r9, #1
 8006fc0:	e772      	b.n	8006ea8 <_dtoa_r+0x9f0>
 8006fc2:	f000 fb03 	bl	80075cc <__multadd>
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	4680      	mov	r8, r0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	220a      	movs	r2, #10
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 fafc 	bl	80075cc <__multadd>
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	e7f1      	b.n	8006fbc <_dtoa_r+0xb04>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	9302      	str	r3, [sp, #8]
 8006fdc:	9d01      	ldr	r5, [sp, #4]
 8006fde:	ee18 0a10 	vmov	r0, s16
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	f7ff f9da 	bl	800639c <quorem>
 8006fe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	f805 ab01 	strb.w	sl, [r5], #1
 8006ff2:	1aea      	subs	r2, r5, r3
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	dd09      	ble.n	800700e <_dtoa_r+0xb56>
 8006ffa:	ee18 1a10 	vmov	r1, s16
 8006ffe:	2300      	movs	r3, #0
 8007000:	220a      	movs	r2, #10
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fae2 	bl	80075cc <__multadd>
 8007008:	ee08 0a10 	vmov	s16, r0
 800700c:	e7e7      	b.n	8006fde <_dtoa_r+0xb26>
 800700e:	9b02      	ldr	r3, [sp, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfc8      	it	gt
 8007014:	461d      	movgt	r5, r3
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	bfd8      	it	le
 800701a:	2501      	movle	r5, #1
 800701c:	441d      	add	r5, r3
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	ee18 1a10 	vmov	r1, s16
 8007026:	2201      	movs	r2, #1
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fc7f 	bl	800792c <__lshift>
 800702e:	4631      	mov	r1, r6
 8007030:	ee08 0a10 	vmov	s16, r0
 8007034:	f000 fcea 	bl	8007a0c <__mcmp>
 8007038:	2800      	cmp	r0, #0
 800703a:	dc91      	bgt.n	8006f60 <_dtoa_r+0xaa8>
 800703c:	d102      	bne.n	8007044 <_dtoa_r+0xb8c>
 800703e:	f01a 0f01 	tst.w	sl, #1
 8007042:	d18d      	bne.n	8006f60 <_dtoa_r+0xaa8>
 8007044:	462b      	mov	r3, r5
 8007046:	461d      	mov	r5, r3
 8007048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800704c:	2a30      	cmp	r2, #48	; 0x30
 800704e:	d0fa      	beq.n	8007046 <_dtoa_r+0xb8e>
 8007050:	e6d7      	b.n	8006e02 <_dtoa_r+0x94a>
 8007052:	9a01      	ldr	r2, [sp, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d184      	bne.n	8006f62 <_dtoa_r+0xaaa>
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	7013      	strb	r3, [r2, #0]
 8007062:	e6ce      	b.n	8006e02 <_dtoa_r+0x94a>
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <_dtoa_r+0xbd4>)
 8007066:	f7ff ba95 	b.w	8006594 <_dtoa_r+0xdc>
 800706a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706c:	2b00      	cmp	r3, #0
 800706e:	f47f aa6e 	bne.w	800654e <_dtoa_r+0x96>
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <_dtoa_r+0xbd8>)
 8007074:	f7ff ba8e 	b.w	8006594 <_dtoa_r+0xdc>
 8007078:	9b02      	ldr	r3, [sp, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	dcae      	bgt.n	8006fdc <_dtoa_r+0xb24>
 800707e:	9b06      	ldr	r3, [sp, #24]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f73f aea8 	bgt.w	8006dd6 <_dtoa_r+0x91e>
 8007086:	e7a9      	b.n	8006fdc <_dtoa_r+0xb24>
 8007088:	0800858b 	.word	0x0800858b
 800708c:	080084e8 	.word	0x080084e8
 8007090:	0800850c 	.word	0x0800850c

08007094 <__sflush_r>:
 8007094:	898a      	ldrh	r2, [r1, #12]
 8007096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800709a:	4605      	mov	r5, r0
 800709c:	0710      	lsls	r0, r2, #28
 800709e:	460c      	mov	r4, r1
 80070a0:	d458      	bmi.n	8007154 <__sflush_r+0xc0>
 80070a2:	684b      	ldr	r3, [r1, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dc05      	bgt.n	80070b4 <__sflush_r+0x20>
 80070a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	dc02      	bgt.n	80070b4 <__sflush_r+0x20>
 80070ae:	2000      	movs	r0, #0
 80070b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	d0f9      	beq.n	80070ae <__sflush_r+0x1a>
 80070ba:	2300      	movs	r3, #0
 80070bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070c0:	682f      	ldr	r7, [r5, #0]
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	d032      	beq.n	800712c <__sflush_r+0x98>
 80070c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	075a      	lsls	r2, r3, #29
 80070cc:	d505      	bpl.n	80070da <__sflush_r+0x46>
 80070ce:	6863      	ldr	r3, [r4, #4]
 80070d0:	1ac0      	subs	r0, r0, r3
 80070d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070d4:	b10b      	cbz	r3, 80070da <__sflush_r+0x46>
 80070d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070d8:	1ac0      	subs	r0, r0, r3
 80070da:	2300      	movs	r3, #0
 80070dc:	4602      	mov	r2, r0
 80070de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070e0:	6a21      	ldr	r1, [r4, #32]
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b0      	blx	r6
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	d106      	bne.n	80070fa <__sflush_r+0x66>
 80070ec:	6829      	ldr	r1, [r5, #0]
 80070ee:	291d      	cmp	r1, #29
 80070f0:	d82c      	bhi.n	800714c <__sflush_r+0xb8>
 80070f2:	4a2a      	ldr	r2, [pc, #168]	; (800719c <__sflush_r+0x108>)
 80070f4:	40ca      	lsrs	r2, r1
 80070f6:	07d6      	lsls	r6, r2, #31
 80070f8:	d528      	bpl.n	800714c <__sflush_r+0xb8>
 80070fa:	2200      	movs	r2, #0
 80070fc:	6062      	str	r2, [r4, #4]
 80070fe:	04d9      	lsls	r1, r3, #19
 8007100:	6922      	ldr	r2, [r4, #16]
 8007102:	6022      	str	r2, [r4, #0]
 8007104:	d504      	bpl.n	8007110 <__sflush_r+0x7c>
 8007106:	1c42      	adds	r2, r0, #1
 8007108:	d101      	bne.n	800710e <__sflush_r+0x7a>
 800710a:	682b      	ldr	r3, [r5, #0]
 800710c:	b903      	cbnz	r3, 8007110 <__sflush_r+0x7c>
 800710e:	6560      	str	r0, [r4, #84]	; 0x54
 8007110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007112:	602f      	str	r7, [r5, #0]
 8007114:	2900      	cmp	r1, #0
 8007116:	d0ca      	beq.n	80070ae <__sflush_r+0x1a>
 8007118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711c:	4299      	cmp	r1, r3
 800711e:	d002      	beq.n	8007126 <__sflush_r+0x92>
 8007120:	4628      	mov	r0, r5
 8007122:	f000 fd8b 	bl	8007c3c <_free_r>
 8007126:	2000      	movs	r0, #0
 8007128:	6360      	str	r0, [r4, #52]	; 0x34
 800712a:	e7c1      	b.n	80070b0 <__sflush_r+0x1c>
 800712c:	6a21      	ldr	r1, [r4, #32]
 800712e:	2301      	movs	r3, #1
 8007130:	4628      	mov	r0, r5
 8007132:	47b0      	blx	r6
 8007134:	1c41      	adds	r1, r0, #1
 8007136:	d1c7      	bne.n	80070c8 <__sflush_r+0x34>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0c4      	beq.n	80070c8 <__sflush_r+0x34>
 800713e:	2b1d      	cmp	r3, #29
 8007140:	d001      	beq.n	8007146 <__sflush_r+0xb2>
 8007142:	2b16      	cmp	r3, #22
 8007144:	d101      	bne.n	800714a <__sflush_r+0xb6>
 8007146:	602f      	str	r7, [r5, #0]
 8007148:	e7b1      	b.n	80070ae <__sflush_r+0x1a>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	e7ad      	b.n	80070b0 <__sflush_r+0x1c>
 8007154:	690f      	ldr	r7, [r1, #16]
 8007156:	2f00      	cmp	r7, #0
 8007158:	d0a9      	beq.n	80070ae <__sflush_r+0x1a>
 800715a:	0793      	lsls	r3, r2, #30
 800715c:	680e      	ldr	r6, [r1, #0]
 800715e:	bf08      	it	eq
 8007160:	694b      	ldreq	r3, [r1, #20]
 8007162:	600f      	str	r7, [r1, #0]
 8007164:	bf18      	it	ne
 8007166:	2300      	movne	r3, #0
 8007168:	eba6 0807 	sub.w	r8, r6, r7
 800716c:	608b      	str	r3, [r1, #8]
 800716e:	f1b8 0f00 	cmp.w	r8, #0
 8007172:	dd9c      	ble.n	80070ae <__sflush_r+0x1a>
 8007174:	6a21      	ldr	r1, [r4, #32]
 8007176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007178:	4643      	mov	r3, r8
 800717a:	463a      	mov	r2, r7
 800717c:	4628      	mov	r0, r5
 800717e:	47b0      	blx	r6
 8007180:	2800      	cmp	r0, #0
 8007182:	dc06      	bgt.n	8007192 <__sflush_r+0xfe>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800718a:	81a3      	strh	r3, [r4, #12]
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	e78e      	b.n	80070b0 <__sflush_r+0x1c>
 8007192:	4407      	add	r7, r0
 8007194:	eba8 0800 	sub.w	r8, r8, r0
 8007198:	e7e9      	b.n	800716e <__sflush_r+0xda>
 800719a:	bf00      	nop
 800719c:	20400001 	.word	0x20400001

080071a0 <_fflush_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	690b      	ldr	r3, [r1, #16]
 80071a4:	4605      	mov	r5, r0
 80071a6:	460c      	mov	r4, r1
 80071a8:	b913      	cbnz	r3, 80071b0 <_fflush_r+0x10>
 80071aa:	2500      	movs	r5, #0
 80071ac:	4628      	mov	r0, r5
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	b118      	cbz	r0, 80071ba <_fflush_r+0x1a>
 80071b2:	6983      	ldr	r3, [r0, #24]
 80071b4:	b90b      	cbnz	r3, 80071ba <_fflush_r+0x1a>
 80071b6:	f000 f887 	bl	80072c8 <__sinit>
 80071ba:	4b14      	ldr	r3, [pc, #80]	; (800720c <_fflush_r+0x6c>)
 80071bc:	429c      	cmp	r4, r3
 80071be:	d11b      	bne.n	80071f8 <_fflush_r+0x58>
 80071c0:	686c      	ldr	r4, [r5, #4]
 80071c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0ef      	beq.n	80071aa <_fflush_r+0xa>
 80071ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071cc:	07d0      	lsls	r0, r2, #31
 80071ce:	d404      	bmi.n	80071da <_fflush_r+0x3a>
 80071d0:	0599      	lsls	r1, r3, #22
 80071d2:	d402      	bmi.n	80071da <_fflush_r+0x3a>
 80071d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d6:	f000 f91a 	bl	800740e <__retarget_lock_acquire_recursive>
 80071da:	4628      	mov	r0, r5
 80071dc:	4621      	mov	r1, r4
 80071de:	f7ff ff59 	bl	8007094 <__sflush_r>
 80071e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071e4:	07da      	lsls	r2, r3, #31
 80071e6:	4605      	mov	r5, r0
 80071e8:	d4e0      	bmi.n	80071ac <_fflush_r+0xc>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	059b      	lsls	r3, r3, #22
 80071ee:	d4dd      	bmi.n	80071ac <_fflush_r+0xc>
 80071f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071f2:	f000 f90d 	bl	8007410 <__retarget_lock_release_recursive>
 80071f6:	e7d9      	b.n	80071ac <_fflush_r+0xc>
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <_fflush_r+0x70>)
 80071fa:	429c      	cmp	r4, r3
 80071fc:	d101      	bne.n	8007202 <_fflush_r+0x62>
 80071fe:	68ac      	ldr	r4, [r5, #8]
 8007200:	e7df      	b.n	80071c2 <_fflush_r+0x22>
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <_fflush_r+0x74>)
 8007204:	429c      	cmp	r4, r3
 8007206:	bf08      	it	eq
 8007208:	68ec      	ldreq	r4, [r5, #12]
 800720a:	e7da      	b.n	80071c2 <_fflush_r+0x22>
 800720c:	080085bc 	.word	0x080085bc
 8007210:	080085dc 	.word	0x080085dc
 8007214:	0800859c 	.word	0x0800859c

08007218 <std>:
 8007218:	2300      	movs	r3, #0
 800721a:	b510      	push	{r4, lr}
 800721c:	4604      	mov	r4, r0
 800721e:	e9c0 3300 	strd	r3, r3, [r0]
 8007222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007226:	6083      	str	r3, [r0, #8]
 8007228:	8181      	strh	r1, [r0, #12]
 800722a:	6643      	str	r3, [r0, #100]	; 0x64
 800722c:	81c2      	strh	r2, [r0, #14]
 800722e:	6183      	str	r3, [r0, #24]
 8007230:	4619      	mov	r1, r3
 8007232:	2208      	movs	r2, #8
 8007234:	305c      	adds	r0, #92	; 0x5c
 8007236:	f7fe fadb 	bl	80057f0 <memset>
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <std+0x38>)
 800723c:	6263      	str	r3, [r4, #36]	; 0x24
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <std+0x3c>)
 8007240:	62a3      	str	r3, [r4, #40]	; 0x28
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <std+0x40>)
 8007244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <std+0x44>)
 8007248:	6224      	str	r4, [r4, #32]
 800724a:	6323      	str	r3, [r4, #48]	; 0x30
 800724c:	bd10      	pop	{r4, pc}
 800724e:	bf00      	nop
 8007250:	08008161 	.word	0x08008161
 8007254:	08008183 	.word	0x08008183
 8007258:	080081bb 	.word	0x080081bb
 800725c:	080081df 	.word	0x080081df

08007260 <_cleanup_r>:
 8007260:	4901      	ldr	r1, [pc, #4]	; (8007268 <_cleanup_r+0x8>)
 8007262:	f000 b8af 	b.w	80073c4 <_fwalk_reent>
 8007266:	bf00      	nop
 8007268:	080071a1 	.word	0x080071a1

0800726c <__sfmoreglue>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	2268      	movs	r2, #104	; 0x68
 8007270:	1e4d      	subs	r5, r1, #1
 8007272:	4355      	muls	r5, r2
 8007274:	460e      	mov	r6, r1
 8007276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800727a:	f000 fd4b 	bl	8007d14 <_malloc_r>
 800727e:	4604      	mov	r4, r0
 8007280:	b140      	cbz	r0, 8007294 <__sfmoreglue+0x28>
 8007282:	2100      	movs	r1, #0
 8007284:	e9c0 1600 	strd	r1, r6, [r0]
 8007288:	300c      	adds	r0, #12
 800728a:	60a0      	str	r0, [r4, #8]
 800728c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007290:	f7fe faae 	bl	80057f0 <memset>
 8007294:	4620      	mov	r0, r4
 8007296:	bd70      	pop	{r4, r5, r6, pc}

08007298 <__sfp_lock_acquire>:
 8007298:	4801      	ldr	r0, [pc, #4]	; (80072a0 <__sfp_lock_acquire+0x8>)
 800729a:	f000 b8b8 	b.w	800740e <__retarget_lock_acquire_recursive>
 800729e:	bf00      	nop
 80072a0:	20000485 	.word	0x20000485

080072a4 <__sfp_lock_release>:
 80072a4:	4801      	ldr	r0, [pc, #4]	; (80072ac <__sfp_lock_release+0x8>)
 80072a6:	f000 b8b3 	b.w	8007410 <__retarget_lock_release_recursive>
 80072aa:	bf00      	nop
 80072ac:	20000485 	.word	0x20000485

080072b0 <__sinit_lock_acquire>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__sinit_lock_acquire+0x8>)
 80072b2:	f000 b8ac 	b.w	800740e <__retarget_lock_acquire_recursive>
 80072b6:	bf00      	nop
 80072b8:	20000486 	.word	0x20000486

080072bc <__sinit_lock_release>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__sinit_lock_release+0x8>)
 80072be:	f000 b8a7 	b.w	8007410 <__retarget_lock_release_recursive>
 80072c2:	bf00      	nop
 80072c4:	20000486 	.word	0x20000486

080072c8 <__sinit>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	4604      	mov	r4, r0
 80072cc:	f7ff fff0 	bl	80072b0 <__sinit_lock_acquire>
 80072d0:	69a3      	ldr	r3, [r4, #24]
 80072d2:	b11b      	cbz	r3, 80072dc <__sinit+0x14>
 80072d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d8:	f7ff bff0 	b.w	80072bc <__sinit_lock_release>
 80072dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072e0:	6523      	str	r3, [r4, #80]	; 0x50
 80072e2:	4b13      	ldr	r3, [pc, #76]	; (8007330 <__sinit+0x68>)
 80072e4:	4a13      	ldr	r2, [pc, #76]	; (8007334 <__sinit+0x6c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80072ea:	42a3      	cmp	r3, r4
 80072ec:	bf04      	itt	eq
 80072ee:	2301      	moveq	r3, #1
 80072f0:	61a3      	streq	r3, [r4, #24]
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f820 	bl	8007338 <__sfp>
 80072f8:	6060      	str	r0, [r4, #4]
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 f81c 	bl	8007338 <__sfp>
 8007300:	60a0      	str	r0, [r4, #8]
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f818 	bl	8007338 <__sfp>
 8007308:	2200      	movs	r2, #0
 800730a:	60e0      	str	r0, [r4, #12]
 800730c:	2104      	movs	r1, #4
 800730e:	6860      	ldr	r0, [r4, #4]
 8007310:	f7ff ff82 	bl	8007218 <std>
 8007314:	68a0      	ldr	r0, [r4, #8]
 8007316:	2201      	movs	r2, #1
 8007318:	2109      	movs	r1, #9
 800731a:	f7ff ff7d 	bl	8007218 <std>
 800731e:	68e0      	ldr	r0, [r4, #12]
 8007320:	2202      	movs	r2, #2
 8007322:	2112      	movs	r1, #18
 8007324:	f7ff ff78 	bl	8007218 <std>
 8007328:	2301      	movs	r3, #1
 800732a:	61a3      	str	r3, [r4, #24]
 800732c:	e7d2      	b.n	80072d4 <__sinit+0xc>
 800732e:	bf00      	nop
 8007330:	080084d4 	.word	0x080084d4
 8007334:	08007261 	.word	0x08007261

08007338 <__sfp>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	4607      	mov	r7, r0
 800733c:	f7ff ffac 	bl	8007298 <__sfp_lock_acquire>
 8007340:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <__sfp+0x84>)
 8007342:	681e      	ldr	r6, [r3, #0]
 8007344:	69b3      	ldr	r3, [r6, #24]
 8007346:	b913      	cbnz	r3, 800734e <__sfp+0x16>
 8007348:	4630      	mov	r0, r6
 800734a:	f7ff ffbd 	bl	80072c8 <__sinit>
 800734e:	3648      	adds	r6, #72	; 0x48
 8007350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007354:	3b01      	subs	r3, #1
 8007356:	d503      	bpl.n	8007360 <__sfp+0x28>
 8007358:	6833      	ldr	r3, [r6, #0]
 800735a:	b30b      	cbz	r3, 80073a0 <__sfp+0x68>
 800735c:	6836      	ldr	r6, [r6, #0]
 800735e:	e7f7      	b.n	8007350 <__sfp+0x18>
 8007360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007364:	b9d5      	cbnz	r5, 800739c <__sfp+0x64>
 8007366:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <__sfp+0x88>)
 8007368:	60e3      	str	r3, [r4, #12]
 800736a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800736e:	6665      	str	r5, [r4, #100]	; 0x64
 8007370:	f000 f84c 	bl	800740c <__retarget_lock_init_recursive>
 8007374:	f7ff ff96 	bl	80072a4 <__sfp_lock_release>
 8007378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800737c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007380:	6025      	str	r5, [r4, #0]
 8007382:	61a5      	str	r5, [r4, #24]
 8007384:	2208      	movs	r2, #8
 8007386:	4629      	mov	r1, r5
 8007388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800738c:	f7fe fa30 	bl	80057f0 <memset>
 8007390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007398:	4620      	mov	r0, r4
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800739c:	3468      	adds	r4, #104	; 0x68
 800739e:	e7d9      	b.n	8007354 <__sfp+0x1c>
 80073a0:	2104      	movs	r1, #4
 80073a2:	4638      	mov	r0, r7
 80073a4:	f7ff ff62 	bl	800726c <__sfmoreglue>
 80073a8:	4604      	mov	r4, r0
 80073aa:	6030      	str	r0, [r6, #0]
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d1d5      	bne.n	800735c <__sfp+0x24>
 80073b0:	f7ff ff78 	bl	80072a4 <__sfp_lock_release>
 80073b4:	230c      	movs	r3, #12
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	e7ee      	b.n	8007398 <__sfp+0x60>
 80073ba:	bf00      	nop
 80073bc:	080084d4 	.word	0x080084d4
 80073c0:	ffff0001 	.word	0xffff0001

080073c4 <_fwalk_reent>:
 80073c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c8:	4606      	mov	r6, r0
 80073ca:	4688      	mov	r8, r1
 80073cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073d0:	2700      	movs	r7, #0
 80073d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073d6:	f1b9 0901 	subs.w	r9, r9, #1
 80073da:	d505      	bpl.n	80073e8 <_fwalk_reent+0x24>
 80073dc:	6824      	ldr	r4, [r4, #0]
 80073de:	2c00      	cmp	r4, #0
 80073e0:	d1f7      	bne.n	80073d2 <_fwalk_reent+0xe>
 80073e2:	4638      	mov	r0, r7
 80073e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e8:	89ab      	ldrh	r3, [r5, #12]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d907      	bls.n	80073fe <_fwalk_reent+0x3a>
 80073ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073f2:	3301      	adds	r3, #1
 80073f4:	d003      	beq.n	80073fe <_fwalk_reent+0x3a>
 80073f6:	4629      	mov	r1, r5
 80073f8:	4630      	mov	r0, r6
 80073fa:	47c0      	blx	r8
 80073fc:	4307      	orrs	r7, r0
 80073fe:	3568      	adds	r5, #104	; 0x68
 8007400:	e7e9      	b.n	80073d6 <_fwalk_reent+0x12>
	...

08007404 <_localeconv_r>:
 8007404:	4800      	ldr	r0, [pc, #0]	; (8007408 <_localeconv_r+0x4>)
 8007406:	4770      	bx	lr
 8007408:	20000160 	.word	0x20000160

0800740c <__retarget_lock_init_recursive>:
 800740c:	4770      	bx	lr

0800740e <__retarget_lock_acquire_recursive>:
 800740e:	4770      	bx	lr

08007410 <__retarget_lock_release_recursive>:
 8007410:	4770      	bx	lr

08007412 <__swhatbuf_r>:
 8007412:	b570      	push	{r4, r5, r6, lr}
 8007414:	460e      	mov	r6, r1
 8007416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741a:	2900      	cmp	r1, #0
 800741c:	b096      	sub	sp, #88	; 0x58
 800741e:	4614      	mov	r4, r2
 8007420:	461d      	mov	r5, r3
 8007422:	da08      	bge.n	8007436 <__swhatbuf_r+0x24>
 8007424:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	602a      	str	r2, [r5, #0]
 800742c:	061a      	lsls	r2, r3, #24
 800742e:	d410      	bmi.n	8007452 <__swhatbuf_r+0x40>
 8007430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007434:	e00e      	b.n	8007454 <__swhatbuf_r+0x42>
 8007436:	466a      	mov	r2, sp
 8007438:	f000 ff28 	bl	800828c <_fstat_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	dbf1      	blt.n	8007424 <__swhatbuf_r+0x12>
 8007440:	9a01      	ldr	r2, [sp, #4]
 8007442:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007446:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800744a:	425a      	negs	r2, r3
 800744c:	415a      	adcs	r2, r3
 800744e:	602a      	str	r2, [r5, #0]
 8007450:	e7ee      	b.n	8007430 <__swhatbuf_r+0x1e>
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	2000      	movs	r0, #0
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	b016      	add	sp, #88	; 0x58
 800745a:	bd70      	pop	{r4, r5, r6, pc}

0800745c <__smakebuf_r>:
 800745c:	898b      	ldrh	r3, [r1, #12]
 800745e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007460:	079d      	lsls	r5, r3, #30
 8007462:	4606      	mov	r6, r0
 8007464:	460c      	mov	r4, r1
 8007466:	d507      	bpl.n	8007478 <__smakebuf_r+0x1c>
 8007468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	6123      	str	r3, [r4, #16]
 8007470:	2301      	movs	r3, #1
 8007472:	6163      	str	r3, [r4, #20]
 8007474:	b002      	add	sp, #8
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	ab01      	add	r3, sp, #4
 800747a:	466a      	mov	r2, sp
 800747c:	f7ff ffc9 	bl	8007412 <__swhatbuf_r>
 8007480:	9900      	ldr	r1, [sp, #0]
 8007482:	4605      	mov	r5, r0
 8007484:	4630      	mov	r0, r6
 8007486:	f000 fc45 	bl	8007d14 <_malloc_r>
 800748a:	b948      	cbnz	r0, 80074a0 <__smakebuf_r+0x44>
 800748c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007490:	059a      	lsls	r2, r3, #22
 8007492:	d4ef      	bmi.n	8007474 <__smakebuf_r+0x18>
 8007494:	f023 0303 	bic.w	r3, r3, #3
 8007498:	f043 0302 	orr.w	r3, r3, #2
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	e7e3      	b.n	8007468 <__smakebuf_r+0xc>
 80074a0:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <__smakebuf_r+0x7c>)
 80074a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	6020      	str	r0, [r4, #0]
 80074a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	9b00      	ldr	r3, [sp, #0]
 80074b0:	6163      	str	r3, [r4, #20]
 80074b2:	9b01      	ldr	r3, [sp, #4]
 80074b4:	6120      	str	r0, [r4, #16]
 80074b6:	b15b      	cbz	r3, 80074d0 <__smakebuf_r+0x74>
 80074b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074bc:	4630      	mov	r0, r6
 80074be:	f000 fef7 	bl	80082b0 <_isatty_r>
 80074c2:	b128      	cbz	r0, 80074d0 <__smakebuf_r+0x74>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	f043 0301 	orr.w	r3, r3, #1
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	89a0      	ldrh	r0, [r4, #12]
 80074d2:	4305      	orrs	r5, r0
 80074d4:	81a5      	strh	r5, [r4, #12]
 80074d6:	e7cd      	b.n	8007474 <__smakebuf_r+0x18>
 80074d8:	08007261 	.word	0x08007261

080074dc <malloc>:
 80074dc:	4b02      	ldr	r3, [pc, #8]	; (80074e8 <malloc+0xc>)
 80074de:	4601      	mov	r1, r0
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	f000 bc17 	b.w	8007d14 <_malloc_r>
 80074e6:	bf00      	nop
 80074e8:	2000000c 	.word	0x2000000c

080074ec <memcpy>:
 80074ec:	440a      	add	r2, r1
 80074ee:	4291      	cmp	r1, r2
 80074f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80074f4:	d100      	bne.n	80074f8 <memcpy+0xc>
 80074f6:	4770      	bx	lr
 80074f8:	b510      	push	{r4, lr}
 80074fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007502:	4291      	cmp	r1, r2
 8007504:	d1f9      	bne.n	80074fa <memcpy+0xe>
 8007506:	bd10      	pop	{r4, pc}

08007508 <_Balloc>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800750c:	4604      	mov	r4, r0
 800750e:	460d      	mov	r5, r1
 8007510:	b976      	cbnz	r6, 8007530 <_Balloc+0x28>
 8007512:	2010      	movs	r0, #16
 8007514:	f7ff ffe2 	bl	80074dc <malloc>
 8007518:	4602      	mov	r2, r0
 800751a:	6260      	str	r0, [r4, #36]	; 0x24
 800751c:	b920      	cbnz	r0, 8007528 <_Balloc+0x20>
 800751e:	4b18      	ldr	r3, [pc, #96]	; (8007580 <_Balloc+0x78>)
 8007520:	4818      	ldr	r0, [pc, #96]	; (8007584 <_Balloc+0x7c>)
 8007522:	2166      	movs	r1, #102	; 0x66
 8007524:	f000 fe72 	bl	800820c <__assert_func>
 8007528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800752c:	6006      	str	r6, [r0, #0]
 800752e:	60c6      	str	r6, [r0, #12]
 8007530:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007532:	68f3      	ldr	r3, [r6, #12]
 8007534:	b183      	cbz	r3, 8007558 <_Balloc+0x50>
 8007536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800753e:	b9b8      	cbnz	r0, 8007570 <_Balloc+0x68>
 8007540:	2101      	movs	r1, #1
 8007542:	fa01 f605 	lsl.w	r6, r1, r5
 8007546:	1d72      	adds	r2, r6, #5
 8007548:	0092      	lsls	r2, r2, #2
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fb60 	bl	8007c10 <_calloc_r>
 8007550:	b160      	cbz	r0, 800756c <_Balloc+0x64>
 8007552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007556:	e00e      	b.n	8007576 <_Balloc+0x6e>
 8007558:	2221      	movs	r2, #33	; 0x21
 800755a:	2104      	movs	r1, #4
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fb57 	bl	8007c10 <_calloc_r>
 8007562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007564:	60f0      	str	r0, [r6, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e4      	bne.n	8007536 <_Balloc+0x2e>
 800756c:	2000      	movs	r0, #0
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	6802      	ldr	r2, [r0, #0]
 8007572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007576:	2300      	movs	r3, #0
 8007578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800757c:	e7f7      	b.n	800756e <_Balloc+0x66>
 800757e:	bf00      	nop
 8007580:	08008519 	.word	0x08008519
 8007584:	080085fc 	.word	0x080085fc

08007588 <_Bfree>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800758c:	4605      	mov	r5, r0
 800758e:	460c      	mov	r4, r1
 8007590:	b976      	cbnz	r6, 80075b0 <_Bfree+0x28>
 8007592:	2010      	movs	r0, #16
 8007594:	f7ff ffa2 	bl	80074dc <malloc>
 8007598:	4602      	mov	r2, r0
 800759a:	6268      	str	r0, [r5, #36]	; 0x24
 800759c:	b920      	cbnz	r0, 80075a8 <_Bfree+0x20>
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <_Bfree+0x3c>)
 80075a0:	4809      	ldr	r0, [pc, #36]	; (80075c8 <_Bfree+0x40>)
 80075a2:	218a      	movs	r1, #138	; 0x8a
 80075a4:	f000 fe32 	bl	800820c <__assert_func>
 80075a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075ac:	6006      	str	r6, [r0, #0]
 80075ae:	60c6      	str	r6, [r0, #12]
 80075b0:	b13c      	cbz	r4, 80075c2 <_Bfree+0x3a>
 80075b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075b4:	6862      	ldr	r2, [r4, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075bc:	6021      	str	r1, [r4, #0]
 80075be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	08008519 	.word	0x08008519
 80075c8:	080085fc 	.word	0x080085fc

080075cc <__multadd>:
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	690d      	ldr	r5, [r1, #16]
 80075d2:	4607      	mov	r7, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	461e      	mov	r6, r3
 80075d8:	f101 0c14 	add.w	ip, r1, #20
 80075dc:	2000      	movs	r0, #0
 80075de:	f8dc 3000 	ldr.w	r3, [ip]
 80075e2:	b299      	uxth	r1, r3
 80075e4:	fb02 6101 	mla	r1, r2, r1, r6
 80075e8:	0c1e      	lsrs	r6, r3, #16
 80075ea:	0c0b      	lsrs	r3, r1, #16
 80075ec:	fb02 3306 	mla	r3, r2, r6, r3
 80075f0:	b289      	uxth	r1, r1
 80075f2:	3001      	adds	r0, #1
 80075f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075f8:	4285      	cmp	r5, r0
 80075fa:	f84c 1b04 	str.w	r1, [ip], #4
 80075fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007602:	dcec      	bgt.n	80075de <__multadd+0x12>
 8007604:	b30e      	cbz	r6, 800764a <__multadd+0x7e>
 8007606:	68a3      	ldr	r3, [r4, #8]
 8007608:	42ab      	cmp	r3, r5
 800760a:	dc19      	bgt.n	8007640 <__multadd+0x74>
 800760c:	6861      	ldr	r1, [r4, #4]
 800760e:	4638      	mov	r0, r7
 8007610:	3101      	adds	r1, #1
 8007612:	f7ff ff79 	bl	8007508 <_Balloc>
 8007616:	4680      	mov	r8, r0
 8007618:	b928      	cbnz	r0, 8007626 <__multadd+0x5a>
 800761a:	4602      	mov	r2, r0
 800761c:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <__multadd+0x84>)
 800761e:	480d      	ldr	r0, [pc, #52]	; (8007654 <__multadd+0x88>)
 8007620:	21b5      	movs	r1, #181	; 0xb5
 8007622:	f000 fdf3 	bl	800820c <__assert_func>
 8007626:	6922      	ldr	r2, [r4, #16]
 8007628:	3202      	adds	r2, #2
 800762a:	f104 010c 	add.w	r1, r4, #12
 800762e:	0092      	lsls	r2, r2, #2
 8007630:	300c      	adds	r0, #12
 8007632:	f7ff ff5b 	bl	80074ec <memcpy>
 8007636:	4621      	mov	r1, r4
 8007638:	4638      	mov	r0, r7
 800763a:	f7ff ffa5 	bl	8007588 <_Bfree>
 800763e:	4644      	mov	r4, r8
 8007640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007644:	3501      	adds	r5, #1
 8007646:	615e      	str	r6, [r3, #20]
 8007648:	6125      	str	r5, [r4, #16]
 800764a:	4620      	mov	r0, r4
 800764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007650:	0800858b 	.word	0x0800858b
 8007654:	080085fc 	.word	0x080085fc

08007658 <__hi0bits>:
 8007658:	0c03      	lsrs	r3, r0, #16
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	b9d3      	cbnz	r3, 8007694 <__hi0bits+0x3c>
 800765e:	0400      	lsls	r0, r0, #16
 8007660:	2310      	movs	r3, #16
 8007662:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007666:	bf04      	itt	eq
 8007668:	0200      	lsleq	r0, r0, #8
 800766a:	3308      	addeq	r3, #8
 800766c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007670:	bf04      	itt	eq
 8007672:	0100      	lsleq	r0, r0, #4
 8007674:	3304      	addeq	r3, #4
 8007676:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800767a:	bf04      	itt	eq
 800767c:	0080      	lsleq	r0, r0, #2
 800767e:	3302      	addeq	r3, #2
 8007680:	2800      	cmp	r0, #0
 8007682:	db05      	blt.n	8007690 <__hi0bits+0x38>
 8007684:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007688:	f103 0301 	add.w	r3, r3, #1
 800768c:	bf08      	it	eq
 800768e:	2320      	moveq	r3, #32
 8007690:	4618      	mov	r0, r3
 8007692:	4770      	bx	lr
 8007694:	2300      	movs	r3, #0
 8007696:	e7e4      	b.n	8007662 <__hi0bits+0xa>

08007698 <__lo0bits>:
 8007698:	6803      	ldr	r3, [r0, #0]
 800769a:	f013 0207 	ands.w	r2, r3, #7
 800769e:	4601      	mov	r1, r0
 80076a0:	d00b      	beq.n	80076ba <__lo0bits+0x22>
 80076a2:	07da      	lsls	r2, r3, #31
 80076a4:	d423      	bmi.n	80076ee <__lo0bits+0x56>
 80076a6:	0798      	lsls	r0, r3, #30
 80076a8:	bf49      	itett	mi
 80076aa:	085b      	lsrmi	r3, r3, #1
 80076ac:	089b      	lsrpl	r3, r3, #2
 80076ae:	2001      	movmi	r0, #1
 80076b0:	600b      	strmi	r3, [r1, #0]
 80076b2:	bf5c      	itt	pl
 80076b4:	600b      	strpl	r3, [r1, #0]
 80076b6:	2002      	movpl	r0, #2
 80076b8:	4770      	bx	lr
 80076ba:	b298      	uxth	r0, r3
 80076bc:	b9a8      	cbnz	r0, 80076ea <__lo0bits+0x52>
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	2010      	movs	r0, #16
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	b90a      	cbnz	r2, 80076ca <__lo0bits+0x32>
 80076c6:	3008      	adds	r0, #8
 80076c8:	0a1b      	lsrs	r3, r3, #8
 80076ca:	071a      	lsls	r2, r3, #28
 80076cc:	bf04      	itt	eq
 80076ce:	091b      	lsreq	r3, r3, #4
 80076d0:	3004      	addeq	r0, #4
 80076d2:	079a      	lsls	r2, r3, #30
 80076d4:	bf04      	itt	eq
 80076d6:	089b      	lsreq	r3, r3, #2
 80076d8:	3002      	addeq	r0, #2
 80076da:	07da      	lsls	r2, r3, #31
 80076dc:	d403      	bmi.n	80076e6 <__lo0bits+0x4e>
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	f100 0001 	add.w	r0, r0, #1
 80076e4:	d005      	beq.n	80076f2 <__lo0bits+0x5a>
 80076e6:	600b      	str	r3, [r1, #0]
 80076e8:	4770      	bx	lr
 80076ea:	4610      	mov	r0, r2
 80076ec:	e7e9      	b.n	80076c2 <__lo0bits+0x2a>
 80076ee:	2000      	movs	r0, #0
 80076f0:	4770      	bx	lr
 80076f2:	2020      	movs	r0, #32
 80076f4:	4770      	bx	lr
	...

080076f8 <__i2b>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	2101      	movs	r1, #1
 80076fe:	f7ff ff03 	bl	8007508 <_Balloc>
 8007702:	4602      	mov	r2, r0
 8007704:	b928      	cbnz	r0, 8007712 <__i2b+0x1a>
 8007706:	4b05      	ldr	r3, [pc, #20]	; (800771c <__i2b+0x24>)
 8007708:	4805      	ldr	r0, [pc, #20]	; (8007720 <__i2b+0x28>)
 800770a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800770e:	f000 fd7d 	bl	800820c <__assert_func>
 8007712:	2301      	movs	r3, #1
 8007714:	6144      	str	r4, [r0, #20]
 8007716:	6103      	str	r3, [r0, #16]
 8007718:	bd10      	pop	{r4, pc}
 800771a:	bf00      	nop
 800771c:	0800858b 	.word	0x0800858b
 8007720:	080085fc 	.word	0x080085fc

08007724 <__multiply>:
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	4691      	mov	r9, r2
 800772a:	690a      	ldr	r2, [r1, #16]
 800772c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007730:	429a      	cmp	r2, r3
 8007732:	bfb8      	it	lt
 8007734:	460b      	movlt	r3, r1
 8007736:	460c      	mov	r4, r1
 8007738:	bfbc      	itt	lt
 800773a:	464c      	movlt	r4, r9
 800773c:	4699      	movlt	r9, r3
 800773e:	6927      	ldr	r7, [r4, #16]
 8007740:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007744:	68a3      	ldr	r3, [r4, #8]
 8007746:	6861      	ldr	r1, [r4, #4]
 8007748:	eb07 060a 	add.w	r6, r7, sl
 800774c:	42b3      	cmp	r3, r6
 800774e:	b085      	sub	sp, #20
 8007750:	bfb8      	it	lt
 8007752:	3101      	addlt	r1, #1
 8007754:	f7ff fed8 	bl	8007508 <_Balloc>
 8007758:	b930      	cbnz	r0, 8007768 <__multiply+0x44>
 800775a:	4602      	mov	r2, r0
 800775c:	4b44      	ldr	r3, [pc, #272]	; (8007870 <__multiply+0x14c>)
 800775e:	4845      	ldr	r0, [pc, #276]	; (8007874 <__multiply+0x150>)
 8007760:	f240 115d 	movw	r1, #349	; 0x15d
 8007764:	f000 fd52 	bl	800820c <__assert_func>
 8007768:	f100 0514 	add.w	r5, r0, #20
 800776c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007770:	462b      	mov	r3, r5
 8007772:	2200      	movs	r2, #0
 8007774:	4543      	cmp	r3, r8
 8007776:	d321      	bcc.n	80077bc <__multiply+0x98>
 8007778:	f104 0314 	add.w	r3, r4, #20
 800777c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007780:	f109 0314 	add.w	r3, r9, #20
 8007784:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	1b3a      	subs	r2, r7, r4
 800778c:	3a15      	subs	r2, #21
 800778e:	f022 0203 	bic.w	r2, r2, #3
 8007792:	3204      	adds	r2, #4
 8007794:	f104 0115 	add.w	r1, r4, #21
 8007798:	428f      	cmp	r7, r1
 800779a:	bf38      	it	cc
 800779c:	2204      	movcc	r2, #4
 800779e:	9201      	str	r2, [sp, #4]
 80077a0:	9a02      	ldr	r2, [sp, #8]
 80077a2:	9303      	str	r3, [sp, #12]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d80c      	bhi.n	80077c2 <__multiply+0x9e>
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	dd03      	ble.n	80077b4 <__multiply+0x90>
 80077ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d05a      	beq.n	800786a <__multiply+0x146>
 80077b4:	6106      	str	r6, [r0, #16]
 80077b6:	b005      	add	sp, #20
 80077b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077bc:	f843 2b04 	str.w	r2, [r3], #4
 80077c0:	e7d8      	b.n	8007774 <__multiply+0x50>
 80077c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80077c6:	f1ba 0f00 	cmp.w	sl, #0
 80077ca:	d024      	beq.n	8007816 <__multiply+0xf2>
 80077cc:	f104 0e14 	add.w	lr, r4, #20
 80077d0:	46a9      	mov	r9, r5
 80077d2:	f04f 0c00 	mov.w	ip, #0
 80077d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077da:	f8d9 1000 	ldr.w	r1, [r9]
 80077de:	fa1f fb82 	uxth.w	fp, r2
 80077e2:	b289      	uxth	r1, r1
 80077e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80077e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80077ec:	f8d9 2000 	ldr.w	r2, [r9]
 80077f0:	4461      	add	r1, ip
 80077f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80077fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077fe:	b289      	uxth	r1, r1
 8007800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007804:	4577      	cmp	r7, lr
 8007806:	f849 1b04 	str.w	r1, [r9], #4
 800780a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800780e:	d8e2      	bhi.n	80077d6 <__multiply+0xb2>
 8007810:	9a01      	ldr	r2, [sp, #4]
 8007812:	f845 c002 	str.w	ip, [r5, r2]
 8007816:	9a03      	ldr	r2, [sp, #12]
 8007818:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800781c:	3304      	adds	r3, #4
 800781e:	f1b9 0f00 	cmp.w	r9, #0
 8007822:	d020      	beq.n	8007866 <__multiply+0x142>
 8007824:	6829      	ldr	r1, [r5, #0]
 8007826:	f104 0c14 	add.w	ip, r4, #20
 800782a:	46ae      	mov	lr, r5
 800782c:	f04f 0a00 	mov.w	sl, #0
 8007830:	f8bc b000 	ldrh.w	fp, [ip]
 8007834:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007838:	fb09 220b 	mla	r2, r9, fp, r2
 800783c:	4492      	add	sl, r2
 800783e:	b289      	uxth	r1, r1
 8007840:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007844:	f84e 1b04 	str.w	r1, [lr], #4
 8007848:	f85c 2b04 	ldr.w	r2, [ip], #4
 800784c:	f8be 1000 	ldrh.w	r1, [lr]
 8007850:	0c12      	lsrs	r2, r2, #16
 8007852:	fb09 1102 	mla	r1, r9, r2, r1
 8007856:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800785a:	4567      	cmp	r7, ip
 800785c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007860:	d8e6      	bhi.n	8007830 <__multiply+0x10c>
 8007862:	9a01      	ldr	r2, [sp, #4]
 8007864:	50a9      	str	r1, [r5, r2]
 8007866:	3504      	adds	r5, #4
 8007868:	e79a      	b.n	80077a0 <__multiply+0x7c>
 800786a:	3e01      	subs	r6, #1
 800786c:	e79c      	b.n	80077a8 <__multiply+0x84>
 800786e:	bf00      	nop
 8007870:	0800858b 	.word	0x0800858b
 8007874:	080085fc 	.word	0x080085fc

08007878 <__pow5mult>:
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	4615      	mov	r5, r2
 800787e:	f012 0203 	ands.w	r2, r2, #3
 8007882:	4606      	mov	r6, r0
 8007884:	460f      	mov	r7, r1
 8007886:	d007      	beq.n	8007898 <__pow5mult+0x20>
 8007888:	4c25      	ldr	r4, [pc, #148]	; (8007920 <__pow5mult+0xa8>)
 800788a:	3a01      	subs	r2, #1
 800788c:	2300      	movs	r3, #0
 800788e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007892:	f7ff fe9b 	bl	80075cc <__multadd>
 8007896:	4607      	mov	r7, r0
 8007898:	10ad      	asrs	r5, r5, #2
 800789a:	d03d      	beq.n	8007918 <__pow5mult+0xa0>
 800789c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800789e:	b97c      	cbnz	r4, 80078c0 <__pow5mult+0x48>
 80078a0:	2010      	movs	r0, #16
 80078a2:	f7ff fe1b 	bl	80074dc <malloc>
 80078a6:	4602      	mov	r2, r0
 80078a8:	6270      	str	r0, [r6, #36]	; 0x24
 80078aa:	b928      	cbnz	r0, 80078b8 <__pow5mult+0x40>
 80078ac:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <__pow5mult+0xac>)
 80078ae:	481e      	ldr	r0, [pc, #120]	; (8007928 <__pow5mult+0xb0>)
 80078b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078b4:	f000 fcaa 	bl	800820c <__assert_func>
 80078b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078bc:	6004      	str	r4, [r0, #0]
 80078be:	60c4      	str	r4, [r0, #12]
 80078c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078c8:	b94c      	cbnz	r4, 80078de <__pow5mult+0x66>
 80078ca:	f240 2171 	movw	r1, #625	; 0x271
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ff12 	bl	80076f8 <__i2b>
 80078d4:	2300      	movs	r3, #0
 80078d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078da:	4604      	mov	r4, r0
 80078dc:	6003      	str	r3, [r0, #0]
 80078de:	f04f 0900 	mov.w	r9, #0
 80078e2:	07eb      	lsls	r3, r5, #31
 80078e4:	d50a      	bpl.n	80078fc <__pow5mult+0x84>
 80078e6:	4639      	mov	r1, r7
 80078e8:	4622      	mov	r2, r4
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ff1a 	bl	8007724 <__multiply>
 80078f0:	4639      	mov	r1, r7
 80078f2:	4680      	mov	r8, r0
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7ff fe47 	bl	8007588 <_Bfree>
 80078fa:	4647      	mov	r7, r8
 80078fc:	106d      	asrs	r5, r5, #1
 80078fe:	d00b      	beq.n	8007918 <__pow5mult+0xa0>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	b938      	cbnz	r0, 8007914 <__pow5mult+0x9c>
 8007904:	4622      	mov	r2, r4
 8007906:	4621      	mov	r1, r4
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff ff0b 	bl	8007724 <__multiply>
 800790e:	6020      	str	r0, [r4, #0]
 8007910:	f8c0 9000 	str.w	r9, [r0]
 8007914:	4604      	mov	r4, r0
 8007916:	e7e4      	b.n	80078e2 <__pow5mult+0x6a>
 8007918:	4638      	mov	r0, r7
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	bf00      	nop
 8007920:	08008748 	.word	0x08008748
 8007924:	08008519 	.word	0x08008519
 8007928:	080085fc 	.word	0x080085fc

0800792c <__lshift>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	460c      	mov	r4, r1
 8007932:	6849      	ldr	r1, [r1, #4]
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	4607      	mov	r7, r0
 800793e:	4691      	mov	r9, r2
 8007940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007944:	f108 0601 	add.w	r6, r8, #1
 8007948:	42b3      	cmp	r3, r6
 800794a:	db0b      	blt.n	8007964 <__lshift+0x38>
 800794c:	4638      	mov	r0, r7
 800794e:	f7ff fddb 	bl	8007508 <_Balloc>
 8007952:	4605      	mov	r5, r0
 8007954:	b948      	cbnz	r0, 800796a <__lshift+0x3e>
 8007956:	4602      	mov	r2, r0
 8007958:	4b2a      	ldr	r3, [pc, #168]	; (8007a04 <__lshift+0xd8>)
 800795a:	482b      	ldr	r0, [pc, #172]	; (8007a08 <__lshift+0xdc>)
 800795c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007960:	f000 fc54 	bl	800820c <__assert_func>
 8007964:	3101      	adds	r1, #1
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	e7ee      	b.n	8007948 <__lshift+0x1c>
 800796a:	2300      	movs	r3, #0
 800796c:	f100 0114 	add.w	r1, r0, #20
 8007970:	f100 0210 	add.w	r2, r0, #16
 8007974:	4618      	mov	r0, r3
 8007976:	4553      	cmp	r3, sl
 8007978:	db37      	blt.n	80079ea <__lshift+0xbe>
 800797a:	6920      	ldr	r0, [r4, #16]
 800797c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007980:	f104 0314 	add.w	r3, r4, #20
 8007984:	f019 091f 	ands.w	r9, r9, #31
 8007988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800798c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007990:	d02f      	beq.n	80079f2 <__lshift+0xc6>
 8007992:	f1c9 0e20 	rsb	lr, r9, #32
 8007996:	468a      	mov	sl, r1
 8007998:	f04f 0c00 	mov.w	ip, #0
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	fa02 f209 	lsl.w	r2, r2, r9
 80079a2:	ea42 020c 	orr.w	r2, r2, ip
 80079a6:	f84a 2b04 	str.w	r2, [sl], #4
 80079aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ae:	4298      	cmp	r0, r3
 80079b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079b4:	d8f2      	bhi.n	800799c <__lshift+0x70>
 80079b6:	1b03      	subs	r3, r0, r4
 80079b8:	3b15      	subs	r3, #21
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	3304      	adds	r3, #4
 80079c0:	f104 0215 	add.w	r2, r4, #21
 80079c4:	4290      	cmp	r0, r2
 80079c6:	bf38      	it	cc
 80079c8:	2304      	movcc	r3, #4
 80079ca:	f841 c003 	str.w	ip, [r1, r3]
 80079ce:	f1bc 0f00 	cmp.w	ip, #0
 80079d2:	d001      	beq.n	80079d8 <__lshift+0xac>
 80079d4:	f108 0602 	add.w	r6, r8, #2
 80079d8:	3e01      	subs	r6, #1
 80079da:	4638      	mov	r0, r7
 80079dc:	612e      	str	r6, [r5, #16]
 80079de:	4621      	mov	r1, r4
 80079e0:	f7ff fdd2 	bl	8007588 <_Bfree>
 80079e4:	4628      	mov	r0, r5
 80079e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80079ee:	3301      	adds	r3, #1
 80079f0:	e7c1      	b.n	8007976 <__lshift+0x4a>
 80079f2:	3904      	subs	r1, #4
 80079f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079fc:	4298      	cmp	r0, r3
 80079fe:	d8f9      	bhi.n	80079f4 <__lshift+0xc8>
 8007a00:	e7ea      	b.n	80079d8 <__lshift+0xac>
 8007a02:	bf00      	nop
 8007a04:	0800858b 	.word	0x0800858b
 8007a08:	080085fc 	.word	0x080085fc

08007a0c <__mcmp>:
 8007a0c:	b530      	push	{r4, r5, lr}
 8007a0e:	6902      	ldr	r2, [r0, #16]
 8007a10:	690c      	ldr	r4, [r1, #16]
 8007a12:	1b12      	subs	r2, r2, r4
 8007a14:	d10e      	bne.n	8007a34 <__mcmp+0x28>
 8007a16:	f100 0314 	add.w	r3, r0, #20
 8007a1a:	3114      	adds	r1, #20
 8007a1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a2c:	42a5      	cmp	r5, r4
 8007a2e:	d003      	beq.n	8007a38 <__mcmp+0x2c>
 8007a30:	d305      	bcc.n	8007a3e <__mcmp+0x32>
 8007a32:	2201      	movs	r2, #1
 8007a34:	4610      	mov	r0, r2
 8007a36:	bd30      	pop	{r4, r5, pc}
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	d3f3      	bcc.n	8007a24 <__mcmp+0x18>
 8007a3c:	e7fa      	b.n	8007a34 <__mcmp+0x28>
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	e7f7      	b.n	8007a34 <__mcmp+0x28>

08007a44 <__mdiff>:
 8007a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4690      	mov	r8, r2
 8007a52:	f7ff ffdb 	bl	8007a0c <__mcmp>
 8007a56:	1e05      	subs	r5, r0, #0
 8007a58:	d110      	bne.n	8007a7c <__mdiff+0x38>
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff fd53 	bl	8007508 <_Balloc>
 8007a62:	b930      	cbnz	r0, 8007a72 <__mdiff+0x2e>
 8007a64:	4b3a      	ldr	r3, [pc, #232]	; (8007b50 <__mdiff+0x10c>)
 8007a66:	4602      	mov	r2, r0
 8007a68:	f240 2132 	movw	r1, #562	; 0x232
 8007a6c:	4839      	ldr	r0, [pc, #228]	; (8007b54 <__mdiff+0x110>)
 8007a6e:	f000 fbcd 	bl	800820c <__assert_func>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	bfa4      	itt	ge
 8007a7e:	4643      	movge	r3, r8
 8007a80:	46a0      	movge	r8, r4
 8007a82:	4630      	mov	r0, r6
 8007a84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a88:	bfa6      	itte	ge
 8007a8a:	461c      	movge	r4, r3
 8007a8c:	2500      	movge	r5, #0
 8007a8e:	2501      	movlt	r5, #1
 8007a90:	f7ff fd3a 	bl	8007508 <_Balloc>
 8007a94:	b920      	cbnz	r0, 8007aa0 <__mdiff+0x5c>
 8007a96:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <__mdiff+0x10c>)
 8007a98:	4602      	mov	r2, r0
 8007a9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a9e:	e7e5      	b.n	8007a6c <__mdiff+0x28>
 8007aa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007aa4:	6926      	ldr	r6, [r4, #16]
 8007aa6:	60c5      	str	r5, [r0, #12]
 8007aa8:	f104 0914 	add.w	r9, r4, #20
 8007aac:	f108 0514 	add.w	r5, r8, #20
 8007ab0:	f100 0e14 	add.w	lr, r0, #20
 8007ab4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007abc:	f108 0210 	add.w	r2, r8, #16
 8007ac0:	46f2      	mov	sl, lr
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007acc:	fa1f f883 	uxth.w	r8, r3
 8007ad0:	fa11 f18b 	uxtah	r1, r1, fp
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	eba1 0808 	sub.w	r8, r1, r8
 8007ada:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ade:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ae2:	fa1f f888 	uxth.w	r8, r8
 8007ae6:	1419      	asrs	r1, r3, #16
 8007ae8:	454e      	cmp	r6, r9
 8007aea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007aee:	f84a 3b04 	str.w	r3, [sl], #4
 8007af2:	d8e7      	bhi.n	8007ac4 <__mdiff+0x80>
 8007af4:	1b33      	subs	r3, r6, r4
 8007af6:	3b15      	subs	r3, #21
 8007af8:	f023 0303 	bic.w	r3, r3, #3
 8007afc:	3304      	adds	r3, #4
 8007afe:	3415      	adds	r4, #21
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	bf38      	it	cc
 8007b04:	2304      	movcc	r3, #4
 8007b06:	441d      	add	r5, r3
 8007b08:	4473      	add	r3, lr
 8007b0a:	469e      	mov	lr, r3
 8007b0c:	462e      	mov	r6, r5
 8007b0e:	4566      	cmp	r6, ip
 8007b10:	d30e      	bcc.n	8007b30 <__mdiff+0xec>
 8007b12:	f10c 0203 	add.w	r2, ip, #3
 8007b16:	1b52      	subs	r2, r2, r5
 8007b18:	f022 0203 	bic.w	r2, r2, #3
 8007b1c:	3d03      	subs	r5, #3
 8007b1e:	45ac      	cmp	ip, r5
 8007b20:	bf38      	it	cc
 8007b22:	2200      	movcc	r2, #0
 8007b24:	441a      	add	r2, r3
 8007b26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b2a:	b17b      	cbz	r3, 8007b4c <__mdiff+0x108>
 8007b2c:	6107      	str	r7, [r0, #16]
 8007b2e:	e7a3      	b.n	8007a78 <__mdiff+0x34>
 8007b30:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b34:	fa11 f288 	uxtah	r2, r1, r8
 8007b38:	1414      	asrs	r4, r2, #16
 8007b3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b3e:	b292      	uxth	r2, r2
 8007b40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b44:	f84e 2b04 	str.w	r2, [lr], #4
 8007b48:	1421      	asrs	r1, r4, #16
 8007b4a:	e7e0      	b.n	8007b0e <__mdiff+0xca>
 8007b4c:	3f01      	subs	r7, #1
 8007b4e:	e7ea      	b.n	8007b26 <__mdiff+0xe2>
 8007b50:	0800858b 	.word	0x0800858b
 8007b54:	080085fc 	.word	0x080085fc

08007b58 <__d2b>:
 8007b58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	4689      	mov	r9, r1
 8007b5e:	2101      	movs	r1, #1
 8007b60:	ec57 6b10 	vmov	r6, r7, d0
 8007b64:	4690      	mov	r8, r2
 8007b66:	f7ff fccf 	bl	8007508 <_Balloc>
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	b930      	cbnz	r0, 8007b7c <__d2b+0x24>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	4b25      	ldr	r3, [pc, #148]	; (8007c08 <__d2b+0xb0>)
 8007b72:	4826      	ldr	r0, [pc, #152]	; (8007c0c <__d2b+0xb4>)
 8007b74:	f240 310a 	movw	r1, #778	; 0x30a
 8007b78:	f000 fb48 	bl	800820c <__assert_func>
 8007b7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b84:	bb35      	cbnz	r5, 8007bd4 <__d2b+0x7c>
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	d028      	beq.n	8007bde <__d2b+0x86>
 8007b8c:	4668      	mov	r0, sp
 8007b8e:	9600      	str	r6, [sp, #0]
 8007b90:	f7ff fd82 	bl	8007698 <__lo0bits>
 8007b94:	9900      	ldr	r1, [sp, #0]
 8007b96:	b300      	cbz	r0, 8007bda <__d2b+0x82>
 8007b98:	9a01      	ldr	r2, [sp, #4]
 8007b9a:	f1c0 0320 	rsb	r3, r0, #32
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	40c2      	lsrs	r2, r0
 8007ba6:	6163      	str	r3, [r4, #20]
 8007ba8:	9201      	str	r2, [sp, #4]
 8007baa:	9b01      	ldr	r3, [sp, #4]
 8007bac:	61a3      	str	r3, [r4, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bf14      	ite	ne
 8007bb2:	2202      	movne	r2, #2
 8007bb4:	2201      	moveq	r2, #1
 8007bb6:	6122      	str	r2, [r4, #16]
 8007bb8:	b1d5      	cbz	r5, 8007bf0 <__d2b+0x98>
 8007bba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bbe:	4405      	add	r5, r0
 8007bc0:	f8c9 5000 	str.w	r5, [r9]
 8007bc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bc8:	f8c8 0000 	str.w	r0, [r8]
 8007bcc:	4620      	mov	r0, r4
 8007bce:	b003      	add	sp, #12
 8007bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bd8:	e7d5      	b.n	8007b86 <__d2b+0x2e>
 8007bda:	6161      	str	r1, [r4, #20]
 8007bdc:	e7e5      	b.n	8007baa <__d2b+0x52>
 8007bde:	a801      	add	r0, sp, #4
 8007be0:	f7ff fd5a 	bl	8007698 <__lo0bits>
 8007be4:	9b01      	ldr	r3, [sp, #4]
 8007be6:	6163      	str	r3, [r4, #20]
 8007be8:	2201      	movs	r2, #1
 8007bea:	6122      	str	r2, [r4, #16]
 8007bec:	3020      	adds	r0, #32
 8007bee:	e7e3      	b.n	8007bb8 <__d2b+0x60>
 8007bf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bf8:	f8c9 0000 	str.w	r0, [r9]
 8007bfc:	6918      	ldr	r0, [r3, #16]
 8007bfe:	f7ff fd2b 	bl	8007658 <__hi0bits>
 8007c02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c06:	e7df      	b.n	8007bc8 <__d2b+0x70>
 8007c08:	0800858b 	.word	0x0800858b
 8007c0c:	080085fc 	.word	0x080085fc

08007c10 <_calloc_r>:
 8007c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c12:	fba1 2402 	umull	r2, r4, r1, r2
 8007c16:	b94c      	cbnz	r4, 8007c2c <_calloc_r+0x1c>
 8007c18:	4611      	mov	r1, r2
 8007c1a:	9201      	str	r2, [sp, #4]
 8007c1c:	f000 f87a 	bl	8007d14 <_malloc_r>
 8007c20:	9a01      	ldr	r2, [sp, #4]
 8007c22:	4605      	mov	r5, r0
 8007c24:	b930      	cbnz	r0, 8007c34 <_calloc_r+0x24>
 8007c26:	4628      	mov	r0, r5
 8007c28:	b003      	add	sp, #12
 8007c2a:	bd30      	pop	{r4, r5, pc}
 8007c2c:	220c      	movs	r2, #12
 8007c2e:	6002      	str	r2, [r0, #0]
 8007c30:	2500      	movs	r5, #0
 8007c32:	e7f8      	b.n	8007c26 <_calloc_r+0x16>
 8007c34:	4621      	mov	r1, r4
 8007c36:	f7fd fddb 	bl	80057f0 <memset>
 8007c3a:	e7f4      	b.n	8007c26 <_calloc_r+0x16>

08007c3c <_free_r>:
 8007c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d044      	beq.n	8007ccc <_free_r+0x90>
 8007c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c46:	9001      	str	r0, [sp, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c4e:	bfb8      	it	lt
 8007c50:	18e4      	addlt	r4, r4, r3
 8007c52:	f000 fb61 	bl	8008318 <__malloc_lock>
 8007c56:	4a1e      	ldr	r2, [pc, #120]	; (8007cd0 <_free_r+0x94>)
 8007c58:	9801      	ldr	r0, [sp, #4]
 8007c5a:	6813      	ldr	r3, [r2, #0]
 8007c5c:	b933      	cbnz	r3, 8007c6c <_free_r+0x30>
 8007c5e:	6063      	str	r3, [r4, #4]
 8007c60:	6014      	str	r4, [r2, #0]
 8007c62:	b003      	add	sp, #12
 8007c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c68:	f000 bb5c 	b.w	8008324 <__malloc_unlock>
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d908      	bls.n	8007c82 <_free_r+0x46>
 8007c70:	6825      	ldr	r5, [r4, #0]
 8007c72:	1961      	adds	r1, r4, r5
 8007c74:	428b      	cmp	r3, r1
 8007c76:	bf01      	itttt	eq
 8007c78:	6819      	ldreq	r1, [r3, #0]
 8007c7a:	685b      	ldreq	r3, [r3, #4]
 8007c7c:	1949      	addeq	r1, r1, r5
 8007c7e:	6021      	streq	r1, [r4, #0]
 8007c80:	e7ed      	b.n	8007c5e <_free_r+0x22>
 8007c82:	461a      	mov	r2, r3
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	b10b      	cbz	r3, 8007c8c <_free_r+0x50>
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d9fa      	bls.n	8007c82 <_free_r+0x46>
 8007c8c:	6811      	ldr	r1, [r2, #0]
 8007c8e:	1855      	adds	r5, r2, r1
 8007c90:	42a5      	cmp	r5, r4
 8007c92:	d10b      	bne.n	8007cac <_free_r+0x70>
 8007c94:	6824      	ldr	r4, [r4, #0]
 8007c96:	4421      	add	r1, r4
 8007c98:	1854      	adds	r4, r2, r1
 8007c9a:	42a3      	cmp	r3, r4
 8007c9c:	6011      	str	r1, [r2, #0]
 8007c9e:	d1e0      	bne.n	8007c62 <_free_r+0x26>
 8007ca0:	681c      	ldr	r4, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	6053      	str	r3, [r2, #4]
 8007ca6:	4421      	add	r1, r4
 8007ca8:	6011      	str	r1, [r2, #0]
 8007caa:	e7da      	b.n	8007c62 <_free_r+0x26>
 8007cac:	d902      	bls.n	8007cb4 <_free_r+0x78>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	6003      	str	r3, [r0, #0]
 8007cb2:	e7d6      	b.n	8007c62 <_free_r+0x26>
 8007cb4:	6825      	ldr	r5, [r4, #0]
 8007cb6:	1961      	adds	r1, r4, r5
 8007cb8:	428b      	cmp	r3, r1
 8007cba:	bf04      	itt	eq
 8007cbc:	6819      	ldreq	r1, [r3, #0]
 8007cbe:	685b      	ldreq	r3, [r3, #4]
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	bf04      	itt	eq
 8007cc4:	1949      	addeq	r1, r1, r5
 8007cc6:	6021      	streq	r1, [r4, #0]
 8007cc8:	6054      	str	r4, [r2, #4]
 8007cca:	e7ca      	b.n	8007c62 <_free_r+0x26>
 8007ccc:	b003      	add	sp, #12
 8007cce:	bd30      	pop	{r4, r5, pc}
 8007cd0:	20000488 	.word	0x20000488

08007cd4 <sbrk_aligned>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	4e0e      	ldr	r6, [pc, #56]	; (8007d10 <sbrk_aligned+0x3c>)
 8007cd8:	460c      	mov	r4, r1
 8007cda:	6831      	ldr	r1, [r6, #0]
 8007cdc:	4605      	mov	r5, r0
 8007cde:	b911      	cbnz	r1, 8007ce6 <sbrk_aligned+0x12>
 8007ce0:	f000 fa2e 	bl	8008140 <_sbrk_r>
 8007ce4:	6030      	str	r0, [r6, #0]
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 fa29 	bl	8008140 <_sbrk_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d00a      	beq.n	8007d08 <sbrk_aligned+0x34>
 8007cf2:	1cc4      	adds	r4, r0, #3
 8007cf4:	f024 0403 	bic.w	r4, r4, #3
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	d007      	beq.n	8007d0c <sbrk_aligned+0x38>
 8007cfc:	1a21      	subs	r1, r4, r0
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 fa1e 	bl	8008140 <_sbrk_r>
 8007d04:	3001      	adds	r0, #1
 8007d06:	d101      	bne.n	8007d0c <sbrk_aligned+0x38>
 8007d08:	f04f 34ff 	mov.w	r4, #4294967295
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	2000048c 	.word	0x2000048c

08007d14 <_malloc_r>:
 8007d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d18:	1ccd      	adds	r5, r1, #3
 8007d1a:	f025 0503 	bic.w	r5, r5, #3
 8007d1e:	3508      	adds	r5, #8
 8007d20:	2d0c      	cmp	r5, #12
 8007d22:	bf38      	it	cc
 8007d24:	250c      	movcc	r5, #12
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	4607      	mov	r7, r0
 8007d2a:	db01      	blt.n	8007d30 <_malloc_r+0x1c>
 8007d2c:	42a9      	cmp	r1, r5
 8007d2e:	d905      	bls.n	8007d3c <_malloc_r+0x28>
 8007d30:	230c      	movs	r3, #12
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	2600      	movs	r6, #0
 8007d36:	4630      	mov	r0, r6
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	4e2e      	ldr	r6, [pc, #184]	; (8007df8 <_malloc_r+0xe4>)
 8007d3e:	f000 faeb 	bl	8008318 <__malloc_lock>
 8007d42:	6833      	ldr	r3, [r6, #0]
 8007d44:	461c      	mov	r4, r3
 8007d46:	bb34      	cbnz	r4, 8007d96 <_malloc_r+0x82>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f7ff ffc2 	bl	8007cd4 <sbrk_aligned>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	4604      	mov	r4, r0
 8007d54:	d14d      	bne.n	8007df2 <_malloc_r+0xde>
 8007d56:	6834      	ldr	r4, [r6, #0]
 8007d58:	4626      	mov	r6, r4
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	d140      	bne.n	8007de0 <_malloc_r+0xcc>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	4631      	mov	r1, r6
 8007d62:	4638      	mov	r0, r7
 8007d64:	eb04 0803 	add.w	r8, r4, r3
 8007d68:	f000 f9ea 	bl	8008140 <_sbrk_r>
 8007d6c:	4580      	cmp	r8, r0
 8007d6e:	d13a      	bne.n	8007de6 <_malloc_r+0xd2>
 8007d70:	6821      	ldr	r1, [r4, #0]
 8007d72:	3503      	adds	r5, #3
 8007d74:	1a6d      	subs	r5, r5, r1
 8007d76:	f025 0503 	bic.w	r5, r5, #3
 8007d7a:	3508      	adds	r5, #8
 8007d7c:	2d0c      	cmp	r5, #12
 8007d7e:	bf38      	it	cc
 8007d80:	250c      	movcc	r5, #12
 8007d82:	4629      	mov	r1, r5
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7ff ffa5 	bl	8007cd4 <sbrk_aligned>
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d02b      	beq.n	8007de6 <_malloc_r+0xd2>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	442b      	add	r3, r5
 8007d92:	6023      	str	r3, [r4, #0]
 8007d94:	e00e      	b.n	8007db4 <_malloc_r+0xa0>
 8007d96:	6822      	ldr	r2, [r4, #0]
 8007d98:	1b52      	subs	r2, r2, r5
 8007d9a:	d41e      	bmi.n	8007dda <_malloc_r+0xc6>
 8007d9c:	2a0b      	cmp	r2, #11
 8007d9e:	d916      	bls.n	8007dce <_malloc_r+0xba>
 8007da0:	1961      	adds	r1, r4, r5
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	6025      	str	r5, [r4, #0]
 8007da6:	bf18      	it	ne
 8007da8:	6059      	strne	r1, [r3, #4]
 8007daa:	6863      	ldr	r3, [r4, #4]
 8007dac:	bf08      	it	eq
 8007dae:	6031      	streq	r1, [r6, #0]
 8007db0:	5162      	str	r2, [r4, r5]
 8007db2:	604b      	str	r3, [r1, #4]
 8007db4:	4638      	mov	r0, r7
 8007db6:	f104 060b 	add.w	r6, r4, #11
 8007dba:	f000 fab3 	bl	8008324 <__malloc_unlock>
 8007dbe:	f026 0607 	bic.w	r6, r6, #7
 8007dc2:	1d23      	adds	r3, r4, #4
 8007dc4:	1af2      	subs	r2, r6, r3
 8007dc6:	d0b6      	beq.n	8007d36 <_malloc_r+0x22>
 8007dc8:	1b9b      	subs	r3, r3, r6
 8007dca:	50a3      	str	r3, [r4, r2]
 8007dcc:	e7b3      	b.n	8007d36 <_malloc_r+0x22>
 8007dce:	6862      	ldr	r2, [r4, #4]
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	bf0c      	ite	eq
 8007dd4:	6032      	streq	r2, [r6, #0]
 8007dd6:	605a      	strne	r2, [r3, #4]
 8007dd8:	e7ec      	b.n	8007db4 <_malloc_r+0xa0>
 8007dda:	4623      	mov	r3, r4
 8007ddc:	6864      	ldr	r4, [r4, #4]
 8007dde:	e7b2      	b.n	8007d46 <_malloc_r+0x32>
 8007de0:	4634      	mov	r4, r6
 8007de2:	6876      	ldr	r6, [r6, #4]
 8007de4:	e7b9      	b.n	8007d5a <_malloc_r+0x46>
 8007de6:	230c      	movs	r3, #12
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	4638      	mov	r0, r7
 8007dec:	f000 fa9a 	bl	8008324 <__malloc_unlock>
 8007df0:	e7a1      	b.n	8007d36 <_malloc_r+0x22>
 8007df2:	6025      	str	r5, [r4, #0]
 8007df4:	e7de      	b.n	8007db4 <_malloc_r+0xa0>
 8007df6:	bf00      	nop
 8007df8:	20000488 	.word	0x20000488

08007dfc <__sfputc_r>:
 8007dfc:	6893      	ldr	r3, [r2, #8]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	b410      	push	{r4}
 8007e04:	6093      	str	r3, [r2, #8]
 8007e06:	da08      	bge.n	8007e1a <__sfputc_r+0x1e>
 8007e08:	6994      	ldr	r4, [r2, #24]
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	db01      	blt.n	8007e12 <__sfputc_r+0x16>
 8007e0e:	290a      	cmp	r1, #10
 8007e10:	d103      	bne.n	8007e1a <__sfputc_r+0x1e>
 8007e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e16:	f7fe ba01 	b.w	800621c <__swbuf_r>
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	1c58      	adds	r0, r3, #1
 8007e1e:	6010      	str	r0, [r2, #0]
 8007e20:	7019      	strb	r1, [r3, #0]
 8007e22:	4608      	mov	r0, r1
 8007e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <__sfputs_r>:
 8007e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	460f      	mov	r7, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	18d5      	adds	r5, r2, r3
 8007e34:	42ac      	cmp	r4, r5
 8007e36:	d101      	bne.n	8007e3c <__sfputs_r+0x12>
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e007      	b.n	8007e4c <__sfputs_r+0x22>
 8007e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e40:	463a      	mov	r2, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ffda 	bl	8007dfc <__sfputc_r>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d1f3      	bne.n	8007e34 <__sfputs_r+0xa>
 8007e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e50 <_vfiprintf_r>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	460d      	mov	r5, r1
 8007e56:	b09d      	sub	sp, #116	; 0x74
 8007e58:	4614      	mov	r4, r2
 8007e5a:	4698      	mov	r8, r3
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	b118      	cbz	r0, 8007e68 <_vfiprintf_r+0x18>
 8007e60:	6983      	ldr	r3, [r0, #24]
 8007e62:	b90b      	cbnz	r3, 8007e68 <_vfiprintf_r+0x18>
 8007e64:	f7ff fa30 	bl	80072c8 <__sinit>
 8007e68:	4b89      	ldr	r3, [pc, #548]	; (8008090 <_vfiprintf_r+0x240>)
 8007e6a:	429d      	cmp	r5, r3
 8007e6c:	d11b      	bne.n	8007ea6 <_vfiprintf_r+0x56>
 8007e6e:	6875      	ldr	r5, [r6, #4]
 8007e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e72:	07d9      	lsls	r1, r3, #31
 8007e74:	d405      	bmi.n	8007e82 <_vfiprintf_r+0x32>
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	059a      	lsls	r2, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_vfiprintf_r+0x32>
 8007e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e7e:	f7ff fac6 	bl	800740e <__retarget_lock_acquire_recursive>
 8007e82:	89ab      	ldrh	r3, [r5, #12]
 8007e84:	071b      	lsls	r3, r3, #28
 8007e86:	d501      	bpl.n	8007e8c <_vfiprintf_r+0x3c>
 8007e88:	692b      	ldr	r3, [r5, #16]
 8007e8a:	b9eb      	cbnz	r3, 8007ec8 <_vfiprintf_r+0x78>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7fe fa16 	bl	80062c0 <__swsetup_r>
 8007e94:	b1c0      	cbz	r0, 8007ec8 <_vfiprintf_r+0x78>
 8007e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e98:	07dc      	lsls	r4, r3, #31
 8007e9a:	d50e      	bpl.n	8007eba <_vfiprintf_r+0x6a>
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	b01d      	add	sp, #116	; 0x74
 8007ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea6:	4b7b      	ldr	r3, [pc, #492]	; (8008094 <_vfiprintf_r+0x244>)
 8007ea8:	429d      	cmp	r5, r3
 8007eaa:	d101      	bne.n	8007eb0 <_vfiprintf_r+0x60>
 8007eac:	68b5      	ldr	r5, [r6, #8]
 8007eae:	e7df      	b.n	8007e70 <_vfiprintf_r+0x20>
 8007eb0:	4b79      	ldr	r3, [pc, #484]	; (8008098 <_vfiprintf_r+0x248>)
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	bf08      	it	eq
 8007eb6:	68f5      	ldreq	r5, [r6, #12]
 8007eb8:	e7da      	b.n	8007e70 <_vfiprintf_r+0x20>
 8007eba:	89ab      	ldrh	r3, [r5, #12]
 8007ebc:	0598      	lsls	r0, r3, #22
 8007ebe:	d4ed      	bmi.n	8007e9c <_vfiprintf_r+0x4c>
 8007ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ec2:	f7ff faa5 	bl	8007410 <__retarget_lock_release_recursive>
 8007ec6:	e7e9      	b.n	8007e9c <_vfiprintf_r+0x4c>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ecc:	2320      	movs	r3, #32
 8007ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ed6:	2330      	movs	r3, #48	; 0x30
 8007ed8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800809c <_vfiprintf_r+0x24c>
 8007edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ee0:	f04f 0901 	mov.w	r9, #1
 8007ee4:	4623      	mov	r3, r4
 8007ee6:	469a      	mov	sl, r3
 8007ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eec:	b10a      	cbz	r2, 8007ef2 <_vfiprintf_r+0xa2>
 8007eee:	2a25      	cmp	r2, #37	; 0x25
 8007ef0:	d1f9      	bne.n	8007ee6 <_vfiprintf_r+0x96>
 8007ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ef6:	d00b      	beq.n	8007f10 <_vfiprintf_r+0xc0>
 8007ef8:	465b      	mov	r3, fp
 8007efa:	4622      	mov	r2, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7ff ff93 	bl	8007e2a <__sfputs_r>
 8007f04:	3001      	adds	r0, #1
 8007f06:	f000 80aa 	beq.w	800805e <_vfiprintf_r+0x20e>
 8007f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f0c:	445a      	add	r2, fp
 8007f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f10:	f89a 3000 	ldrb.w	r3, [sl]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80a2 	beq.w	800805e <_vfiprintf_r+0x20e>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f24:	f10a 0a01 	add.w	sl, sl, #1
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	9307      	str	r3, [sp, #28]
 8007f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f30:	931a      	str	r3, [sp, #104]	; 0x68
 8007f32:	4654      	mov	r4, sl
 8007f34:	2205      	movs	r2, #5
 8007f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3a:	4858      	ldr	r0, [pc, #352]	; (800809c <_vfiprintf_r+0x24c>)
 8007f3c:	f7f8 f950 	bl	80001e0 <memchr>
 8007f40:	9a04      	ldr	r2, [sp, #16]
 8007f42:	b9d8      	cbnz	r0, 8007f7c <_vfiprintf_r+0x12c>
 8007f44:	06d1      	lsls	r1, r2, #27
 8007f46:	bf44      	itt	mi
 8007f48:	2320      	movmi	r3, #32
 8007f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f4e:	0713      	lsls	r3, r2, #28
 8007f50:	bf44      	itt	mi
 8007f52:	232b      	movmi	r3, #43	; 0x2b
 8007f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f58:	f89a 3000 	ldrb.w	r3, [sl]
 8007f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f5e:	d015      	beq.n	8007f8c <_vfiprintf_r+0x13c>
 8007f60:	9a07      	ldr	r2, [sp, #28]
 8007f62:	4654      	mov	r4, sl
 8007f64:	2000      	movs	r0, #0
 8007f66:	f04f 0c0a 	mov.w	ip, #10
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f70:	3b30      	subs	r3, #48	; 0x30
 8007f72:	2b09      	cmp	r3, #9
 8007f74:	d94e      	bls.n	8008014 <_vfiprintf_r+0x1c4>
 8007f76:	b1b0      	cbz	r0, 8007fa6 <_vfiprintf_r+0x156>
 8007f78:	9207      	str	r2, [sp, #28]
 8007f7a:	e014      	b.n	8007fa6 <_vfiprintf_r+0x156>
 8007f7c:	eba0 0308 	sub.w	r3, r0, r8
 8007f80:	fa09 f303 	lsl.w	r3, r9, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	9304      	str	r3, [sp, #16]
 8007f88:	46a2      	mov	sl, r4
 8007f8a:	e7d2      	b.n	8007f32 <_vfiprintf_r+0xe2>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	1d19      	adds	r1, r3, #4
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	9103      	str	r1, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfbb      	ittet	lt
 8007f98:	425b      	neglt	r3, r3
 8007f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f9e:	9307      	strge	r3, [sp, #28]
 8007fa0:	9307      	strlt	r3, [sp, #28]
 8007fa2:	bfb8      	it	lt
 8007fa4:	9204      	strlt	r2, [sp, #16]
 8007fa6:	7823      	ldrb	r3, [r4, #0]
 8007fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8007faa:	d10c      	bne.n	8007fc6 <_vfiprintf_r+0x176>
 8007fac:	7863      	ldrb	r3, [r4, #1]
 8007fae:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb0:	d135      	bne.n	800801e <_vfiprintf_r+0x1ce>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	1d1a      	adds	r2, r3, #4
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	9203      	str	r2, [sp, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bfb8      	it	lt
 8007fbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fc2:	3402      	adds	r4, #2
 8007fc4:	9305      	str	r3, [sp, #20]
 8007fc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80080ac <_vfiprintf_r+0x25c>
 8007fca:	7821      	ldrb	r1, [r4, #0]
 8007fcc:	2203      	movs	r2, #3
 8007fce:	4650      	mov	r0, sl
 8007fd0:	f7f8 f906 	bl	80001e0 <memchr>
 8007fd4:	b140      	cbz	r0, 8007fe8 <_vfiprintf_r+0x198>
 8007fd6:	2340      	movs	r3, #64	; 0x40
 8007fd8:	eba0 000a 	sub.w	r0, r0, sl
 8007fdc:	fa03 f000 	lsl.w	r0, r3, r0
 8007fe0:	9b04      	ldr	r3, [sp, #16]
 8007fe2:	4303      	orrs	r3, r0
 8007fe4:	3401      	adds	r4, #1
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fec:	482c      	ldr	r0, [pc, #176]	; (80080a0 <_vfiprintf_r+0x250>)
 8007fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ff2:	2206      	movs	r2, #6
 8007ff4:	f7f8 f8f4 	bl	80001e0 <memchr>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d03f      	beq.n	800807c <_vfiprintf_r+0x22c>
 8007ffc:	4b29      	ldr	r3, [pc, #164]	; (80080a4 <_vfiprintf_r+0x254>)
 8007ffe:	bb1b      	cbnz	r3, 8008048 <_vfiprintf_r+0x1f8>
 8008000:	9b03      	ldr	r3, [sp, #12]
 8008002:	3307      	adds	r3, #7
 8008004:	f023 0307 	bic.w	r3, r3, #7
 8008008:	3308      	adds	r3, #8
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800e:	443b      	add	r3, r7
 8008010:	9309      	str	r3, [sp, #36]	; 0x24
 8008012:	e767      	b.n	8007ee4 <_vfiprintf_r+0x94>
 8008014:	fb0c 3202 	mla	r2, ip, r2, r3
 8008018:	460c      	mov	r4, r1
 800801a:	2001      	movs	r0, #1
 800801c:	e7a5      	b.n	8007f6a <_vfiprintf_r+0x11a>
 800801e:	2300      	movs	r3, #0
 8008020:	3401      	adds	r4, #1
 8008022:	9305      	str	r3, [sp, #20]
 8008024:	4619      	mov	r1, r3
 8008026:	f04f 0c0a 	mov.w	ip, #10
 800802a:	4620      	mov	r0, r4
 800802c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008030:	3a30      	subs	r2, #48	; 0x30
 8008032:	2a09      	cmp	r2, #9
 8008034:	d903      	bls.n	800803e <_vfiprintf_r+0x1ee>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0c5      	beq.n	8007fc6 <_vfiprintf_r+0x176>
 800803a:	9105      	str	r1, [sp, #20]
 800803c:	e7c3      	b.n	8007fc6 <_vfiprintf_r+0x176>
 800803e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008042:	4604      	mov	r4, r0
 8008044:	2301      	movs	r3, #1
 8008046:	e7f0      	b.n	800802a <_vfiprintf_r+0x1da>
 8008048:	ab03      	add	r3, sp, #12
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	462a      	mov	r2, r5
 800804e:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <_vfiprintf_r+0x258>)
 8008050:	a904      	add	r1, sp, #16
 8008052:	4630      	mov	r0, r6
 8008054:	f7fd fc74 	bl	8005940 <_printf_float>
 8008058:	4607      	mov	r7, r0
 800805a:	1c78      	adds	r0, r7, #1
 800805c:	d1d6      	bne.n	800800c <_vfiprintf_r+0x1bc>
 800805e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008060:	07d9      	lsls	r1, r3, #31
 8008062:	d405      	bmi.n	8008070 <_vfiprintf_r+0x220>
 8008064:	89ab      	ldrh	r3, [r5, #12]
 8008066:	059a      	lsls	r2, r3, #22
 8008068:	d402      	bmi.n	8008070 <_vfiprintf_r+0x220>
 800806a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800806c:	f7ff f9d0 	bl	8007410 <__retarget_lock_release_recursive>
 8008070:	89ab      	ldrh	r3, [r5, #12]
 8008072:	065b      	lsls	r3, r3, #25
 8008074:	f53f af12 	bmi.w	8007e9c <_vfiprintf_r+0x4c>
 8008078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800807a:	e711      	b.n	8007ea0 <_vfiprintf_r+0x50>
 800807c:	ab03      	add	r3, sp, #12
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	462a      	mov	r2, r5
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <_vfiprintf_r+0x258>)
 8008084:	a904      	add	r1, sp, #16
 8008086:	4630      	mov	r0, r6
 8008088:	f7fd fefe 	bl	8005e88 <_printf_i>
 800808c:	e7e4      	b.n	8008058 <_vfiprintf_r+0x208>
 800808e:	bf00      	nop
 8008090:	080085bc 	.word	0x080085bc
 8008094:	080085dc 	.word	0x080085dc
 8008098:	0800859c 	.word	0x0800859c
 800809c:	08008754 	.word	0x08008754
 80080a0:	0800875e 	.word	0x0800875e
 80080a4:	08005941 	.word	0x08005941
 80080a8:	08007e2b 	.word	0x08007e2b
 80080ac:	0800875a 	.word	0x0800875a

080080b0 <_putc_r>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	460d      	mov	r5, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	4606      	mov	r6, r0
 80080b8:	b118      	cbz	r0, 80080c2 <_putc_r+0x12>
 80080ba:	6983      	ldr	r3, [r0, #24]
 80080bc:	b90b      	cbnz	r3, 80080c2 <_putc_r+0x12>
 80080be:	f7ff f903 	bl	80072c8 <__sinit>
 80080c2:	4b1c      	ldr	r3, [pc, #112]	; (8008134 <_putc_r+0x84>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	d124      	bne.n	8008112 <_putc_r+0x62>
 80080c8:	6874      	ldr	r4, [r6, #4]
 80080ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080cc:	07d8      	lsls	r0, r3, #31
 80080ce:	d405      	bmi.n	80080dc <_putc_r+0x2c>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	0599      	lsls	r1, r3, #22
 80080d4:	d402      	bmi.n	80080dc <_putc_r+0x2c>
 80080d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080d8:	f7ff f999 	bl	800740e <__retarget_lock_acquire_recursive>
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	3b01      	subs	r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	da05      	bge.n	80080f2 <_putc_r+0x42>
 80080e6:	69a2      	ldr	r2, [r4, #24]
 80080e8:	4293      	cmp	r3, r2
 80080ea:	db1c      	blt.n	8008126 <_putc_r+0x76>
 80080ec:	b2eb      	uxtb	r3, r5
 80080ee:	2b0a      	cmp	r3, #10
 80080f0:	d019      	beq.n	8008126 <_putc_r+0x76>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	6022      	str	r2, [r4, #0]
 80080f8:	701d      	strb	r5, [r3, #0]
 80080fa:	b2ed      	uxtb	r5, r5
 80080fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080fe:	07da      	lsls	r2, r3, #31
 8008100:	d405      	bmi.n	800810e <_putc_r+0x5e>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	059b      	lsls	r3, r3, #22
 8008106:	d402      	bmi.n	800810e <_putc_r+0x5e>
 8008108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810a:	f7ff f981 	bl	8007410 <__retarget_lock_release_recursive>
 800810e:	4628      	mov	r0, r5
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <_putc_r+0x88>)
 8008114:	429c      	cmp	r4, r3
 8008116:	d101      	bne.n	800811c <_putc_r+0x6c>
 8008118:	68b4      	ldr	r4, [r6, #8]
 800811a:	e7d6      	b.n	80080ca <_putc_r+0x1a>
 800811c:	4b07      	ldr	r3, [pc, #28]	; (800813c <_putc_r+0x8c>)
 800811e:	429c      	cmp	r4, r3
 8008120:	bf08      	it	eq
 8008122:	68f4      	ldreq	r4, [r6, #12]
 8008124:	e7d1      	b.n	80080ca <_putc_r+0x1a>
 8008126:	4629      	mov	r1, r5
 8008128:	4622      	mov	r2, r4
 800812a:	4630      	mov	r0, r6
 800812c:	f7fe f876 	bl	800621c <__swbuf_r>
 8008130:	4605      	mov	r5, r0
 8008132:	e7e3      	b.n	80080fc <_putc_r+0x4c>
 8008134:	080085bc 	.word	0x080085bc
 8008138:	080085dc 	.word	0x080085dc
 800813c:	0800859c 	.word	0x0800859c

08008140 <_sbrk_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d06      	ldr	r5, [pc, #24]	; (800815c <_sbrk_r+0x1c>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	f7f9 fbf6 	bl	800193c <_sbrk>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_sbrk_r+0x1a>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_sbrk_r+0x1a>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	20000490 	.word	0x20000490

08008160 <__sread>:
 8008160:	b510      	push	{r4, lr}
 8008162:	460c      	mov	r4, r1
 8008164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008168:	f000 f8e2 	bl	8008330 <_read_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	bfab      	itete	ge
 8008170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008172:	89a3      	ldrhlt	r3, [r4, #12]
 8008174:	181b      	addge	r3, r3, r0
 8008176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800817a:	bfac      	ite	ge
 800817c:	6563      	strge	r3, [r4, #84]	; 0x54
 800817e:	81a3      	strhlt	r3, [r4, #12]
 8008180:	bd10      	pop	{r4, pc}

08008182 <__swrite>:
 8008182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008186:	461f      	mov	r7, r3
 8008188:	898b      	ldrh	r3, [r1, #12]
 800818a:	05db      	lsls	r3, r3, #23
 800818c:	4605      	mov	r5, r0
 800818e:	460c      	mov	r4, r1
 8008190:	4616      	mov	r6, r2
 8008192:	d505      	bpl.n	80081a0 <__swrite+0x1e>
 8008194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008198:	2302      	movs	r3, #2
 800819a:	2200      	movs	r2, #0
 800819c:	f000 f898 	bl	80082d0 <_lseek_r>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	4632      	mov	r2, r6
 80081ae:	463b      	mov	r3, r7
 80081b0:	4628      	mov	r0, r5
 80081b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	f000 b817 	b.w	80081e8 <_write_r>

080081ba <__sseek>:
 80081ba:	b510      	push	{r4, lr}
 80081bc:	460c      	mov	r4, r1
 80081be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c2:	f000 f885 	bl	80082d0 <_lseek_r>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	bf15      	itete	ne
 80081cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80081ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081d6:	81a3      	strheq	r3, [r4, #12]
 80081d8:	bf18      	it	ne
 80081da:	81a3      	strhne	r3, [r4, #12]
 80081dc:	bd10      	pop	{r4, pc}

080081de <__sclose>:
 80081de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e2:	f000 b831 	b.w	8008248 <_close_r>
	...

080081e8 <_write_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d07      	ldr	r5, [pc, #28]	; (8008208 <_write_r+0x20>)
 80081ec:	4604      	mov	r4, r0
 80081ee:	4608      	mov	r0, r1
 80081f0:	4611      	mov	r1, r2
 80081f2:	2200      	movs	r2, #0
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f7f9 fb50 	bl	800189c <_write>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <_write_r+0x1e>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b103      	cbz	r3, 8008206 <_write_r+0x1e>
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	20000490 	.word	0x20000490

0800820c <__assert_func>:
 800820c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800820e:	4614      	mov	r4, r2
 8008210:	461a      	mov	r2, r3
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <__assert_func+0x2c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4605      	mov	r5, r0
 8008218:	68d8      	ldr	r0, [r3, #12]
 800821a:	b14c      	cbz	r4, 8008230 <__assert_func+0x24>
 800821c:	4b07      	ldr	r3, [pc, #28]	; (800823c <__assert_func+0x30>)
 800821e:	9100      	str	r1, [sp, #0]
 8008220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008224:	4906      	ldr	r1, [pc, #24]	; (8008240 <__assert_func+0x34>)
 8008226:	462b      	mov	r3, r5
 8008228:	f000 f81e 	bl	8008268 <fiprintf>
 800822c:	f000 f89f 	bl	800836e <abort>
 8008230:	4b04      	ldr	r3, [pc, #16]	; (8008244 <__assert_func+0x38>)
 8008232:	461c      	mov	r4, r3
 8008234:	e7f3      	b.n	800821e <__assert_func+0x12>
 8008236:	bf00      	nop
 8008238:	2000000c 	.word	0x2000000c
 800823c:	08008765 	.word	0x08008765
 8008240:	08008772 	.word	0x08008772
 8008244:	080087a0 	.word	0x080087a0

08008248 <_close_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d06      	ldr	r5, [pc, #24]	; (8008264 <_close_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f9 fb3e 	bl	80018d4 <_close>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_close_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_close_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000490 	.word	0x20000490

08008268 <fiprintf>:
 8008268:	b40e      	push	{r1, r2, r3}
 800826a:	b503      	push	{r0, r1, lr}
 800826c:	4601      	mov	r1, r0
 800826e:	ab03      	add	r3, sp, #12
 8008270:	4805      	ldr	r0, [pc, #20]	; (8008288 <fiprintf+0x20>)
 8008272:	f853 2b04 	ldr.w	r2, [r3], #4
 8008276:	6800      	ldr	r0, [r0, #0]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f7ff fde9 	bl	8007e50 <_vfiprintf_r>
 800827e:	b002      	add	sp, #8
 8008280:	f85d eb04 	ldr.w	lr, [sp], #4
 8008284:	b003      	add	sp, #12
 8008286:	4770      	bx	lr
 8008288:	2000000c 	.word	0x2000000c

0800828c <_fstat_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4d07      	ldr	r5, [pc, #28]	; (80082ac <_fstat_r+0x20>)
 8008290:	2300      	movs	r3, #0
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	4611      	mov	r1, r2
 8008298:	602b      	str	r3, [r5, #0]
 800829a:	f7f9 fb27 	bl	80018ec <_fstat>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d102      	bne.n	80082a8 <_fstat_r+0x1c>
 80082a2:	682b      	ldr	r3, [r5, #0]
 80082a4:	b103      	cbz	r3, 80082a8 <_fstat_r+0x1c>
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	bd38      	pop	{r3, r4, r5, pc}
 80082aa:	bf00      	nop
 80082ac:	20000490 	.word	0x20000490

080082b0 <_isatty_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d06      	ldr	r5, [pc, #24]	; (80082cc <_isatty_r+0x1c>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7f9 fb26 	bl	800190c <_isatty>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_isatty_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_isatty_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20000490 	.word	0x20000490

080082d0 <_lseek_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d07      	ldr	r5, [pc, #28]	; (80082f0 <_lseek_r+0x20>)
 80082d4:	4604      	mov	r4, r0
 80082d6:	4608      	mov	r0, r1
 80082d8:	4611      	mov	r1, r2
 80082da:	2200      	movs	r2, #0
 80082dc:	602a      	str	r2, [r5, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	f7f9 fb1f 	bl	8001922 <_lseek>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_lseek_r+0x1e>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_lseek_r+0x1e>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	20000490 	.word	0x20000490

080082f4 <__ascii_mbtowc>:
 80082f4:	b082      	sub	sp, #8
 80082f6:	b901      	cbnz	r1, 80082fa <__ascii_mbtowc+0x6>
 80082f8:	a901      	add	r1, sp, #4
 80082fa:	b142      	cbz	r2, 800830e <__ascii_mbtowc+0x1a>
 80082fc:	b14b      	cbz	r3, 8008312 <__ascii_mbtowc+0x1e>
 80082fe:	7813      	ldrb	r3, [r2, #0]
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	1e10      	subs	r0, r2, #0
 8008306:	bf18      	it	ne
 8008308:	2001      	movne	r0, #1
 800830a:	b002      	add	sp, #8
 800830c:	4770      	bx	lr
 800830e:	4610      	mov	r0, r2
 8008310:	e7fb      	b.n	800830a <__ascii_mbtowc+0x16>
 8008312:	f06f 0001 	mvn.w	r0, #1
 8008316:	e7f8      	b.n	800830a <__ascii_mbtowc+0x16>

08008318 <__malloc_lock>:
 8008318:	4801      	ldr	r0, [pc, #4]	; (8008320 <__malloc_lock+0x8>)
 800831a:	f7ff b878 	b.w	800740e <__retarget_lock_acquire_recursive>
 800831e:	bf00      	nop
 8008320:	20000484 	.word	0x20000484

08008324 <__malloc_unlock>:
 8008324:	4801      	ldr	r0, [pc, #4]	; (800832c <__malloc_unlock+0x8>)
 8008326:	f7ff b873 	b.w	8007410 <__retarget_lock_release_recursive>
 800832a:	bf00      	nop
 800832c:	20000484 	.word	0x20000484

08008330 <_read_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	; (8008350 <_read_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7f9 fa8f 	bl	8001862 <_read>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_read_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_read_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000490 	.word	0x20000490

08008354 <__ascii_wctomb>:
 8008354:	b149      	cbz	r1, 800836a <__ascii_wctomb+0x16>
 8008356:	2aff      	cmp	r2, #255	; 0xff
 8008358:	bf85      	ittet	hi
 800835a:	238a      	movhi	r3, #138	; 0x8a
 800835c:	6003      	strhi	r3, [r0, #0]
 800835e:	700a      	strbls	r2, [r1, #0]
 8008360:	f04f 30ff 	movhi.w	r0, #4294967295
 8008364:	bf98      	it	ls
 8008366:	2001      	movls	r0, #1
 8008368:	4770      	bx	lr
 800836a:	4608      	mov	r0, r1
 800836c:	4770      	bx	lr

0800836e <abort>:
 800836e:	b508      	push	{r3, lr}
 8008370:	2006      	movs	r0, #6
 8008372:	f000 f82b 	bl	80083cc <raise>
 8008376:	2001      	movs	r0, #1
 8008378:	f7f9 fa69 	bl	800184e <_exit>

0800837c <_raise_r>:
 800837c:	291f      	cmp	r1, #31
 800837e:	b538      	push	{r3, r4, r5, lr}
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	d904      	bls.n	8008390 <_raise_r+0x14>
 8008386:	2316      	movs	r3, #22
 8008388:	6003      	str	r3, [r0, #0]
 800838a:	f04f 30ff 	mov.w	r0, #4294967295
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008392:	b112      	cbz	r2, 800839a <_raise_r+0x1e>
 8008394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008398:	b94b      	cbnz	r3, 80083ae <_raise_r+0x32>
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f830 	bl	8008400 <_getpid_r>
 80083a0:	462a      	mov	r2, r5
 80083a2:	4601      	mov	r1, r0
 80083a4:	4620      	mov	r0, r4
 80083a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083aa:	f000 b817 	b.w	80083dc <_kill_r>
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d00a      	beq.n	80083c8 <_raise_r+0x4c>
 80083b2:	1c59      	adds	r1, r3, #1
 80083b4:	d103      	bne.n	80083be <_raise_r+0x42>
 80083b6:	2316      	movs	r3, #22
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	2001      	movs	r0, #1
 80083bc:	e7e7      	b.n	800838e <_raise_r+0x12>
 80083be:	2400      	movs	r4, #0
 80083c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083c4:	4628      	mov	r0, r5
 80083c6:	4798      	blx	r3
 80083c8:	2000      	movs	r0, #0
 80083ca:	e7e0      	b.n	800838e <_raise_r+0x12>

080083cc <raise>:
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <raise+0xc>)
 80083ce:	4601      	mov	r1, r0
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	f7ff bfd3 	b.w	800837c <_raise_r>
 80083d6:	bf00      	nop
 80083d8:	2000000c 	.word	0x2000000c

080083dc <_kill_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d07      	ldr	r5, [pc, #28]	; (80083fc <_kill_r+0x20>)
 80083e0:	2300      	movs	r3, #0
 80083e2:	4604      	mov	r4, r0
 80083e4:	4608      	mov	r0, r1
 80083e6:	4611      	mov	r1, r2
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	f7f9 fa20 	bl	800182e <_kill>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	d102      	bne.n	80083f8 <_kill_r+0x1c>
 80083f2:	682b      	ldr	r3, [r5, #0]
 80083f4:	b103      	cbz	r3, 80083f8 <_kill_r+0x1c>
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	bd38      	pop	{r3, r4, r5, pc}
 80083fa:	bf00      	nop
 80083fc:	20000490 	.word	0x20000490

08008400 <_getpid_r>:
 8008400:	f7f9 ba0d 	b.w	800181e <_getpid>

08008404 <_init>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr

08008410 <_fini>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	bf00      	nop
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr
