
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008814  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080089a8  080089a8  000189a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de4  08008de4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008de4  08008de4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008de4  08008de4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  08008fc8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08008fc8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120b5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255e  00000000  00000000  000322c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00035770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de29  00000000  00000000  000365c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013787  00000000  00000000  000543f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad1e4  00000000  00000000  00067b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114d5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f8  00000000  00000000  00114dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800898c 	.word	0x0800898c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800898c 	.word	0x0800898c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f001 fae9 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f9bf 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 fbcd 	bl	80013f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c5a:	f000 fa35 	bl	80010c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c5e:	f000 fa71 	bl	8001144 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000c62:	f000 fb97 	bl	8001394 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000c66:	f000 facf 	bl	8001208 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000c6a:	f000 fb1b 	bl	80012a4 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000c6e:	f000 faa7 	bl	80011c0 <MX_TIM13_Init>
  MX_IWDG_Init();
 8000c72:	f000 fa0b 	bl	800108c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  MEMS_DRIVER_HV_Disable();
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f001 fde6 	bl	8002850 <HAL_GPIO_WritePin>

  printf("HAmlo :)\n");
 8000c84:	48c0      	ldr	r0, [pc, #768]	; (8000f88 <main+0x340>)
 8000c86:	f005 fdcd 	bl	8006824 <puts>
  HAL_IWDG_Refresh(&hiwdg); // this is how the Watchdog is reset, if not done within 3s, the MCU will be reset
 8000c8a:	48c0      	ldr	r0, [pc, #768]	; (8000f8c <main+0x344>)
 8000c8c:	f001 fe79 	bl	8002982 <HAL_IWDG_Refresh>

  // start MEMS FCLK_X
  HAL_TIM_Base_Start(&htim14);
 8000c90:	48bf      	ldr	r0, [pc, #764]	; (8000f90 <main+0x348>)
 8000c92:	f004 f84f 	bl	8004d34 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim14, TIM_CHANNEL_1);
 8000c96:	2100      	movs	r1, #0
 8000c98:	48bd      	ldr	r0, [pc, #756]	; (8000f90 <main+0x348>)
 8000c9a:	f004 f905 	bl	8004ea8 <HAL_TIM_OC_Start>
  //htim14.Instance->CCR1 = 2;

  // start MEMS FCLK_Y
  HAL_TIM_Base_Start(&htim16);
 8000c9e:	48bd      	ldr	r0, [pc, #756]	; (8000f94 <main+0x34c>)
 8000ca0:	f004 f848 	bl	8004d34 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	48bb      	ldr	r0, [pc, #748]	; (8000f94 <main+0x34c>)
 8000ca8:	f004 f8fe 	bl	8004ea8 <HAL_TIM_OC_Start>
  //htim16.Instance->CCR1 = 2;
  HAL_IWDG_Refresh(&hiwdg);
 8000cac:	48b7      	ldr	r0, [pc, #732]	; (8000f8c <main+0x344>)
 8000cae:	f001 fe68 	bl	8002982 <HAL_IWDG_Refresh>

  // load config to DAC for streaming 4 channels
  MEMS_DRIVER_Init(&hspi2);
 8000cb2:	48b9      	ldr	r0, [pc, #740]	; (8000f98 <main+0x350>)
 8000cb4:	f000 fc72 	bl	800159c <MEMS_DRIVER_Init>
  MCP3561_Channels(&hspi1, MCP3561_MUX_CH0, MCP3561_MUX_CH1);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2100      	movs	r1, #0
 8000cbc:	48b7      	ldr	r0, [pc, #732]	; (8000f9c <main+0x354>)
 8000cbe:	f001 fa0d 	bl	80020dc <MCP3561_Channels>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	48b6      	ldr	r0, [pc, #728]	; (8000fa0 <main+0x358>)
 8000cc8:	f001 fdc2 	bl	8002850 <HAL_GPIO_WritePin>

  HAL_IWDG_Refresh(&hiwdg);
 8000ccc:	48af      	ldr	r0, [pc, #700]	; (8000f8c <main+0x344>)
 8000cce:	f001 fe58 	bl	8002982 <HAL_IWDG_Refresh>

  // load config to ADC for continuous conversation of multiple input channels
  MCP3561_Reset(&hspi1);
 8000cd2:	48b2      	ldr	r0, [pc, #712]	; (8000f9c <main+0x354>)
 8000cd4:	f001 fa94 	bl	8002200 <MCP3561_Reset>
  HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f001 fb09 	bl	80022f0 <HAL_Delay>
  MCP3561_Init(&hspi1);
 8000cde:	48af      	ldr	r0, [pc, #700]	; (8000f9c <main+0x354>)
 8000ce0:	f001 fa1c 	bl	800211c <MCP3561_Init>
  // @note configure the chip inside the mcp3561_conf.h

  HAL_IWDG_Refresh(&hiwdg);
 8000ce4:	48a9      	ldr	r0, [pc, #676]	; (8000f8c <main+0x344>)
 8000ce6:	f001 fe4c 	bl	8002982 <HAL_IWDG_Refresh>
  // prepare ADC stream read request (also used in ISR)
  spi1_tx_buf[0] = MCP3561_DEVICE_ADDRESS_MASK | 1; // [a a 0 0 0 0 0 1]
 8000cea:	4bae      	ldr	r3, [pc, #696]	; (8000fa4 <main+0x35c>)
 8000cec:	2241      	movs	r2, #65	; 0x41
 8000cee:	701a      	strb	r2, [r3, #0]

  // read first data (aka. clear any pending DRDY IRQ)
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 fdaa 	bl	8002850 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, spi1_tx_buf, spi1_rx_buf, 5, 3);
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2305      	movs	r3, #5
 8000d02:	4aa9      	ldr	r2, [pc, #676]	; (8000fa8 <main+0x360>)
 8000d04:	49a7      	ldr	r1, [pc, #668]	; (8000fa4 <main+0x35c>)
 8000d06:	48a5      	ldr	r0, [pc, #660]	; (8000f9c <main+0x354>)
 8000d08:	f003 fc4d 	bl	80045a6 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f001 fd9c 	bl	8002850 <HAL_GPIO_WritePin>
  flag_new_adc_data = 0;
 8000d18:	4ba4      	ldr	r3, [pc, #656]	; (8000fac <main+0x364>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

  // enable 200V source on MEMS driver board, activating MEMS mirror movement
  MEMS_DRIVER_HV_Enable();
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f001 fd92 	bl	8002850 <HAL_GPIO_WritePin>

  HAL_IWDG_Refresh(&hiwdg);
 8000d2c:	4897      	ldr	r0, [pc, #604]	; (8000f8c <main+0x344>)
 8000d2e:	f001 fe28 	bl	8002982 <HAL_IWDG_Refresh>
  setup_done = true;
 8000d32:	4b9f      	ldr	r3, [pc, #636]	; (8000fb0 <main+0x368>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
	// [0] unused / not measured
	// [1] X-axis ?
	// [2] sum current (can be used as brightness detector)
	// [3] Y-axis ?

	brightness = ((float)adc_channels[2])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000d38:	4b9e      	ldr	r3, [pc, #632]	; (8000fb4 <main+0x36c>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d48:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8000fb8 <main+0x370>
 8000d4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d50:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8000fbc <main+0x374>
 8000d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d58:	4b99      	ldr	r3, [pc, #612]	; (8000fc0 <main+0x378>)
 8000d5a:	edc3 7a00 	vstr	s15, [r3]
	// printf("%.5f\t", brightness);

	/** @todo calibrate */
	sx = ((float)adc_channels[1])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000d5e:	4b95      	ldr	r3, [pc, #596]	; (8000fb4 <main+0x36c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d6e:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8000fb8 <main+0x370>
 8000d72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d76:	eddf 6a91 	vldr	s13, [pc, #580]	; 8000fbc <main+0x374>
 8000d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d7e:	4b91      	ldr	r3, [pc, #580]	; (8000fc4 <main+0x37c>)
 8000d80:	edc3 7a00 	vstr	s15, [r3]
	sx = sx -1.25 -0.055;
 8000d84:	4b8f      	ldr	r3, [pc, #572]	; (8000fc4 <main+0x37c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fbdd 	bl	8000548 <__aeabi_f2d>
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	4b8d      	ldr	r3, [pc, #564]	; (8000fc8 <main+0x380>)
 8000d94:	f7ff fa78 	bl	8000288 <__aeabi_dsub>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	a373      	add	r3, pc, #460	; (adr r3, 8000f70 <main+0x328>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	f7ff fa6f 	bl	8000288 <__aeabi_dsub>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff fef9 	bl	8000ba8 <__aeabi_d2f>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a82      	ldr	r2, [pc, #520]	; (8000fc4 <main+0x37c>)
 8000dba:	6013      	str	r3, [r2, #0]
	sx *= 10;   // convert to degrees ?
 8000dbc:	4b81      	ldr	r3, [pc, #516]	; (8000fc4 <main+0x37c>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dca:	4b7e      	ldr	r3, [pc, #504]	; (8000fc4 <main+0x37c>)
 8000dcc:	edc3 7a00 	vstr	s15, [r3]
	sx += 1.24; // zeroing, subtract mean value
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <main+0x37c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fbb7 	bl	8000548 <__aeabi_f2d>
 8000dda:	a367      	add	r3, pc, #412	; (adr r3, 8000f78 <main+0x330>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	f7ff fa54 	bl	800028c <__adddf3>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f7ff fedc 	bl	8000ba8 <__aeabi_d2f>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4a74      	ldr	r2, [pc, #464]	; (8000fc4 <main+0x37c>)
 8000df4:	6013      	str	r3, [r2, #0]
	sx /= 2;    // scale down ?
 8000df6:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <main+0x37c>)
 8000df8:	ed93 7a00 	vldr	s14, [r3]
 8000dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <main+0x37c>)
 8000e06:	edc3 7a00 	vstr	s15, [r3]
	sx *= -1;   // invert for MEMS
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	; (8000fc4 <main+0x37c>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	eef1 7a67 	vneg.f32	s15, s15
 8000e14:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <main+0x37c>)
 8000e16:	edc3 7a00 	vstr	s15, [r3]
	sy = ((float)adc_channels[3])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000e1a:	4b66      	ldr	r3, [pc, #408]	; (8000fb4 <main+0x36c>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e2a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000fb8 <main+0x370>
 8000e2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e32:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000fbc <main+0x374>
 8000e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3a:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <main+0x384>)
 8000e3c:	edc3 7a00 	vstr	s15, [r3]
	sy = sy -1.25 -0.055;
 8000e40:	4b62      	ldr	r3, [pc, #392]	; (8000fcc <main+0x384>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb7f 	bl	8000548 <__aeabi_f2d>
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <main+0x380>)
 8000e50:	f7ff fa1a 	bl	8000288 <__aeabi_dsub>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	a344      	add	r3, pc, #272	; (adr r3, 8000f70 <main+0x328>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fa11 	bl	8000288 <__aeabi_dsub>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fe9b 	bl	8000ba8 <__aeabi_d2f>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <main+0x384>)
 8000e76:	6013      	str	r3, [r2, #0]
	sy *= 10;
 8000e78:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <main+0x384>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e86:	4b51      	ldr	r3, [pc, #324]	; (8000fcc <main+0x384>)
 8000e88:	edc3 7a00 	vstr	s15, [r3]
	sy += 1.18;
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <main+0x384>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fb59 	bl	8000548 <__aeabi_f2d>
 8000e96:	a33a      	add	r3, pc, #232	; (adr r3, 8000f80 <main+0x338>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff f9f6 	bl	800028c <__adddf3>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fe7e 	bl	8000ba8 <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a47      	ldr	r2, [pc, #284]	; (8000fcc <main+0x384>)
 8000eb0:	6013      	str	r3, [r2, #0]
	sy /= 2;
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <main+0x384>)
 8000eb4:	ed93 7a00 	vldr	s14, [r3]
 8000eb8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <main+0x384>)
 8000ec2:	edc3 7a00 	vstr	s15, [r3]
	sy *= -1;
 8000ec6:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <main+0x384>)
 8000ec8:	edd3 7a00 	vldr	s15, [r3]
 8000ecc:	eef1 7a67 	vneg.f32	s15, s15
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <main+0x384>)
 8000ed2:	edc3 7a00 	vstr	s15, [r3]

	if( fabs(sx) < 1.0 && fabs(sy) < 1.0){
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <main+0x37c>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	eef0 7ae7 	vabs.f32	s15, s15
 8000ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d520      	bpl.n	8000f30 <main+0x2e8>
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <main+0x384>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	eef0 7ae7 	vabs.f32	s15, s15
 8000ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	d514      	bpl.n	8000f30 <main+0x2e8>
		printf("%.2f\t%.2f\n", sx, sy);
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <main+0x37c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fb1c 	bl	8000548 <__aeabi_f2d>
 8000f10:	4604      	mov	r4, r0
 8000f12:	460d      	mov	r5, r1
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <main+0x384>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb15 	bl	8000548 <__aeabi_f2d>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	e9cd 2300 	strd	r2, r3, [sp]
 8000f26:	4622      	mov	r2, r4
 8000f28:	462b      	mov	r3, r5
 8000f2a:	4829      	ldr	r0, [pc, #164]	; (8000fd0 <main+0x388>)
 8000f2c:	f005 fbf4 	bl	8006718 <iprintf>
	}
	MEMS_DRIVER_SetAngle(sx, sy);
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <main+0x37c>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <main+0x384>)
 8000f38:	ed93 7a00 	vldr	s14, [r3]
 8000f3c:	eef0 0a47 	vmov.f32	s1, s14
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	f000 fb98 	bl	8001678 <MEMS_DRIVER_SetAngle>
	MEMS_DRIVER_Write_Channel(&hspi2);
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <main+0x350>)
 8000f4a:	f000 fc63 	bl	8001814 <MEMS_DRIVER_Write_Channel>

	// wait for DRDY interrupt...
	// if the ISR fails to load new data from the ADC within ~3s
	// --> the watchdog will trigger a full reset
	HAL_IWDG_Refresh(&hiwdg); // reset watchdog
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <main+0x344>)
 8000f50:	f001 fd17 	bl	8002982 <HAL_IWDG_Refresh>
	flag_new_adc_data = 0; // clear DRDY flag
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <main+0x364>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
	while( flag_new_adc_data == 0){
 8000f5a:	bf00      	nop
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <main+0x364>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f083 0301 	eor.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f7      	bne.n	8000f5c <main+0x314>
	brightness = ((float)adc_channels[2])*2*VREF_2V5_CALIBRATED / ((float)0xffffff);
 8000f6c:	e6e4      	b.n	8000d38 <main+0xf0>
 8000f6e:	bf00      	nop
 8000f70:	c28f5c29 	.word	0xc28f5c29
 8000f74:	3fac28f5 	.word	0x3fac28f5
 8000f78:	3d70a3d7 	.word	0x3d70a3d7
 8000f7c:	3ff3d70a 	.word	0x3ff3d70a
 8000f80:	ae147ae1 	.word	0xae147ae1
 8000f84:	3ff2e147 	.word	0x3ff2e147
 8000f88:	080089a8 	.word	0x080089a8
 8000f8c:	200001f8 	.word	0x200001f8
 8000f90:	2000031c 	.word	0x2000031c
 8000f94:	20000368 	.word	0x20000368
 8000f98:	2000026c 	.word	0x2000026c
 8000f9c:	20000208 	.word	0x20000208
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	2000043c 	.word	0x2000043c
 8000fa8:	20000444 	.word	0x20000444
 8000fac:	2000045c 	.word	0x2000045c
 8000fb0:	20000438 	.word	0x20000438
 8000fb4:	2000044c 	.word	0x2000044c
 8000fb8:	40251eb8 	.word	0x40251eb8
 8000fbc:	4b7fffff 	.word	0x4b7fffff
 8000fc0:	20000468 	.word	0x20000468
 8000fc4:	20000460 	.word	0x20000460
 8000fc8:	3ff40000 	.word	0x3ff40000
 8000fcc:	20000464 	.word	0x20000464
 8000fd0:	080089b4 	.word	0x080089b4

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09a      	sub	sp, #104	; 0x68
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fde:	2228      	movs	r2, #40	; 0x28
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 ff26 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	222c      	movs	r2, #44	; 0x2c
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 ff18 	bl	8005e34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001004:	2309      	movs	r3, #9
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001016:	2301      	movs	r3, #1
 8001018:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001022:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001024:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001028:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fcb8 	bl	80029a4 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800103a:	f000 faaa 	bl	8001592 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fce0 	bl	8003a20 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001066:	f000 fa94 	bl	8001592 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800106a:	2302      	movs	r3, #2
 800106c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4618      	mov	r0, r3
 8001076:	f002 ff09 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001080:	f000 fa87 	bl	8001592 <Error_Handler>
  }
}
 8001084:	bf00      	nop
 8001086:	3768      	adds	r7, #104	; 0x68
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_IWDG_Init+0x34>)
 8001092:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <MX_IWDG_Init+0x38>)
 8001094:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_IWDG_Init+0x34>)
 8001098:	2206      	movs	r2, #6
 800109a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = IWDG_WINDOW_VAL;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_IWDG_Init+0x34>)
 800109e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = IWDG_COUNTER_VAL;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_IWDG_Init+0x34>)
 80010a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_IWDG_Init+0x34>)
 80010ae:	f001 fc19 	bl	80028e4 <HAL_IWDG_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80010b8:	f000 fa6b 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200001f8 	.word	0x200001f8
 80010c4:	40003000 	.word	0x40003000

080010c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_SPI1_Init+0x74>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <MX_SPI1_Init+0x78>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_SPI1_Init+0x74>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI1_Init+0x74>)
 80010e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_SPI1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI1_Init+0x74>)
 80010f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI1_Init+0x74>)
 80010fe:	2210      	movs	r2, #16
 8001100:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_SPI1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI1_Init+0x74>)
 8001116:	2207      	movs	r2, #7
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_SPI1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI1_Init+0x74>)
 8001122:	2208      	movs	r2, #8
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_SPI1_Init+0x74>)
 8001128:	f003 f824 	bl	8004174 <HAL_SPI_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001132:	f000 fa2e 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000208 	.word	0x20000208
 8001140:	40013000 	.word	0x40013000

08001144 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_SPI2_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <MX_SPI2_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001150:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001154:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001158:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800115c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001160:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001164:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI2_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001178:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI2_Init+0x74>)
 800117c:	2210      	movs	r2, #16
 800117e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SPI2_Init+0x74>)
 8001194:	2207      	movs	r2, #7
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_SPI2_Init+0x74>)
 80011a0:	2208      	movs	r2, #8
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_SPI2_Init+0x74>)
 80011a6:	f002 ffe5 	bl	8004174 <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 f9ef 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000026c 	.word	0x2000026c
 80011bc:	40003800 	.word	0x40003800

080011c0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_TIM13_Init+0x40>)
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <MX_TIM13_Init+0x44>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_TIM13_Init+0x40>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_TIM13_Init+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = TIM13_COUNT_PERIOD;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_TIM13_Init+0x40>)
 80011d8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80011dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_TIM13_Init+0x40>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_TIM13_Init+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM13_Init+0x40>)
 80011ec:	f003 fd52 	bl	8004c94 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80011f6:	f000 f9cc 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002d0 	.word	0x200002d0
 8001204:	40001c00 	.word	0x40001c00

08001208 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_TIM14_Init+0x94>)
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <MX_TIM14_Init+0x98>)
 8001224:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM14_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_TIM14_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = TIM14_COUNT_PERIOD;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM14_Init+0x94>)
 8001234:	f640 02ad 	movw	r2, #2221	; 0x8ad
 8001238:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_TIM14_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_TIM14_Init+0x94>)
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <MX_TIM14_Init+0x94>)
 8001248:	f003 fd24 	bl	8004c94 <HAL_TIM_Base_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001252:	f000 f99e 	bl	8001592 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_TIM14_Init+0x94>)
 8001258:	f003 fdcc 	bl	8004df4 <HAL_TIM_OC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001262:	f000 f996 	bl	8001592 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001266:	2330      	movs	r3, #48	; 0x30
 8001268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM14_Init+0x94>)
 800127e:	f003 fedd 	bl	800503c <HAL_TIM_OC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001288:	f000 f983 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM14_Init+0x94>)
 800128e:	f000 fcdf 	bl	8001c50 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000031c 	.word	0x2000031c
 80012a0:	40002000 	.word	0x40002000

080012a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2220      	movs	r2, #32
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fdb5 	bl	8005e34 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_TIM16_Init+0xe8>)
 80012cc:	4a30      	ldr	r2, [pc, #192]	; (8001390 <MX_TIM16_Init+0xec>)
 80012ce:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80012d0:	4b2e      	ldr	r3, [pc, #184]	; (800138c <MX_TIM16_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <MX_TIM16_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_COUNT_PERIOD;
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <MX_TIM16_Init+0xe8>)
 80012de:	f640 02ad 	movw	r2, #2221	; 0x8ad
 80012e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_TIM16_Init+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_TIM16_Init+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <MX_TIM16_Init+0xe8>)
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <MX_TIM16_Init+0xe8>)
 80012f8:	f003 fccc 	bl	8004c94 <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001302:	f000 f946 	bl	8001592 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001306:	4821      	ldr	r0, [pc, #132]	; (800138c <MX_TIM16_Init+0xe8>)
 8001308:	f003 fd74 	bl	8004df4 <HAL_TIM_OC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001312:	f000 f93e 	bl	8001592 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001316:	2330      	movs	r3, #48	; 0x30
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_TIM16_Init+0xe8>)
 800133c:	f003 fe7e 	bl	800503c <HAL_TIM_OC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001346:	f000 f924 	bl	8001592 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	; (800138c <MX_TIM16_Init+0xe8>)
 800136e:	f004 f8d9 	bl	8005524 <HAL_TIMEx_ConfigBreakDeadTime>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001378:	f000 f90b 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <MX_TIM16_Init+0xe8>)
 800137e:	f000 fc67 	bl	8001c50 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3740      	adds	r7, #64	; 0x40
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000368 	.word	0x20000368
 8001390:	40014400 	.word	0x40014400

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_USART2_UART_Init+0x58>)
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <MX_USART2_UART_Init+0x5c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013d8:	f004 f8f6 	bl	80055c8 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f000 f8d6 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200003b4 	.word	0x200003b4
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <MX_GPIO_Init+0x15c>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4a50      	ldr	r2, [pc, #320]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001414:	6153      	str	r3, [r2, #20]
 8001416:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	6153      	str	r3, [r2, #20]
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b45      	ldr	r3, [pc, #276]	; (8001550 <MX_GPIO_Init+0x15c>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a44      	ldr	r2, [pc, #272]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b42      	ldr	r3, [pc, #264]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f001 f9ec 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f244 01c0 	movw	r1, #16576	; 0x40c0
 800147e:	4835      	ldr	r0, [pc, #212]	; (8001554 <MX_GPIO_Init+0x160>)
 8001480:	f001 f9e6 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001484:	2310      	movs	r3, #16
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f001 f85d 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_nIRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_nIRQ_Pin;
 80014a2:	2302      	movs	r3, #2
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_nIRQ_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4827      	ldr	r0, [pc, #156]	; (8001554 <MX_GPIO_Init+0x160>)
 80014b8:	f001 f850 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80014bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	481f      	ldr	r0, [pc, #124]	; (8001554 <MX_GPIO_Init+0x160>)
 80014d6:	f001 f841 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f001 f831 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <MX_GPIO_Init+0x160>)
 8001512:	f001 f823 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001528:	2301      	movs	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <MX_GPIO_Init+0x160>)
 8001534:	f001 f812 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	2007      	movs	r0, #7
 800153e:	f000 ffd6 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001542:	2007      	movs	r0, #7
 8001544:	f000 ffef 	bl	8002526 <HAL_NVIC_EnableIRQ>

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	48000400 	.word	0x48000400

08001558 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001560:	1d39      	adds	r1, r7, #4
 8001562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001566:	2201      	movs	r2, #1
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <__io_putchar+0x20>)
 800156a:	f004 f87b 	bl	8005664 <HAL_UART_Transmit>

    return ch;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200003b4 	.word	0x200003b4

0800157c <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]

}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001596:	b672      	cpsid	i
}
 8001598:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159a:	e7fe      	b.n	800159a <Error_Handler+0x8>

0800159c <MEMS_DRIVER_Init>:
************************************************************************************
*/

#include "mirrorcle_mems_driver.h"

void MEMS_DRIVER_Init(SPI_HandleTypeDef *hspi){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
   * 2097167 Decimal or 0x20000F to command ENABLE ALL DAC CHANNELS
   * 3145728 Decimal or 0x300000 to command ENABLE SOFTWARE LDAC
   */

  // FULL RESET
  dac_data[0] = 0x28;
 80015a4:	2328      	movs	r3, #40	; 0x28
 80015a6:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 80015a8:	2300      	movs	r3, #0
 80015aa:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x01;
 80015ac:	2301      	movs	r3, #1
 80015ae:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b6:	482f      	ldr	r0, [pc, #188]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 80015b8:	f001 f94a 	bl	8002850 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	2303      	movs	r3, #3
 80015c2:	2203      	movs	r2, #3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f002 fe80 	bl	80042ca <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d0:	4828      	ldr	r0, [pc, #160]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 80015d2:	f001 f93d 	bl	8002850 <HAL_GPIO_WritePin>

  // ENABLE INTERNAL REFERENCE
  dac_data[0] = 0x38;
 80015d6:	2338      	movs	r3, #56	; 0x38
 80015d8:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x01;
 80015de:	2301      	movs	r3, #1
 80015e0:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e8:	4822      	ldr	r0, [pc, #136]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 80015ea:	f001 f931 	bl	8002850 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80015ee:	f107 0108 	add.w	r1, r7, #8
 80015f2:	2303      	movs	r3, #3
 80015f4:	2203      	movs	r2, #3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f002 fe67 	bl	80042ca <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 8001604:	f001 f924 	bl	8002850 <HAL_GPIO_WritePin>

  // ENABLE ALL DAC CHANNELS
  dac_data[0] = 0x20;
 8001608:	2320      	movs	r3, #32
 800160a:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x0F;
 8001610:	230f      	movs	r3, #15
 8001612:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161a:	4816      	ldr	r0, [pc, #88]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 800161c:	f001 f918 	bl	8002850 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001620:	f107 0108 	add.w	r1, r7, #8
 8001624:	2303      	movs	r3, #3
 8001626:	2203      	movs	r2, #3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f002 fe4e 	bl	80042ca <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 8001636:	f001 f90b 	bl	8002850 <HAL_GPIO_WritePin>

  // ENABLE SOFTWARE LDAC
  dac_data[0] = 0x30;
 800163a:	2330      	movs	r3, #48	; 0x30
 800163c:	723b      	strb	r3, [r7, #8]
  dac_data[1] = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	727b      	strb	r3, [r7, #9]
  dac_data[2] = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 800164e:	f001 f8ff 	bl	8002850 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, dac_data, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001652:	f107 0108 	add.w	r1, r7, #8
 8001656:	2303      	movs	r3, #3
 8001658:	2203      	movs	r2, #3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f002 fe35 	bl	80042ca <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <MEMS_DRIVER_Init+0xd8>)
 8001668:	f001 f8f2 	bl	8002850 <HAL_GPIO_WritePin>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	48000400 	.word	0x48000400

08001678 <MEMS_DRIVER_SetAngle>:

void MEMS_DRIVER_SetAngle(float phi_x, float phi_y){
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001682:	edc7 0a00 	vstr	s1, [r7]
	/* @todo calibrate angle to voltage */
	if(phi_x > ( MEMS_MIRROR_ANGLE_MAX_X)) phi_x = ( MEMS_MIRROR_ANGLE_MAX_X);
 8001686:	edd7 7a01 	vldr	s15, [r7, #4]
 800168a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80017d4 <MEMS_DRIVER_SetAngle+0x15c>
 800168e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	dd01      	ble.n	800169c <MEMS_DRIVER_SetAngle+0x24>
 8001698:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <MEMS_DRIVER_SetAngle+0x160>)
 800169a:	607b      	str	r3, [r7, #4]
	if(phi_x < (-MEMS_MIRROR_ANGLE_MAX_X)) phi_x = (-MEMS_MIRROR_ANGLE_MAX_X);
 800169c:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80017dc <MEMS_DRIVER_SetAngle+0x164>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d501      	bpl.n	80016b2 <MEMS_DRIVER_SetAngle+0x3a>
 80016ae:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <MEMS_DRIVER_SetAngle+0x168>)
 80016b0:	607b      	str	r3, [r7, #4]
	if(phi_y > ( MEMS_MIRROR_ANGLE_MAX_Y)) phi_y = ( MEMS_MIRROR_ANGLE_MAX_Y);
 80016b2:	edd7 7a00 	vldr	s15, [r7]
 80016b6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80017e4 <MEMS_DRIVER_SetAngle+0x16c>
 80016ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	dd01      	ble.n	80016c8 <MEMS_DRIVER_SetAngle+0x50>
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <MEMS_DRIVER_SetAngle+0x170>)
 80016c6:	603b      	str	r3, [r7, #0]
	if(phi_y < (-MEMS_MIRROR_ANGLE_MAX_Y)) phi_y = (-MEMS_MIRROR_ANGLE_MAX_Y);
 80016c8:	edd7 7a00 	vldr	s15, [r7]
 80016cc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80017ec <MEMS_DRIVER_SetAngle+0x174>
 80016d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	d501      	bpl.n	80016de <MEMS_DRIVER_SetAngle+0x66>
 80016da:	4b45      	ldr	r3, [pc, #276]	; (80017f0 <MEMS_DRIVER_SetAngle+0x178>)
 80016dc:	603b      	str	r3, [r7, #0]

	// Equations: see Datasheet p. 31

	MEMS_DAC_ch_A = (uint32_t) (MEMS_VBIAS_CODE + ( phi_x*MEMS_DRIVER_VGAIN*65535/MEMS_MIRROR_MAX_Vdiff/2) );
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80017f4 <MEMS_DRIVER_SetAngle+0x17c>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80017f8 <MEMS_DRIVER_SetAngle+0x180>
 80016ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f2:	eddf 6a42 	vldr	s13, [pc, #264]	; 80017fc <MEMS_DRIVER_SetAngle+0x184>
 80016f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001800 <MEMS_DRIVER_SetAngle+0x188>
 8001706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170e:	ee17 3a90 	vmov	r3, s15
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <MEMS_DRIVER_SetAngle+0x18c>)
 8001716:	801a      	strh	r2, [r3, #0]
	MEMS_DAC_ch_B = (uint32_t) (MEMS_VBIAS_CODE - ( phi_x*MEMS_DRIVER_VGAIN*65535/MEMS_MIRROR_MAX_Vdiff/2) );
 8001718:	edd7 7a01 	vldr	s15, [r7, #4]
 800171c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80017f4 <MEMS_DRIVER_SetAngle+0x17c>
 8001720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001724:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80017f8 <MEMS_DRIVER_SetAngle+0x180>
 8001728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172c:	eddf 6a33 	vldr	s13, [pc, #204]	; 80017fc <MEMS_DRIVER_SetAngle+0x184>
 8001730:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001734:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800173c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001800 <MEMS_DRIVER_SetAngle+0x188>
 8001740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001748:	ee17 3a90 	vmov	r3, s15
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <MEMS_DRIVER_SetAngle+0x190>)
 8001750:	801a      	strh	r2, [r3, #0]
	MEMS_DAC_ch_C = (uint32_t) (MEMS_VBIAS_CODE + ( phi_y*MEMS_DRIVER_VGAIN*65535/MEMS_MIRROR_MAX_Vdiff/2) );
 8001752:	edd7 7a00 	vldr	s15, [r7]
 8001756:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80017f4 <MEMS_DRIVER_SetAngle+0x17c>
 800175a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80017f8 <MEMS_DRIVER_SetAngle+0x180>
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	eddf 6a25 	vldr	s13, [pc, #148]	; 80017fc <MEMS_DRIVER_SetAngle+0x184>
 800176a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800176e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001776:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001800 <MEMS_DRIVER_SetAngle+0x188>
 800177a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800177e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <MEMS_DRIVER_SetAngle+0x194>)
 800178a:	801a      	strh	r2, [r3, #0]
	MEMS_DAC_ch_D = (uint32_t) (MEMS_VBIAS_CODE - ( phi_y*MEMS_DRIVER_VGAIN*65535/MEMS_MIRROR_MAX_Vdiff/2) );
 800178c:	edd7 7a00 	vldr	s15, [r7]
 8001790:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80017f4 <MEMS_DRIVER_SetAngle+0x17c>
 8001794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001798:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80017f8 <MEMS_DRIVER_SetAngle+0x180>
 800179c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a0:	eddf 6a16 	vldr	s13, [pc, #88]	; 80017fc <MEMS_DRIVER_SetAngle+0x184>
 80017a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001800 <MEMS_DRIVER_SetAngle+0x188>
 80017b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MEMS_DRIVER_SetAngle+0x198>)
 80017c4:	801a      	strh	r2, [r3, #0]

}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	3f835dcc 	.word	0x3f835dcc
 80017d8:	3f835dcc 	.word	0x3f835dcc
 80017dc:	bf835dcc 	.word	0xbf835dcc
 80017e0:	bf835dcc 	.word	0xbf835dcc
 80017e4:	3f86c227 	.word	0x3f86c227
 80017e8:	3f86c227 	.word	0x3f86c227
 80017ec:	bf86c227 	.word	0xbf86c227
 80017f0:	bf86c227 	.word	0xbf86c227
 80017f4:	42800000 	.word	0x42800000
 80017f8:	477fff00 	.word	0x477fff00
 80017fc:	431e0000 	.word	0x431e0000
 8001800:	46cc6000 	.word	0x46cc6000
 8001804:	2000046c 	.word	0x2000046c
 8001808:	2000046e 	.word	0x2000046e
 800180c:	20000470 	.word	0x20000470
 8001810:	20000472 	.word	0x20000472

08001814 <MEMS_DRIVER_Write_Channel>:

void MEMS_DRIVER_Write_Channel(SPI_HandleTypeDef *hspi){
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

	/* @author: Michael Taylor
	 * @brief Check that max and min voltage levels will not be exceeded. Clamp if they are.
	 * */

	if(MEMS_DAC_ch_A > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way +x
 800181c:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001824:	4293      	cmp	r3, r2
 8001826:	d908      	bls.n	800183a <MEMS_DRIVER_Write_Channel+0x26>
	  MEMS_DAC_ch_A = MEMS_DRIVER_MAX_DAC_WRITE;
 8001828:	f64c 3285 	movw	r2, #52101	; 0xcb85
 800182c:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800182e:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_B = MEMS_DRIVER_MIN_DAC_WRITE;
 8001830:	f240 1247 	movw	r2, #327	; 0x147
 8001834:	4b74      	ldr	r3, [pc, #464]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001836:	801a      	strh	r2, [r3, #0]
 8001838:	e00d      	b.n	8001856 <MEMS_DRIVER_Write_Channel+0x42>
	} else if(MEMS_DAC_ch_A < MEMS_DRIVER_MIN_DAC_WRITE){
 800183a:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	f240 1247 	movw	r2, #327	; 0x147
 8001842:	4293      	cmp	r3, r2
 8001844:	d207      	bcs.n	8001856 <MEMS_DRIVER_Write_Channel+0x42>
	  MEMS_DAC_ch_A = MEMS_DRIVER_MIN_DAC_WRITE;
 8001846:	f240 1247 	movw	r2, #327	; 0x147
 800184a:	4b6e      	ldr	r3, [pc, #440]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800184c:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_B = MEMS_DRIVER_MAX_DAC_WRITE;
 800184e:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001854:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_A over / under volt
	if(MEMS_DAC_ch_B > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way -x
 8001856:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f64c 3285 	movw	r2, #52101	; 0xcb85
 800185e:	4293      	cmp	r3, r2
 8001860:	d908      	bls.n	8001874 <MEMS_DRIVER_Write_Channel+0x60>
	  MEMS_DAC_ch_B = MEMS_DRIVER_MAX_DAC_WRITE;
 8001862:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001866:	4b68      	ldr	r3, [pc, #416]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001868:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_A = MEMS_DRIVER_MIN_DAC_WRITE;
 800186a:	f240 1247 	movw	r2, #327	; 0x147
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	e00d      	b.n	8001890 <MEMS_DRIVER_Write_Channel+0x7c>
	} else if(MEMS_DAC_ch_B < MEMS_DRIVER_MIN_DAC_WRITE){
 8001874:	4b64      	ldr	r3, [pc, #400]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	f240 1247 	movw	r2, #327	; 0x147
 800187c:	4293      	cmp	r3, r2
 800187e:	d207      	bcs.n	8001890 <MEMS_DRIVER_Write_Channel+0x7c>
	  MEMS_DAC_ch_B = MEMS_DRIVER_MIN_DAC_WRITE;
 8001880:	f240 1247 	movw	r2, #327	; 0x147
 8001884:	4b60      	ldr	r3, [pc, #384]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001886:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_A = MEMS_DRIVER_MAX_DAC_WRITE;
 8001888:	f64c 3285 	movw	r2, #52101	; 0xcb85
 800188c:	4b5d      	ldr	r3, [pc, #372]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800188e:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_B over / under volt
	if(MEMS_DAC_ch_C > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way +y
 8001890:	4b5e      	ldr	r3, [pc, #376]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001898:	4293      	cmp	r3, r2
 800189a:	d908      	bls.n	80018ae <MEMS_DRIVER_Write_Channel+0x9a>
	  MEMS_DAC_ch_C = MEMS_DRIVER_MAX_DAC_WRITE;
 800189c:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80018a0:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 80018a2:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_D = MEMS_DRIVER_MIN_DAC_WRITE;
 80018a4:	f240 1247 	movw	r2, #327	; 0x147
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	e00d      	b.n	80018ca <MEMS_DRIVER_Write_Channel+0xb6>
	} else if(MEMS_DAC_ch_C < MEMS_DRIVER_MIN_DAC_WRITE){
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	f240 1247 	movw	r2, #327	; 0x147
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d207      	bcs.n	80018ca <MEMS_DRIVER_Write_Channel+0xb6>
	  MEMS_DAC_ch_C = MEMS_DRIVER_MIN_DAC_WRITE;
 80018ba:	f240 1247 	movw	r2, #327	; 0x147
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 80018c0:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_D = MEMS_DRIVER_MAX_DAC_WRITE;
 80018c2:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80018c6:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80018c8:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_C over / under volt
	if(MEMS_DAC_ch_D > MEMS_DRIVER_MAX_DAC_WRITE){ // all the way -y
 80018ca:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d908      	bls.n	80018e8 <MEMS_DRIVER_Write_Channel+0xd4>
	  MEMS_DAC_ch_D = MEMS_DRIVER_MAX_DAC_WRITE;
 80018d6:	f64c 3285 	movw	r2, #52101	; 0xcb85
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80018dc:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_C = MEMS_DRIVER_MIN_DAC_WRITE;
 80018de:	f240 1247 	movw	r2, #327	; 0x147
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	e00d      	b.n	8001904 <MEMS_DRIVER_Write_Channel+0xf0>
	} else if(MEMS_DAC_ch_D < MEMS_DRIVER_MIN_DAC_WRITE){
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f240 1247 	movw	r2, #327	; 0x147
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d207      	bcs.n	8001904 <MEMS_DRIVER_Write_Channel+0xf0>
	  MEMS_DAC_ch_D = MEMS_DRIVER_MIN_DAC_WRITE;
 80018f4:	f240 1247 	movw	r2, #327	; 0x147
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80018fa:	801a      	strh	r2, [r3, #0]
	  MEMS_DAC_ch_C = MEMS_DRIVER_MAX_DAC_WRITE;
 80018fc:	f64c 3285 	movw	r2, #52101	; 0xcb85
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001902:	801a      	strh	r2, [r3, #0]
	} //endif check DAC_ch_D over / under volt

	// 0b 0001 1000; // write to and update (C = 011) channel A DAC (A = 000), first 2 bits dont care.
	cmd[0] = 0x18;
 8001904:	2318      	movs	r3, #24
 8001906:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_A >> 8;   // uint16_t high byte
 8001908:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_A & 0xff; // uint16_t low  byte
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <MEMS_DRIVER_Write_Channel+0x1f0>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001922:	483c      	ldr	r0, [pc, #240]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 8001924:	f000 ff94 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001928:	f107 010c 	add.w	r1, r7, #12
 800192c:	2303      	movs	r3, #3
 800192e:	2203      	movs	r2, #3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f002 fcca 	bl	80042ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193c:	4835      	ldr	r0, [pc, #212]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 800193e:	f000 ff87 	bl	8002850 <HAL_GPIO_WritePin>

	// 0b 0b0001 1001; // write to and update (C = 011) channel B DAC (B = 001), first 2 bits dont care.
	cmd[0] = 0x19;
 8001942:	2319      	movs	r3, #25
 8001944:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_B >> 8;   // uint16_t high byte
 8001946:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_B & 0xff; // uint16_t low  byte
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <MEMS_DRIVER_Write_Channel+0x1f4>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001960:	482c      	ldr	r0, [pc, #176]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 8001962:	f000 ff75 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 8001966:	f107 010c 	add.w	r1, r7, #12
 800196a:	2303      	movs	r3, #3
 800196c:	2203      	movs	r2, #3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f002 fcab 	bl	80042ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 800197c:	f000 ff68 	bl	8002850 <HAL_GPIO_WritePin>

	// 0b 0001 1010; // write to and update (C = 011) channel C DAC (B = 010), first 2 bits dont care.
	cmd[0] = 0x1A;
 8001980:	231a      	movs	r3, #26
 8001982:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_C >> 8;   // uint16_t high byte
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_C & 0xff; // uint16_t low  byte
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <MEMS_DRIVER_Write_Channel+0x1f8>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	481d      	ldr	r0, [pc, #116]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 80019a0:	f000 ff56 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80019a4:	f107 010c 	add.w	r1, r7, #12
 80019a8:	2303      	movs	r3, #3
 80019aa:	2203      	movs	r2, #3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f002 fc8c 	bl	80042ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b8:	4816      	ldr	r0, [pc, #88]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 80019ba:	f000 ff49 	bl	8002850 <HAL_GPIO_WritePin>

	// 0b 0001 1011; // write to and update (C = 011) channel D DAC (B = 011), first 2 bits dont care.
	cmd[0] = 0x1B;
 80019be:	231b      	movs	r3, #27
 80019c0:	733b      	strb	r3, [r7, #12]
	cmd[1] = MEMS_DAC_ch_D >> 8;   // uint16_t high byte
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	737b      	strb	r3, [r7, #13]
	cmd[2] = MEMS_DAC_ch_D & 0xff; // uint16_t low  byte
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MEMS_DRIVER_Write_Channel+0x1fc>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 80019de:	f000 ff37 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, cmd, 3, MEMS_DRIVER_SPI_TIMEOUT);
 80019e2:	f107 010c 	add.w	r1, r7, #12
 80019e6:	2303      	movs	r3, #3
 80019e8:	2203      	movs	r2, #3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f002 fc6d 	bl	80042ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MEMS_DRIVER_SPI_CS_GPIO_Port, MEMS_DRIVER_SPI_CS_GPIO_Pin, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MEMS_DRIVER_Write_Channel+0x200>)
 80019f8:	f000 ff2a 	bl	8002850 <HAL_GPIO_WritePin>

}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000046c 	.word	0x2000046c
 8001a08:	2000046e 	.word	0x2000046e
 8001a0c:	20000470 	.word	0x20000470
 8001a10:	20000472 	.word	0x20000472
 8001a14:	48000400 	.word	0x48000400

08001a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_MspInit+0x44>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_MspInit+0x44>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_MspInit+0x44>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_MspInit+0x44>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_MspInit+0x44>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_MspInit+0x44>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	; 0x38
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_SPI_MspInit+0x14c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d145      	bne.n	8001b0e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a3e      	ldr	r2, [pc, #248]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001aca:	2360      	movs	r3, #96	; 0x60
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	2305      	movs	r3, #5
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f000 fd38 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001afc:	2305      	movs	r3, #5
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b04:	4619      	mov	r1, r3
 8001b06:	482b      	ldr	r0, [pc, #172]	; (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b08:	f000 fd28 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b0c:	e04a      	b.n	8001ba4 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HAL_SPI_MspInit+0x158>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d145      	bne.n	8001ba4 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	61d3      	str	r3, [r2, #28]
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	6153      	str	r3, [r2, #20]
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b52:	6153      	str	r3, [r2, #20]
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b72:	2305      	movs	r3, #5
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b7e:	f000 fced 	bl	800255c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b94:	2305      	movs	r3, #5
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4807      	ldr	r0, [pc, #28]	; (8001bbc <HAL_SPI_MspInit+0x15c>)
 8001ba0:	f000 fcdc 	bl	800255c <HAL_GPIO_Init>
}
 8001ba4:	bf00      	nop
 8001ba6:	3738      	adds	r7, #56	; 0x38
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40013000 	.word	0x40013000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	40003800 	.word	0x40003800
 8001bbc:	48000c00 	.word	0x48000c00

08001bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <HAL_TIM_Base_MspInit+0x80>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10c      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001bea:	e022      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <HAL_TIM_Base_MspInit+0x88>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d10c      	bne.n	8001c10 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
}
 8001c0e:	e010      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_TIM_Base_MspInit+0x8c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10b      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6193      	str	r3, [r2, #24]
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_TIM_Base_MspInit+0x84>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40001c00 	.word	0x40001c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40002000 	.word	0x40002000
 8001c4c:	40014400 	.word	0x40014400

08001c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_TIM_MspPostInit+0xb0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d11e      	bne.n	8001cb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_TIM_MspPostInit+0xb4>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <HAL_TIM_MspPostInit+0xb4>)
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	6153      	str	r3, [r2, #20]
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_TIM_MspPostInit+0xb4>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = FCLK_X_Pin;
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001c9c:	2309      	movs	r3, #9
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_X_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001caa:	f000 fc57 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001cae:	e022      	b.n	8001cf6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM16)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_TIM_MspPostInit+0xb8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d11d      	bne.n	8001cf6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_TIM_MspPostInit+0xb4>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_TIM_MspPostInit+0xb4>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	6153      	str	r3, [r2, #20]
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_TIM_MspPostInit+0xb4>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FCLK_Y_Pin;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_Y_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f000 fc33 	bl	800255c <HAL_GPIO_Init>
}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40002000 	.word	0x40002000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40014400 	.word	0x40014400

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_UART_MspInit+0x7c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d128      	bne.n	8001d80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_UART_MspInit+0x80>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_UART_MspInit+0x80>)
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_UART_MspInit+0x80>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_UART_MspInit+0x80>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_UART_MspInit+0x80>)
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	6153      	str	r3, [r2, #20]
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_UART_MspInit+0x80>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d5e:	230c      	movs	r3, #12
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7c:	f000 fbee 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	40021000 	.word	0x40021000

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 fa68 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  static uint8_t channel_id = 0;
  static uint32_t value = 0;
  //static float volt = 0.0f;
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	4823      	ldr	r0, [pc, #140]	; (8001e7c <EXTI1_IRQHandler+0x98>)
 8001dee:	f000 fd47 	bl	8002880 <HAL_GPIO_TogglePin>

  /* @todo HAL_SPI_TransmitReceive() is a BLOCKING function
   * it SHOULD NOT BE USED IN AN INTERRUPT
   * but HAL_SPI_TransmitReceive_IT() is just kind of broken ?? */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2110      	movs	r1, #16
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f000 fd29 	bl	8002850 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, spi1_tx_buf, spi1_rx_buf, 5, 3);
 8001dfe:	2303      	movs	r3, #3
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2305      	movs	r3, #5
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <EXTI1_IRQHandler+0x9c>)
 8001e06:	491f      	ldr	r1, [pc, #124]	; (8001e84 <EXTI1_IRQHandler+0xa0>)
 8001e08:	481f      	ldr	r0, [pc, #124]	; (8001e88 <EXTI1_IRQHandler+0xa4>)
 8001e0a:	f002 fbcc 	bl	80045a6 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2110      	movs	r1, #16
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f000 fd1b 	bl	8002850 <HAL_GPIO_WritePin>

  channel_id = MCP3564_SCAN_ID_TO_CHANNEL[ (spi1_rx_buf[1] >> 4) & 0x0f ];
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <EXTI1_IRQHandler+0x9c>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <EXTI1_IRQHandler+0xa8>)
 8001e28:	5cd2      	ldrb	r2, [r2, r3]
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <EXTI1_IRQHandler+0xac>)
 8001e2c:	701a      	strb	r2, [r3, #0]
  if(channel_id <= 4){
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <EXTI1_IRQHandler+0xac>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d81b      	bhi.n	8001e6e <EXTI1_IRQHandler+0x8a>
	  value = (spi1_rx_buf[2] << 16) | (spi1_rx_buf[3] << 8) | spi1_rx_buf[4];
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <EXTI1_IRQHandler+0x9c>)
 8001e38:	789b      	ldrb	r3, [r3, #2]
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <EXTI1_IRQHandler+0x9c>)
 8001e3e:	78db      	ldrb	r3, [r3, #3]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	4313      	orrs	r3, r2
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <EXTI1_IRQHandler+0x9c>)
 8001e46:	7912      	ldrb	r2, [r2, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <EXTI1_IRQHandler+0xb0>)
 8001e4e:	601a      	str	r2, [r3, #0]
	  adc_channels[channel_id] = value;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <EXTI1_IRQHandler+0xac>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <EXTI1_IRQHandler+0xb0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <EXTI1_IRQHandler+0xb4>)
 8001e5c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	  if(channel_id == 3) flag_new_adc_data = 1;  // only update once a SCAN cycle is complete
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <EXTI1_IRQHandler+0xac>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d102      	bne.n	8001e6e <EXTI1_IRQHandler+0x8a>
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <EXTI1_IRQHandler+0xb8>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_nIRQ_Pin);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f000 fd20 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	20000444 	.word	0x20000444
 8001e84:	2000043c 	.word	0x2000043c
 8001e88:	20000208 	.word	0x20000208
 8001e8c:	080089c0 	.word	0x080089c0
 8001e90:	20000474 	.word	0x20000474
 8001e94:	20000478 	.word	0x20000478
 8001e98:	2000044c 	.word	0x2000044c
 8001e9c:	2000045c 	.word	0x2000045c

08001ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
	return 1;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_kill>:

int _kill(int pid, int sig)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eba:	f003 ff91 	bl	8005de0 <__errno>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2216      	movs	r2, #22
 8001ec2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_exit>:

void _exit (int status)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ffe7 	bl	8001eb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ee2:	e7fe      	b.n	8001ee2 <_exit+0x12>

08001ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e00a      	b.n	8001f0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ef6:	f3af 8000 	nop.w
 8001efa:	4601      	mov	r1, r0
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbf0      	blt.n	8001ef6 <_read+0x12>
	}

return len;
 8001f14:	687b      	ldr	r3, [r7, #4]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e009      	b.n	8001f44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	60ba      	str	r2, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fb0d 	bl	8001558 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbf1      	blt.n	8001f30 <_write+0x12>
	}
	return len;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_close>:

int _close(int file)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_isatty>:

int _isatty(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	return 1;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
	return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <_sbrk+0x5c>)
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <_sbrk+0x60>)
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <_sbrk+0x64>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <_sbrk+0x68>)
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d207      	bcs.n	8002000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff0:	f003 fef6 	bl	8005de0 <__errno>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	e009      	b.n	8002014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <_sbrk+0x64>)
 8002010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20008000 	.word	0x20008000
 8002020:	00000400 	.word	0x00000400
 8002024:	2000047c 	.word	0x2000047c
 8002028:	20000498 	.word	0x20000498

0800202c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <SystemInit+0x20>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <SystemInit+0x20>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002088 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopForever+0x6>)
  ldr r1, =_edata
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <LoopForever+0xe>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <LoopForever+0x12>)
  ldr r4, =_ebss
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <LoopForever+0x16>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800207a:	f7ff ffd7 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207e:	f003 feb5 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002082:	f7fe fde1 	bl	8000c48 <main>

08002086 <LoopForever>:

LoopForever:
    b LoopForever
 8002086:	e7fe      	b.n	8002086 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002088:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002094:	08008dec 	.word	0x08008dec
  ldr r2, =_sbss
 8002098:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800209c:	20000494 	.word	0x20000494

080020a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC1_IRQHandler>

080020a2 <_MCP3561_write>:

#include "main.h"
#include "mcp3564.h"
#include "mcp3564_conf.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	4613      	mov	r3, r2
 80020ae:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2110      	movs	r1, #16
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b8:	f000 fbca 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 80020bc:	88fa      	ldrh	r2, [r7, #6]
 80020be:	2303      	movs	r3, #3
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f002 f901 	bl	80042ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2110      	movs	r1, #16
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f000 fbbe 	bl	8002850 <HAL_GPIO_WritePin>
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <MCP3561_Channels>:
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
	return reg8[1];
}

void MCP3561_Channels(SPI_HandleTypeDef *hspi, uint8_t ch_p, uint8_t ch_n){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
 80020e8:	4613      	mov	r3, r2
 80020ea:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd[4] = {0,0,0,0};
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
	cmd[0]  = MCP3561_MUX_WRITE;
 80020f0:	235a      	movs	r3, #90	; 0x5a
 80020f2:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (ch_p << 4) | ch_n;   // [7..4] VIN+ / [3..0] VIN-
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	b25a      	sxtb	r2, r3
 80020fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020fe:	4313      	orrs	r3, r2
 8002100:	b25b      	sxtb	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	737b      	strb	r3, [r7, #13]
	//cmd[1]  = (MCP3561_MUX_CH_IntTemp_P << 4) | MCP3561_MUX_CH_IntTemp_M;   // [7..4] VIN+ / [3..0] VIN-
	_MCP3561_write(hspi, cmd, 2);
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	2202      	movs	r2, #2
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffc7 	bl	80020a2 <_MCP3561_write>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]

	// 8-bit CONFIG registers
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 8002128:	2346      	movs	r3, #70	; 0x46
 800212a:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG0;
 800212c:	2303      	movs	r3, #3
 800212e:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	2202      	movs	r2, #2
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ffb2 	bl	80020a2 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 800213e:	234a      	movs	r3, #74	; 0x4a
 8002140:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG1;
 8002142:	2318      	movs	r3, #24
 8002144:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	2202      	movs	r2, #2
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa7 	bl	80020a2 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 8002154:	234e      	movs	r3, #78	; 0x4e
 8002156:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG2;
 8002158:	2388      	movs	r3, #136	; 0x88
 800215a:	727b      	strb	r3, [r7, #9]
	cmd[1] += 3; // last two bits must always be '11'
 800215c:	7a7b      	ldrb	r3, [r7, #9]
 800215e:	3303      	adds	r3, #3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	2202      	movs	r2, #2
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff98 	bl	80020a2 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8002172:	2352      	movs	r3, #82	; 0x52
 8002174:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG3;
 8002176:	23f0      	movs	r3, #240	; 0xf0
 8002178:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	2202      	movs	r2, #2
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff8d 	bl	80020a2 <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 8002188:	2356      	movs	r3, #86	; 0x56
 800218a:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_IRQ_REG;
 800218c:	2306      	movs	r3, #6
 800218e:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	2202      	movs	r2, #2
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff82 	bl	80020a2 <_MCP3561_write>
	// configure SCAN mode to automatically cycle through channels
	// only available for MCP3562 and MCP3564, and only for certain input combinations
	// @see Datasheet Table 5-14 on p. 54
	#ifdef MCP3561_USERCONF_SCAN_ENABLE
		uint32_t reg_val;
		reg_val = MCP3561_USERCONF_SCAN_REG;
 800219e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80021a2:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_SCAN_WRITE;
 80021a4:	235e      	movs	r3, #94	; 0x5e
 80021a6:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	0c1b      	lsrs	r3, r3, #16
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	2204      	movs	r2, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff6b 	bl	80020a2 <_MCP3561_write>

		reg_val = MCP3561_USERCONF_TIMER_VAL;
 80021cc:	23ec      	movs	r3, #236	; 0xec
 80021ce:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_TIMER_WRITE;
 80021d0:	2362      	movs	r3, #98	; 0x62
 80021d2:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	2204      	movs	r2, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ff55 	bl	80020a2 <_MCP3561_write>
	#endif

}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8002208:	237a      	movs	r3, #122	; 0x7a
 800220a:	73fb      	strb	r3, [r7, #15]
	_MCP3561_write(hspi, &cmd, 1);
 800220c:	f107 030f 	add.w	r3, r7, #15
 8002210:	2201      	movs	r2, #1
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff44 	bl	80020a2 <_MCP3561_write>
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_Init+0x28>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_Init+0x28>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 f94f 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	200f      	movs	r0, #15
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fbea 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f967 	bl	8002542 <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f000 f92f 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000480 	.word	0x20000480

080022d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;  
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000480 	.word	0x20000480

080022f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256a:	e154      	b.n	8002816 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8146 	beq.w	8002810 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d005      	beq.n	800259c <HAL_GPIO_Init+0x40>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d130      	bne.n	80025fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d2:	2201      	movs	r2, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0201 	and.w	r2, r3, #1
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b03      	cmp	r3, #3
 8002608:	d017      	beq.n	800263a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d123      	bne.n	800268e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	6939      	ldr	r1, [r7, #16]
 800268a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0203 	and.w	r2, r3, #3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a0 	beq.w	8002810 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d0:	4b58      	ldr	r3, [pc, #352]	; (8002834 <HAL_GPIO_Init+0x2d8>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4a57      	ldr	r2, [pc, #348]	; (8002834 <HAL_GPIO_Init+0x2d8>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6193      	str	r3, [r2, #24]
 80026dc:	4b55      	ldr	r3, [pc, #340]	; (8002834 <HAL_GPIO_Init+0x2d8>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e8:	4a53      	ldr	r2, [pc, #332]	; (8002838 <HAL_GPIO_Init+0x2dc>)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	220f      	movs	r2, #15
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002712:	d019      	beq.n	8002748 <HAL_GPIO_Init+0x1ec>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a49      	ldr	r2, [pc, #292]	; (800283c <HAL_GPIO_Init+0x2e0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d013      	beq.n	8002744 <HAL_GPIO_Init+0x1e8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a48      	ldr	r2, [pc, #288]	; (8002840 <HAL_GPIO_Init+0x2e4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00d      	beq.n	8002740 <HAL_GPIO_Init+0x1e4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a47      	ldr	r2, [pc, #284]	; (8002844 <HAL_GPIO_Init+0x2e8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <HAL_GPIO_Init+0x1e0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a46      	ldr	r2, [pc, #280]	; (8002848 <HAL_GPIO_Init+0x2ec>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d101      	bne.n	8002738 <HAL_GPIO_Init+0x1dc>
 8002734:	2304      	movs	r3, #4
 8002736:	e008      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002738:	2305      	movs	r3, #5
 800273a:	e006      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 800273c:	2303      	movs	r3, #3
 800273e:	e004      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002740:	2302      	movs	r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002748:	2300      	movs	r3, #0
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	f002 0203 	and.w	r2, r2, #3
 8002750:	0092      	lsls	r2, r2, #2
 8002752:	4093      	lsls	r3, r2
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800275a:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_GPIO_Init+0x2dc>)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_GPIO_Init+0x2f0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800278c:	4a2f      	ldr	r2, [pc, #188]	; (800284c <HAL_GPIO_Init+0x2f0>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_GPIO_Init+0x2f0>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027b6:	4a25      	ldr	r2, [pc, #148]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027e0:	4a1a      	ldr	r2, [pc, #104]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <HAL_GPIO_Init+0x2f0>)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	f47f aea3 	bne.w	800256c <HAL_GPIO_Init+0x10>
  }
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000
 8002838:	40010000 	.word	0x40010000
 800283c:	48000400 	.word	0x48000400
 8002840:	48000800 	.word	0x48000800
 8002844:	48000c00 	.word	0x48000c00
 8002848:	48001000 	.word	0x48001000
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002860:	787b      	ldrb	r3, [r7, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800286c:	e002      	b.n	8002874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43d9      	mvns	r1, r3
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	400b      	ands	r3, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fe52 	bl	800157c <HAL_GPIO_EXTI_Callback>
  }
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80028fe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f245 5255 	movw	r2, #21845	; 0x5555
 8002908:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6852      	ldr	r2, [r2, #4]
 8002912:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6892      	ldr	r2, [r2, #8]
 800291c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800291e:	f7ff fcdb 	bl	80022d8 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002924:	e00f      	b.n	8002946 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002926:	f7ff fcd7 	bl	80022d8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b27      	cmp	r3, #39	; 0x27
 8002932:	d908      	bls.n	8002946 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e019      	b.n	800297a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e8      	bne.n	8002926 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	429a      	cmp	r2, r3
 8002960:	d005      	beq.n	800296e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	611a      	str	r2, [r3, #16]
 800296c:	e004      	b.n	8002978 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002992:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f001 b823 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 817d 	beq.w	8002cda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029e0:	4bbc      	ldr	r3, [pc, #752]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d00c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ec:	4bb9      	ldr	r3, [pc, #740]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d15c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x10e>
 80029f8:	4bb6      	ldr	r3, [pc, #728]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d155      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x10e>
 8002a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x94>
 8002a32:	4ba8      	ldr	r3, [pc, #672]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e015      	b.n	8002a64 <HAL_RCC_OscConfig+0xc0>
 8002a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a50:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a60:	4b9c      	ldr	r3, [pc, #624]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f002 021f 	and.w	r2, r2, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 811f 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x334>
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8116 	bne.w	8002cd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f000 bfaf 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12e>
 8002ac4:	4b83      	ldr	r3, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a82      	ldr	r2, [pc, #520]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e036      	b.n	8002b40 <HAL_RCC_OscConfig+0x19c>
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x158>
 8002ae2:	4b7c      	ldr	r3, [pc, #496]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7b      	ldr	r2, [pc, #492]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b79      	ldr	r3, [pc, #484]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a78      	ldr	r2, [pc, #480]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e021      	b.n	8002b40 <HAL_RCC_OscConfig+0x19c>
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x184>
 8002b0e:	4b71      	ldr	r3, [pc, #452]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a70      	ldr	r2, [pc, #448]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6e      	ldr	r3, [pc, #440]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6d      	ldr	r2, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0x19c>
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a69      	ldr	r2, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a66      	ldr	r2, [pc, #408]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b40:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f023 020f 	bic.w	r2, r3, #15
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	495f      	ldr	r1, [pc, #380]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d059      	beq.n	8002c1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7ff fbb5 	bl	80022d8 <HAL_GetTick>
 8002b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b74:	f7ff fbb0 	bl	80022d8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d902      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	f000 bf43 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
 8002b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_OscConfig+0x218>
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e015      	b.n	8002be8 <HAL_RCC_OscConfig+0x244>
 8002bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bf0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bf4:	fa92 f2a2 	rbit	r2, r2
 8002bf8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c00:	fab2 f282 	clz	r2, r2
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f002 021f 	and.w	r2, r2, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f202 	lsl.w	r2, r1, r2
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ab      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1d0>
 8002c1c:	e05d      	b.n	8002cda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7ff fb5b 	bl	80022d8 <HAL_GetTick>
 8002c22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff fb56 	bl	80022d8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b64      	cmp	r3, #100	; 0x64
 8002c36:	d902      	bls.n	8002c3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f000 bee9 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
 8002c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2cc>
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	e015      	b.n	8002c9c <HAL_RCC_OscConfig+0x2f8>
 8002c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c74:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c88:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCC_OscConfig+0x330>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ca0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ca4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ca8:	fa92 f2a2 	rbit	r2, r2
 8002cac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cb0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cb4:	fab2 f282 	clz	r2, r2
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f042 0220 	orr.w	r2, r2, #32
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	f002 021f 	and.w	r2, r2, #31
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ab      	bne.n	8002c28 <HAL_RCC_OscConfig+0x284>
 8002cd0:	e003      	b.n	8002cda <HAL_RCC_OscConfig+0x336>
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 817d 	beq.w	8002fea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cf0:	4ba6      	ldr	r3, [pc, #664]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cfc:	4ba3      	ldr	r3, [pc, #652]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d172      	bne.n	8002dee <HAL_RCC_OscConfig+0x44a>
 8002d08:	4ba0      	ldr	r3, [pc, #640]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d16c      	bne.n	8002dee <HAL_RCC_OscConfig+0x44a>
 8002d14:	2302      	movs	r3, #2
 8002d16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCC_OscConfig+0x3a0>
 8002d3e:	4b93      	ldr	r3, [pc, #588]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e013      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c8>
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d56:	2302      	movs	r3, #2
 8002d58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d68:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d82:	fab2 f282 	clz	r2, r2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f002 021f 	and.w	r2, r2, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCC_OscConfig+0x410>
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f000 be2e 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	21f8      	movs	r1, #248	; 0xf8
 8002dca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dd2:	fa91 f1a1 	rbit	r1, r1
 8002dd6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dda:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dde:	fab1 f181 	clz	r1, r1
 8002de2:	b2c9      	uxtb	r1, r1
 8002de4:	408b      	lsls	r3, r1
 8002de6:	4969      	ldr	r1, [pc, #420]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dec:	e0fd      	b.n	8002fea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8088 	beq.w	8002f10 <HAL_RCC_OscConfig+0x56c>
 8002e00:	2301      	movs	r3, #1
 8002e02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2301      	movs	r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7ff fa54 	bl	80022d8 <HAL_GetTick>
 8002e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e36:	f7ff fa4f 	bl	80022d8 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f000 bde2 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4d8>
 8002e76:	4b45      	ldr	r3, [pc, #276]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	e013      	b.n	8002ea4 <HAL_RCC_OscConfig+0x500>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e8e:	2302      	movs	r3, #2
 8002e90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ea0:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002eaa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002eae:	fa92 f2a2 	rbit	r2, r2
 8002eb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002eb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eba:	fab2 f282 	clz	r2, r2
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	f042 0220 	orr.w	r2, r2, #32
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	f002 021f 	and.w	r2, r2, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0af      	beq.n	8002e36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	21f8      	movs	r1, #248	; 0xf8
 8002eec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ef4:	fa91 f1a1 	rbit	r1, r1
 8002ef8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002efc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f00:	fab1 f181 	clz	r1, r1
 8002f04:	b2c9      	uxtb	r1, r1
 8002f06:	408b      	lsls	r3, r1
 8002f08:	4920      	ldr	r1, [pc, #128]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
 8002f0e:	e06c      	b.n	8002fea <HAL_RCC_OscConfig+0x646>
 8002f10:	2301      	movs	r3, #1
 8002f12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	461a      	mov	r2, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f9cc 	bl	80022d8 <HAL_GetTick>
 8002f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f46:	f7ff f9c7 	bl	80022d8 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	f000 bd5a 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d104      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5ec>
 8002f86:	4b01      	ldr	r3, [pc, #4]	; (8002f8c <HAL_RCC_OscConfig+0x5e8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e015      	b.n	8002fb8 <HAL_RCC_OscConfig+0x614>
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	2302      	movs	r3, #2
 8002f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002fa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fb4:	4bc8      	ldr	r3, [pc, #800]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fc2:	fa92 f2a2 	rbit	r2, r2
 8002fc6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fce:	fab2 f282 	clz	r2, r2
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f002 021f 	and.w	r2, r2, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ad      	bne.n	8002f46 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8110 	beq.w	8003220 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d079      	beq.n	8003104 <HAL_RCC_OscConfig+0x760>
 8003010:	2301      	movs	r3, #1
 8003012:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4bab      	ldr	r3, [pc, #684]	; (80032dc <HAL_RCC_OscConfig+0x938>)
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	2301      	movs	r3, #1
 8003038:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7ff f94d 	bl	80022d8 <HAL_GetTick>
 800303e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003044:	f7ff f948 	bl	80022d8 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d902      	bls.n	800305a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	f000 bcdb 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003074:	2202      	movs	r2, #2
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	fa93 f2a3 	rbit	r2, r3
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003098:	2202      	movs	r2, #2
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b4:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 80030b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030c0:	2102      	movs	r1, #2
 80030c2:	6019      	str	r1, [r3, #0]
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	fa93 f1a3 	rbit	r1, r3
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030da:	6019      	str	r1, [r3, #0]
  return result;
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0a0      	beq.n	8003044 <HAL_RCC_OscConfig+0x6a0>
 8003102:	e08d      	b.n	8003220 <HAL_RCC_OscConfig+0x87c>
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003126:	601a      	str	r2, [r3, #0]
  return result;
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003130:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x938>)
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	461a      	mov	r2, r3
 8003142:	2300      	movs	r3, #0
 8003144:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7ff f8c7 	bl	80022d8 <HAL_GetTick>
 800314a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7ff f8c2 	bl	80022d8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d902      	bls.n	8003166 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	f000 bc55 	b.w	8003a10 <HAL_RCC_OscConfig+0x106c>
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800316e:	2202      	movs	r2, #2
 8003170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003192:	2202      	movs	r2, #2
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031b6:	2202      	movs	r2, #2
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 80031d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031de:	2102      	movs	r1, #2
 80031e0:	6019      	str	r1, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f1a3 	rbit	r1, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031f8:	6019      	str	r1, [r3, #0]
  return result;
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d197      	bne.n	8003150 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 81a1 	beq.w	8003578 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323c:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d116      	bne.n	8003276 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 800324e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003252:	61d3      	str	r3, [r2, #28]
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800326e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_RCC_OscConfig+0x93c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11a      	bne.n	80032b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <HAL_RCC_OscConfig+0x93c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_RCC_OscConfig+0x93c>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328e:	f7ff f823 	bl	80022d8 <HAL_GetTick>
 8003292:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	e009      	b.n	80032ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003298:	f7ff f81e 	bl	80022d8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e3b1      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RCC_OscConfig+0x93c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCC_OscConfig+0x940>
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4a02      	ldr	r2, [pc, #8]	; (80032d8 <HAL_RCC_OscConfig+0x934>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	e03c      	b.n	8003350 <HAL_RCC_OscConfig+0x9ac>
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	10908120 	.word	0x10908120
 80032e0:	40007000 	.word	0x40007000
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10c      	bne.n	800330e <HAL_RCC_OscConfig+0x96a>
 80032f4:	4bc1      	ldr	r3, [pc, #772]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4ac0      	ldr	r2, [pc, #768]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	6213      	str	r3, [r2, #32]
 8003300:	4bbe      	ldr	r3, [pc, #760]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4abd      	ldr	r2, [pc, #756]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003306:	f023 0304 	bic.w	r3, r3, #4
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	e020      	b.n	8003350 <HAL_RCC_OscConfig+0x9ac>
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b05      	cmp	r3, #5
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x994>
 800331e:	4bb7      	ldr	r3, [pc, #732]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4ab6      	ldr	r2, [pc, #728]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6213      	str	r3, [r2, #32]
 800332a:	4bb4      	ldr	r3, [pc, #720]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4ab3      	ldr	r2, [pc, #716]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6213      	str	r3, [r2, #32]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0x9ac>
 8003338:	4bb0      	ldr	r3, [pc, #704]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4aaf      	ldr	r2, [pc, #700]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	4bad      	ldr	r3, [pc, #692]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4aac      	ldr	r2, [pc, #688]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8081 	beq.w	8003464 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7fe ffb9 	bl	80022d8 <HAL_GetTick>
 8003366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe ffb4 	bl	80022d8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e345      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800338c:	2202      	movs	r2, #2
 800338e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003394:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fa93 f2a3 	rbit	r2, r3
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033b0:	2202      	movs	r2, #2
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033ca:	601a      	str	r2, [r3, #0]
  return result;
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_OscConfig+0xa4c>
 80033ea:	4b84      	ldr	r3, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	e013      	b.n	8003418 <HAL_RCC_OscConfig+0xa74>
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033f8:	2202      	movs	r2, #2
 80033fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	4b79      	ldr	r3, [pc, #484]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003420:	2102      	movs	r1, #2
 8003422:	6011      	str	r1, [r2, #0]
 8003424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003428:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	fa92 f1a2 	rbit	r1, r2
 8003432:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003436:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800343a:	6011      	str	r1, [r2, #0]
  return result;
 800343c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003440:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	fab2 f282 	clz	r2, r2
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f002 021f 	and.w	r2, r2, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f202 	lsl.w	r2, r1, r2
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d084      	beq.n	800336c <HAL_RCC_OscConfig+0x9c8>
 8003462:	e07f      	b.n	8003564 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003464:	f7fe ff38 	bl	80022d8 <HAL_GetTick>
 8003468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	e00b      	b.n	8003486 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe ff33 	bl	80022d8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e2c4      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800348e:	2202      	movs	r2, #2
 8003490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003496:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034b2:	2202      	movs	r2, #2
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fa93 f2a3 	rbit	r2, r3
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034cc:	601a      	str	r2, [r3, #0]
  return result;
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_OscConfig+0xb4e>
 80034ec:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	e013      	b.n	800351a <HAL_RCC_OscConfig+0xb76>
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034fa:	2202      	movs	r2, #2
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	4b39      	ldr	r3, [pc, #228]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003522:	2102      	movs	r1, #2
 8003524:	6011      	str	r1, [r2, #0]
 8003526:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800352a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	fa92 f1a2 	rbit	r1, r2
 8003534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003538:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800353c:	6011      	str	r1, [r2, #0]
  return result;
 800353e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003542:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f002 021f 	and.w	r2, r2, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d184      	bne.n	800346e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003564:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003568:	2b01      	cmp	r3, #1
 800356a:	d105      	bne.n	8003578 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	4a22      	ldr	r2, [pc, #136]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 8003572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003576:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8242 	beq.w	8003a0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358a:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_RCC_OscConfig+0xc58>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b08      	cmp	r3, #8
 8003594:	f000 8213 	beq.w	80039be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	f040 8162 	bne.w	800386e <HAL_RCC_OscConfig+0xeca>
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035ce:	601a      	str	r2, [r3, #0]
  return result;
 80035d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	461a      	mov	r2, r3
 80035ec:	2300      	movs	r3, #0
 80035ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fe72 	bl	80022d8 <HAL_GetTick>
 80035f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f8:	e00c      	b.n	8003614 <HAL_RCC_OscConfig+0xc70>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe fe6a 	bl	80022d8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e1fd      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
 8003614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003618:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800361c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f2a3 	rbit	r2, r3
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003638:	601a      	str	r2, [r3, #0]
  return result;
 800363a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003642:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_RCC_OscConfig+0xcba>
 8003658:	4bb0      	ldr	r3, [pc, #704]	; (800391c <HAL_RCC_OscConfig+0xf78>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e027      	b.n	80036ae <HAL_RCC_OscConfig+0xd0a>
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800368c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fa93 f2a3 	rbit	r2, r3
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b9c      	ldr	r3, [pc, #624]	; (800391c <HAL_RCC_OscConfig+0xf78>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036ba:	6011      	str	r1, [r2, #0]
 80036bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	fa92 f1a2 	rbit	r1, r2
 80036ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036d2:	6011      	str	r1, [r2, #0]
  return result;
 80036d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	fab2 f282 	clz	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f042 0220 	orr.w	r2, r2, #32
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f002 021f 	and.w	r2, r2, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f202 	lsl.w	r2, r1, r2
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d182      	bne.n	8003600 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0xf78>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	430b      	orrs	r3, r1
 800371c:	497f      	ldr	r1, [pc, #508]	; (800391c <HAL_RCC_OscConfig+0xf78>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800372a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800372e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003746:	601a      	str	r2, [r3, #0]
  return result;
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003750:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800375c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	461a      	mov	r2, r3
 8003764:	2301      	movs	r3, #1
 8003766:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe fdb6 	bl	80022d8 <HAL_GetTick>
 800376c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003770:	e009      	b.n	8003786 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003772:	f7fe fdb1 	bl	80022d8 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e144      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800378e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003798:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037aa:	601a      	str	r2, [r3, #0]
  return result;
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_OscConfig+0xe2c>
 80037ca:	4b54      	ldr	r3, [pc, #336]	; (800391c <HAL_RCC_OscConfig+0xf78>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e027      	b.n	8003820 <HAL_RCC_OscConfig+0xe7c>
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	fa93 f2a3 	rbit	r2, r3
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	4b3f      	ldr	r3, [pc, #252]	; (800391c <HAL_RCC_OscConfig+0xf78>)
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003824:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003828:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800382c:	6011      	str	r1, [r2, #0]
 800382e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003832:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	fa92 f1a2 	rbit	r1, r2
 800383c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003840:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003844:	6011      	str	r1, [r2, #0]
  return result;
 8003846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800384a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	fab2 f282 	clz	r2, r2
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	f042 0220 	orr.w	r2, r2, #32
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	f002 021f 	and.w	r2, r2, #31
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d082      	beq.n	8003772 <HAL_RCC_OscConfig+0xdce>
 800386c:	e0cf      	b.n	8003a0e <HAL_RCC_OscConfig+0x106a>
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800387a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	fa93 f2a3 	rbit	r2, r3
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003892:	601a      	str	r2, [r3, #0]
  return result;
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800389c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	461a      	mov	r2, r3
 80038b0:	2300      	movs	r3, #0
 80038b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fd10 	bl	80022d8 <HAL_GetTick>
 80038b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	e009      	b.n	80038d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe fd0b 	bl	80022d8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e09e      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038f6:	601a      	str	r2, [r3, #0]
  return result;
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d104      	bne.n	8003920 <HAL_RCC_OscConfig+0xf7c>
 8003916:	4b01      	ldr	r3, [pc, #4]	; (800391c <HAL_RCC_OscConfig+0xf78>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e029      	b.n	8003970 <HAL_RCC_OscConfig+0xfcc>
 800391c:	40021000 	.word	0x40021000
 8003920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003924:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003932:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fa93 f2a3 	rbit	r2, r3
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800394e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_OscConfig+0x1078>)
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003974:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003978:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800397c:	6011      	str	r1, [r2, #0]
 800397e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003982:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	fa92 f1a2 	rbit	r1, r2
 800398c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003990:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003994:	6011      	str	r1, [r2, #0]
  return result;
 8003996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800399a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f042 0220 	orr.w	r2, r2, #32
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f002 021f 	and.w	r2, r2, #31
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d180      	bne.n	80038be <HAL_RCC_OscConfig+0xf1a>
 80039bc:	e027      	b.n	8003a0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e01e      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_OscConfig+0x1078>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d10b      	bne.n	8003a0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b09e      	sub	sp, #120	; 0x78
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e162      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b90      	ldr	r3, [pc, #576]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d910      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b8d      	ldr	r3, [pc, #564]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 0207 	bic.w	r2, r3, #7
 8003a4e:	498b      	ldr	r1, [pc, #556]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b89      	ldr	r3, [pc, #548]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e14a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b82      	ldr	r3, [pc, #520]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	497f      	ldr	r1, [pc, #508]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80dc 	beq.w	8003c4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d13c      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xf6>
 8003a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xa6>
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0xc6>
 8003ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8003ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003adc:	fa93 f3a3 	rbit	r3, r3
 8003ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae2:	4b67      	ldr	r3, [pc, #412]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aea:	65ba      	str	r2, [r7, #88]	; 0x58
 8003aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aee:	fa92 f2a2 	rbit	r2, r2
 8003af2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003af4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003af6:	fab2 f282 	clz	r2, r2
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	f042 0220 	orr.w	r2, r2, #32
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	f002 021f 	and.w	r2, r2, #31
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d17b      	bne.n	8003c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0f3      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d13c      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x178>
 8003b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x128>
 8003b42:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	e00f      	b.n	8003b68 <HAL_RCC_ClockConfig+0x148>
 8003b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	647b      	str	r3, [r7, #68]	; 0x44
 8003b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b64:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b70:	fa92 f2a2 	rbit	r2, r2
 8003b74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b78:	fab2 f282 	clz	r2, r2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	f042 0220 	orr.w	r2, r2, #32
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f002 021f 	and.w	r2, r2, #31
 8003b88:	2101      	movs	r1, #1
 8003b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d13a      	bne.n	8003c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b2      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2de>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x1a0>
 8003bba:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	e00d      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1bc>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	2302      	movs	r3, #2
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2202      	movs	r2, #2
 8003bde:	61ba      	str	r2, [r7, #24]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	fa92 f2a2 	rbit	r2, r2
 8003be6:	617a      	str	r2, [r7, #20]
  return result;
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	fab2 f282 	clz	r2, r2
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	f042 0220 	orr.w	r2, r2, #32
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	f002 021f 	and.w	r2, r2, #31
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e079      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	491a      	ldr	r1, [pc, #104]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c1c:	f7fe fb5c 	bl	80022d8 <HAL_GetTick>
 8003c20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fe fb58 	bl	80022d8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e061      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1eb      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d214      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 0207 	bic.w	r2, r3, #7
 8003c62:	4906      	ldr	r1, [pc, #24]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_RCC_ClockConfig+0x25c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e040      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2de>
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCC_ClockConfig+0x2e8>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	491a      	ldr	r1, [pc, #104]	; (8003d08 <HAL_RCC_ClockConfig+0x2e8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_RCC_ClockConfig+0x2e8>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4912      	ldr	r1, [pc, #72]	; (8003d08 <HAL_RCC_ClockConfig+0x2e8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cc2:	f000 f829 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <HAL_RCC_ClockConfig+0x2e8>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	22f0      	movs	r2, #240	; 0xf0
 8003cd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	fa92 f2a2 	rbit	r2, r2
 8003cda:	60fa      	str	r2, [r7, #12]
  return result;
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	fab2 f282 	clz	r2, r2
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	40d3      	lsrs	r3, r2
 8003ce6:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x2ec>)
 8003ce8:	5cd3      	ldrb	r3, [r2, r3]
 8003cea:	fa21 f303 	lsr.w	r3, r1, r3
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <HAL_RCC_ClockConfig+0x2f0>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_RCC_ClockConfig+0x2f4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe faaa 	bl	8002250 <HAL_InitTick>
  
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3778      	adds	r7, #120	; 0x78
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	080089d0 	.word	0x080089d0
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b08b      	sub	sp, #44	; 0x2c
 8003d1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d32:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x30>
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d003      	beq.n	8003d4e <HAL_RCC_GetSysClockFreq+0x36>
 8003d46:	e03c      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d4a:	623b      	str	r3, [r7, #32]
      break;
 8003d4c:	e03c      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	fa92 f2a2 	rbit	r2, r2
 8003d60:	607a      	str	r2, [r7, #4]
  return result;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	40d3      	lsrs	r3, r2
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d72:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	fa92 f2a2 	rbit	r2, r2
 8003d84:	60fa      	str	r2, [r7, #12]
  return result;
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	fab2 f282 	clz	r2, r2
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	40d3      	lsrs	r3, r2
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003da0:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	e004      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	623b      	str	r3, [r7, #32]
      break;
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dc4:	623b      	str	r3, [r7, #32]
      break;
 8003dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	372c      	adds	r7, #44	; 0x2c
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	007a1200 	.word	0x007a1200
 8003de0:	080089e8 	.word	0x080089e8
 8003de4:	080089f8 	.word	0x080089f8
 8003de8:	003d0900 	.word	0x003d0900

08003dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df2:	681b      	ldr	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000000 	.word	0x20000000

08003e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e0a:	f7ff ffef 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8003e0e:	4601      	mov	r1, r0
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	fa92 f2a2 	rbit	r2, r2
 8003e24:	603a      	str	r2, [r7, #0]
  return result;
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	fab2 f282 	clz	r2, r2
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	40d3      	lsrs	r3, r2
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000
 8003e44:	080089e0 	.word	0x080089e0

08003e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e4e:	f7ff ffcd 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8003e52:	4601      	mov	r1, r0
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e5c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	fa92 f2a2 	rbit	r2, r2
 8003e68:	603a      	str	r2, [r7, #0]
  return result;
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	fab2 f282 	clz	r2, r2
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	40d3      	lsrs	r3, r2
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e76:	5cd3      	ldrb	r3, [r2, r3]
 8003e78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	080089e0 	.word	0x080089e0

08003e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b092      	sub	sp, #72	; 0x48
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80d4 	beq.w	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb0:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10e      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebc:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	61d3      	str	r3, [r2, #28]
 8003ec8:	4b48      	ldr	r3, [pc, #288]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d118      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee6:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a41      	ldr	r2, [pc, #260]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe f9f1 	bl	80022d8 <HAL_GetTick>
 8003ef6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	e008      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efa:	f7fe f9ed 	bl	80022d8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b64      	cmp	r3, #100	; 0x64
 8003f06:	d901      	bls.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e12d      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f18:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8084 	beq.w	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d07c      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f38:	4b2c      	ldr	r3, [pc, #176]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	461a      	mov	r2, r3
 8003f62:	2301      	movs	r3, #1
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	461a      	mov	r2, r3
 8003f86:	2300      	movs	r3, #0
 8003f88:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f8a:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04b      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fe f99d 	bl	80022d8 <HAL_GetTick>
 8003f9e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fe f999 	bl	80022d8 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e0d7      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	61fb      	str	r3, [r7, #28]
  return result;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d108      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003fe6:	4b01      	ldr	r3, [pc, #4]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	e00d      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	10908100 	.word	0x10908100
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	4b5a      	ldr	r3, [pc, #360]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2202      	movs	r2, #2
 800400a:	613a      	str	r2, [r7, #16]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	fa92 f2a2 	rbit	r2, r2
 8004012:	60fa      	str	r2, [r7, #12]
  return result;
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	fab2 f282 	clz	r2, r2
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	f002 021f 	and.w	r2, r2, #31
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f202 	lsl.w	r2, r1, r2
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0b7      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004032:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	494c      	ldr	r1, [pc, #304]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004044:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404c:	4b48      	ldr	r3, [pc, #288]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4a47      	ldr	r2, [pc, #284]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004056:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f023 0203 	bic.w	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	493f      	ldr	r1, [pc, #252]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	4938      	ldr	r1, [pc, #224]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a0:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4930      	ldr	r1, [pc, #192]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040be:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f023 0210 	bic.w	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4929      	ldr	r1, [pc, #164]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	4921      	ldr	r1, [pc, #132]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f023 0220 	bic.w	r2, r3, #32
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	491a      	ldr	r1, [pc, #104]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004118:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	4912      	ldr	r1, [pc, #72]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	490b      	ldr	r1, [pc, #44]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3748      	adds	r7, #72	; 0x48
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000

08004174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e09d      	b.n	80042c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004196:	d009      	beq.n	80041ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
 800419e:	e005      	b.n	80041ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd fc4a 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041ec:	d902      	bls.n	80041f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e002      	b.n	80041fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004202:	d007      	beq.n	8004214 <HAL_SPI_Init+0xa0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800420c:	d002      	beq.n	8004214 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	ea42 0103 	orr.w	r1, r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	f003 0204 	and.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b088      	sub	sp, #32
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_SPI_Transmit+0x22>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e158      	b.n	800459e <HAL_SPI_Transmit+0x2d4>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f4:	f7fd fff0 	bl	80022d8 <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d002      	beq.n	8004310 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800430e:	e13d      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x52>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004320:	e134      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2203      	movs	r2, #3
 8004326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d10f      	bne.n	800438e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d007      	beq.n	80043ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b4:	d94b      	bls.n	800444e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Transmit+0xfa>
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d13e      	bne.n	8004442 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	881a      	ldrh	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	1c9a      	adds	r2, r3, #2
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e8:	e02b      	b.n	8004442 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d112      	bne.n	800441e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800441c:	e011      	b.n	8004442 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441e:	f7fd ff5b 	bl	80022d8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d803      	bhi.n	8004436 <HAL_SPI_Transmit+0x16c>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d102      	bne.n	800443c <HAL_SPI_Transmit+0x172>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004440:	e0a4      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ce      	bne.n	80043ea <HAL_SPI_Transmit+0x120>
 800444c:	e07c      	b.n	8004548 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0x192>
 8004456:	8afb      	ldrh	r3, [r7, #22]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d170      	bne.n	800453e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d912      	bls.n	800448c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	881a      	ldrh	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	1c9a      	adds	r2, r3, #2
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b02      	subs	r3, #2
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448a:	e058      	b.n	800453e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044b2:	e044      	b.n	800453e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d12b      	bne.n	800451a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d912      	bls.n	80044f2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	1c9a      	adds	r2, r3, #2
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b02      	subs	r3, #2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f0:	e025      	b.n	800453e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004518:	e011      	b.n	800453e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451a:	f7fd fedd 	bl	80022d8 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d803      	bhi.n	8004532 <HAL_SPI_Transmit+0x268>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Transmit+0x26e>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800453c:	e026      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1b5      	bne.n	80044b4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb5b 	bl	8004c08 <SPI_EndRxTxTransaction>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e000      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800458a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800459c:	7ffb      	ldrb	r3, [r7, #31]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b08a      	sub	sp, #40	; 0x28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x26>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e1fb      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x41e>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d4:	f7fd fe80 	bl	80022d8 <HAL_GetTick>
 80045d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045f0:	7efb      	ldrb	r3, [r7, #27]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d00e      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x6e>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fc:	d106      	bne.n	800460c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <HAL_SPI_TransmitReceive+0x66>
 8004606:	7efb      	ldrb	r3, [r7, #27]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d003      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800460c:	2302      	movs	r3, #2
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004612:	e1cd      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x80>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x80>
 8004620:	887b      	ldrh	r3, [r7, #2]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800462c:	e1c0      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2205      	movs	r2, #5
 800463e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	887a      	ldrh	r2, [r7, #2]
 800466e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004684:	d802      	bhi.n	800468c <HAL_SPI_TransmitReceive+0xe6>
 8004686:	8a3b      	ldrh	r3, [r7, #16]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d908      	bls.n	800469e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	e007      	b.n	80046ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d007      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046d4:	d97c      	bls.n	80047d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x13e>
 80046de:	8a7b      	ldrh	r3, [r7, #18]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d169      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004708:	e056      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d11b      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1aa>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x1aa>
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2b01      	cmp	r3, #1
 8004726:	d113      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d11c      	bne.n	8004798 <HAL_SPI_TransmitReceive+0x1f2>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	b292      	uxth	r2, r2
 8004776:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004794:	2301      	movs	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004798:	f7fd fd9e 	bl	80022d8 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d807      	bhi.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d003      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047b6:	e0fb      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1a3      	bne.n	800470a <HAL_SPI_TransmitReceive+0x164>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d19d      	bne.n	800470a <HAL_SPI_TransmitReceive+0x164>
 80047ce:	e0df      	b.n	8004990 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x23a>
 80047d8:	8a7b      	ldrh	r3, [r7, #18]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	f040 80cb 	bne.w	8004976 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d912      	bls.n	8004810 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	881a      	ldrh	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b02      	subs	r3, #2
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800480e:	e0b2      	b.n	8004976 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	7812      	ldrb	r2, [r2, #0]
 800481c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004836:	e09e      	b.n	8004976 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d134      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x30a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02f      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x30a>
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	2b01      	cmp	r3, #1
 8004854:	d12c      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d912      	bls.n	8004886 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b02      	subs	r3, #2
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004884:	e012      	b.n	80048ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d148      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x3aa>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d042      	beq.n	8004950 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d923      	bls.n	800491e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	b292      	uxth	r2, r2
 80048e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b02      	subs	r3, #2
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d81f      	bhi.n	800494c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	e016      	b.n	800494c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f103 020c 	add.w	r2, r3, #12
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800494c:	2301      	movs	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004950:	f7fd fcc2 	bl	80022d8 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	429a      	cmp	r2, r3
 800495e:	d803      	bhi.n	8004968 <HAL_SPI_TransmitReceive+0x3c2>
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d102      	bne.n	800496e <HAL_SPI_TransmitReceive+0x3c8>
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004974:	e01c      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f af5b 	bne.w	8004838 <HAL_SPI_TransmitReceive+0x292>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	f47f af54 	bne.w	8004838 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f937 	bl	8004c08 <SPI_EndRxTxTransaction>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60
 80049ac:	e000      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80049ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049dc:	f7fd fc7c 	bl	80022d8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ec:	f7fd fc74 	bl	80022d8 <HAL_GetTick>
 80049f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a02:	e054      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d050      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a0c:	f7fd fc64 	bl	80022d8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d902      	bls.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d13d      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3a:	d111      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d004      	beq.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4e:	d107      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a68:	d10f      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e017      	b.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d19b      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000000 	.word	0x20000000

08004adc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004aee:	f7fd fbf3 	bl	80022d8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	4413      	add	r3, r2
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004afe:	f7fd fbeb 	bl	80022d8 <HAL_GetTick>
 8004b02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b0c:	4b3d      	ldr	r3, [pc, #244]	; (8004c04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	00da      	lsls	r2, r3, #3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	0d1b      	lsrs	r3, r3, #20
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b24:	e060      	b.n	8004be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b2c:	d107      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d050      	beq.n	8004be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b46:	f7fd fbc7 	bl	80022d8 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d902      	bls.n	8004b5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d13d      	bne.n	8004bd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b74:	d111      	bne.n	8004b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d004      	beq.n	8004b8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d107      	bne.n	8004b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba2:	d10f      	bne.n	8004bc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e010      	b.n	8004bfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d196      	bne.n	8004b26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3728      	adds	r7, #40	; 0x28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000000 	.word	0x20000000

08004c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ff5b 	bl	8004adc <SPI_WaitFifoStateUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e027      	b.n	8004c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fec0 	bl	80049cc <SPI_WaitFlagStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e014      	b.n	8004c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff ff34 	bl	8004adc <SPI_WaitFifoStateUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e000      	b.n	8004c8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e041      	b.n	8004d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc ff80 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f000 fa0e 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e041      	b.n	8004dd0 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5c:	d01d      	beq.n	8004d9a <HAL_TIM_Base_Start+0x66>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_TIM_Base_Start+0xa8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <HAL_TIM_Base_Start+0x66>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <HAL_TIM_Base_Start+0xac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_TIM_Base_Start+0x66>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <HAL_TIM_Base_Start+0xb0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_TIM_Base_Start+0x66>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <HAL_TIM_Base_Start+0xb4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_TIM_Base_Start+0x66>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <HAL_TIM_Base_Start+0xb8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_TIM_Base_Start+0x66>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a16      	ldr	r2, [pc, #88]	; (8004df0 <HAL_TIM_Base_Start+0xbc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d111      	bne.n	8004dbe <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b06      	cmp	r3, #6
 8004daa:	d010      	beq.n	8004dce <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	e007      	b.n	8004dce <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40001800 	.word	0x40001800
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40015c00 	.word	0x40015c00

08004df4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e041      	b.n	8004e8a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f839 	bl	8004e92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f000 f95e 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_TIM_OC_Start+0x24>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e022      	b.n	8004f12 <HAL_TIM_OC_Start+0x6a>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d109      	bne.n	8004ee6 <HAL_TIM_OC_Start+0x3e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	bf14      	ite	ne
 8004ede:	2301      	movne	r3, #1
 8004ee0:	2300      	moveq	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e015      	b.n	8004f12 <HAL_TIM_OC_Start+0x6a>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d109      	bne.n	8004f00 <HAL_TIM_OC_Start+0x58>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	e008      	b.n	8004f12 <HAL_TIM_OC_Start+0x6a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	bf14      	ite	ne
 8004f0c:	2301      	movne	r3, #1
 8004f0e:	2300      	moveq	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e07c      	b.n	8005014 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_OC_Start+0x82>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	e013      	b.n	8004f52 <HAL_TIM_OC_Start+0xaa>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_OC_Start+0x92>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f38:	e00b      	b.n	8004f52 <HAL_TIM_OC_Start+0xaa>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_OC_Start+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f48:	e003      	b.n	8004f52 <HAL_TIM_OC_Start+0xaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2201      	movs	r2, #1
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fabd 	bl	80054da <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2d      	ldr	r2, [pc, #180]	; (800501c <HAL_TIM_OC_Start+0x174>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_TIM_OC_Start+0xd6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <HAL_TIM_OC_Start+0x178>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_TIM_OC_Start+0xd6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <HAL_TIM_OC_Start+0x17c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_OC_Start+0xda>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <HAL_TIM_OC_Start+0xdc>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d01d      	beq.n	8004fde <HAL_TIM_OC_Start+0x136>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <HAL_TIM_OC_Start+0x180>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_TIM_OC_Start+0x136>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a1e      	ldr	r2, [pc, #120]	; (800502c <HAL_TIM_OC_Start+0x184>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_TIM_OC_Start+0x136>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <HAL_TIM_OC_Start+0x188>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_TIM_OC_Start+0x136>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <HAL_TIM_OC_Start+0x18c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_TIM_OC_Start+0x136>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a13      	ldr	r2, [pc, #76]	; (800501c <HAL_TIM_OC_Start+0x174>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_TIM_OC_Start+0x136>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a17      	ldr	r2, [pc, #92]	; (8005038 <HAL_TIM_OC_Start+0x190>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d111      	bne.n	8005002 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b06      	cmp	r3, #6
 8004fee:	d010      	beq.n	8005012 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	e007      	b.n	8005012 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40001800 	.word	0x40001800
 8005038:	40015c00 	.word	0x40015c00

0800503c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e048      	b.n	80050ec <HAL_TIM_OC_ConfigChannel+0xb0>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d839      	bhi.n	80050dc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_TIM_OC_ConfigChannel+0x34>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080050dd 	.word	0x080050dd
 8005078:	080050dd 	.word	0x080050dd
 800507c:	080050dd 	.word	0x080050dd
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050dd 	.word	0x080050dd
 800508c:	080050dd 	.word	0x080050dd
 8005090:	080050c1 	.word	0x080050c1
 8005094:	080050dd 	.word	0x080050dd
 8005098:	080050dd 	.word	0x080050dd
 800509c:	080050dd 	.word	0x080050dd
 80050a0:	080050cf 	.word	0x080050cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f8bc 	bl	8005228 <TIM_OC1_SetConfig>
      break;
 80050b0:	e017      	b.n	80050e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f92f 	bl	800531c <TIM_OC2_SetConfig>
      break;
 80050be:	e010      	b.n	80050e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f98a 	bl	80053e0 <TIM_OC3_SetConfig>
      break;
 80050cc:	e009      	b.n	80050e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f9c1 	bl	800545c <TIM_OC4_SetConfig>
      break;
 80050da:	e002      	b.n	80050e2 <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
      break;
 80050e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510a:	d00f      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3c      	ldr	r2, [pc, #240]	; (8005200 <TIM_Base_SetConfig+0x10c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3b      	ldr	r2, [pc, #236]	; (8005204 <TIM_Base_SetConfig+0x110>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3a      	ldr	r2, [pc, #232]	; (8005208 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a39      	ldr	r2, [pc, #228]	; (800520c <TIM_Base_SetConfig+0x118>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d108      	bne.n	800513e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d027      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <TIM_Base_SetConfig+0x10c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d023      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <TIM_Base_SetConfig+0x110>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01f      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2b      	ldr	r2, [pc, #172]	; (8005208 <TIM_Base_SetConfig+0x114>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01b      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d017      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <TIM_Base_SetConfig+0x120>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00f      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a28      	ldr	r2, [pc, #160]	; (800521c <TIM_Base_SetConfig+0x128>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00b      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <TIM_Base_SetConfig+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <TIM_Base_SetConfig+0x130>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_Base_SetConfig+0xa2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1e      	ldr	r2, [pc, #120]	; (800520c <TIM_Base_SetConfig+0x118>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d108      	bne.n	80051a8 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <TIM_Base_SetConfig+0x128>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0xf0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <TIM_Base_SetConfig+0x12c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0xf0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <TIM_Base_SetConfig+0x130>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d103      	bne.n	80051ec <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	615a      	str	r2, [r3, #20]
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40015c00 	.word	0x40015c00
 8005210:	40001800 	.word	0x40001800
 8005214:	40001c00 	.word	0x40001c00
 8005218:	40002000 	.word	0x40002000
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800

08005228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0201 	bic.w	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 0302 	bic.w	r3, r3, #2
 8005270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a24      	ldr	r2, [pc, #144]	; (8005310 <TIM_OC1_SetConfig+0xe8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d007      	beq.n	8005294 <TIM_OC1_SetConfig+0x6c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a23      	ldr	r2, [pc, #140]	; (8005314 <TIM_OC1_SetConfig+0xec>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_OC1_SetConfig+0x6c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a22      	ldr	r2, [pc, #136]	; (8005318 <TIM_OC1_SetConfig+0xf0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d10c      	bne.n	80052ae <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0308 	bic.w	r3, r3, #8
 800529a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f023 0304 	bic.w	r3, r3, #4
 80052ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <TIM_OC1_SetConfig+0xe8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <TIM_OC1_SetConfig+0x9e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <TIM_OC1_SetConfig+0xec>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_OC1_SetConfig+0x9e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a15      	ldr	r2, [pc, #84]	; (8005318 <TIM_OC1_SetConfig+0xf0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d111      	bne.n	80052ea <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0210 	bic.w	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 0320 	bic.w	r3, r3, #32
 8005366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a17      	ldr	r2, [pc, #92]	; (80053d4 <TIM_OC2_SetConfig+0xb8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_OC2_SetConfig+0x70>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <TIM_OC2_SetConfig+0xbc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_OC2_SetConfig+0x70>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a15      	ldr	r2, [pc, #84]	; (80053dc <TIM_OC2_SetConfig+0xc0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10f      	bne.n	80053ac <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005392:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800

080053e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054da:	b480      	push	{r7}
 80054dc:	b087      	sub	sp, #28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2201      	movs	r2, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1a      	ldr	r2, [r3, #32]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	43db      	mvns	r3, r3
 80054fc:	401a      	ands	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1a      	ldr	r2, [r3, #32]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	fa01 f303 	lsl.w	r3, r1, r3
 8005512:	431a      	orrs	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800553c:	2302      	movs	r3, #2
 800553e:	e03d      	b.n	80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e040      	b.n	800565c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc fb8e 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	; 0x24
 80055f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8c0 	bl	800578c <UART_SetConfig>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e022      	b.n	800565c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa2e 	bl	8005a80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fab5 	bl	8005bc4 <UART_CheckIdleState>
 800565a:	4603      	mov	r3, r0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005678:	2b20      	cmp	r3, #32
 800567a:	f040 8082 	bne.w	8005782 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_UART_Transmit+0x26>
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e07a      	b.n	8005784 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_UART_Transmit+0x38>
 8005698:	2302      	movs	r3, #2
 800569a:	e073      	b.n	8005784 <HAL_UART_Transmit+0x120>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2221      	movs	r2, #33	; 0x21
 80056b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b2:	f7fc fe11 	bl	80022d8 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d108      	bne.n	80056e4 <HAL_UART_Transmit+0x80>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e003      	b.n	80056ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056f4:	e02d      	b.n	8005752 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 faa8 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e039      	b.n	8005784 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	881a      	ldrh	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005722:	b292      	uxth	r2, r2
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	3302      	adds	r3, #2
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e008      	b.n	8005740 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b292      	uxth	r2, r2
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1cb      	bne.n	80056f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2140      	movs	r1, #64	; 0x40
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fa74 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e005      	b.n	8005784 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057ba:	f023 030c 	bic.w	r3, r3, #12
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a99      	ldr	r2, [pc, #612]	; (8005a6c <UART_SetConfig+0x2e0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d120      	bne.n	800584e <UART_SetConfig+0xc2>
 800580c:	4b98      	ldr	r3, [pc, #608]	; (8005a70 <UART_SetConfig+0x2e4>)
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b03      	cmp	r3, #3
 8005816:	d817      	bhi.n	8005848 <UART_SetConfig+0xbc>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x94>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005831 	.word	0x08005831
 8005824:	0800583d 	.word	0x0800583d
 8005828:	08005843 	.word	0x08005843
 800582c:	08005837 	.word	0x08005837
 8005830:	2301      	movs	r3, #1
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e061      	b.n	80058fa <UART_SetConfig+0x16e>
 8005836:	2302      	movs	r3, #2
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e05e      	b.n	80058fa <UART_SetConfig+0x16e>
 800583c:	2304      	movs	r3, #4
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e05b      	b.n	80058fa <UART_SetConfig+0x16e>
 8005842:	2308      	movs	r3, #8
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e058      	b.n	80058fa <UART_SetConfig+0x16e>
 8005848:	2310      	movs	r3, #16
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e055      	b.n	80058fa <UART_SetConfig+0x16e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a88      	ldr	r2, [pc, #544]	; (8005a74 <UART_SetConfig+0x2e8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d124      	bne.n	80058a2 <UART_SetConfig+0x116>
 8005858:	4b85      	ldr	r3, [pc, #532]	; (8005a70 <UART_SetConfig+0x2e4>)
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005860:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005864:	d011      	beq.n	800588a <UART_SetConfig+0xfe>
 8005866:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800586a:	d817      	bhi.n	800589c <UART_SetConfig+0x110>
 800586c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005870:	d011      	beq.n	8005896 <UART_SetConfig+0x10a>
 8005872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005876:	d811      	bhi.n	800589c <UART_SetConfig+0x110>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <UART_SetConfig+0xf8>
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d006      	beq.n	8005890 <UART_SetConfig+0x104>
 8005882:	e00b      	b.n	800589c <UART_SetConfig+0x110>
 8005884:	2300      	movs	r3, #0
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e037      	b.n	80058fa <UART_SetConfig+0x16e>
 800588a:	2302      	movs	r3, #2
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e034      	b.n	80058fa <UART_SetConfig+0x16e>
 8005890:	2304      	movs	r3, #4
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e031      	b.n	80058fa <UART_SetConfig+0x16e>
 8005896:	2308      	movs	r3, #8
 8005898:	77fb      	strb	r3, [r7, #31]
 800589a:	e02e      	b.n	80058fa <UART_SetConfig+0x16e>
 800589c:	2310      	movs	r3, #16
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	e02b      	b.n	80058fa <UART_SetConfig+0x16e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a74      	ldr	r2, [pc, #464]	; (8005a78 <UART_SetConfig+0x2ec>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d124      	bne.n	80058f6 <UART_SetConfig+0x16a>
 80058ac:	4b70      	ldr	r3, [pc, #448]	; (8005a70 <UART_SetConfig+0x2e4>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80058b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058b8:	d011      	beq.n	80058de <UART_SetConfig+0x152>
 80058ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058be:	d817      	bhi.n	80058f0 <UART_SetConfig+0x164>
 80058c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058c4:	d011      	beq.n	80058ea <UART_SetConfig+0x15e>
 80058c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058ca:	d811      	bhi.n	80058f0 <UART_SetConfig+0x164>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <UART_SetConfig+0x14c>
 80058d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058d4:	d006      	beq.n	80058e4 <UART_SetConfig+0x158>
 80058d6:	e00b      	b.n	80058f0 <UART_SetConfig+0x164>
 80058d8:	2300      	movs	r3, #0
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e00d      	b.n	80058fa <UART_SetConfig+0x16e>
 80058de:	2302      	movs	r3, #2
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e00a      	b.n	80058fa <UART_SetConfig+0x16e>
 80058e4:	2304      	movs	r3, #4
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e007      	b.n	80058fa <UART_SetConfig+0x16e>
 80058ea:	2308      	movs	r3, #8
 80058ec:	77fb      	strb	r3, [r7, #31]
 80058ee:	e004      	b.n	80058fa <UART_SetConfig+0x16e>
 80058f0:	2310      	movs	r3, #16
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e001      	b.n	80058fa <UART_SetConfig+0x16e>
 80058f6:	2310      	movs	r3, #16
 80058f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005902:	d15b      	bne.n	80059bc <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	2b08      	cmp	r3, #8
 8005908:	d827      	bhi.n	800595a <UART_SetConfig+0x1ce>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x184>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005935 	.word	0x08005935
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005945 	.word	0x08005945
 800591c:	0800595b 	.word	0x0800595b
 8005920:	0800594b 	.word	0x0800594b
 8005924:	0800595b 	.word	0x0800595b
 8005928:	0800595b 	.word	0x0800595b
 800592c:	0800595b 	.word	0x0800595b
 8005930:	08005953 	.word	0x08005953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fe fa66 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
 8005938:	61b8      	str	r0, [r7, #24]
        break;
 800593a:	e013      	b.n	8005964 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593c:	f7fe fa84 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 8005940:	61b8      	str	r0, [r7, #24]
        break;
 8005942:	e00f      	b.n	8005964 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005944:	4b4d      	ldr	r3, [pc, #308]	; (8005a7c <UART_SetConfig+0x2f0>)
 8005946:	61bb      	str	r3, [r7, #24]
        break;
 8005948:	e00c      	b.n	8005964 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594a:	f7fe f9e5 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 800594e:	61b8      	str	r0, [r7, #24]
        break;
 8005950:	e008      	b.n	8005964 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005956:	61bb      	str	r3, [r7, #24]
        break;
 8005958:	e004      	b.n	8005964 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	77bb      	strb	r3, [r7, #30]
        break;
 8005962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d074      	beq.n	8005a54 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	005a      	lsls	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b0f      	cmp	r3, #15
 8005986:	d916      	bls.n	80059b6 <UART_SetConfig+0x22a>
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598e:	d212      	bcs.n	80059b6 <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f023 030f 	bic.w	r3, r3, #15
 8005998:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	89fb      	ldrh	r3, [r7, #14]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	89fa      	ldrh	r2, [r7, #14]
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	e04e      	b.n	8005a54 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	77bb      	strb	r3, [r7, #30]
 80059ba:	e04b      	b.n	8005a54 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059bc:	7ffb      	ldrb	r3, [r7, #31]
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d827      	bhi.n	8005a12 <UART_SetConfig+0x286>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <UART_SetConfig+0x23c>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	080059f5 	.word	0x080059f5
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	08005a13 	.word	0x08005a13
 80059d8:	08005a03 	.word	0x08005a03
 80059dc:	08005a13 	.word	0x08005a13
 80059e0:	08005a13 	.word	0x08005a13
 80059e4:	08005a13 	.word	0x08005a13
 80059e8:	08005a0b 	.word	0x08005a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ec:	f7fe fa0a 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
 80059f0:	61b8      	str	r0, [r7, #24]
        break;
 80059f2:	e013      	b.n	8005a1c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f4:	f7fe fa28 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 80059f8:	61b8      	str	r0, [r7, #24]
        break;
 80059fa:	e00f      	b.n	8005a1c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059fc:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <UART_SetConfig+0x2f0>)
 80059fe:	61bb      	str	r3, [r7, #24]
        break;
 8005a00:	e00c      	b.n	8005a1c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a02:	f7fe f989 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8005a06:	61b8      	str	r0, [r7, #24]
        break;
 8005a08:	e008      	b.n	8005a1c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0e:	61bb      	str	r3, [r7, #24]
        break;
 8005a10:	e004      	b.n	8005a1c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	77bb      	strb	r3, [r7, #30]
        break;
 8005a1a:	bf00      	nop
    }

    if (pclk != 0U)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085a      	lsrs	r2, r3, #1
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	441a      	add	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b0f      	cmp	r3, #15
 8005a3c:	d908      	bls.n	8005a50 <UART_SetConfig+0x2c4>
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d204      	bcs.n	8005a50 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e001      	b.n	8005a54 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a60:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40013800 	.word	0x40013800
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40004400 	.word	0x40004400
 8005a78:	40004800 	.word	0x40004800
 8005a7c:	007a1200 	.word	0x007a1200

08005a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b7e:	d10a      	bne.n	8005b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bd4:	f7fc fb80 	bl	80022d8 <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d10e      	bne.n	8005c06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f82d 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e023      	b.n	8005c4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d10e      	bne.n	8005c32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f817 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e00d      	b.n	8005c4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b09c      	sub	sp, #112	; 0x70
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c66:	e0a5      	b.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	f000 80a1 	beq.w	8005db4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c72:	f7fc fb31 	bl	80022d8 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d13e      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e6      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e067      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d04f      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d22:	d147      	bne.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e6      	bne.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d80:	623a      	str	r2, [r7, #32]
 8005d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	69f9      	ldr	r1, [r7, #28]
 8005d86:	6a3a      	ldr	r2, [r7, #32]
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e5      	bne.n	8005d60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e010      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	f43f af4a 	beq.w	8005c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3770      	adds	r7, #112	; 0x70
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	; (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	2000000c 	.word	0x2000000c

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4d0d      	ldr	r5, [pc, #52]	; (8005e24 <__libc_init_array+0x38>)
 8005df0:	4c0d      	ldr	r4, [pc, #52]	; (8005e28 <__libc_init_array+0x3c>)
 8005df2:	1b64      	subs	r4, r4, r5
 8005df4:	10a4      	asrs	r4, r4, #2
 8005df6:	2600      	movs	r6, #0
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	4d0b      	ldr	r5, [pc, #44]	; (8005e2c <__libc_init_array+0x40>)
 8005dfe:	4c0c      	ldr	r4, [pc, #48]	; (8005e30 <__libc_init_array+0x44>)
 8005e00:	f002 fdc4 	bl	800898c <_init>
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	2600      	movs	r6, #0
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	08008de4 	.word	0x08008de4
 8005e28:	08008de4 	.word	0x08008de4
 8005e2c:	08008de4 	.word	0x08008de4
 8005e30:	08008de8 	.word	0x08008de8

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <__cvt>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	ec55 4b10 	vmov	r4, r5, d0
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	460e      	mov	r6, r1
 8005e50:	4619      	mov	r1, r3
 8005e52:	462b      	mov	r3, r5
 8005e54:	bfbb      	ittet	lt
 8005e56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e5a:	461d      	movlt	r5, r3
 8005e5c:	2300      	movge	r3, #0
 8005e5e:	232d      	movlt	r3, #45	; 0x2d
 8005e60:	700b      	strb	r3, [r1, #0]
 8005e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e68:	4691      	mov	r9, r2
 8005e6a:	f023 0820 	bic.w	r8, r3, #32
 8005e6e:	bfbc      	itt	lt
 8005e70:	4622      	movlt	r2, r4
 8005e72:	4614      	movlt	r4, r2
 8005e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e78:	d005      	beq.n	8005e86 <__cvt+0x42>
 8005e7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e7e:	d100      	bne.n	8005e82 <__cvt+0x3e>
 8005e80:	3601      	adds	r6, #1
 8005e82:	2102      	movs	r1, #2
 8005e84:	e000      	b.n	8005e88 <__cvt+0x44>
 8005e86:	2103      	movs	r1, #3
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	ab02      	add	r3, sp, #8
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	ec45 4b10 	vmov	d0, r4, r5
 8005e94:	4653      	mov	r3, sl
 8005e96:	4632      	mov	r2, r6
 8005e98:	f000 fe1a 	bl	8006ad0 <_dtoa_r>
 8005e9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	d102      	bne.n	8005eaa <__cvt+0x66>
 8005ea4:	f019 0f01 	tst.w	r9, #1
 8005ea8:	d022      	beq.n	8005ef0 <__cvt+0xac>
 8005eaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eae:	eb07 0906 	add.w	r9, r7, r6
 8005eb2:	d110      	bne.n	8005ed6 <__cvt+0x92>
 8005eb4:	783b      	ldrb	r3, [r7, #0]
 8005eb6:	2b30      	cmp	r3, #48	; 0x30
 8005eb8:	d10a      	bne.n	8005ed0 <__cvt+0x8c>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec6:	b918      	cbnz	r0, 8005ed0 <__cvt+0x8c>
 8005ec8:	f1c6 0601 	rsb	r6, r6, #1
 8005ecc:	f8ca 6000 	str.w	r6, [sl]
 8005ed0:	f8da 3000 	ldr.w	r3, [sl]
 8005ed4:	4499      	add	r9, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee2:	b108      	cbz	r0, 8005ee8 <__cvt+0xa4>
 8005ee4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ee8:	2230      	movs	r2, #48	; 0x30
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	454b      	cmp	r3, r9
 8005eee:	d307      	bcc.n	8005f00 <__cvt+0xbc>
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ef4:	1bdb      	subs	r3, r3, r7
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	b004      	add	sp, #16
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	9103      	str	r1, [sp, #12]
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e7f0      	b.n	8005eea <__cvt+0xa6>

08005f08 <__exponent>:
 8005f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	bfb8      	it	lt
 8005f10:	4249      	neglt	r1, r1
 8005f12:	f803 2b02 	strb.w	r2, [r3], #2
 8005f16:	bfb4      	ite	lt
 8005f18:	222d      	movlt	r2, #45	; 0x2d
 8005f1a:	222b      	movge	r2, #43	; 0x2b
 8005f1c:	2909      	cmp	r1, #9
 8005f1e:	7042      	strb	r2, [r0, #1]
 8005f20:	dd2a      	ble.n	8005f78 <__exponent+0x70>
 8005f22:	f10d 0407 	add.w	r4, sp, #7
 8005f26:	46a4      	mov	ip, r4
 8005f28:	270a      	movs	r7, #10
 8005f2a:	46a6      	mov	lr, r4
 8005f2c:	460a      	mov	r2, r1
 8005f2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f32:	fb07 1516 	mls	r5, r7, r6, r1
 8005f36:	3530      	adds	r5, #48	; 0x30
 8005f38:	2a63      	cmp	r2, #99	; 0x63
 8005f3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f42:	4631      	mov	r1, r6
 8005f44:	dcf1      	bgt.n	8005f2a <__exponent+0x22>
 8005f46:	3130      	adds	r1, #48	; 0x30
 8005f48:	f1ae 0502 	sub.w	r5, lr, #2
 8005f4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f50:	1c44      	adds	r4, r0, #1
 8005f52:	4629      	mov	r1, r5
 8005f54:	4561      	cmp	r1, ip
 8005f56:	d30a      	bcc.n	8005f6e <__exponent+0x66>
 8005f58:	f10d 0209 	add.w	r2, sp, #9
 8005f5c:	eba2 020e 	sub.w	r2, r2, lr
 8005f60:	4565      	cmp	r5, ip
 8005f62:	bf88      	it	hi
 8005f64:	2200      	movhi	r2, #0
 8005f66:	4413      	add	r3, r2
 8005f68:	1a18      	subs	r0, r3, r0
 8005f6a:	b003      	add	sp, #12
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f76:	e7ed      	b.n	8005f54 <__exponent+0x4c>
 8005f78:	2330      	movs	r3, #48	; 0x30
 8005f7a:	3130      	adds	r1, #48	; 0x30
 8005f7c:	7083      	strb	r3, [r0, #2]
 8005f7e:	70c1      	strb	r1, [r0, #3]
 8005f80:	1d03      	adds	r3, r0, #4
 8005f82:	e7f1      	b.n	8005f68 <__exponent+0x60>

08005f84 <_printf_float>:
 8005f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	ed2d 8b02 	vpush	{d8}
 8005f8c:	b08d      	sub	sp, #52	; 0x34
 8005f8e:	460c      	mov	r4, r1
 8005f90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f94:	4616      	mov	r6, r2
 8005f96:	461f      	mov	r7, r3
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f001 fd3f 	bl	8007a1c <_localeconv_r>
 8005f9e:	f8d0 a000 	ldr.w	sl, [r0]
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	f7fa f914 	bl	80001d0 <strlen>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	930a      	str	r3, [sp, #40]	; 0x28
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	9305      	str	r3, [sp, #20]
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fb8:	3307      	adds	r3, #7
 8005fba:	f023 0307 	bic.w	r3, r3, #7
 8005fbe:	f103 0208 	add.w	r2, r3, #8
 8005fc2:	f8c8 2000 	str.w	r2, [r8]
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fd6:	9307      	str	r3, [sp, #28]
 8005fd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fdc:	ee08 0a10 	vmov	s16, r0
 8005fe0:	4b9f      	ldr	r3, [pc, #636]	; (8006260 <_printf_float+0x2dc>)
 8005fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	f7fa fd9f 	bl	8000b2c <__aeabi_dcmpun>
 8005fee:	bb88      	cbnz	r0, 8006054 <_printf_float+0xd0>
 8005ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ff4:	4b9a      	ldr	r3, [pc, #616]	; (8006260 <_printf_float+0x2dc>)
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	f7fa fd79 	bl	8000af0 <__aeabi_dcmple>
 8005ffe:	bb48      	cbnz	r0, 8006054 <_printf_float+0xd0>
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	4640      	mov	r0, r8
 8006006:	4649      	mov	r1, r9
 8006008:	f7fa fd68 	bl	8000adc <__aeabi_dcmplt>
 800600c:	b110      	cbz	r0, 8006014 <_printf_float+0x90>
 800600e:	232d      	movs	r3, #45	; 0x2d
 8006010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006014:	4b93      	ldr	r3, [pc, #588]	; (8006264 <_printf_float+0x2e0>)
 8006016:	4894      	ldr	r0, [pc, #592]	; (8006268 <_printf_float+0x2e4>)
 8006018:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800601c:	bf94      	ite	ls
 800601e:	4698      	movls	r8, r3
 8006020:	4680      	movhi	r8, r0
 8006022:	2303      	movs	r3, #3
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	f023 0204 	bic.w	r2, r3, #4
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	f04f 0900 	mov.w	r9, #0
 8006032:	9700      	str	r7, [sp, #0]
 8006034:	4633      	mov	r3, r6
 8006036:	aa0b      	add	r2, sp, #44	; 0x2c
 8006038:	4621      	mov	r1, r4
 800603a:	4628      	mov	r0, r5
 800603c:	f000 f9d8 	bl	80063f0 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	f040 8090 	bne.w	8006166 <_printf_float+0x1e2>
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	b00d      	add	sp, #52	; 0x34
 800604c:	ecbd 8b02 	vpop	{d8}
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa fd66 	bl	8000b2c <__aeabi_dcmpun>
 8006060:	b140      	cbz	r0, 8006074 <_printf_float+0xf0>
 8006062:	464b      	mov	r3, r9
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfbc      	itt	lt
 8006068:	232d      	movlt	r3, #45	; 0x2d
 800606a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800606e:	487f      	ldr	r0, [pc, #508]	; (800626c <_printf_float+0x2e8>)
 8006070:	4b7f      	ldr	r3, [pc, #508]	; (8006270 <_printf_float+0x2ec>)
 8006072:	e7d1      	b.n	8006018 <_printf_float+0x94>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800607a:	9206      	str	r2, [sp, #24]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	d13f      	bne.n	8006100 <_printf_float+0x17c>
 8006080:	2306      	movs	r3, #6
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	9b05      	ldr	r3, [sp, #20]
 8006086:	6861      	ldr	r1, [r4, #4]
 8006088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800608c:	2300      	movs	r3, #0
 800608e:	9303      	str	r3, [sp, #12]
 8006090:	ab0a      	add	r3, sp, #40	; 0x28
 8006092:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006096:	ab09      	add	r3, sp, #36	; 0x24
 8006098:	ec49 8b10 	vmov	d0, r8, r9
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060a4:	4628      	mov	r0, r5
 80060a6:	f7ff fecd 	bl	8005e44 <__cvt>
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ae:	2b47      	cmp	r3, #71	; 0x47
 80060b0:	4680      	mov	r8, r0
 80060b2:	d108      	bne.n	80060c6 <_printf_float+0x142>
 80060b4:	1cc8      	adds	r0, r1, #3
 80060b6:	db02      	blt.n	80060be <_printf_float+0x13a>
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	4299      	cmp	r1, r3
 80060bc:	dd41      	ble.n	8006142 <_printf_float+0x1be>
 80060be:	f1ab 0b02 	sub.w	fp, fp, #2
 80060c2:	fa5f fb8b 	uxtb.w	fp, fp
 80060c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060ca:	d820      	bhi.n	800610e <_printf_float+0x18a>
 80060cc:	3901      	subs	r1, #1
 80060ce:	465a      	mov	r2, fp
 80060d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060d4:	9109      	str	r1, [sp, #36]	; 0x24
 80060d6:	f7ff ff17 	bl	8005f08 <__exponent>
 80060da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060dc:	1813      	adds	r3, r2, r0
 80060de:	2a01      	cmp	r2, #1
 80060e0:	4681      	mov	r9, r0
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	dc02      	bgt.n	80060ec <_printf_float+0x168>
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	07d2      	lsls	r2, r2, #31
 80060ea:	d501      	bpl.n	80060f0 <_printf_float+0x16c>
 80060ec:	3301      	adds	r3, #1
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d09c      	beq.n	8006032 <_printf_float+0xae>
 80060f8:	232d      	movs	r3, #45	; 0x2d
 80060fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fe:	e798      	b.n	8006032 <_printf_float+0xae>
 8006100:	9a06      	ldr	r2, [sp, #24]
 8006102:	2a47      	cmp	r2, #71	; 0x47
 8006104:	d1be      	bne.n	8006084 <_printf_float+0x100>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1bc      	bne.n	8006084 <_printf_float+0x100>
 800610a:	2301      	movs	r3, #1
 800610c:	e7b9      	b.n	8006082 <_printf_float+0xfe>
 800610e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006112:	d118      	bne.n	8006146 <_printf_float+0x1c2>
 8006114:	2900      	cmp	r1, #0
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	dd0b      	ble.n	8006132 <_printf_float+0x1ae>
 800611a:	6121      	str	r1, [r4, #16]
 800611c:	b913      	cbnz	r3, 8006124 <_printf_float+0x1a0>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	07d0      	lsls	r0, r2, #31
 8006122:	d502      	bpl.n	800612a <_printf_float+0x1a6>
 8006124:	3301      	adds	r3, #1
 8006126:	440b      	add	r3, r1
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	65a1      	str	r1, [r4, #88]	; 0x58
 800612c:	f04f 0900 	mov.w	r9, #0
 8006130:	e7de      	b.n	80060f0 <_printf_float+0x16c>
 8006132:	b913      	cbnz	r3, 800613a <_printf_float+0x1b6>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	07d2      	lsls	r2, r2, #31
 8006138:	d501      	bpl.n	800613e <_printf_float+0x1ba>
 800613a:	3302      	adds	r3, #2
 800613c:	e7f4      	b.n	8006128 <_printf_float+0x1a4>
 800613e:	2301      	movs	r3, #1
 8006140:	e7f2      	b.n	8006128 <_printf_float+0x1a4>
 8006142:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006148:	4299      	cmp	r1, r3
 800614a:	db05      	blt.n	8006158 <_printf_float+0x1d4>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	6121      	str	r1, [r4, #16]
 8006150:	07d8      	lsls	r0, r3, #31
 8006152:	d5ea      	bpl.n	800612a <_printf_float+0x1a6>
 8006154:	1c4b      	adds	r3, r1, #1
 8006156:	e7e7      	b.n	8006128 <_printf_float+0x1a4>
 8006158:	2900      	cmp	r1, #0
 800615a:	bfd4      	ite	le
 800615c:	f1c1 0202 	rsble	r2, r1, #2
 8006160:	2201      	movgt	r2, #1
 8006162:	4413      	add	r3, r2
 8006164:	e7e0      	b.n	8006128 <_printf_float+0x1a4>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	055a      	lsls	r2, r3, #21
 800616a:	d407      	bmi.n	800617c <_printf_float+0x1f8>
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	4642      	mov	r2, r8
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	d12c      	bne.n	80061d4 <_printf_float+0x250>
 800617a:	e764      	b.n	8006046 <_printf_float+0xc2>
 800617c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006180:	f240 80e0 	bls.w	8006344 <_printf_float+0x3c0>
 8006184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006188:	2200      	movs	r2, #0
 800618a:	2300      	movs	r3, #0
 800618c:	f7fa fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006190:	2800      	cmp	r0, #0
 8006192:	d034      	beq.n	80061fe <_printf_float+0x27a>
 8006194:	4a37      	ldr	r2, [pc, #220]	; (8006274 <_printf_float+0x2f0>)
 8006196:	2301      	movs	r3, #1
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af51 	beq.w	8006046 <_printf_float+0xc2>
 80061a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a8:	429a      	cmp	r2, r3
 80061aa:	db02      	blt.n	80061b2 <_printf_float+0x22e>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07d8      	lsls	r0, r3, #31
 80061b0:	d510      	bpl.n	80061d4 <_printf_float+0x250>
 80061b2:	ee18 3a10 	vmov	r3, s16
 80061b6:	4652      	mov	r2, sl
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	f43f af41 	beq.w	8006046 <_printf_float+0xc2>
 80061c4:	f04f 0800 	mov.w	r8, #0
 80061c8:	f104 091a 	add.w	r9, r4, #26
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	3b01      	subs	r3, #1
 80061d0:	4543      	cmp	r3, r8
 80061d2:	dc09      	bgt.n	80061e8 <_printf_float+0x264>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	079b      	lsls	r3, r3, #30
 80061d8:	f100 8105 	bmi.w	80063e6 <_printf_float+0x462>
 80061dc:	68e0      	ldr	r0, [r4, #12]
 80061de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e0:	4298      	cmp	r0, r3
 80061e2:	bfb8      	it	lt
 80061e4:	4618      	movlt	r0, r3
 80061e6:	e730      	b.n	800604a <_printf_float+0xc6>
 80061e8:	2301      	movs	r3, #1
 80061ea:	464a      	mov	r2, r9
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f af27 	beq.w	8006046 <_printf_float+0xc2>
 80061f8:	f108 0801 	add.w	r8, r8, #1
 80061fc:	e7e6      	b.n	80061cc <_printf_float+0x248>
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	dc39      	bgt.n	8006278 <_printf_float+0x2f4>
 8006204:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <_printf_float+0x2f0>)
 8006206:	2301      	movs	r3, #1
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f af19 	beq.w	8006046 <_printf_float+0xc2>
 8006214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006218:	4313      	orrs	r3, r2
 800621a:	d102      	bne.n	8006222 <_printf_float+0x29e>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	d5d8      	bpl.n	80061d4 <_printf_float+0x250>
 8006222:	ee18 3a10 	vmov	r3, s16
 8006226:	4652      	mov	r2, sl
 8006228:	4631      	mov	r1, r6
 800622a:	4628      	mov	r0, r5
 800622c:	47b8      	blx	r7
 800622e:	3001      	adds	r0, #1
 8006230:	f43f af09 	beq.w	8006046 <_printf_float+0xc2>
 8006234:	f04f 0900 	mov.w	r9, #0
 8006238:	f104 0a1a 	add.w	sl, r4, #26
 800623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623e:	425b      	negs	r3, r3
 8006240:	454b      	cmp	r3, r9
 8006242:	dc01      	bgt.n	8006248 <_printf_float+0x2c4>
 8006244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006246:	e792      	b.n	800616e <_printf_float+0x1ea>
 8006248:	2301      	movs	r3, #1
 800624a:	4652      	mov	r2, sl
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	47b8      	blx	r7
 8006252:	3001      	adds	r0, #1
 8006254:	f43f aef7 	beq.w	8006046 <_printf_float+0xc2>
 8006258:	f109 0901 	add.w	r9, r9, #1
 800625c:	e7ee      	b.n	800623c <_printf_float+0x2b8>
 800625e:	bf00      	nop
 8006260:	7fefffff 	.word	0x7fefffff
 8006264:	08008a0c 	.word	0x08008a0c
 8006268:	08008a10 	.word	0x08008a10
 800626c:	08008a18 	.word	0x08008a18
 8006270:	08008a14 	.word	0x08008a14
 8006274:	08008a1c 	.word	0x08008a1c
 8006278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800627c:	429a      	cmp	r2, r3
 800627e:	bfa8      	it	ge
 8006280:	461a      	movge	r2, r3
 8006282:	2a00      	cmp	r2, #0
 8006284:	4691      	mov	r9, r2
 8006286:	dc37      	bgt.n	80062f8 <_printf_float+0x374>
 8006288:	f04f 0b00 	mov.w	fp, #0
 800628c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006290:	f104 021a 	add.w	r2, r4, #26
 8006294:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	eba3 0309 	sub.w	r3, r3, r9
 800629c:	455b      	cmp	r3, fp
 800629e:	dc33      	bgt.n	8006308 <_printf_float+0x384>
 80062a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a4:	429a      	cmp	r2, r3
 80062a6:	db3b      	blt.n	8006320 <_printf_float+0x39c>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	d438      	bmi.n	8006320 <_printf_float+0x39c>
 80062ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b0:	9a05      	ldr	r2, [sp, #20]
 80062b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062b4:	1a9a      	subs	r2, r3, r2
 80062b6:	eba3 0901 	sub.w	r9, r3, r1
 80062ba:	4591      	cmp	r9, r2
 80062bc:	bfa8      	it	ge
 80062be:	4691      	movge	r9, r2
 80062c0:	f1b9 0f00 	cmp.w	r9, #0
 80062c4:	dc35      	bgt.n	8006332 <_printf_float+0x3ae>
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ce:	f104 0a1a 	add.w	sl, r4, #26
 80062d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	eba3 0309 	sub.w	r3, r3, r9
 80062dc:	4543      	cmp	r3, r8
 80062de:	f77f af79 	ble.w	80061d4 <_printf_float+0x250>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4652      	mov	r2, sl
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b8      	blx	r7
 80062ec:	3001      	adds	r0, #1
 80062ee:	f43f aeaa 	beq.w	8006046 <_printf_float+0xc2>
 80062f2:	f108 0801 	add.w	r8, r8, #1
 80062f6:	e7ec      	b.n	80062d2 <_printf_float+0x34e>
 80062f8:	4613      	mov	r3, r2
 80062fa:	4631      	mov	r1, r6
 80062fc:	4642      	mov	r2, r8
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	d1c0      	bne.n	8006288 <_printf_float+0x304>
 8006306:	e69e      	b.n	8006046 <_printf_float+0xc2>
 8006308:	2301      	movs	r3, #1
 800630a:	4631      	mov	r1, r6
 800630c:	4628      	mov	r0, r5
 800630e:	9205      	str	r2, [sp, #20]
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	f43f ae97 	beq.w	8006046 <_printf_float+0xc2>
 8006318:	9a05      	ldr	r2, [sp, #20]
 800631a:	f10b 0b01 	add.w	fp, fp, #1
 800631e:	e7b9      	b.n	8006294 <_printf_float+0x310>
 8006320:	ee18 3a10 	vmov	r3, s16
 8006324:	4652      	mov	r2, sl
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d1be      	bne.n	80062ae <_printf_float+0x32a>
 8006330:	e689      	b.n	8006046 <_printf_float+0xc2>
 8006332:	9a05      	ldr	r2, [sp, #20]
 8006334:	464b      	mov	r3, r9
 8006336:	4442      	add	r2, r8
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d1c1      	bne.n	80062c6 <_printf_float+0x342>
 8006342:	e680      	b.n	8006046 <_printf_float+0xc2>
 8006344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006346:	2a01      	cmp	r2, #1
 8006348:	dc01      	bgt.n	800634e <_printf_float+0x3ca>
 800634a:	07db      	lsls	r3, r3, #31
 800634c:	d538      	bpl.n	80063c0 <_printf_float+0x43c>
 800634e:	2301      	movs	r3, #1
 8006350:	4642      	mov	r2, r8
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f ae74 	beq.w	8006046 <_printf_float+0xc2>
 800635e:	ee18 3a10 	vmov	r3, s16
 8006362:	4652      	mov	r2, sl
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f ae6b 	beq.w	8006046 <_printf_float+0xc2>
 8006370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	f7fa fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800637c:	b9d8      	cbnz	r0, 80063b6 <_printf_float+0x432>
 800637e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006380:	f108 0201 	add.w	r2, r8, #1
 8006384:	3b01      	subs	r3, #1
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	d10e      	bne.n	80063ae <_printf_float+0x42a>
 8006390:	e659      	b.n	8006046 <_printf_float+0xc2>
 8006392:	2301      	movs	r3, #1
 8006394:	4652      	mov	r2, sl
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae52 	beq.w	8006046 <_printf_float+0xc2>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	4543      	cmp	r3, r8
 80063ac:	dcf1      	bgt.n	8006392 <_printf_float+0x40e>
 80063ae:	464b      	mov	r3, r9
 80063b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063b4:	e6dc      	b.n	8006170 <_printf_float+0x1ec>
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	f104 0a1a 	add.w	sl, r4, #26
 80063be:	e7f2      	b.n	80063a6 <_printf_float+0x422>
 80063c0:	2301      	movs	r3, #1
 80063c2:	4642      	mov	r2, r8
 80063c4:	e7df      	b.n	8006386 <_printf_float+0x402>
 80063c6:	2301      	movs	r3, #1
 80063c8:	464a      	mov	r2, r9
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f ae38 	beq.w	8006046 <_printf_float+0xc2>
 80063d6:	f108 0801 	add.w	r8, r8, #1
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063de:	1a5b      	subs	r3, r3, r1
 80063e0:	4543      	cmp	r3, r8
 80063e2:	dcf0      	bgt.n	80063c6 <_printf_float+0x442>
 80063e4:	e6fa      	b.n	80061dc <_printf_float+0x258>
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	f104 0919 	add.w	r9, r4, #25
 80063ee:	e7f4      	b.n	80063da <_printf_float+0x456>

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006400:	4293      	cmp	r3, r2
 8006402:	bfb8      	it	lt
 8006404:	4613      	movlt	r3, r2
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800640c:	4607      	mov	r7, r0
 800640e:	460c      	mov	r4, r1
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc26      	bgt.n	8006486 <_printf_common+0x96>
 8006438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800643c:	1e13      	subs	r3, r2, #0
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d42b      	bmi.n	80064a0 <_printf_common+0xb0>
 8006448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d01e      	beq.n	8006494 <_printf_common+0xa4>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	68e5      	ldr	r5, [r4, #12]
 800645a:	6832      	ldr	r2, [r6, #0]
 800645c:	f003 0306 	and.w	r3, r3, #6
 8006460:	2b04      	cmp	r3, #4
 8006462:	bf08      	it	eq
 8006464:	1aad      	subeq	r5, r5, r2
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	bf0c      	ite	eq
 800646c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006470:	2500      	movne	r5, #0
 8006472:	4293      	cmp	r3, r2
 8006474:	bfc4      	itt	gt
 8006476:	1a9b      	subgt	r3, r3, r2
 8006478:	18ed      	addgt	r5, r5, r3
 800647a:	2600      	movs	r6, #0
 800647c:	341a      	adds	r4, #26
 800647e:	42b5      	cmp	r5, r6
 8006480:	d11a      	bne.n	80064b8 <_printf_common+0xc8>
 8006482:	2000      	movs	r0, #0
 8006484:	e008      	b.n	8006498 <_printf_common+0xa8>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4649      	mov	r1, r9
 800648c:	4638      	mov	r0, r7
 800648e:	47c0      	blx	r8
 8006490:	3001      	adds	r0, #1
 8006492:	d103      	bne.n	800649c <_printf_common+0xac>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	3501      	adds	r5, #1
 800649e:	e7c6      	b.n	800642e <_printf_common+0x3e>
 80064a0:	18e1      	adds	r1, r4, r3
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	2030      	movs	r0, #48	; 0x30
 80064a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064aa:	4422      	add	r2, r4
 80064ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b4:	3302      	adds	r3, #2
 80064b6:	e7c7      	b.n	8006448 <_printf_common+0x58>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4622      	mov	r2, r4
 80064bc:	4649      	mov	r1, r9
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0e6      	beq.n	8006494 <_printf_common+0xa4>
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7d9      	b.n	800647e <_printf_common+0x8e>
	...

080064cc <_printf_i>:
 80064cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	7e0f      	ldrb	r7, [r1, #24]
 80064d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d4:	2f78      	cmp	r7, #120	; 0x78
 80064d6:	4691      	mov	r9, r2
 80064d8:	4680      	mov	r8, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	469a      	mov	sl, r3
 80064de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e2:	d807      	bhi.n	80064f4 <_printf_i+0x28>
 80064e4:	2f62      	cmp	r7, #98	; 0x62
 80064e6:	d80a      	bhi.n	80064fe <_printf_i+0x32>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	f000 80d8 	beq.w	800669e <_printf_i+0x1d2>
 80064ee:	2f58      	cmp	r7, #88	; 0x58
 80064f0:	f000 80a3 	beq.w	800663a <_printf_i+0x16e>
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064fc:	e03a      	b.n	8006574 <_printf_i+0xa8>
 80064fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006502:	2b15      	cmp	r3, #21
 8006504:	d8f6      	bhi.n	80064f4 <_printf_i+0x28>
 8006506:	a101      	add	r1, pc, #4	; (adr r1, 800650c <_printf_i+0x40>)
 8006508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800650c:	08006565 	.word	0x08006565
 8006510:	08006579 	.word	0x08006579
 8006514:	080064f5 	.word	0x080064f5
 8006518:	080064f5 	.word	0x080064f5
 800651c:	080064f5 	.word	0x080064f5
 8006520:	080064f5 	.word	0x080064f5
 8006524:	08006579 	.word	0x08006579
 8006528:	080064f5 	.word	0x080064f5
 800652c:	080064f5 	.word	0x080064f5
 8006530:	080064f5 	.word	0x080064f5
 8006534:	080064f5 	.word	0x080064f5
 8006538:	08006685 	.word	0x08006685
 800653c:	080065a9 	.word	0x080065a9
 8006540:	08006667 	.word	0x08006667
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	080066a7 	.word	0x080066a7
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080064f5 	.word	0x080064f5
 800655c:	080064f5 	.word	0x080064f5
 8006560:	0800666f 	.word	0x0800666f
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006574:	2301      	movs	r3, #1
 8006576:	e0a3      	b.n	80066c0 <_printf_i+0x1f4>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	6829      	ldr	r1, [r5, #0]
 800657c:	0606      	lsls	r6, r0, #24
 800657e:	f101 0304 	add.w	r3, r1, #4
 8006582:	d50a      	bpl.n	800659a <_printf_i+0xce>
 8006584:	680e      	ldr	r6, [r1, #0]
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	2e00      	cmp	r6, #0
 800658a:	da03      	bge.n	8006594 <_printf_i+0xc8>
 800658c:	232d      	movs	r3, #45	; 0x2d
 800658e:	4276      	negs	r6, r6
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006594:	485e      	ldr	r0, [pc, #376]	; (8006710 <_printf_i+0x244>)
 8006596:	230a      	movs	r3, #10
 8006598:	e019      	b.n	80065ce <_printf_i+0x102>
 800659a:	680e      	ldr	r6, [r1, #0]
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065a2:	bf18      	it	ne
 80065a4:	b236      	sxthne	r6, r6
 80065a6:	e7ef      	b.n	8006588 <_printf_i+0xbc>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	0601      	lsls	r1, r0, #24
 80065b2:	d501      	bpl.n	80065b8 <_printf_i+0xec>
 80065b4:	681e      	ldr	r6, [r3, #0]
 80065b6:	e002      	b.n	80065be <_printf_i+0xf2>
 80065b8:	0646      	lsls	r6, r0, #25
 80065ba:	d5fb      	bpl.n	80065b4 <_printf_i+0xe8>
 80065bc:	881e      	ldrh	r6, [r3, #0]
 80065be:	4854      	ldr	r0, [pc, #336]	; (8006710 <_printf_i+0x244>)
 80065c0:	2f6f      	cmp	r7, #111	; 0x6f
 80065c2:	bf0c      	ite	eq
 80065c4:	2308      	moveq	r3, #8
 80065c6:	230a      	movne	r3, #10
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ce:	6865      	ldr	r5, [r4, #4]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	bfa2      	ittt	ge
 80065d6:	6821      	ldrge	r1, [r4, #0]
 80065d8:	f021 0104 	bicge.w	r1, r1, #4
 80065dc:	6021      	strge	r1, [r4, #0]
 80065de:	b90e      	cbnz	r6, 80065e4 <_printf_i+0x118>
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	d04d      	beq.n	8006680 <_printf_i+0x1b4>
 80065e4:	4615      	mov	r5, r2
 80065e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ea:	fb03 6711 	mls	r7, r3, r1, r6
 80065ee:	5dc7      	ldrb	r7, [r0, r7]
 80065f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f4:	4637      	mov	r7, r6
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	460e      	mov	r6, r1
 80065fa:	d9f4      	bls.n	80065e6 <_printf_i+0x11a>
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d10b      	bne.n	8006618 <_printf_i+0x14c>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07de      	lsls	r6, r3, #31
 8006604:	d508      	bpl.n	8006618 <_printf_i+0x14c>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	bfde      	ittt	le
 800660e:	2330      	movle	r3, #48	; 0x30
 8006610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006614:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006618:	1b52      	subs	r2, r2, r5
 800661a:	6122      	str	r2, [r4, #16]
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	464b      	mov	r3, r9
 8006622:	aa03      	add	r2, sp, #12
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fee2 	bl	80063f0 <_printf_common>
 800662c:	3001      	adds	r0, #1
 800662e:	d14c      	bne.n	80066ca <_printf_i+0x1fe>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	4835      	ldr	r0, [pc, #212]	; (8006710 <_printf_i+0x244>)
 800663c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	f851 6b04 	ldr.w	r6, [r1], #4
 8006648:	6029      	str	r1, [r5, #0]
 800664a:	061d      	lsls	r5, r3, #24
 800664c:	d514      	bpl.n	8006678 <_printf_i+0x1ac>
 800664e:	07df      	lsls	r7, r3, #31
 8006650:	bf44      	itt	mi
 8006652:	f043 0320 	orrmi.w	r3, r3, #32
 8006656:	6023      	strmi	r3, [r4, #0]
 8006658:	b91e      	cbnz	r6, 8006662 <_printf_i+0x196>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f023 0320 	bic.w	r3, r3, #32
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	2310      	movs	r3, #16
 8006664:	e7b0      	b.n	80065c8 <_printf_i+0xfc>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	f043 0320 	orr.w	r3, r3, #32
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	2378      	movs	r3, #120	; 0x78
 8006670:	4828      	ldr	r0, [pc, #160]	; (8006714 <_printf_i+0x248>)
 8006672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006676:	e7e3      	b.n	8006640 <_printf_i+0x174>
 8006678:	0659      	lsls	r1, r3, #25
 800667a:	bf48      	it	mi
 800667c:	b2b6      	uxthmi	r6, r6
 800667e:	e7e6      	b.n	800664e <_printf_i+0x182>
 8006680:	4615      	mov	r5, r2
 8006682:	e7bb      	b.n	80065fc <_printf_i+0x130>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	6826      	ldr	r6, [r4, #0]
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	1d18      	adds	r0, r3, #4
 800668c:	6028      	str	r0, [r5, #0]
 800668e:	0635      	lsls	r5, r6, #24
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	d501      	bpl.n	8006698 <_printf_i+0x1cc>
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	e002      	b.n	800669e <_printf_i+0x1d2>
 8006698:	0670      	lsls	r0, r6, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0x1c8>
 800669c:	8019      	strh	r1, [r3, #0]
 800669e:	2300      	movs	r3, #0
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	4615      	mov	r5, r2
 80066a4:	e7ba      	b.n	800661c <_printf_i+0x150>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	681d      	ldr	r5, [r3, #0]
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	2100      	movs	r1, #0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7f9 fd94 	bl	80001e0 <memchr>
 80066b8:	b108      	cbz	r0, 80066be <_printf_i+0x1f2>
 80066ba:	1b40      	subs	r0, r0, r5
 80066bc:	6060      	str	r0, [r4, #4]
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	2300      	movs	r3, #0
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	e7a8      	b.n	800661c <_printf_i+0x150>
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	462a      	mov	r2, r5
 80066ce:	4649      	mov	r1, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	47d0      	blx	sl
 80066d4:	3001      	adds	r0, #1
 80066d6:	d0ab      	beq.n	8006630 <_printf_i+0x164>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	079b      	lsls	r3, r3, #30
 80066dc:	d413      	bmi.n	8006706 <_printf_i+0x23a>
 80066de:	68e0      	ldr	r0, [r4, #12]
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	4298      	cmp	r0, r3
 80066e4:	bfb8      	it	lt
 80066e6:	4618      	movlt	r0, r3
 80066e8:	e7a4      	b.n	8006634 <_printf_i+0x168>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4632      	mov	r2, r6
 80066ee:	4649      	mov	r1, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	47d0      	blx	sl
 80066f4:	3001      	adds	r0, #1
 80066f6:	d09b      	beq.n	8006630 <_printf_i+0x164>
 80066f8:	3501      	adds	r5, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	9903      	ldr	r1, [sp, #12]
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	42ab      	cmp	r3, r5
 8006702:	dcf2      	bgt.n	80066ea <_printf_i+0x21e>
 8006704:	e7eb      	b.n	80066de <_printf_i+0x212>
 8006706:	2500      	movs	r5, #0
 8006708:	f104 0619 	add.w	r6, r4, #25
 800670c:	e7f5      	b.n	80066fa <_printf_i+0x22e>
 800670e:	bf00      	nop
 8006710:	08008a1e 	.word	0x08008a1e
 8006714:	08008a2f 	.word	0x08008a2f

08006718 <iprintf>:
 8006718:	b40f      	push	{r0, r1, r2, r3}
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <iprintf+0x2c>)
 800671c:	b513      	push	{r0, r1, r4, lr}
 800671e:	681c      	ldr	r4, [r3, #0]
 8006720:	b124      	cbz	r4, 800672c <iprintf+0x14>
 8006722:	69a3      	ldr	r3, [r4, #24]
 8006724:	b913      	cbnz	r3, 800672c <iprintf+0x14>
 8006726:	4620      	mov	r0, r4
 8006728:	f001 f8da 	bl	80078e0 <__sinit>
 800672c:	ab05      	add	r3, sp, #20
 800672e:	9a04      	ldr	r2, [sp, #16]
 8006730:	68a1      	ldr	r1, [r4, #8]
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	4620      	mov	r0, r4
 8006736:	f001 fe97 	bl	8008468 <_vfiprintf_r>
 800673a:	b002      	add	sp, #8
 800673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006740:	b004      	add	sp, #16
 8006742:	4770      	bx	lr
 8006744:	2000000c 	.word	0x2000000c

08006748 <_puts_r>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	4605      	mov	r5, r0
 800674e:	b118      	cbz	r0, 8006758 <_puts_r+0x10>
 8006750:	6983      	ldr	r3, [r0, #24]
 8006752:	b90b      	cbnz	r3, 8006758 <_puts_r+0x10>
 8006754:	f001 f8c4 	bl	80078e0 <__sinit>
 8006758:	69ab      	ldr	r3, [r5, #24]
 800675a:	68ac      	ldr	r4, [r5, #8]
 800675c:	b913      	cbnz	r3, 8006764 <_puts_r+0x1c>
 800675e:	4628      	mov	r0, r5
 8006760:	f001 f8be 	bl	80078e0 <__sinit>
 8006764:	4b2c      	ldr	r3, [pc, #176]	; (8006818 <_puts_r+0xd0>)
 8006766:	429c      	cmp	r4, r3
 8006768:	d120      	bne.n	80067ac <_puts_r+0x64>
 800676a:	686c      	ldr	r4, [r5, #4]
 800676c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676e:	07db      	lsls	r3, r3, #31
 8006770:	d405      	bmi.n	800677e <_puts_r+0x36>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	0598      	lsls	r0, r3, #22
 8006776:	d402      	bmi.n	800677e <_puts_r+0x36>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f001 f954 	bl	8007a26 <__retarget_lock_acquire_recursive>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	0719      	lsls	r1, r3, #28
 8006782:	d51d      	bpl.n	80067c0 <_puts_r+0x78>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	b1db      	cbz	r3, 80067c0 <_puts_r+0x78>
 8006788:	3e01      	subs	r6, #1
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006790:	3b01      	subs	r3, #1
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	bb39      	cbnz	r1, 80067e6 <_puts_r+0x9e>
 8006796:	2b00      	cmp	r3, #0
 8006798:	da38      	bge.n	800680c <_puts_r+0xc4>
 800679a:	4622      	mov	r2, r4
 800679c:	210a      	movs	r1, #10
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f848 	bl	8006834 <__swbuf_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d011      	beq.n	80067cc <_puts_r+0x84>
 80067a8:	250a      	movs	r5, #10
 80067aa:	e011      	b.n	80067d0 <_puts_r+0x88>
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <_puts_r+0xd4>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d101      	bne.n	80067b6 <_puts_r+0x6e>
 80067b2:	68ac      	ldr	r4, [r5, #8]
 80067b4:	e7da      	b.n	800676c <_puts_r+0x24>
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <_puts_r+0xd8>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	bf08      	it	eq
 80067bc:	68ec      	ldreq	r4, [r5, #12]
 80067be:	e7d5      	b.n	800676c <_puts_r+0x24>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f888 	bl	80068d8 <__swsetup_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d0dd      	beq.n	8006788 <_puts_r+0x40>
 80067cc:	f04f 35ff 	mov.w	r5, #4294967295
 80067d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d2:	07da      	lsls	r2, r3, #31
 80067d4:	d405      	bmi.n	80067e2 <_puts_r+0x9a>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	059b      	lsls	r3, r3, #22
 80067da:	d402      	bmi.n	80067e2 <_puts_r+0x9a>
 80067dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067de:	f001 f923 	bl	8007a28 <__retarget_lock_release_recursive>
 80067e2:	4628      	mov	r0, r5
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da04      	bge.n	80067f4 <_puts_r+0xac>
 80067ea:	69a2      	ldr	r2, [r4, #24]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	dc06      	bgt.n	80067fe <_puts_r+0xb6>
 80067f0:	290a      	cmp	r1, #10
 80067f2:	d004      	beq.n	80067fe <_puts_r+0xb6>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	6022      	str	r2, [r4, #0]
 80067fa:	7019      	strb	r1, [r3, #0]
 80067fc:	e7c5      	b.n	800678a <_puts_r+0x42>
 80067fe:	4622      	mov	r2, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f817 	bl	8006834 <__swbuf_r>
 8006806:	3001      	adds	r0, #1
 8006808:	d1bf      	bne.n	800678a <_puts_r+0x42>
 800680a:	e7df      	b.n	80067cc <_puts_r+0x84>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	250a      	movs	r5, #10
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	6022      	str	r2, [r4, #0]
 8006814:	701d      	strb	r5, [r3, #0]
 8006816:	e7db      	b.n	80067d0 <_puts_r+0x88>
 8006818:	08008af0 	.word	0x08008af0
 800681c:	08008b10 	.word	0x08008b10
 8006820:	08008ad0 	.word	0x08008ad0

08006824 <puts>:
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <puts+0xc>)
 8006826:	4601      	mov	r1, r0
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	f7ff bf8d 	b.w	8006748 <_puts_r>
 800682e:	bf00      	nop
 8006830:	2000000c 	.word	0x2000000c

08006834 <__swbuf_r>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	460e      	mov	r6, r1
 8006838:	4614      	mov	r4, r2
 800683a:	4605      	mov	r5, r0
 800683c:	b118      	cbz	r0, 8006846 <__swbuf_r+0x12>
 800683e:	6983      	ldr	r3, [r0, #24]
 8006840:	b90b      	cbnz	r3, 8006846 <__swbuf_r+0x12>
 8006842:	f001 f84d 	bl	80078e0 <__sinit>
 8006846:	4b21      	ldr	r3, [pc, #132]	; (80068cc <__swbuf_r+0x98>)
 8006848:	429c      	cmp	r4, r3
 800684a:	d12b      	bne.n	80068a4 <__swbuf_r+0x70>
 800684c:	686c      	ldr	r4, [r5, #4]
 800684e:	69a3      	ldr	r3, [r4, #24]
 8006850:	60a3      	str	r3, [r4, #8]
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	071a      	lsls	r2, r3, #28
 8006856:	d52f      	bpl.n	80068b8 <__swbuf_r+0x84>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	b36b      	cbz	r3, 80068b8 <__swbuf_r+0x84>
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1ac0      	subs	r0, r0, r3
 8006862:	6963      	ldr	r3, [r4, #20]
 8006864:	b2f6      	uxtb	r6, r6
 8006866:	4283      	cmp	r3, r0
 8006868:	4637      	mov	r7, r6
 800686a:	dc04      	bgt.n	8006876 <__swbuf_r+0x42>
 800686c:	4621      	mov	r1, r4
 800686e:	4628      	mov	r0, r5
 8006870:	f000 ffa2 	bl	80077b8 <_fflush_r>
 8006874:	bb30      	cbnz	r0, 80068c4 <__swbuf_r+0x90>
 8006876:	68a3      	ldr	r3, [r4, #8]
 8006878:	3b01      	subs	r3, #1
 800687a:	60a3      	str	r3, [r4, #8]
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	6022      	str	r2, [r4, #0]
 8006882:	701e      	strb	r6, [r3, #0]
 8006884:	6963      	ldr	r3, [r4, #20]
 8006886:	3001      	adds	r0, #1
 8006888:	4283      	cmp	r3, r0
 800688a:	d004      	beq.n	8006896 <__swbuf_r+0x62>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	07db      	lsls	r3, r3, #31
 8006890:	d506      	bpl.n	80068a0 <__swbuf_r+0x6c>
 8006892:	2e0a      	cmp	r6, #10
 8006894:	d104      	bne.n	80068a0 <__swbuf_r+0x6c>
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f000 ff8d 	bl	80077b8 <_fflush_r>
 800689e:	b988      	cbnz	r0, 80068c4 <__swbuf_r+0x90>
 80068a0:	4638      	mov	r0, r7
 80068a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a4:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <__swbuf_r+0x9c>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	d101      	bne.n	80068ae <__swbuf_r+0x7a>
 80068aa:	68ac      	ldr	r4, [r5, #8]
 80068ac:	e7cf      	b.n	800684e <__swbuf_r+0x1a>
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <__swbuf_r+0xa0>)
 80068b0:	429c      	cmp	r4, r3
 80068b2:	bf08      	it	eq
 80068b4:	68ec      	ldreq	r4, [r5, #12]
 80068b6:	e7ca      	b.n	800684e <__swbuf_r+0x1a>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 f80c 	bl	80068d8 <__swsetup_r>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d0cb      	beq.n	800685c <__swbuf_r+0x28>
 80068c4:	f04f 37ff 	mov.w	r7, #4294967295
 80068c8:	e7ea      	b.n	80068a0 <__swbuf_r+0x6c>
 80068ca:	bf00      	nop
 80068cc:	08008af0 	.word	0x08008af0
 80068d0:	08008b10 	.word	0x08008b10
 80068d4:	08008ad0 	.word	0x08008ad0

080068d8 <__swsetup_r>:
 80068d8:	4b32      	ldr	r3, [pc, #200]	; (80069a4 <__swsetup_r+0xcc>)
 80068da:	b570      	push	{r4, r5, r6, lr}
 80068dc:	681d      	ldr	r5, [r3, #0]
 80068de:	4606      	mov	r6, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	b125      	cbz	r5, 80068ee <__swsetup_r+0x16>
 80068e4:	69ab      	ldr	r3, [r5, #24]
 80068e6:	b913      	cbnz	r3, 80068ee <__swsetup_r+0x16>
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 fff9 	bl	80078e0 <__sinit>
 80068ee:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <__swsetup_r+0xd0>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d10f      	bne.n	8006914 <__swsetup_r+0x3c>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068fc:	0719      	lsls	r1, r3, #28
 80068fe:	d42c      	bmi.n	800695a <__swsetup_r+0x82>
 8006900:	06dd      	lsls	r5, r3, #27
 8006902:	d411      	bmi.n	8006928 <__swsetup_r+0x50>
 8006904:	2309      	movs	r3, #9
 8006906:	6033      	str	r3, [r6, #0]
 8006908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	e03e      	b.n	8006992 <__swsetup_r+0xba>
 8006914:	4b25      	ldr	r3, [pc, #148]	; (80069ac <__swsetup_r+0xd4>)
 8006916:	429c      	cmp	r4, r3
 8006918:	d101      	bne.n	800691e <__swsetup_r+0x46>
 800691a:	68ac      	ldr	r4, [r5, #8]
 800691c:	e7eb      	b.n	80068f6 <__swsetup_r+0x1e>
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <__swsetup_r+0xd8>)
 8006920:	429c      	cmp	r4, r3
 8006922:	bf08      	it	eq
 8006924:	68ec      	ldreq	r4, [r5, #12]
 8006926:	e7e6      	b.n	80068f6 <__swsetup_r+0x1e>
 8006928:	0758      	lsls	r0, r3, #29
 800692a:	d512      	bpl.n	8006952 <__swsetup_r+0x7a>
 800692c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800692e:	b141      	cbz	r1, 8006942 <__swsetup_r+0x6a>
 8006930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006934:	4299      	cmp	r1, r3
 8006936:	d002      	beq.n	800693e <__swsetup_r+0x66>
 8006938:	4630      	mov	r0, r6
 800693a:	f001 fc8b 	bl	8008254 <_free_r>
 800693e:	2300      	movs	r3, #0
 8006940:	6363      	str	r3, [r4, #52]	; 0x34
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	2300      	movs	r3, #0
 800694c:	6063      	str	r3, [r4, #4]
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f043 0308 	orr.w	r3, r3, #8
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	b94b      	cbnz	r3, 8006972 <__swsetup_r+0x9a>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006968:	d003      	beq.n	8006972 <__swsetup_r+0x9a>
 800696a:	4621      	mov	r1, r4
 800696c:	4630      	mov	r0, r6
 800696e:	f001 f881 	bl	8007a74 <__smakebuf_r>
 8006972:	89a0      	ldrh	r0, [r4, #12]
 8006974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006978:	f010 0301 	ands.w	r3, r0, #1
 800697c:	d00a      	beq.n	8006994 <__swsetup_r+0xbc>
 800697e:	2300      	movs	r3, #0
 8006980:	60a3      	str	r3, [r4, #8]
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	425b      	negs	r3, r3
 8006986:	61a3      	str	r3, [r4, #24]
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	b943      	cbnz	r3, 800699e <__swsetup_r+0xc6>
 800698c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006990:	d1ba      	bne.n	8006908 <__swsetup_r+0x30>
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	0781      	lsls	r1, r0, #30
 8006996:	bf58      	it	pl
 8006998:	6963      	ldrpl	r3, [r4, #20]
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	e7f4      	b.n	8006988 <__swsetup_r+0xb0>
 800699e:	2000      	movs	r0, #0
 80069a0:	e7f7      	b.n	8006992 <__swsetup_r+0xba>
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	08008af0 	.word	0x08008af0
 80069ac:	08008b10 	.word	0x08008b10
 80069b0:	08008ad0 	.word	0x08008ad0

080069b4 <quorem>:
 80069b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	6903      	ldr	r3, [r0, #16]
 80069ba:	690c      	ldr	r4, [r1, #16]
 80069bc:	42a3      	cmp	r3, r4
 80069be:	4607      	mov	r7, r0
 80069c0:	f2c0 8081 	blt.w	8006ac6 <quorem+0x112>
 80069c4:	3c01      	subs	r4, #1
 80069c6:	f101 0814 	add.w	r8, r1, #20
 80069ca:	f100 0514 	add.w	r5, r0, #20
 80069ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069dc:	3301      	adds	r3, #1
 80069de:	429a      	cmp	r2, r3
 80069e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80069ec:	d331      	bcc.n	8006a52 <quorem+0x9e>
 80069ee:	f04f 0e00 	mov.w	lr, #0
 80069f2:	4640      	mov	r0, r8
 80069f4:	46ac      	mov	ip, r5
 80069f6:	46f2      	mov	sl, lr
 80069f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80069fc:	b293      	uxth	r3, r2
 80069fe:	fb06 e303 	mla	r3, r6, r3, lr
 8006a02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ebaa 0303 	sub.w	r3, sl, r3
 8006a0c:	f8dc a000 	ldr.w	sl, [ip]
 8006a10:	0c12      	lsrs	r2, r2, #16
 8006a12:	fa13 f38a 	uxtah	r3, r3, sl
 8006a16:	fb06 e202 	mla	r2, r6, r2, lr
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	9b00      	ldr	r3, [sp, #0]
 8006a1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a22:	b292      	uxth	r2, r2
 8006a24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a30:	4581      	cmp	r9, r0
 8006a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a36:	f84c 3b04 	str.w	r3, [ip], #4
 8006a3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a3e:	d2db      	bcs.n	80069f8 <quorem+0x44>
 8006a40:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a44:	b92b      	cbnz	r3, 8006a52 <quorem+0x9e>
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	429d      	cmp	r5, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	d32e      	bcc.n	8006aae <quorem+0xfa>
 8006a50:	613c      	str	r4, [r7, #16]
 8006a52:	4638      	mov	r0, r7
 8006a54:	f001 fae6 	bl	8008024 <__mcmp>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	db24      	blt.n	8006aa6 <quorem+0xf2>
 8006a5c:	3601      	adds	r6, #1
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f04f 0c00 	mov.w	ip, #0
 8006a64:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a68:	f8d0 e000 	ldr.w	lr, [r0]
 8006a6c:	b293      	uxth	r3, r2
 8006a6e:	ebac 0303 	sub.w	r3, ip, r3
 8006a72:	0c12      	lsrs	r2, r2, #16
 8006a74:	fa13 f38e 	uxtah	r3, r3, lr
 8006a78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a86:	45c1      	cmp	r9, r8
 8006a88:	f840 3b04 	str.w	r3, [r0], #4
 8006a8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a90:	d2e8      	bcs.n	8006a64 <quorem+0xb0>
 8006a92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a9a:	b922      	cbnz	r2, 8006aa6 <quorem+0xf2>
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	429d      	cmp	r5, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	d30a      	bcc.n	8006aba <quorem+0x106>
 8006aa4:	613c      	str	r4, [r7, #16]
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	b003      	add	sp, #12
 8006aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aae:	6812      	ldr	r2, [r2, #0]
 8006ab0:	3b04      	subs	r3, #4
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	d1cc      	bne.n	8006a50 <quorem+0x9c>
 8006ab6:	3c01      	subs	r4, #1
 8006ab8:	e7c7      	b.n	8006a4a <quorem+0x96>
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	3b04      	subs	r3, #4
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	d1f0      	bne.n	8006aa4 <quorem+0xf0>
 8006ac2:	3c01      	subs	r4, #1
 8006ac4:	e7eb      	b.n	8006a9e <quorem+0xea>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e7ee      	b.n	8006aa8 <quorem+0xf4>
 8006aca:	0000      	movs	r0, r0
 8006acc:	0000      	movs	r0, r0
	...

08006ad0 <_dtoa_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	ed2d 8b04 	vpush	{d8-d9}
 8006ad8:	ec57 6b10 	vmov	r6, r7, d0
 8006adc:	b093      	sub	sp, #76	; 0x4c
 8006ade:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ae0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ae4:	9106      	str	r1, [sp, #24]
 8006ae6:	ee10 aa10 	vmov	sl, s0
 8006aea:	4604      	mov	r4, r0
 8006aec:	9209      	str	r2, [sp, #36]	; 0x24
 8006aee:	930c      	str	r3, [sp, #48]	; 0x30
 8006af0:	46bb      	mov	fp, r7
 8006af2:	b975      	cbnz	r5, 8006b12 <_dtoa_r+0x42>
 8006af4:	2010      	movs	r0, #16
 8006af6:	f000 fffd 	bl	8007af4 <malloc>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6260      	str	r0, [r4, #36]	; 0x24
 8006afe:	b920      	cbnz	r0, 8006b0a <_dtoa_r+0x3a>
 8006b00:	4ba7      	ldr	r3, [pc, #668]	; (8006da0 <_dtoa_r+0x2d0>)
 8006b02:	21ea      	movs	r1, #234	; 0xea
 8006b04:	48a7      	ldr	r0, [pc, #668]	; (8006da4 <_dtoa_r+0x2d4>)
 8006b06:	f001 fe45 	bl	8008794 <__assert_func>
 8006b0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b0e:	6005      	str	r5, [r0, #0]
 8006b10:	60c5      	str	r5, [r0, #12]
 8006b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b14:	6819      	ldr	r1, [r3, #0]
 8006b16:	b151      	cbz	r1, 8006b2e <_dtoa_r+0x5e>
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	604a      	str	r2, [r1, #4]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4093      	lsls	r3, r2
 8006b20:	608b      	str	r3, [r1, #8]
 8006b22:	4620      	mov	r0, r4
 8006b24:	f001 f83c 	bl	8007ba0 <_Bfree>
 8006b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	1e3b      	subs	r3, r7, #0
 8006b30:	bfaa      	itet	ge
 8006b32:	2300      	movge	r3, #0
 8006b34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b38:	f8c8 3000 	strge.w	r3, [r8]
 8006b3c:	4b9a      	ldr	r3, [pc, #616]	; (8006da8 <_dtoa_r+0x2d8>)
 8006b3e:	bfbc      	itt	lt
 8006b40:	2201      	movlt	r2, #1
 8006b42:	f8c8 2000 	strlt.w	r2, [r8]
 8006b46:	ea33 030b 	bics.w	r3, r3, fp
 8006b4a:	d11b      	bne.n	8006b84 <_dtoa_r+0xb4>
 8006b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b58:	4333      	orrs	r3, r6
 8006b5a:	f000 8592 	beq.w	8007682 <_dtoa_r+0xbb2>
 8006b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b60:	b963      	cbnz	r3, 8006b7c <_dtoa_r+0xac>
 8006b62:	4b92      	ldr	r3, [pc, #584]	; (8006dac <_dtoa_r+0x2dc>)
 8006b64:	e022      	b.n	8006bac <_dtoa_r+0xdc>
 8006b66:	4b92      	ldr	r3, [pc, #584]	; (8006db0 <_dtoa_r+0x2e0>)
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	9801      	ldr	r0, [sp, #4]
 8006b72:	b013      	add	sp, #76	; 0x4c
 8006b74:	ecbd 8b04 	vpop	{d8-d9}
 8006b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7c:	4b8b      	ldr	r3, [pc, #556]	; (8006dac <_dtoa_r+0x2dc>)
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	3303      	adds	r3, #3
 8006b82:	e7f3      	b.n	8006b6c <_dtoa_r+0x9c>
 8006b84:	2200      	movs	r2, #0
 8006b86:	2300      	movs	r3, #0
 8006b88:	4650      	mov	r0, sl
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	f7f9 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b90:	ec4b ab19 	vmov	d9, sl, fp
 8006b94:	4680      	mov	r8, r0
 8006b96:	b158      	cbz	r0, 8006bb0 <_dtoa_r+0xe0>
 8006b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 856b 	beq.w	800767c <_dtoa_r+0xbac>
 8006ba6:	4883      	ldr	r0, [pc, #524]	; (8006db4 <_dtoa_r+0x2e4>)
 8006ba8:	6018      	str	r0, [r3, #0]
 8006baa:	1e43      	subs	r3, r0, #1
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	e7df      	b.n	8006b70 <_dtoa_r+0xa0>
 8006bb0:	ec4b ab10 	vmov	d0, sl, fp
 8006bb4:	aa10      	add	r2, sp, #64	; 0x40
 8006bb6:	a911      	add	r1, sp, #68	; 0x44
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f001 fad9 	bl	8008170 <__d2b>
 8006bbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006bc2:	ee08 0a10 	vmov	s16, r0
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	f000 8084 	beq.w	8006cd4 <_dtoa_r+0x204>
 8006bcc:	ee19 3a90 	vmov	r3, s19
 8006bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006bd8:	4656      	mov	r6, sl
 8006bda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006be2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006be6:	4b74      	ldr	r3, [pc, #464]	; (8006db8 <_dtoa_r+0x2e8>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fb4b 	bl	8000288 <__aeabi_dsub>
 8006bf2:	a365      	add	r3, pc, #404	; (adr r3, 8006d88 <_dtoa_r+0x2b8>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f7f9 fcfe 	bl	80005f8 <__aeabi_dmul>
 8006bfc:	a364      	add	r3, pc, #400	; (adr r3, 8006d90 <_dtoa_r+0x2c0>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f7f9 fb43 	bl	800028c <__adddf3>
 8006c06:	4606      	mov	r6, r0
 8006c08:	4628      	mov	r0, r5
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	f7f9 fc8a 	bl	8000524 <__aeabi_i2d>
 8006c10:	a361      	add	r3, pc, #388	; (adr r3, 8006d98 <_dtoa_r+0x2c8>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fcef 	bl	80005f8 <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4630      	mov	r0, r6
 8006c20:	4639      	mov	r1, r7
 8006c22:	f7f9 fb33 	bl	800028c <__adddf3>
 8006c26:	4606      	mov	r6, r0
 8006c28:	460f      	mov	r7, r1
 8006c2a:	f7f9 ff95 	bl	8000b58 <__aeabi_d2iz>
 8006c2e:	2200      	movs	r2, #0
 8006c30:	9000      	str	r0, [sp, #0]
 8006c32:	2300      	movs	r3, #0
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f7f9 ff50 	bl	8000adc <__aeabi_dcmplt>
 8006c3c:	b150      	cbz	r0, 8006c54 <_dtoa_r+0x184>
 8006c3e:	9800      	ldr	r0, [sp, #0]
 8006c40:	f7f9 fc70 	bl	8000524 <__aeabi_i2d>
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	f7f9 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4c:	b910      	cbnz	r0, 8006c54 <_dtoa_r+0x184>
 8006c4e:	9b00      	ldr	r3, [sp, #0]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	9b00      	ldr	r3, [sp, #0]
 8006c56:	2b16      	cmp	r3, #22
 8006c58:	d85a      	bhi.n	8006d10 <_dtoa_r+0x240>
 8006c5a:	9a00      	ldr	r2, [sp, #0]
 8006c5c:	4b57      	ldr	r3, [pc, #348]	; (8006dbc <_dtoa_r+0x2ec>)
 8006c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	ec51 0b19 	vmov	r0, r1, d9
 8006c6a:	f7f9 ff37 	bl	8000adc <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d050      	beq.n	8006d14 <_dtoa_r+0x244>
 8006c72:	9b00      	ldr	r3, [sp, #0]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c7e:	1b5d      	subs	r5, r3, r5
 8006c80:	1e6b      	subs	r3, r5, #1
 8006c82:	9305      	str	r3, [sp, #20]
 8006c84:	bf45      	ittet	mi
 8006c86:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c8a:	9304      	strmi	r3, [sp, #16]
 8006c8c:	2300      	movpl	r3, #0
 8006c8e:	2300      	movmi	r3, #0
 8006c90:	bf4c      	ite	mi
 8006c92:	9305      	strmi	r3, [sp, #20]
 8006c94:	9304      	strpl	r3, [sp, #16]
 8006c96:	9b00      	ldr	r3, [sp, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db3d      	blt.n	8006d18 <_dtoa_r+0x248>
 8006c9c:	9b05      	ldr	r3, [sp, #20]
 8006c9e:	9a00      	ldr	r2, [sp, #0]
 8006ca0:	920a      	str	r2, [sp, #40]	; 0x28
 8006ca2:	4413      	add	r3, r2
 8006ca4:	9305      	str	r3, [sp, #20]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9307      	str	r3, [sp, #28]
 8006caa:	9b06      	ldr	r3, [sp, #24]
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	f200 8089 	bhi.w	8006dc4 <_dtoa_r+0x2f4>
 8006cb2:	2b05      	cmp	r3, #5
 8006cb4:	bfc4      	itt	gt
 8006cb6:	3b04      	subgt	r3, #4
 8006cb8:	9306      	strgt	r3, [sp, #24]
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8006cc0:	bfcc      	ite	gt
 8006cc2:	2500      	movgt	r5, #0
 8006cc4:	2501      	movle	r5, #1
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	f200 8087 	bhi.w	8006dda <_dtoa_r+0x30a>
 8006ccc:	e8df f003 	tbb	[pc, r3]
 8006cd0:	59383a2d 	.word	0x59383a2d
 8006cd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006cd8:	441d      	add	r5, r3
 8006cda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	bfc1      	itttt	gt
 8006ce2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ce6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cea:	fa0b f303 	lslgt.w	r3, fp, r3
 8006cee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cf2:	bfda      	itte	le
 8006cf4:	f1c3 0320 	rsble	r3, r3, #32
 8006cf8:	fa06 f003 	lslle.w	r0, r6, r3
 8006cfc:	4318      	orrgt	r0, r3
 8006cfe:	f7f9 fc01 	bl	8000504 <__aeabi_ui2d>
 8006d02:	2301      	movs	r3, #1
 8006d04:	4606      	mov	r6, r0
 8006d06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d0a:	3d01      	subs	r5, #1
 8006d0c:	930e      	str	r3, [sp, #56]	; 0x38
 8006d0e:	e76a      	b.n	8006be6 <_dtoa_r+0x116>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e7b2      	b.n	8006c7a <_dtoa_r+0x1aa>
 8006d14:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d16:	e7b1      	b.n	8006c7c <_dtoa_r+0x1ac>
 8006d18:	9b04      	ldr	r3, [sp, #16]
 8006d1a:	9a00      	ldr	r2, [sp, #0]
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	4253      	negs	r3, r2
 8006d22:	9307      	str	r3, [sp, #28]
 8006d24:	2300      	movs	r3, #0
 8006d26:	930a      	str	r3, [sp, #40]	; 0x28
 8006d28:	e7bf      	b.n	8006caa <_dtoa_r+0x1da>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9308      	str	r3, [sp, #32]
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dc55      	bgt.n	8006de0 <_dtoa_r+0x310>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d3e:	e00c      	b.n	8006d5a <_dtoa_r+0x28a>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e7f3      	b.n	8006d2c <_dtoa_r+0x25c>
 8006d44:	2300      	movs	r3, #0
 8006d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d48:	9308      	str	r3, [sp, #32]
 8006d4a:	9b00      	ldr	r3, [sp, #0]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	9302      	str	r3, [sp, #8]
 8006d50:	3301      	adds	r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	9303      	str	r3, [sp, #12]
 8006d56:	bfb8      	it	lt
 8006d58:	2301      	movlt	r3, #1
 8006d5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	6042      	str	r2, [r0, #4]
 8006d60:	2204      	movs	r2, #4
 8006d62:	f102 0614 	add.w	r6, r2, #20
 8006d66:	429e      	cmp	r6, r3
 8006d68:	6841      	ldr	r1, [r0, #4]
 8006d6a:	d93d      	bls.n	8006de8 <_dtoa_r+0x318>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fed7 	bl	8007b20 <_Balloc>
 8006d72:	9001      	str	r0, [sp, #4]
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d13b      	bne.n	8006df0 <_dtoa_r+0x320>
 8006d78:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <_dtoa_r+0x2f0>)
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d80:	e6c0      	b.n	8006b04 <_dtoa_r+0x34>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7df      	b.n	8006d46 <_dtoa_r+0x276>
 8006d86:	bf00      	nop
 8006d88:	636f4361 	.word	0x636f4361
 8006d8c:	3fd287a7 	.word	0x3fd287a7
 8006d90:	8b60c8b3 	.word	0x8b60c8b3
 8006d94:	3fc68a28 	.word	0x3fc68a28
 8006d98:	509f79fb 	.word	0x509f79fb
 8006d9c:	3fd34413 	.word	0x3fd34413
 8006da0:	08008a4d 	.word	0x08008a4d
 8006da4:	08008a64 	.word	0x08008a64
 8006da8:	7ff00000 	.word	0x7ff00000
 8006dac:	08008a49 	.word	0x08008a49
 8006db0:	08008a40 	.word	0x08008a40
 8006db4:	08008a1d 	.word	0x08008a1d
 8006db8:	3ff80000 	.word	0x3ff80000
 8006dbc:	08008bb8 	.word	0x08008bb8
 8006dc0:	08008abf 	.word	0x08008abf
 8006dc4:	2501      	movs	r5, #1
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9306      	str	r3, [sp, #24]
 8006dca:	9508      	str	r5, [sp, #32]
 8006dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2312      	movs	r3, #18
 8006dd8:	e7b0      	b.n	8006d3c <_dtoa_r+0x26c>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	e7f5      	b.n	8006dcc <_dtoa_r+0x2fc>
 8006de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006de6:	e7b8      	b.n	8006d5a <_dtoa_r+0x28a>
 8006de8:	3101      	adds	r1, #1
 8006dea:	6041      	str	r1, [r0, #4]
 8006dec:	0052      	lsls	r2, r2, #1
 8006dee:	e7b8      	b.n	8006d62 <_dtoa_r+0x292>
 8006df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df2:	9a01      	ldr	r2, [sp, #4]
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	2b0e      	cmp	r3, #14
 8006dfa:	f200 809d 	bhi.w	8006f38 <_dtoa_r+0x468>
 8006dfe:	2d00      	cmp	r5, #0
 8006e00:	f000 809a 	beq.w	8006f38 <_dtoa_r+0x468>
 8006e04:	9b00      	ldr	r3, [sp, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dd32      	ble.n	8006e70 <_dtoa_r+0x3a0>
 8006e0a:	4ab7      	ldr	r2, [pc, #732]	; (80070e8 <_dtoa_r+0x618>)
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e18:	9b00      	ldr	r3, [sp, #0]
 8006e1a:	05d8      	lsls	r0, r3, #23
 8006e1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e20:	d516      	bpl.n	8006e50 <_dtoa_r+0x380>
 8006e22:	4bb2      	ldr	r3, [pc, #712]	; (80070ec <_dtoa_r+0x61c>)
 8006e24:	ec51 0b19 	vmov	r0, r1, d9
 8006e28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e2c:	f7f9 fd0e 	bl	800084c <__aeabi_ddiv>
 8006e30:	f007 070f 	and.w	r7, r7, #15
 8006e34:	4682      	mov	sl, r0
 8006e36:	468b      	mov	fp, r1
 8006e38:	2503      	movs	r5, #3
 8006e3a:	4eac      	ldr	r6, [pc, #688]	; (80070ec <_dtoa_r+0x61c>)
 8006e3c:	b957      	cbnz	r7, 8006e54 <_dtoa_r+0x384>
 8006e3e:	4642      	mov	r2, r8
 8006e40:	464b      	mov	r3, r9
 8006e42:	4650      	mov	r0, sl
 8006e44:	4659      	mov	r1, fp
 8006e46:	f7f9 fd01 	bl	800084c <__aeabi_ddiv>
 8006e4a:	4682      	mov	sl, r0
 8006e4c:	468b      	mov	fp, r1
 8006e4e:	e028      	b.n	8006ea2 <_dtoa_r+0x3d2>
 8006e50:	2502      	movs	r5, #2
 8006e52:	e7f2      	b.n	8006e3a <_dtoa_r+0x36a>
 8006e54:	07f9      	lsls	r1, r7, #31
 8006e56:	d508      	bpl.n	8006e6a <_dtoa_r+0x39a>
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e60:	f7f9 fbca 	bl	80005f8 <__aeabi_dmul>
 8006e64:	3501      	adds	r5, #1
 8006e66:	4680      	mov	r8, r0
 8006e68:	4689      	mov	r9, r1
 8006e6a:	107f      	asrs	r7, r7, #1
 8006e6c:	3608      	adds	r6, #8
 8006e6e:	e7e5      	b.n	8006e3c <_dtoa_r+0x36c>
 8006e70:	f000 809b 	beq.w	8006faa <_dtoa_r+0x4da>
 8006e74:	9b00      	ldr	r3, [sp, #0]
 8006e76:	4f9d      	ldr	r7, [pc, #628]	; (80070ec <_dtoa_r+0x61c>)
 8006e78:	425e      	negs	r6, r3
 8006e7a:	4b9b      	ldr	r3, [pc, #620]	; (80070e8 <_dtoa_r+0x618>)
 8006e7c:	f006 020f 	and.w	r2, r6, #15
 8006e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	ec51 0b19 	vmov	r0, r1, d9
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	1136      	asrs	r6, r6, #4
 8006e92:	4682      	mov	sl, r0
 8006e94:	468b      	mov	fp, r1
 8006e96:	2300      	movs	r3, #0
 8006e98:	2502      	movs	r5, #2
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	d17a      	bne.n	8006f94 <_dtoa_r+0x4c4>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1d3      	bne.n	8006e4a <_dtoa_r+0x37a>
 8006ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8082 	beq.w	8006fae <_dtoa_r+0x4de>
 8006eaa:	4b91      	ldr	r3, [pc, #580]	; (80070f0 <_dtoa_r+0x620>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	4650      	mov	r0, sl
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	f7f9 fe13 	bl	8000adc <__aeabi_dcmplt>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d079      	beq.n	8006fae <_dtoa_r+0x4de>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d076      	beq.n	8006fae <_dtoa_r+0x4de>
 8006ec0:	9b02      	ldr	r3, [sp, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dd36      	ble.n	8006f34 <_dtoa_r+0x464>
 8006ec6:	9b00      	ldr	r3, [sp, #0]
 8006ec8:	4650      	mov	r0, sl
 8006eca:	4659      	mov	r1, fp
 8006ecc:	1e5f      	subs	r7, r3, #1
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4b88      	ldr	r3, [pc, #544]	; (80070f4 <_dtoa_r+0x624>)
 8006ed2:	f7f9 fb91 	bl	80005f8 <__aeabi_dmul>
 8006ed6:	9e02      	ldr	r6, [sp, #8]
 8006ed8:	4682      	mov	sl, r0
 8006eda:	468b      	mov	fp, r1
 8006edc:	3501      	adds	r5, #1
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f7f9 fb20 	bl	8000524 <__aeabi_i2d>
 8006ee4:	4652      	mov	r2, sl
 8006ee6:	465b      	mov	r3, fp
 8006ee8:	f7f9 fb86 	bl	80005f8 <__aeabi_dmul>
 8006eec:	4b82      	ldr	r3, [pc, #520]	; (80070f8 <_dtoa_r+0x628>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f7f9 f9cc 	bl	800028c <__adddf3>
 8006ef4:	46d0      	mov	r8, sl
 8006ef6:	46d9      	mov	r9, fp
 8006ef8:	4682      	mov	sl, r0
 8006efa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	d158      	bne.n	8006fb4 <_dtoa_r+0x4e4>
 8006f02:	4b7e      	ldr	r3, [pc, #504]	; (80070fc <_dtoa_r+0x62c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	f7f9 f9bd 	bl	8000288 <__aeabi_dsub>
 8006f0e:	4652      	mov	r2, sl
 8006f10:	465b      	mov	r3, fp
 8006f12:	4680      	mov	r8, r0
 8006f14:	4689      	mov	r9, r1
 8006f16:	f7f9 fdff 	bl	8000b18 <__aeabi_dcmpgt>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f040 8295 	bne.w	800744a <_dtoa_r+0x97a>
 8006f20:	4652      	mov	r2, sl
 8006f22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fdd7 	bl	8000adc <__aeabi_dcmplt>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f040 8289 	bne.w	8007446 <_dtoa_r+0x976>
 8006f34:	ec5b ab19 	vmov	sl, fp, d9
 8006f38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f2c0 8148 	blt.w	80071d0 <_dtoa_r+0x700>
 8006f40:	9a00      	ldr	r2, [sp, #0]
 8006f42:	2a0e      	cmp	r2, #14
 8006f44:	f300 8144 	bgt.w	80071d0 <_dtoa_r+0x700>
 8006f48:	4b67      	ldr	r3, [pc, #412]	; (80070e8 <_dtoa_r+0x618>)
 8006f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f280 80d5 	bge.w	8007104 <_dtoa_r+0x634>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f300 80d1 	bgt.w	8007104 <_dtoa_r+0x634>
 8006f62:	f040 826f 	bne.w	8007444 <_dtoa_r+0x974>
 8006f66:	4b65      	ldr	r3, [pc, #404]	; (80070fc <_dtoa_r+0x62c>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 fb43 	bl	80005f8 <__aeabi_dmul>
 8006f72:	4652      	mov	r2, sl
 8006f74:	465b      	mov	r3, fp
 8006f76:	f7f9 fdc5 	bl	8000b04 <__aeabi_dcmpge>
 8006f7a:	9e03      	ldr	r6, [sp, #12]
 8006f7c:	4637      	mov	r7, r6
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f040 8245 	bne.w	800740e <_dtoa_r+0x93e>
 8006f84:	9d01      	ldr	r5, [sp, #4]
 8006f86:	2331      	movs	r3, #49	; 0x31
 8006f88:	f805 3b01 	strb.w	r3, [r5], #1
 8006f8c:	9b00      	ldr	r3, [sp, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	e240      	b.n	8007416 <_dtoa_r+0x946>
 8006f94:	07f2      	lsls	r2, r6, #31
 8006f96:	d505      	bpl.n	8006fa4 <_dtoa_r+0x4d4>
 8006f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9c:	f7f9 fb2c 	bl	80005f8 <__aeabi_dmul>
 8006fa0:	3501      	adds	r5, #1
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	1076      	asrs	r6, r6, #1
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	e777      	b.n	8006e9a <_dtoa_r+0x3ca>
 8006faa:	2502      	movs	r5, #2
 8006fac:	e779      	b.n	8006ea2 <_dtoa_r+0x3d2>
 8006fae:	9f00      	ldr	r7, [sp, #0]
 8006fb0:	9e03      	ldr	r6, [sp, #12]
 8006fb2:	e794      	b.n	8006ede <_dtoa_r+0x40e>
 8006fb4:	9901      	ldr	r1, [sp, #4]
 8006fb6:	4b4c      	ldr	r3, [pc, #304]	; (80070e8 <_dtoa_r+0x618>)
 8006fb8:	4431      	add	r1, r6
 8006fba:	910d      	str	r1, [sp, #52]	; 0x34
 8006fbc:	9908      	ldr	r1, [sp, #32]
 8006fbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fc6:	2900      	cmp	r1, #0
 8006fc8:	d043      	beq.n	8007052 <_dtoa_r+0x582>
 8006fca:	494d      	ldr	r1, [pc, #308]	; (8007100 <_dtoa_r+0x630>)
 8006fcc:	2000      	movs	r0, #0
 8006fce:	f7f9 fc3d 	bl	800084c <__aeabi_ddiv>
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	f7f9 f957 	bl	8000288 <__aeabi_dsub>
 8006fda:	9d01      	ldr	r5, [sp, #4]
 8006fdc:	4682      	mov	sl, r0
 8006fde:	468b      	mov	fp, r1
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	f7f9 fdb8 	bl	8000b58 <__aeabi_d2iz>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	f7f9 fa9b 	bl	8000524 <__aeabi_i2d>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	f7f9 f947 	bl	8000288 <__aeabi_dsub>
 8006ffa:	3630      	adds	r6, #48	; 0x30
 8006ffc:	f805 6b01 	strb.w	r6, [r5], #1
 8007000:	4652      	mov	r2, sl
 8007002:	465b      	mov	r3, fp
 8007004:	4680      	mov	r8, r0
 8007006:	4689      	mov	r9, r1
 8007008:	f7f9 fd68 	bl	8000adc <__aeabi_dcmplt>
 800700c:	2800      	cmp	r0, #0
 800700e:	d163      	bne.n	80070d8 <_dtoa_r+0x608>
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	4936      	ldr	r1, [pc, #216]	; (80070f0 <_dtoa_r+0x620>)
 8007016:	2000      	movs	r0, #0
 8007018:	f7f9 f936 	bl	8000288 <__aeabi_dsub>
 800701c:	4652      	mov	r2, sl
 800701e:	465b      	mov	r3, fp
 8007020:	f7f9 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8007024:	2800      	cmp	r0, #0
 8007026:	f040 80b5 	bne.w	8007194 <_dtoa_r+0x6c4>
 800702a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800702c:	429d      	cmp	r5, r3
 800702e:	d081      	beq.n	8006f34 <_dtoa_r+0x464>
 8007030:	4b30      	ldr	r3, [pc, #192]	; (80070f4 <_dtoa_r+0x624>)
 8007032:	2200      	movs	r2, #0
 8007034:	4650      	mov	r0, sl
 8007036:	4659      	mov	r1, fp
 8007038:	f7f9 fade 	bl	80005f8 <__aeabi_dmul>
 800703c:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <_dtoa_r+0x624>)
 800703e:	4682      	mov	sl, r0
 8007040:	468b      	mov	fp, r1
 8007042:	4640      	mov	r0, r8
 8007044:	4649      	mov	r1, r9
 8007046:	2200      	movs	r2, #0
 8007048:	f7f9 fad6 	bl	80005f8 <__aeabi_dmul>
 800704c:	4680      	mov	r8, r0
 800704e:	4689      	mov	r9, r1
 8007050:	e7c6      	b.n	8006fe0 <_dtoa_r+0x510>
 8007052:	4650      	mov	r0, sl
 8007054:	4659      	mov	r1, fp
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800705c:	9d01      	ldr	r5, [sp, #4]
 800705e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007060:	4682      	mov	sl, r0
 8007062:	468b      	mov	fp, r1
 8007064:	4649      	mov	r1, r9
 8007066:	4640      	mov	r0, r8
 8007068:	f7f9 fd76 	bl	8000b58 <__aeabi_d2iz>
 800706c:	4606      	mov	r6, r0
 800706e:	f7f9 fa59 	bl	8000524 <__aeabi_i2d>
 8007072:	3630      	adds	r6, #48	; 0x30
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4640      	mov	r0, r8
 800707a:	4649      	mov	r1, r9
 800707c:	f7f9 f904 	bl	8000288 <__aeabi_dsub>
 8007080:	f805 6b01 	strb.w	r6, [r5], #1
 8007084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007086:	429d      	cmp	r5, r3
 8007088:	4680      	mov	r8, r0
 800708a:	4689      	mov	r9, r1
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	d124      	bne.n	80070dc <_dtoa_r+0x60c>
 8007092:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <_dtoa_r+0x630>)
 8007094:	4650      	mov	r0, sl
 8007096:	4659      	mov	r1, fp
 8007098:	f7f9 f8f8 	bl	800028c <__adddf3>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7f9 fd38 	bl	8000b18 <__aeabi_dcmpgt>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d173      	bne.n	8007194 <_dtoa_r+0x6c4>
 80070ac:	4652      	mov	r2, sl
 80070ae:	465b      	mov	r3, fp
 80070b0:	4913      	ldr	r1, [pc, #76]	; (8007100 <_dtoa_r+0x630>)
 80070b2:	2000      	movs	r0, #0
 80070b4:	f7f9 f8e8 	bl	8000288 <__aeabi_dsub>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	f7f9 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	f43f af35 	beq.w	8006f34 <_dtoa_r+0x464>
 80070ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070cc:	1e6b      	subs	r3, r5, #1
 80070ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80070d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070d4:	2b30      	cmp	r3, #48	; 0x30
 80070d6:	d0f8      	beq.n	80070ca <_dtoa_r+0x5fa>
 80070d8:	9700      	str	r7, [sp, #0]
 80070da:	e049      	b.n	8007170 <_dtoa_r+0x6a0>
 80070dc:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <_dtoa_r+0x624>)
 80070de:	f7f9 fa8b 	bl	80005f8 <__aeabi_dmul>
 80070e2:	4680      	mov	r8, r0
 80070e4:	4689      	mov	r9, r1
 80070e6:	e7bd      	b.n	8007064 <_dtoa_r+0x594>
 80070e8:	08008bb8 	.word	0x08008bb8
 80070ec:	08008b90 	.word	0x08008b90
 80070f0:	3ff00000 	.word	0x3ff00000
 80070f4:	40240000 	.word	0x40240000
 80070f8:	401c0000 	.word	0x401c0000
 80070fc:	40140000 	.word	0x40140000
 8007100:	3fe00000 	.word	0x3fe00000
 8007104:	9d01      	ldr	r5, [sp, #4]
 8007106:	4656      	mov	r6, sl
 8007108:	465f      	mov	r7, fp
 800710a:	4642      	mov	r2, r8
 800710c:	464b      	mov	r3, r9
 800710e:	4630      	mov	r0, r6
 8007110:	4639      	mov	r1, r7
 8007112:	f7f9 fb9b 	bl	800084c <__aeabi_ddiv>
 8007116:	f7f9 fd1f 	bl	8000b58 <__aeabi_d2iz>
 800711a:	4682      	mov	sl, r0
 800711c:	f7f9 fa02 	bl	8000524 <__aeabi_i2d>
 8007120:	4642      	mov	r2, r8
 8007122:	464b      	mov	r3, r9
 8007124:	f7f9 fa68 	bl	80005f8 <__aeabi_dmul>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4630      	mov	r0, r6
 800712e:	4639      	mov	r1, r7
 8007130:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007134:	f7f9 f8a8 	bl	8000288 <__aeabi_dsub>
 8007138:	f805 6b01 	strb.w	r6, [r5], #1
 800713c:	9e01      	ldr	r6, [sp, #4]
 800713e:	9f03      	ldr	r7, [sp, #12]
 8007140:	1bae      	subs	r6, r5, r6
 8007142:	42b7      	cmp	r7, r6
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	d135      	bne.n	80071b6 <_dtoa_r+0x6e6>
 800714a:	f7f9 f89f 	bl	800028c <__adddf3>
 800714e:	4642      	mov	r2, r8
 8007150:	464b      	mov	r3, r9
 8007152:	4606      	mov	r6, r0
 8007154:	460f      	mov	r7, r1
 8007156:	f7f9 fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800715a:	b9d0      	cbnz	r0, 8007192 <_dtoa_r+0x6c2>
 800715c:	4642      	mov	r2, r8
 800715e:	464b      	mov	r3, r9
 8007160:	4630      	mov	r0, r6
 8007162:	4639      	mov	r1, r7
 8007164:	f7f9 fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007168:	b110      	cbz	r0, 8007170 <_dtoa_r+0x6a0>
 800716a:	f01a 0f01 	tst.w	sl, #1
 800716e:	d110      	bne.n	8007192 <_dtoa_r+0x6c2>
 8007170:	4620      	mov	r0, r4
 8007172:	ee18 1a10 	vmov	r1, s16
 8007176:	f000 fd13 	bl	8007ba0 <_Bfree>
 800717a:	2300      	movs	r3, #0
 800717c:	9800      	ldr	r0, [sp, #0]
 800717e:	702b      	strb	r3, [r5, #0]
 8007180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007182:	3001      	adds	r0, #1
 8007184:	6018      	str	r0, [r3, #0]
 8007186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007188:	2b00      	cmp	r3, #0
 800718a:	f43f acf1 	beq.w	8006b70 <_dtoa_r+0xa0>
 800718e:	601d      	str	r5, [r3, #0]
 8007190:	e4ee      	b.n	8006b70 <_dtoa_r+0xa0>
 8007192:	9f00      	ldr	r7, [sp, #0]
 8007194:	462b      	mov	r3, r5
 8007196:	461d      	mov	r5, r3
 8007198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800719c:	2a39      	cmp	r2, #57	; 0x39
 800719e:	d106      	bne.n	80071ae <_dtoa_r+0x6de>
 80071a0:	9a01      	ldr	r2, [sp, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d1f7      	bne.n	8007196 <_dtoa_r+0x6c6>
 80071a6:	9901      	ldr	r1, [sp, #4]
 80071a8:	2230      	movs	r2, #48	; 0x30
 80071aa:	3701      	adds	r7, #1
 80071ac:	700a      	strb	r2, [r1, #0]
 80071ae:	781a      	ldrb	r2, [r3, #0]
 80071b0:	3201      	adds	r2, #1
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	e790      	b.n	80070d8 <_dtoa_r+0x608>
 80071b6:	4ba6      	ldr	r3, [pc, #664]	; (8007450 <_dtoa_r+0x980>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	f7f9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	4606      	mov	r6, r0
 80071c4:	460f      	mov	r7, r1
 80071c6:	f7f9 fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d09d      	beq.n	800710a <_dtoa_r+0x63a>
 80071ce:	e7cf      	b.n	8007170 <_dtoa_r+0x6a0>
 80071d0:	9a08      	ldr	r2, [sp, #32]
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	f000 80d7 	beq.w	8007386 <_dtoa_r+0x8b6>
 80071d8:	9a06      	ldr	r2, [sp, #24]
 80071da:	2a01      	cmp	r2, #1
 80071dc:	f300 80ba 	bgt.w	8007354 <_dtoa_r+0x884>
 80071e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	f000 80b2 	beq.w	800734c <_dtoa_r+0x87c>
 80071e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071ec:	9e07      	ldr	r6, [sp, #28]
 80071ee:	9d04      	ldr	r5, [sp, #16]
 80071f0:	9a04      	ldr	r2, [sp, #16]
 80071f2:	441a      	add	r2, r3
 80071f4:	9204      	str	r2, [sp, #16]
 80071f6:	9a05      	ldr	r2, [sp, #20]
 80071f8:	2101      	movs	r1, #1
 80071fa:	441a      	add	r2, r3
 80071fc:	4620      	mov	r0, r4
 80071fe:	9205      	str	r2, [sp, #20]
 8007200:	f000 fd86 	bl	8007d10 <__i2b>
 8007204:	4607      	mov	r7, r0
 8007206:	2d00      	cmp	r5, #0
 8007208:	dd0c      	ble.n	8007224 <_dtoa_r+0x754>
 800720a:	9b05      	ldr	r3, [sp, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dd09      	ble.n	8007224 <_dtoa_r+0x754>
 8007210:	42ab      	cmp	r3, r5
 8007212:	9a04      	ldr	r2, [sp, #16]
 8007214:	bfa8      	it	ge
 8007216:	462b      	movge	r3, r5
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	9204      	str	r2, [sp, #16]
 800721c:	9a05      	ldr	r2, [sp, #20]
 800721e:	1aed      	subs	r5, r5, r3
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	9305      	str	r3, [sp, #20]
 8007224:	9b07      	ldr	r3, [sp, #28]
 8007226:	b31b      	cbz	r3, 8007270 <_dtoa_r+0x7a0>
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 80af 	beq.w	800738e <_dtoa_r+0x8be>
 8007230:	2e00      	cmp	r6, #0
 8007232:	dd13      	ble.n	800725c <_dtoa_r+0x78c>
 8007234:	4639      	mov	r1, r7
 8007236:	4632      	mov	r2, r6
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fe29 	bl	8007e90 <__pow5mult>
 800723e:	ee18 2a10 	vmov	r2, s16
 8007242:	4601      	mov	r1, r0
 8007244:	4607      	mov	r7, r0
 8007246:	4620      	mov	r0, r4
 8007248:	f000 fd78 	bl	8007d3c <__multiply>
 800724c:	ee18 1a10 	vmov	r1, s16
 8007250:	4680      	mov	r8, r0
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fca4 	bl	8007ba0 <_Bfree>
 8007258:	ee08 8a10 	vmov	s16, r8
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	1b9a      	subs	r2, r3, r6
 8007260:	d006      	beq.n	8007270 <_dtoa_r+0x7a0>
 8007262:	ee18 1a10 	vmov	r1, s16
 8007266:	4620      	mov	r0, r4
 8007268:	f000 fe12 	bl	8007e90 <__pow5mult>
 800726c:	ee08 0a10 	vmov	s16, r0
 8007270:	2101      	movs	r1, #1
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fd4c 	bl	8007d10 <__i2b>
 8007278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	4606      	mov	r6, r0
 800727e:	f340 8088 	ble.w	8007392 <_dtoa_r+0x8c2>
 8007282:	461a      	mov	r2, r3
 8007284:	4601      	mov	r1, r0
 8007286:	4620      	mov	r0, r4
 8007288:	f000 fe02 	bl	8007e90 <__pow5mult>
 800728c:	9b06      	ldr	r3, [sp, #24]
 800728e:	2b01      	cmp	r3, #1
 8007290:	4606      	mov	r6, r0
 8007292:	f340 8081 	ble.w	8007398 <_dtoa_r+0x8c8>
 8007296:	f04f 0800 	mov.w	r8, #0
 800729a:	6933      	ldr	r3, [r6, #16]
 800729c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072a0:	6918      	ldr	r0, [r3, #16]
 80072a2:	f000 fce5 	bl	8007c70 <__hi0bits>
 80072a6:	f1c0 0020 	rsb	r0, r0, #32
 80072aa:	9b05      	ldr	r3, [sp, #20]
 80072ac:	4418      	add	r0, r3
 80072ae:	f010 001f 	ands.w	r0, r0, #31
 80072b2:	f000 8092 	beq.w	80073da <_dtoa_r+0x90a>
 80072b6:	f1c0 0320 	rsb	r3, r0, #32
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	f340 808a 	ble.w	80073d4 <_dtoa_r+0x904>
 80072c0:	f1c0 001c 	rsb	r0, r0, #28
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	4403      	add	r3, r0
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	9b05      	ldr	r3, [sp, #20]
 80072cc:	4403      	add	r3, r0
 80072ce:	4405      	add	r5, r0
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	9b04      	ldr	r3, [sp, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dd07      	ble.n	80072e8 <_dtoa_r+0x818>
 80072d8:	ee18 1a10 	vmov	r1, s16
 80072dc:	461a      	mov	r2, r3
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fe30 	bl	8007f44 <__lshift>
 80072e4:	ee08 0a10 	vmov	s16, r0
 80072e8:	9b05      	ldr	r3, [sp, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dd05      	ble.n	80072fa <_dtoa_r+0x82a>
 80072ee:	4631      	mov	r1, r6
 80072f0:	461a      	mov	r2, r3
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fe26 	bl	8007f44 <__lshift>
 80072f8:	4606      	mov	r6, r0
 80072fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d06e      	beq.n	80073de <_dtoa_r+0x90e>
 8007300:	ee18 0a10 	vmov	r0, s16
 8007304:	4631      	mov	r1, r6
 8007306:	f000 fe8d 	bl	8008024 <__mcmp>
 800730a:	2800      	cmp	r0, #0
 800730c:	da67      	bge.n	80073de <_dtoa_r+0x90e>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	3b01      	subs	r3, #1
 8007312:	ee18 1a10 	vmov	r1, s16
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	220a      	movs	r2, #10
 800731a:	2300      	movs	r3, #0
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fc61 	bl	8007be4 <__multadd>
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	ee08 0a10 	vmov	s16, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 81b1 	beq.w	8007690 <_dtoa_r+0xbc0>
 800732e:	2300      	movs	r3, #0
 8007330:	4639      	mov	r1, r7
 8007332:	220a      	movs	r2, #10
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fc55 	bl	8007be4 <__multadd>
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	4607      	mov	r7, r0
 8007340:	f300 808e 	bgt.w	8007460 <_dtoa_r+0x990>
 8007344:	9b06      	ldr	r3, [sp, #24]
 8007346:	2b02      	cmp	r3, #2
 8007348:	dc51      	bgt.n	80073ee <_dtoa_r+0x91e>
 800734a:	e089      	b.n	8007460 <_dtoa_r+0x990>
 800734c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800734e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007352:	e74b      	b.n	80071ec <_dtoa_r+0x71c>
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	1e5e      	subs	r6, r3, #1
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	42b3      	cmp	r3, r6
 800735c:	bfbf      	itttt	lt
 800735e:	9b07      	ldrlt	r3, [sp, #28]
 8007360:	9607      	strlt	r6, [sp, #28]
 8007362:	1af2      	sublt	r2, r6, r3
 8007364:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007366:	bfb6      	itet	lt
 8007368:	189b      	addlt	r3, r3, r2
 800736a:	1b9e      	subge	r6, r3, r6
 800736c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	bfb8      	it	lt
 8007372:	2600      	movlt	r6, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	bfb7      	itett	lt
 8007378:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800737c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007380:	1a9d      	sublt	r5, r3, r2
 8007382:	2300      	movlt	r3, #0
 8007384:	e734      	b.n	80071f0 <_dtoa_r+0x720>
 8007386:	9e07      	ldr	r6, [sp, #28]
 8007388:	9d04      	ldr	r5, [sp, #16]
 800738a:	9f08      	ldr	r7, [sp, #32]
 800738c:	e73b      	b.n	8007206 <_dtoa_r+0x736>
 800738e:	9a07      	ldr	r2, [sp, #28]
 8007390:	e767      	b.n	8007262 <_dtoa_r+0x792>
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	2b01      	cmp	r3, #1
 8007396:	dc18      	bgt.n	80073ca <_dtoa_r+0x8fa>
 8007398:	f1ba 0f00 	cmp.w	sl, #0
 800739c:	d115      	bne.n	80073ca <_dtoa_r+0x8fa>
 800739e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073a2:	b993      	cbnz	r3, 80073ca <_dtoa_r+0x8fa>
 80073a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073a8:	0d1b      	lsrs	r3, r3, #20
 80073aa:	051b      	lsls	r3, r3, #20
 80073ac:	b183      	cbz	r3, 80073d0 <_dtoa_r+0x900>
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	3301      	adds	r3, #1
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	9b05      	ldr	r3, [sp, #20]
 80073b6:	3301      	adds	r3, #1
 80073b8:	9305      	str	r3, [sp, #20]
 80073ba:	f04f 0801 	mov.w	r8, #1
 80073be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f47f af6a 	bne.w	800729a <_dtoa_r+0x7ca>
 80073c6:	2001      	movs	r0, #1
 80073c8:	e76f      	b.n	80072aa <_dtoa_r+0x7da>
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	e7f6      	b.n	80073be <_dtoa_r+0x8ee>
 80073d0:	4698      	mov	r8, r3
 80073d2:	e7f4      	b.n	80073be <_dtoa_r+0x8ee>
 80073d4:	f43f af7d 	beq.w	80072d2 <_dtoa_r+0x802>
 80073d8:	4618      	mov	r0, r3
 80073da:	301c      	adds	r0, #28
 80073dc:	e772      	b.n	80072c4 <_dtoa_r+0x7f4>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc37      	bgt.n	8007454 <_dtoa_r+0x984>
 80073e4:	9b06      	ldr	r3, [sp, #24]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	dd34      	ble.n	8007454 <_dtoa_r+0x984>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	9302      	str	r3, [sp, #8]
 80073ee:	9b02      	ldr	r3, [sp, #8]
 80073f0:	b96b      	cbnz	r3, 800740e <_dtoa_r+0x93e>
 80073f2:	4631      	mov	r1, r6
 80073f4:	2205      	movs	r2, #5
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 fbf4 	bl	8007be4 <__multadd>
 80073fc:	4601      	mov	r1, r0
 80073fe:	4606      	mov	r6, r0
 8007400:	ee18 0a10 	vmov	r0, s16
 8007404:	f000 fe0e 	bl	8008024 <__mcmp>
 8007408:	2800      	cmp	r0, #0
 800740a:	f73f adbb 	bgt.w	8006f84 <_dtoa_r+0x4b4>
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	9d01      	ldr	r5, [sp, #4]
 8007412:	43db      	mvns	r3, r3
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	f04f 0800 	mov.w	r8, #0
 800741a:	4631      	mov	r1, r6
 800741c:	4620      	mov	r0, r4
 800741e:	f000 fbbf 	bl	8007ba0 <_Bfree>
 8007422:	2f00      	cmp	r7, #0
 8007424:	f43f aea4 	beq.w	8007170 <_dtoa_r+0x6a0>
 8007428:	f1b8 0f00 	cmp.w	r8, #0
 800742c:	d005      	beq.n	800743a <_dtoa_r+0x96a>
 800742e:	45b8      	cmp	r8, r7
 8007430:	d003      	beq.n	800743a <_dtoa_r+0x96a>
 8007432:	4641      	mov	r1, r8
 8007434:	4620      	mov	r0, r4
 8007436:	f000 fbb3 	bl	8007ba0 <_Bfree>
 800743a:	4639      	mov	r1, r7
 800743c:	4620      	mov	r0, r4
 800743e:	f000 fbaf 	bl	8007ba0 <_Bfree>
 8007442:	e695      	b.n	8007170 <_dtoa_r+0x6a0>
 8007444:	2600      	movs	r6, #0
 8007446:	4637      	mov	r7, r6
 8007448:	e7e1      	b.n	800740e <_dtoa_r+0x93e>
 800744a:	9700      	str	r7, [sp, #0]
 800744c:	4637      	mov	r7, r6
 800744e:	e599      	b.n	8006f84 <_dtoa_r+0x4b4>
 8007450:	40240000 	.word	0x40240000
 8007454:	9b08      	ldr	r3, [sp, #32]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80ca 	beq.w	80075f0 <_dtoa_r+0xb20>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	9302      	str	r3, [sp, #8]
 8007460:	2d00      	cmp	r5, #0
 8007462:	dd05      	ble.n	8007470 <_dtoa_r+0x9a0>
 8007464:	4639      	mov	r1, r7
 8007466:	462a      	mov	r2, r5
 8007468:	4620      	mov	r0, r4
 800746a:	f000 fd6b 	bl	8007f44 <__lshift>
 800746e:	4607      	mov	r7, r0
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	d05b      	beq.n	800752e <_dtoa_r+0xa5e>
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fb51 	bl	8007b20 <_Balloc>
 800747e:	4605      	mov	r5, r0
 8007480:	b928      	cbnz	r0, 800748e <_dtoa_r+0x9be>
 8007482:	4b87      	ldr	r3, [pc, #540]	; (80076a0 <_dtoa_r+0xbd0>)
 8007484:	4602      	mov	r2, r0
 8007486:	f240 21ea 	movw	r1, #746	; 0x2ea
 800748a:	f7ff bb3b 	b.w	8006b04 <_dtoa_r+0x34>
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	3202      	adds	r2, #2
 8007492:	0092      	lsls	r2, r2, #2
 8007494:	f107 010c 	add.w	r1, r7, #12
 8007498:	300c      	adds	r0, #12
 800749a:	f000 fb33 	bl	8007b04 <memcpy>
 800749e:	2201      	movs	r2, #1
 80074a0:	4629      	mov	r1, r5
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 fd4e 	bl	8007f44 <__lshift>
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	f103 0901 	add.w	r9, r3, #1
 80074ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	f00a 0301 	and.w	r3, sl, #1
 80074ba:	46b8      	mov	r8, r7
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	4607      	mov	r7, r0
 80074c0:	4631      	mov	r1, r6
 80074c2:	ee18 0a10 	vmov	r0, s16
 80074c6:	f7ff fa75 	bl	80069b4 <quorem>
 80074ca:	4641      	mov	r1, r8
 80074cc:	9002      	str	r0, [sp, #8]
 80074ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074d2:	ee18 0a10 	vmov	r0, s16
 80074d6:	f000 fda5 	bl	8008024 <__mcmp>
 80074da:	463a      	mov	r2, r7
 80074dc:	9003      	str	r0, [sp, #12]
 80074de:	4631      	mov	r1, r6
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fdbb 	bl	800805c <__mdiff>
 80074e6:	68c2      	ldr	r2, [r0, #12]
 80074e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80074ec:	4605      	mov	r5, r0
 80074ee:	bb02      	cbnz	r2, 8007532 <_dtoa_r+0xa62>
 80074f0:	4601      	mov	r1, r0
 80074f2:	ee18 0a10 	vmov	r0, s16
 80074f6:	f000 fd95 	bl	8008024 <__mcmp>
 80074fa:	4602      	mov	r2, r0
 80074fc:	4629      	mov	r1, r5
 80074fe:	4620      	mov	r0, r4
 8007500:	9207      	str	r2, [sp, #28]
 8007502:	f000 fb4d 	bl	8007ba0 <_Bfree>
 8007506:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800750a:	ea43 0102 	orr.w	r1, r3, r2
 800750e:	9b04      	ldr	r3, [sp, #16]
 8007510:	430b      	orrs	r3, r1
 8007512:	464d      	mov	r5, r9
 8007514:	d10f      	bne.n	8007536 <_dtoa_r+0xa66>
 8007516:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800751a:	d02a      	beq.n	8007572 <_dtoa_r+0xaa2>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	dd02      	ble.n	8007528 <_dtoa_r+0xa58>
 8007522:	9b02      	ldr	r3, [sp, #8]
 8007524:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007528:	f88b a000 	strb.w	sl, [fp]
 800752c:	e775      	b.n	800741a <_dtoa_r+0x94a>
 800752e:	4638      	mov	r0, r7
 8007530:	e7ba      	b.n	80074a8 <_dtoa_r+0x9d8>
 8007532:	2201      	movs	r2, #1
 8007534:	e7e2      	b.n	80074fc <_dtoa_r+0xa2c>
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db04      	blt.n	8007546 <_dtoa_r+0xa76>
 800753c:	9906      	ldr	r1, [sp, #24]
 800753e:	430b      	orrs	r3, r1
 8007540:	9904      	ldr	r1, [sp, #16]
 8007542:	430b      	orrs	r3, r1
 8007544:	d122      	bne.n	800758c <_dtoa_r+0xabc>
 8007546:	2a00      	cmp	r2, #0
 8007548:	ddee      	ble.n	8007528 <_dtoa_r+0xa58>
 800754a:	ee18 1a10 	vmov	r1, s16
 800754e:	2201      	movs	r2, #1
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fcf7 	bl	8007f44 <__lshift>
 8007556:	4631      	mov	r1, r6
 8007558:	ee08 0a10 	vmov	s16, r0
 800755c:	f000 fd62 	bl	8008024 <__mcmp>
 8007560:	2800      	cmp	r0, #0
 8007562:	dc03      	bgt.n	800756c <_dtoa_r+0xa9c>
 8007564:	d1e0      	bne.n	8007528 <_dtoa_r+0xa58>
 8007566:	f01a 0f01 	tst.w	sl, #1
 800756a:	d0dd      	beq.n	8007528 <_dtoa_r+0xa58>
 800756c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007570:	d1d7      	bne.n	8007522 <_dtoa_r+0xa52>
 8007572:	2339      	movs	r3, #57	; 0x39
 8007574:	f88b 3000 	strb.w	r3, [fp]
 8007578:	462b      	mov	r3, r5
 800757a:	461d      	mov	r5, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007582:	2a39      	cmp	r2, #57	; 0x39
 8007584:	d071      	beq.n	800766a <_dtoa_r+0xb9a>
 8007586:	3201      	adds	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e746      	b.n	800741a <_dtoa_r+0x94a>
 800758c:	2a00      	cmp	r2, #0
 800758e:	dd07      	ble.n	80075a0 <_dtoa_r+0xad0>
 8007590:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007594:	d0ed      	beq.n	8007572 <_dtoa_r+0xaa2>
 8007596:	f10a 0301 	add.w	r3, sl, #1
 800759a:	f88b 3000 	strb.w	r3, [fp]
 800759e:	e73c      	b.n	800741a <_dtoa_r+0x94a>
 80075a0:	9b05      	ldr	r3, [sp, #20]
 80075a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80075a6:	4599      	cmp	r9, r3
 80075a8:	d047      	beq.n	800763a <_dtoa_r+0xb6a>
 80075aa:	ee18 1a10 	vmov	r1, s16
 80075ae:	2300      	movs	r3, #0
 80075b0:	220a      	movs	r2, #10
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 fb16 	bl	8007be4 <__multadd>
 80075b8:	45b8      	cmp	r8, r7
 80075ba:	ee08 0a10 	vmov	s16, r0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	f04f 020a 	mov.w	r2, #10
 80075c6:	4641      	mov	r1, r8
 80075c8:	4620      	mov	r0, r4
 80075ca:	d106      	bne.n	80075da <_dtoa_r+0xb0a>
 80075cc:	f000 fb0a 	bl	8007be4 <__multadd>
 80075d0:	4680      	mov	r8, r0
 80075d2:	4607      	mov	r7, r0
 80075d4:	f109 0901 	add.w	r9, r9, #1
 80075d8:	e772      	b.n	80074c0 <_dtoa_r+0x9f0>
 80075da:	f000 fb03 	bl	8007be4 <__multadd>
 80075de:	4639      	mov	r1, r7
 80075e0:	4680      	mov	r8, r0
 80075e2:	2300      	movs	r3, #0
 80075e4:	220a      	movs	r2, #10
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fafc 	bl	8007be4 <__multadd>
 80075ec:	4607      	mov	r7, r0
 80075ee:	e7f1      	b.n	80075d4 <_dtoa_r+0xb04>
 80075f0:	9b03      	ldr	r3, [sp, #12]
 80075f2:	9302      	str	r3, [sp, #8]
 80075f4:	9d01      	ldr	r5, [sp, #4]
 80075f6:	ee18 0a10 	vmov	r0, s16
 80075fa:	4631      	mov	r1, r6
 80075fc:	f7ff f9da 	bl	80069b4 <quorem>
 8007600:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007604:	9b01      	ldr	r3, [sp, #4]
 8007606:	f805 ab01 	strb.w	sl, [r5], #1
 800760a:	1aea      	subs	r2, r5, r3
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	4293      	cmp	r3, r2
 8007610:	dd09      	ble.n	8007626 <_dtoa_r+0xb56>
 8007612:	ee18 1a10 	vmov	r1, s16
 8007616:	2300      	movs	r3, #0
 8007618:	220a      	movs	r2, #10
 800761a:	4620      	mov	r0, r4
 800761c:	f000 fae2 	bl	8007be4 <__multadd>
 8007620:	ee08 0a10 	vmov	s16, r0
 8007624:	e7e7      	b.n	80075f6 <_dtoa_r+0xb26>
 8007626:	9b02      	ldr	r3, [sp, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	bfc8      	it	gt
 800762c:	461d      	movgt	r5, r3
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	bfd8      	it	le
 8007632:	2501      	movle	r5, #1
 8007634:	441d      	add	r5, r3
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	ee18 1a10 	vmov	r1, s16
 800763e:	2201      	movs	r2, #1
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fc7f 	bl	8007f44 <__lshift>
 8007646:	4631      	mov	r1, r6
 8007648:	ee08 0a10 	vmov	s16, r0
 800764c:	f000 fcea 	bl	8008024 <__mcmp>
 8007650:	2800      	cmp	r0, #0
 8007652:	dc91      	bgt.n	8007578 <_dtoa_r+0xaa8>
 8007654:	d102      	bne.n	800765c <_dtoa_r+0xb8c>
 8007656:	f01a 0f01 	tst.w	sl, #1
 800765a:	d18d      	bne.n	8007578 <_dtoa_r+0xaa8>
 800765c:	462b      	mov	r3, r5
 800765e:	461d      	mov	r5, r3
 8007660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007664:	2a30      	cmp	r2, #48	; 0x30
 8007666:	d0fa      	beq.n	800765e <_dtoa_r+0xb8e>
 8007668:	e6d7      	b.n	800741a <_dtoa_r+0x94a>
 800766a:	9a01      	ldr	r2, [sp, #4]
 800766c:	429a      	cmp	r2, r3
 800766e:	d184      	bne.n	800757a <_dtoa_r+0xaaa>
 8007670:	9b00      	ldr	r3, [sp, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	2331      	movs	r3, #49	; 0x31
 8007678:	7013      	strb	r3, [r2, #0]
 800767a:	e6ce      	b.n	800741a <_dtoa_r+0x94a>
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <_dtoa_r+0xbd4>)
 800767e:	f7ff ba95 	b.w	8006bac <_dtoa_r+0xdc>
 8007682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007684:	2b00      	cmp	r3, #0
 8007686:	f47f aa6e 	bne.w	8006b66 <_dtoa_r+0x96>
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <_dtoa_r+0xbd8>)
 800768c:	f7ff ba8e 	b.w	8006bac <_dtoa_r+0xdc>
 8007690:	9b02      	ldr	r3, [sp, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	dcae      	bgt.n	80075f4 <_dtoa_r+0xb24>
 8007696:	9b06      	ldr	r3, [sp, #24]
 8007698:	2b02      	cmp	r3, #2
 800769a:	f73f aea8 	bgt.w	80073ee <_dtoa_r+0x91e>
 800769e:	e7a9      	b.n	80075f4 <_dtoa_r+0xb24>
 80076a0:	08008abf 	.word	0x08008abf
 80076a4:	08008a1c 	.word	0x08008a1c
 80076a8:	08008a40 	.word	0x08008a40

080076ac <__sflush_r>:
 80076ac:	898a      	ldrh	r2, [r1, #12]
 80076ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	4605      	mov	r5, r0
 80076b4:	0710      	lsls	r0, r2, #28
 80076b6:	460c      	mov	r4, r1
 80076b8:	d458      	bmi.n	800776c <__sflush_r+0xc0>
 80076ba:	684b      	ldr	r3, [r1, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dc05      	bgt.n	80076cc <__sflush_r+0x20>
 80076c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dc02      	bgt.n	80076cc <__sflush_r+0x20>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	d0f9      	beq.n	80076c6 <__sflush_r+0x1a>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076d8:	682f      	ldr	r7, [r5, #0]
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	d032      	beq.n	8007744 <__sflush_r+0x98>
 80076de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	075a      	lsls	r2, r3, #29
 80076e4:	d505      	bpl.n	80076f2 <__sflush_r+0x46>
 80076e6:	6863      	ldr	r3, [r4, #4]
 80076e8:	1ac0      	subs	r0, r0, r3
 80076ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076ec:	b10b      	cbz	r3, 80076f2 <__sflush_r+0x46>
 80076ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076f0:	1ac0      	subs	r0, r0, r3
 80076f2:	2300      	movs	r3, #0
 80076f4:	4602      	mov	r2, r0
 80076f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f8:	6a21      	ldr	r1, [r4, #32]
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b0      	blx	r6
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	d106      	bne.n	8007712 <__sflush_r+0x66>
 8007704:	6829      	ldr	r1, [r5, #0]
 8007706:	291d      	cmp	r1, #29
 8007708:	d82c      	bhi.n	8007764 <__sflush_r+0xb8>
 800770a:	4a2a      	ldr	r2, [pc, #168]	; (80077b4 <__sflush_r+0x108>)
 800770c:	40ca      	lsrs	r2, r1
 800770e:	07d6      	lsls	r6, r2, #31
 8007710:	d528      	bpl.n	8007764 <__sflush_r+0xb8>
 8007712:	2200      	movs	r2, #0
 8007714:	6062      	str	r2, [r4, #4]
 8007716:	04d9      	lsls	r1, r3, #19
 8007718:	6922      	ldr	r2, [r4, #16]
 800771a:	6022      	str	r2, [r4, #0]
 800771c:	d504      	bpl.n	8007728 <__sflush_r+0x7c>
 800771e:	1c42      	adds	r2, r0, #1
 8007720:	d101      	bne.n	8007726 <__sflush_r+0x7a>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	b903      	cbnz	r3, 8007728 <__sflush_r+0x7c>
 8007726:	6560      	str	r0, [r4, #84]	; 0x54
 8007728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800772a:	602f      	str	r7, [r5, #0]
 800772c:	2900      	cmp	r1, #0
 800772e:	d0ca      	beq.n	80076c6 <__sflush_r+0x1a>
 8007730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007734:	4299      	cmp	r1, r3
 8007736:	d002      	beq.n	800773e <__sflush_r+0x92>
 8007738:	4628      	mov	r0, r5
 800773a:	f000 fd8b 	bl	8008254 <_free_r>
 800773e:	2000      	movs	r0, #0
 8007740:	6360      	str	r0, [r4, #52]	; 0x34
 8007742:	e7c1      	b.n	80076c8 <__sflush_r+0x1c>
 8007744:	6a21      	ldr	r1, [r4, #32]
 8007746:	2301      	movs	r3, #1
 8007748:	4628      	mov	r0, r5
 800774a:	47b0      	blx	r6
 800774c:	1c41      	adds	r1, r0, #1
 800774e:	d1c7      	bne.n	80076e0 <__sflush_r+0x34>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0c4      	beq.n	80076e0 <__sflush_r+0x34>
 8007756:	2b1d      	cmp	r3, #29
 8007758:	d001      	beq.n	800775e <__sflush_r+0xb2>
 800775a:	2b16      	cmp	r3, #22
 800775c:	d101      	bne.n	8007762 <__sflush_r+0xb6>
 800775e:	602f      	str	r7, [r5, #0]
 8007760:	e7b1      	b.n	80076c6 <__sflush_r+0x1a>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	e7ad      	b.n	80076c8 <__sflush_r+0x1c>
 800776c:	690f      	ldr	r7, [r1, #16]
 800776e:	2f00      	cmp	r7, #0
 8007770:	d0a9      	beq.n	80076c6 <__sflush_r+0x1a>
 8007772:	0793      	lsls	r3, r2, #30
 8007774:	680e      	ldr	r6, [r1, #0]
 8007776:	bf08      	it	eq
 8007778:	694b      	ldreq	r3, [r1, #20]
 800777a:	600f      	str	r7, [r1, #0]
 800777c:	bf18      	it	ne
 800777e:	2300      	movne	r3, #0
 8007780:	eba6 0807 	sub.w	r8, r6, r7
 8007784:	608b      	str	r3, [r1, #8]
 8007786:	f1b8 0f00 	cmp.w	r8, #0
 800778a:	dd9c      	ble.n	80076c6 <__sflush_r+0x1a>
 800778c:	6a21      	ldr	r1, [r4, #32]
 800778e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007790:	4643      	mov	r3, r8
 8007792:	463a      	mov	r2, r7
 8007794:	4628      	mov	r0, r5
 8007796:	47b0      	blx	r6
 8007798:	2800      	cmp	r0, #0
 800779a:	dc06      	bgt.n	80077aa <__sflush_r+0xfe>
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	e78e      	b.n	80076c8 <__sflush_r+0x1c>
 80077aa:	4407      	add	r7, r0
 80077ac:	eba8 0800 	sub.w	r8, r8, r0
 80077b0:	e7e9      	b.n	8007786 <__sflush_r+0xda>
 80077b2:	bf00      	nop
 80077b4:	20400001 	.word	0x20400001

080077b8 <_fflush_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	690b      	ldr	r3, [r1, #16]
 80077bc:	4605      	mov	r5, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	b913      	cbnz	r3, 80077c8 <_fflush_r+0x10>
 80077c2:	2500      	movs	r5, #0
 80077c4:	4628      	mov	r0, r5
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	b118      	cbz	r0, 80077d2 <_fflush_r+0x1a>
 80077ca:	6983      	ldr	r3, [r0, #24]
 80077cc:	b90b      	cbnz	r3, 80077d2 <_fflush_r+0x1a>
 80077ce:	f000 f887 	bl	80078e0 <__sinit>
 80077d2:	4b14      	ldr	r3, [pc, #80]	; (8007824 <_fflush_r+0x6c>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	d11b      	bne.n	8007810 <_fflush_r+0x58>
 80077d8:	686c      	ldr	r4, [r5, #4]
 80077da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0ef      	beq.n	80077c2 <_fflush_r+0xa>
 80077e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077e4:	07d0      	lsls	r0, r2, #31
 80077e6:	d404      	bmi.n	80077f2 <_fflush_r+0x3a>
 80077e8:	0599      	lsls	r1, r3, #22
 80077ea:	d402      	bmi.n	80077f2 <_fflush_r+0x3a>
 80077ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ee:	f000 f91a 	bl	8007a26 <__retarget_lock_acquire_recursive>
 80077f2:	4628      	mov	r0, r5
 80077f4:	4621      	mov	r1, r4
 80077f6:	f7ff ff59 	bl	80076ac <__sflush_r>
 80077fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077fc:	07da      	lsls	r2, r3, #31
 80077fe:	4605      	mov	r5, r0
 8007800:	d4e0      	bmi.n	80077c4 <_fflush_r+0xc>
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	059b      	lsls	r3, r3, #22
 8007806:	d4dd      	bmi.n	80077c4 <_fflush_r+0xc>
 8007808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780a:	f000 f90d 	bl	8007a28 <__retarget_lock_release_recursive>
 800780e:	e7d9      	b.n	80077c4 <_fflush_r+0xc>
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <_fflush_r+0x70>)
 8007812:	429c      	cmp	r4, r3
 8007814:	d101      	bne.n	800781a <_fflush_r+0x62>
 8007816:	68ac      	ldr	r4, [r5, #8]
 8007818:	e7df      	b.n	80077da <_fflush_r+0x22>
 800781a:	4b04      	ldr	r3, [pc, #16]	; (800782c <_fflush_r+0x74>)
 800781c:	429c      	cmp	r4, r3
 800781e:	bf08      	it	eq
 8007820:	68ec      	ldreq	r4, [r5, #12]
 8007822:	e7da      	b.n	80077da <_fflush_r+0x22>
 8007824:	08008af0 	.word	0x08008af0
 8007828:	08008b10 	.word	0x08008b10
 800782c:	08008ad0 	.word	0x08008ad0

08007830 <std>:
 8007830:	2300      	movs	r3, #0
 8007832:	b510      	push	{r4, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	e9c0 3300 	strd	r3, r3, [r0]
 800783a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800783e:	6083      	str	r3, [r0, #8]
 8007840:	8181      	strh	r1, [r0, #12]
 8007842:	6643      	str	r3, [r0, #100]	; 0x64
 8007844:	81c2      	strh	r2, [r0, #14]
 8007846:	6183      	str	r3, [r0, #24]
 8007848:	4619      	mov	r1, r3
 800784a:	2208      	movs	r2, #8
 800784c:	305c      	adds	r0, #92	; 0x5c
 800784e:	f7fe faf1 	bl	8005e34 <memset>
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <std+0x38>)
 8007854:	6263      	str	r3, [r4, #36]	; 0x24
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <std+0x3c>)
 8007858:	62a3      	str	r3, [r4, #40]	; 0x28
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <std+0x40>)
 800785c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800785e:	4b05      	ldr	r3, [pc, #20]	; (8007874 <std+0x44>)
 8007860:	6224      	str	r4, [r4, #32]
 8007862:	6323      	str	r3, [r4, #48]	; 0x30
 8007864:	bd10      	pop	{r4, pc}
 8007866:	bf00      	nop
 8007868:	080086e9 	.word	0x080086e9
 800786c:	0800870b 	.word	0x0800870b
 8007870:	08008743 	.word	0x08008743
 8007874:	08008767 	.word	0x08008767

08007878 <_cleanup_r>:
 8007878:	4901      	ldr	r1, [pc, #4]	; (8007880 <_cleanup_r+0x8>)
 800787a:	f000 b8af 	b.w	80079dc <_fwalk_reent>
 800787e:	bf00      	nop
 8007880:	080077b9 	.word	0x080077b9

08007884 <__sfmoreglue>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	2268      	movs	r2, #104	; 0x68
 8007888:	1e4d      	subs	r5, r1, #1
 800788a:	4355      	muls	r5, r2
 800788c:	460e      	mov	r6, r1
 800788e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007892:	f000 fd4b 	bl	800832c <_malloc_r>
 8007896:	4604      	mov	r4, r0
 8007898:	b140      	cbz	r0, 80078ac <__sfmoreglue+0x28>
 800789a:	2100      	movs	r1, #0
 800789c:	e9c0 1600 	strd	r1, r6, [r0]
 80078a0:	300c      	adds	r0, #12
 80078a2:	60a0      	str	r0, [r4, #8]
 80078a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078a8:	f7fe fac4 	bl	8005e34 <memset>
 80078ac:	4620      	mov	r0, r4
 80078ae:	bd70      	pop	{r4, r5, r6, pc}

080078b0 <__sfp_lock_acquire>:
 80078b0:	4801      	ldr	r0, [pc, #4]	; (80078b8 <__sfp_lock_acquire+0x8>)
 80078b2:	f000 b8b8 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 80078b6:	bf00      	nop
 80078b8:	20000485 	.word	0x20000485

080078bc <__sfp_lock_release>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__sfp_lock_release+0x8>)
 80078be:	f000 b8b3 	b.w	8007a28 <__retarget_lock_release_recursive>
 80078c2:	bf00      	nop
 80078c4:	20000485 	.word	0x20000485

080078c8 <__sinit_lock_acquire>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__sinit_lock_acquire+0x8>)
 80078ca:	f000 b8ac 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 80078ce:	bf00      	nop
 80078d0:	20000486 	.word	0x20000486

080078d4 <__sinit_lock_release>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__sinit_lock_release+0x8>)
 80078d6:	f000 b8a7 	b.w	8007a28 <__retarget_lock_release_recursive>
 80078da:	bf00      	nop
 80078dc:	20000486 	.word	0x20000486

080078e0 <__sinit>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	4604      	mov	r4, r0
 80078e4:	f7ff fff0 	bl	80078c8 <__sinit_lock_acquire>
 80078e8:	69a3      	ldr	r3, [r4, #24]
 80078ea:	b11b      	cbz	r3, 80078f4 <__sinit+0x14>
 80078ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f0:	f7ff bff0 	b.w	80078d4 <__sinit_lock_release>
 80078f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078f8:	6523      	str	r3, [r4, #80]	; 0x50
 80078fa:	4b13      	ldr	r3, [pc, #76]	; (8007948 <__sinit+0x68>)
 80078fc:	4a13      	ldr	r2, [pc, #76]	; (800794c <__sinit+0x6c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	62a2      	str	r2, [r4, #40]	; 0x28
 8007902:	42a3      	cmp	r3, r4
 8007904:	bf04      	itt	eq
 8007906:	2301      	moveq	r3, #1
 8007908:	61a3      	streq	r3, [r4, #24]
 800790a:	4620      	mov	r0, r4
 800790c:	f000 f820 	bl	8007950 <__sfp>
 8007910:	6060      	str	r0, [r4, #4]
 8007912:	4620      	mov	r0, r4
 8007914:	f000 f81c 	bl	8007950 <__sfp>
 8007918:	60a0      	str	r0, [r4, #8]
 800791a:	4620      	mov	r0, r4
 800791c:	f000 f818 	bl	8007950 <__sfp>
 8007920:	2200      	movs	r2, #0
 8007922:	60e0      	str	r0, [r4, #12]
 8007924:	2104      	movs	r1, #4
 8007926:	6860      	ldr	r0, [r4, #4]
 8007928:	f7ff ff82 	bl	8007830 <std>
 800792c:	68a0      	ldr	r0, [r4, #8]
 800792e:	2201      	movs	r2, #1
 8007930:	2109      	movs	r1, #9
 8007932:	f7ff ff7d 	bl	8007830 <std>
 8007936:	68e0      	ldr	r0, [r4, #12]
 8007938:	2202      	movs	r2, #2
 800793a:	2112      	movs	r1, #18
 800793c:	f7ff ff78 	bl	8007830 <std>
 8007940:	2301      	movs	r3, #1
 8007942:	61a3      	str	r3, [r4, #24]
 8007944:	e7d2      	b.n	80078ec <__sinit+0xc>
 8007946:	bf00      	nop
 8007948:	08008a08 	.word	0x08008a08
 800794c:	08007879 	.word	0x08007879

08007950 <__sfp>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	4607      	mov	r7, r0
 8007954:	f7ff ffac 	bl	80078b0 <__sfp_lock_acquire>
 8007958:	4b1e      	ldr	r3, [pc, #120]	; (80079d4 <__sfp+0x84>)
 800795a:	681e      	ldr	r6, [r3, #0]
 800795c:	69b3      	ldr	r3, [r6, #24]
 800795e:	b913      	cbnz	r3, 8007966 <__sfp+0x16>
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff ffbd 	bl	80078e0 <__sinit>
 8007966:	3648      	adds	r6, #72	; 0x48
 8007968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800796c:	3b01      	subs	r3, #1
 800796e:	d503      	bpl.n	8007978 <__sfp+0x28>
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	b30b      	cbz	r3, 80079b8 <__sfp+0x68>
 8007974:	6836      	ldr	r6, [r6, #0]
 8007976:	e7f7      	b.n	8007968 <__sfp+0x18>
 8007978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800797c:	b9d5      	cbnz	r5, 80079b4 <__sfp+0x64>
 800797e:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <__sfp+0x88>)
 8007980:	60e3      	str	r3, [r4, #12]
 8007982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007986:	6665      	str	r5, [r4, #100]	; 0x64
 8007988:	f000 f84c 	bl	8007a24 <__retarget_lock_init_recursive>
 800798c:	f7ff ff96 	bl	80078bc <__sfp_lock_release>
 8007990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007998:	6025      	str	r5, [r4, #0]
 800799a:	61a5      	str	r5, [r4, #24]
 800799c:	2208      	movs	r2, #8
 800799e:	4629      	mov	r1, r5
 80079a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079a4:	f7fe fa46 	bl	8005e34 <memset>
 80079a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079b0:	4620      	mov	r0, r4
 80079b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b4:	3468      	adds	r4, #104	; 0x68
 80079b6:	e7d9      	b.n	800796c <__sfp+0x1c>
 80079b8:	2104      	movs	r1, #4
 80079ba:	4638      	mov	r0, r7
 80079bc:	f7ff ff62 	bl	8007884 <__sfmoreglue>
 80079c0:	4604      	mov	r4, r0
 80079c2:	6030      	str	r0, [r6, #0]
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d1d5      	bne.n	8007974 <__sfp+0x24>
 80079c8:	f7ff ff78 	bl	80078bc <__sfp_lock_release>
 80079cc:	230c      	movs	r3, #12
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	e7ee      	b.n	80079b0 <__sfp+0x60>
 80079d2:	bf00      	nop
 80079d4:	08008a08 	.word	0x08008a08
 80079d8:	ffff0001 	.word	0xffff0001

080079dc <_fwalk_reent>:
 80079dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e0:	4606      	mov	r6, r0
 80079e2:	4688      	mov	r8, r1
 80079e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079e8:	2700      	movs	r7, #0
 80079ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079ee:	f1b9 0901 	subs.w	r9, r9, #1
 80079f2:	d505      	bpl.n	8007a00 <_fwalk_reent+0x24>
 80079f4:	6824      	ldr	r4, [r4, #0]
 80079f6:	2c00      	cmp	r4, #0
 80079f8:	d1f7      	bne.n	80079ea <_fwalk_reent+0xe>
 80079fa:	4638      	mov	r0, r7
 80079fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a00:	89ab      	ldrh	r3, [r5, #12]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d907      	bls.n	8007a16 <_fwalk_reent+0x3a>
 8007a06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	d003      	beq.n	8007a16 <_fwalk_reent+0x3a>
 8007a0e:	4629      	mov	r1, r5
 8007a10:	4630      	mov	r0, r6
 8007a12:	47c0      	blx	r8
 8007a14:	4307      	orrs	r7, r0
 8007a16:	3568      	adds	r5, #104	; 0x68
 8007a18:	e7e9      	b.n	80079ee <_fwalk_reent+0x12>
	...

08007a1c <_localeconv_r>:
 8007a1c:	4800      	ldr	r0, [pc, #0]	; (8007a20 <_localeconv_r+0x4>)
 8007a1e:	4770      	bx	lr
 8007a20:	20000160 	.word	0x20000160

08007a24 <__retarget_lock_init_recursive>:
 8007a24:	4770      	bx	lr

08007a26 <__retarget_lock_acquire_recursive>:
 8007a26:	4770      	bx	lr

08007a28 <__retarget_lock_release_recursive>:
 8007a28:	4770      	bx	lr

08007a2a <__swhatbuf_r>:
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	460e      	mov	r6, r1
 8007a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a32:	2900      	cmp	r1, #0
 8007a34:	b096      	sub	sp, #88	; 0x58
 8007a36:	4614      	mov	r4, r2
 8007a38:	461d      	mov	r5, r3
 8007a3a:	da08      	bge.n	8007a4e <__swhatbuf_r+0x24>
 8007a3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	602a      	str	r2, [r5, #0]
 8007a44:	061a      	lsls	r2, r3, #24
 8007a46:	d410      	bmi.n	8007a6a <__swhatbuf_r+0x40>
 8007a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a4c:	e00e      	b.n	8007a6c <__swhatbuf_r+0x42>
 8007a4e:	466a      	mov	r2, sp
 8007a50:	f000 fee0 	bl	8008814 <_fstat_r>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	dbf1      	blt.n	8007a3c <__swhatbuf_r+0x12>
 8007a58:	9a01      	ldr	r2, [sp, #4]
 8007a5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a62:	425a      	negs	r2, r3
 8007a64:	415a      	adcs	r2, r3
 8007a66:	602a      	str	r2, [r5, #0]
 8007a68:	e7ee      	b.n	8007a48 <__swhatbuf_r+0x1e>
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	b016      	add	sp, #88	; 0x58
 8007a72:	bd70      	pop	{r4, r5, r6, pc}

08007a74 <__smakebuf_r>:
 8007a74:	898b      	ldrh	r3, [r1, #12]
 8007a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a78:	079d      	lsls	r5, r3, #30
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	d507      	bpl.n	8007a90 <__smakebuf_r+0x1c>
 8007a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6163      	str	r3, [r4, #20]
 8007a8c:	b002      	add	sp, #8
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	ab01      	add	r3, sp, #4
 8007a92:	466a      	mov	r2, sp
 8007a94:	f7ff ffc9 	bl	8007a2a <__swhatbuf_r>
 8007a98:	9900      	ldr	r1, [sp, #0]
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 fc45 	bl	800832c <_malloc_r>
 8007aa2:	b948      	cbnz	r0, 8007ab8 <__smakebuf_r+0x44>
 8007aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa8:	059a      	lsls	r2, r3, #22
 8007aaa:	d4ef      	bmi.n	8007a8c <__smakebuf_r+0x18>
 8007aac:	f023 0303 	bic.w	r3, r3, #3
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	e7e3      	b.n	8007a80 <__smakebuf_r+0xc>
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <__smakebuf_r+0x7c>)
 8007aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	6020      	str	r0, [r4, #0]
 8007ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	9b00      	ldr	r3, [sp, #0]
 8007ac8:	6163      	str	r3, [r4, #20]
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	6120      	str	r0, [r4, #16]
 8007ace:	b15b      	cbz	r3, 8007ae8 <__smakebuf_r+0x74>
 8007ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 feaf 	bl	8008838 <_isatty_r>
 8007ada:	b128      	cbz	r0, 8007ae8 <__smakebuf_r+0x74>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	89a0      	ldrh	r0, [r4, #12]
 8007aea:	4305      	orrs	r5, r0
 8007aec:	81a5      	strh	r5, [r4, #12]
 8007aee:	e7cd      	b.n	8007a8c <__smakebuf_r+0x18>
 8007af0:	08007879 	.word	0x08007879

08007af4 <malloc>:
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <malloc+0xc>)
 8007af6:	4601      	mov	r1, r0
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	f000 bc17 	b.w	800832c <_malloc_r>
 8007afe:	bf00      	nop
 8007b00:	2000000c 	.word	0x2000000c

08007b04 <memcpy>:
 8007b04:	440a      	add	r2, r1
 8007b06:	4291      	cmp	r1, r2
 8007b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b0c:	d100      	bne.n	8007b10 <memcpy+0xc>
 8007b0e:	4770      	bx	lr
 8007b10:	b510      	push	{r4, lr}
 8007b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	d1f9      	bne.n	8007b12 <memcpy+0xe>
 8007b1e:	bd10      	pop	{r4, pc}

08007b20 <_Balloc>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b24:	4604      	mov	r4, r0
 8007b26:	460d      	mov	r5, r1
 8007b28:	b976      	cbnz	r6, 8007b48 <_Balloc+0x28>
 8007b2a:	2010      	movs	r0, #16
 8007b2c:	f7ff ffe2 	bl	8007af4 <malloc>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6260      	str	r0, [r4, #36]	; 0x24
 8007b34:	b920      	cbnz	r0, 8007b40 <_Balloc+0x20>
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <_Balloc+0x78>)
 8007b38:	4818      	ldr	r0, [pc, #96]	; (8007b9c <_Balloc+0x7c>)
 8007b3a:	2166      	movs	r1, #102	; 0x66
 8007b3c:	f000 fe2a 	bl	8008794 <__assert_func>
 8007b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b44:	6006      	str	r6, [r0, #0]
 8007b46:	60c6      	str	r6, [r0, #12]
 8007b48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b4a:	68f3      	ldr	r3, [r6, #12]
 8007b4c:	b183      	cbz	r3, 8007b70 <_Balloc+0x50>
 8007b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b56:	b9b8      	cbnz	r0, 8007b88 <_Balloc+0x68>
 8007b58:	2101      	movs	r1, #1
 8007b5a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b5e:	1d72      	adds	r2, r6, #5
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fb60 	bl	8008228 <_calloc_r>
 8007b68:	b160      	cbz	r0, 8007b84 <_Balloc+0x64>
 8007b6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b6e:	e00e      	b.n	8007b8e <_Balloc+0x6e>
 8007b70:	2221      	movs	r2, #33	; 0x21
 8007b72:	2104      	movs	r1, #4
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fb57 	bl	8008228 <_calloc_r>
 8007b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7c:	60f0      	str	r0, [r6, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e4      	bne.n	8007b4e <_Balloc+0x2e>
 8007b84:	2000      	movs	r0, #0
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	6802      	ldr	r2, [r0, #0]
 8007b8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b94:	e7f7      	b.n	8007b86 <_Balloc+0x66>
 8007b96:	bf00      	nop
 8007b98:	08008a4d 	.word	0x08008a4d
 8007b9c:	08008b30 	.word	0x08008b30

08007ba0 <_Bfree>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	b976      	cbnz	r6, 8007bc8 <_Bfree+0x28>
 8007baa:	2010      	movs	r0, #16
 8007bac:	f7ff ffa2 	bl	8007af4 <malloc>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6268      	str	r0, [r5, #36]	; 0x24
 8007bb4:	b920      	cbnz	r0, 8007bc0 <_Bfree+0x20>
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <_Bfree+0x3c>)
 8007bb8:	4809      	ldr	r0, [pc, #36]	; (8007be0 <_Bfree+0x40>)
 8007bba:	218a      	movs	r1, #138	; 0x8a
 8007bbc:	f000 fdea 	bl	8008794 <__assert_func>
 8007bc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bc4:	6006      	str	r6, [r0, #0]
 8007bc6:	60c6      	str	r6, [r0, #12]
 8007bc8:	b13c      	cbz	r4, 8007bda <_Bfree+0x3a>
 8007bca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bcc:	6862      	ldr	r2, [r4, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bd4:	6021      	str	r1, [r4, #0]
 8007bd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	08008a4d 	.word	0x08008a4d
 8007be0:	08008b30 	.word	0x08008b30

08007be4 <__multadd>:
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	690d      	ldr	r5, [r1, #16]
 8007bea:	4607      	mov	r7, r0
 8007bec:	460c      	mov	r4, r1
 8007bee:	461e      	mov	r6, r3
 8007bf0:	f101 0c14 	add.w	ip, r1, #20
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8007bfa:	b299      	uxth	r1, r3
 8007bfc:	fb02 6101 	mla	r1, r2, r1, r6
 8007c00:	0c1e      	lsrs	r6, r3, #16
 8007c02:	0c0b      	lsrs	r3, r1, #16
 8007c04:	fb02 3306 	mla	r3, r2, r6, r3
 8007c08:	b289      	uxth	r1, r1
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c10:	4285      	cmp	r5, r0
 8007c12:	f84c 1b04 	str.w	r1, [ip], #4
 8007c16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c1a:	dcec      	bgt.n	8007bf6 <__multadd+0x12>
 8007c1c:	b30e      	cbz	r6, 8007c62 <__multadd+0x7e>
 8007c1e:	68a3      	ldr	r3, [r4, #8]
 8007c20:	42ab      	cmp	r3, r5
 8007c22:	dc19      	bgt.n	8007c58 <__multadd+0x74>
 8007c24:	6861      	ldr	r1, [r4, #4]
 8007c26:	4638      	mov	r0, r7
 8007c28:	3101      	adds	r1, #1
 8007c2a:	f7ff ff79 	bl	8007b20 <_Balloc>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	b928      	cbnz	r0, 8007c3e <__multadd+0x5a>
 8007c32:	4602      	mov	r2, r0
 8007c34:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <__multadd+0x84>)
 8007c36:	480d      	ldr	r0, [pc, #52]	; (8007c6c <__multadd+0x88>)
 8007c38:	21b5      	movs	r1, #181	; 0xb5
 8007c3a:	f000 fdab 	bl	8008794 <__assert_func>
 8007c3e:	6922      	ldr	r2, [r4, #16]
 8007c40:	3202      	adds	r2, #2
 8007c42:	f104 010c 	add.w	r1, r4, #12
 8007c46:	0092      	lsls	r2, r2, #2
 8007c48:	300c      	adds	r0, #12
 8007c4a:	f7ff ff5b 	bl	8007b04 <memcpy>
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4638      	mov	r0, r7
 8007c52:	f7ff ffa5 	bl	8007ba0 <_Bfree>
 8007c56:	4644      	mov	r4, r8
 8007c58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c5c:	3501      	adds	r5, #1
 8007c5e:	615e      	str	r6, [r3, #20]
 8007c60:	6125      	str	r5, [r4, #16]
 8007c62:	4620      	mov	r0, r4
 8007c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c68:	08008abf 	.word	0x08008abf
 8007c6c:	08008b30 	.word	0x08008b30

08007c70 <__hi0bits>:
 8007c70:	0c03      	lsrs	r3, r0, #16
 8007c72:	041b      	lsls	r3, r3, #16
 8007c74:	b9d3      	cbnz	r3, 8007cac <__hi0bits+0x3c>
 8007c76:	0400      	lsls	r0, r0, #16
 8007c78:	2310      	movs	r3, #16
 8007c7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c7e:	bf04      	itt	eq
 8007c80:	0200      	lsleq	r0, r0, #8
 8007c82:	3308      	addeq	r3, #8
 8007c84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c88:	bf04      	itt	eq
 8007c8a:	0100      	lsleq	r0, r0, #4
 8007c8c:	3304      	addeq	r3, #4
 8007c8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c92:	bf04      	itt	eq
 8007c94:	0080      	lsleq	r0, r0, #2
 8007c96:	3302      	addeq	r3, #2
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	db05      	blt.n	8007ca8 <__hi0bits+0x38>
 8007c9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ca0:	f103 0301 	add.w	r3, r3, #1
 8007ca4:	bf08      	it	eq
 8007ca6:	2320      	moveq	r3, #32
 8007ca8:	4618      	mov	r0, r3
 8007caa:	4770      	bx	lr
 8007cac:	2300      	movs	r3, #0
 8007cae:	e7e4      	b.n	8007c7a <__hi0bits+0xa>

08007cb0 <__lo0bits>:
 8007cb0:	6803      	ldr	r3, [r0, #0]
 8007cb2:	f013 0207 	ands.w	r2, r3, #7
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	d00b      	beq.n	8007cd2 <__lo0bits+0x22>
 8007cba:	07da      	lsls	r2, r3, #31
 8007cbc:	d423      	bmi.n	8007d06 <__lo0bits+0x56>
 8007cbe:	0798      	lsls	r0, r3, #30
 8007cc0:	bf49      	itett	mi
 8007cc2:	085b      	lsrmi	r3, r3, #1
 8007cc4:	089b      	lsrpl	r3, r3, #2
 8007cc6:	2001      	movmi	r0, #1
 8007cc8:	600b      	strmi	r3, [r1, #0]
 8007cca:	bf5c      	itt	pl
 8007ccc:	600b      	strpl	r3, [r1, #0]
 8007cce:	2002      	movpl	r0, #2
 8007cd0:	4770      	bx	lr
 8007cd2:	b298      	uxth	r0, r3
 8007cd4:	b9a8      	cbnz	r0, 8007d02 <__lo0bits+0x52>
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	2010      	movs	r0, #16
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	b90a      	cbnz	r2, 8007ce2 <__lo0bits+0x32>
 8007cde:	3008      	adds	r0, #8
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	071a      	lsls	r2, r3, #28
 8007ce4:	bf04      	itt	eq
 8007ce6:	091b      	lsreq	r3, r3, #4
 8007ce8:	3004      	addeq	r0, #4
 8007cea:	079a      	lsls	r2, r3, #30
 8007cec:	bf04      	itt	eq
 8007cee:	089b      	lsreq	r3, r3, #2
 8007cf0:	3002      	addeq	r0, #2
 8007cf2:	07da      	lsls	r2, r3, #31
 8007cf4:	d403      	bmi.n	8007cfe <__lo0bits+0x4e>
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	f100 0001 	add.w	r0, r0, #1
 8007cfc:	d005      	beq.n	8007d0a <__lo0bits+0x5a>
 8007cfe:	600b      	str	r3, [r1, #0]
 8007d00:	4770      	bx	lr
 8007d02:	4610      	mov	r0, r2
 8007d04:	e7e9      	b.n	8007cda <__lo0bits+0x2a>
 8007d06:	2000      	movs	r0, #0
 8007d08:	4770      	bx	lr
 8007d0a:	2020      	movs	r0, #32
 8007d0c:	4770      	bx	lr
	...

08007d10 <__i2b>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	2101      	movs	r1, #1
 8007d16:	f7ff ff03 	bl	8007b20 <_Balloc>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	b928      	cbnz	r0, 8007d2a <__i2b+0x1a>
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <__i2b+0x24>)
 8007d20:	4805      	ldr	r0, [pc, #20]	; (8007d38 <__i2b+0x28>)
 8007d22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d26:	f000 fd35 	bl	8008794 <__assert_func>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	6144      	str	r4, [r0, #20]
 8007d2e:	6103      	str	r3, [r0, #16]
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	08008abf 	.word	0x08008abf
 8007d38:	08008b30 	.word	0x08008b30

08007d3c <__multiply>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	4691      	mov	r9, r2
 8007d42:	690a      	ldr	r2, [r1, #16]
 8007d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	bfb8      	it	lt
 8007d4c:	460b      	movlt	r3, r1
 8007d4e:	460c      	mov	r4, r1
 8007d50:	bfbc      	itt	lt
 8007d52:	464c      	movlt	r4, r9
 8007d54:	4699      	movlt	r9, r3
 8007d56:	6927      	ldr	r7, [r4, #16]
 8007d58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d5c:	68a3      	ldr	r3, [r4, #8]
 8007d5e:	6861      	ldr	r1, [r4, #4]
 8007d60:	eb07 060a 	add.w	r6, r7, sl
 8007d64:	42b3      	cmp	r3, r6
 8007d66:	b085      	sub	sp, #20
 8007d68:	bfb8      	it	lt
 8007d6a:	3101      	addlt	r1, #1
 8007d6c:	f7ff fed8 	bl	8007b20 <_Balloc>
 8007d70:	b930      	cbnz	r0, 8007d80 <__multiply+0x44>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b44      	ldr	r3, [pc, #272]	; (8007e88 <__multiply+0x14c>)
 8007d76:	4845      	ldr	r0, [pc, #276]	; (8007e8c <__multiply+0x150>)
 8007d78:	f240 115d 	movw	r1, #349	; 0x15d
 8007d7c:	f000 fd0a 	bl	8008794 <__assert_func>
 8007d80:	f100 0514 	add.w	r5, r0, #20
 8007d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d88:	462b      	mov	r3, r5
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4543      	cmp	r3, r8
 8007d8e:	d321      	bcc.n	8007dd4 <__multiply+0x98>
 8007d90:	f104 0314 	add.w	r3, r4, #20
 8007d94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d98:	f109 0314 	add.w	r3, r9, #20
 8007d9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007da0:	9202      	str	r2, [sp, #8]
 8007da2:	1b3a      	subs	r2, r7, r4
 8007da4:	3a15      	subs	r2, #21
 8007da6:	f022 0203 	bic.w	r2, r2, #3
 8007daa:	3204      	adds	r2, #4
 8007dac:	f104 0115 	add.w	r1, r4, #21
 8007db0:	428f      	cmp	r7, r1
 8007db2:	bf38      	it	cc
 8007db4:	2204      	movcc	r2, #4
 8007db6:	9201      	str	r2, [sp, #4]
 8007db8:	9a02      	ldr	r2, [sp, #8]
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d80c      	bhi.n	8007dda <__multiply+0x9e>
 8007dc0:	2e00      	cmp	r6, #0
 8007dc2:	dd03      	ble.n	8007dcc <__multiply+0x90>
 8007dc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05a      	beq.n	8007e82 <__multiply+0x146>
 8007dcc:	6106      	str	r6, [r0, #16]
 8007dce:	b005      	add	sp, #20
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	f843 2b04 	str.w	r2, [r3], #4
 8007dd8:	e7d8      	b.n	8007d8c <__multiply+0x50>
 8007dda:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dde:	f1ba 0f00 	cmp.w	sl, #0
 8007de2:	d024      	beq.n	8007e2e <__multiply+0xf2>
 8007de4:	f104 0e14 	add.w	lr, r4, #20
 8007de8:	46a9      	mov	r9, r5
 8007dea:	f04f 0c00 	mov.w	ip, #0
 8007dee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007df2:	f8d9 1000 	ldr.w	r1, [r9]
 8007df6:	fa1f fb82 	uxth.w	fp, r2
 8007dfa:	b289      	uxth	r1, r1
 8007dfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e04:	f8d9 2000 	ldr.w	r2, [r9]
 8007e08:	4461      	add	r1, ip
 8007e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e16:	b289      	uxth	r1, r1
 8007e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e1c:	4577      	cmp	r7, lr
 8007e1e:	f849 1b04 	str.w	r1, [r9], #4
 8007e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e26:	d8e2      	bhi.n	8007dee <__multiply+0xb2>
 8007e28:	9a01      	ldr	r2, [sp, #4]
 8007e2a:	f845 c002 	str.w	ip, [r5, r2]
 8007e2e:	9a03      	ldr	r2, [sp, #12]
 8007e30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e34:	3304      	adds	r3, #4
 8007e36:	f1b9 0f00 	cmp.w	r9, #0
 8007e3a:	d020      	beq.n	8007e7e <__multiply+0x142>
 8007e3c:	6829      	ldr	r1, [r5, #0]
 8007e3e:	f104 0c14 	add.w	ip, r4, #20
 8007e42:	46ae      	mov	lr, r5
 8007e44:	f04f 0a00 	mov.w	sl, #0
 8007e48:	f8bc b000 	ldrh.w	fp, [ip]
 8007e4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e50:	fb09 220b 	mla	r2, r9, fp, r2
 8007e54:	4492      	add	sl, r2
 8007e56:	b289      	uxth	r1, r1
 8007e58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e64:	f8be 1000 	ldrh.w	r1, [lr]
 8007e68:	0c12      	lsrs	r2, r2, #16
 8007e6a:	fb09 1102 	mla	r1, r9, r2, r1
 8007e6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e72:	4567      	cmp	r7, ip
 8007e74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e78:	d8e6      	bhi.n	8007e48 <__multiply+0x10c>
 8007e7a:	9a01      	ldr	r2, [sp, #4]
 8007e7c:	50a9      	str	r1, [r5, r2]
 8007e7e:	3504      	adds	r5, #4
 8007e80:	e79a      	b.n	8007db8 <__multiply+0x7c>
 8007e82:	3e01      	subs	r6, #1
 8007e84:	e79c      	b.n	8007dc0 <__multiply+0x84>
 8007e86:	bf00      	nop
 8007e88:	08008abf 	.word	0x08008abf
 8007e8c:	08008b30 	.word	0x08008b30

08007e90 <__pow5mult>:
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e94:	4615      	mov	r5, r2
 8007e96:	f012 0203 	ands.w	r2, r2, #3
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	d007      	beq.n	8007eb0 <__pow5mult+0x20>
 8007ea0:	4c25      	ldr	r4, [pc, #148]	; (8007f38 <__pow5mult+0xa8>)
 8007ea2:	3a01      	subs	r2, #1
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eaa:	f7ff fe9b 	bl	8007be4 <__multadd>
 8007eae:	4607      	mov	r7, r0
 8007eb0:	10ad      	asrs	r5, r5, #2
 8007eb2:	d03d      	beq.n	8007f30 <__pow5mult+0xa0>
 8007eb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007eb6:	b97c      	cbnz	r4, 8007ed8 <__pow5mult+0x48>
 8007eb8:	2010      	movs	r0, #16
 8007eba:	f7ff fe1b 	bl	8007af4 <malloc>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ec2:	b928      	cbnz	r0, 8007ed0 <__pow5mult+0x40>
 8007ec4:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <__pow5mult+0xac>)
 8007ec6:	481e      	ldr	r0, [pc, #120]	; (8007f40 <__pow5mult+0xb0>)
 8007ec8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ecc:	f000 fc62 	bl	8008794 <__assert_func>
 8007ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ed4:	6004      	str	r4, [r0, #0]
 8007ed6:	60c4      	str	r4, [r0, #12]
 8007ed8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007edc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ee0:	b94c      	cbnz	r4, 8007ef6 <__pow5mult+0x66>
 8007ee2:	f240 2171 	movw	r1, #625	; 0x271
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7ff ff12 	bl	8007d10 <__i2b>
 8007eec:	2300      	movs	r3, #0
 8007eee:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	6003      	str	r3, [r0, #0]
 8007ef6:	f04f 0900 	mov.w	r9, #0
 8007efa:	07eb      	lsls	r3, r5, #31
 8007efc:	d50a      	bpl.n	8007f14 <__pow5mult+0x84>
 8007efe:	4639      	mov	r1, r7
 8007f00:	4622      	mov	r2, r4
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7ff ff1a 	bl	8007d3c <__multiply>
 8007f08:	4639      	mov	r1, r7
 8007f0a:	4680      	mov	r8, r0
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff fe47 	bl	8007ba0 <_Bfree>
 8007f12:	4647      	mov	r7, r8
 8007f14:	106d      	asrs	r5, r5, #1
 8007f16:	d00b      	beq.n	8007f30 <__pow5mult+0xa0>
 8007f18:	6820      	ldr	r0, [r4, #0]
 8007f1a:	b938      	cbnz	r0, 8007f2c <__pow5mult+0x9c>
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff ff0b 	bl	8007d3c <__multiply>
 8007f26:	6020      	str	r0, [r4, #0]
 8007f28:	f8c0 9000 	str.w	r9, [r0]
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	e7e4      	b.n	8007efa <__pow5mult+0x6a>
 8007f30:	4638      	mov	r0, r7
 8007f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f36:	bf00      	nop
 8007f38:	08008c80 	.word	0x08008c80
 8007f3c:	08008a4d 	.word	0x08008a4d
 8007f40:	08008b30 	.word	0x08008b30

08007f44 <__lshift>:
 8007f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	460c      	mov	r4, r1
 8007f4a:	6849      	ldr	r1, [r1, #4]
 8007f4c:	6923      	ldr	r3, [r4, #16]
 8007f4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	4607      	mov	r7, r0
 8007f56:	4691      	mov	r9, r2
 8007f58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f5c:	f108 0601 	add.w	r6, r8, #1
 8007f60:	42b3      	cmp	r3, r6
 8007f62:	db0b      	blt.n	8007f7c <__lshift+0x38>
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff fddb 	bl	8007b20 <_Balloc>
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b948      	cbnz	r0, 8007f82 <__lshift+0x3e>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4b2a      	ldr	r3, [pc, #168]	; (800801c <__lshift+0xd8>)
 8007f72:	482b      	ldr	r0, [pc, #172]	; (8008020 <__lshift+0xdc>)
 8007f74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f78:	f000 fc0c 	bl	8008794 <__assert_func>
 8007f7c:	3101      	adds	r1, #1
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	e7ee      	b.n	8007f60 <__lshift+0x1c>
 8007f82:	2300      	movs	r3, #0
 8007f84:	f100 0114 	add.w	r1, r0, #20
 8007f88:	f100 0210 	add.w	r2, r0, #16
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	4553      	cmp	r3, sl
 8007f90:	db37      	blt.n	8008002 <__lshift+0xbe>
 8007f92:	6920      	ldr	r0, [r4, #16]
 8007f94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f98:	f104 0314 	add.w	r3, r4, #20
 8007f9c:	f019 091f 	ands.w	r9, r9, #31
 8007fa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fa8:	d02f      	beq.n	800800a <__lshift+0xc6>
 8007faa:	f1c9 0e20 	rsb	lr, r9, #32
 8007fae:	468a      	mov	sl, r1
 8007fb0:	f04f 0c00 	mov.w	ip, #0
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	fa02 f209 	lsl.w	r2, r2, r9
 8007fba:	ea42 020c 	orr.w	r2, r2, ip
 8007fbe:	f84a 2b04 	str.w	r2, [sl], #4
 8007fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fcc:	d8f2      	bhi.n	8007fb4 <__lshift+0x70>
 8007fce:	1b03      	subs	r3, r0, r4
 8007fd0:	3b15      	subs	r3, #21
 8007fd2:	f023 0303 	bic.w	r3, r3, #3
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	f104 0215 	add.w	r2, r4, #21
 8007fdc:	4290      	cmp	r0, r2
 8007fde:	bf38      	it	cc
 8007fe0:	2304      	movcc	r3, #4
 8007fe2:	f841 c003 	str.w	ip, [r1, r3]
 8007fe6:	f1bc 0f00 	cmp.w	ip, #0
 8007fea:	d001      	beq.n	8007ff0 <__lshift+0xac>
 8007fec:	f108 0602 	add.w	r6, r8, #2
 8007ff0:	3e01      	subs	r6, #1
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	612e      	str	r6, [r5, #16]
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f7ff fdd2 	bl	8007ba0 <_Bfree>
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008002:	f842 0f04 	str.w	r0, [r2, #4]!
 8008006:	3301      	adds	r3, #1
 8008008:	e7c1      	b.n	8007f8e <__lshift+0x4a>
 800800a:	3904      	subs	r1, #4
 800800c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008010:	f841 2f04 	str.w	r2, [r1, #4]!
 8008014:	4298      	cmp	r0, r3
 8008016:	d8f9      	bhi.n	800800c <__lshift+0xc8>
 8008018:	e7ea      	b.n	8007ff0 <__lshift+0xac>
 800801a:	bf00      	nop
 800801c:	08008abf 	.word	0x08008abf
 8008020:	08008b30 	.word	0x08008b30

08008024 <__mcmp>:
 8008024:	b530      	push	{r4, r5, lr}
 8008026:	6902      	ldr	r2, [r0, #16]
 8008028:	690c      	ldr	r4, [r1, #16]
 800802a:	1b12      	subs	r2, r2, r4
 800802c:	d10e      	bne.n	800804c <__mcmp+0x28>
 800802e:	f100 0314 	add.w	r3, r0, #20
 8008032:	3114      	adds	r1, #20
 8008034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800803c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008044:	42a5      	cmp	r5, r4
 8008046:	d003      	beq.n	8008050 <__mcmp+0x2c>
 8008048:	d305      	bcc.n	8008056 <__mcmp+0x32>
 800804a:	2201      	movs	r2, #1
 800804c:	4610      	mov	r0, r2
 800804e:	bd30      	pop	{r4, r5, pc}
 8008050:	4283      	cmp	r3, r0
 8008052:	d3f3      	bcc.n	800803c <__mcmp+0x18>
 8008054:	e7fa      	b.n	800804c <__mcmp+0x28>
 8008056:	f04f 32ff 	mov.w	r2, #4294967295
 800805a:	e7f7      	b.n	800804c <__mcmp+0x28>

0800805c <__mdiff>:
 800805c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	460c      	mov	r4, r1
 8008062:	4606      	mov	r6, r0
 8008064:	4611      	mov	r1, r2
 8008066:	4620      	mov	r0, r4
 8008068:	4690      	mov	r8, r2
 800806a:	f7ff ffdb 	bl	8008024 <__mcmp>
 800806e:	1e05      	subs	r5, r0, #0
 8008070:	d110      	bne.n	8008094 <__mdiff+0x38>
 8008072:	4629      	mov	r1, r5
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff fd53 	bl	8007b20 <_Balloc>
 800807a:	b930      	cbnz	r0, 800808a <__mdiff+0x2e>
 800807c:	4b3a      	ldr	r3, [pc, #232]	; (8008168 <__mdiff+0x10c>)
 800807e:	4602      	mov	r2, r0
 8008080:	f240 2132 	movw	r1, #562	; 0x232
 8008084:	4839      	ldr	r0, [pc, #228]	; (800816c <__mdiff+0x110>)
 8008086:	f000 fb85 	bl	8008794 <__assert_func>
 800808a:	2301      	movs	r3, #1
 800808c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	bfa4      	itt	ge
 8008096:	4643      	movge	r3, r8
 8008098:	46a0      	movge	r8, r4
 800809a:	4630      	mov	r0, r6
 800809c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080a0:	bfa6      	itte	ge
 80080a2:	461c      	movge	r4, r3
 80080a4:	2500      	movge	r5, #0
 80080a6:	2501      	movlt	r5, #1
 80080a8:	f7ff fd3a 	bl	8007b20 <_Balloc>
 80080ac:	b920      	cbnz	r0, 80080b8 <__mdiff+0x5c>
 80080ae:	4b2e      	ldr	r3, [pc, #184]	; (8008168 <__mdiff+0x10c>)
 80080b0:	4602      	mov	r2, r0
 80080b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080b6:	e7e5      	b.n	8008084 <__mdiff+0x28>
 80080b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080bc:	6926      	ldr	r6, [r4, #16]
 80080be:	60c5      	str	r5, [r0, #12]
 80080c0:	f104 0914 	add.w	r9, r4, #20
 80080c4:	f108 0514 	add.w	r5, r8, #20
 80080c8:	f100 0e14 	add.w	lr, r0, #20
 80080cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080d4:	f108 0210 	add.w	r2, r8, #16
 80080d8:	46f2      	mov	sl, lr
 80080da:	2100      	movs	r1, #0
 80080dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80080e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080e4:	fa1f f883 	uxth.w	r8, r3
 80080e8:	fa11 f18b 	uxtah	r1, r1, fp
 80080ec:	0c1b      	lsrs	r3, r3, #16
 80080ee:	eba1 0808 	sub.w	r8, r1, r8
 80080f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080fa:	fa1f f888 	uxth.w	r8, r8
 80080fe:	1419      	asrs	r1, r3, #16
 8008100:	454e      	cmp	r6, r9
 8008102:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008106:	f84a 3b04 	str.w	r3, [sl], #4
 800810a:	d8e7      	bhi.n	80080dc <__mdiff+0x80>
 800810c:	1b33      	subs	r3, r6, r4
 800810e:	3b15      	subs	r3, #21
 8008110:	f023 0303 	bic.w	r3, r3, #3
 8008114:	3304      	adds	r3, #4
 8008116:	3415      	adds	r4, #21
 8008118:	42a6      	cmp	r6, r4
 800811a:	bf38      	it	cc
 800811c:	2304      	movcc	r3, #4
 800811e:	441d      	add	r5, r3
 8008120:	4473      	add	r3, lr
 8008122:	469e      	mov	lr, r3
 8008124:	462e      	mov	r6, r5
 8008126:	4566      	cmp	r6, ip
 8008128:	d30e      	bcc.n	8008148 <__mdiff+0xec>
 800812a:	f10c 0203 	add.w	r2, ip, #3
 800812e:	1b52      	subs	r2, r2, r5
 8008130:	f022 0203 	bic.w	r2, r2, #3
 8008134:	3d03      	subs	r5, #3
 8008136:	45ac      	cmp	ip, r5
 8008138:	bf38      	it	cc
 800813a:	2200      	movcc	r2, #0
 800813c:	441a      	add	r2, r3
 800813e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008142:	b17b      	cbz	r3, 8008164 <__mdiff+0x108>
 8008144:	6107      	str	r7, [r0, #16]
 8008146:	e7a3      	b.n	8008090 <__mdiff+0x34>
 8008148:	f856 8b04 	ldr.w	r8, [r6], #4
 800814c:	fa11 f288 	uxtah	r2, r1, r8
 8008150:	1414      	asrs	r4, r2, #16
 8008152:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008156:	b292      	uxth	r2, r2
 8008158:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800815c:	f84e 2b04 	str.w	r2, [lr], #4
 8008160:	1421      	asrs	r1, r4, #16
 8008162:	e7e0      	b.n	8008126 <__mdiff+0xca>
 8008164:	3f01      	subs	r7, #1
 8008166:	e7ea      	b.n	800813e <__mdiff+0xe2>
 8008168:	08008abf 	.word	0x08008abf
 800816c:	08008b30 	.word	0x08008b30

08008170 <__d2b>:
 8008170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4689      	mov	r9, r1
 8008176:	2101      	movs	r1, #1
 8008178:	ec57 6b10 	vmov	r6, r7, d0
 800817c:	4690      	mov	r8, r2
 800817e:	f7ff fccf 	bl	8007b20 <_Balloc>
 8008182:	4604      	mov	r4, r0
 8008184:	b930      	cbnz	r0, 8008194 <__d2b+0x24>
 8008186:	4602      	mov	r2, r0
 8008188:	4b25      	ldr	r3, [pc, #148]	; (8008220 <__d2b+0xb0>)
 800818a:	4826      	ldr	r0, [pc, #152]	; (8008224 <__d2b+0xb4>)
 800818c:	f240 310a 	movw	r1, #778	; 0x30a
 8008190:	f000 fb00 	bl	8008794 <__assert_func>
 8008194:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800819c:	bb35      	cbnz	r5, 80081ec <__d2b+0x7c>
 800819e:	2e00      	cmp	r6, #0
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	d028      	beq.n	80081f6 <__d2b+0x86>
 80081a4:	4668      	mov	r0, sp
 80081a6:	9600      	str	r6, [sp, #0]
 80081a8:	f7ff fd82 	bl	8007cb0 <__lo0bits>
 80081ac:	9900      	ldr	r1, [sp, #0]
 80081ae:	b300      	cbz	r0, 80081f2 <__d2b+0x82>
 80081b0:	9a01      	ldr	r2, [sp, #4]
 80081b2:	f1c0 0320 	rsb	r3, r0, #32
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	430b      	orrs	r3, r1
 80081bc:	40c2      	lsrs	r2, r0
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	9201      	str	r2, [sp, #4]
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	61a3      	str	r3, [r4, #24]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bf14      	ite	ne
 80081ca:	2202      	movne	r2, #2
 80081cc:	2201      	moveq	r2, #1
 80081ce:	6122      	str	r2, [r4, #16]
 80081d0:	b1d5      	cbz	r5, 8008208 <__d2b+0x98>
 80081d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081d6:	4405      	add	r5, r0
 80081d8:	f8c9 5000 	str.w	r5, [r9]
 80081dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081e0:	f8c8 0000 	str.w	r0, [r8]
 80081e4:	4620      	mov	r0, r4
 80081e6:	b003      	add	sp, #12
 80081e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081f0:	e7d5      	b.n	800819e <__d2b+0x2e>
 80081f2:	6161      	str	r1, [r4, #20]
 80081f4:	e7e5      	b.n	80081c2 <__d2b+0x52>
 80081f6:	a801      	add	r0, sp, #4
 80081f8:	f7ff fd5a 	bl	8007cb0 <__lo0bits>
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	6163      	str	r3, [r4, #20]
 8008200:	2201      	movs	r2, #1
 8008202:	6122      	str	r2, [r4, #16]
 8008204:	3020      	adds	r0, #32
 8008206:	e7e3      	b.n	80081d0 <__d2b+0x60>
 8008208:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800820c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008210:	f8c9 0000 	str.w	r0, [r9]
 8008214:	6918      	ldr	r0, [r3, #16]
 8008216:	f7ff fd2b 	bl	8007c70 <__hi0bits>
 800821a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800821e:	e7df      	b.n	80081e0 <__d2b+0x70>
 8008220:	08008abf 	.word	0x08008abf
 8008224:	08008b30 	.word	0x08008b30

08008228 <_calloc_r>:
 8008228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800822a:	fba1 2402 	umull	r2, r4, r1, r2
 800822e:	b94c      	cbnz	r4, 8008244 <_calloc_r+0x1c>
 8008230:	4611      	mov	r1, r2
 8008232:	9201      	str	r2, [sp, #4]
 8008234:	f000 f87a 	bl	800832c <_malloc_r>
 8008238:	9a01      	ldr	r2, [sp, #4]
 800823a:	4605      	mov	r5, r0
 800823c:	b930      	cbnz	r0, 800824c <_calloc_r+0x24>
 800823e:	4628      	mov	r0, r5
 8008240:	b003      	add	sp, #12
 8008242:	bd30      	pop	{r4, r5, pc}
 8008244:	220c      	movs	r2, #12
 8008246:	6002      	str	r2, [r0, #0]
 8008248:	2500      	movs	r5, #0
 800824a:	e7f8      	b.n	800823e <_calloc_r+0x16>
 800824c:	4621      	mov	r1, r4
 800824e:	f7fd fdf1 	bl	8005e34 <memset>
 8008252:	e7f4      	b.n	800823e <_calloc_r+0x16>

08008254 <_free_r>:
 8008254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008256:	2900      	cmp	r1, #0
 8008258:	d044      	beq.n	80082e4 <_free_r+0x90>
 800825a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825e:	9001      	str	r0, [sp, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f1a1 0404 	sub.w	r4, r1, #4
 8008266:	bfb8      	it	lt
 8008268:	18e4      	addlt	r4, r4, r3
 800826a:	f000 fb19 	bl	80088a0 <__malloc_lock>
 800826e:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <_free_r+0x94>)
 8008270:	9801      	ldr	r0, [sp, #4]
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	b933      	cbnz	r3, 8008284 <_free_r+0x30>
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	6014      	str	r4, [r2, #0]
 800827a:	b003      	add	sp, #12
 800827c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008280:	f000 bb14 	b.w	80088ac <__malloc_unlock>
 8008284:	42a3      	cmp	r3, r4
 8008286:	d908      	bls.n	800829a <_free_r+0x46>
 8008288:	6825      	ldr	r5, [r4, #0]
 800828a:	1961      	adds	r1, r4, r5
 800828c:	428b      	cmp	r3, r1
 800828e:	bf01      	itttt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	1949      	addeq	r1, r1, r5
 8008296:	6021      	streq	r1, [r4, #0]
 8008298:	e7ed      	b.n	8008276 <_free_r+0x22>
 800829a:	461a      	mov	r2, r3
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	b10b      	cbz	r3, 80082a4 <_free_r+0x50>
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	d9fa      	bls.n	800829a <_free_r+0x46>
 80082a4:	6811      	ldr	r1, [r2, #0]
 80082a6:	1855      	adds	r5, r2, r1
 80082a8:	42a5      	cmp	r5, r4
 80082aa:	d10b      	bne.n	80082c4 <_free_r+0x70>
 80082ac:	6824      	ldr	r4, [r4, #0]
 80082ae:	4421      	add	r1, r4
 80082b0:	1854      	adds	r4, r2, r1
 80082b2:	42a3      	cmp	r3, r4
 80082b4:	6011      	str	r1, [r2, #0]
 80082b6:	d1e0      	bne.n	800827a <_free_r+0x26>
 80082b8:	681c      	ldr	r4, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	6053      	str	r3, [r2, #4]
 80082be:	4421      	add	r1, r4
 80082c0:	6011      	str	r1, [r2, #0]
 80082c2:	e7da      	b.n	800827a <_free_r+0x26>
 80082c4:	d902      	bls.n	80082cc <_free_r+0x78>
 80082c6:	230c      	movs	r3, #12
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	e7d6      	b.n	800827a <_free_r+0x26>
 80082cc:	6825      	ldr	r5, [r4, #0]
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	428b      	cmp	r3, r1
 80082d2:	bf04      	itt	eq
 80082d4:	6819      	ldreq	r1, [r3, #0]
 80082d6:	685b      	ldreq	r3, [r3, #4]
 80082d8:	6063      	str	r3, [r4, #4]
 80082da:	bf04      	itt	eq
 80082dc:	1949      	addeq	r1, r1, r5
 80082de:	6021      	streq	r1, [r4, #0]
 80082e0:	6054      	str	r4, [r2, #4]
 80082e2:	e7ca      	b.n	800827a <_free_r+0x26>
 80082e4:	b003      	add	sp, #12
 80082e6:	bd30      	pop	{r4, r5, pc}
 80082e8:	20000488 	.word	0x20000488

080082ec <sbrk_aligned>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4e0e      	ldr	r6, [pc, #56]	; (8008328 <sbrk_aligned+0x3c>)
 80082f0:	460c      	mov	r4, r1
 80082f2:	6831      	ldr	r1, [r6, #0]
 80082f4:	4605      	mov	r5, r0
 80082f6:	b911      	cbnz	r1, 80082fe <sbrk_aligned+0x12>
 80082f8:	f000 f9e6 	bl	80086c8 <_sbrk_r>
 80082fc:	6030      	str	r0, [r6, #0]
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f9e1 	bl	80086c8 <_sbrk_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	d00a      	beq.n	8008320 <sbrk_aligned+0x34>
 800830a:	1cc4      	adds	r4, r0, #3
 800830c:	f024 0403 	bic.w	r4, r4, #3
 8008310:	42a0      	cmp	r0, r4
 8008312:	d007      	beq.n	8008324 <sbrk_aligned+0x38>
 8008314:	1a21      	subs	r1, r4, r0
 8008316:	4628      	mov	r0, r5
 8008318:	f000 f9d6 	bl	80086c8 <_sbrk_r>
 800831c:	3001      	adds	r0, #1
 800831e:	d101      	bne.n	8008324 <sbrk_aligned+0x38>
 8008320:	f04f 34ff 	mov.w	r4, #4294967295
 8008324:	4620      	mov	r0, r4
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	2000048c 	.word	0x2000048c

0800832c <_malloc_r>:
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	1ccd      	adds	r5, r1, #3
 8008332:	f025 0503 	bic.w	r5, r5, #3
 8008336:	3508      	adds	r5, #8
 8008338:	2d0c      	cmp	r5, #12
 800833a:	bf38      	it	cc
 800833c:	250c      	movcc	r5, #12
 800833e:	2d00      	cmp	r5, #0
 8008340:	4607      	mov	r7, r0
 8008342:	db01      	blt.n	8008348 <_malloc_r+0x1c>
 8008344:	42a9      	cmp	r1, r5
 8008346:	d905      	bls.n	8008354 <_malloc_r+0x28>
 8008348:	230c      	movs	r3, #12
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	2600      	movs	r6, #0
 800834e:	4630      	mov	r0, r6
 8008350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008354:	4e2e      	ldr	r6, [pc, #184]	; (8008410 <_malloc_r+0xe4>)
 8008356:	f000 faa3 	bl	80088a0 <__malloc_lock>
 800835a:	6833      	ldr	r3, [r6, #0]
 800835c:	461c      	mov	r4, r3
 800835e:	bb34      	cbnz	r4, 80083ae <_malloc_r+0x82>
 8008360:	4629      	mov	r1, r5
 8008362:	4638      	mov	r0, r7
 8008364:	f7ff ffc2 	bl	80082ec <sbrk_aligned>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	4604      	mov	r4, r0
 800836c:	d14d      	bne.n	800840a <_malloc_r+0xde>
 800836e:	6834      	ldr	r4, [r6, #0]
 8008370:	4626      	mov	r6, r4
 8008372:	2e00      	cmp	r6, #0
 8008374:	d140      	bne.n	80083f8 <_malloc_r+0xcc>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	4631      	mov	r1, r6
 800837a:	4638      	mov	r0, r7
 800837c:	eb04 0803 	add.w	r8, r4, r3
 8008380:	f000 f9a2 	bl	80086c8 <_sbrk_r>
 8008384:	4580      	cmp	r8, r0
 8008386:	d13a      	bne.n	80083fe <_malloc_r+0xd2>
 8008388:	6821      	ldr	r1, [r4, #0]
 800838a:	3503      	adds	r5, #3
 800838c:	1a6d      	subs	r5, r5, r1
 800838e:	f025 0503 	bic.w	r5, r5, #3
 8008392:	3508      	adds	r5, #8
 8008394:	2d0c      	cmp	r5, #12
 8008396:	bf38      	it	cc
 8008398:	250c      	movcc	r5, #12
 800839a:	4629      	mov	r1, r5
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff ffa5 	bl	80082ec <sbrk_aligned>
 80083a2:	3001      	adds	r0, #1
 80083a4:	d02b      	beq.n	80083fe <_malloc_r+0xd2>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	442b      	add	r3, r5
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	e00e      	b.n	80083cc <_malloc_r+0xa0>
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	1b52      	subs	r2, r2, r5
 80083b2:	d41e      	bmi.n	80083f2 <_malloc_r+0xc6>
 80083b4:	2a0b      	cmp	r2, #11
 80083b6:	d916      	bls.n	80083e6 <_malloc_r+0xba>
 80083b8:	1961      	adds	r1, r4, r5
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	6025      	str	r5, [r4, #0]
 80083be:	bf18      	it	ne
 80083c0:	6059      	strne	r1, [r3, #4]
 80083c2:	6863      	ldr	r3, [r4, #4]
 80083c4:	bf08      	it	eq
 80083c6:	6031      	streq	r1, [r6, #0]
 80083c8:	5162      	str	r2, [r4, r5]
 80083ca:	604b      	str	r3, [r1, #4]
 80083cc:	4638      	mov	r0, r7
 80083ce:	f104 060b 	add.w	r6, r4, #11
 80083d2:	f000 fa6b 	bl	80088ac <__malloc_unlock>
 80083d6:	f026 0607 	bic.w	r6, r6, #7
 80083da:	1d23      	adds	r3, r4, #4
 80083dc:	1af2      	subs	r2, r6, r3
 80083de:	d0b6      	beq.n	800834e <_malloc_r+0x22>
 80083e0:	1b9b      	subs	r3, r3, r6
 80083e2:	50a3      	str	r3, [r4, r2]
 80083e4:	e7b3      	b.n	800834e <_malloc_r+0x22>
 80083e6:	6862      	ldr	r2, [r4, #4]
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	bf0c      	ite	eq
 80083ec:	6032      	streq	r2, [r6, #0]
 80083ee:	605a      	strne	r2, [r3, #4]
 80083f0:	e7ec      	b.n	80083cc <_malloc_r+0xa0>
 80083f2:	4623      	mov	r3, r4
 80083f4:	6864      	ldr	r4, [r4, #4]
 80083f6:	e7b2      	b.n	800835e <_malloc_r+0x32>
 80083f8:	4634      	mov	r4, r6
 80083fa:	6876      	ldr	r6, [r6, #4]
 80083fc:	e7b9      	b.n	8008372 <_malloc_r+0x46>
 80083fe:	230c      	movs	r3, #12
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	4638      	mov	r0, r7
 8008404:	f000 fa52 	bl	80088ac <__malloc_unlock>
 8008408:	e7a1      	b.n	800834e <_malloc_r+0x22>
 800840a:	6025      	str	r5, [r4, #0]
 800840c:	e7de      	b.n	80083cc <_malloc_r+0xa0>
 800840e:	bf00      	nop
 8008410:	20000488 	.word	0x20000488

08008414 <__sfputc_r>:
 8008414:	6893      	ldr	r3, [r2, #8]
 8008416:	3b01      	subs	r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	b410      	push	{r4}
 800841c:	6093      	str	r3, [r2, #8]
 800841e:	da08      	bge.n	8008432 <__sfputc_r+0x1e>
 8008420:	6994      	ldr	r4, [r2, #24]
 8008422:	42a3      	cmp	r3, r4
 8008424:	db01      	blt.n	800842a <__sfputc_r+0x16>
 8008426:	290a      	cmp	r1, #10
 8008428:	d103      	bne.n	8008432 <__sfputc_r+0x1e>
 800842a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800842e:	f7fe ba01 	b.w	8006834 <__swbuf_r>
 8008432:	6813      	ldr	r3, [r2, #0]
 8008434:	1c58      	adds	r0, r3, #1
 8008436:	6010      	str	r0, [r2, #0]
 8008438:	7019      	strb	r1, [r3, #0]
 800843a:	4608      	mov	r0, r1
 800843c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008440:	4770      	bx	lr

08008442 <__sfputs_r>:
 8008442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008444:	4606      	mov	r6, r0
 8008446:	460f      	mov	r7, r1
 8008448:	4614      	mov	r4, r2
 800844a:	18d5      	adds	r5, r2, r3
 800844c:	42ac      	cmp	r4, r5
 800844e:	d101      	bne.n	8008454 <__sfputs_r+0x12>
 8008450:	2000      	movs	r0, #0
 8008452:	e007      	b.n	8008464 <__sfputs_r+0x22>
 8008454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008458:	463a      	mov	r2, r7
 800845a:	4630      	mov	r0, r6
 800845c:	f7ff ffda 	bl	8008414 <__sfputc_r>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d1f3      	bne.n	800844c <__sfputs_r+0xa>
 8008464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008468 <_vfiprintf_r>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	460d      	mov	r5, r1
 800846e:	b09d      	sub	sp, #116	; 0x74
 8008470:	4614      	mov	r4, r2
 8008472:	4698      	mov	r8, r3
 8008474:	4606      	mov	r6, r0
 8008476:	b118      	cbz	r0, 8008480 <_vfiprintf_r+0x18>
 8008478:	6983      	ldr	r3, [r0, #24]
 800847a:	b90b      	cbnz	r3, 8008480 <_vfiprintf_r+0x18>
 800847c:	f7ff fa30 	bl	80078e0 <__sinit>
 8008480:	4b89      	ldr	r3, [pc, #548]	; (80086a8 <_vfiprintf_r+0x240>)
 8008482:	429d      	cmp	r5, r3
 8008484:	d11b      	bne.n	80084be <_vfiprintf_r+0x56>
 8008486:	6875      	ldr	r5, [r6, #4]
 8008488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800848a:	07d9      	lsls	r1, r3, #31
 800848c:	d405      	bmi.n	800849a <_vfiprintf_r+0x32>
 800848e:	89ab      	ldrh	r3, [r5, #12]
 8008490:	059a      	lsls	r2, r3, #22
 8008492:	d402      	bmi.n	800849a <_vfiprintf_r+0x32>
 8008494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008496:	f7ff fac6 	bl	8007a26 <__retarget_lock_acquire_recursive>
 800849a:	89ab      	ldrh	r3, [r5, #12]
 800849c:	071b      	lsls	r3, r3, #28
 800849e:	d501      	bpl.n	80084a4 <_vfiprintf_r+0x3c>
 80084a0:	692b      	ldr	r3, [r5, #16]
 80084a2:	b9eb      	cbnz	r3, 80084e0 <_vfiprintf_r+0x78>
 80084a4:	4629      	mov	r1, r5
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7fe fa16 	bl	80068d8 <__swsetup_r>
 80084ac:	b1c0      	cbz	r0, 80084e0 <_vfiprintf_r+0x78>
 80084ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084b0:	07dc      	lsls	r4, r3, #31
 80084b2:	d50e      	bpl.n	80084d2 <_vfiprintf_r+0x6a>
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295
 80084b8:	b01d      	add	sp, #116	; 0x74
 80084ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084be:	4b7b      	ldr	r3, [pc, #492]	; (80086ac <_vfiprintf_r+0x244>)
 80084c0:	429d      	cmp	r5, r3
 80084c2:	d101      	bne.n	80084c8 <_vfiprintf_r+0x60>
 80084c4:	68b5      	ldr	r5, [r6, #8]
 80084c6:	e7df      	b.n	8008488 <_vfiprintf_r+0x20>
 80084c8:	4b79      	ldr	r3, [pc, #484]	; (80086b0 <_vfiprintf_r+0x248>)
 80084ca:	429d      	cmp	r5, r3
 80084cc:	bf08      	it	eq
 80084ce:	68f5      	ldreq	r5, [r6, #12]
 80084d0:	e7da      	b.n	8008488 <_vfiprintf_r+0x20>
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	0598      	lsls	r0, r3, #22
 80084d6:	d4ed      	bmi.n	80084b4 <_vfiprintf_r+0x4c>
 80084d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084da:	f7ff faa5 	bl	8007a28 <__retarget_lock_release_recursive>
 80084de:	e7e9      	b.n	80084b4 <_vfiprintf_r+0x4c>
 80084e0:	2300      	movs	r3, #0
 80084e2:	9309      	str	r3, [sp, #36]	; 0x24
 80084e4:	2320      	movs	r3, #32
 80084e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ee:	2330      	movs	r3, #48	; 0x30
 80084f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086b4 <_vfiprintf_r+0x24c>
 80084f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084f8:	f04f 0901 	mov.w	r9, #1
 80084fc:	4623      	mov	r3, r4
 80084fe:	469a      	mov	sl, r3
 8008500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008504:	b10a      	cbz	r2, 800850a <_vfiprintf_r+0xa2>
 8008506:	2a25      	cmp	r2, #37	; 0x25
 8008508:	d1f9      	bne.n	80084fe <_vfiprintf_r+0x96>
 800850a:	ebba 0b04 	subs.w	fp, sl, r4
 800850e:	d00b      	beq.n	8008528 <_vfiprintf_r+0xc0>
 8008510:	465b      	mov	r3, fp
 8008512:	4622      	mov	r2, r4
 8008514:	4629      	mov	r1, r5
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ff93 	bl	8008442 <__sfputs_r>
 800851c:	3001      	adds	r0, #1
 800851e:	f000 80aa 	beq.w	8008676 <_vfiprintf_r+0x20e>
 8008522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008524:	445a      	add	r2, fp
 8008526:	9209      	str	r2, [sp, #36]	; 0x24
 8008528:	f89a 3000 	ldrb.w	r3, [sl]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 80a2 	beq.w	8008676 <_vfiprintf_r+0x20e>
 8008532:	2300      	movs	r3, #0
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853c:	f10a 0a01 	add.w	sl, sl, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008548:	931a      	str	r3, [sp, #104]	; 0x68
 800854a:	4654      	mov	r4, sl
 800854c:	2205      	movs	r2, #5
 800854e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008552:	4858      	ldr	r0, [pc, #352]	; (80086b4 <_vfiprintf_r+0x24c>)
 8008554:	f7f7 fe44 	bl	80001e0 <memchr>
 8008558:	9a04      	ldr	r2, [sp, #16]
 800855a:	b9d8      	cbnz	r0, 8008594 <_vfiprintf_r+0x12c>
 800855c:	06d1      	lsls	r1, r2, #27
 800855e:	bf44      	itt	mi
 8008560:	2320      	movmi	r3, #32
 8008562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008566:	0713      	lsls	r3, r2, #28
 8008568:	bf44      	itt	mi
 800856a:	232b      	movmi	r3, #43	; 0x2b
 800856c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008570:	f89a 3000 	ldrb.w	r3, [sl]
 8008574:	2b2a      	cmp	r3, #42	; 0x2a
 8008576:	d015      	beq.n	80085a4 <_vfiprintf_r+0x13c>
 8008578:	9a07      	ldr	r2, [sp, #28]
 800857a:	4654      	mov	r4, sl
 800857c:	2000      	movs	r0, #0
 800857e:	f04f 0c0a 	mov.w	ip, #10
 8008582:	4621      	mov	r1, r4
 8008584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008588:	3b30      	subs	r3, #48	; 0x30
 800858a:	2b09      	cmp	r3, #9
 800858c:	d94e      	bls.n	800862c <_vfiprintf_r+0x1c4>
 800858e:	b1b0      	cbz	r0, 80085be <_vfiprintf_r+0x156>
 8008590:	9207      	str	r2, [sp, #28]
 8008592:	e014      	b.n	80085be <_vfiprintf_r+0x156>
 8008594:	eba0 0308 	sub.w	r3, r0, r8
 8008598:	fa09 f303 	lsl.w	r3, r9, r3
 800859c:	4313      	orrs	r3, r2
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	46a2      	mov	sl, r4
 80085a2:	e7d2      	b.n	800854a <_vfiprintf_r+0xe2>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	1d19      	adds	r1, r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	9103      	str	r1, [sp, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfbb      	ittet	lt
 80085b0:	425b      	neglt	r3, r3
 80085b2:	f042 0202 	orrlt.w	r2, r2, #2
 80085b6:	9307      	strge	r3, [sp, #28]
 80085b8:	9307      	strlt	r3, [sp, #28]
 80085ba:	bfb8      	it	lt
 80085bc:	9204      	strlt	r2, [sp, #16]
 80085be:	7823      	ldrb	r3, [r4, #0]
 80085c0:	2b2e      	cmp	r3, #46	; 0x2e
 80085c2:	d10c      	bne.n	80085de <_vfiprintf_r+0x176>
 80085c4:	7863      	ldrb	r3, [r4, #1]
 80085c6:	2b2a      	cmp	r3, #42	; 0x2a
 80085c8:	d135      	bne.n	8008636 <_vfiprintf_r+0x1ce>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	9203      	str	r2, [sp, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfb8      	it	lt
 80085d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80085da:	3402      	adds	r4, #2
 80085dc:	9305      	str	r3, [sp, #20]
 80085de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086c4 <_vfiprintf_r+0x25c>
 80085e2:	7821      	ldrb	r1, [r4, #0]
 80085e4:	2203      	movs	r2, #3
 80085e6:	4650      	mov	r0, sl
 80085e8:	f7f7 fdfa 	bl	80001e0 <memchr>
 80085ec:	b140      	cbz	r0, 8008600 <_vfiprintf_r+0x198>
 80085ee:	2340      	movs	r3, #64	; 0x40
 80085f0:	eba0 000a 	sub.w	r0, r0, sl
 80085f4:	fa03 f000 	lsl.w	r0, r3, r0
 80085f8:	9b04      	ldr	r3, [sp, #16]
 80085fa:	4303      	orrs	r3, r0
 80085fc:	3401      	adds	r4, #1
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008604:	482c      	ldr	r0, [pc, #176]	; (80086b8 <_vfiprintf_r+0x250>)
 8008606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800860a:	2206      	movs	r2, #6
 800860c:	f7f7 fde8 	bl	80001e0 <memchr>
 8008610:	2800      	cmp	r0, #0
 8008612:	d03f      	beq.n	8008694 <_vfiprintf_r+0x22c>
 8008614:	4b29      	ldr	r3, [pc, #164]	; (80086bc <_vfiprintf_r+0x254>)
 8008616:	bb1b      	cbnz	r3, 8008660 <_vfiprintf_r+0x1f8>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	3307      	adds	r3, #7
 800861c:	f023 0307 	bic.w	r3, r3, #7
 8008620:	3308      	adds	r3, #8
 8008622:	9303      	str	r3, [sp, #12]
 8008624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008626:	443b      	add	r3, r7
 8008628:	9309      	str	r3, [sp, #36]	; 0x24
 800862a:	e767      	b.n	80084fc <_vfiprintf_r+0x94>
 800862c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008630:	460c      	mov	r4, r1
 8008632:	2001      	movs	r0, #1
 8008634:	e7a5      	b.n	8008582 <_vfiprintf_r+0x11a>
 8008636:	2300      	movs	r3, #0
 8008638:	3401      	adds	r4, #1
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	4619      	mov	r1, r3
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008648:	3a30      	subs	r2, #48	; 0x30
 800864a:	2a09      	cmp	r2, #9
 800864c:	d903      	bls.n	8008656 <_vfiprintf_r+0x1ee>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c5      	beq.n	80085de <_vfiprintf_r+0x176>
 8008652:	9105      	str	r1, [sp, #20]
 8008654:	e7c3      	b.n	80085de <_vfiprintf_r+0x176>
 8008656:	fb0c 2101 	mla	r1, ip, r1, r2
 800865a:	4604      	mov	r4, r0
 800865c:	2301      	movs	r3, #1
 800865e:	e7f0      	b.n	8008642 <_vfiprintf_r+0x1da>
 8008660:	ab03      	add	r3, sp, #12
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <_vfiprintf_r+0x258>)
 8008668:	a904      	add	r1, sp, #16
 800866a:	4630      	mov	r0, r6
 800866c:	f7fd fc8a 	bl	8005f84 <_printf_float>
 8008670:	4607      	mov	r7, r0
 8008672:	1c78      	adds	r0, r7, #1
 8008674:	d1d6      	bne.n	8008624 <_vfiprintf_r+0x1bc>
 8008676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008678:	07d9      	lsls	r1, r3, #31
 800867a:	d405      	bmi.n	8008688 <_vfiprintf_r+0x220>
 800867c:	89ab      	ldrh	r3, [r5, #12]
 800867e:	059a      	lsls	r2, r3, #22
 8008680:	d402      	bmi.n	8008688 <_vfiprintf_r+0x220>
 8008682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008684:	f7ff f9d0 	bl	8007a28 <__retarget_lock_release_recursive>
 8008688:	89ab      	ldrh	r3, [r5, #12]
 800868a:	065b      	lsls	r3, r3, #25
 800868c:	f53f af12 	bmi.w	80084b4 <_vfiprintf_r+0x4c>
 8008690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008692:	e711      	b.n	80084b8 <_vfiprintf_r+0x50>
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	462a      	mov	r2, r5
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <_vfiprintf_r+0x258>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	4630      	mov	r0, r6
 80086a0:	f7fd ff14 	bl	80064cc <_printf_i>
 80086a4:	e7e4      	b.n	8008670 <_vfiprintf_r+0x208>
 80086a6:	bf00      	nop
 80086a8:	08008af0 	.word	0x08008af0
 80086ac:	08008b10 	.word	0x08008b10
 80086b0:	08008ad0 	.word	0x08008ad0
 80086b4:	08008c8c 	.word	0x08008c8c
 80086b8:	08008c96 	.word	0x08008c96
 80086bc:	08005f85 	.word	0x08005f85
 80086c0:	08008443 	.word	0x08008443
 80086c4:	08008c92 	.word	0x08008c92

080086c8 <_sbrk_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d06      	ldr	r5, [pc, #24]	; (80086e4 <_sbrk_r+0x1c>)
 80086cc:	2300      	movs	r3, #0
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7f9 fc74 	bl	8001fc0 <_sbrk>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_sbrk_r+0x1a>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_sbrk_r+0x1a>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20000490 	.word	0x20000490

080086e8 <__sread>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	f000 f8e2 	bl	80088b8 <_read_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	bfab      	itete	ge
 80086f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fa:	89a3      	ldrhlt	r3, [r4, #12]
 80086fc:	181b      	addge	r3, r3, r0
 80086fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008702:	bfac      	ite	ge
 8008704:	6563      	strge	r3, [r4, #84]	; 0x54
 8008706:	81a3      	strhlt	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__swrite>:
 800870a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	461f      	mov	r7, r3
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	05db      	lsls	r3, r3, #23
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4616      	mov	r6, r2
 800871a:	d505      	bpl.n	8008728 <__swrite+0x1e>
 800871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008720:	2302      	movs	r3, #2
 8008722:	2200      	movs	r2, #0
 8008724:	f000 f898 	bl	8008858 <_lseek_r>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	4628      	mov	r0, r5
 800873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	f000 b817 	b.w	8008770 <_write_r>

08008742 <__sseek>:
 8008742:	b510      	push	{r4, lr}
 8008744:	460c      	mov	r4, r1
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f000 f885 	bl	8008858 <_lseek_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	bf15      	itete	ne
 8008754:	6560      	strne	r0, [r4, #84]	; 0x54
 8008756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800875e:	81a3      	strheq	r3, [r4, #12]
 8008760:	bf18      	it	ne
 8008762:	81a3      	strhne	r3, [r4, #12]
 8008764:	bd10      	pop	{r4, pc}

08008766 <__sclose>:
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 b831 	b.w	80087d0 <_close_r>
	...

08008770 <_write_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d07      	ldr	r5, [pc, #28]	; (8008790 <_write_r+0x20>)
 8008774:	4604      	mov	r4, r0
 8008776:	4608      	mov	r0, r1
 8008778:	4611      	mov	r1, r2
 800877a:	2200      	movs	r2, #0
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f7f9 fbcd 	bl	8001f1e <_write>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_write_r+0x1e>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_write_r+0x1e>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20000490 	.word	0x20000490

08008794 <__assert_func>:
 8008794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008796:	4614      	mov	r4, r2
 8008798:	461a      	mov	r2, r3
 800879a:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <__assert_func+0x2c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4605      	mov	r5, r0
 80087a0:	68d8      	ldr	r0, [r3, #12]
 80087a2:	b14c      	cbz	r4, 80087b8 <__assert_func+0x24>
 80087a4:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <__assert_func+0x30>)
 80087a6:	9100      	str	r1, [sp, #0]
 80087a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087ac:	4906      	ldr	r1, [pc, #24]	; (80087c8 <__assert_func+0x34>)
 80087ae:	462b      	mov	r3, r5
 80087b0:	f000 f81e 	bl	80087f0 <fiprintf>
 80087b4:	f000 f89f 	bl	80088f6 <abort>
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <__assert_func+0x38>)
 80087ba:	461c      	mov	r4, r3
 80087bc:	e7f3      	b.n	80087a6 <__assert_func+0x12>
 80087be:	bf00      	nop
 80087c0:	2000000c 	.word	0x2000000c
 80087c4:	08008c9d 	.word	0x08008c9d
 80087c8:	08008caa 	.word	0x08008caa
 80087cc:	08008cd8 	.word	0x08008cd8

080087d0 <_close_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d06      	ldr	r5, [pc, #24]	; (80087ec <_close_r+0x1c>)
 80087d4:	2300      	movs	r3, #0
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7f9 fbbb 	bl	8001f56 <_close>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_close_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_close_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20000490 	.word	0x20000490

080087f0 <fiprintf>:
 80087f0:	b40e      	push	{r1, r2, r3}
 80087f2:	b503      	push	{r0, r1, lr}
 80087f4:	4601      	mov	r1, r0
 80087f6:	ab03      	add	r3, sp, #12
 80087f8:	4805      	ldr	r0, [pc, #20]	; (8008810 <fiprintf+0x20>)
 80087fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80087fe:	6800      	ldr	r0, [r0, #0]
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	f7ff fe31 	bl	8008468 <_vfiprintf_r>
 8008806:	b002      	add	sp, #8
 8008808:	f85d eb04 	ldr.w	lr, [sp], #4
 800880c:	b003      	add	sp, #12
 800880e:	4770      	bx	lr
 8008810:	2000000c 	.word	0x2000000c

08008814 <_fstat_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d07      	ldr	r5, [pc, #28]	; (8008834 <_fstat_r+0x20>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	4611      	mov	r1, r2
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	f7f9 fba4 	bl	8001f6e <_fstat>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d102      	bne.n	8008830 <_fstat_r+0x1c>
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	b103      	cbz	r3, 8008830 <_fstat_r+0x1c>
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	bd38      	pop	{r3, r4, r5, pc}
 8008832:	bf00      	nop
 8008834:	20000490 	.word	0x20000490

08008838 <_isatty_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d06      	ldr	r5, [pc, #24]	; (8008854 <_isatty_r+0x1c>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	602b      	str	r3, [r5, #0]
 8008844:	f7f9 fba3 	bl	8001f8e <_isatty>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_isatty_r+0x1a>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_isatty_r+0x1a>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	20000490 	.word	0x20000490

08008858 <_lseek_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d07      	ldr	r5, [pc, #28]	; (8008878 <_lseek_r+0x20>)
 800885c:	4604      	mov	r4, r0
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	2200      	movs	r2, #0
 8008864:	602a      	str	r2, [r5, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	f7f9 fb9c 	bl	8001fa4 <_lseek>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_lseek_r+0x1e>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_lseek_r+0x1e>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20000490 	.word	0x20000490

0800887c <__ascii_mbtowc>:
 800887c:	b082      	sub	sp, #8
 800887e:	b901      	cbnz	r1, 8008882 <__ascii_mbtowc+0x6>
 8008880:	a901      	add	r1, sp, #4
 8008882:	b142      	cbz	r2, 8008896 <__ascii_mbtowc+0x1a>
 8008884:	b14b      	cbz	r3, 800889a <__ascii_mbtowc+0x1e>
 8008886:	7813      	ldrb	r3, [r2, #0]
 8008888:	600b      	str	r3, [r1, #0]
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	1e10      	subs	r0, r2, #0
 800888e:	bf18      	it	ne
 8008890:	2001      	movne	r0, #1
 8008892:	b002      	add	sp, #8
 8008894:	4770      	bx	lr
 8008896:	4610      	mov	r0, r2
 8008898:	e7fb      	b.n	8008892 <__ascii_mbtowc+0x16>
 800889a:	f06f 0001 	mvn.w	r0, #1
 800889e:	e7f8      	b.n	8008892 <__ascii_mbtowc+0x16>

080088a0 <__malloc_lock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__malloc_lock+0x8>)
 80088a2:	f7ff b8c0 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000484 	.word	0x20000484

080088ac <__malloc_unlock>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__malloc_unlock+0x8>)
 80088ae:	f7ff b8bb 	b.w	8007a28 <__retarget_lock_release_recursive>
 80088b2:	bf00      	nop
 80088b4:	20000484 	.word	0x20000484

080088b8 <_read_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	; (80088d8 <_read_r+0x20>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	2200      	movs	r2, #0
 80088c4:	602a      	str	r2, [r5, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7f9 fb0c 	bl	8001ee4 <_read>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_read_r+0x1e>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_read_r+0x1e>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000490 	.word	0x20000490

080088dc <__ascii_wctomb>:
 80088dc:	b149      	cbz	r1, 80088f2 <__ascii_wctomb+0x16>
 80088de:	2aff      	cmp	r2, #255	; 0xff
 80088e0:	bf85      	ittet	hi
 80088e2:	238a      	movhi	r3, #138	; 0x8a
 80088e4:	6003      	strhi	r3, [r0, #0]
 80088e6:	700a      	strbls	r2, [r1, #0]
 80088e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80088ec:	bf98      	it	ls
 80088ee:	2001      	movls	r0, #1
 80088f0:	4770      	bx	lr
 80088f2:	4608      	mov	r0, r1
 80088f4:	4770      	bx	lr

080088f6 <abort>:
 80088f6:	b508      	push	{r3, lr}
 80088f8:	2006      	movs	r0, #6
 80088fa:	f000 f82b 	bl	8008954 <raise>
 80088fe:	2001      	movs	r0, #1
 8008900:	f7f9 fae6 	bl	8001ed0 <_exit>

08008904 <_raise_r>:
 8008904:	291f      	cmp	r1, #31
 8008906:	b538      	push	{r3, r4, r5, lr}
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	d904      	bls.n	8008918 <_raise_r+0x14>
 800890e:	2316      	movs	r3, #22
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800891a:	b112      	cbz	r2, 8008922 <_raise_r+0x1e>
 800891c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008920:	b94b      	cbnz	r3, 8008936 <_raise_r+0x32>
 8008922:	4620      	mov	r0, r4
 8008924:	f000 f830 	bl	8008988 <_getpid_r>
 8008928:	462a      	mov	r2, r5
 800892a:	4601      	mov	r1, r0
 800892c:	4620      	mov	r0, r4
 800892e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008932:	f000 b817 	b.w	8008964 <_kill_r>
 8008936:	2b01      	cmp	r3, #1
 8008938:	d00a      	beq.n	8008950 <_raise_r+0x4c>
 800893a:	1c59      	adds	r1, r3, #1
 800893c:	d103      	bne.n	8008946 <_raise_r+0x42>
 800893e:	2316      	movs	r3, #22
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	2001      	movs	r0, #1
 8008944:	e7e7      	b.n	8008916 <_raise_r+0x12>
 8008946:	2400      	movs	r4, #0
 8008948:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800894c:	4628      	mov	r0, r5
 800894e:	4798      	blx	r3
 8008950:	2000      	movs	r0, #0
 8008952:	e7e0      	b.n	8008916 <_raise_r+0x12>

08008954 <raise>:
 8008954:	4b02      	ldr	r3, [pc, #8]	; (8008960 <raise+0xc>)
 8008956:	4601      	mov	r1, r0
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	f7ff bfd3 	b.w	8008904 <_raise_r>
 800895e:	bf00      	nop
 8008960:	2000000c 	.word	0x2000000c

08008964 <_kill_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d07      	ldr	r5, [pc, #28]	; (8008984 <_kill_r+0x20>)
 8008968:	2300      	movs	r3, #0
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	4611      	mov	r1, r2
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	f7f9 fa9d 	bl	8001eb0 <_kill>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d102      	bne.n	8008980 <_kill_r+0x1c>
 800897a:	682b      	ldr	r3, [r5, #0]
 800897c:	b103      	cbz	r3, 8008980 <_kill_r+0x1c>
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	bd38      	pop	{r3, r4, r5, pc}
 8008982:	bf00      	nop
 8008984:	20000490 	.word	0x20000490

08008988 <_getpid_r>:
 8008988:	f7f9 ba8a 	b.w	8001ea0 <_getpid>

0800898c <_init>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr

08008998 <_fini>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr
