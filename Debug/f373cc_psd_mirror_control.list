
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008874  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08008a08  08008a08  00018a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f2c  08008f2c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008f2c  08008f2c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f2c  08008f2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001dc  08009110  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08009110  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e82  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212e  00000000  00000000  0003108e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5bd  00000000  00000000  00034ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128a4  00000000  00000000  00052485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac243  00000000  00000000  00064d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  00110fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089ec 	.word	0x080089ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080089ec 	.word	0x080089ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bac:	b0e2      	sub	sp, #392	; 0x188
 8000bae:	af2e      	add	r7, sp, #184	; 0xb8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f001 fb52 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 fb74 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 fd62 	bl	8001680 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bbc:	f000 fbca 	bl	8001354 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bc0:	f000 fc06 	bl	80013d0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000bc4:	f000 fd2c 	bl	8001620 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc8:	f000 fc64 	bl	8001494 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bcc:	f000 fcb0 	bl	8001530 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000bd0:	f000 fc3c 	bl	800144c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  MEMS_DRIVER_HV_Disable();
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f001 fe69 	bl	80028b4 <HAL_GPIO_WritePin>

  printf("boink\n");
 8000be2:	48bc      	ldr	r0, [pc, #752]	; (8000ed4 <main+0x32c>)
 8000be4:	f005 fe06 	bl	80067f4 <puts>

  // start MEMS FCLK_X
  HAL_TIM_Base_Start(&htim14);
 8000be8:	48bb      	ldr	r0, [pc, #748]	; (8000ed8 <main+0x330>)
 8000bea:	f004 f875 	bl	8004cd8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim14, TIM_CHANNEL_1);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	48b9      	ldr	r0, [pc, #740]	; (8000ed8 <main+0x330>)
 8000bf2:	f004 f92b 	bl	8004e4c <HAL_TIM_OC_Start>
  //htim14.Instance->CCR1 = 2;

  // start MEMS FCLK_Y
  HAL_TIM_Base_Start(&htim16);
 8000bf6:	48b9      	ldr	r0, [pc, #740]	; (8000edc <main+0x334>)
 8000bf8:	f004 f86e 	bl	8004cd8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	48b7      	ldr	r0, [pc, #732]	; (8000edc <main+0x334>)
 8000c00:	f004 f924 	bl	8004e4c <HAL_TIM_OC_Start>
  //htim16.Instance->CCR1 = 2;
  HAL_Delay(10);
 8000c04:	200a      	movs	r0, #10
 8000c06:	f001 fb8d 	bl	8002324 <HAL_Delay>

  MCP3561_Reset(&hspi1);
 8000c0a:	48b5      	ldr	r0, [pc, #724]	; (8000ee0 <main+0x338>)
 8000c0c:	f001 fb12 	bl	8002234 <MCP3561_Reset>
  HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f001 fb87 	bl	8002324 <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c16:	48b2      	ldr	r0, [pc, #712]	; (8000ee0 <main+0x338>)
 8000c18:	f001 fa46 	bl	80020a8 <MCP3561_PrintRegisters>
  printf("\n");
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f005 fd65 	bl	80066ec <putchar>

  // @note configure the chip inside the mcp3561_conf.h
  MCP3561_Init(&hspi1);
 8000c22:	48af      	ldr	r0, [pc, #700]	; (8000ee0 <main+0x338>)
 8000c24:	f001 f9ca 	bl	8001fbc <MCP3561_Init>
  printf("\n");
 8000c28:	200a      	movs	r0, #10
 8000c2a:	f005 fd5f 	bl	80066ec <putchar>
  HAL_Delay(10);
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f001 fb78 	bl	8002324 <HAL_Delay>
  MCP3561_PrintRegisters(&hspi1);
 8000c34:	48aa      	ldr	r0, [pc, #680]	; (8000ee0 <main+0x338>)
 8000c36:	f001 fa37 	bl	80020a8 <MCP3561_PrintRegisters>
  printf("\n");
 8000c3a:	200a      	movs	r0, #10
 8000c3c:	f005 fd56 	bl	80066ec <putchar>
   * 2097167 Decimal or 0x20000F to command ENABLE ALL DAC CHANNELS
   * 3145728 Decimal or 0x300000 to command ENABLE SOFTWARE LDAC
   */

  uint8_t dac_data[8];
  dac_data[0] = 0x28;
 8000c40:	2328      	movs	r3, #40	; 0x28
 8000c42:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
  dac_data[1] = 0x00;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  dac_data[2] = 0x01;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // FULL RESET
 8000c52:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000c56:	230a      	movs	r3, #10
 8000c58:	2203      	movs	r2, #3
 8000c5a:	48a2      	ldr	r0, [pc, #648]	; (8000ee4 <main+0x33c>)
 8000c5c:	f003 fb07 	bl	800426e <HAL_SPI_Transmit>
  dac_data[0] = 0x38;
 8000c60:	2338      	movs	r3, #56	; 0x38
 8000c62:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
  dac_data[1] = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  dac_data[2] = 0x01;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // ENABLE INTERNAL REFERENCE
 8000c72:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000c76:	230a      	movs	r3, #10
 8000c78:	2203      	movs	r2, #3
 8000c7a:	489a      	ldr	r0, [pc, #616]	; (8000ee4 <main+0x33c>)
 8000c7c:	f003 faf7 	bl	800426e <HAL_SPI_Transmit>
  dac_data[0] = 0x20;
 8000c80:	2320      	movs	r3, #32
 8000c82:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
  dac_data[1] = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  dac_data[2] = 0x0F;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // ENABLE ALL DAC CHANNELS
 8000c92:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000c96:	230a      	movs	r3, #10
 8000c98:	2203      	movs	r2, #3
 8000c9a:	4892      	ldr	r0, [pc, #584]	; (8000ee4 <main+0x33c>)
 8000c9c:	f003 fae7 	bl	800426e <HAL_SPI_Transmit>
  dac_data[0] = 0x30;
 8000ca0:	2330      	movs	r3, #48	; 0x30
 8000ca2:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
  dac_data[1] = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  dac_data[2] = 0x00;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
  HAL_SPI_Transmit(&hspi2, dac_data, 3, 10); // ENABLE SOFTWARE LDAC
 8000cb2:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	2203      	movs	r2, #3
 8000cba:	488a      	ldr	r0, [pc, #552]	; (8000ee4 <main+0x33c>)
 8000cbc:	f003 fad7 	bl	800426e <HAL_SPI_Transmit>
  MCP3561_Channels(&hspi1, MCP3561_MUX_CH0, MCP3561_MUX_CH1);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4886      	ldr	r0, [pc, #536]	; (8000ee0 <main+0x338>)
 8000cc6:	f001 f958 	bl	8001f7a <MCP3561_Channels>

  spi1_tx_buf[0] = MCP3561_DEVICE_ADDRESS_MASK | 1; // [a a 0 0 0 0 0 1]
 8000cca:	4b87      	ldr	r3, [pc, #540]	; (8000ee8 <main+0x340>)
 8000ccc:	2241      	movs	r2, #65	; 0x41
 8000cce:	701a      	strb	r2, [r3, #0]
  setup_done = true;
 8000cd0:	4b86      	ldr	r3, [pc, #536]	; (8000eec <main+0x344>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("\n");
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	4885      	ldr	r0, [pc, #532]	; (8000ef0 <main+0x348>)
 8000cda:	f001 fe03 	bl	80028e4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4883      	ldr	r0, [pc, #524]	; (8000ef0 <main+0x348>)
 8000ce2:	f001 fdff 	bl	80028e4 <HAL_GPIO_TogglePin>
	  uint32_t adc_lsb[4];
	  float adc_volt[4];


	  HAL_Delay(500);
 8000ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cea:	f001 fb1b 	bl	8002324 <HAL_Delay>
	  int lego = HAL_GPIO_ReadPin(SPI1_IRQ_GPIO_Port, SPI1_IRQ_Pin);
 8000cee:	2102      	movs	r1, #2
 8000cf0:	487f      	ldr	r0, [pc, #508]	; (8000ef0 <main+0x348>)
 8000cf2:	f001 fdc7 	bl	8002884 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2110      	movs	r1, #16
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f001 fdd6 	bl	80028b4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, spi1_tx_buf, spi1_rx_buf, 5, 3);
 8000d08:	2303      	movs	r3, #3
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	4a79      	ldr	r2, [pc, #484]	; (8000ef4 <main+0x34c>)
 8000d10:	4975      	ldr	r1, [pc, #468]	; (8000ee8 <main+0x340>)
 8000d12:	4873      	ldr	r0, [pc, #460]	; (8000ee0 <main+0x338>)
 8000d14:	f003 fc19 	bl	800454a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f001 fdc8 	bl	80028b4 <HAL_GPIO_WritePin>
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000d24:	4b73      	ldr	r3, [pc, #460]	; (8000ef4 <main+0x34c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	b25b      	sxtb	r3, r3
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da02      	bge.n	8000d36 <main+0x18e>
 8000d30:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000d34:	e001      	b.n	8000d3a <main+0x192>
 8000d36:	f04f 0c30 	mov.w	ip, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000d3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <main+0x34c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <main+0x1a6>
 8000d48:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8000d4c:	e001      	b.n	8000d52 <main+0x1aa>
 8000d4e:	f04f 0e30 	mov.w	lr, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000d52:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <main+0x34c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f003 0320 	and.w	r3, r3, #32
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <main+0x1be>
 8000d60:	f04f 0831 	mov.w	r8, #49	; 0x31
 8000d64:	e001      	b.n	8000d6a <main+0x1c2>
 8000d66:	f04f 0830 	mov.w	r8, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000d6a:	4b62      	ldr	r3, [pc, #392]	; (8000ef4 <main+0x34c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f003 0310 	and.w	r3, r3, #16
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <main+0x1d8>
 8000d78:	2331      	movs	r3, #49	; 0x31
 8000d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000d7e:	e002      	b.n	8000d86 <main+0x1de>
 8000d80:	2330      	movs	r3, #48	; 0x30
 8000d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000d86:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <main+0x34c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	f003 0308 	and.w	r3, r3, #8
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <main+0x1f4>
 8000d94:	2331      	movs	r3, #49	; 0x31
 8000d96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d9a:	e002      	b.n	8000da2 <main+0x1fa>
 8000d9c:	2330      	movs	r3, #48	; 0x30
 8000d9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000da2:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <main+0x34c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 0304 	and.w	r3, r3, #4
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <main+0x210>
 8000db0:	2331      	movs	r3, #49	; 0x31
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000db6:	e002      	b.n	8000dbe <main+0x216>
 8000db8:	2330      	movs	r3, #48	; 0x30
 8000dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000dbe:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <main+0x34c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0302 	and.w	r3, r3, #2
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <main+0x22c>
 8000dcc:	2331      	movs	r3, #49	; 0x31
 8000dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000dd2:	e002      	b.n	8000dda <main+0x232>
 8000dd4:	2330      	movs	r3, #48	; 0x30
 8000dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			  BYTE_TO_BINARY(spi1_rx_buf[0]),
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <main+0x34c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <main+0x248>
 8000de8:	2331      	movs	r3, #49	; 0x31
 8000dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000dee:	e002      	b.n	8000df6 <main+0x24e>
 8000df0:	2330      	movs	r3, #48	; 0x30
 8000df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000df6:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <main+0x34c>)
 8000df8:	785b      	ldrb	r3, [r3, #1]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	b25b      	sxtb	r3, r3
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da03      	bge.n	8000e0a <main+0x262>
 8000e02:	2331      	movs	r3, #49	; 0x31
 8000e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000e08:	e002      	b.n	8000e10 <main+0x268>
 8000e0a:	2330      	movs	r3, #48	; 0x30
 8000e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <main+0x34c>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <main+0x27e>
 8000e1e:	2331      	movs	r3, #49	; 0x31
 8000e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e24:	e002      	b.n	8000e2c <main+0x284>
 8000e26:	2330      	movs	r3, #48	; 0x30
 8000e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <main+0x34c>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f003 0320 	and.w	r3, r3, #32
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <main+0x29a>
 8000e3a:	2331      	movs	r3, #49	; 0x31
 8000e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e40:	e002      	b.n	8000e48 <main+0x2a0>
 8000e42:	2330      	movs	r3, #48	; 0x30
 8000e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <main+0x34c>)
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f003 0310 	and.w	r3, r3, #16
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <main+0x2b4>
 8000e56:	2331      	movs	r3, #49	; 0x31
 8000e58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e5a:	e001      	b.n	8000e60 <main+0x2b8>
 8000e5c:	2330      	movs	r3, #48	; 0x30
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <main+0x34c>)
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f003 0308 	and.w	r3, r3, #8
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <main+0x2cc>
 8000e6e:	2331      	movs	r3, #49	; 0x31
 8000e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e72:	e001      	b.n	8000e78 <main+0x2d0>
 8000e74:	2330      	movs	r3, #48	; 0x30
 8000e76:	67bb      	str	r3, [r7, #120]	; 0x78
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <main+0x34c>)
 8000e7a:	785b      	ldrb	r3, [r3, #1]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f003 0304 	and.w	r3, r3, #4
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <main+0x2e4>
 8000e86:	2331      	movs	r3, #49	; 0x31
 8000e88:	677b      	str	r3, [r7, #116]	; 0x74
 8000e8a:	e001      	b.n	8000e90 <main+0x2e8>
 8000e8c:	2330      	movs	r3, #48	; 0x30
 8000e8e:	677b      	str	r3, [r7, #116]	; 0x74
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <main+0x34c>)
 8000e92:	785b      	ldrb	r3, [r3, #1]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0302 	and.w	r3, r3, #2
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <main+0x2fc>
 8000e9e:	2331      	movs	r3, #49	; 0x31
 8000ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8000ea2:	e001      	b.n	8000ea8 <main+0x300>
 8000ea4:	2330      	movs	r3, #48	; 0x30
 8000ea6:	673b      	str	r3, [r7, #112]	; 0x70
			  BYTE_TO_BINARY(spi1_rx_buf[1]),
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <main+0x34c>)
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f003 0301 	and.w	r3, r3, #1
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <main+0x314>
 8000eb6:	2331      	movs	r3, #49	; 0x31
 8000eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eba:	e001      	b.n	8000ec0 <main+0x318>
 8000ebc:	2330      	movs	r3, #48	; 0x30
 8000ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <main+0x34c>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	b25b      	sxtb	r3, r3
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da15      	bge.n	8000ef8 <main+0x350>
 8000ecc:	2331      	movs	r3, #49	; 0x31
 8000ece:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ed0:	e014      	b.n	8000efc <main+0x354>
 8000ed2:	bf00      	nop
 8000ed4:	08008a08 	.word	0x08008a08
 8000ed8:	2000030c 	.word	0x2000030c
 8000edc:	20000358 	.word	0x20000358
 8000ee0:	200001f8 	.word	0x200001f8
 8000ee4:	2000025c 	.word	0x2000025c
 8000ee8:	20000430 	.word	0x20000430
 8000eec:	2000042c 	.word	0x2000042c
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	20000438 	.word	0x20000438
 8000ef8:	2330      	movs	r3, #48	; 0x30
 8000efa:	66bb      	str	r3, [r7, #104]	; 0x68
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000efc:	4b9d      	ldr	r3, [pc, #628]	; (8001174 <main+0x5cc>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <main+0x368>
 8000f0a:	2331      	movs	r3, #49	; 0x31
 8000f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f0e:	e001      	b.n	8000f14 <main+0x36c>
 8000f10:	2330      	movs	r3, #48	; 0x30
 8000f12:	667b      	str	r3, [r7, #100]	; 0x64
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000f14:	4b97      	ldr	r3, [pc, #604]	; (8001174 <main+0x5cc>)
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f003 0320 	and.w	r3, r3, #32
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <main+0x380>
 8000f22:	2331      	movs	r3, #49	; 0x31
 8000f24:	663b      	str	r3, [r7, #96]	; 0x60
 8000f26:	e001      	b.n	8000f2c <main+0x384>
 8000f28:	2330      	movs	r3, #48	; 0x30
 8000f2a:	663b      	str	r3, [r7, #96]	; 0x60
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000f2c:	4b91      	ldr	r3, [pc, #580]	; (8001174 <main+0x5cc>)
 8000f2e:	789b      	ldrb	r3, [r3, #2]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 0310 	and.w	r3, r3, #16
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <main+0x398>
 8000f3a:	2331      	movs	r3, #49	; 0x31
 8000f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f3e:	e001      	b.n	8000f44 <main+0x39c>
 8000f40:	2330      	movs	r3, #48	; 0x30
 8000f42:	65fb      	str	r3, [r7, #92]	; 0x5c
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000f44:	4b8b      	ldr	r3, [pc, #556]	; (8001174 <main+0x5cc>)
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f003 0308 	and.w	r3, r3, #8
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <main+0x3b0>
 8000f52:	2331      	movs	r3, #49	; 0x31
 8000f54:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f56:	e001      	b.n	8000f5c <main+0x3b4>
 8000f58:	2330      	movs	r3, #48	; 0x30
 8000f5a:	65bb      	str	r3, [r7, #88]	; 0x58
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000f5c:	4b85      	ldr	r3, [pc, #532]	; (8001174 <main+0x5cc>)
 8000f5e:	789b      	ldrb	r3, [r3, #2]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0304 	and.w	r3, r3, #4
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <main+0x3c8>
 8000f6a:	2331      	movs	r3, #49	; 0x31
 8000f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f6e:	e001      	b.n	8000f74 <main+0x3cc>
 8000f70:	2330      	movs	r3, #48	; 0x30
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000f74:	4b7f      	ldr	r3, [pc, #508]	; (8001174 <main+0x5cc>)
 8000f76:	789b      	ldrb	r3, [r3, #2]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f003 0302 	and.w	r3, r3, #2
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <main+0x3e0>
 8000f82:	2331      	movs	r3, #49	; 0x31
 8000f84:	653b      	str	r3, [r7, #80]	; 0x50
 8000f86:	e001      	b.n	8000f8c <main+0x3e4>
 8000f88:	2330      	movs	r3, #48	; 0x30
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
			  BYTE_TO_BINARY(spi1_rx_buf[2]),
 8000f8c:	4b79      	ldr	r3, [pc, #484]	; (8001174 <main+0x5cc>)
 8000f8e:	789b      	ldrb	r3, [r3, #2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 0301 	and.w	r3, r3, #1
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <main+0x3f8>
 8000f9a:	2331      	movs	r3, #49	; 0x31
 8000f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f9e:	e001      	b.n	8000fa4 <main+0x3fc>
 8000fa0:	2330      	movs	r3, #48	; 0x30
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 8000fa4:	4b73      	ldr	r3, [pc, #460]	; (8001174 <main+0x5cc>)
 8000fa6:	78db      	ldrb	r3, [r3, #3]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b25b      	sxtb	r3, r3
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da02      	bge.n	8000fb6 <main+0x40e>
 8000fb0:	2331      	movs	r3, #49	; 0x31
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fb4:	e001      	b.n	8000fba <main+0x412>
 8000fb6:	2330      	movs	r3, #48	; 0x30
 8000fb8:	64bb      	str	r3, [r7, #72]	; 0x48
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 8000fba:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <main+0x5cc>)
 8000fbc:	78db      	ldrb	r3, [r3, #3]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <main+0x426>
 8000fc8:	2331      	movs	r3, #49	; 0x31
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
 8000fcc:	e001      	b.n	8000fd2 <main+0x42a>
 8000fce:	2330      	movs	r3, #48	; 0x30
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 8000fd2:	4b68      	ldr	r3, [pc, #416]	; (8001174 <main+0x5cc>)
 8000fd4:	78db      	ldrb	r3, [r3, #3]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	f003 0320 	and.w	r3, r3, #32
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <main+0x43e>
 8000fe0:	2331      	movs	r3, #49	; 0x31
 8000fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8000fe4:	e001      	b.n	8000fea <main+0x442>
 8000fe6:	2330      	movs	r3, #48	; 0x30
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 8000fea:	4b62      	ldr	r3, [pc, #392]	; (8001174 <main+0x5cc>)
 8000fec:	78db      	ldrb	r3, [r3, #3]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 0310 	and.w	r3, r3, #16
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <main+0x456>
 8000ff8:	2331      	movs	r3, #49	; 0x31
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ffc:	e001      	b.n	8001002 <main+0x45a>
 8000ffe:	2330      	movs	r3, #48	; 0x30
 8001000:	63fb      	str	r3, [r7, #60]	; 0x3c
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <main+0x5cc>)
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f003 0308 	and.w	r3, r3, #8
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <main+0x46e>
 8001010:	2331      	movs	r3, #49	; 0x31
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
 8001014:	e001      	b.n	800101a <main+0x472>
 8001016:	2330      	movs	r3, #48	; 0x30
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 800101a:	4b56      	ldr	r3, [pc, #344]	; (8001174 <main+0x5cc>)
 800101c:	78db      	ldrb	r3, [r3, #3]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0304 	and.w	r3, r3, #4
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <main+0x486>
 8001028:	2331      	movs	r3, #49	; 0x31
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
 800102c:	e001      	b.n	8001032 <main+0x48a>
 800102e:	2330      	movs	r3, #48	; 0x30
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <main+0x5cc>)
 8001034:	78db      	ldrb	r3, [r3, #3]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 0302 	and.w	r3, r3, #2
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <main+0x49e>
 8001040:	2331      	movs	r3, #49	; 0x31
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
 8001044:	e001      	b.n	800104a <main+0x4a2>
 8001046:	2330      	movs	r3, #48	; 0x30
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[3]),
 800104a:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <main+0x5cc>)
 800104c:	78db      	ldrb	r3, [r3, #3]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f003 0301 	and.w	r3, r3, #1
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <main+0x4b6>
 8001058:	2331      	movs	r3, #49	; 0x31
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105c:	e001      	b.n	8001062 <main+0x4ba>
 800105e:	2330      	movs	r3, #48	; 0x30
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <main+0x5cc>)
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b25b      	sxtb	r3, r3
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 800106a:	2b00      	cmp	r3, #0
 800106c:	da02      	bge.n	8001074 <main+0x4cc>
 800106e:	2331      	movs	r3, #49	; 0x31
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
 8001072:	e001      	b.n	8001078 <main+0x4d0>
 8001074:	2330      	movs	r3, #48	; 0x30
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 8001078:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <main+0x5cc>)
 800107a:	791b      	ldrb	r3, [r3, #4]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f003 0340 	and.w	r3, r3, #64	; 0x40
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <main+0x4e4>
 8001086:	2331      	movs	r3, #49	; 0x31
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
 800108a:	e001      	b.n	8001090 <main+0x4e8>
 800108c:	2330      	movs	r3, #48	; 0x30
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 8001090:	4b38      	ldr	r3, [pc, #224]	; (8001174 <main+0x5cc>)
 8001092:	791b      	ldrb	r3, [r3, #4]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0320 	and.w	r3, r3, #32
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <main+0x4fc>
 800109e:	2331      	movs	r3, #49	; 0x31
 80010a0:	623b      	str	r3, [r7, #32]
 80010a2:	e001      	b.n	80010a8 <main+0x500>
 80010a4:	2330      	movs	r3, #48	; 0x30
 80010a6:	623b      	str	r3, [r7, #32]
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <main+0x5cc>)
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0310 	and.w	r3, r3, #16
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <main+0x514>
 80010b6:	2331      	movs	r3, #49	; 0x31
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e001      	b.n	80010c0 <main+0x518>
 80010bc:	2330      	movs	r3, #48	; 0x30
 80010be:	61fb      	str	r3, [r7, #28]
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <main+0x5cc>)
 80010c2:	791b      	ldrb	r3, [r3, #4]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 0308 	and.w	r3, r3, #8
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <main+0x52c>
 80010ce:	2331      	movs	r3, #49	; 0x31
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	e001      	b.n	80010d8 <main+0x530>
 80010d4:	2330      	movs	r3, #48	; 0x30
 80010d6:	61bb      	str	r3, [r7, #24]
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <main+0x5cc>)
 80010da:	791b      	ldrb	r3, [r3, #4]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 0304 	and.w	r3, r3, #4
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <main+0x544>
 80010e6:	2331      	movs	r3, #49	; 0x31
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e001      	b.n	80010f0 <main+0x548>
 80010ec:	2330      	movs	r3, #48	; 0x30
 80010ee:	617b      	str	r3, [r7, #20]
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <main+0x5cc>)
 80010f2:	791b      	ldrb	r3, [r3, #4]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0302 	and.w	r3, r3, #2
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <main+0x55c>
 80010fe:	2331      	movs	r3, #49	; 0x31
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	e001      	b.n	8001108 <main+0x560>
 8001104:	2330      	movs	r3, #48	; 0x30
 8001106:	613b      	str	r3, [r7, #16]
			  BYTE_TO_BINARY(spi1_rx_buf[4]),
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <main+0x5cc>)
 800110a:	791b      	ldrb	r3, [r3, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <main+0x574>
 8001116:	2331      	movs	r3, #49	; 0x31
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e001      	b.n	8001120 <main+0x578>
 800111c:	2330      	movs	r3, #48	; 0x30
 800111e:	60fb      	str	r3, [r7, #12]
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <main+0x5cc>)
 8001122:	795b      	ldrb	r3, [r3, #5]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	b25b      	sxtb	r3, r3
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001128:	2b00      	cmp	r3, #0
 800112a:	da02      	bge.n	8001132 <main+0x58a>
 800112c:	2331      	movs	r3, #49	; 0x31
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	e001      	b.n	8001136 <main+0x58e>
 8001132:	2330      	movs	r3, #48	; 0x30
 8001134:	60bb      	str	r3, [r7, #8]
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <main+0x5cc>)
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f003 0340 	and.w	r3, r3, #64	; 0x40
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <main+0x5a2>
 8001144:	2331      	movs	r3, #49	; 0x31
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	e001      	b.n	800114e <main+0x5a6>
 800114a:	2330      	movs	r3, #48	; 0x30
 800114c:	607b      	str	r3, [r7, #4]
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <main+0x5cc>)
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f003 0320 	and.w	r3, r3, #32
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <main+0x5b8>
 800115c:	2631      	movs	r6, #49	; 0x31
 800115e:	e000      	b.n	8001162 <main+0x5ba>
 8001160:	2630      	movs	r6, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <main+0x5cc>)
 8001164:	795b      	ldrb	r3, [r3, #5]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f003 0310 	and.w	r3, r3, #16
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <main+0x5d0>
 8001170:	2531      	movs	r5, #49	; 0x31
 8001172:	e002      	b.n	800117a <main+0x5d2>
 8001174:	20000438 	.word	0x20000438
 8001178:	2530      	movs	r5, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <main+0x6f0>)
 800117c:	795b      	ldrb	r3, [r3, #5]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 0308 	and.w	r3, r3, #8
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <main+0x5e4>
 8001188:	2431      	movs	r4, #49	; 0x31
 800118a:	e000      	b.n	800118e <main+0x5e6>
 800118c:	2430      	movs	r4, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <main+0x6f0>)
 8001190:	795b      	ldrb	r3, [r3, #5]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f003 0304 	and.w	r3, r3, #4
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <main+0x5f8>
 800119c:	2031      	movs	r0, #49	; 0x31
 800119e:	e000      	b.n	80011a2 <main+0x5fa>
 80011a0:	2030      	movs	r0, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <main+0x6f0>)
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 0302 	and.w	r3, r3, #2
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <main+0x60c>
 80011b0:	2131      	movs	r1, #49	; 0x31
 80011b2:	e000      	b.n	80011b6 <main+0x60e>
 80011b4:	2130      	movs	r1, #48	; 0x30
			  BYTE_TO_BINARY(spi1_rx_buf[5]), lego);
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <main+0x6f0>)
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0301 	and.w	r3, r3, #1
	  printf(""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN""BYTE_TO_BINARY_PATTERN"\t%d\n",
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <main+0x620>
 80011c4:	2231      	movs	r2, #49	; 0x31
 80011c6:	e000      	b.n	80011ca <main+0x622>
 80011c8:	2230      	movs	r2, #48	; 0x30
 80011ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80011ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80011d0:	922c      	str	r2, [sp, #176]	; 0xb0
 80011d2:	912b      	str	r1, [sp, #172]	; 0xac
 80011d4:	902a      	str	r0, [sp, #168]	; 0xa8
 80011d6:	9429      	str	r4, [sp, #164]	; 0xa4
 80011d8:	9528      	str	r5, [sp, #160]	; 0xa0
 80011da:	9627      	str	r6, [sp, #156]	; 0x9c
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	9326      	str	r3, [sp, #152]	; 0x98
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	9325      	str	r3, [sp, #148]	; 0x94
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	9324      	str	r3, [sp, #144]	; 0x90
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	9322      	str	r3, [sp, #136]	; 0x88
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	9321      	str	r3, [sp, #132]	; 0x84
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	9320      	str	r3, [sp, #128]	; 0x80
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	931e      	str	r3, [sp, #120]	; 0x78
 8001200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001202:	931d      	str	r3, [sp, #116]	; 0x74
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	931c      	str	r3, [sp, #112]	; 0x70
 8001208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120a:	931b      	str	r3, [sp, #108]	; 0x6c
 800120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120e:	931a      	str	r3, [sp, #104]	; 0x68
 8001210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001212:	9319      	str	r3, [sp, #100]	; 0x64
 8001214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001216:	9318      	str	r3, [sp, #96]	; 0x60
 8001218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800121a:	9317      	str	r3, [sp, #92]	; 0x5c
 800121c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800121e:	9316      	str	r3, [sp, #88]	; 0x58
 8001220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001222:	9315      	str	r3, [sp, #84]	; 0x54
 8001224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001226:	9314      	str	r3, [sp, #80]	; 0x50
 8001228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800122a:	9313      	str	r3, [sp, #76]	; 0x4c
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	9312      	str	r3, [sp, #72]	; 0x48
 8001230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001232:	9311      	str	r3, [sp, #68]	; 0x44
 8001234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001236:	9310      	str	r3, [sp, #64]	; 0x40
 8001238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800123a:	930f      	str	r3, [sp, #60]	; 0x3c
 800123c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800123e:	930e      	str	r3, [sp, #56]	; 0x38
 8001240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001242:	930d      	str	r3, [sp, #52]	; 0x34
 8001244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001246:	930c      	str	r3, [sp, #48]	; 0x30
 8001248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800124a:	930b      	str	r3, [sp, #44]	; 0x2c
 800124c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800124e:	930a      	str	r3, [sp, #40]	; 0x28
 8001250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001252:	9309      	str	r3, [sp, #36]	; 0x24
 8001254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001256:	9308      	str	r3, [sp, #32]
 8001258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800125c:	9307      	str	r3, [sp, #28]
 800125e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001262:	9306      	str	r3, [sp, #24]
 8001264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001268:	9305      	str	r3, [sp, #20]
 800126a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800126e:	9304      	str	r3, [sp, #16]
 8001270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001274:	9303      	str	r3, [sp, #12]
 8001276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4643      	mov	r3, r8
 800128a:	4672      	mov	r2, lr
 800128c:	4661      	mov	r1, ip
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <main+0x6f4>)
 8001290:	f005 fa14 	bl	80066bc <iprintf>
  {
 8001294:	e51f      	b.n	8000cd6 <main+0x12e>
 8001296:	bf00      	nop
 8001298:	20000438 	.word	0x20000438
 800129c:	08008a10 	.word	0x08008a10

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09a      	sub	sp, #104	; 0x68
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012aa:	2228      	movs	r2, #40	; 0x28
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 fd92 	bl	8005dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	222c      	movs	r2, #44	; 0x2c
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fd84 	bl	8005dd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012de:	2301      	movs	r3, #1
 80012e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80012ec:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80012f0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fb26 	bl	8002948 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001302:	f000 fb0b 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001320:	2102      	movs	r1, #2
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fb4e 	bl	80039c4 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800132e:	f000 faf5 	bl	800191c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001332:	2302      	movs	r3, #2
 8001334:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fd77 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001348:	f000 fae8 	bl	800191c <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3768      	adds	r7, #104	; 0x68
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_SPI1_Init+0x74>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <MX_SPI1_Init+0x78>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_SPI1_Init+0x74>)
 8001360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_SPI1_Init+0x74>)
 800136e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001372:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_SPI1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_SPI1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_SPI1_Init+0x74>)
 8001382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001386:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_SPI1_Init+0x74>)
 800138a:	2210      	movs	r2, #16
 800138c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_SPI1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_SPI1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_SPI1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_SPI1_Init+0x74>)
 80013a2:	2207      	movs	r2, #7
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_SPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_SPI1_Init+0x74>)
 80013ae:	2208      	movs	r2, #8
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_SPI1_Init+0x74>)
 80013b4:	f002 feb0 	bl	8004118 <HAL_SPI_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013be:	f000 faad 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001f8 	.word	0x200001f8
 80013cc:	40013000 	.word	0x40013000

080013d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_SPI2_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_SPI2_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_SPI2_Init+0x74>)
 80013dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_SPI2_Init+0x74>)
 80013e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_SPI2_Init+0x74>)
 80013ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_SPI2_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_SPI2_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_SPI2_Init+0x74>)
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001404:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_SPI2_Init+0x74>)
 8001408:	2210      	movs	r2, #16
 800140a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_SPI2_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_SPI2_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_SPI2_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_SPI2_Init+0x74>)
 8001420:	2207      	movs	r2, #7
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_SPI2_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_SPI2_Init+0x74>)
 800142c:	2208      	movs	r2, #8
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_SPI2_Init+0x74>)
 8001432:	f002 fe71 	bl	8004118 <HAL_SPI_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800143c:	f000 fa6e 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000025c 	.word	0x2000025c
 8001448:	40003800 	.word	0x40003800

0800144c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_TIM13_Init+0x40>)
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_TIM13_Init+0x44>)
 8001454:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_TIM13_Init+0x40>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_TIM13_Init+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = TIM13_COUNT_PERIOD;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_TIM13_Init+0x40>)
 8001464:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001468:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_TIM13_Init+0x40>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_TIM13_Init+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_TIM13_Init+0x40>)
 8001478:	f003 fbde 	bl	8004c38 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001482:	f000 fa4b 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002c0 	.word	0x200002c0
 8001490:	40001c00 	.word	0x40001c00

08001494 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_TIM14_Init+0x94>)
 80014ae:	4a1f      	ldr	r2, [pc, #124]	; (800152c <MX_TIM14_Init+0x98>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM14_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_TIM14_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = TIM14_COUNT_PERIOD;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_TIM14_Init+0x94>)
 80014c0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80014c4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_TIM14_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_TIM14_Init+0x94>)
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80014d2:	4815      	ldr	r0, [pc, #84]	; (8001528 <MX_TIM14_Init+0x94>)
 80014d4:	f003 fbb0 	bl	8004c38 <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80014de:	f000 fa1d 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_TIM14_Init+0x94>)
 80014e4:	f003 fc58 	bl	8004d98 <HAL_TIM_OC_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80014ee:	f000 fa15 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80014f2:	2330      	movs	r3, #48	; 0x30
 80014f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM14_Init+0x94>)
 800150a:	f003 fd69 	bl	8004fe0 <HAL_TIM_OC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001514:	f000 fa02 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM14_Init+0x94>)
 800151a:	f000 fb21 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000030c 	.word	0x2000030c
 800152c:	40002000 	.word	0x40002000

08001530 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b090      	sub	sp, #64	; 0x40
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2220      	movs	r2, #32
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fc41 	bl	8005dd8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <MX_TIM16_Init+0xe8>)
 8001558:	4a30      	ldr	r2, [pc, #192]	; (800161c <MX_TIM16_Init+0xec>)
 800155a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800155c:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <MX_TIM16_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <MX_TIM16_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_COUNT_PERIOD;
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <MX_TIM16_Init+0xe8>)
 800156a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800156e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <MX_TIM16_Init+0xe8>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <MX_TIM16_Init+0xe8>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800157c:	4b26      	ldr	r3, [pc, #152]	; (8001618 <MX_TIM16_Init+0xe8>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001582:	4825      	ldr	r0, [pc, #148]	; (8001618 <MX_TIM16_Init+0xe8>)
 8001584:	f003 fb58 	bl	8004c38 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800158e:	f000 f9c5 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001592:	4821      	ldr	r0, [pc, #132]	; (8001618 <MX_TIM16_Init+0xe8>)
 8001594:	f003 fc00 	bl	8004d98 <HAL_TIM_OC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800159e:	f000 f9bd 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80015a2:	2330      	movs	r3, #48	; 0x30
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_TIM16_Init+0xe8>)
 80015c8:	f003 fd0a 	bl	8004fe0 <HAL_TIM_OC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80015d2:	f000 f9a3 	bl	800191c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM16_Init+0xe8>)
 80015fa:	f003 ff65 	bl	80054c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001604:	f000 f98a 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM16_Init+0xe8>)
 800160a:	f000 faa9 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000358 	.word	0x20000358
 800161c:	40014400 	.word	0x40014400

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <MX_USART2_UART_Init+0x5c>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001664:	f003 ff82 	bl	800556c <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800166e:	f000 f955 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200003a4 	.word	0x200003a4
 800167c:	40004400 	.word	0x40004400

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <MX_GPIO_Init+0x15c>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a50      	ldr	r2, [pc, #320]	; (80017dc <MX_GPIO_Init+0x15c>)
 800169c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4a44      	ldr	r2, [pc, #272]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d0:	6153      	str	r3, [r2, #20]
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <MX_GPIO_Init+0x15c>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f001 f8d8 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f244 01c0 	movw	r1, #16576	; 0x40c0
 800170a:	4835      	ldr	r0, [pc, #212]	; (80017e0 <MX_GPIO_Init+0x160>)
 800170c:	f001 f8d2 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001710:	2310      	movs	r3, #16
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f000 ff31 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4827      	ldr	r0, [pc, #156]	; (80017e0 <MX_GPIO_Init+0x160>)
 8001744:	f000 ff24 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	481f      	ldr	r0, [pc, #124]	; (80017e0 <MX_GPIO_Init+0x160>)
 8001762:	f000 ff15 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f000 ff05 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001786:	23c0      	movs	r3, #192	; 0xc0
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MX_GPIO_Init+0x160>)
 800179e:	f000 fef7 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80017b4:	2301      	movs	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4808      	ldr	r0, [pc, #32]	; (80017e0 <MX_GPIO_Init+0x160>)
 80017c0:	f000 fee6 	bl	8002590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	2007      	movs	r0, #7
 80017ca:	f000 feaa 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017ce:	2007      	movs	r0, #7
 80017d0:	f000 fec3 	bl	800255a <HAL_NVIC_EnableIRQ>

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400

080017e4 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 80017ec:	1d39      	adds	r1, r7, #4
 80017ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f2:	2201      	movs	r2, #1
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <__io_putchar+0x20>)
 80017f6:	f003 ff07 	bl	8005608 <HAL_UART_Transmit>

    return ch;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200003a4 	.word	0x200003a4

08001808 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	; 0x38
 800180c:	af02      	add	r7, sp, #8
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
	/* @todo correct EXTI pin */
    if ( GPIO_Pin == GPIO_PIN_6) {
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	2b40      	cmp	r3, #64	; 0x40
 8001816:	d171      	bne.n	80018fc <HAL_GPIO_EXTI_Callback+0xf4>
    	if(setup_done){
 8001818:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <HAL_GPIO_EXTI_Callback+0xfc>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d06c      	beq.n	80018fc <HAL_GPIO_EXTI_Callback+0xf4>
    		uint8_t val[5] = {0,0,0,0,0};
 8001822:	4a39      	ldr	r2, [pc, #228]	; (8001908 <HAL_GPIO_EXTI_Callback+0x100>)
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182c:	6018      	str	r0, [r3, #0]
 800182e:	3304      	adds	r3, #4
 8001830:	7019      	strb	r1, [r3, #0]
    		uint8_t cmd[5] = {0,0,0,0,0};
 8001832:	4a35      	ldr	r2, [pc, #212]	; (8001908 <HAL_GPIO_EXTI_Callback+0x100>)
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800183c:	6018      	str	r0, [r3, #0]
 800183e:	3304      	adds	r3, #4
 8001840:	7019      	strb	r1, [r3, #0]
    		cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 8001842:	2341      	movs	r3, #65	; 0x41
 8001844:	753b      	strb	r3, [r7, #20]
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2110      	movs	r1, #16
 800184a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184e:	f001 f831 	bl	80028b4 <HAL_GPIO_WritePin>
    		// non-blocking "HAL_SPI_TransmitReceive_IT" does not work
    		// because we need to create CS signal manually
    		// the timout therefore must not be greater than 1/fs
    		// e.g. at 300 Hz --> 3ms
    		HAL_SPI_TransmitReceive(&hspi1, &cmd[0], &val[0], 5, 1);
 8001852:	f107 021c 	add.w	r2, r7, #28
 8001856:	f107 0114 	add.w	r1, r7, #20
 800185a:	2301      	movs	r3, #1
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2305      	movs	r3, #5
 8001860:	482a      	ldr	r0, [pc, #168]	; (800190c <HAL_GPIO_EXTI_Callback+0x104>)
 8001862:	f002 fe72 	bl	800454a <HAL_SPI_TransmitReceive>
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	2110      	movs	r1, #16
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f001 f821 	bl	80028b4 <HAL_GPIO_WritePin>
    		adc_val = (val[1] << 16) | (val[2] << 8) | val[3];
 8001872:	7f7b      	ldrb	r3, [r7, #29]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	7fbb      	ldrb	r3, [r7, #30]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	4313      	orrs	r3, r2
 800187c:	7ffa      	ldrb	r2, [r7, #31]
 800187e:	4313      	orrs	r3, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_GPIO_EXTI_Callback+0x108>)
 8001884:	601a      	str	r2, [r3, #0]

    		float volts = (float)adc_val/(8388607.0f)*3.3f;
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_GPIO_EXTI_Callback+0x108>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001892:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001914 <HAL_GPIO_EXTI_Callback+0x10c>
 8001896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001918 <HAL_GPIO_EXTI_Callback+0x110>
 800189e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    		uint8_t str[11];
    		for(int i=0; i<10; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018aa:	e008      	b.n	80018be <HAL_GPIO_EXTI_Callback+0xb6>
    			str[i] = ' ';
 80018ac:	f107 0208 	add.w	r2, r7, #8
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	4413      	add	r3, r2
 80018b4:	2220      	movs	r2, #32
 80018b6:	701a      	strb	r2, [r3, #0]
    		for(int i=0; i<10; i++)
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3301      	adds	r3, #1
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	ddf3      	ble.n	80018ac <HAL_GPIO_EXTI_Callback+0xa4>
    		int i = (int)(volts*9.0f/3.3f);
 80018c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018c8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80018cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018d0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001918 <HAL_GPIO_EXTI_Callback+0x110>
 80018d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    		str[i] = '#';
 80018e2:	f107 0208 	add.w	r2, r7, #8
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	4413      	add	r3, r2
 80018ea:	2223      	movs	r2, #35	; 0x23
 80018ec:	701a      	strb	r2, [r3, #0]
    		str[11] = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	74fb      	strb	r3, [r7, #19]
    		printf("%s\n", str);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 ff7c 	bl	80067f4 <puts>
    		//printf("%03f\n", volts);
    		//printf("%d\n", (int)adc_val);  // updated in ISR
    	}
    }
}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000042c 	.word	0x2000042c
 8001908:	08008a78 	.word	0x08008a78
 800190c:	200001f8 	.word	0x200001f8
 8001910:	20000428 	.word	0x20000428
 8001914:	4afffffe 	.word	0x4afffffe
 8001918:	40533333 	.word	0x40533333

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	e7fe      	b.n	8001924 <Error_Handler+0x8>
	...

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_MspInit+0x44>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_MspInit+0x44>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6193      	str	r3, [r2, #24]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_MspInit+0x44>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x44>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x44>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x44>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4b      	ldr	r2, [pc, #300]	; (8001abc <HAL_SPI_MspInit+0x14c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d145      	bne.n	8001a1e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a44      	ldr	r2, [pc, #272]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	6153      	str	r3, [r2, #20]
 80019b6:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019da:	2360      	movs	r3, #96	; 0x60
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ea:	2305      	movs	r3, #5
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f8:	f000 fdca 	bl	8002590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019fc:	2301      	movs	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	482b      	ldr	r0, [pc, #172]	; (8001ac4 <HAL_SPI_MspInit+0x154>)
 8001a18:	f000 fdba 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a1c:	e04a      	b.n	8001ab4 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <HAL_SPI_MspInit+0x158>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d145      	bne.n	8001ab4 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a32:	61d3      	str	r3, [r2, #28]
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4a:	6153      	str	r3, [r2, #20]
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a62:	6153      	str	r3, [r2, #20]
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_SPI_MspInit+0x150>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a82:	2305      	movs	r3, #5
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <HAL_SPI_MspInit+0x154>)
 8001a8e:	f000 fd7f 	bl	8002590 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <HAL_SPI_MspInit+0x15c>)
 8001ab0:	f000 fd6e 	bl	8002590 <HAL_GPIO_Init>
}
 8001ab4:	bf00      	nop
 8001ab6:	3738      	adds	r7, #56	; 0x38
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40013000 	.word	0x40013000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	40003800 	.word	0x40003800
 8001acc:	48000c00 	.word	0x48000c00

08001ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_TIM_Base_MspInit+0x80>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10c      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001afa:	e022      	b.n	8001b42 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <HAL_TIM_Base_MspInit+0x88>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10c      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	61d3      	str	r3, [r2, #28]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
}
 8001b1e:	e010      	b.n	8001b42 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <HAL_TIM_Base_MspInit+0x8c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10b      	bne.n	8001b42 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_TIM_Base_MspInit+0x84>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40001c00 	.word	0x40001c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40002000 	.word	0x40002000
 8001b5c:	40014400 	.word	0x40014400

08001b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d11e      	bne.n	8001bc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = FCLK_X_Pin;
 8001b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001bac:	2309      	movs	r3, #9
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_X_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bba:	f000 fce9 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001bbe:	e022      	b.n	8001c06 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM16)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_TIM_MspPostInit+0xb8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11d      	bne.n	8001c06 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6153      	str	r3, [r2, #20]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FCLK_Y_Pin;
 8001be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FCLK_Y_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c02:	f000 fcc5 	bl	8002590 <HAL_GPIO_Init>
}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40002000 	.word	0x40002000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40014400 	.word	0x40014400

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0x7c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d128      	bne.n	8001c90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	6153      	str	r3, [r2, #20]
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c6e:	230c      	movs	r3, #12
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8c:	f000 fc80 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40004400 	.word	0x40004400
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f000 fafa 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f000 fe0d 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
	return 1;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_kill>:

int _kill(int pid, int sig)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d1c:	f004 f832 	bl	8005d84 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2216      	movs	r2, #22
 8001d24:	601a      	str	r2, [r3, #0]
	return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_exit>:

void _exit (int status)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffe7 	bl	8001d12 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d44:	e7fe      	b.n	8001d44 <_exit+0x12>

08001d46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e00a      	b.n	8001d6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d58:	f3af 8000 	nop.w
 8001d5c:	4601      	mov	r1, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	60ba      	str	r2, [r7, #8]
 8001d64:	b2ca      	uxtb	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	dbf0      	blt.n	8001d58 <_read+0x12>
	}

return len;
 8001d76:	687b      	ldr	r3, [r7, #4]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e009      	b.n	8001da6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	60ba      	str	r2, [r7, #8]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd22 	bl	80017e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dbf1      	blt.n	8001d92 <_write+0x12>
	}
	return len;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_close>:

int _close(int file)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	return -1;
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de0:	605a      	str	r2, [r3, #4]
	return 0;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_isatty>:

int _isatty(int file)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
	return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <_sbrk+0x5c>)
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <_sbrk+0x60>)
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <_sbrk+0x64>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <_sbrk+0x68>)
 8001e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d207      	bcs.n	8001e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e50:	f003 ff98 	bl	8005d84 <__errno>
 8001e54:	4603      	mov	r3, r0
 8001e56:	220c      	movs	r2, #12
 8001e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	e009      	b.n	8001e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <_sbrk+0x64>)
 8001e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20008000 	.word	0x20008000
 8001e80:	00000400 	.word	0x00000400
 8001e84:	20000440 	.word	0x20000440
 8001e88:	20000458 	.word	0x20000458

08001e8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SystemInit+0x20>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <SystemInit+0x20>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <LoopForever+0x6>)
  ldr r1, =_edata
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <LoopForever+0xe>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ecc:	4c0b      	ldr	r4, [pc, #44]	; (8001efc <LoopForever+0x16>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eda:	f7ff ffd7 	bl	8001e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f003 ff57 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee2:	f7fe fe61 	bl	8000ba8 <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ee8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ef4:	08008f34 	.word	0x08008f34
  ldr r2, =_sbss
 8001ef8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001efc:	20000458 	.word	0x20000458

08001f00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_IRQHandler>

08001f02 <_MCP3561_write>:

#include "main.h"
#include "mcp3564.h"
#include "mcp3564_conf.h"

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2110      	movs	r1, #16
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f000 fccc 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	2303      	movs	r3, #3
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f002 f9a3 	bl	800426e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f30:	f000 fcc0 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_MCP3561_sread>:

uint8_t _MCP3561_sread(SPI_HandleTypeDef *hspi, uint8_t *cmd){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	uint8_t reg8[2];
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2110      	movs	r1, #16
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4e:	f000 fcb1 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, reg8, 2, MCP3561_HAL_TIMEOUT);
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	2303      	movs	r3, #3
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f002 faf3 	bl	800454a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2110      	movs	r1, #16
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f000 fca2 	bl	80028b4 <HAL_GPIO_WritePin>
	return reg8[1];
 8001f70:	7b7b      	ldrb	r3, [r7, #13]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <MCP3561_Channels>:

void MCP3561_Channels(SPI_HandleTypeDef *hspi, uint8_t ch_p, uint8_t ch_n){
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70fb      	strb	r3, [r7, #3]
 8001f86:	4613      	mov	r3, r2
 8001f88:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd[4] = {0,0,0,0};
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
	cmd[0]  = MCP3561_MUX_WRITE;
 8001f8e:	235a      	movs	r3, #90	; 0x5a
 8001f90:	733b      	strb	r3, [r7, #12]
	cmd[1]  = (ch_p << 4) | ch_n;   // [7..4] VIN+ / [3..0] VIN-
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	b25a      	sxtb	r2, r3
 8001f98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	737b      	strb	r3, [r7, #13]
	//cmd[1]  = (MCP3561_MUX_CH_IntTemp_P << 4) | MCP3561_MUX_CH_IntTemp_M;   // [7..4] VIN+ / [3..0] VIN-
	_MCP3561_write(hspi, cmd, 2);
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffa8 	bl	8001f02 <_MCP3561_write>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]

	// 8-bit CONFIG registers
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 8001fc8:	2346      	movs	r3, #70	; 0x46
 8001fca:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG0;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff92 	bl	8001f02 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 8001fde:	234a      	movs	r3, #74	; 0x4a
 8001fe0:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG1;
 8001fe2:	231c      	movs	r3, #28
 8001fe4:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	2202      	movs	r2, #2
 8001fec:	4619      	mov	r1, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff87 	bl	8001f02 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 8001ff4:	234e      	movs	r3, #78	; 0x4e
 8001ff6:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG2;
 8001ff8:	2388      	movs	r3, #136	; 0x88
 8001ffa:	727b      	strb	r3, [r7, #9]
	cmd[1] += 3; // last two bits must always be '11'
 8001ffc:	7a7b      	ldrb	r3, [r7, #9]
 8001ffe:	3303      	adds	r3, #3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	2202      	movs	r2, #2
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff78 	bl	8001f02 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8002012:	2352      	movs	r3, #82	; 0x52
 8002014:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_REG3;
 8002016:	23f0      	movs	r3, #240	; 0xf0
 8002018:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	2202      	movs	r2, #2
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff6d 	bl	8001f02 <_MCP3561_write>

	cmd[0]  = MCP3561_IRQ_WRITE;
 8002028:	2356      	movs	r3, #86	; 0x56
 800202a:	723b      	strb	r3, [r7, #8]
	cmd[1]  = MCP3561_USERCONF_IRQ_REG;
 800202c:	2306      	movs	r3, #6
 800202e:	727b      	strb	r3, [r7, #9]
	_MCP3561_write(hspi, cmd, 2);
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	2202      	movs	r2, #2
 8002036:	4619      	mov	r1, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff62 	bl	8001f02 <_MCP3561_write>
	// configure SCAN mode to automatically cycle through channels
	// only available for MCP3562 and MCP3564, and only for certain input combinations
	// @see Datasheet Table 5-14 on p. 54
	#ifdef MCP3561_USERCONF_SCAN_ENABLE
		uint32_t reg_val;
		reg_val = MCP3561_USERCONF_SCAN_REG;
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MCP3561_Init+0xe4>)
 8002040:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_SCAN_WRITE;
 8002042:	235e      	movs	r3, #94	; 0x5e
 8002044:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	b2db      	uxtb	r3, r3
 800204c:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b2db      	uxtb	r3, r3
 8002054:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	2204      	movs	r2, #4
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff4c 	bl	8001f02 <_MCP3561_write>

		reg_val = MCP3561_USERCONF_TIMER_VAL;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MCP3561_Init+0xe8>)
 800206c:	60fb      	str	r3, [r7, #12]
		cmd[0] = MCP3561_TIMER_WRITE;
 800206e:	2362      	movs	r3, #98	; 0x62
 8002070:	723b      	strb	r3, [r7, #8]
		cmd[1] = (uint8_t)((reg_val >> 16) & 0xff);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	727b      	strb	r3, [r7, #9]
		cmd[2] = (uint8_t)((reg_val >>  8) & 0xff);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	b2db      	uxtb	r3, r3
 8002080:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)((reg_val)       & 0xff);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	72fb      	strb	r3, [r7, #11]
		_MCP3561_write(hspi, cmd, 4);
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	2204      	movs	r2, #4
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff36 	bl	8001f02 <_MCP3561_write>
	#endif

}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0020000b 	.word	0x0020000b
 80020a4:	00126fce 	.word	0x00126fce

080020a8 <MCP3561_PrintRegisters>:

/**
 * @brief prints the configuration registers content
 */
void MCP3561_PrintRegisters(SPI_HandleTypeDef *hspi){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	6078      	str	r0, [r7, #4]
	uint8_t reg8 = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd [5] = {0,0,0,0,0};
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <MCP3561_PrintRegisters+0x168>)
 80020b6:	f107 0310 	add.w	r3, r7, #16
 80020ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020be:	6018      	str	r0, [r3, #0]
 80020c0:	3304      	adds	r3, #4
 80020c2:	7019      	strb	r1, [r3, #0]

	cmd[0] = MCP3561_CONFIG0_SREAD;
 80020c4:	2345      	movs	r3, #69	; 0x45
 80020c6:	743b      	strb	r3, [r7, #16]
	reg8 = _MCP3561_sread(hspi, cmd);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff34 	bl	8001f3c <_MCP3561_sread>
 80020d4:	4603      	mov	r3, r0
 80020d6:	75fb      	strb	r3, [r7, #23]
	printf("CONF0: %02x\n", reg8);
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	4619      	mov	r1, r3
 80020dc:	484d      	ldr	r0, [pc, #308]	; (8002214 <MCP3561_PrintRegisters+0x16c>)
 80020de:	f004 faed 	bl	80066bc <iprintf>

	cmd[0] = MCP3561_CONFIG1_SREAD;
 80020e2:	2349      	movs	r3, #73	; 0x49
 80020e4:	743b      	strb	r3, [r7, #16]
	reg8 = _MCP3561_sread(hspi, cmd);
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff25 	bl	8001f3c <_MCP3561_sread>
 80020f2:	4603      	mov	r3, r0
 80020f4:	75fb      	strb	r3, [r7, #23]
	printf("CONF1: %02x\n", reg8);
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	4619      	mov	r1, r3
 80020fa:	4847      	ldr	r0, [pc, #284]	; (8002218 <MCP3561_PrintRegisters+0x170>)
 80020fc:	f004 fade 	bl	80066bc <iprintf>

	cmd[0] = MCP3561_CONFIG2_SREAD;
 8002100:	234d      	movs	r3, #77	; 0x4d
 8002102:	743b      	strb	r3, [r7, #16]
	reg8 = _MCP3561_sread(hspi, cmd);
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff16 	bl	8001f3c <_MCP3561_sread>
 8002110:	4603      	mov	r3, r0
 8002112:	75fb      	strb	r3, [r7, #23]
	printf("CONF2: %02x\n", reg8);
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	4619      	mov	r1, r3
 8002118:	4840      	ldr	r0, [pc, #256]	; (800221c <MCP3561_PrintRegisters+0x174>)
 800211a:	f004 facf 	bl	80066bc <iprintf>

	cmd[0] = MCP3561_CONFIG3_SREAD;
 800211e:	2351      	movs	r3, #81	; 0x51
 8002120:	743b      	strb	r3, [r7, #16]
	reg8 = _MCP3561_sread(hspi, cmd);
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff07 	bl	8001f3c <_MCP3561_sread>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
	printf("CONF3: %02x\n", reg8);
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	4619      	mov	r1, r3
 8002136:	483a      	ldr	r0, [pc, #232]	; (8002220 <MCP3561_PrintRegisters+0x178>)
 8002138:	f004 fac0 	bl	80066bc <iprintf>

	cmd[0] = MCP3561_IRQ_SREAD;
 800213c:	2355      	movs	r3, #85	; 0x55
 800213e:	743b      	strb	r3, [r7, #16]
	reg8 = _MCP3561_sread(hspi, cmd);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fef8 	bl	8001f3c <_MCP3561_sread>
 800214c:	4603      	mov	r3, r0
 800214e:	75fb      	strb	r3, [r7, #23]
	printf("IRQ  : %02x\n", reg8);
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	4619      	mov	r1, r3
 8002154:	4833      	ldr	r0, [pc, #204]	; (8002224 <MCP3561_PrintRegisters+0x17c>)
 8002156:	f004 fab1 	bl	80066bc <iprintf>

	cmd[0] = MCP3561_MUX_SREAD;
 800215a:	2359      	movs	r3, #89	; 0x59
 800215c:	743b      	strb	r3, [r7, #16]
	reg8 = _MCP3561_sread(hspi, cmd);
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fee9 	bl	8001f3c <_MCP3561_sread>
 800216a:	4603      	mov	r3, r0
 800216c:	75fb      	strb	r3, [r7, #23]
	printf("MUX  : %02x\n", reg8);
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	4619      	mov	r1, r3
 8002172:	482d      	ldr	r0, [pc, #180]	; (8002228 <MCP3561_PrintRegisters+0x180>)
 8002174:	f004 faa2 	bl	80066bc <iprintf>

	cmd[0] = MCP3561_SCAN_SREAD;
 8002178:	235d      	movs	r3, #93	; 0x5d
 800217a:	743b      	strb	r3, [r7, #16]
	uint8_t resp [5] = {0,0,0,0,0};
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <MCP3561_PrintRegisters+0x168>)
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002186:	6018      	str	r0, [r3, #0]
 8002188:	3304      	adds	r3, #4
 800218a:	7019      	strb	r1, [r3, #0]

	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2110      	movs	r1, #16
 8002190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002194:	f000 fb8e 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, resp, 4, MCP3561_HAL_TIMEOUT);
 8002198:	f107 0208 	add.w	r2, r7, #8
 800219c:	f107 0110 	add.w	r1, r7, #16
 80021a0:	2303      	movs	r3, #3
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2304      	movs	r3, #4
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f002 f9cf 	bl	800454a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2110      	movs	r1, #16
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b4:	f000 fb7e 	bl	80028b4 <HAL_GPIO_WritePin>

	printf("SCAN : %02x %02x %02x\n", resp[1], resp[2], resp[3]);
 80021b8:	7a7b      	ldrb	r3, [r7, #9]
 80021ba:	4619      	mov	r1, r3
 80021bc:	7abb      	ldrb	r3, [r7, #10]
 80021be:	461a      	mov	r2, r3
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	481a      	ldr	r0, [pc, #104]	; (800222c <MCP3561_PrintRegisters+0x184>)
 80021c4:	f004 fa7a 	bl	80066bc <iprintf>

	cmd[0] = MCP3561_TIMER_SREAD;
 80021c8:	2361      	movs	r3, #97	; 0x61
 80021ca:	743b      	strb	r3, [r7, #16]

	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2110      	movs	r1, #16
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d4:	f000 fb6e 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, cmd, resp, 4, MCP3561_HAL_TIMEOUT);
 80021d8:	f107 0208 	add.w	r2, r7, #8
 80021dc:	f107 0110 	add.w	r1, r7, #16
 80021e0:	2303      	movs	r3, #3
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2304      	movs	r3, #4
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f002 f9af 	bl	800454a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	2110      	movs	r1, #16
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f000 fb5e 	bl	80028b4 <HAL_GPIO_WritePin>

	printf("TIMER: %02x %02x %02x\n", resp[1], resp[2], resp[3]);
 80021f8:	7a7b      	ldrb	r3, [r7, #9]
 80021fa:	4619      	mov	r1, r3
 80021fc:	7abb      	ldrb	r3, [r7, #10]
 80021fe:	461a      	mov	r2, r3
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	480b      	ldr	r0, [pc, #44]	; (8002230 <MCP3561_PrintRegisters+0x188>)
 8002204:	f004 fa5a 	bl	80066bc <iprintf>

	/* @todo all the remaining registers */
}
 8002208:	bf00      	nop
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	08008b10 	.word	0x08008b10
 8002214:	08008a80 	.word	0x08008a80
 8002218:	08008a90 	.word	0x08008a90
 800221c:	08008aa0 	.word	0x08008aa0
 8002220:	08008ab0 	.word	0x08008ab0
 8002224:	08008ac0 	.word	0x08008ac0
 8002228:	08008ad0 	.word	0x08008ad0
 800222c:	08008ae0 	.word	0x08008ae0
 8002230:	08008af8 	.word	0x08008af8

08002234 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 800223c:	237a      	movs	r3, #122	; 0x7a
 800223e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 8002240:	f107 010f 	add.w	r1, r7, #15
 8002244:	230a      	movs	r3, #10
 8002246:	2201      	movs	r2, #1
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f002 f810 	bl	800426e <HAL_SPI_Transmit>
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_Init+0x28>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_Init+0x28>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f000 f94f 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226e:	200f      	movs	r0, #15
 8002270:	f000 f808 	bl	8002284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002274:	f7ff fb58 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f967 	bl	8002576 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 f92f 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000008 	.word	0x20000008
 8002308:	20000444 	.word	0x20000444

0800230c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000444 	.word	0x20000444

08002324 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff ffee 	bl	800230c <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffde 	bl	800230c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000008 	.word	0x20000008

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4907      	ldr	r1, [pc, #28]	; (8002408 <__NVIC_EnableIRQ+0x38>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff29 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff3e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff31 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	e154      	b.n	800284a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8146 	beq.w	8002844 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d005      	beq.n	80025d0 <HAL_GPIO_Init+0x40>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d130      	bne.n	8002632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002606:	2201      	movs	r2, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0201 	and.w	r2, r3, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b03      	cmp	r3, #3
 800263c:	d017      	beq.n	800266e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2203      	movs	r2, #3
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d123      	bne.n	80026c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	220f      	movs	r2, #15
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	6939      	ldr	r1, [r7, #16]
 80026be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0203 	and.w	r2, r3, #3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80a0 	beq.w	8002844 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002704:	4b58      	ldr	r3, [pc, #352]	; (8002868 <HAL_GPIO_Init+0x2d8>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_GPIO_Init+0x2d8>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b55      	ldr	r3, [pc, #340]	; (8002868 <HAL_GPIO_Init+0x2d8>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800271c:	4a53      	ldr	r2, [pc, #332]	; (800286c <HAL_GPIO_Init+0x2dc>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002746:	d019      	beq.n	800277c <HAL_GPIO_Init+0x1ec>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a49      	ldr	r2, [pc, #292]	; (8002870 <HAL_GPIO_Init+0x2e0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_GPIO_Init+0x1e8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a48      	ldr	r2, [pc, #288]	; (8002874 <HAL_GPIO_Init+0x2e4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00d      	beq.n	8002774 <HAL_GPIO_Init+0x1e4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_GPIO_Init+0x2e8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <HAL_GPIO_Init+0x1e0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_GPIO_Init+0x2ec>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_GPIO_Init+0x1dc>
 8002768:	2304      	movs	r3, #4
 800276a:	e008      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 800276c:	2305      	movs	r3, #5
 800276e:	e006      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002770:	2303      	movs	r3, #3
 8002772:	e004      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002774:	2302      	movs	r3, #2
 8002776:	e002      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 800277c:	2300      	movs	r3, #0
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	f002 0203 	and.w	r2, r2, #3
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	4093      	lsls	r3, r2
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800278e:	4937      	ldr	r1, [pc, #220]	; (800286c <HAL_GPIO_Init+0x2dc>)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3302      	adds	r3, #2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279c:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027c0:	4a2f      	ldr	r2, [pc, #188]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027ea:	4a25      	ldr	r2, [pc, #148]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800283e:	4a10      	ldr	r2, [pc, #64]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f aea3 	bne.w	80025a0 <HAL_GPIO_Init+0x10>
  }
}
 800285a:	bf00      	nop
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40021000 	.word	0x40021000
 800286c:	40010000 	.word	0x40010000
 8002870:	48000400 	.word	0x48000400
 8002874:	48000800 	.word	0x48000800
 8002878:	48000c00 	.word	0x48000c00
 800287c:	48001000 	.word	0x48001000
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e001      	b.n	80028a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43d9      	mvns	r1, r3
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	400b      	ands	r3, r1
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe ff66 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800294e:	af00      	add	r7, sp, #0
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002958:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f001 b823 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 817d 	beq.w	8002c7e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002984:	4bbc      	ldr	r3, [pc, #752]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b04      	cmp	r3, #4
 800298e:	d00c      	beq.n	80029aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002990:	4bb9      	ldr	r3, [pc, #740]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d15c      	bne.n	8002a56 <HAL_RCC_OscConfig+0x10e>
 800299c:	4bb6      	ldr	r3, [pc, #728]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d155      	bne.n	8002a56 <HAL_RCC_OscConfig+0x10e>
 80029aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x94>
 80029d6:	4ba8      	ldr	r3, [pc, #672]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e015      	b.n	8002a08 <HAL_RCC_OscConfig+0xc0>
 80029dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a04:	4b9c      	ldr	r3, [pc, #624]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a1c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f042 0220 	orr.w	r2, r2, #32
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f002 021f 	and.w	r2, r2, #31
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 811f 	beq.w	8002c7c <HAL_RCC_OscConfig+0x334>
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 8116 	bne.w	8002c7c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f000 bfaf 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x12e>
 8002a68:	4b83      	ldr	r3, [pc, #524]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a82      	ldr	r2, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e036      	b.n	8002ae4 <HAL_RCC_OscConfig+0x19c>
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x158>
 8002a86:	4b7c      	ldr	r3, [pc, #496]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7b      	ldr	r2, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a78      	ldr	r2, [pc, #480]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e021      	b.n	8002ae4 <HAL_RCC_OscConfig+0x19c>
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x184>
 8002ab2:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a70      	ldr	r2, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6e      	ldr	r3, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6d      	ldr	r2, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x19c>
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a66      	ldr	r2, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	f023 020f 	bic.w	r2, r3, #15
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	495f      	ldr	r1, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d059      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7ff fbfd 	bl	800230c <HAL_GetTick>
 8002b12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b18:	f7ff fbf8 	bl	800230c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d902      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	f000 bf43 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
 8002b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b32:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b42:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0x218>
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e015      	b.n	8002b8c <HAL_RCC_OscConfig+0x244>
 8002b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b64:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b90:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ba0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ab      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1d0>
 8002bc0:	e05d      	b.n	8002c7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fba3 	bl	800230c <HAL_GetTick>
 8002bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff fb9e 	bl	800230c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d902      	bls.n	8002be2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f000 bee9 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
 8002be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bf6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d102      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2cc>
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	e015      	b.n	8002c40 <HAL_RCC_OscConfig+0x2f8>
 8002c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c18:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c44:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c48:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c4c:	fa92 f2a2 	rbit	r2, r2
 8002c50:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c54:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c58:	fab2 f282 	clz	r2, r2
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	f042 0220 	orr.w	r2, r2, #32
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	f002 021f 	and.w	r2, r2, #31
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ab      	bne.n	8002bcc <HAL_RCC_OscConfig+0x284>
 8002c74:	e003      	b.n	8002c7e <HAL_RCC_OscConfig+0x336>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 817d 	beq.w	8002f8e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c94:	4ba6      	ldr	r3, [pc, #664]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ca0:	4ba3      	ldr	r3, [pc, #652]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d172      	bne.n	8002d92 <HAL_RCC_OscConfig+0x44a>
 8002cac:	4ba0      	ldr	r3, [pc, #640]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d16c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x44a>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x3a0>
 8002ce2:	4b93      	ldr	r3, [pc, #588]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e013      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c8>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d0c:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2202      	movs	r2, #2
 8002d12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d1a:	fa92 f2a2 	rbit	r2, r2
 8002d1e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d22:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d26:	fab2 f282 	clz	r2, r2
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	f042 0220 	orr.w	r2, r2, #32
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f002 021f 	and.w	r2, r2, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCC_OscConfig+0x410>
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f000 be2e 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b75      	ldr	r3, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	21f8      	movs	r1, #248	; 0xf8
 8002d6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d76:	fa91 f1a1 	rbit	r1, r1
 8002d7a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d82:	fab1 f181 	clz	r1, r1
 8002d86:	b2c9      	uxtb	r1, r1
 8002d88:	408b      	lsls	r3, r1
 8002d8a:	4969      	ldr	r1, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d90:	e0fd      	b.n	8002f8e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8088 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x56c>
 8002da4:	2301      	movs	r3, #1
 8002da6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002db6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2301      	movs	r3, #1
 8002dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fa9c 	bl	800230c <HAL_GetTick>
 8002dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7ff fa97 	bl	800230c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	f000 bde2 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
 8002df0:	2302      	movs	r3, #2
 8002df2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4d8>
 8002e1a:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e013      	b.n	8002e48 <HAL_RCC_OscConfig+0x500>
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e32:	2302      	movs	r3, #2
 8002e34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e52:	fa92 f2a2 	rbit	r2, r2
 8002e56:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e5a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e5e:	fab2 f282 	clz	r2, r2
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	f042 0220 	orr.w	r2, r2, #32
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	f002 021f 	and.w	r2, r2, #31
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f202 	lsl.w	r2, r1, r2
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0af      	beq.n	8002dda <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	21f8      	movs	r1, #248	; 0xf8
 8002e90:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e98:	fa91 f1a1 	rbit	r1, r1
 8002e9c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ea0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ea4:	fab1 f181 	clz	r1, r1
 8002ea8:	b2c9      	uxtb	r1, r1
 8002eaa:	408b      	lsls	r3, r1
 8002eac:	4920      	ldr	r1, [pc, #128]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
 8002eb2:	e06c      	b.n	8002f8e <HAL_RCC_OscConfig+0x646>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ec6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ed4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	461a      	mov	r2, r3
 8002edc:	2300      	movs	r3, #0
 8002ede:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fa14 	bl	800230c <HAL_GetTick>
 8002ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7ff fa0f 	bl	800230c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	f000 bd5a 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d104      	bne.n	8002f34 <HAL_RCC_OscConfig+0x5ec>
 8002f2a:	4b01      	ldr	r3, [pc, #4]	; (8002f30 <HAL_RCC_OscConfig+0x5e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e015      	b.n	8002f5c <HAL_RCC_OscConfig+0x614>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	2302      	movs	r3, #2
 8002f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f46:	2302      	movs	r3, #2
 8002f48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f58:	4bc8      	ldr	r3, [pc, #800]	; (800327c <HAL_RCC_OscConfig+0x934>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f66:	fa92 f2a2 	rbit	r2, r2
 8002f6a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f72:	fab2 f282 	clz	r2, r2
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f042 0220 	orr.w	r2, r2, #32
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f002 021f 	and.w	r2, r2, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ad      	bne.n	8002eea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8110 	beq.w	80031c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d079      	beq.n	80030a8 <HAL_RCC_OscConfig+0x760>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4bab      	ldr	r3, [pc, #684]	; (8003280 <HAL_RCC_OscConfig+0x938>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fde:	f7ff f995 	bl	800230c <HAL_GetTick>
 8002fe2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7ff f990 	bl	800230c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d902      	bls.n	8002ffe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	f000 bcdb 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
 8002ffe:	2302      	movs	r3, #2
 8003000:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800303c:	2202      	movs	r2, #2
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003056:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003058:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCC_OscConfig+0x934>)
 800305a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003064:	2102      	movs	r1, #2
 8003066:	6019      	str	r1, [r3, #0]
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f1a3 	rbit	r1, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800307e:	6019      	str	r1, [r3, #0]
  return result;
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0a0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x6a0>
 80030a6:	e08d      	b.n	80031c4 <HAL_RCC_OscConfig+0x87c>
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030ca:	601a      	str	r2, [r3, #0]
  return result;
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x938>)
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7ff f90f 	bl	800230c <HAL_GetTick>
 80030ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f4:	f7ff f90a 	bl	800230c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d902      	bls.n	800310a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	f000 bc55 	b.w	80039b4 <HAL_RCC_OscConfig+0x106c>
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003112:	2202      	movs	r2, #2
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003136:	2202      	movs	r2, #2
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800315a:	2202      	movs	r2, #2
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003174:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_OscConfig+0x934>)
 8003178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003182:	2102      	movs	r1, #2
 8003184:	6019      	str	r1, [r3, #0]
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f1a3 	rbit	r1, r3
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800319c:	6019      	str	r1, [r3, #0]
  return result;
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d197      	bne.n	80030f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 81a1 	beq.w	800351c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e0:	4b26      	ldr	r3, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x934>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d116      	bne.n	800321a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <HAL_RCC_OscConfig+0x934>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a22      	ldr	r2, [pc, #136]	; (800327c <HAL_RCC_OscConfig+0x934>)
 80031f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f6:	61d3      	str	r3, [r2, #28]
 80031f8:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_RCC_OscConfig+0x934>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003212:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_RCC_OscConfig+0x93c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d11a      	bne.n	800325c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_RCC_OscConfig+0x93c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a16      	ldr	r2, [pc, #88]	; (8003284 <HAL_RCC_OscConfig+0x93c>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7ff f86b 	bl	800230c <HAL_GetTick>
 8003236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	e009      	b.n	8003250 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7ff f866 	bl	800230c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	; 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e3b1      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCC_OscConfig+0x93c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ef      	beq.n	800323c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10d      	bne.n	8003288 <HAL_RCC_OscConfig+0x940>
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCC_OscConfig+0x934>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a02      	ldr	r2, [pc, #8]	; (800327c <HAL_RCC_OscConfig+0x934>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e03c      	b.n	80032f4 <HAL_RCC_OscConfig+0x9ac>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	10908120 	.word	0x10908120
 8003284:	40007000 	.word	0x40007000
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x96a>
 8003298:	4bc1      	ldr	r3, [pc, #772]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4ac0      	ldr	r2, [pc, #768]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6213      	str	r3, [r2, #32]
 80032a4:	4bbe      	ldr	r3, [pc, #760]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4abd      	ldr	r2, [pc, #756]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	e020      	b.n	80032f4 <HAL_RCC_OscConfig+0x9ac>
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x994>
 80032c2:	4bb7      	ldr	r3, [pc, #732]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4ab6      	ldr	r2, [pc, #728]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	4bb4      	ldr	r3, [pc, #720]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4ab3      	ldr	r2, [pc, #716]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6213      	str	r3, [r2, #32]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0x9ac>
 80032dc:	4bb0      	ldr	r3, [pc, #704]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4aaf      	ldr	r2, [pc, #700]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	6213      	str	r3, [r2, #32]
 80032e8:	4bad      	ldr	r3, [pc, #692]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4aac      	ldr	r2, [pc, #688]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80032ee:	f023 0304 	bic.w	r3, r3, #4
 80032f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8081 	beq.w	8003408 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7ff f801 	bl	800230c <HAL_GetTick>
 800330a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	e00b      	b.n	8003328 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe fffc 	bl	800230c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e345      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003330:	2202      	movs	r2, #2
 8003332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	fa93 f2a3 	rbit	r2, r3
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003354:	2202      	movs	r2, #2
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800336e:	601a      	str	r2, [r3, #0]
  return result;
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003378:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d102      	bne.n	8003394 <HAL_RCC_OscConfig+0xa4c>
 800338e:	4b84      	ldr	r3, [pc, #528]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	e013      	b.n	80033bc <HAL_RCC_OscConfig+0xa74>
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800339c:	2202      	movs	r2, #2
 800339e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80033c4:	2102      	movs	r1, #2
 80033c6:	6011      	str	r1, [r2, #0]
 80033c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	fa92 f1a2 	rbit	r1, r2
 80033d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033de:	6011      	str	r1, [r2, #0]
  return result;
 80033e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d084      	beq.n	8003310 <HAL_RCC_OscConfig+0x9c8>
 8003406:	e07f      	b.n	8003508 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fe ff80 	bl	800230c <HAL_GetTick>
 800340c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003410:	e00b      	b.n	800342a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7fe ff7b 	bl	800230c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e2c4      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003432:	2202      	movs	r2, #2
 8003434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fa93 f2a3 	rbit	r2, r3
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003456:	2202      	movs	r2, #2
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003470:	601a      	str	r2, [r3, #0]
  return result;
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800347a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d102      	bne.n	8003496 <HAL_RCC_OscConfig+0xb4e>
 8003490:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	e013      	b.n	80034be <HAL_RCC_OscConfig+0xb76>
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800349e:	2202      	movs	r2, #2
 80034a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	fa93 f2a3 	rbit	r2, r3
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80034c6:	2102      	movs	r1, #2
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	fa92 f1a2 	rbit	r1, r2
 80034d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034e0:	6011      	str	r1, [r2, #0]
  return result;
 80034e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	fab2 f282 	clz	r2, r2
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f002 021f 	and.w	r2, r2, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d184      	bne.n	8003412 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003508:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8242 	beq.w	80039b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <HAL_RCC_OscConfig+0xc58>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b08      	cmp	r3, #8
 8003538:	f000 8213 	beq.w	8003962 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2b02      	cmp	r3, #2
 800354a:	f040 8162 	bne.w	8003812 <HAL_RCC_OscConfig+0xeca>
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003556:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800355a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003572:	601a      	str	r2, [r3, #0]
  return result;
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800357c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003588:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	2300      	movs	r3, #0
 8003592:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe feba 	bl	800230c <HAL_GetTick>
 8003598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359c:	e00c      	b.n	80035b8 <HAL_RCC_OscConfig+0xc70>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe feb2 	bl	800230c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e1fd      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035dc:	601a      	str	r2, [r3, #0]
  return result;
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d102      	bne.n	8003602 <HAL_RCC_OscConfig+0xcba>
 80035fc:	4bb0      	ldr	r3, [pc, #704]	; (80038c0 <HAL_RCC_OscConfig+0xf78>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	e027      	b.n	8003652 <HAL_RCC_OscConfig+0xd0a>
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800360a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	fa93 f2a3 	rbit	r2, r3
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	4b9c      	ldr	r3, [pc, #624]	; (80038c0 <HAL_RCC_OscConfig+0xf78>)
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003656:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800365a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800365e:	6011      	str	r1, [r2, #0]
 8003660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003664:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	fa92 f1a2 	rbit	r1, r2
 800366e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003672:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003676:	6011      	str	r1, [r2, #0]
  return result;
 8003678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f042 0220 	orr.w	r2, r2, #32
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f002 021f 	and.w	r2, r2, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d182      	bne.n	80035a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800369e:	4b88      	ldr	r3, [pc, #544]	; (80038c0 <HAL_RCC_OscConfig+0xf78>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	430b      	orrs	r3, r1
 80036c0:	497f      	ldr	r1, [pc, #508]	; (80038c0 <HAL_RCC_OscConfig+0xf78>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036ea:	601a      	str	r2, [r3, #0]
  return result;
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003700:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	461a      	mov	r2, r3
 8003708:	2301      	movs	r3, #1
 800370a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fdfe 	bl	800230c <HAL_GetTick>
 8003710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003714:	e009      	b.n	800372a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe fdf9 	bl	800230c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e144      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
 800372a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	fa93 f2a3 	rbit	r2, r3
 8003746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800374e:	601a      	str	r2, [r3, #0]
  return result;
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003758:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0xe2c>
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <HAL_RCC_OscConfig+0xf78>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	e027      	b.n	80037c4 <HAL_RCC_OscConfig+0xe7c>
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800377c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	fa93 f2a3 	rbit	r2, r3
 8003790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003794:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <HAL_RCC_OscConfig+0xf78>)
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	fa92 f1a2 	rbit	r1, r2
 80037e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037e8:	6011      	str	r1, [r2, #0]
  return result;
 80037ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f002 021f 	and.w	r2, r2, #31
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d082      	beq.n	8003716 <HAL_RCC_OscConfig+0xdce>
 8003810:	e0cf      	b.n	80039b2 <HAL_RCC_OscConfig+0x106a>
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800381a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800381e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	fa93 f2a3 	rbit	r2, r3
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003836:	601a      	str	r2, [r3, #0]
  return result;
 8003838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003840:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe fd58 	bl	800230c <HAL_GetTick>
 800385c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003860:	e009      	b.n	8003876 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe fd53 	bl	800230c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e09e      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800387e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	fa93 f2a3 	rbit	r2, r3
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800389a:	601a      	str	r2, [r3, #0]
  return result;
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d104      	bne.n	80038c4 <HAL_RCC_OscConfig+0xf7c>
 80038ba:	4b01      	ldr	r3, [pc, #4]	; (80038c0 <HAL_RCC_OscConfig+0xf78>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	e029      	b.n	8003914 <HAL_RCC_OscConfig+0xfcc>
 80038c0:	40021000 	.word	0x40021000
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	fa93 f2a3 	rbit	r2, r3
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	fa93 f2a3 	rbit	r2, r3
 8003906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCC_OscConfig+0x1078>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003918:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800391c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003926:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	fa92 f1a2 	rbit	r1, r2
 8003930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003934:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003938:	6011      	str	r1, [r2, #0]
  return result;
 800393a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800393e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	fab2 f282 	clz	r2, r2
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	f002 021f 	and.w	r2, r2, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d180      	bne.n	8003862 <HAL_RCC_OscConfig+0xf1a>
 8003960:	e027      	b.n	80039b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e01e      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_RCC_OscConfig+0x1078>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800397e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003982:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	429a      	cmp	r2, r3
 8003994:	d10b      	bne.n	80039ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003996:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800399a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000

080039c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b09e      	sub	sp, #120	; 0x78
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e162      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b90      	ldr	r3, [pc, #576]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b8d      	ldr	r3, [pc, #564]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 0207 	bic.w	r2, r3, #7
 80039f2:	498b      	ldr	r1, [pc, #556]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b89      	ldr	r3, [pc, #548]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e14a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	497f      	ldr	r1, [pc, #508]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80dc 	beq.w	8003bf0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d13c      	bne.n	8003aba <HAL_RCC_ClockConfig+0xf6>
 8003a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d102      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xa6>
 8003a64:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	e00f      	b.n	8003a8a <HAL_RCC_ClockConfig+0xc6>
 8003a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	667b      	str	r3, [r7, #100]	; 0x64
 8003a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a86:	4b67      	ldr	r3, [pc, #412]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a92:	fa92 f2a2 	rbit	r2, r2
 8003a96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a9a:	fab2 f282 	clz	r2, r2
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	f042 0220 	orr.w	r2, r2, #32
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	f002 021f 	and.w	r2, r2, #31
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d17b      	bne.n	8003bae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0f3      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d13c      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x178>
 8003ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d102      	bne.n	8003aec <HAL_RCC_ClockConfig+0x128>
 8003ae6:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	e00f      	b.n	8003b0c <HAL_RCC_ClockConfig+0x148>
 8003aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
 8003afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afe:	643b      	str	r3, [r7, #64]	; 0x40
 8003b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b10:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b14:	fa92 f2a2 	rbit	r2, r2
 8003b18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1c:	fab2 f282 	clz	r2, r2
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	f042 0220 	orr.w	r2, r2, #32
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	f002 021f 	and.w	r2, r2, #31
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d13a      	bne.n	8003bae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b2      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x2de>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d102      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x1a0>
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	e00d      	b.n	8003b80 <HAL_RCC_ClockConfig+0x1bc>
 8003b64:	2302      	movs	r3, #2
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	2302      	movs	r3, #2
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2202      	movs	r2, #2
 8003b82:	61ba      	str	r2, [r7, #24]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	fa92 f2a2 	rbit	r2, r2
 8003b8a:	617a      	str	r2, [r7, #20]
  return result;
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	fab2 f282 	clz	r2, r2
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f042 0220 	orr.w	r2, r2, #32
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f002 021f 	and.w	r2, r2, #31
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e079      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	491a      	ldr	r1, [pc, #104]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc0:	f7fe fba4 	bl	800230c <HAL_GetTick>
 8003bc4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc8:	f7fe fba0 	bl	800230c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e061      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 020c 	and.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1eb      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d214      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 0207 	bic.w	r2, r3, #7
 8003c06:	4906      	ldr	r1, [pc, #24]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <HAL_RCC_ClockConfig+0x25c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e040      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x2de>
 8003c20:	40022000 	.word	0x40022000
 8003c24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCC_ClockConfig+0x2e8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	491a      	ldr	r1, [pc, #104]	; (8003cac <HAL_RCC_ClockConfig+0x2e8>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_RCC_ClockConfig+0x2e8>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4912      	ldr	r1, [pc, #72]	; (8003cac <HAL_RCC_ClockConfig+0x2e8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c66:	f000 f829 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_RCC_ClockConfig+0x2e8>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c74:	22f0      	movs	r2, #240	; 0xf0
 8003c76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	fa92 f2a2 	rbit	r2, r2
 8003c7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	fab2 f282 	clz	r2, r2
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	40d3      	lsrs	r3, r2
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x2ec>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <HAL_RCC_ClockConfig+0x2f0>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_RCC_ClockConfig+0x2f4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe faf2 	bl	8002284 <HAL_InitTick>
  
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3778      	adds	r7, #120	; 0x78
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08008b18 	.word	0x08008b18
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	20000004 	.word	0x20000004

08003cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b08b      	sub	sp, #44	; 0x2c
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cd6:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d002      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x30>
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d003      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x36>
 8003cea:	e03c      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cee:	623b      	str	r3, [r7, #32]
      break;
 8003cf0:	e03c      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cf8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cfc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	fa92 f2a2 	rbit	r2, r2
 8003d04:	607a      	str	r2, [r7, #4]
  return result;
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	fab2 f282 	clz	r2, r2
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	40d3      	lsrs	r3, r2
 8003d10:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d16:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	220f      	movs	r2, #15
 8003d20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	fa92 f2a2 	rbit	r2, r2
 8003d28:	60fa      	str	r2, [r7, #12]
  return result;
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	fab2 f282 	clz	r2, r2
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	40d3      	lsrs	r3, r2
 8003d34:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d36:	5cd3      	ldrb	r3, [r2, r3]
 8003d38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
 8003d54:	e004      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	623b      	str	r3, [r7, #32]
      break;
 8003d64:	e002      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d68:	623b      	str	r3, [r7, #32]
      break;
 8003d6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	372c      	adds	r7, #44	; 0x2c
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	007a1200 	.word	0x007a1200
 8003d84:	08008b30 	.word	0x08008b30
 8003d88:	08008b40 	.word	0x08008b40
 8003d8c:	003d0900 	.word	0x003d0900

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000000 	.word	0x20000000

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003dae:	f7ff ffef 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db2:	4601      	mov	r1, r0
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003dc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	fa92 f2a2 	rbit	r2, r2
 8003dc8:	603a      	str	r2, [r7, #0]
  return result;
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	fab2 f282 	clz	r2, r2
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	40d3      	lsrs	r3, r2
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	08008b28 	.word	0x08008b28

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003df2:	f7ff ffcd 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003df6:	4601      	mov	r1, r0
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	fa92 f2a2 	rbit	r2, r2
 8003e0c:	603a      	str	r2, [r7, #0]
  return result;
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	fab2 f282 	clz	r2, r2
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	40d3      	lsrs	r3, r2
 8003e18:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	08008b28 	.word	0x08008b28

08003e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b092      	sub	sp, #72	; 0x48
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80d4 	beq.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e54:	4b4e      	ldr	r3, [pc, #312]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10e      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	4a4a      	ldr	r2, [pc, #296]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	61d3      	str	r3, [r2, #28]
 8003e6c:	4b48      	ldr	r3, [pc, #288]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b45      	ldr	r3, [pc, #276]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8a:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a41      	ldr	r2, [pc, #260]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fe fa39 	bl	800230c <HAL_GetTick>
 8003e9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fe fa35 	bl	800230c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e12d      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8084 	beq.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d07c      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	461a      	mov	r2, r3
 8003f06:	2301      	movs	r3, #1
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d04b      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3e:	f7fe f9e5 	bl	800230c <HAL_GetTick>
 8003f42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe f9e1 	bl	800230c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0d7      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	2302      	movs	r3, #2
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	61fb      	str	r3, [r7, #28]
  return result;
 8003f74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d108      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f8a:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	e00d      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40007000 	.word	0x40007000
 8003f98:	10908100 	.word	0x10908100
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	2202      	movs	r2, #2
 8003fae:	613a      	str	r2, [r7, #16]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	fa92 f2a2 	rbit	r2, r2
 8003fb6:	60fa      	str	r2, [r7, #12]
  return result;
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	fab2 f282 	clz	r2, r2
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f002 021f 	and.w	r2, r2, #31
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0b7      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fd6:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	494c      	ldr	r1, [pc, #304]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fe8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	4b48      	ldr	r3, [pc, #288]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4a47      	ldr	r2, [pc, #284]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004008:	4b42      	ldr	r3, [pc, #264]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	493f      	ldr	r1, [pc, #252]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4938      	ldr	r1, [pc, #224]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004034:	4313      	orrs	r3, r2
 8004036:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004044:	4b33      	ldr	r3, [pc, #204]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4930      	ldr	r1, [pc, #192]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004062:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f023 0210 	bic.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4929      	ldr	r1, [pc, #164]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004080:	4b24      	ldr	r3, [pc, #144]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	4921      	ldr	r1, [pc, #132]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800409e:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f023 0220 	bic.w	r2, r3, #32
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	491a      	ldr	r1, [pc, #104]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	4912      	ldr	r1, [pc, #72]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	490b      	ldr	r1, [pc, #44]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	4903      	ldr	r1, [pc, #12]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3748      	adds	r7, #72	; 0x48
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e09d      	b.n	8004266 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	d108      	bne.n	8004144 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413a:	d009      	beq.n	8004150 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	61da      	str	r2, [r3, #28]
 8004142:	e005      	b.n	8004150 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd fc00 	bl	8001970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004186:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004190:	d902      	bls.n	8004198 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e002      	b.n	800419e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041a6:	d007      	beq.n	80041b8 <HAL_SPI_Init+0xa0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041b0:	d002      	beq.n	80041b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	ea42 0103 	orr.w	r1, r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	f003 0204 	and.w	r2, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004234:	ea42 0103 	orr.w	r1, r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004254:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b088      	sub	sp, #32
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_SPI_Transmit+0x22>
 800428c:	2302      	movs	r3, #2
 800428e:	e158      	b.n	8004542 <HAL_SPI_Transmit+0x2d4>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004298:	f7fe f838 	bl	800230c <HAL_GetTick>
 800429c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b2:	e13d      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_Transmit+0x52>
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c4:	e134      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004310:	d10f      	bne.n	8004332 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d007      	beq.n	8004350 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004358:	d94b      	bls.n	80043f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0xfa>
 8004362:	8afb      	ldrh	r3, [r7, #22]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d13e      	bne.n	80043e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	881a      	ldrh	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800438c:	e02b      	b.n	80043e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	d112      	bne.n	80043c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	1c9a      	adds	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c0:	e011      	b.n	80043e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c2:	f7fd ffa3 	bl	800230c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d803      	bhi.n	80043da <HAL_SPI_Transmit+0x16c>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d102      	bne.n	80043e0 <HAL_SPI_Transmit+0x172>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e4:	e0a4      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ce      	bne.n	800438e <HAL_SPI_Transmit+0x120>
 80043f0:	e07c      	b.n	80044ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_Transmit+0x192>
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d170      	bne.n	80044e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d912      	bls.n	8004430 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	881a      	ldrh	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	1c9a      	adds	r2, r3, #2
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b02      	subs	r3, #2
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800442e:	e058      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004456:	e044      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d12b      	bne.n	80044be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d912      	bls.n	8004496 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	881a      	ldrh	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b02      	subs	r3, #2
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004494:	e025      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044bc:	e011      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044be:	f7fd ff25 	bl	800230c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d803      	bhi.n	80044d6 <HAL_SPI_Transmit+0x268>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d102      	bne.n	80044dc <HAL_SPI_Transmit+0x26e>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044e0:	e026      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1b5      	bne.n	8004458 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fb5b 	bl	8004bac <SPI_EndRxTxTransaction>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e000      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800452e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004540:	7ffb      	ldrb	r3, [r7, #31]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b08a      	sub	sp, #40	; 0x28
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004558:	2301      	movs	r3, #1
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x26>
 800456c:	2302      	movs	r3, #2
 800456e:	e1fb      	b.n	8004968 <HAL_SPI_TransmitReceive+0x41e>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004578:	f7fd fec8 	bl	800230c <HAL_GetTick>
 800457c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004584:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800458c:	887b      	ldrh	r3, [r7, #2]
 800458e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004594:	7efb      	ldrb	r3, [r7, #27]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d00e      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x6e>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a0:	d106      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x66>
 80045aa:	7efb      	ldrb	r3, [r7, #27]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d003      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045b6:	e1cd      	b.n	8004954 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x80>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x80>
 80045c4:	887b      	ldrh	r3, [r7, #2]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045d0:	e1c0      	b.n	8004954 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d003      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2205      	movs	r2, #5
 80045e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	887a      	ldrh	r2, [r7, #2]
 80045f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	887a      	ldrh	r2, [r7, #2]
 80045fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	887a      	ldrh	r2, [r7, #2]
 8004612:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004628:	d802      	bhi.n	8004630 <HAL_SPI_TransmitReceive+0xe6>
 800462a:	8a3b      	ldrh	r3, [r7, #16]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d908      	bls.n	8004642 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800463e:	605a      	str	r2, [r3, #4]
 8004640:	e007      	b.n	8004652 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004650:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d007      	beq.n	8004670 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004678:	d97c      	bls.n	8004774 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x13e>
 8004682:	8a7b      	ldrh	r3, [r7, #18]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d169      	bne.n	800475c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ac:	e056      	b.n	800475c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d11b      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x1aa>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x1aa>
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d113      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	881a      	ldrh	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	1c9a      	adds	r2, r3, #2
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d11c      	bne.n	800473c <HAL_SPI_TransmitReceive+0x1f2>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	b292      	uxth	r2, r2
 800471a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	1c9a      	adds	r2, r3, #2
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004738:	2301      	movs	r3, #1
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800473c:	f7fd fde6 	bl	800230c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004748:	429a      	cmp	r2, r3
 800474a:	d807      	bhi.n	800475c <HAL_SPI_TransmitReceive+0x212>
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d003      	beq.n	800475c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800475a:	e0fb      	b.n	8004954 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1a3      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x164>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d19d      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x164>
 8004772:	e0df      	b.n	8004934 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x23a>
 800477c:	8a7b      	ldrh	r3, [r7, #18]
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 80cb 	bne.w	800491a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d912      	bls.n	80047b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	881a      	ldrh	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	1c9a      	adds	r2, r3, #2
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b02      	subs	r3, #2
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047b2:	e0b2      	b.n	800491a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	7812      	ldrb	r2, [r2, #0]
 80047c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047da:	e09e      	b.n	800491a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d134      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x30a>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02f      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x30a>
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d12c      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d912      	bls.n	800482a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	881a      	ldrh	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	1c9a      	adds	r2, r3, #2
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b02      	subs	r3, #2
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004828:	e012      	b.n	8004850 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d148      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x3aa>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d042      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d923      	bls.n	80048c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	b292      	uxth	r2, r2
 8004886:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b02      	subs	r3, #2
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d81f      	bhi.n	80048f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	e016      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f103 020c 	add.w	r2, r3, #12
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048f4:	f7fd fd0a 	bl	800230c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004900:	429a      	cmp	r2, r3
 8004902:	d803      	bhi.n	800490c <HAL_SPI_TransmitReceive+0x3c2>
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d102      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x3c8>
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004918:	e01c      	b.n	8004954 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f af5b 	bne.w	80047dc <HAL_SPI_TransmitReceive+0x292>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	f47f af54 	bne.w	80047dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f937 	bl	8004bac <SPI_EndRxTxTransaction>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	661a      	str	r2, [r3, #96]	; 0x60
 8004950:	e000      	b.n	8004954 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004968:	4618      	mov	r0, r3
 800496a:	3728      	adds	r7, #40	; 0x28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004980:	f7fd fcc4 	bl	800230c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	4413      	add	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004990:	f7fd fcbc 	bl	800230c <HAL_GetTick>
 8004994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	015b      	lsls	r3, r3, #5
 800499c:	0d1b      	lsrs	r3, r3, #20
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049a6:	e054      	b.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d050      	beq.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b0:	f7fd fcac 	bl	800230c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d902      	bls.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d13d      	bne.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049de:	d111      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e8:	d004      	beq.n	80049f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f2:	d107      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d10f      	bne.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e017      	b.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d19b      	bne.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000000 	.word	0x20000000

08004a80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a92:	f7fd fc3b 	bl	800230c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004aa2:	f7fd fc33 	bl	800230c <HAL_GetTick>
 8004aa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ab0:	4b3d      	ldr	r3, [pc, #244]	; (8004ba8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00da      	lsls	r2, r3, #3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	0d1b      	lsrs	r3, r3, #20
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ac8:	e060      	b.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ad0:	d107      	bne.n	8004ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d050      	beq.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aea:	f7fd fc0f 	bl	800230c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d902      	bls.n	8004b00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d13d      	bne.n	8004b7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b18:	d111      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b22:	d004      	beq.n	8004b2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2c:	d107      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b46:	d10f      	bne.n	8004b68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e010      	b.n	8004b9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d196      	bne.n	8004aca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3728      	adds	r7, #40	; 0x28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000000 	.word	0x20000000

08004bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff ff5b 	bl	8004a80 <SPI_WaitFifoStateUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd4:	f043 0220 	orr.w	r2, r3, #32
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e027      	b.n	8004c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2200      	movs	r2, #0
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fec0 	bl	8004970 <SPI_WaitFlagStateUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e014      	b.n	8004c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7ff ff34 	bl	8004a80 <SPI_WaitFifoStateUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e000      	b.n	8004c30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e041      	b.n	8004cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc ff36 	bl	8001ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 fa0e 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d001      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e041      	b.n	8004d74 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d01d      	beq.n	8004d3e <HAL_TIM_Base_Start+0x66>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_TIM_Base_Start+0xa8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIM_Base_Start+0x66>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <HAL_TIM_Base_Start+0xac>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIM_Base_Start+0x66>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_TIM_Base_Start+0xb0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIM_Base_Start+0x66>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <HAL_TIM_Base_Start+0xb4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIM_Base_Start+0x66>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <HAL_TIM_Base_Start+0xb8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIM_Base_Start+0x66>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_TIM_Base_Start+0xbc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d111      	bne.n	8004d62 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d010      	beq.n	8004d72 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	e007      	b.n	8004d72 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40001800 	.word	0x40001800
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40015c00 	.word	0x40015c00

08004d98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e041      	b.n	8004e2e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f839 	bl	8004e36 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f000 f95e 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_TIM_OC_Start+0x24>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	e022      	b.n	8004eb6 <HAL_TIM_OC_Start+0x6a>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d109      	bne.n	8004e8a <HAL_TIM_OC_Start+0x3e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	bf14      	ite	ne
 8004e82:	2301      	movne	r3, #1
 8004e84:	2300      	moveq	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	e015      	b.n	8004eb6 <HAL_TIM_OC_Start+0x6a>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d109      	bne.n	8004ea4 <HAL_TIM_OC_Start+0x58>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e008      	b.n	8004eb6 <HAL_TIM_OC_Start+0x6a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07c      	b.n	8004fb8 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_OC_Start+0x82>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ecc:	e013      	b.n	8004ef6 <HAL_TIM_OC_Start+0xaa>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_OC_Start+0x92>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004edc:	e00b      	b.n	8004ef6 <HAL_TIM_OC_Start+0xaa>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_OC_Start+0xa2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eec:	e003      	b.n	8004ef6 <HAL_TIM_OC_Start+0xaa>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fabd 	bl	800547e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2d      	ldr	r2, [pc, #180]	; (8004fc0 <HAL_TIM_OC_Start+0x174>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_TIM_OC_Start+0xd6>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <HAL_TIM_OC_Start+0x178>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_TIM_OC_Start+0xd6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <HAL_TIM_OC_Start+0x17c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_OC_Start+0xda>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_OC_Start+0xdc>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_TIM_OC_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d01d      	beq.n	8004f82 <HAL_TIM_OC_Start+0x136>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a20      	ldr	r2, [pc, #128]	; (8004fcc <HAL_TIM_OC_Start+0x180>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_TIM_OC_Start+0x136>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1e      	ldr	r2, [pc, #120]	; (8004fd0 <HAL_TIM_OC_Start+0x184>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIM_OC_Start+0x136>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <HAL_TIM_OC_Start+0x188>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIM_OC_Start+0x136>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <HAL_TIM_OC_Start+0x18c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIM_OC_Start+0x136>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <HAL_TIM_OC_Start+0x174>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIM_OC_Start+0x136>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <HAL_TIM_OC_Start+0x190>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d111      	bne.n	8004fa6 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d010      	beq.n	8004fb6 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	e007      	b.n	8004fb6 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40014400 	.word	0x40014400
 8004fc8:	40014800 	.word	0x40014800
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00
 8004fd8:	40001800 	.word	0x40001800
 8004fdc:	40015c00 	.word	0x40015c00

08004fe0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e048      	b.n	8005090 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d839      	bhi.n	8005080 <HAL_TIM_OC_ConfigChannel+0xa0>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <HAL_TIM_OC_ConfigChannel+0x34>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005049 	.word	0x08005049
 8005018:	08005081 	.word	0x08005081
 800501c:	08005081 	.word	0x08005081
 8005020:	08005081 	.word	0x08005081
 8005024:	08005057 	.word	0x08005057
 8005028:	08005081 	.word	0x08005081
 800502c:	08005081 	.word	0x08005081
 8005030:	08005081 	.word	0x08005081
 8005034:	08005065 	.word	0x08005065
 8005038:	08005081 	.word	0x08005081
 800503c:	08005081 	.word	0x08005081
 8005040:	08005081 	.word	0x08005081
 8005044:	08005073 	.word	0x08005073
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f8bc 	bl	80051cc <TIM_OC1_SetConfig>
      break;
 8005054:	e017      	b.n	8005086 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f92f 	bl	80052c0 <TIM_OC2_SetConfig>
      break;
 8005062:	e010      	b.n	8005086 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f98a 	bl	8005384 <TIM_OC3_SetConfig>
      break;
 8005070:	e009      	b.n	8005086 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f9c1 	bl	8005400 <TIM_OC4_SetConfig>
      break;
 800507e:	e002      	b.n	8005086 <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	75fb      	strb	r3, [r7, #23]
      break;
 8005084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800508e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d00f      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <TIM_Base_SetConfig+0x10c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <TIM_Base_SetConfig+0x110>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3a      	ldr	r2, [pc, #232]	; (80051ac <TIM_Base_SetConfig+0x114>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a39      	ldr	r2, [pc, #228]	; (80051b0 <TIM_Base_SetConfig+0x118>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d027      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <TIM_Base_SetConfig+0x10c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d023      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <TIM_Base_SetConfig+0x110>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01f      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2b      	ldr	r2, [pc, #172]	; (80051ac <TIM_Base_SetConfig+0x114>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01b      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2b      	ldr	r2, [pc, #172]	; (80051b4 <TIM_Base_SetConfig+0x11c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d017      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <TIM_Base_SetConfig+0x120>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a29      	ldr	r2, [pc, #164]	; (80051bc <TIM_Base_SetConfig+0x124>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <TIM_Base_SetConfig+0x128>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <TIM_Base_SetConfig+0x12c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <TIM_Base_SetConfig+0x130>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_Base_SetConfig+0xa2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <TIM_Base_SetConfig+0x118>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <TIM_Base_SetConfig+0x128>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0xf0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <TIM_Base_SetConfig+0x12c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0xf0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a11      	ldr	r2, [pc, #68]	; (80051c8 <TIM_Base_SetConfig+0x130>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d103      	bne.n	8005190 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	615a      	str	r2, [r3, #20]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40015c00 	.word	0x40015c00
 80051b4:	40001800 	.word	0x40001800
 80051b8:	40001c00 	.word	0x40001c00
 80051bc:	40002000 	.word	0x40002000
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 0302 	bic.w	r3, r3, #2
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <TIM_OC1_SetConfig+0xe8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <TIM_OC1_SetConfig+0x6c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a23      	ldr	r2, [pc, #140]	; (80052b8 <TIM_OC1_SetConfig+0xec>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_OC1_SetConfig+0x6c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a22      	ldr	r2, [pc, #136]	; (80052bc <TIM_OC1_SetConfig+0xf0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10c      	bne.n	8005252 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0308 	bic.w	r3, r3, #8
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <TIM_OC1_SetConfig+0xe8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <TIM_OC1_SetConfig+0x9e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <TIM_OC1_SetConfig+0xec>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_OC1_SetConfig+0x9e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <TIM_OC1_SetConfig+0xf0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d111      	bne.n	800528e <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	621a      	str	r2, [r3, #32]
}
 80052a8:	bf00      	nop
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800

080052c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 0210 	bic.w	r2, r3, #16
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f023 0320 	bic.w	r3, r3, #32
 800530a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <TIM_OC2_SetConfig+0xb8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_OC2_SetConfig+0x70>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <TIM_OC2_SetConfig+0xbc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_OC2_SetConfig+0x70>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a15      	ldr	r2, [pc, #84]	; (8005380 <TIM_OC2_SetConfig+0xc0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10f      	bne.n	8005350 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005336:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800

08005384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800544a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	031b      	lsls	r3, r3, #12
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800547e:	b480      	push	{r7}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2201      	movs	r2, #1
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	43db      	mvns	r3, r3
 80054a0:	401a      	ands	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	431a      	orrs	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	621a      	str	r2, [r3, #32]
}
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e03d      	b.n	8005560 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e040      	b.n	8005600 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc fb44 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	; 0x24
 8005598:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8c0 	bl	8005730 <UART_SetConfig>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e022      	b.n	8005600 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa2e 	bl	8005a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fab5 	bl	8005b68 <UART_CheckIdleState>
 80055fe:	4603      	mov	r3, r0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561c:	2b20      	cmp	r3, #32
 800561e:	f040 8082 	bne.w	8005726 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_UART_Transmit+0x26>
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07a      	b.n	8005728 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_UART_Transmit+0x38>
 800563c:	2302      	movs	r3, #2
 800563e:	e073      	b.n	8005728 <HAL_UART_Transmit+0x120>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2221      	movs	r2, #33	; 0x21
 8005654:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005656:	f7fc fe59 	bl	800230c <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005674:	d108      	bne.n	8005688 <HAL_UART_Transmit+0x80>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	e003      	b.n	8005690 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005698:	e02d      	b.n	80056f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2200      	movs	r2, #0
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 faa8 	bl	8005bfa <UART_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e039      	b.n	8005728 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c6:	b292      	uxth	r2, r2
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	3302      	adds	r3, #2
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	e008      	b.n	80056e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	b292      	uxth	r2, r2
 80056dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3301      	adds	r3, #1
 80056e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1cb      	bne.n	800569a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	2140      	movs	r1, #64	; 0x40
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fa74 	bl	8005bfa <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e005      	b.n	8005728 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800575e:	f023 030c 	bic.w	r3, r3, #12
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	6979      	ldr	r1, [r7, #20]
 8005768:	430b      	orrs	r3, r1
 800576a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a99      	ldr	r2, [pc, #612]	; (8005a10 <UART_SetConfig+0x2e0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d120      	bne.n	80057f2 <UART_SetConfig+0xc2>
 80057b0:	4b98      	ldr	r3, [pc, #608]	; (8005a14 <UART_SetConfig+0x2e4>)
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d817      	bhi.n	80057ec <UART_SetConfig+0xbc>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x94>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e1 	.word	0x080057e1
 80057cc:	080057e7 	.word	0x080057e7
 80057d0:	080057db 	.word	0x080057db
 80057d4:	2301      	movs	r3, #1
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e061      	b.n	800589e <UART_SetConfig+0x16e>
 80057da:	2302      	movs	r3, #2
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e05e      	b.n	800589e <UART_SetConfig+0x16e>
 80057e0:	2304      	movs	r3, #4
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e05b      	b.n	800589e <UART_SetConfig+0x16e>
 80057e6:	2308      	movs	r3, #8
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e058      	b.n	800589e <UART_SetConfig+0x16e>
 80057ec:	2310      	movs	r3, #16
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e055      	b.n	800589e <UART_SetConfig+0x16e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a88      	ldr	r2, [pc, #544]	; (8005a18 <UART_SetConfig+0x2e8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d124      	bne.n	8005846 <UART_SetConfig+0x116>
 80057fc:	4b85      	ldr	r3, [pc, #532]	; (8005a14 <UART_SetConfig+0x2e4>)
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005804:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005808:	d011      	beq.n	800582e <UART_SetConfig+0xfe>
 800580a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800580e:	d817      	bhi.n	8005840 <UART_SetConfig+0x110>
 8005810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005814:	d011      	beq.n	800583a <UART_SetConfig+0x10a>
 8005816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800581a:	d811      	bhi.n	8005840 <UART_SetConfig+0x110>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <UART_SetConfig+0xf8>
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	d006      	beq.n	8005834 <UART_SetConfig+0x104>
 8005826:	e00b      	b.n	8005840 <UART_SetConfig+0x110>
 8005828:	2300      	movs	r3, #0
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e037      	b.n	800589e <UART_SetConfig+0x16e>
 800582e:	2302      	movs	r3, #2
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e034      	b.n	800589e <UART_SetConfig+0x16e>
 8005834:	2304      	movs	r3, #4
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e031      	b.n	800589e <UART_SetConfig+0x16e>
 800583a:	2308      	movs	r3, #8
 800583c:	77fb      	strb	r3, [r7, #31]
 800583e:	e02e      	b.n	800589e <UART_SetConfig+0x16e>
 8005840:	2310      	movs	r3, #16
 8005842:	77fb      	strb	r3, [r7, #31]
 8005844:	e02b      	b.n	800589e <UART_SetConfig+0x16e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a74      	ldr	r2, [pc, #464]	; (8005a1c <UART_SetConfig+0x2ec>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d124      	bne.n	800589a <UART_SetConfig+0x16a>
 8005850:	4b70      	ldr	r3, [pc, #448]	; (8005a14 <UART_SetConfig+0x2e4>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005858:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800585c:	d011      	beq.n	8005882 <UART_SetConfig+0x152>
 800585e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005862:	d817      	bhi.n	8005894 <UART_SetConfig+0x164>
 8005864:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005868:	d011      	beq.n	800588e <UART_SetConfig+0x15e>
 800586a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800586e:	d811      	bhi.n	8005894 <UART_SetConfig+0x164>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <UART_SetConfig+0x14c>
 8005874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005878:	d006      	beq.n	8005888 <UART_SetConfig+0x158>
 800587a:	e00b      	b.n	8005894 <UART_SetConfig+0x164>
 800587c:	2300      	movs	r3, #0
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e00d      	b.n	800589e <UART_SetConfig+0x16e>
 8005882:	2302      	movs	r3, #2
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e00a      	b.n	800589e <UART_SetConfig+0x16e>
 8005888:	2304      	movs	r3, #4
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e007      	b.n	800589e <UART_SetConfig+0x16e>
 800588e:	2308      	movs	r3, #8
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e004      	b.n	800589e <UART_SetConfig+0x16e>
 8005894:	2310      	movs	r3, #16
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e001      	b.n	800589e <UART_SetConfig+0x16e>
 800589a:	2310      	movs	r3, #16
 800589c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a6:	d15b      	bne.n	8005960 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 80058a8:	7ffb      	ldrb	r3, [r7, #31]
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d827      	bhi.n	80058fe <UART_SetConfig+0x1ce>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x184>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	080058ff 	.word	0x080058ff
 80058c4:	080058ef 	.word	0x080058ef
 80058c8:	080058ff 	.word	0x080058ff
 80058cc:	080058ff 	.word	0x080058ff
 80058d0:	080058ff 	.word	0x080058ff
 80058d4:	080058f7 	.word	0x080058f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe fa66 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80058dc:	61b8      	str	r0, [r7, #24]
        break;
 80058de:	e013      	b.n	8005908 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e0:	f7fe fa84 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 80058e4:	61b8      	str	r0, [r7, #24]
        break;
 80058e6:	e00f      	b.n	8005908 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e8:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <UART_SetConfig+0x2f0>)
 80058ea:	61bb      	str	r3, [r7, #24]
        break;
 80058ec:	e00c      	b.n	8005908 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fe f9e5 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 80058f2:	61b8      	str	r0, [r7, #24]
        break;
 80058f4:	e008      	b.n	8005908 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fa:	61bb      	str	r3, [r7, #24]
        break;
 80058fc:	e004      	b.n	8005908 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	77bb      	strb	r3, [r7, #30]
        break;
 8005906:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d074      	beq.n	80059f8 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	005a      	lsls	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	b29b      	uxth	r3, r3
 8005924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d916      	bls.n	800595a <UART_SetConfig+0x22a>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005932:	d212      	bcs.n	800595a <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f023 030f 	bic.w	r3, r3, #15
 800593c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	b29b      	uxth	r3, r3
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	b29a      	uxth	r2, r3
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	4313      	orrs	r3, r2
 800594e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	89fa      	ldrh	r2, [r7, #14]
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	e04e      	b.n	80059f8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	77bb      	strb	r3, [r7, #30]
 800595e:	e04b      	b.n	80059f8 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005960:	7ffb      	ldrb	r3, [r7, #31]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d827      	bhi.n	80059b6 <UART_SetConfig+0x286>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x23c>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005991 	.word	0x08005991
 8005970:	08005999 	.word	0x08005999
 8005974:	080059a1 	.word	0x080059a1
 8005978:	080059b7 	.word	0x080059b7
 800597c:	080059a7 	.word	0x080059a7
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059b7 	.word	0x080059b7
 8005988:	080059b7 	.word	0x080059b7
 800598c:	080059af 	.word	0x080059af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005990:	f7fe fa0a 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8005994:	61b8      	str	r0, [r7, #24]
        break;
 8005996:	e013      	b.n	80059c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005998:	f7fe fa28 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 800599c:	61b8      	str	r0, [r7, #24]
        break;
 800599e:	e00f      	b.n	80059c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <UART_SetConfig+0x2f0>)
 80059a2:	61bb      	str	r3, [r7, #24]
        break;
 80059a4:	e00c      	b.n	80059c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a6:	f7fe f989 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 80059aa:	61b8      	str	r0, [r7, #24]
        break;
 80059ac:	e008      	b.n	80059c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b2:	61bb      	str	r3, [r7, #24]
        break;
 80059b4:	e004      	b.n	80059c0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	77bb      	strb	r3, [r7, #30]
        break;
 80059be:	bf00      	nop
    }

    if (pclk != 0U)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d018      	beq.n	80059f8 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	085a      	lsrs	r2, r3, #1
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	441a      	add	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	b29b      	uxth	r3, r3
 80059da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	d908      	bls.n	80059f4 <UART_SetConfig+0x2c4>
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e8:	d204      	bcs.n	80059f4 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e001      	b.n	80059f8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a04:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40013800 	.word	0x40013800
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40004400 	.word	0x40004400
 8005a1c:	40004800 	.word	0x40004800
 8005a20:	007a1200 	.word	0x007a1200

08005a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01a      	beq.n	8005b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b22:	d10a      	bne.n	8005b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b78:	f7fc fbc8 	bl	800230c <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d10e      	bne.n	8005baa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f82d 	bl	8005bfa <UART_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e023      	b.n	8005bf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d10e      	bne.n	8005bd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f817 	bl	8005bfa <UART_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e00d      	b.n	8005bf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b09c      	sub	sp, #112	; 0x70
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	603b      	str	r3, [r7, #0]
 8005c06:	4613      	mov	r3, r2
 8005c08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0a:	e0a5      	b.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	f000 80a1 	beq.w	8005d58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7fc fb79 	bl	800230c <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d13e      	bne.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c40:	667b      	str	r3, [r7, #100]	; 0x64
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e6      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3308      	adds	r3, #8
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	663b      	str	r3, [r7, #96]	; 0x60
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e5      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e067      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d04f      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc6:	d147      	bne.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3308      	adds	r3, #8
 8005d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	613b      	str	r3, [r7, #16]
   return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d24:	623a      	str	r2, [r7, #32]
 8005d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e010      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	f43f af4a 	beq.w	8005c0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3770      	adds	r7, #112	; 0x70
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <__errno>:
 8005d84:	4b01      	ldr	r3, [pc, #4]	; (8005d8c <__errno+0x8>)
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4d0d      	ldr	r5, [pc, #52]	; (8005dc8 <__libc_init_array+0x38>)
 8005d94:	4c0d      	ldr	r4, [pc, #52]	; (8005dcc <__libc_init_array+0x3c>)
 8005d96:	1b64      	subs	r4, r4, r5
 8005d98:	10a4      	asrs	r4, r4, #2
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	42a6      	cmp	r6, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	4d0b      	ldr	r5, [pc, #44]	; (8005dd0 <__libc_init_array+0x40>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	; (8005dd4 <__libc_init_array+0x44>)
 8005da4:	f002 fe22 	bl	80089ec <_init>
 8005da8:	1b64      	subs	r4, r4, r5
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	2600      	movs	r6, #0
 8005dae:	42a6      	cmp	r6, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db8:	4798      	blx	r3
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc2:	4798      	blx	r3
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08008f2c 	.word	0x08008f2c
 8005dcc:	08008f2c 	.word	0x08008f2c
 8005dd0:	08008f2c 	.word	0x08008f2c
 8005dd4:	08008f30 	.word	0x08008f30

08005dd8 <memset>:
 8005dd8:	4402      	add	r2, r0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d100      	bne.n	8005de2 <memset+0xa>
 8005de0:	4770      	bx	lr
 8005de2:	f803 1b01 	strb.w	r1, [r3], #1
 8005de6:	e7f9      	b.n	8005ddc <memset+0x4>

08005de8 <__cvt>:
 8005de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	ec55 4b10 	vmov	r4, r5, d0
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	460e      	mov	r6, r1
 8005df4:	4619      	mov	r1, r3
 8005df6:	462b      	mov	r3, r5
 8005df8:	bfbb      	ittet	lt
 8005dfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005dfe:	461d      	movlt	r5, r3
 8005e00:	2300      	movge	r3, #0
 8005e02:	232d      	movlt	r3, #45	; 0x2d
 8005e04:	700b      	strb	r3, [r1, #0]
 8005e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e0c:	4691      	mov	r9, r2
 8005e0e:	f023 0820 	bic.w	r8, r3, #32
 8005e12:	bfbc      	itt	lt
 8005e14:	4622      	movlt	r2, r4
 8005e16:	4614      	movlt	r4, r2
 8005e18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e1c:	d005      	beq.n	8005e2a <__cvt+0x42>
 8005e1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e22:	d100      	bne.n	8005e26 <__cvt+0x3e>
 8005e24:	3601      	adds	r6, #1
 8005e26:	2102      	movs	r1, #2
 8005e28:	e000      	b.n	8005e2c <__cvt+0x44>
 8005e2a:	2103      	movs	r1, #3
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	ab02      	add	r3, sp, #8
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	ec45 4b10 	vmov	d0, r4, r5
 8005e38:	4653      	mov	r3, sl
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	f000 fe30 	bl	8006aa0 <_dtoa_r>
 8005e40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e44:	4607      	mov	r7, r0
 8005e46:	d102      	bne.n	8005e4e <__cvt+0x66>
 8005e48:	f019 0f01 	tst.w	r9, #1
 8005e4c:	d022      	beq.n	8005e94 <__cvt+0xac>
 8005e4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e52:	eb07 0906 	add.w	r9, r7, r6
 8005e56:	d110      	bne.n	8005e7a <__cvt+0x92>
 8005e58:	783b      	ldrb	r3, [r7, #0]
 8005e5a:	2b30      	cmp	r3, #48	; 0x30
 8005e5c:	d10a      	bne.n	8005e74 <__cvt+0x8c>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2300      	movs	r3, #0
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f7fa fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e6a:	b918      	cbnz	r0, 8005e74 <__cvt+0x8c>
 8005e6c:	f1c6 0601 	rsb	r6, r6, #1
 8005e70:	f8ca 6000 	str.w	r6, [sl]
 8005e74:	f8da 3000 	ldr.w	r3, [sl]
 8005e78:	4499      	add	r9, r3
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7fa fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e86:	b108      	cbz	r0, 8005e8c <__cvt+0xa4>
 8005e88:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e8c:	2230      	movs	r2, #48	; 0x30
 8005e8e:	9b03      	ldr	r3, [sp, #12]
 8005e90:	454b      	cmp	r3, r9
 8005e92:	d307      	bcc.n	8005ea4 <__cvt+0xbc>
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e98:	1bdb      	subs	r3, r3, r7
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	b004      	add	sp, #16
 8005ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	9103      	str	r1, [sp, #12]
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e7f0      	b.n	8005e8e <__cvt+0xa6>

08005eac <__exponent>:
 8005eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	bfb8      	it	lt
 8005eb4:	4249      	neglt	r1, r1
 8005eb6:	f803 2b02 	strb.w	r2, [r3], #2
 8005eba:	bfb4      	ite	lt
 8005ebc:	222d      	movlt	r2, #45	; 0x2d
 8005ebe:	222b      	movge	r2, #43	; 0x2b
 8005ec0:	2909      	cmp	r1, #9
 8005ec2:	7042      	strb	r2, [r0, #1]
 8005ec4:	dd2a      	ble.n	8005f1c <__exponent+0x70>
 8005ec6:	f10d 0407 	add.w	r4, sp, #7
 8005eca:	46a4      	mov	ip, r4
 8005ecc:	270a      	movs	r7, #10
 8005ece:	46a6      	mov	lr, r4
 8005ed0:	460a      	mov	r2, r1
 8005ed2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ed6:	fb07 1516 	mls	r5, r7, r6, r1
 8005eda:	3530      	adds	r5, #48	; 0x30
 8005edc:	2a63      	cmp	r2, #99	; 0x63
 8005ede:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ee2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	dcf1      	bgt.n	8005ece <__exponent+0x22>
 8005eea:	3130      	adds	r1, #48	; 0x30
 8005eec:	f1ae 0502 	sub.w	r5, lr, #2
 8005ef0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ef4:	1c44      	adds	r4, r0, #1
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4561      	cmp	r1, ip
 8005efa:	d30a      	bcc.n	8005f12 <__exponent+0x66>
 8005efc:	f10d 0209 	add.w	r2, sp, #9
 8005f00:	eba2 020e 	sub.w	r2, r2, lr
 8005f04:	4565      	cmp	r5, ip
 8005f06:	bf88      	it	hi
 8005f08:	2200      	movhi	r2, #0
 8005f0a:	4413      	add	r3, r2
 8005f0c:	1a18      	subs	r0, r3, r0
 8005f0e:	b003      	add	sp, #12
 8005f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f1a:	e7ed      	b.n	8005ef8 <__exponent+0x4c>
 8005f1c:	2330      	movs	r3, #48	; 0x30
 8005f1e:	3130      	adds	r1, #48	; 0x30
 8005f20:	7083      	strb	r3, [r0, #2]
 8005f22:	70c1      	strb	r1, [r0, #3]
 8005f24:	1d03      	adds	r3, r0, #4
 8005f26:	e7f1      	b.n	8005f0c <__exponent+0x60>

08005f28 <_printf_float>:
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	ed2d 8b02 	vpush	{d8}
 8005f30:	b08d      	sub	sp, #52	; 0x34
 8005f32:	460c      	mov	r4, r1
 8005f34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f38:	4616      	mov	r6, r2
 8005f3a:	461f      	mov	r7, r3
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	f001 fd55 	bl	80079ec <_localeconv_r>
 8005f42:	f8d0 a000 	ldr.w	sl, [r0]
 8005f46:	4650      	mov	r0, sl
 8005f48:	f7fa f942 	bl	80001d0 <strlen>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	9305      	str	r3, [sp, #20]
 8005f54:	f8d8 3000 	ldr.w	r3, [r8]
 8005f58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f5c:	3307      	adds	r3, #7
 8005f5e:	f023 0307 	bic.w	r3, r3, #7
 8005f62:	f103 0208 	add.w	r2, r3, #8
 8005f66:	f8c8 2000 	str.w	r2, [r8]
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f7a:	9307      	str	r3, [sp, #28]
 8005f7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f80:	ee08 0a10 	vmov	s16, r0
 8005f84:	4b9f      	ldr	r3, [pc, #636]	; (8006204 <_printf_float+0x2dc>)
 8005f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8e:	f7fa fdcd 	bl	8000b2c <__aeabi_dcmpun>
 8005f92:	bb88      	cbnz	r0, 8005ff8 <_printf_float+0xd0>
 8005f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f98:	4b9a      	ldr	r3, [pc, #616]	; (8006204 <_printf_float+0x2dc>)
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9e:	f7fa fda7 	bl	8000af0 <__aeabi_dcmple>
 8005fa2:	bb48      	cbnz	r0, 8005ff8 <_printf_float+0xd0>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4640      	mov	r0, r8
 8005faa:	4649      	mov	r1, r9
 8005fac:	f7fa fd96 	bl	8000adc <__aeabi_dcmplt>
 8005fb0:	b110      	cbz	r0, 8005fb8 <_printf_float+0x90>
 8005fb2:	232d      	movs	r3, #45	; 0x2d
 8005fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb8:	4b93      	ldr	r3, [pc, #588]	; (8006208 <_printf_float+0x2e0>)
 8005fba:	4894      	ldr	r0, [pc, #592]	; (800620c <_printf_float+0x2e4>)
 8005fbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fc0:	bf94      	ite	ls
 8005fc2:	4698      	movls	r8, r3
 8005fc4:	4680      	movhi	r8, r0
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	f023 0204 	bic.w	r2, r3, #4
 8005fd0:	6022      	str	r2, [r4, #0]
 8005fd2:	f04f 0900 	mov.w	r9, #0
 8005fd6:	9700      	str	r7, [sp, #0]
 8005fd8:	4633      	mov	r3, r6
 8005fda:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f9d8 	bl	8006394 <_printf_common>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f040 8090 	bne.w	800610a <_printf_float+0x1e2>
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
 8005fee:	b00d      	add	sp, #52	; 0x34
 8005ff0:	ecbd 8b02 	vpop	{d8}
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fd94 	bl	8000b2c <__aeabi_dcmpun>
 8006004:	b140      	cbz	r0, 8006018 <_printf_float+0xf0>
 8006006:	464b      	mov	r3, r9
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfbc      	itt	lt
 800600c:	232d      	movlt	r3, #45	; 0x2d
 800600e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006012:	487f      	ldr	r0, [pc, #508]	; (8006210 <_printf_float+0x2e8>)
 8006014:	4b7f      	ldr	r3, [pc, #508]	; (8006214 <_printf_float+0x2ec>)
 8006016:	e7d1      	b.n	8005fbc <_printf_float+0x94>
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800601e:	9206      	str	r2, [sp, #24]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	d13f      	bne.n	80060a4 <_printf_float+0x17c>
 8006024:	2306      	movs	r3, #6
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	6861      	ldr	r1, [r4, #4]
 800602c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006030:	2300      	movs	r3, #0
 8006032:	9303      	str	r3, [sp, #12]
 8006034:	ab0a      	add	r3, sp, #40	; 0x28
 8006036:	e9cd b301 	strd	fp, r3, [sp, #4]
 800603a:	ab09      	add	r3, sp, #36	; 0x24
 800603c:	ec49 8b10 	vmov	d0, r8, r9
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	6022      	str	r2, [r4, #0]
 8006044:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006048:	4628      	mov	r0, r5
 800604a:	f7ff fecd 	bl	8005de8 <__cvt>
 800604e:	9b06      	ldr	r3, [sp, #24]
 8006050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006052:	2b47      	cmp	r3, #71	; 0x47
 8006054:	4680      	mov	r8, r0
 8006056:	d108      	bne.n	800606a <_printf_float+0x142>
 8006058:	1cc8      	adds	r0, r1, #3
 800605a:	db02      	blt.n	8006062 <_printf_float+0x13a>
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	4299      	cmp	r1, r3
 8006060:	dd41      	ble.n	80060e6 <_printf_float+0x1be>
 8006062:	f1ab 0b02 	sub.w	fp, fp, #2
 8006066:	fa5f fb8b 	uxtb.w	fp, fp
 800606a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800606e:	d820      	bhi.n	80060b2 <_printf_float+0x18a>
 8006070:	3901      	subs	r1, #1
 8006072:	465a      	mov	r2, fp
 8006074:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006078:	9109      	str	r1, [sp, #36]	; 0x24
 800607a:	f7ff ff17 	bl	8005eac <__exponent>
 800607e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006080:	1813      	adds	r3, r2, r0
 8006082:	2a01      	cmp	r2, #1
 8006084:	4681      	mov	r9, r0
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	dc02      	bgt.n	8006090 <_printf_float+0x168>
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	07d2      	lsls	r2, r2, #31
 800608e:	d501      	bpl.n	8006094 <_printf_float+0x16c>
 8006090:	3301      	adds	r3, #1
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006098:	2b00      	cmp	r3, #0
 800609a:	d09c      	beq.n	8005fd6 <_printf_float+0xae>
 800609c:	232d      	movs	r3, #45	; 0x2d
 800609e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a2:	e798      	b.n	8005fd6 <_printf_float+0xae>
 80060a4:	9a06      	ldr	r2, [sp, #24]
 80060a6:	2a47      	cmp	r2, #71	; 0x47
 80060a8:	d1be      	bne.n	8006028 <_printf_float+0x100>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1bc      	bne.n	8006028 <_printf_float+0x100>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e7b9      	b.n	8006026 <_printf_float+0xfe>
 80060b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060b6:	d118      	bne.n	80060ea <_printf_float+0x1c2>
 80060b8:	2900      	cmp	r1, #0
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	dd0b      	ble.n	80060d6 <_printf_float+0x1ae>
 80060be:	6121      	str	r1, [r4, #16]
 80060c0:	b913      	cbnz	r3, 80060c8 <_printf_float+0x1a0>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	07d0      	lsls	r0, r2, #31
 80060c6:	d502      	bpl.n	80060ce <_printf_float+0x1a6>
 80060c8:	3301      	adds	r3, #1
 80060ca:	440b      	add	r3, r1
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80060d0:	f04f 0900 	mov.w	r9, #0
 80060d4:	e7de      	b.n	8006094 <_printf_float+0x16c>
 80060d6:	b913      	cbnz	r3, 80060de <_printf_float+0x1b6>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	07d2      	lsls	r2, r2, #31
 80060dc:	d501      	bpl.n	80060e2 <_printf_float+0x1ba>
 80060de:	3302      	adds	r3, #2
 80060e0:	e7f4      	b.n	80060cc <_printf_float+0x1a4>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e7f2      	b.n	80060cc <_printf_float+0x1a4>
 80060e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ec:	4299      	cmp	r1, r3
 80060ee:	db05      	blt.n	80060fc <_printf_float+0x1d4>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	6121      	str	r1, [r4, #16]
 80060f4:	07d8      	lsls	r0, r3, #31
 80060f6:	d5ea      	bpl.n	80060ce <_printf_float+0x1a6>
 80060f8:	1c4b      	adds	r3, r1, #1
 80060fa:	e7e7      	b.n	80060cc <_printf_float+0x1a4>
 80060fc:	2900      	cmp	r1, #0
 80060fe:	bfd4      	ite	le
 8006100:	f1c1 0202 	rsble	r2, r1, #2
 8006104:	2201      	movgt	r2, #1
 8006106:	4413      	add	r3, r2
 8006108:	e7e0      	b.n	80060cc <_printf_float+0x1a4>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	055a      	lsls	r2, r3, #21
 800610e:	d407      	bmi.n	8006120 <_printf_float+0x1f8>
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	4642      	mov	r2, r8
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	d12c      	bne.n	8006178 <_printf_float+0x250>
 800611e:	e764      	b.n	8005fea <_printf_float+0xc2>
 8006120:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006124:	f240 80e0 	bls.w	80062e8 <_printf_float+0x3c0>
 8006128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	f7fa fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006134:	2800      	cmp	r0, #0
 8006136:	d034      	beq.n	80061a2 <_printf_float+0x27a>
 8006138:	4a37      	ldr	r2, [pc, #220]	; (8006218 <_printf_float+0x2f0>)
 800613a:	2301      	movs	r3, #1
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f af51 	beq.w	8005fea <_printf_float+0xc2>
 8006148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800614c:	429a      	cmp	r2, r3
 800614e:	db02      	blt.n	8006156 <_printf_float+0x22e>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	07d8      	lsls	r0, r3, #31
 8006154:	d510      	bpl.n	8006178 <_printf_float+0x250>
 8006156:	ee18 3a10 	vmov	r3, s16
 800615a:	4652      	mov	r2, sl
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	f43f af41 	beq.w	8005fea <_printf_float+0xc2>
 8006168:	f04f 0800 	mov.w	r8, #0
 800616c:	f104 091a 	add.w	r9, r4, #26
 8006170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006172:	3b01      	subs	r3, #1
 8006174:	4543      	cmp	r3, r8
 8006176:	dc09      	bgt.n	800618c <_printf_float+0x264>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	079b      	lsls	r3, r3, #30
 800617c:	f100 8105 	bmi.w	800638a <_printf_float+0x462>
 8006180:	68e0      	ldr	r0, [r4, #12]
 8006182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006184:	4298      	cmp	r0, r3
 8006186:	bfb8      	it	lt
 8006188:	4618      	movlt	r0, r3
 800618a:	e730      	b.n	8005fee <_printf_float+0xc6>
 800618c:	2301      	movs	r3, #1
 800618e:	464a      	mov	r2, r9
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f af27 	beq.w	8005fea <_printf_float+0xc2>
 800619c:	f108 0801 	add.w	r8, r8, #1
 80061a0:	e7e6      	b.n	8006170 <_printf_float+0x248>
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	dc39      	bgt.n	800621c <_printf_float+0x2f4>
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <_printf_float+0x2f0>)
 80061aa:	2301      	movs	r3, #1
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f af19 	beq.w	8005fea <_printf_float+0xc2>
 80061b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061bc:	4313      	orrs	r3, r2
 80061be:	d102      	bne.n	80061c6 <_printf_float+0x29e>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07d9      	lsls	r1, r3, #31
 80061c4:	d5d8      	bpl.n	8006178 <_printf_float+0x250>
 80061c6:	ee18 3a10 	vmov	r3, s16
 80061ca:	4652      	mov	r2, sl
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f af09 	beq.w	8005fea <_printf_float+0xc2>
 80061d8:	f04f 0900 	mov.w	r9, #0
 80061dc:	f104 0a1a 	add.w	sl, r4, #26
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	425b      	negs	r3, r3
 80061e4:	454b      	cmp	r3, r9
 80061e6:	dc01      	bgt.n	80061ec <_printf_float+0x2c4>
 80061e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ea:	e792      	b.n	8006112 <_printf_float+0x1ea>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4652      	mov	r2, sl
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f aef7 	beq.w	8005fea <_printf_float+0xc2>
 80061fc:	f109 0901 	add.w	r9, r9, #1
 8006200:	e7ee      	b.n	80061e0 <_printf_float+0x2b8>
 8006202:	bf00      	nop
 8006204:	7fefffff 	.word	0x7fefffff
 8006208:	08008b54 	.word	0x08008b54
 800620c:	08008b58 	.word	0x08008b58
 8006210:	08008b60 	.word	0x08008b60
 8006214:	08008b5c 	.word	0x08008b5c
 8006218:	08008b64 	.word	0x08008b64
 800621c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800621e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006220:	429a      	cmp	r2, r3
 8006222:	bfa8      	it	ge
 8006224:	461a      	movge	r2, r3
 8006226:	2a00      	cmp	r2, #0
 8006228:	4691      	mov	r9, r2
 800622a:	dc37      	bgt.n	800629c <_printf_float+0x374>
 800622c:	f04f 0b00 	mov.w	fp, #0
 8006230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006234:	f104 021a 	add.w	r2, r4, #26
 8006238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800623a:	9305      	str	r3, [sp, #20]
 800623c:	eba3 0309 	sub.w	r3, r3, r9
 8006240:	455b      	cmp	r3, fp
 8006242:	dc33      	bgt.n	80062ac <_printf_float+0x384>
 8006244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006248:	429a      	cmp	r2, r3
 800624a:	db3b      	blt.n	80062c4 <_printf_float+0x39c>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	07da      	lsls	r2, r3, #31
 8006250:	d438      	bmi.n	80062c4 <_printf_float+0x39c>
 8006252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006254:	9a05      	ldr	r2, [sp, #20]
 8006256:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006258:	1a9a      	subs	r2, r3, r2
 800625a:	eba3 0901 	sub.w	r9, r3, r1
 800625e:	4591      	cmp	r9, r2
 8006260:	bfa8      	it	ge
 8006262:	4691      	movge	r9, r2
 8006264:	f1b9 0f00 	cmp.w	r9, #0
 8006268:	dc35      	bgt.n	80062d6 <_printf_float+0x3ae>
 800626a:	f04f 0800 	mov.w	r8, #0
 800626e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006272:	f104 0a1a 	add.w	sl, r4, #26
 8006276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	eba3 0309 	sub.w	r3, r3, r9
 8006280:	4543      	cmp	r3, r8
 8006282:	f77f af79 	ble.w	8006178 <_printf_float+0x250>
 8006286:	2301      	movs	r3, #1
 8006288:	4652      	mov	r2, sl
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	f43f aeaa 	beq.w	8005fea <_printf_float+0xc2>
 8006296:	f108 0801 	add.w	r8, r8, #1
 800629a:	e7ec      	b.n	8006276 <_printf_float+0x34e>
 800629c:	4613      	mov	r3, r2
 800629e:	4631      	mov	r1, r6
 80062a0:	4642      	mov	r2, r8
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	d1c0      	bne.n	800622c <_printf_float+0x304>
 80062aa:	e69e      	b.n	8005fea <_printf_float+0xc2>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	9205      	str	r2, [sp, #20]
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	f43f ae97 	beq.w	8005fea <_printf_float+0xc2>
 80062bc:	9a05      	ldr	r2, [sp, #20]
 80062be:	f10b 0b01 	add.w	fp, fp, #1
 80062c2:	e7b9      	b.n	8006238 <_printf_float+0x310>
 80062c4:	ee18 3a10 	vmov	r3, s16
 80062c8:	4652      	mov	r2, sl
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	d1be      	bne.n	8006252 <_printf_float+0x32a>
 80062d4:	e689      	b.n	8005fea <_printf_float+0xc2>
 80062d6:	9a05      	ldr	r2, [sp, #20]
 80062d8:	464b      	mov	r3, r9
 80062da:	4442      	add	r2, r8
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	d1c1      	bne.n	800626a <_printf_float+0x342>
 80062e6:	e680      	b.n	8005fea <_printf_float+0xc2>
 80062e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ea:	2a01      	cmp	r2, #1
 80062ec:	dc01      	bgt.n	80062f2 <_printf_float+0x3ca>
 80062ee:	07db      	lsls	r3, r3, #31
 80062f0:	d538      	bpl.n	8006364 <_printf_float+0x43c>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4642      	mov	r2, r8
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f ae74 	beq.w	8005fea <_printf_float+0xc2>
 8006302:	ee18 3a10 	vmov	r3, s16
 8006306:	4652      	mov	r2, sl
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f ae6b 	beq.w	8005fea <_printf_float+0xc2>
 8006314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	f7fa fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006320:	b9d8      	cbnz	r0, 800635a <_printf_float+0x432>
 8006322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006324:	f108 0201 	add.w	r2, r8, #1
 8006328:	3b01      	subs	r3, #1
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	47b8      	blx	r7
 8006330:	3001      	adds	r0, #1
 8006332:	d10e      	bne.n	8006352 <_printf_float+0x42a>
 8006334:	e659      	b.n	8005fea <_printf_float+0xc2>
 8006336:	2301      	movs	r3, #1
 8006338:	4652      	mov	r2, sl
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	f43f ae52 	beq.w	8005fea <_printf_float+0xc2>
 8006346:	f108 0801 	add.w	r8, r8, #1
 800634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800634c:	3b01      	subs	r3, #1
 800634e:	4543      	cmp	r3, r8
 8006350:	dcf1      	bgt.n	8006336 <_printf_float+0x40e>
 8006352:	464b      	mov	r3, r9
 8006354:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006358:	e6dc      	b.n	8006114 <_printf_float+0x1ec>
 800635a:	f04f 0800 	mov.w	r8, #0
 800635e:	f104 0a1a 	add.w	sl, r4, #26
 8006362:	e7f2      	b.n	800634a <_printf_float+0x422>
 8006364:	2301      	movs	r3, #1
 8006366:	4642      	mov	r2, r8
 8006368:	e7df      	b.n	800632a <_printf_float+0x402>
 800636a:	2301      	movs	r3, #1
 800636c:	464a      	mov	r2, r9
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	f43f ae38 	beq.w	8005fea <_printf_float+0xc2>
 800637a:	f108 0801 	add.w	r8, r8, #1
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006382:	1a5b      	subs	r3, r3, r1
 8006384:	4543      	cmp	r3, r8
 8006386:	dcf0      	bgt.n	800636a <_printf_float+0x442>
 8006388:	e6fa      	b.n	8006180 <_printf_float+0x258>
 800638a:	f04f 0800 	mov.w	r8, #0
 800638e:	f104 0919 	add.w	r9, r4, #25
 8006392:	e7f4      	b.n	800637e <_printf_float+0x456>

08006394 <_printf_common>:
 8006394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	4616      	mov	r6, r2
 800639a:	4699      	mov	r9, r3
 800639c:	688a      	ldr	r2, [r1, #8]
 800639e:	690b      	ldr	r3, [r1, #16]
 80063a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bfb8      	it	lt
 80063a8:	4613      	movlt	r3, r2
 80063aa:	6033      	str	r3, [r6, #0]
 80063ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063b0:	4607      	mov	r7, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	b10a      	cbz	r2, 80063ba <_printf_common+0x26>
 80063b6:	3301      	adds	r3, #1
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	0699      	lsls	r1, r3, #26
 80063be:	bf42      	ittt	mi
 80063c0:	6833      	ldrmi	r3, [r6, #0]
 80063c2:	3302      	addmi	r3, #2
 80063c4:	6033      	strmi	r3, [r6, #0]
 80063c6:	6825      	ldr	r5, [r4, #0]
 80063c8:	f015 0506 	ands.w	r5, r5, #6
 80063cc:	d106      	bne.n	80063dc <_printf_common+0x48>
 80063ce:	f104 0a19 	add.w	sl, r4, #25
 80063d2:	68e3      	ldr	r3, [r4, #12]
 80063d4:	6832      	ldr	r2, [r6, #0]
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	42ab      	cmp	r3, r5
 80063da:	dc26      	bgt.n	800642a <_printf_common+0x96>
 80063dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063e0:	1e13      	subs	r3, r2, #0
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	bf18      	it	ne
 80063e6:	2301      	movne	r3, #1
 80063e8:	0692      	lsls	r2, r2, #26
 80063ea:	d42b      	bmi.n	8006444 <_printf_common+0xb0>
 80063ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f0:	4649      	mov	r1, r9
 80063f2:	4638      	mov	r0, r7
 80063f4:	47c0      	blx	r8
 80063f6:	3001      	adds	r0, #1
 80063f8:	d01e      	beq.n	8006438 <_printf_common+0xa4>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	68e5      	ldr	r5, [r4, #12]
 80063fe:	6832      	ldr	r2, [r6, #0]
 8006400:	f003 0306 	and.w	r3, r3, #6
 8006404:	2b04      	cmp	r3, #4
 8006406:	bf08      	it	eq
 8006408:	1aad      	subeq	r5, r5, r2
 800640a:	68a3      	ldr	r3, [r4, #8]
 800640c:	6922      	ldr	r2, [r4, #16]
 800640e:	bf0c      	ite	eq
 8006410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006414:	2500      	movne	r5, #0
 8006416:	4293      	cmp	r3, r2
 8006418:	bfc4      	itt	gt
 800641a:	1a9b      	subgt	r3, r3, r2
 800641c:	18ed      	addgt	r5, r5, r3
 800641e:	2600      	movs	r6, #0
 8006420:	341a      	adds	r4, #26
 8006422:	42b5      	cmp	r5, r6
 8006424:	d11a      	bne.n	800645c <_printf_common+0xc8>
 8006426:	2000      	movs	r0, #0
 8006428:	e008      	b.n	800643c <_printf_common+0xa8>
 800642a:	2301      	movs	r3, #1
 800642c:	4652      	mov	r2, sl
 800642e:	4649      	mov	r1, r9
 8006430:	4638      	mov	r0, r7
 8006432:	47c0      	blx	r8
 8006434:	3001      	adds	r0, #1
 8006436:	d103      	bne.n	8006440 <_printf_common+0xac>
 8006438:	f04f 30ff 	mov.w	r0, #4294967295
 800643c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006440:	3501      	adds	r5, #1
 8006442:	e7c6      	b.n	80063d2 <_printf_common+0x3e>
 8006444:	18e1      	adds	r1, r4, r3
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	2030      	movs	r0, #48	; 0x30
 800644a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800644e:	4422      	add	r2, r4
 8006450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006458:	3302      	adds	r3, #2
 800645a:	e7c7      	b.n	80063ec <_printf_common+0x58>
 800645c:	2301      	movs	r3, #1
 800645e:	4622      	mov	r2, r4
 8006460:	4649      	mov	r1, r9
 8006462:	4638      	mov	r0, r7
 8006464:	47c0      	blx	r8
 8006466:	3001      	adds	r0, #1
 8006468:	d0e6      	beq.n	8006438 <_printf_common+0xa4>
 800646a:	3601      	adds	r6, #1
 800646c:	e7d9      	b.n	8006422 <_printf_common+0x8e>
	...

08006470 <_printf_i>:
 8006470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	7e0f      	ldrb	r7, [r1, #24]
 8006476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006478:	2f78      	cmp	r7, #120	; 0x78
 800647a:	4691      	mov	r9, r2
 800647c:	4680      	mov	r8, r0
 800647e:	460c      	mov	r4, r1
 8006480:	469a      	mov	sl, r3
 8006482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006486:	d807      	bhi.n	8006498 <_printf_i+0x28>
 8006488:	2f62      	cmp	r7, #98	; 0x62
 800648a:	d80a      	bhi.n	80064a2 <_printf_i+0x32>
 800648c:	2f00      	cmp	r7, #0
 800648e:	f000 80d8 	beq.w	8006642 <_printf_i+0x1d2>
 8006492:	2f58      	cmp	r7, #88	; 0x58
 8006494:	f000 80a3 	beq.w	80065de <_printf_i+0x16e>
 8006498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800649c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064a0:	e03a      	b.n	8006518 <_printf_i+0xa8>
 80064a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064a6:	2b15      	cmp	r3, #21
 80064a8:	d8f6      	bhi.n	8006498 <_printf_i+0x28>
 80064aa:	a101      	add	r1, pc, #4	; (adr r1, 80064b0 <_printf_i+0x40>)
 80064ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b0:	08006509 	.word	0x08006509
 80064b4:	0800651d 	.word	0x0800651d
 80064b8:	08006499 	.word	0x08006499
 80064bc:	08006499 	.word	0x08006499
 80064c0:	08006499 	.word	0x08006499
 80064c4:	08006499 	.word	0x08006499
 80064c8:	0800651d 	.word	0x0800651d
 80064cc:	08006499 	.word	0x08006499
 80064d0:	08006499 	.word	0x08006499
 80064d4:	08006499 	.word	0x08006499
 80064d8:	08006499 	.word	0x08006499
 80064dc:	08006629 	.word	0x08006629
 80064e0:	0800654d 	.word	0x0800654d
 80064e4:	0800660b 	.word	0x0800660b
 80064e8:	08006499 	.word	0x08006499
 80064ec:	08006499 	.word	0x08006499
 80064f0:	0800664b 	.word	0x0800664b
 80064f4:	08006499 	.word	0x08006499
 80064f8:	0800654d 	.word	0x0800654d
 80064fc:	08006499 	.word	0x08006499
 8006500:	08006499 	.word	0x08006499
 8006504:	08006613 	.word	0x08006613
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	1d1a      	adds	r2, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006518:	2301      	movs	r3, #1
 800651a:	e0a3      	b.n	8006664 <_printf_i+0x1f4>
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	6829      	ldr	r1, [r5, #0]
 8006520:	0606      	lsls	r6, r0, #24
 8006522:	f101 0304 	add.w	r3, r1, #4
 8006526:	d50a      	bpl.n	800653e <_printf_i+0xce>
 8006528:	680e      	ldr	r6, [r1, #0]
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	2e00      	cmp	r6, #0
 800652e:	da03      	bge.n	8006538 <_printf_i+0xc8>
 8006530:	232d      	movs	r3, #45	; 0x2d
 8006532:	4276      	negs	r6, r6
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006538:	485e      	ldr	r0, [pc, #376]	; (80066b4 <_printf_i+0x244>)
 800653a:	230a      	movs	r3, #10
 800653c:	e019      	b.n	8006572 <_printf_i+0x102>
 800653e:	680e      	ldr	r6, [r1, #0]
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006546:	bf18      	it	ne
 8006548:	b236      	sxthne	r6, r6
 800654a:	e7ef      	b.n	800652c <_printf_i+0xbc>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	6820      	ldr	r0, [r4, #0]
 8006550:	1d19      	adds	r1, r3, #4
 8006552:	6029      	str	r1, [r5, #0]
 8006554:	0601      	lsls	r1, r0, #24
 8006556:	d501      	bpl.n	800655c <_printf_i+0xec>
 8006558:	681e      	ldr	r6, [r3, #0]
 800655a:	e002      	b.n	8006562 <_printf_i+0xf2>
 800655c:	0646      	lsls	r6, r0, #25
 800655e:	d5fb      	bpl.n	8006558 <_printf_i+0xe8>
 8006560:	881e      	ldrh	r6, [r3, #0]
 8006562:	4854      	ldr	r0, [pc, #336]	; (80066b4 <_printf_i+0x244>)
 8006564:	2f6f      	cmp	r7, #111	; 0x6f
 8006566:	bf0c      	ite	eq
 8006568:	2308      	moveq	r3, #8
 800656a:	230a      	movne	r3, #10
 800656c:	2100      	movs	r1, #0
 800656e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006572:	6865      	ldr	r5, [r4, #4]
 8006574:	60a5      	str	r5, [r4, #8]
 8006576:	2d00      	cmp	r5, #0
 8006578:	bfa2      	ittt	ge
 800657a:	6821      	ldrge	r1, [r4, #0]
 800657c:	f021 0104 	bicge.w	r1, r1, #4
 8006580:	6021      	strge	r1, [r4, #0]
 8006582:	b90e      	cbnz	r6, 8006588 <_printf_i+0x118>
 8006584:	2d00      	cmp	r5, #0
 8006586:	d04d      	beq.n	8006624 <_printf_i+0x1b4>
 8006588:	4615      	mov	r5, r2
 800658a:	fbb6 f1f3 	udiv	r1, r6, r3
 800658e:	fb03 6711 	mls	r7, r3, r1, r6
 8006592:	5dc7      	ldrb	r7, [r0, r7]
 8006594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006598:	4637      	mov	r7, r6
 800659a:	42bb      	cmp	r3, r7
 800659c:	460e      	mov	r6, r1
 800659e:	d9f4      	bls.n	800658a <_printf_i+0x11a>
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d10b      	bne.n	80065bc <_printf_i+0x14c>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	07de      	lsls	r6, r3, #31
 80065a8:	d508      	bpl.n	80065bc <_printf_i+0x14c>
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	4299      	cmp	r1, r3
 80065b0:	bfde      	ittt	le
 80065b2:	2330      	movle	r3, #48	; 0x30
 80065b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065bc:	1b52      	subs	r2, r2, r5
 80065be:	6122      	str	r2, [r4, #16]
 80065c0:	f8cd a000 	str.w	sl, [sp]
 80065c4:	464b      	mov	r3, r9
 80065c6:	aa03      	add	r2, sp, #12
 80065c8:	4621      	mov	r1, r4
 80065ca:	4640      	mov	r0, r8
 80065cc:	f7ff fee2 	bl	8006394 <_printf_common>
 80065d0:	3001      	adds	r0, #1
 80065d2:	d14c      	bne.n	800666e <_printf_i+0x1fe>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	b004      	add	sp, #16
 80065da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065de:	4835      	ldr	r0, [pc, #212]	; (80066b4 <_printf_i+0x244>)
 80065e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065e4:	6829      	ldr	r1, [r5, #0]
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80065ec:	6029      	str	r1, [r5, #0]
 80065ee:	061d      	lsls	r5, r3, #24
 80065f0:	d514      	bpl.n	800661c <_printf_i+0x1ac>
 80065f2:	07df      	lsls	r7, r3, #31
 80065f4:	bf44      	itt	mi
 80065f6:	f043 0320 	orrmi.w	r3, r3, #32
 80065fa:	6023      	strmi	r3, [r4, #0]
 80065fc:	b91e      	cbnz	r6, 8006606 <_printf_i+0x196>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	f023 0320 	bic.w	r3, r3, #32
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	2310      	movs	r3, #16
 8006608:	e7b0      	b.n	800656c <_printf_i+0xfc>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f043 0320 	orr.w	r3, r3, #32
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	2378      	movs	r3, #120	; 0x78
 8006614:	4828      	ldr	r0, [pc, #160]	; (80066b8 <_printf_i+0x248>)
 8006616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800661a:	e7e3      	b.n	80065e4 <_printf_i+0x174>
 800661c:	0659      	lsls	r1, r3, #25
 800661e:	bf48      	it	mi
 8006620:	b2b6      	uxthmi	r6, r6
 8006622:	e7e6      	b.n	80065f2 <_printf_i+0x182>
 8006624:	4615      	mov	r5, r2
 8006626:	e7bb      	b.n	80065a0 <_printf_i+0x130>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	6826      	ldr	r6, [r4, #0]
 800662c:	6961      	ldr	r1, [r4, #20]
 800662e:	1d18      	adds	r0, r3, #4
 8006630:	6028      	str	r0, [r5, #0]
 8006632:	0635      	lsls	r5, r6, #24
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	d501      	bpl.n	800663c <_printf_i+0x1cc>
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	e002      	b.n	8006642 <_printf_i+0x1d2>
 800663c:	0670      	lsls	r0, r6, #25
 800663e:	d5fb      	bpl.n	8006638 <_printf_i+0x1c8>
 8006640:	8019      	strh	r1, [r3, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	4615      	mov	r5, r2
 8006648:	e7ba      	b.n	80065c0 <_printf_i+0x150>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	602a      	str	r2, [r5, #0]
 8006650:	681d      	ldr	r5, [r3, #0]
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	2100      	movs	r1, #0
 8006656:	4628      	mov	r0, r5
 8006658:	f7f9 fdc2 	bl	80001e0 <memchr>
 800665c:	b108      	cbz	r0, 8006662 <_printf_i+0x1f2>
 800665e:	1b40      	subs	r0, r0, r5
 8006660:	6060      	str	r0, [r4, #4]
 8006662:	6863      	ldr	r3, [r4, #4]
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	2300      	movs	r3, #0
 8006668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666c:	e7a8      	b.n	80065c0 <_printf_i+0x150>
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	462a      	mov	r2, r5
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d0ab      	beq.n	80065d4 <_printf_i+0x164>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	079b      	lsls	r3, r3, #30
 8006680:	d413      	bmi.n	80066aa <_printf_i+0x23a>
 8006682:	68e0      	ldr	r0, [r4, #12]
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	4298      	cmp	r0, r3
 8006688:	bfb8      	it	lt
 800668a:	4618      	movlt	r0, r3
 800668c:	e7a4      	b.n	80065d8 <_printf_i+0x168>
 800668e:	2301      	movs	r3, #1
 8006690:	4632      	mov	r2, r6
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	47d0      	blx	sl
 8006698:	3001      	adds	r0, #1
 800669a:	d09b      	beq.n	80065d4 <_printf_i+0x164>
 800669c:	3501      	adds	r5, #1
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	9903      	ldr	r1, [sp, #12]
 80066a2:	1a5b      	subs	r3, r3, r1
 80066a4:	42ab      	cmp	r3, r5
 80066a6:	dcf2      	bgt.n	800668e <_printf_i+0x21e>
 80066a8:	e7eb      	b.n	8006682 <_printf_i+0x212>
 80066aa:	2500      	movs	r5, #0
 80066ac:	f104 0619 	add.w	r6, r4, #25
 80066b0:	e7f5      	b.n	800669e <_printf_i+0x22e>
 80066b2:	bf00      	nop
 80066b4:	08008b66 	.word	0x08008b66
 80066b8:	08008b77 	.word	0x08008b77

080066bc <iprintf>:
 80066bc:	b40f      	push	{r0, r1, r2, r3}
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <iprintf+0x2c>)
 80066c0:	b513      	push	{r0, r1, r4, lr}
 80066c2:	681c      	ldr	r4, [r3, #0]
 80066c4:	b124      	cbz	r4, 80066d0 <iprintf+0x14>
 80066c6:	69a3      	ldr	r3, [r4, #24]
 80066c8:	b913      	cbnz	r3, 80066d0 <iprintf+0x14>
 80066ca:	4620      	mov	r0, r4
 80066cc:	f001 f8f0 	bl	80078b0 <__sinit>
 80066d0:	ab05      	add	r3, sp, #20
 80066d2:	9a04      	ldr	r2, [sp, #16]
 80066d4:	68a1      	ldr	r1, [r4, #8]
 80066d6:	9301      	str	r3, [sp, #4]
 80066d8:	4620      	mov	r0, r4
 80066da:	f001 fead 	bl	8008438 <_vfiprintf_r>
 80066de:	b002      	add	sp, #8
 80066e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e4:	b004      	add	sp, #16
 80066e6:	4770      	bx	lr
 80066e8:	2000000c 	.word	0x2000000c

080066ec <putchar>:
 80066ec:	4b09      	ldr	r3, [pc, #36]	; (8006714 <putchar+0x28>)
 80066ee:	b513      	push	{r0, r1, r4, lr}
 80066f0:	681c      	ldr	r4, [r3, #0]
 80066f2:	4601      	mov	r1, r0
 80066f4:	b134      	cbz	r4, 8006704 <putchar+0x18>
 80066f6:	69a3      	ldr	r3, [r4, #24]
 80066f8:	b923      	cbnz	r3, 8006704 <putchar+0x18>
 80066fa:	9001      	str	r0, [sp, #4]
 80066fc:	4620      	mov	r0, r4
 80066fe:	f001 f8d7 	bl	80078b0 <__sinit>
 8006702:	9901      	ldr	r1, [sp, #4]
 8006704:	68a2      	ldr	r2, [r4, #8]
 8006706:	4620      	mov	r0, r4
 8006708:	b002      	add	sp, #8
 800670a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800670e:	f001 bfc3 	b.w	8008698 <_putc_r>
 8006712:	bf00      	nop
 8006714:	2000000c 	.word	0x2000000c

08006718 <_puts_r>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	460e      	mov	r6, r1
 800671c:	4605      	mov	r5, r0
 800671e:	b118      	cbz	r0, 8006728 <_puts_r+0x10>
 8006720:	6983      	ldr	r3, [r0, #24]
 8006722:	b90b      	cbnz	r3, 8006728 <_puts_r+0x10>
 8006724:	f001 f8c4 	bl	80078b0 <__sinit>
 8006728:	69ab      	ldr	r3, [r5, #24]
 800672a:	68ac      	ldr	r4, [r5, #8]
 800672c:	b913      	cbnz	r3, 8006734 <_puts_r+0x1c>
 800672e:	4628      	mov	r0, r5
 8006730:	f001 f8be 	bl	80078b0 <__sinit>
 8006734:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <_puts_r+0xd0>)
 8006736:	429c      	cmp	r4, r3
 8006738:	d120      	bne.n	800677c <_puts_r+0x64>
 800673a:	686c      	ldr	r4, [r5, #4]
 800673c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d405      	bmi.n	800674e <_puts_r+0x36>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	0598      	lsls	r0, r3, #22
 8006746:	d402      	bmi.n	800674e <_puts_r+0x36>
 8006748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800674a:	f001 f954 	bl	80079f6 <__retarget_lock_acquire_recursive>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	0719      	lsls	r1, r3, #28
 8006752:	d51d      	bpl.n	8006790 <_puts_r+0x78>
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	b1db      	cbz	r3, 8006790 <_puts_r+0x78>
 8006758:	3e01      	subs	r6, #1
 800675a:	68a3      	ldr	r3, [r4, #8]
 800675c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006760:	3b01      	subs	r3, #1
 8006762:	60a3      	str	r3, [r4, #8]
 8006764:	bb39      	cbnz	r1, 80067b6 <_puts_r+0x9e>
 8006766:	2b00      	cmp	r3, #0
 8006768:	da38      	bge.n	80067dc <_puts_r+0xc4>
 800676a:	4622      	mov	r2, r4
 800676c:	210a      	movs	r1, #10
 800676e:	4628      	mov	r0, r5
 8006770:	f000 f848 	bl	8006804 <__swbuf_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d011      	beq.n	800679c <_puts_r+0x84>
 8006778:	250a      	movs	r5, #10
 800677a:	e011      	b.n	80067a0 <_puts_r+0x88>
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <_puts_r+0xd4>)
 800677e:	429c      	cmp	r4, r3
 8006780:	d101      	bne.n	8006786 <_puts_r+0x6e>
 8006782:	68ac      	ldr	r4, [r5, #8]
 8006784:	e7da      	b.n	800673c <_puts_r+0x24>
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <_puts_r+0xd8>)
 8006788:	429c      	cmp	r4, r3
 800678a:	bf08      	it	eq
 800678c:	68ec      	ldreq	r4, [r5, #12]
 800678e:	e7d5      	b.n	800673c <_puts_r+0x24>
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f000 f888 	bl	80068a8 <__swsetup_r>
 8006798:	2800      	cmp	r0, #0
 800679a:	d0dd      	beq.n	8006758 <_puts_r+0x40>
 800679c:	f04f 35ff 	mov.w	r5, #4294967295
 80067a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a2:	07da      	lsls	r2, r3, #31
 80067a4:	d405      	bmi.n	80067b2 <_puts_r+0x9a>
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	059b      	lsls	r3, r3, #22
 80067aa:	d402      	bmi.n	80067b2 <_puts_r+0x9a>
 80067ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ae:	f001 f923 	bl	80079f8 <__retarget_lock_release_recursive>
 80067b2:	4628      	mov	r0, r5
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da04      	bge.n	80067c4 <_puts_r+0xac>
 80067ba:	69a2      	ldr	r2, [r4, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	dc06      	bgt.n	80067ce <_puts_r+0xb6>
 80067c0:	290a      	cmp	r1, #10
 80067c2:	d004      	beq.n	80067ce <_puts_r+0xb6>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	7019      	strb	r1, [r3, #0]
 80067cc:	e7c5      	b.n	800675a <_puts_r+0x42>
 80067ce:	4622      	mov	r2, r4
 80067d0:	4628      	mov	r0, r5
 80067d2:	f000 f817 	bl	8006804 <__swbuf_r>
 80067d6:	3001      	adds	r0, #1
 80067d8:	d1bf      	bne.n	800675a <_puts_r+0x42>
 80067da:	e7df      	b.n	800679c <_puts_r+0x84>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	250a      	movs	r5, #10
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	6022      	str	r2, [r4, #0]
 80067e4:	701d      	strb	r5, [r3, #0]
 80067e6:	e7db      	b.n	80067a0 <_puts_r+0x88>
 80067e8:	08008c38 	.word	0x08008c38
 80067ec:	08008c58 	.word	0x08008c58
 80067f0:	08008c18 	.word	0x08008c18

080067f4 <puts>:
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <puts+0xc>)
 80067f6:	4601      	mov	r1, r0
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f7ff bf8d 	b.w	8006718 <_puts_r>
 80067fe:	bf00      	nop
 8006800:	2000000c 	.word	0x2000000c

08006804 <__swbuf_r>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	460e      	mov	r6, r1
 8006808:	4614      	mov	r4, r2
 800680a:	4605      	mov	r5, r0
 800680c:	b118      	cbz	r0, 8006816 <__swbuf_r+0x12>
 800680e:	6983      	ldr	r3, [r0, #24]
 8006810:	b90b      	cbnz	r3, 8006816 <__swbuf_r+0x12>
 8006812:	f001 f84d 	bl	80078b0 <__sinit>
 8006816:	4b21      	ldr	r3, [pc, #132]	; (800689c <__swbuf_r+0x98>)
 8006818:	429c      	cmp	r4, r3
 800681a:	d12b      	bne.n	8006874 <__swbuf_r+0x70>
 800681c:	686c      	ldr	r4, [r5, #4]
 800681e:	69a3      	ldr	r3, [r4, #24]
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	071a      	lsls	r2, r3, #28
 8006826:	d52f      	bpl.n	8006888 <__swbuf_r+0x84>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	b36b      	cbz	r3, 8006888 <__swbuf_r+0x84>
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	1ac0      	subs	r0, r0, r3
 8006832:	6963      	ldr	r3, [r4, #20]
 8006834:	b2f6      	uxtb	r6, r6
 8006836:	4283      	cmp	r3, r0
 8006838:	4637      	mov	r7, r6
 800683a:	dc04      	bgt.n	8006846 <__swbuf_r+0x42>
 800683c:	4621      	mov	r1, r4
 800683e:	4628      	mov	r0, r5
 8006840:	f000 ffa2 	bl	8007788 <_fflush_r>
 8006844:	bb30      	cbnz	r0, 8006894 <__swbuf_r+0x90>
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	3b01      	subs	r3, #1
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	6022      	str	r2, [r4, #0]
 8006852:	701e      	strb	r6, [r3, #0]
 8006854:	6963      	ldr	r3, [r4, #20]
 8006856:	3001      	adds	r0, #1
 8006858:	4283      	cmp	r3, r0
 800685a:	d004      	beq.n	8006866 <__swbuf_r+0x62>
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	07db      	lsls	r3, r3, #31
 8006860:	d506      	bpl.n	8006870 <__swbuf_r+0x6c>
 8006862:	2e0a      	cmp	r6, #10
 8006864:	d104      	bne.n	8006870 <__swbuf_r+0x6c>
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f000 ff8d 	bl	8007788 <_fflush_r>
 800686e:	b988      	cbnz	r0, 8006894 <__swbuf_r+0x90>
 8006870:	4638      	mov	r0, r7
 8006872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <__swbuf_r+0x9c>)
 8006876:	429c      	cmp	r4, r3
 8006878:	d101      	bne.n	800687e <__swbuf_r+0x7a>
 800687a:	68ac      	ldr	r4, [r5, #8]
 800687c:	e7cf      	b.n	800681e <__swbuf_r+0x1a>
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <__swbuf_r+0xa0>)
 8006880:	429c      	cmp	r4, r3
 8006882:	bf08      	it	eq
 8006884:	68ec      	ldreq	r4, [r5, #12]
 8006886:	e7ca      	b.n	800681e <__swbuf_r+0x1a>
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f80c 	bl	80068a8 <__swsetup_r>
 8006890:	2800      	cmp	r0, #0
 8006892:	d0cb      	beq.n	800682c <__swbuf_r+0x28>
 8006894:	f04f 37ff 	mov.w	r7, #4294967295
 8006898:	e7ea      	b.n	8006870 <__swbuf_r+0x6c>
 800689a:	bf00      	nop
 800689c:	08008c38 	.word	0x08008c38
 80068a0:	08008c58 	.word	0x08008c58
 80068a4:	08008c18 	.word	0x08008c18

080068a8 <__swsetup_r>:
 80068a8:	4b32      	ldr	r3, [pc, #200]	; (8006974 <__swsetup_r+0xcc>)
 80068aa:	b570      	push	{r4, r5, r6, lr}
 80068ac:	681d      	ldr	r5, [r3, #0]
 80068ae:	4606      	mov	r6, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	b125      	cbz	r5, 80068be <__swsetup_r+0x16>
 80068b4:	69ab      	ldr	r3, [r5, #24]
 80068b6:	b913      	cbnz	r3, 80068be <__swsetup_r+0x16>
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 fff9 	bl	80078b0 <__sinit>
 80068be:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <__swsetup_r+0xd0>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	d10f      	bne.n	80068e4 <__swsetup_r+0x3c>
 80068c4:	686c      	ldr	r4, [r5, #4]
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068cc:	0719      	lsls	r1, r3, #28
 80068ce:	d42c      	bmi.n	800692a <__swsetup_r+0x82>
 80068d0:	06dd      	lsls	r5, r3, #27
 80068d2:	d411      	bmi.n	80068f8 <__swsetup_r+0x50>
 80068d4:	2309      	movs	r3, #9
 80068d6:	6033      	str	r3, [r6, #0]
 80068d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	f04f 30ff 	mov.w	r0, #4294967295
 80068e2:	e03e      	b.n	8006962 <__swsetup_r+0xba>
 80068e4:	4b25      	ldr	r3, [pc, #148]	; (800697c <__swsetup_r+0xd4>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	d101      	bne.n	80068ee <__swsetup_r+0x46>
 80068ea:	68ac      	ldr	r4, [r5, #8]
 80068ec:	e7eb      	b.n	80068c6 <__swsetup_r+0x1e>
 80068ee:	4b24      	ldr	r3, [pc, #144]	; (8006980 <__swsetup_r+0xd8>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	bf08      	it	eq
 80068f4:	68ec      	ldreq	r4, [r5, #12]
 80068f6:	e7e6      	b.n	80068c6 <__swsetup_r+0x1e>
 80068f8:	0758      	lsls	r0, r3, #29
 80068fa:	d512      	bpl.n	8006922 <__swsetup_r+0x7a>
 80068fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fe:	b141      	cbz	r1, 8006912 <__swsetup_r+0x6a>
 8006900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006904:	4299      	cmp	r1, r3
 8006906:	d002      	beq.n	800690e <__swsetup_r+0x66>
 8006908:	4630      	mov	r0, r6
 800690a:	f001 fc8b 	bl	8008224 <_free_r>
 800690e:	2300      	movs	r3, #0
 8006910:	6363      	str	r3, [r4, #52]	; 0x34
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	2300      	movs	r3, #0
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f043 0308 	orr.w	r3, r3, #8
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	b94b      	cbnz	r3, 8006942 <__swsetup_r+0x9a>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006938:	d003      	beq.n	8006942 <__swsetup_r+0x9a>
 800693a:	4621      	mov	r1, r4
 800693c:	4630      	mov	r0, r6
 800693e:	f001 f881 	bl	8007a44 <__smakebuf_r>
 8006942:	89a0      	ldrh	r0, [r4, #12]
 8006944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006948:	f010 0301 	ands.w	r3, r0, #1
 800694c:	d00a      	beq.n	8006964 <__swsetup_r+0xbc>
 800694e:	2300      	movs	r3, #0
 8006950:	60a3      	str	r3, [r4, #8]
 8006952:	6963      	ldr	r3, [r4, #20]
 8006954:	425b      	negs	r3, r3
 8006956:	61a3      	str	r3, [r4, #24]
 8006958:	6923      	ldr	r3, [r4, #16]
 800695a:	b943      	cbnz	r3, 800696e <__swsetup_r+0xc6>
 800695c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006960:	d1ba      	bne.n	80068d8 <__swsetup_r+0x30>
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	0781      	lsls	r1, r0, #30
 8006966:	bf58      	it	pl
 8006968:	6963      	ldrpl	r3, [r4, #20]
 800696a:	60a3      	str	r3, [r4, #8]
 800696c:	e7f4      	b.n	8006958 <__swsetup_r+0xb0>
 800696e:	2000      	movs	r0, #0
 8006970:	e7f7      	b.n	8006962 <__swsetup_r+0xba>
 8006972:	bf00      	nop
 8006974:	2000000c 	.word	0x2000000c
 8006978:	08008c38 	.word	0x08008c38
 800697c:	08008c58 	.word	0x08008c58
 8006980:	08008c18 	.word	0x08008c18

08006984 <quorem>:
 8006984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	6903      	ldr	r3, [r0, #16]
 800698a:	690c      	ldr	r4, [r1, #16]
 800698c:	42a3      	cmp	r3, r4
 800698e:	4607      	mov	r7, r0
 8006990:	f2c0 8081 	blt.w	8006a96 <quorem+0x112>
 8006994:	3c01      	subs	r4, #1
 8006996:	f101 0814 	add.w	r8, r1, #20
 800699a:	f100 0514 	add.w	r5, r0, #20
 800699e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ac:	3301      	adds	r3, #1
 80069ae:	429a      	cmp	r2, r3
 80069b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80069bc:	d331      	bcc.n	8006a22 <quorem+0x9e>
 80069be:	f04f 0e00 	mov.w	lr, #0
 80069c2:	4640      	mov	r0, r8
 80069c4:	46ac      	mov	ip, r5
 80069c6:	46f2      	mov	sl, lr
 80069c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80069cc:	b293      	uxth	r3, r2
 80069ce:	fb06 e303 	mla	r3, r6, r3, lr
 80069d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	ebaa 0303 	sub.w	r3, sl, r3
 80069dc:	f8dc a000 	ldr.w	sl, [ip]
 80069e0:	0c12      	lsrs	r2, r2, #16
 80069e2:	fa13 f38a 	uxtah	r3, r3, sl
 80069e6:	fb06 e202 	mla	r2, r6, r2, lr
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	9b00      	ldr	r3, [sp, #0]
 80069ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069f2:	b292      	uxth	r2, r2
 80069f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a00:	4581      	cmp	r9, r0
 8006a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a06:	f84c 3b04 	str.w	r3, [ip], #4
 8006a0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a0e:	d2db      	bcs.n	80069c8 <quorem+0x44>
 8006a10:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a14:	b92b      	cbnz	r3, 8006a22 <quorem+0x9e>
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	3b04      	subs	r3, #4
 8006a1a:	429d      	cmp	r5, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	d32e      	bcc.n	8006a7e <quorem+0xfa>
 8006a20:	613c      	str	r4, [r7, #16]
 8006a22:	4638      	mov	r0, r7
 8006a24:	f001 fae6 	bl	8007ff4 <__mcmp>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	db24      	blt.n	8006a76 <quorem+0xf2>
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f04f 0c00 	mov.w	ip, #0
 8006a34:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a38:	f8d0 e000 	ldr.w	lr, [r0]
 8006a3c:	b293      	uxth	r3, r2
 8006a3e:	ebac 0303 	sub.w	r3, ip, r3
 8006a42:	0c12      	lsrs	r2, r2, #16
 8006a44:	fa13 f38e 	uxtah	r3, r3, lr
 8006a48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a56:	45c1      	cmp	r9, r8
 8006a58:	f840 3b04 	str.w	r3, [r0], #4
 8006a5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a60:	d2e8      	bcs.n	8006a34 <quorem+0xb0>
 8006a62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a6a:	b922      	cbnz	r2, 8006a76 <quorem+0xf2>
 8006a6c:	3b04      	subs	r3, #4
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	d30a      	bcc.n	8006a8a <quorem+0x106>
 8006a74:	613c      	str	r4, [r7, #16]
 8006a76:	4630      	mov	r0, r6
 8006a78:	b003      	add	sp, #12
 8006a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	3b04      	subs	r3, #4
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	d1cc      	bne.n	8006a20 <quorem+0x9c>
 8006a86:	3c01      	subs	r4, #1
 8006a88:	e7c7      	b.n	8006a1a <quorem+0x96>
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	3b04      	subs	r3, #4
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	d1f0      	bne.n	8006a74 <quorem+0xf0>
 8006a92:	3c01      	subs	r4, #1
 8006a94:	e7eb      	b.n	8006a6e <quorem+0xea>
 8006a96:	2000      	movs	r0, #0
 8006a98:	e7ee      	b.n	8006a78 <quorem+0xf4>
 8006a9a:	0000      	movs	r0, r0
 8006a9c:	0000      	movs	r0, r0
	...

08006aa0 <_dtoa_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	ed2d 8b04 	vpush	{d8-d9}
 8006aa8:	ec57 6b10 	vmov	r6, r7, d0
 8006aac:	b093      	sub	sp, #76	; 0x4c
 8006aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ab4:	9106      	str	r1, [sp, #24]
 8006ab6:	ee10 aa10 	vmov	sl, s0
 8006aba:	4604      	mov	r4, r0
 8006abc:	9209      	str	r2, [sp, #36]	; 0x24
 8006abe:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac0:	46bb      	mov	fp, r7
 8006ac2:	b975      	cbnz	r5, 8006ae2 <_dtoa_r+0x42>
 8006ac4:	2010      	movs	r0, #16
 8006ac6:	f000 fffd 	bl	8007ac4 <malloc>
 8006aca:	4602      	mov	r2, r0
 8006acc:	6260      	str	r0, [r4, #36]	; 0x24
 8006ace:	b920      	cbnz	r0, 8006ada <_dtoa_r+0x3a>
 8006ad0:	4ba7      	ldr	r3, [pc, #668]	; (8006d70 <_dtoa_r+0x2d0>)
 8006ad2:	21ea      	movs	r1, #234	; 0xea
 8006ad4:	48a7      	ldr	r0, [pc, #668]	; (8006d74 <_dtoa_r+0x2d4>)
 8006ad6:	f001 fe8d 	bl	80087f4 <__assert_func>
 8006ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ade:	6005      	str	r5, [r0, #0]
 8006ae0:	60c5      	str	r5, [r0, #12]
 8006ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ae4:	6819      	ldr	r1, [r3, #0]
 8006ae6:	b151      	cbz	r1, 8006afe <_dtoa_r+0x5e>
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	604a      	str	r2, [r1, #4]
 8006aec:	2301      	movs	r3, #1
 8006aee:	4093      	lsls	r3, r2
 8006af0:	608b      	str	r3, [r1, #8]
 8006af2:	4620      	mov	r0, r4
 8006af4:	f001 f83c 	bl	8007b70 <_Bfree>
 8006af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	1e3b      	subs	r3, r7, #0
 8006b00:	bfaa      	itet	ge
 8006b02:	2300      	movge	r3, #0
 8006b04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b08:	f8c8 3000 	strge.w	r3, [r8]
 8006b0c:	4b9a      	ldr	r3, [pc, #616]	; (8006d78 <_dtoa_r+0x2d8>)
 8006b0e:	bfbc      	itt	lt
 8006b10:	2201      	movlt	r2, #1
 8006b12:	f8c8 2000 	strlt.w	r2, [r8]
 8006b16:	ea33 030b 	bics.w	r3, r3, fp
 8006b1a:	d11b      	bne.n	8006b54 <_dtoa_r+0xb4>
 8006b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b28:	4333      	orrs	r3, r6
 8006b2a:	f000 8592 	beq.w	8007652 <_dtoa_r+0xbb2>
 8006b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b30:	b963      	cbnz	r3, 8006b4c <_dtoa_r+0xac>
 8006b32:	4b92      	ldr	r3, [pc, #584]	; (8006d7c <_dtoa_r+0x2dc>)
 8006b34:	e022      	b.n	8006b7c <_dtoa_r+0xdc>
 8006b36:	4b92      	ldr	r3, [pc, #584]	; (8006d80 <_dtoa_r+0x2e0>)
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	9801      	ldr	r0, [sp, #4]
 8006b42:	b013      	add	sp, #76	; 0x4c
 8006b44:	ecbd 8b04 	vpop	{d8-d9}
 8006b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4c:	4b8b      	ldr	r3, [pc, #556]	; (8006d7c <_dtoa_r+0x2dc>)
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	3303      	adds	r3, #3
 8006b52:	e7f3      	b.n	8006b3c <_dtoa_r+0x9c>
 8006b54:	2200      	movs	r2, #0
 8006b56:	2300      	movs	r3, #0
 8006b58:	4650      	mov	r0, sl
 8006b5a:	4659      	mov	r1, fp
 8006b5c:	f7f9 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b60:	ec4b ab19 	vmov	d9, sl, fp
 8006b64:	4680      	mov	r8, r0
 8006b66:	b158      	cbz	r0, 8006b80 <_dtoa_r+0xe0>
 8006b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 856b 	beq.w	800764c <_dtoa_r+0xbac>
 8006b76:	4883      	ldr	r0, [pc, #524]	; (8006d84 <_dtoa_r+0x2e4>)
 8006b78:	6018      	str	r0, [r3, #0]
 8006b7a:	1e43      	subs	r3, r0, #1
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	e7df      	b.n	8006b40 <_dtoa_r+0xa0>
 8006b80:	ec4b ab10 	vmov	d0, sl, fp
 8006b84:	aa10      	add	r2, sp, #64	; 0x40
 8006b86:	a911      	add	r1, sp, #68	; 0x44
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f001 fad9 	bl	8008140 <__d2b>
 8006b8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b92:	ee08 0a10 	vmov	s16, r0
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	f000 8084 	beq.w	8006ca4 <_dtoa_r+0x204>
 8006b9c:	ee19 3a90 	vmov	r3, s19
 8006ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ba8:	4656      	mov	r6, sl
 8006baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006bb6:	4b74      	ldr	r3, [pc, #464]	; (8006d88 <_dtoa_r+0x2e8>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4630      	mov	r0, r6
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	f7f9 fb63 	bl	8000288 <__aeabi_dsub>
 8006bc2:	a365      	add	r3, pc, #404	; (adr r3, 8006d58 <_dtoa_r+0x2b8>)
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f7f9 fd16 	bl	80005f8 <__aeabi_dmul>
 8006bcc:	a364      	add	r3, pc, #400	; (adr r3, 8006d60 <_dtoa_r+0x2c0>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 fb5b 	bl	800028c <__adddf3>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	4628      	mov	r0, r5
 8006bda:	460f      	mov	r7, r1
 8006bdc:	f7f9 fca2 	bl	8000524 <__aeabi_i2d>
 8006be0:	a361      	add	r3, pc, #388	; (adr r3, 8006d68 <_dtoa_r+0x2c8>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fd07 	bl	80005f8 <__aeabi_dmul>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 fb4b 	bl	800028c <__adddf3>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	f7f9 ffad 	bl	8000b58 <__aeabi_d2iz>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	9000      	str	r0, [sp, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	f7f9 ff68 	bl	8000adc <__aeabi_dcmplt>
 8006c0c:	b150      	cbz	r0, 8006c24 <_dtoa_r+0x184>
 8006c0e:	9800      	ldr	r0, [sp, #0]
 8006c10:	f7f9 fc88 	bl	8000524 <__aeabi_i2d>
 8006c14:	4632      	mov	r2, r6
 8006c16:	463b      	mov	r3, r7
 8006c18:	f7f9 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c1c:	b910      	cbnz	r0, 8006c24 <_dtoa_r+0x184>
 8006c1e:	9b00      	ldr	r3, [sp, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	9b00      	ldr	r3, [sp, #0]
 8006c26:	2b16      	cmp	r3, #22
 8006c28:	d85a      	bhi.n	8006ce0 <_dtoa_r+0x240>
 8006c2a:	9a00      	ldr	r2, [sp, #0]
 8006c2c:	4b57      	ldr	r3, [pc, #348]	; (8006d8c <_dtoa_r+0x2ec>)
 8006c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	ec51 0b19 	vmov	r0, r1, d9
 8006c3a:	f7f9 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d050      	beq.n	8006ce4 <_dtoa_r+0x244>
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c4e:	1b5d      	subs	r5, r3, r5
 8006c50:	1e6b      	subs	r3, r5, #1
 8006c52:	9305      	str	r3, [sp, #20]
 8006c54:	bf45      	ittet	mi
 8006c56:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c5a:	9304      	strmi	r3, [sp, #16]
 8006c5c:	2300      	movpl	r3, #0
 8006c5e:	2300      	movmi	r3, #0
 8006c60:	bf4c      	ite	mi
 8006c62:	9305      	strmi	r3, [sp, #20]
 8006c64:	9304      	strpl	r3, [sp, #16]
 8006c66:	9b00      	ldr	r3, [sp, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	db3d      	blt.n	8006ce8 <_dtoa_r+0x248>
 8006c6c:	9b05      	ldr	r3, [sp, #20]
 8006c6e:	9a00      	ldr	r2, [sp, #0]
 8006c70:	920a      	str	r2, [sp, #40]	; 0x28
 8006c72:	4413      	add	r3, r2
 8006c74:	9305      	str	r3, [sp, #20]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9307      	str	r3, [sp, #28]
 8006c7a:	9b06      	ldr	r3, [sp, #24]
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	f200 8089 	bhi.w	8006d94 <_dtoa_r+0x2f4>
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	bfc4      	itt	gt
 8006c86:	3b04      	subgt	r3, #4
 8006c88:	9306      	strgt	r3, [sp, #24]
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c90:	bfcc      	ite	gt
 8006c92:	2500      	movgt	r5, #0
 8006c94:	2501      	movle	r5, #1
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	f200 8087 	bhi.w	8006daa <_dtoa_r+0x30a>
 8006c9c:	e8df f003 	tbb	[pc, r3]
 8006ca0:	59383a2d 	.word	0x59383a2d
 8006ca4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ca8:	441d      	add	r5, r3
 8006caa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	bfc1      	itttt	gt
 8006cb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cba:	fa0b f303 	lslgt.w	r3, fp, r3
 8006cbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cc2:	bfda      	itte	le
 8006cc4:	f1c3 0320 	rsble	r3, r3, #32
 8006cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8006ccc:	4318      	orrgt	r0, r3
 8006cce:	f7f9 fc19 	bl	8000504 <__aeabi_ui2d>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006cda:	3d01      	subs	r5, #1
 8006cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8006cde:	e76a      	b.n	8006bb6 <_dtoa_r+0x116>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e7b2      	b.n	8006c4a <_dtoa_r+0x1aa>
 8006ce4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ce6:	e7b1      	b.n	8006c4c <_dtoa_r+0x1ac>
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	9a00      	ldr	r2, [sp, #0]
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	9304      	str	r3, [sp, #16]
 8006cf0:	4253      	negs	r3, r2
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf8:	e7bf      	b.n	8006c7a <_dtoa_r+0x1da>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9308      	str	r3, [sp, #32]
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	dc55      	bgt.n	8006db0 <_dtoa_r+0x310>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d0e:	e00c      	b.n	8006d2a <_dtoa_r+0x28a>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e7f3      	b.n	8006cfc <_dtoa_r+0x25c>
 8006d14:	2300      	movs	r3, #0
 8006d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d18:	9308      	str	r3, [sp, #32]
 8006d1a:	9b00      	ldr	r3, [sp, #0]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	9302      	str	r3, [sp, #8]
 8006d20:	3301      	adds	r3, #1
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	9303      	str	r3, [sp, #12]
 8006d26:	bfb8      	it	lt
 8006d28:	2301      	movlt	r3, #1
 8006d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	6042      	str	r2, [r0, #4]
 8006d30:	2204      	movs	r2, #4
 8006d32:	f102 0614 	add.w	r6, r2, #20
 8006d36:	429e      	cmp	r6, r3
 8006d38:	6841      	ldr	r1, [r0, #4]
 8006d3a:	d93d      	bls.n	8006db8 <_dtoa_r+0x318>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 fed7 	bl	8007af0 <_Balloc>
 8006d42:	9001      	str	r0, [sp, #4]
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d13b      	bne.n	8006dc0 <_dtoa_r+0x320>
 8006d48:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <_dtoa_r+0x2f0>)
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d50:	e6c0      	b.n	8006ad4 <_dtoa_r+0x34>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7df      	b.n	8006d16 <_dtoa_r+0x276>
 8006d56:	bf00      	nop
 8006d58:	636f4361 	.word	0x636f4361
 8006d5c:	3fd287a7 	.word	0x3fd287a7
 8006d60:	8b60c8b3 	.word	0x8b60c8b3
 8006d64:	3fc68a28 	.word	0x3fc68a28
 8006d68:	509f79fb 	.word	0x509f79fb
 8006d6c:	3fd34413 	.word	0x3fd34413
 8006d70:	08008b95 	.word	0x08008b95
 8006d74:	08008bac 	.word	0x08008bac
 8006d78:	7ff00000 	.word	0x7ff00000
 8006d7c:	08008b91 	.word	0x08008b91
 8006d80:	08008b88 	.word	0x08008b88
 8006d84:	08008b65 	.word	0x08008b65
 8006d88:	3ff80000 	.word	0x3ff80000
 8006d8c:	08008d00 	.word	0x08008d00
 8006d90:	08008c07 	.word	0x08008c07
 8006d94:	2501      	movs	r5, #1
 8006d96:	2300      	movs	r3, #0
 8006d98:	9306      	str	r3, [sp, #24]
 8006d9a:	9508      	str	r5, [sp, #32]
 8006d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006da0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	2312      	movs	r3, #18
 8006da8:	e7b0      	b.n	8006d0c <_dtoa_r+0x26c>
 8006daa:	2301      	movs	r3, #1
 8006dac:	9308      	str	r3, [sp, #32]
 8006dae:	e7f5      	b.n	8006d9c <_dtoa_r+0x2fc>
 8006db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006db6:	e7b8      	b.n	8006d2a <_dtoa_r+0x28a>
 8006db8:	3101      	adds	r1, #1
 8006dba:	6041      	str	r1, [r0, #4]
 8006dbc:	0052      	lsls	r2, r2, #1
 8006dbe:	e7b8      	b.n	8006d32 <_dtoa_r+0x292>
 8006dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dc2:	9a01      	ldr	r2, [sp, #4]
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	2b0e      	cmp	r3, #14
 8006dca:	f200 809d 	bhi.w	8006f08 <_dtoa_r+0x468>
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	f000 809a 	beq.w	8006f08 <_dtoa_r+0x468>
 8006dd4:	9b00      	ldr	r3, [sp, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dd32      	ble.n	8006e40 <_dtoa_r+0x3a0>
 8006dda:	4ab7      	ldr	r2, [pc, #732]	; (80070b8 <_dtoa_r+0x618>)
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006de8:	9b00      	ldr	r3, [sp, #0]
 8006dea:	05d8      	lsls	r0, r3, #23
 8006dec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006df0:	d516      	bpl.n	8006e20 <_dtoa_r+0x380>
 8006df2:	4bb2      	ldr	r3, [pc, #712]	; (80070bc <_dtoa_r+0x61c>)
 8006df4:	ec51 0b19 	vmov	r0, r1, d9
 8006df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dfc:	f7f9 fd26 	bl	800084c <__aeabi_ddiv>
 8006e00:	f007 070f 	and.w	r7, r7, #15
 8006e04:	4682      	mov	sl, r0
 8006e06:	468b      	mov	fp, r1
 8006e08:	2503      	movs	r5, #3
 8006e0a:	4eac      	ldr	r6, [pc, #688]	; (80070bc <_dtoa_r+0x61c>)
 8006e0c:	b957      	cbnz	r7, 8006e24 <_dtoa_r+0x384>
 8006e0e:	4642      	mov	r2, r8
 8006e10:	464b      	mov	r3, r9
 8006e12:	4650      	mov	r0, sl
 8006e14:	4659      	mov	r1, fp
 8006e16:	f7f9 fd19 	bl	800084c <__aeabi_ddiv>
 8006e1a:	4682      	mov	sl, r0
 8006e1c:	468b      	mov	fp, r1
 8006e1e:	e028      	b.n	8006e72 <_dtoa_r+0x3d2>
 8006e20:	2502      	movs	r5, #2
 8006e22:	e7f2      	b.n	8006e0a <_dtoa_r+0x36a>
 8006e24:	07f9      	lsls	r1, r7, #31
 8006e26:	d508      	bpl.n	8006e3a <_dtoa_r+0x39a>
 8006e28:	4640      	mov	r0, r8
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e30:	f7f9 fbe2 	bl	80005f8 <__aeabi_dmul>
 8006e34:	3501      	adds	r5, #1
 8006e36:	4680      	mov	r8, r0
 8006e38:	4689      	mov	r9, r1
 8006e3a:	107f      	asrs	r7, r7, #1
 8006e3c:	3608      	adds	r6, #8
 8006e3e:	e7e5      	b.n	8006e0c <_dtoa_r+0x36c>
 8006e40:	f000 809b 	beq.w	8006f7a <_dtoa_r+0x4da>
 8006e44:	9b00      	ldr	r3, [sp, #0]
 8006e46:	4f9d      	ldr	r7, [pc, #628]	; (80070bc <_dtoa_r+0x61c>)
 8006e48:	425e      	negs	r6, r3
 8006e4a:	4b9b      	ldr	r3, [pc, #620]	; (80070b8 <_dtoa_r+0x618>)
 8006e4c:	f006 020f 	and.w	r2, r6, #15
 8006e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	ec51 0b19 	vmov	r0, r1, d9
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	1136      	asrs	r6, r6, #4
 8006e62:	4682      	mov	sl, r0
 8006e64:	468b      	mov	fp, r1
 8006e66:	2300      	movs	r3, #0
 8006e68:	2502      	movs	r5, #2
 8006e6a:	2e00      	cmp	r6, #0
 8006e6c:	d17a      	bne.n	8006f64 <_dtoa_r+0x4c4>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1d3      	bne.n	8006e1a <_dtoa_r+0x37a>
 8006e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8082 	beq.w	8006f7e <_dtoa_r+0x4de>
 8006e7a:	4b91      	ldr	r3, [pc, #580]	; (80070c0 <_dtoa_r+0x620>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4650      	mov	r0, sl
 8006e80:	4659      	mov	r1, fp
 8006e82:	f7f9 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d079      	beq.n	8006f7e <_dtoa_r+0x4de>
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d076      	beq.n	8006f7e <_dtoa_r+0x4de>
 8006e90:	9b02      	ldr	r3, [sp, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dd36      	ble.n	8006f04 <_dtoa_r+0x464>
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	4650      	mov	r0, sl
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	1e5f      	subs	r7, r3, #1
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	4b88      	ldr	r3, [pc, #544]	; (80070c4 <_dtoa_r+0x624>)
 8006ea2:	f7f9 fba9 	bl	80005f8 <__aeabi_dmul>
 8006ea6:	9e02      	ldr	r6, [sp, #8]
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	468b      	mov	fp, r1
 8006eac:	3501      	adds	r5, #1
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7f9 fb38 	bl	8000524 <__aeabi_i2d>
 8006eb4:	4652      	mov	r2, sl
 8006eb6:	465b      	mov	r3, fp
 8006eb8:	f7f9 fb9e 	bl	80005f8 <__aeabi_dmul>
 8006ebc:	4b82      	ldr	r3, [pc, #520]	; (80070c8 <_dtoa_r+0x628>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f7f9 f9e4 	bl	800028c <__adddf3>
 8006ec4:	46d0      	mov	r8, sl
 8006ec6:	46d9      	mov	r9, fp
 8006ec8:	4682      	mov	sl, r0
 8006eca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	d158      	bne.n	8006f84 <_dtoa_r+0x4e4>
 8006ed2:	4b7e      	ldr	r3, [pc, #504]	; (80070cc <_dtoa_r+0x62c>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4649      	mov	r1, r9
 8006eda:	f7f9 f9d5 	bl	8000288 <__aeabi_dsub>
 8006ede:	4652      	mov	r2, sl
 8006ee0:	465b      	mov	r3, fp
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	4689      	mov	r9, r1
 8006ee6:	f7f9 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	f040 8295 	bne.w	800741a <_dtoa_r+0x97a>
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 fdef 	bl	8000adc <__aeabi_dcmplt>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	f040 8289 	bne.w	8007416 <_dtoa_r+0x976>
 8006f04:	ec5b ab19 	vmov	sl, fp, d9
 8006f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f2c0 8148 	blt.w	80071a0 <_dtoa_r+0x700>
 8006f10:	9a00      	ldr	r2, [sp, #0]
 8006f12:	2a0e      	cmp	r2, #14
 8006f14:	f300 8144 	bgt.w	80071a0 <_dtoa_r+0x700>
 8006f18:	4b67      	ldr	r3, [pc, #412]	; (80070b8 <_dtoa_r+0x618>)
 8006f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f280 80d5 	bge.w	80070d4 <_dtoa_r+0x634>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f300 80d1 	bgt.w	80070d4 <_dtoa_r+0x634>
 8006f32:	f040 826f 	bne.w	8007414 <_dtoa_r+0x974>
 8006f36:	4b65      	ldr	r3, [pc, #404]	; (80070cc <_dtoa_r+0x62c>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 fb5b 	bl	80005f8 <__aeabi_dmul>
 8006f42:	4652      	mov	r2, sl
 8006f44:	465b      	mov	r3, fp
 8006f46:	f7f9 fddd 	bl	8000b04 <__aeabi_dcmpge>
 8006f4a:	9e03      	ldr	r6, [sp, #12]
 8006f4c:	4637      	mov	r7, r6
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f040 8245 	bne.w	80073de <_dtoa_r+0x93e>
 8006f54:	9d01      	ldr	r5, [sp, #4]
 8006f56:	2331      	movs	r3, #49	; 0x31
 8006f58:	f805 3b01 	strb.w	r3, [r5], #1
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	e240      	b.n	80073e6 <_dtoa_r+0x946>
 8006f64:	07f2      	lsls	r2, r6, #31
 8006f66:	d505      	bpl.n	8006f74 <_dtoa_r+0x4d4>
 8006f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f6c:	f7f9 fb44 	bl	80005f8 <__aeabi_dmul>
 8006f70:	3501      	adds	r5, #1
 8006f72:	2301      	movs	r3, #1
 8006f74:	1076      	asrs	r6, r6, #1
 8006f76:	3708      	adds	r7, #8
 8006f78:	e777      	b.n	8006e6a <_dtoa_r+0x3ca>
 8006f7a:	2502      	movs	r5, #2
 8006f7c:	e779      	b.n	8006e72 <_dtoa_r+0x3d2>
 8006f7e:	9f00      	ldr	r7, [sp, #0]
 8006f80:	9e03      	ldr	r6, [sp, #12]
 8006f82:	e794      	b.n	8006eae <_dtoa_r+0x40e>
 8006f84:	9901      	ldr	r1, [sp, #4]
 8006f86:	4b4c      	ldr	r3, [pc, #304]	; (80070b8 <_dtoa_r+0x618>)
 8006f88:	4431      	add	r1, r6
 8006f8a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f8c:	9908      	ldr	r1, [sp, #32]
 8006f8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d043      	beq.n	8007022 <_dtoa_r+0x582>
 8006f9a:	494d      	ldr	r1, [pc, #308]	; (80070d0 <_dtoa_r+0x630>)
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f7f9 fc55 	bl	800084c <__aeabi_ddiv>
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	465b      	mov	r3, fp
 8006fa6:	f7f9 f96f 	bl	8000288 <__aeabi_dsub>
 8006faa:	9d01      	ldr	r5, [sp, #4]
 8006fac:	4682      	mov	sl, r0
 8006fae:	468b      	mov	fp, r1
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7f9 fdd0 	bl	8000b58 <__aeabi_d2iz>
 8006fb8:	4606      	mov	r6, r0
 8006fba:	f7f9 fab3 	bl	8000524 <__aeabi_i2d>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	f7f9 f95f 	bl	8000288 <__aeabi_dsub>
 8006fca:	3630      	adds	r6, #48	; 0x30
 8006fcc:	f805 6b01 	strb.w	r6, [r5], #1
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	465b      	mov	r3, fp
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	4689      	mov	r9, r1
 8006fd8:	f7f9 fd80 	bl	8000adc <__aeabi_dcmplt>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d163      	bne.n	80070a8 <_dtoa_r+0x608>
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	4936      	ldr	r1, [pc, #216]	; (80070c0 <_dtoa_r+0x620>)
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	f7f9 f94e 	bl	8000288 <__aeabi_dsub>
 8006fec:	4652      	mov	r2, sl
 8006fee:	465b      	mov	r3, fp
 8006ff0:	f7f9 fd74 	bl	8000adc <__aeabi_dcmplt>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	f040 80b5 	bne.w	8007164 <_dtoa_r+0x6c4>
 8006ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ffc:	429d      	cmp	r5, r3
 8006ffe:	d081      	beq.n	8006f04 <_dtoa_r+0x464>
 8007000:	4b30      	ldr	r3, [pc, #192]	; (80070c4 <_dtoa_r+0x624>)
 8007002:	2200      	movs	r2, #0
 8007004:	4650      	mov	r0, sl
 8007006:	4659      	mov	r1, fp
 8007008:	f7f9 faf6 	bl	80005f8 <__aeabi_dmul>
 800700c:	4b2d      	ldr	r3, [pc, #180]	; (80070c4 <_dtoa_r+0x624>)
 800700e:	4682      	mov	sl, r0
 8007010:	468b      	mov	fp, r1
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	2200      	movs	r2, #0
 8007018:	f7f9 faee 	bl	80005f8 <__aeabi_dmul>
 800701c:	4680      	mov	r8, r0
 800701e:	4689      	mov	r9, r1
 8007020:	e7c6      	b.n	8006fb0 <_dtoa_r+0x510>
 8007022:	4650      	mov	r0, sl
 8007024:	4659      	mov	r1, fp
 8007026:	f7f9 fae7 	bl	80005f8 <__aeabi_dmul>
 800702a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800702c:	9d01      	ldr	r5, [sp, #4]
 800702e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007030:	4682      	mov	sl, r0
 8007032:	468b      	mov	fp, r1
 8007034:	4649      	mov	r1, r9
 8007036:	4640      	mov	r0, r8
 8007038:	f7f9 fd8e 	bl	8000b58 <__aeabi_d2iz>
 800703c:	4606      	mov	r6, r0
 800703e:	f7f9 fa71 	bl	8000524 <__aeabi_i2d>
 8007042:	3630      	adds	r6, #48	; 0x30
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4640      	mov	r0, r8
 800704a:	4649      	mov	r1, r9
 800704c:	f7f9 f91c 	bl	8000288 <__aeabi_dsub>
 8007050:	f805 6b01 	strb.w	r6, [r5], #1
 8007054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007056:	429d      	cmp	r5, r3
 8007058:	4680      	mov	r8, r0
 800705a:	4689      	mov	r9, r1
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	d124      	bne.n	80070ac <_dtoa_r+0x60c>
 8007062:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <_dtoa_r+0x630>)
 8007064:	4650      	mov	r0, sl
 8007066:	4659      	mov	r1, fp
 8007068:	f7f9 f910 	bl	800028c <__adddf3>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4640      	mov	r0, r8
 8007072:	4649      	mov	r1, r9
 8007074:	f7f9 fd50 	bl	8000b18 <__aeabi_dcmpgt>
 8007078:	2800      	cmp	r0, #0
 800707a:	d173      	bne.n	8007164 <_dtoa_r+0x6c4>
 800707c:	4652      	mov	r2, sl
 800707e:	465b      	mov	r3, fp
 8007080:	4913      	ldr	r1, [pc, #76]	; (80070d0 <_dtoa_r+0x630>)
 8007082:	2000      	movs	r0, #0
 8007084:	f7f9 f900 	bl	8000288 <__aeabi_dsub>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4640      	mov	r0, r8
 800708e:	4649      	mov	r1, r9
 8007090:	f7f9 fd24 	bl	8000adc <__aeabi_dcmplt>
 8007094:	2800      	cmp	r0, #0
 8007096:	f43f af35 	beq.w	8006f04 <_dtoa_r+0x464>
 800709a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800709c:	1e6b      	subs	r3, r5, #1
 800709e:	930f      	str	r3, [sp, #60]	; 0x3c
 80070a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070a4:	2b30      	cmp	r3, #48	; 0x30
 80070a6:	d0f8      	beq.n	800709a <_dtoa_r+0x5fa>
 80070a8:	9700      	str	r7, [sp, #0]
 80070aa:	e049      	b.n	8007140 <_dtoa_r+0x6a0>
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <_dtoa_r+0x624>)
 80070ae:	f7f9 faa3 	bl	80005f8 <__aeabi_dmul>
 80070b2:	4680      	mov	r8, r0
 80070b4:	4689      	mov	r9, r1
 80070b6:	e7bd      	b.n	8007034 <_dtoa_r+0x594>
 80070b8:	08008d00 	.word	0x08008d00
 80070bc:	08008cd8 	.word	0x08008cd8
 80070c0:	3ff00000 	.word	0x3ff00000
 80070c4:	40240000 	.word	0x40240000
 80070c8:	401c0000 	.word	0x401c0000
 80070cc:	40140000 	.word	0x40140000
 80070d0:	3fe00000 	.word	0x3fe00000
 80070d4:	9d01      	ldr	r5, [sp, #4]
 80070d6:	4656      	mov	r6, sl
 80070d8:	465f      	mov	r7, fp
 80070da:	4642      	mov	r2, r8
 80070dc:	464b      	mov	r3, r9
 80070de:	4630      	mov	r0, r6
 80070e0:	4639      	mov	r1, r7
 80070e2:	f7f9 fbb3 	bl	800084c <__aeabi_ddiv>
 80070e6:	f7f9 fd37 	bl	8000b58 <__aeabi_d2iz>
 80070ea:	4682      	mov	sl, r0
 80070ec:	f7f9 fa1a 	bl	8000524 <__aeabi_i2d>
 80070f0:	4642      	mov	r2, r8
 80070f2:	464b      	mov	r3, r9
 80070f4:	f7f9 fa80 	bl	80005f8 <__aeabi_dmul>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007104:	f7f9 f8c0 	bl	8000288 <__aeabi_dsub>
 8007108:	f805 6b01 	strb.w	r6, [r5], #1
 800710c:	9e01      	ldr	r6, [sp, #4]
 800710e:	9f03      	ldr	r7, [sp, #12]
 8007110:	1bae      	subs	r6, r5, r6
 8007112:	42b7      	cmp	r7, r6
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	d135      	bne.n	8007186 <_dtoa_r+0x6e6>
 800711a:	f7f9 f8b7 	bl	800028c <__adddf3>
 800711e:	4642      	mov	r2, r8
 8007120:	464b      	mov	r3, r9
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	f7f9 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800712a:	b9d0      	cbnz	r0, 8007162 <_dtoa_r+0x6c2>
 800712c:	4642      	mov	r2, r8
 800712e:	464b      	mov	r3, r9
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007138:	b110      	cbz	r0, 8007140 <_dtoa_r+0x6a0>
 800713a:	f01a 0f01 	tst.w	sl, #1
 800713e:	d110      	bne.n	8007162 <_dtoa_r+0x6c2>
 8007140:	4620      	mov	r0, r4
 8007142:	ee18 1a10 	vmov	r1, s16
 8007146:	f000 fd13 	bl	8007b70 <_Bfree>
 800714a:	2300      	movs	r3, #0
 800714c:	9800      	ldr	r0, [sp, #0]
 800714e:	702b      	strb	r3, [r5, #0]
 8007150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007152:	3001      	adds	r0, #1
 8007154:	6018      	str	r0, [r3, #0]
 8007156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007158:	2b00      	cmp	r3, #0
 800715a:	f43f acf1 	beq.w	8006b40 <_dtoa_r+0xa0>
 800715e:	601d      	str	r5, [r3, #0]
 8007160:	e4ee      	b.n	8006b40 <_dtoa_r+0xa0>
 8007162:	9f00      	ldr	r7, [sp, #0]
 8007164:	462b      	mov	r3, r5
 8007166:	461d      	mov	r5, r3
 8007168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800716c:	2a39      	cmp	r2, #57	; 0x39
 800716e:	d106      	bne.n	800717e <_dtoa_r+0x6de>
 8007170:	9a01      	ldr	r2, [sp, #4]
 8007172:	429a      	cmp	r2, r3
 8007174:	d1f7      	bne.n	8007166 <_dtoa_r+0x6c6>
 8007176:	9901      	ldr	r1, [sp, #4]
 8007178:	2230      	movs	r2, #48	; 0x30
 800717a:	3701      	adds	r7, #1
 800717c:	700a      	strb	r2, [r1, #0]
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	3201      	adds	r2, #1
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	e790      	b.n	80070a8 <_dtoa_r+0x608>
 8007186:	4ba6      	ldr	r3, [pc, #664]	; (8007420 <_dtoa_r+0x980>)
 8007188:	2200      	movs	r2, #0
 800718a:	f7f9 fa35 	bl	80005f8 <__aeabi_dmul>
 800718e:	2200      	movs	r2, #0
 8007190:	2300      	movs	r3, #0
 8007192:	4606      	mov	r6, r0
 8007194:	460f      	mov	r7, r1
 8007196:	f7f9 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800719a:	2800      	cmp	r0, #0
 800719c:	d09d      	beq.n	80070da <_dtoa_r+0x63a>
 800719e:	e7cf      	b.n	8007140 <_dtoa_r+0x6a0>
 80071a0:	9a08      	ldr	r2, [sp, #32]
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	f000 80d7 	beq.w	8007356 <_dtoa_r+0x8b6>
 80071a8:	9a06      	ldr	r2, [sp, #24]
 80071aa:	2a01      	cmp	r2, #1
 80071ac:	f300 80ba 	bgt.w	8007324 <_dtoa_r+0x884>
 80071b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	f000 80b2 	beq.w	800731c <_dtoa_r+0x87c>
 80071b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071bc:	9e07      	ldr	r6, [sp, #28]
 80071be:	9d04      	ldr	r5, [sp, #16]
 80071c0:	9a04      	ldr	r2, [sp, #16]
 80071c2:	441a      	add	r2, r3
 80071c4:	9204      	str	r2, [sp, #16]
 80071c6:	9a05      	ldr	r2, [sp, #20]
 80071c8:	2101      	movs	r1, #1
 80071ca:	441a      	add	r2, r3
 80071cc:	4620      	mov	r0, r4
 80071ce:	9205      	str	r2, [sp, #20]
 80071d0:	f000 fd86 	bl	8007ce0 <__i2b>
 80071d4:	4607      	mov	r7, r0
 80071d6:	2d00      	cmp	r5, #0
 80071d8:	dd0c      	ble.n	80071f4 <_dtoa_r+0x754>
 80071da:	9b05      	ldr	r3, [sp, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dd09      	ble.n	80071f4 <_dtoa_r+0x754>
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	9a04      	ldr	r2, [sp, #16]
 80071e4:	bfa8      	it	ge
 80071e6:	462b      	movge	r3, r5
 80071e8:	1ad2      	subs	r2, r2, r3
 80071ea:	9204      	str	r2, [sp, #16]
 80071ec:	9a05      	ldr	r2, [sp, #20]
 80071ee:	1aed      	subs	r5, r5, r3
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	9305      	str	r3, [sp, #20]
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	b31b      	cbz	r3, 8007240 <_dtoa_r+0x7a0>
 80071f8:	9b08      	ldr	r3, [sp, #32]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80af 	beq.w	800735e <_dtoa_r+0x8be>
 8007200:	2e00      	cmp	r6, #0
 8007202:	dd13      	ble.n	800722c <_dtoa_r+0x78c>
 8007204:	4639      	mov	r1, r7
 8007206:	4632      	mov	r2, r6
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fe29 	bl	8007e60 <__pow5mult>
 800720e:	ee18 2a10 	vmov	r2, s16
 8007212:	4601      	mov	r1, r0
 8007214:	4607      	mov	r7, r0
 8007216:	4620      	mov	r0, r4
 8007218:	f000 fd78 	bl	8007d0c <__multiply>
 800721c:	ee18 1a10 	vmov	r1, s16
 8007220:	4680      	mov	r8, r0
 8007222:	4620      	mov	r0, r4
 8007224:	f000 fca4 	bl	8007b70 <_Bfree>
 8007228:	ee08 8a10 	vmov	s16, r8
 800722c:	9b07      	ldr	r3, [sp, #28]
 800722e:	1b9a      	subs	r2, r3, r6
 8007230:	d006      	beq.n	8007240 <_dtoa_r+0x7a0>
 8007232:	ee18 1a10 	vmov	r1, s16
 8007236:	4620      	mov	r0, r4
 8007238:	f000 fe12 	bl	8007e60 <__pow5mult>
 800723c:	ee08 0a10 	vmov	s16, r0
 8007240:	2101      	movs	r1, #1
 8007242:	4620      	mov	r0, r4
 8007244:	f000 fd4c 	bl	8007ce0 <__i2b>
 8007248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724a:	2b00      	cmp	r3, #0
 800724c:	4606      	mov	r6, r0
 800724e:	f340 8088 	ble.w	8007362 <_dtoa_r+0x8c2>
 8007252:	461a      	mov	r2, r3
 8007254:	4601      	mov	r1, r0
 8007256:	4620      	mov	r0, r4
 8007258:	f000 fe02 	bl	8007e60 <__pow5mult>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	2b01      	cmp	r3, #1
 8007260:	4606      	mov	r6, r0
 8007262:	f340 8081 	ble.w	8007368 <_dtoa_r+0x8c8>
 8007266:	f04f 0800 	mov.w	r8, #0
 800726a:	6933      	ldr	r3, [r6, #16]
 800726c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007270:	6918      	ldr	r0, [r3, #16]
 8007272:	f000 fce5 	bl	8007c40 <__hi0bits>
 8007276:	f1c0 0020 	rsb	r0, r0, #32
 800727a:	9b05      	ldr	r3, [sp, #20]
 800727c:	4418      	add	r0, r3
 800727e:	f010 001f 	ands.w	r0, r0, #31
 8007282:	f000 8092 	beq.w	80073aa <_dtoa_r+0x90a>
 8007286:	f1c0 0320 	rsb	r3, r0, #32
 800728a:	2b04      	cmp	r3, #4
 800728c:	f340 808a 	ble.w	80073a4 <_dtoa_r+0x904>
 8007290:	f1c0 001c 	rsb	r0, r0, #28
 8007294:	9b04      	ldr	r3, [sp, #16]
 8007296:	4403      	add	r3, r0
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	9b05      	ldr	r3, [sp, #20]
 800729c:	4403      	add	r3, r0
 800729e:	4405      	add	r5, r0
 80072a0:	9305      	str	r3, [sp, #20]
 80072a2:	9b04      	ldr	r3, [sp, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd07      	ble.n	80072b8 <_dtoa_r+0x818>
 80072a8:	ee18 1a10 	vmov	r1, s16
 80072ac:	461a      	mov	r2, r3
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 fe30 	bl	8007f14 <__lshift>
 80072b4:	ee08 0a10 	vmov	s16, r0
 80072b8:	9b05      	ldr	r3, [sp, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dd05      	ble.n	80072ca <_dtoa_r+0x82a>
 80072be:	4631      	mov	r1, r6
 80072c0:	461a      	mov	r2, r3
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 fe26 	bl	8007f14 <__lshift>
 80072c8:	4606      	mov	r6, r0
 80072ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d06e      	beq.n	80073ae <_dtoa_r+0x90e>
 80072d0:	ee18 0a10 	vmov	r0, s16
 80072d4:	4631      	mov	r1, r6
 80072d6:	f000 fe8d 	bl	8007ff4 <__mcmp>
 80072da:	2800      	cmp	r0, #0
 80072dc:	da67      	bge.n	80073ae <_dtoa_r+0x90e>
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	ee18 1a10 	vmov	r1, s16
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	220a      	movs	r2, #10
 80072ea:	2300      	movs	r3, #0
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 fc61 	bl	8007bb4 <__multadd>
 80072f2:	9b08      	ldr	r3, [sp, #32]
 80072f4:	ee08 0a10 	vmov	s16, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 81b1 	beq.w	8007660 <_dtoa_r+0xbc0>
 80072fe:	2300      	movs	r3, #0
 8007300:	4639      	mov	r1, r7
 8007302:	220a      	movs	r2, #10
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fc55 	bl	8007bb4 <__multadd>
 800730a:	9b02      	ldr	r3, [sp, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	4607      	mov	r7, r0
 8007310:	f300 808e 	bgt.w	8007430 <_dtoa_r+0x990>
 8007314:	9b06      	ldr	r3, [sp, #24]
 8007316:	2b02      	cmp	r3, #2
 8007318:	dc51      	bgt.n	80073be <_dtoa_r+0x91e>
 800731a:	e089      	b.n	8007430 <_dtoa_r+0x990>
 800731c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800731e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007322:	e74b      	b.n	80071bc <_dtoa_r+0x71c>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	1e5e      	subs	r6, r3, #1
 8007328:	9b07      	ldr	r3, [sp, #28]
 800732a:	42b3      	cmp	r3, r6
 800732c:	bfbf      	itttt	lt
 800732e:	9b07      	ldrlt	r3, [sp, #28]
 8007330:	9607      	strlt	r6, [sp, #28]
 8007332:	1af2      	sublt	r2, r6, r3
 8007334:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007336:	bfb6      	itet	lt
 8007338:	189b      	addlt	r3, r3, r2
 800733a:	1b9e      	subge	r6, r3, r6
 800733c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	bfb8      	it	lt
 8007342:	2600      	movlt	r6, #0
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb7      	itett	lt
 8007348:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800734c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007350:	1a9d      	sublt	r5, r3, r2
 8007352:	2300      	movlt	r3, #0
 8007354:	e734      	b.n	80071c0 <_dtoa_r+0x720>
 8007356:	9e07      	ldr	r6, [sp, #28]
 8007358:	9d04      	ldr	r5, [sp, #16]
 800735a:	9f08      	ldr	r7, [sp, #32]
 800735c:	e73b      	b.n	80071d6 <_dtoa_r+0x736>
 800735e:	9a07      	ldr	r2, [sp, #28]
 8007360:	e767      	b.n	8007232 <_dtoa_r+0x792>
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	2b01      	cmp	r3, #1
 8007366:	dc18      	bgt.n	800739a <_dtoa_r+0x8fa>
 8007368:	f1ba 0f00 	cmp.w	sl, #0
 800736c:	d115      	bne.n	800739a <_dtoa_r+0x8fa>
 800736e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007372:	b993      	cbnz	r3, 800739a <_dtoa_r+0x8fa>
 8007374:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007378:	0d1b      	lsrs	r3, r3, #20
 800737a:	051b      	lsls	r3, r3, #20
 800737c:	b183      	cbz	r3, 80073a0 <_dtoa_r+0x900>
 800737e:	9b04      	ldr	r3, [sp, #16]
 8007380:	3301      	adds	r3, #1
 8007382:	9304      	str	r3, [sp, #16]
 8007384:	9b05      	ldr	r3, [sp, #20]
 8007386:	3301      	adds	r3, #1
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	f04f 0801 	mov.w	r8, #1
 800738e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007390:	2b00      	cmp	r3, #0
 8007392:	f47f af6a 	bne.w	800726a <_dtoa_r+0x7ca>
 8007396:	2001      	movs	r0, #1
 8007398:	e76f      	b.n	800727a <_dtoa_r+0x7da>
 800739a:	f04f 0800 	mov.w	r8, #0
 800739e:	e7f6      	b.n	800738e <_dtoa_r+0x8ee>
 80073a0:	4698      	mov	r8, r3
 80073a2:	e7f4      	b.n	800738e <_dtoa_r+0x8ee>
 80073a4:	f43f af7d 	beq.w	80072a2 <_dtoa_r+0x802>
 80073a8:	4618      	mov	r0, r3
 80073aa:	301c      	adds	r0, #28
 80073ac:	e772      	b.n	8007294 <_dtoa_r+0x7f4>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dc37      	bgt.n	8007424 <_dtoa_r+0x984>
 80073b4:	9b06      	ldr	r3, [sp, #24]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	dd34      	ble.n	8007424 <_dtoa_r+0x984>
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	9302      	str	r3, [sp, #8]
 80073be:	9b02      	ldr	r3, [sp, #8]
 80073c0:	b96b      	cbnz	r3, 80073de <_dtoa_r+0x93e>
 80073c2:	4631      	mov	r1, r6
 80073c4:	2205      	movs	r2, #5
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 fbf4 	bl	8007bb4 <__multadd>
 80073cc:	4601      	mov	r1, r0
 80073ce:	4606      	mov	r6, r0
 80073d0:	ee18 0a10 	vmov	r0, s16
 80073d4:	f000 fe0e 	bl	8007ff4 <__mcmp>
 80073d8:	2800      	cmp	r0, #0
 80073da:	f73f adbb 	bgt.w	8006f54 <_dtoa_r+0x4b4>
 80073de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e0:	9d01      	ldr	r5, [sp, #4]
 80073e2:	43db      	mvns	r3, r3
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	f04f 0800 	mov.w	r8, #0
 80073ea:	4631      	mov	r1, r6
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 fbbf 	bl	8007b70 <_Bfree>
 80073f2:	2f00      	cmp	r7, #0
 80073f4:	f43f aea4 	beq.w	8007140 <_dtoa_r+0x6a0>
 80073f8:	f1b8 0f00 	cmp.w	r8, #0
 80073fc:	d005      	beq.n	800740a <_dtoa_r+0x96a>
 80073fe:	45b8      	cmp	r8, r7
 8007400:	d003      	beq.n	800740a <_dtoa_r+0x96a>
 8007402:	4641      	mov	r1, r8
 8007404:	4620      	mov	r0, r4
 8007406:	f000 fbb3 	bl	8007b70 <_Bfree>
 800740a:	4639      	mov	r1, r7
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fbaf 	bl	8007b70 <_Bfree>
 8007412:	e695      	b.n	8007140 <_dtoa_r+0x6a0>
 8007414:	2600      	movs	r6, #0
 8007416:	4637      	mov	r7, r6
 8007418:	e7e1      	b.n	80073de <_dtoa_r+0x93e>
 800741a:	9700      	str	r7, [sp, #0]
 800741c:	4637      	mov	r7, r6
 800741e:	e599      	b.n	8006f54 <_dtoa_r+0x4b4>
 8007420:	40240000 	.word	0x40240000
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80ca 	beq.w	80075c0 <_dtoa_r+0xb20>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	9302      	str	r3, [sp, #8]
 8007430:	2d00      	cmp	r5, #0
 8007432:	dd05      	ble.n	8007440 <_dtoa_r+0x9a0>
 8007434:	4639      	mov	r1, r7
 8007436:	462a      	mov	r2, r5
 8007438:	4620      	mov	r0, r4
 800743a:	f000 fd6b 	bl	8007f14 <__lshift>
 800743e:	4607      	mov	r7, r0
 8007440:	f1b8 0f00 	cmp.w	r8, #0
 8007444:	d05b      	beq.n	80074fe <_dtoa_r+0xa5e>
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4620      	mov	r0, r4
 800744a:	f000 fb51 	bl	8007af0 <_Balloc>
 800744e:	4605      	mov	r5, r0
 8007450:	b928      	cbnz	r0, 800745e <_dtoa_r+0x9be>
 8007452:	4b87      	ldr	r3, [pc, #540]	; (8007670 <_dtoa_r+0xbd0>)
 8007454:	4602      	mov	r2, r0
 8007456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800745a:	f7ff bb3b 	b.w	8006ad4 <_dtoa_r+0x34>
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	3202      	adds	r2, #2
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	f107 010c 	add.w	r1, r7, #12
 8007468:	300c      	adds	r0, #12
 800746a:	f000 fb33 	bl	8007ad4 <memcpy>
 800746e:	2201      	movs	r2, #1
 8007470:	4629      	mov	r1, r5
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fd4e 	bl	8007f14 <__lshift>
 8007478:	9b01      	ldr	r3, [sp, #4]
 800747a:	f103 0901 	add.w	r9, r3, #1
 800747e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007482:	4413      	add	r3, r2
 8007484:	9305      	str	r3, [sp, #20]
 8007486:	f00a 0301 	and.w	r3, sl, #1
 800748a:	46b8      	mov	r8, r7
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	4607      	mov	r7, r0
 8007490:	4631      	mov	r1, r6
 8007492:	ee18 0a10 	vmov	r0, s16
 8007496:	f7ff fa75 	bl	8006984 <quorem>
 800749a:	4641      	mov	r1, r8
 800749c:	9002      	str	r0, [sp, #8]
 800749e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074a2:	ee18 0a10 	vmov	r0, s16
 80074a6:	f000 fda5 	bl	8007ff4 <__mcmp>
 80074aa:	463a      	mov	r2, r7
 80074ac:	9003      	str	r0, [sp, #12]
 80074ae:	4631      	mov	r1, r6
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 fdbb 	bl	800802c <__mdiff>
 80074b6:	68c2      	ldr	r2, [r0, #12]
 80074b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80074bc:	4605      	mov	r5, r0
 80074be:	bb02      	cbnz	r2, 8007502 <_dtoa_r+0xa62>
 80074c0:	4601      	mov	r1, r0
 80074c2:	ee18 0a10 	vmov	r0, s16
 80074c6:	f000 fd95 	bl	8007ff4 <__mcmp>
 80074ca:	4602      	mov	r2, r0
 80074cc:	4629      	mov	r1, r5
 80074ce:	4620      	mov	r0, r4
 80074d0:	9207      	str	r2, [sp, #28]
 80074d2:	f000 fb4d 	bl	8007b70 <_Bfree>
 80074d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80074da:	ea43 0102 	orr.w	r1, r3, r2
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	430b      	orrs	r3, r1
 80074e2:	464d      	mov	r5, r9
 80074e4:	d10f      	bne.n	8007506 <_dtoa_r+0xa66>
 80074e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074ea:	d02a      	beq.n	8007542 <_dtoa_r+0xaa2>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dd02      	ble.n	80074f8 <_dtoa_r+0xa58>
 80074f2:	9b02      	ldr	r3, [sp, #8]
 80074f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80074f8:	f88b a000 	strb.w	sl, [fp]
 80074fc:	e775      	b.n	80073ea <_dtoa_r+0x94a>
 80074fe:	4638      	mov	r0, r7
 8007500:	e7ba      	b.n	8007478 <_dtoa_r+0x9d8>
 8007502:	2201      	movs	r2, #1
 8007504:	e7e2      	b.n	80074cc <_dtoa_r+0xa2c>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	db04      	blt.n	8007516 <_dtoa_r+0xa76>
 800750c:	9906      	ldr	r1, [sp, #24]
 800750e:	430b      	orrs	r3, r1
 8007510:	9904      	ldr	r1, [sp, #16]
 8007512:	430b      	orrs	r3, r1
 8007514:	d122      	bne.n	800755c <_dtoa_r+0xabc>
 8007516:	2a00      	cmp	r2, #0
 8007518:	ddee      	ble.n	80074f8 <_dtoa_r+0xa58>
 800751a:	ee18 1a10 	vmov	r1, s16
 800751e:	2201      	movs	r2, #1
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fcf7 	bl	8007f14 <__lshift>
 8007526:	4631      	mov	r1, r6
 8007528:	ee08 0a10 	vmov	s16, r0
 800752c:	f000 fd62 	bl	8007ff4 <__mcmp>
 8007530:	2800      	cmp	r0, #0
 8007532:	dc03      	bgt.n	800753c <_dtoa_r+0xa9c>
 8007534:	d1e0      	bne.n	80074f8 <_dtoa_r+0xa58>
 8007536:	f01a 0f01 	tst.w	sl, #1
 800753a:	d0dd      	beq.n	80074f8 <_dtoa_r+0xa58>
 800753c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007540:	d1d7      	bne.n	80074f2 <_dtoa_r+0xa52>
 8007542:	2339      	movs	r3, #57	; 0x39
 8007544:	f88b 3000 	strb.w	r3, [fp]
 8007548:	462b      	mov	r3, r5
 800754a:	461d      	mov	r5, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007552:	2a39      	cmp	r2, #57	; 0x39
 8007554:	d071      	beq.n	800763a <_dtoa_r+0xb9a>
 8007556:	3201      	adds	r2, #1
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	e746      	b.n	80073ea <_dtoa_r+0x94a>
 800755c:	2a00      	cmp	r2, #0
 800755e:	dd07      	ble.n	8007570 <_dtoa_r+0xad0>
 8007560:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007564:	d0ed      	beq.n	8007542 <_dtoa_r+0xaa2>
 8007566:	f10a 0301 	add.w	r3, sl, #1
 800756a:	f88b 3000 	strb.w	r3, [fp]
 800756e:	e73c      	b.n	80073ea <_dtoa_r+0x94a>
 8007570:	9b05      	ldr	r3, [sp, #20]
 8007572:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007576:	4599      	cmp	r9, r3
 8007578:	d047      	beq.n	800760a <_dtoa_r+0xb6a>
 800757a:	ee18 1a10 	vmov	r1, s16
 800757e:	2300      	movs	r3, #0
 8007580:	220a      	movs	r2, #10
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fb16 	bl	8007bb4 <__multadd>
 8007588:	45b8      	cmp	r8, r7
 800758a:	ee08 0a10 	vmov	s16, r0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	f04f 020a 	mov.w	r2, #10
 8007596:	4641      	mov	r1, r8
 8007598:	4620      	mov	r0, r4
 800759a:	d106      	bne.n	80075aa <_dtoa_r+0xb0a>
 800759c:	f000 fb0a 	bl	8007bb4 <__multadd>
 80075a0:	4680      	mov	r8, r0
 80075a2:	4607      	mov	r7, r0
 80075a4:	f109 0901 	add.w	r9, r9, #1
 80075a8:	e772      	b.n	8007490 <_dtoa_r+0x9f0>
 80075aa:	f000 fb03 	bl	8007bb4 <__multadd>
 80075ae:	4639      	mov	r1, r7
 80075b0:	4680      	mov	r8, r0
 80075b2:	2300      	movs	r3, #0
 80075b4:	220a      	movs	r2, #10
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 fafc 	bl	8007bb4 <__multadd>
 80075bc:	4607      	mov	r7, r0
 80075be:	e7f1      	b.n	80075a4 <_dtoa_r+0xb04>
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	9d01      	ldr	r5, [sp, #4]
 80075c6:	ee18 0a10 	vmov	r0, s16
 80075ca:	4631      	mov	r1, r6
 80075cc:	f7ff f9da 	bl	8006984 <quorem>
 80075d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	f805 ab01 	strb.w	sl, [r5], #1
 80075da:	1aea      	subs	r2, r5, r3
 80075dc:	9b02      	ldr	r3, [sp, #8]
 80075de:	4293      	cmp	r3, r2
 80075e0:	dd09      	ble.n	80075f6 <_dtoa_r+0xb56>
 80075e2:	ee18 1a10 	vmov	r1, s16
 80075e6:	2300      	movs	r3, #0
 80075e8:	220a      	movs	r2, #10
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 fae2 	bl	8007bb4 <__multadd>
 80075f0:	ee08 0a10 	vmov	s16, r0
 80075f4:	e7e7      	b.n	80075c6 <_dtoa_r+0xb26>
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bfc8      	it	gt
 80075fc:	461d      	movgt	r5, r3
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	bfd8      	it	le
 8007602:	2501      	movle	r5, #1
 8007604:	441d      	add	r5, r3
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	ee18 1a10 	vmov	r1, s16
 800760e:	2201      	movs	r2, #1
 8007610:	4620      	mov	r0, r4
 8007612:	f000 fc7f 	bl	8007f14 <__lshift>
 8007616:	4631      	mov	r1, r6
 8007618:	ee08 0a10 	vmov	s16, r0
 800761c:	f000 fcea 	bl	8007ff4 <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	dc91      	bgt.n	8007548 <_dtoa_r+0xaa8>
 8007624:	d102      	bne.n	800762c <_dtoa_r+0xb8c>
 8007626:	f01a 0f01 	tst.w	sl, #1
 800762a:	d18d      	bne.n	8007548 <_dtoa_r+0xaa8>
 800762c:	462b      	mov	r3, r5
 800762e:	461d      	mov	r5, r3
 8007630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007634:	2a30      	cmp	r2, #48	; 0x30
 8007636:	d0fa      	beq.n	800762e <_dtoa_r+0xb8e>
 8007638:	e6d7      	b.n	80073ea <_dtoa_r+0x94a>
 800763a:	9a01      	ldr	r2, [sp, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d184      	bne.n	800754a <_dtoa_r+0xaaa>
 8007640:	9b00      	ldr	r3, [sp, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	2331      	movs	r3, #49	; 0x31
 8007648:	7013      	strb	r3, [r2, #0]
 800764a:	e6ce      	b.n	80073ea <_dtoa_r+0x94a>
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <_dtoa_r+0xbd4>)
 800764e:	f7ff ba95 	b.w	8006b7c <_dtoa_r+0xdc>
 8007652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007654:	2b00      	cmp	r3, #0
 8007656:	f47f aa6e 	bne.w	8006b36 <_dtoa_r+0x96>
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <_dtoa_r+0xbd8>)
 800765c:	f7ff ba8e 	b.w	8006b7c <_dtoa_r+0xdc>
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	dcae      	bgt.n	80075c4 <_dtoa_r+0xb24>
 8007666:	9b06      	ldr	r3, [sp, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	f73f aea8 	bgt.w	80073be <_dtoa_r+0x91e>
 800766e:	e7a9      	b.n	80075c4 <_dtoa_r+0xb24>
 8007670:	08008c07 	.word	0x08008c07
 8007674:	08008b64 	.word	0x08008b64
 8007678:	08008b88 	.word	0x08008b88

0800767c <__sflush_r>:
 800767c:	898a      	ldrh	r2, [r1, #12]
 800767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	4605      	mov	r5, r0
 8007684:	0710      	lsls	r0, r2, #28
 8007686:	460c      	mov	r4, r1
 8007688:	d458      	bmi.n	800773c <__sflush_r+0xc0>
 800768a:	684b      	ldr	r3, [r1, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	dc05      	bgt.n	800769c <__sflush_r+0x20>
 8007690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	dc02      	bgt.n	800769c <__sflush_r+0x20>
 8007696:	2000      	movs	r0, #0
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800769e:	2e00      	cmp	r6, #0
 80076a0:	d0f9      	beq.n	8007696 <__sflush_r+0x1a>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076a8:	682f      	ldr	r7, [r5, #0]
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	d032      	beq.n	8007714 <__sflush_r+0x98>
 80076ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	075a      	lsls	r2, r3, #29
 80076b4:	d505      	bpl.n	80076c2 <__sflush_r+0x46>
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	1ac0      	subs	r0, r0, r3
 80076ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076bc:	b10b      	cbz	r3, 80076c2 <__sflush_r+0x46>
 80076be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076c0:	1ac0      	subs	r0, r0, r3
 80076c2:	2300      	movs	r3, #0
 80076c4:	4602      	mov	r2, r0
 80076c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076c8:	6a21      	ldr	r1, [r4, #32]
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b0      	blx	r6
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	d106      	bne.n	80076e2 <__sflush_r+0x66>
 80076d4:	6829      	ldr	r1, [r5, #0]
 80076d6:	291d      	cmp	r1, #29
 80076d8:	d82c      	bhi.n	8007734 <__sflush_r+0xb8>
 80076da:	4a2a      	ldr	r2, [pc, #168]	; (8007784 <__sflush_r+0x108>)
 80076dc:	40ca      	lsrs	r2, r1
 80076de:	07d6      	lsls	r6, r2, #31
 80076e0:	d528      	bpl.n	8007734 <__sflush_r+0xb8>
 80076e2:	2200      	movs	r2, #0
 80076e4:	6062      	str	r2, [r4, #4]
 80076e6:	04d9      	lsls	r1, r3, #19
 80076e8:	6922      	ldr	r2, [r4, #16]
 80076ea:	6022      	str	r2, [r4, #0]
 80076ec:	d504      	bpl.n	80076f8 <__sflush_r+0x7c>
 80076ee:	1c42      	adds	r2, r0, #1
 80076f0:	d101      	bne.n	80076f6 <__sflush_r+0x7a>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	b903      	cbnz	r3, 80076f8 <__sflush_r+0x7c>
 80076f6:	6560      	str	r0, [r4, #84]	; 0x54
 80076f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076fa:	602f      	str	r7, [r5, #0]
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d0ca      	beq.n	8007696 <__sflush_r+0x1a>
 8007700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007704:	4299      	cmp	r1, r3
 8007706:	d002      	beq.n	800770e <__sflush_r+0x92>
 8007708:	4628      	mov	r0, r5
 800770a:	f000 fd8b 	bl	8008224 <_free_r>
 800770e:	2000      	movs	r0, #0
 8007710:	6360      	str	r0, [r4, #52]	; 0x34
 8007712:	e7c1      	b.n	8007698 <__sflush_r+0x1c>
 8007714:	6a21      	ldr	r1, [r4, #32]
 8007716:	2301      	movs	r3, #1
 8007718:	4628      	mov	r0, r5
 800771a:	47b0      	blx	r6
 800771c:	1c41      	adds	r1, r0, #1
 800771e:	d1c7      	bne.n	80076b0 <__sflush_r+0x34>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0c4      	beq.n	80076b0 <__sflush_r+0x34>
 8007726:	2b1d      	cmp	r3, #29
 8007728:	d001      	beq.n	800772e <__sflush_r+0xb2>
 800772a:	2b16      	cmp	r3, #22
 800772c:	d101      	bne.n	8007732 <__sflush_r+0xb6>
 800772e:	602f      	str	r7, [r5, #0]
 8007730:	e7b1      	b.n	8007696 <__sflush_r+0x1a>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	e7ad      	b.n	8007698 <__sflush_r+0x1c>
 800773c:	690f      	ldr	r7, [r1, #16]
 800773e:	2f00      	cmp	r7, #0
 8007740:	d0a9      	beq.n	8007696 <__sflush_r+0x1a>
 8007742:	0793      	lsls	r3, r2, #30
 8007744:	680e      	ldr	r6, [r1, #0]
 8007746:	bf08      	it	eq
 8007748:	694b      	ldreq	r3, [r1, #20]
 800774a:	600f      	str	r7, [r1, #0]
 800774c:	bf18      	it	ne
 800774e:	2300      	movne	r3, #0
 8007750:	eba6 0807 	sub.w	r8, r6, r7
 8007754:	608b      	str	r3, [r1, #8]
 8007756:	f1b8 0f00 	cmp.w	r8, #0
 800775a:	dd9c      	ble.n	8007696 <__sflush_r+0x1a>
 800775c:	6a21      	ldr	r1, [r4, #32]
 800775e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007760:	4643      	mov	r3, r8
 8007762:	463a      	mov	r2, r7
 8007764:	4628      	mov	r0, r5
 8007766:	47b0      	blx	r6
 8007768:	2800      	cmp	r0, #0
 800776a:	dc06      	bgt.n	800777a <__sflush_r+0xfe>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007772:	81a3      	strh	r3, [r4, #12]
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	e78e      	b.n	8007698 <__sflush_r+0x1c>
 800777a:	4407      	add	r7, r0
 800777c:	eba8 0800 	sub.w	r8, r8, r0
 8007780:	e7e9      	b.n	8007756 <__sflush_r+0xda>
 8007782:	bf00      	nop
 8007784:	20400001 	.word	0x20400001

08007788 <_fflush_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	690b      	ldr	r3, [r1, #16]
 800778c:	4605      	mov	r5, r0
 800778e:	460c      	mov	r4, r1
 8007790:	b913      	cbnz	r3, 8007798 <_fflush_r+0x10>
 8007792:	2500      	movs	r5, #0
 8007794:	4628      	mov	r0, r5
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	b118      	cbz	r0, 80077a2 <_fflush_r+0x1a>
 800779a:	6983      	ldr	r3, [r0, #24]
 800779c:	b90b      	cbnz	r3, 80077a2 <_fflush_r+0x1a>
 800779e:	f000 f887 	bl	80078b0 <__sinit>
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <_fflush_r+0x6c>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d11b      	bne.n	80077e0 <_fflush_r+0x58>
 80077a8:	686c      	ldr	r4, [r5, #4]
 80077aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0ef      	beq.n	8007792 <_fflush_r+0xa>
 80077b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077b4:	07d0      	lsls	r0, r2, #31
 80077b6:	d404      	bmi.n	80077c2 <_fflush_r+0x3a>
 80077b8:	0599      	lsls	r1, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <_fflush_r+0x3a>
 80077bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077be:	f000 f91a 	bl	80079f6 <__retarget_lock_acquire_recursive>
 80077c2:	4628      	mov	r0, r5
 80077c4:	4621      	mov	r1, r4
 80077c6:	f7ff ff59 	bl	800767c <__sflush_r>
 80077ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077cc:	07da      	lsls	r2, r3, #31
 80077ce:	4605      	mov	r5, r0
 80077d0:	d4e0      	bmi.n	8007794 <_fflush_r+0xc>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	059b      	lsls	r3, r3, #22
 80077d6:	d4dd      	bmi.n	8007794 <_fflush_r+0xc>
 80077d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077da:	f000 f90d 	bl	80079f8 <__retarget_lock_release_recursive>
 80077de:	e7d9      	b.n	8007794 <_fflush_r+0xc>
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <_fflush_r+0x70>)
 80077e2:	429c      	cmp	r4, r3
 80077e4:	d101      	bne.n	80077ea <_fflush_r+0x62>
 80077e6:	68ac      	ldr	r4, [r5, #8]
 80077e8:	e7df      	b.n	80077aa <_fflush_r+0x22>
 80077ea:	4b04      	ldr	r3, [pc, #16]	; (80077fc <_fflush_r+0x74>)
 80077ec:	429c      	cmp	r4, r3
 80077ee:	bf08      	it	eq
 80077f0:	68ec      	ldreq	r4, [r5, #12]
 80077f2:	e7da      	b.n	80077aa <_fflush_r+0x22>
 80077f4:	08008c38 	.word	0x08008c38
 80077f8:	08008c58 	.word	0x08008c58
 80077fc:	08008c18 	.word	0x08008c18

08007800 <std>:
 8007800:	2300      	movs	r3, #0
 8007802:	b510      	push	{r4, lr}
 8007804:	4604      	mov	r4, r0
 8007806:	e9c0 3300 	strd	r3, r3, [r0]
 800780a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800780e:	6083      	str	r3, [r0, #8]
 8007810:	8181      	strh	r1, [r0, #12]
 8007812:	6643      	str	r3, [r0, #100]	; 0x64
 8007814:	81c2      	strh	r2, [r0, #14]
 8007816:	6183      	str	r3, [r0, #24]
 8007818:	4619      	mov	r1, r3
 800781a:	2208      	movs	r2, #8
 800781c:	305c      	adds	r0, #92	; 0x5c
 800781e:	f7fe fadb 	bl	8005dd8 <memset>
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <std+0x38>)
 8007824:	6263      	str	r3, [r4, #36]	; 0x24
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <std+0x3c>)
 8007828:	62a3      	str	r3, [r4, #40]	; 0x28
 800782a:	4b05      	ldr	r3, [pc, #20]	; (8007840 <std+0x40>)
 800782c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <std+0x44>)
 8007830:	6224      	str	r4, [r4, #32]
 8007832:	6323      	str	r3, [r4, #48]	; 0x30
 8007834:	bd10      	pop	{r4, pc}
 8007836:	bf00      	nop
 8007838:	08008749 	.word	0x08008749
 800783c:	0800876b 	.word	0x0800876b
 8007840:	080087a3 	.word	0x080087a3
 8007844:	080087c7 	.word	0x080087c7

08007848 <_cleanup_r>:
 8007848:	4901      	ldr	r1, [pc, #4]	; (8007850 <_cleanup_r+0x8>)
 800784a:	f000 b8af 	b.w	80079ac <_fwalk_reent>
 800784e:	bf00      	nop
 8007850:	08007789 	.word	0x08007789

08007854 <__sfmoreglue>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	2268      	movs	r2, #104	; 0x68
 8007858:	1e4d      	subs	r5, r1, #1
 800785a:	4355      	muls	r5, r2
 800785c:	460e      	mov	r6, r1
 800785e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007862:	f000 fd4b 	bl	80082fc <_malloc_r>
 8007866:	4604      	mov	r4, r0
 8007868:	b140      	cbz	r0, 800787c <__sfmoreglue+0x28>
 800786a:	2100      	movs	r1, #0
 800786c:	e9c0 1600 	strd	r1, r6, [r0]
 8007870:	300c      	adds	r0, #12
 8007872:	60a0      	str	r0, [r4, #8]
 8007874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007878:	f7fe faae 	bl	8005dd8 <memset>
 800787c:	4620      	mov	r0, r4
 800787e:	bd70      	pop	{r4, r5, r6, pc}

08007880 <__sfp_lock_acquire>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__sfp_lock_acquire+0x8>)
 8007882:	f000 b8b8 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	20000449 	.word	0x20000449

0800788c <__sfp_lock_release>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__sfp_lock_release+0x8>)
 800788e:	f000 b8b3 	b.w	80079f8 <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	20000449 	.word	0x20000449

08007898 <__sinit_lock_acquire>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__sinit_lock_acquire+0x8>)
 800789a:	f000 b8ac 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 800789e:	bf00      	nop
 80078a0:	2000044a 	.word	0x2000044a

080078a4 <__sinit_lock_release>:
 80078a4:	4801      	ldr	r0, [pc, #4]	; (80078ac <__sinit_lock_release+0x8>)
 80078a6:	f000 b8a7 	b.w	80079f8 <__retarget_lock_release_recursive>
 80078aa:	bf00      	nop
 80078ac:	2000044a 	.word	0x2000044a

080078b0 <__sinit>:
 80078b0:	b510      	push	{r4, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	f7ff fff0 	bl	8007898 <__sinit_lock_acquire>
 80078b8:	69a3      	ldr	r3, [r4, #24]
 80078ba:	b11b      	cbz	r3, 80078c4 <__sinit+0x14>
 80078bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c0:	f7ff bff0 	b.w	80078a4 <__sinit_lock_release>
 80078c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078c8:	6523      	str	r3, [r4, #80]	; 0x50
 80078ca:	4b13      	ldr	r3, [pc, #76]	; (8007918 <__sinit+0x68>)
 80078cc:	4a13      	ldr	r2, [pc, #76]	; (800791c <__sinit+0x6c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	bf04      	itt	eq
 80078d6:	2301      	moveq	r3, #1
 80078d8:	61a3      	streq	r3, [r4, #24]
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 f820 	bl	8007920 <__sfp>
 80078e0:	6060      	str	r0, [r4, #4]
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 f81c 	bl	8007920 <__sfp>
 80078e8:	60a0      	str	r0, [r4, #8]
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 f818 	bl	8007920 <__sfp>
 80078f0:	2200      	movs	r2, #0
 80078f2:	60e0      	str	r0, [r4, #12]
 80078f4:	2104      	movs	r1, #4
 80078f6:	6860      	ldr	r0, [r4, #4]
 80078f8:	f7ff ff82 	bl	8007800 <std>
 80078fc:	68a0      	ldr	r0, [r4, #8]
 80078fe:	2201      	movs	r2, #1
 8007900:	2109      	movs	r1, #9
 8007902:	f7ff ff7d 	bl	8007800 <std>
 8007906:	68e0      	ldr	r0, [r4, #12]
 8007908:	2202      	movs	r2, #2
 800790a:	2112      	movs	r1, #18
 800790c:	f7ff ff78 	bl	8007800 <std>
 8007910:	2301      	movs	r3, #1
 8007912:	61a3      	str	r3, [r4, #24]
 8007914:	e7d2      	b.n	80078bc <__sinit+0xc>
 8007916:	bf00      	nop
 8007918:	08008b50 	.word	0x08008b50
 800791c:	08007849 	.word	0x08007849

08007920 <__sfp>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	4607      	mov	r7, r0
 8007924:	f7ff ffac 	bl	8007880 <__sfp_lock_acquire>
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <__sfp+0x84>)
 800792a:	681e      	ldr	r6, [r3, #0]
 800792c:	69b3      	ldr	r3, [r6, #24]
 800792e:	b913      	cbnz	r3, 8007936 <__sfp+0x16>
 8007930:	4630      	mov	r0, r6
 8007932:	f7ff ffbd 	bl	80078b0 <__sinit>
 8007936:	3648      	adds	r6, #72	; 0x48
 8007938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800793c:	3b01      	subs	r3, #1
 800793e:	d503      	bpl.n	8007948 <__sfp+0x28>
 8007940:	6833      	ldr	r3, [r6, #0]
 8007942:	b30b      	cbz	r3, 8007988 <__sfp+0x68>
 8007944:	6836      	ldr	r6, [r6, #0]
 8007946:	e7f7      	b.n	8007938 <__sfp+0x18>
 8007948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800794c:	b9d5      	cbnz	r5, 8007984 <__sfp+0x64>
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <__sfp+0x88>)
 8007950:	60e3      	str	r3, [r4, #12]
 8007952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007956:	6665      	str	r5, [r4, #100]	; 0x64
 8007958:	f000 f84c 	bl	80079f4 <__retarget_lock_init_recursive>
 800795c:	f7ff ff96 	bl	800788c <__sfp_lock_release>
 8007960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007968:	6025      	str	r5, [r4, #0]
 800796a:	61a5      	str	r5, [r4, #24]
 800796c:	2208      	movs	r2, #8
 800796e:	4629      	mov	r1, r5
 8007970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007974:	f7fe fa30 	bl	8005dd8 <memset>
 8007978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800797c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007980:	4620      	mov	r0, r4
 8007982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007984:	3468      	adds	r4, #104	; 0x68
 8007986:	e7d9      	b.n	800793c <__sfp+0x1c>
 8007988:	2104      	movs	r1, #4
 800798a:	4638      	mov	r0, r7
 800798c:	f7ff ff62 	bl	8007854 <__sfmoreglue>
 8007990:	4604      	mov	r4, r0
 8007992:	6030      	str	r0, [r6, #0]
 8007994:	2800      	cmp	r0, #0
 8007996:	d1d5      	bne.n	8007944 <__sfp+0x24>
 8007998:	f7ff ff78 	bl	800788c <__sfp_lock_release>
 800799c:	230c      	movs	r3, #12
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	e7ee      	b.n	8007980 <__sfp+0x60>
 80079a2:	bf00      	nop
 80079a4:	08008b50 	.word	0x08008b50
 80079a8:	ffff0001 	.word	0xffff0001

080079ac <_fwalk_reent>:
 80079ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b0:	4606      	mov	r6, r0
 80079b2:	4688      	mov	r8, r1
 80079b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079b8:	2700      	movs	r7, #0
 80079ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079be:	f1b9 0901 	subs.w	r9, r9, #1
 80079c2:	d505      	bpl.n	80079d0 <_fwalk_reent+0x24>
 80079c4:	6824      	ldr	r4, [r4, #0]
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	d1f7      	bne.n	80079ba <_fwalk_reent+0xe>
 80079ca:	4638      	mov	r0, r7
 80079cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d0:	89ab      	ldrh	r3, [r5, #12]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d907      	bls.n	80079e6 <_fwalk_reent+0x3a>
 80079d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079da:	3301      	adds	r3, #1
 80079dc:	d003      	beq.n	80079e6 <_fwalk_reent+0x3a>
 80079de:	4629      	mov	r1, r5
 80079e0:	4630      	mov	r0, r6
 80079e2:	47c0      	blx	r8
 80079e4:	4307      	orrs	r7, r0
 80079e6:	3568      	adds	r5, #104	; 0x68
 80079e8:	e7e9      	b.n	80079be <_fwalk_reent+0x12>
	...

080079ec <_localeconv_r>:
 80079ec:	4800      	ldr	r0, [pc, #0]	; (80079f0 <_localeconv_r+0x4>)
 80079ee:	4770      	bx	lr
 80079f0:	20000160 	.word	0x20000160

080079f4 <__retarget_lock_init_recursive>:
 80079f4:	4770      	bx	lr

080079f6 <__retarget_lock_acquire_recursive>:
 80079f6:	4770      	bx	lr

080079f8 <__retarget_lock_release_recursive>:
 80079f8:	4770      	bx	lr

080079fa <__swhatbuf_r>:
 80079fa:	b570      	push	{r4, r5, r6, lr}
 80079fc:	460e      	mov	r6, r1
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	2900      	cmp	r1, #0
 8007a04:	b096      	sub	sp, #88	; 0x58
 8007a06:	4614      	mov	r4, r2
 8007a08:	461d      	mov	r5, r3
 8007a0a:	da08      	bge.n	8007a1e <__swhatbuf_r+0x24>
 8007a0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	602a      	str	r2, [r5, #0]
 8007a14:	061a      	lsls	r2, r3, #24
 8007a16:	d410      	bmi.n	8007a3a <__swhatbuf_r+0x40>
 8007a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a1c:	e00e      	b.n	8007a3c <__swhatbuf_r+0x42>
 8007a1e:	466a      	mov	r2, sp
 8007a20:	f000 ff28 	bl	8008874 <_fstat_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dbf1      	blt.n	8007a0c <__swhatbuf_r+0x12>
 8007a28:	9a01      	ldr	r2, [sp, #4]
 8007a2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a32:	425a      	negs	r2, r3
 8007a34:	415a      	adcs	r2, r3
 8007a36:	602a      	str	r2, [r5, #0]
 8007a38:	e7ee      	b.n	8007a18 <__swhatbuf_r+0x1e>
 8007a3a:	2340      	movs	r3, #64	; 0x40
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	b016      	add	sp, #88	; 0x58
 8007a42:	bd70      	pop	{r4, r5, r6, pc}

08007a44 <__smakebuf_r>:
 8007a44:	898b      	ldrh	r3, [r1, #12]
 8007a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a48:	079d      	lsls	r5, r3, #30
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	d507      	bpl.n	8007a60 <__smakebuf_r+0x1c>
 8007a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	2301      	movs	r3, #1
 8007a5a:	6163      	str	r3, [r4, #20]
 8007a5c:	b002      	add	sp, #8
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	ab01      	add	r3, sp, #4
 8007a62:	466a      	mov	r2, sp
 8007a64:	f7ff ffc9 	bl	80079fa <__swhatbuf_r>
 8007a68:	9900      	ldr	r1, [sp, #0]
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 fc45 	bl	80082fc <_malloc_r>
 8007a72:	b948      	cbnz	r0, 8007a88 <__smakebuf_r+0x44>
 8007a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a78:	059a      	lsls	r2, r3, #22
 8007a7a:	d4ef      	bmi.n	8007a5c <__smakebuf_r+0x18>
 8007a7c:	f023 0303 	bic.w	r3, r3, #3
 8007a80:	f043 0302 	orr.w	r3, r3, #2
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	e7e3      	b.n	8007a50 <__smakebuf_r+0xc>
 8007a88:	4b0d      	ldr	r3, [pc, #52]	; (8007ac0 <__smakebuf_r+0x7c>)
 8007a8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	6020      	str	r0, [r4, #0]
 8007a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	6163      	str	r3, [r4, #20]
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	6120      	str	r0, [r4, #16]
 8007a9e:	b15b      	cbz	r3, 8007ab8 <__smakebuf_r+0x74>
 8007aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 fef7 	bl	8008898 <_isatty_r>
 8007aaa:	b128      	cbz	r0, 8007ab8 <__smakebuf_r+0x74>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	89a0      	ldrh	r0, [r4, #12]
 8007aba:	4305      	orrs	r5, r0
 8007abc:	81a5      	strh	r5, [r4, #12]
 8007abe:	e7cd      	b.n	8007a5c <__smakebuf_r+0x18>
 8007ac0:	08007849 	.word	0x08007849

08007ac4 <malloc>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <malloc+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f000 bc17 	b.w	80082fc <_malloc_r>
 8007ace:	bf00      	nop
 8007ad0:	2000000c 	.word	0x2000000c

08007ad4 <memcpy>:
 8007ad4:	440a      	add	r2, r1
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007adc:	d100      	bne.n	8007ae0 <memcpy+0xc>
 8007ade:	4770      	bx	lr
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aea:	4291      	cmp	r1, r2
 8007aec:	d1f9      	bne.n	8007ae2 <memcpy+0xe>
 8007aee:	bd10      	pop	{r4, pc}

08007af0 <_Balloc>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	b976      	cbnz	r6, 8007b18 <_Balloc+0x28>
 8007afa:	2010      	movs	r0, #16
 8007afc:	f7ff ffe2 	bl	8007ac4 <malloc>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6260      	str	r0, [r4, #36]	; 0x24
 8007b04:	b920      	cbnz	r0, 8007b10 <_Balloc+0x20>
 8007b06:	4b18      	ldr	r3, [pc, #96]	; (8007b68 <_Balloc+0x78>)
 8007b08:	4818      	ldr	r0, [pc, #96]	; (8007b6c <_Balloc+0x7c>)
 8007b0a:	2166      	movs	r1, #102	; 0x66
 8007b0c:	f000 fe72 	bl	80087f4 <__assert_func>
 8007b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b14:	6006      	str	r6, [r0, #0]
 8007b16:	60c6      	str	r6, [r0, #12]
 8007b18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b1a:	68f3      	ldr	r3, [r6, #12]
 8007b1c:	b183      	cbz	r3, 8007b40 <_Balloc+0x50>
 8007b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b26:	b9b8      	cbnz	r0, 8007b58 <_Balloc+0x68>
 8007b28:	2101      	movs	r1, #1
 8007b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b2e:	1d72      	adds	r2, r6, #5
 8007b30:	0092      	lsls	r2, r2, #2
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 fb60 	bl	80081f8 <_calloc_r>
 8007b38:	b160      	cbz	r0, 8007b54 <_Balloc+0x64>
 8007b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b3e:	e00e      	b.n	8007b5e <_Balloc+0x6e>
 8007b40:	2221      	movs	r2, #33	; 0x21
 8007b42:	2104      	movs	r1, #4
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fb57 	bl	80081f8 <_calloc_r>
 8007b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b4c:	60f0      	str	r0, [r6, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e4      	bne.n	8007b1e <_Balloc+0x2e>
 8007b54:	2000      	movs	r0, #0
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	6802      	ldr	r2, [r0, #0]
 8007b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b64:	e7f7      	b.n	8007b56 <_Balloc+0x66>
 8007b66:	bf00      	nop
 8007b68:	08008b95 	.word	0x08008b95
 8007b6c:	08008c78 	.word	0x08008c78

08007b70 <_Bfree>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b74:	4605      	mov	r5, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b976      	cbnz	r6, 8007b98 <_Bfree+0x28>
 8007b7a:	2010      	movs	r0, #16
 8007b7c:	f7ff ffa2 	bl	8007ac4 <malloc>
 8007b80:	4602      	mov	r2, r0
 8007b82:	6268      	str	r0, [r5, #36]	; 0x24
 8007b84:	b920      	cbnz	r0, 8007b90 <_Bfree+0x20>
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <_Bfree+0x3c>)
 8007b88:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <_Bfree+0x40>)
 8007b8a:	218a      	movs	r1, #138	; 0x8a
 8007b8c:	f000 fe32 	bl	80087f4 <__assert_func>
 8007b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b94:	6006      	str	r6, [r0, #0]
 8007b96:	60c6      	str	r6, [r0, #12]
 8007b98:	b13c      	cbz	r4, 8007baa <_Bfree+0x3a>
 8007b9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b9c:	6862      	ldr	r2, [r4, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ba4:	6021      	str	r1, [r4, #0]
 8007ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	08008b95 	.word	0x08008b95
 8007bb0:	08008c78 	.word	0x08008c78

08007bb4 <__multadd>:
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	690d      	ldr	r5, [r1, #16]
 8007bba:	4607      	mov	r7, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	461e      	mov	r6, r3
 8007bc0:	f101 0c14 	add.w	ip, r1, #20
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8007bca:	b299      	uxth	r1, r3
 8007bcc:	fb02 6101 	mla	r1, r2, r1, r6
 8007bd0:	0c1e      	lsrs	r6, r3, #16
 8007bd2:	0c0b      	lsrs	r3, r1, #16
 8007bd4:	fb02 3306 	mla	r3, r2, r6, r3
 8007bd8:	b289      	uxth	r1, r1
 8007bda:	3001      	adds	r0, #1
 8007bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007be0:	4285      	cmp	r5, r0
 8007be2:	f84c 1b04 	str.w	r1, [ip], #4
 8007be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bea:	dcec      	bgt.n	8007bc6 <__multadd+0x12>
 8007bec:	b30e      	cbz	r6, 8007c32 <__multadd+0x7e>
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dc19      	bgt.n	8007c28 <__multadd+0x74>
 8007bf4:	6861      	ldr	r1, [r4, #4]
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	3101      	adds	r1, #1
 8007bfa:	f7ff ff79 	bl	8007af0 <_Balloc>
 8007bfe:	4680      	mov	r8, r0
 8007c00:	b928      	cbnz	r0, 8007c0e <__multadd+0x5a>
 8007c02:	4602      	mov	r2, r0
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <__multadd+0x84>)
 8007c06:	480d      	ldr	r0, [pc, #52]	; (8007c3c <__multadd+0x88>)
 8007c08:	21b5      	movs	r1, #181	; 0xb5
 8007c0a:	f000 fdf3 	bl	80087f4 <__assert_func>
 8007c0e:	6922      	ldr	r2, [r4, #16]
 8007c10:	3202      	adds	r2, #2
 8007c12:	f104 010c 	add.w	r1, r4, #12
 8007c16:	0092      	lsls	r2, r2, #2
 8007c18:	300c      	adds	r0, #12
 8007c1a:	f7ff ff5b 	bl	8007ad4 <memcpy>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7ff ffa5 	bl	8007b70 <_Bfree>
 8007c26:	4644      	mov	r4, r8
 8007c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	615e      	str	r6, [r3, #20]
 8007c30:	6125      	str	r5, [r4, #16]
 8007c32:	4620      	mov	r0, r4
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	08008c07 	.word	0x08008c07
 8007c3c:	08008c78 	.word	0x08008c78

08007c40 <__hi0bits>:
 8007c40:	0c03      	lsrs	r3, r0, #16
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	b9d3      	cbnz	r3, 8007c7c <__hi0bits+0x3c>
 8007c46:	0400      	lsls	r0, r0, #16
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c4e:	bf04      	itt	eq
 8007c50:	0200      	lsleq	r0, r0, #8
 8007c52:	3308      	addeq	r3, #8
 8007c54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c58:	bf04      	itt	eq
 8007c5a:	0100      	lsleq	r0, r0, #4
 8007c5c:	3304      	addeq	r3, #4
 8007c5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c62:	bf04      	itt	eq
 8007c64:	0080      	lsleq	r0, r0, #2
 8007c66:	3302      	addeq	r3, #2
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	db05      	blt.n	8007c78 <__hi0bits+0x38>
 8007c6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c70:	f103 0301 	add.w	r3, r3, #1
 8007c74:	bf08      	it	eq
 8007c76:	2320      	moveq	r3, #32
 8007c78:	4618      	mov	r0, r3
 8007c7a:	4770      	bx	lr
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e7e4      	b.n	8007c4a <__hi0bits+0xa>

08007c80 <__lo0bits>:
 8007c80:	6803      	ldr	r3, [r0, #0]
 8007c82:	f013 0207 	ands.w	r2, r3, #7
 8007c86:	4601      	mov	r1, r0
 8007c88:	d00b      	beq.n	8007ca2 <__lo0bits+0x22>
 8007c8a:	07da      	lsls	r2, r3, #31
 8007c8c:	d423      	bmi.n	8007cd6 <__lo0bits+0x56>
 8007c8e:	0798      	lsls	r0, r3, #30
 8007c90:	bf49      	itett	mi
 8007c92:	085b      	lsrmi	r3, r3, #1
 8007c94:	089b      	lsrpl	r3, r3, #2
 8007c96:	2001      	movmi	r0, #1
 8007c98:	600b      	strmi	r3, [r1, #0]
 8007c9a:	bf5c      	itt	pl
 8007c9c:	600b      	strpl	r3, [r1, #0]
 8007c9e:	2002      	movpl	r0, #2
 8007ca0:	4770      	bx	lr
 8007ca2:	b298      	uxth	r0, r3
 8007ca4:	b9a8      	cbnz	r0, 8007cd2 <__lo0bits+0x52>
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	2010      	movs	r0, #16
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	b90a      	cbnz	r2, 8007cb2 <__lo0bits+0x32>
 8007cae:	3008      	adds	r0, #8
 8007cb0:	0a1b      	lsrs	r3, r3, #8
 8007cb2:	071a      	lsls	r2, r3, #28
 8007cb4:	bf04      	itt	eq
 8007cb6:	091b      	lsreq	r3, r3, #4
 8007cb8:	3004      	addeq	r0, #4
 8007cba:	079a      	lsls	r2, r3, #30
 8007cbc:	bf04      	itt	eq
 8007cbe:	089b      	lsreq	r3, r3, #2
 8007cc0:	3002      	addeq	r0, #2
 8007cc2:	07da      	lsls	r2, r3, #31
 8007cc4:	d403      	bmi.n	8007cce <__lo0bits+0x4e>
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	f100 0001 	add.w	r0, r0, #1
 8007ccc:	d005      	beq.n	8007cda <__lo0bits+0x5a>
 8007cce:	600b      	str	r3, [r1, #0]
 8007cd0:	4770      	bx	lr
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	e7e9      	b.n	8007caa <__lo0bits+0x2a>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	4770      	bx	lr
 8007cda:	2020      	movs	r0, #32
 8007cdc:	4770      	bx	lr
	...

08007ce0 <__i2b>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	f7ff ff03 	bl	8007af0 <_Balloc>
 8007cea:	4602      	mov	r2, r0
 8007cec:	b928      	cbnz	r0, 8007cfa <__i2b+0x1a>
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <__i2b+0x24>)
 8007cf0:	4805      	ldr	r0, [pc, #20]	; (8007d08 <__i2b+0x28>)
 8007cf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cf6:	f000 fd7d 	bl	80087f4 <__assert_func>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	6144      	str	r4, [r0, #20]
 8007cfe:	6103      	str	r3, [r0, #16]
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	bf00      	nop
 8007d04:	08008c07 	.word	0x08008c07
 8007d08:	08008c78 	.word	0x08008c78

08007d0c <__multiply>:
 8007d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	4691      	mov	r9, r2
 8007d12:	690a      	ldr	r2, [r1, #16]
 8007d14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	bfb8      	it	lt
 8007d1c:	460b      	movlt	r3, r1
 8007d1e:	460c      	mov	r4, r1
 8007d20:	bfbc      	itt	lt
 8007d22:	464c      	movlt	r4, r9
 8007d24:	4699      	movlt	r9, r3
 8007d26:	6927      	ldr	r7, [r4, #16]
 8007d28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d2c:	68a3      	ldr	r3, [r4, #8]
 8007d2e:	6861      	ldr	r1, [r4, #4]
 8007d30:	eb07 060a 	add.w	r6, r7, sl
 8007d34:	42b3      	cmp	r3, r6
 8007d36:	b085      	sub	sp, #20
 8007d38:	bfb8      	it	lt
 8007d3a:	3101      	addlt	r1, #1
 8007d3c:	f7ff fed8 	bl	8007af0 <_Balloc>
 8007d40:	b930      	cbnz	r0, 8007d50 <__multiply+0x44>
 8007d42:	4602      	mov	r2, r0
 8007d44:	4b44      	ldr	r3, [pc, #272]	; (8007e58 <__multiply+0x14c>)
 8007d46:	4845      	ldr	r0, [pc, #276]	; (8007e5c <__multiply+0x150>)
 8007d48:	f240 115d 	movw	r1, #349	; 0x15d
 8007d4c:	f000 fd52 	bl	80087f4 <__assert_func>
 8007d50:	f100 0514 	add.w	r5, r0, #20
 8007d54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d58:	462b      	mov	r3, r5
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	4543      	cmp	r3, r8
 8007d5e:	d321      	bcc.n	8007da4 <__multiply+0x98>
 8007d60:	f104 0314 	add.w	r3, r4, #20
 8007d64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d68:	f109 0314 	add.w	r3, r9, #20
 8007d6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d70:	9202      	str	r2, [sp, #8]
 8007d72:	1b3a      	subs	r2, r7, r4
 8007d74:	3a15      	subs	r2, #21
 8007d76:	f022 0203 	bic.w	r2, r2, #3
 8007d7a:	3204      	adds	r2, #4
 8007d7c:	f104 0115 	add.w	r1, r4, #21
 8007d80:	428f      	cmp	r7, r1
 8007d82:	bf38      	it	cc
 8007d84:	2204      	movcc	r2, #4
 8007d86:	9201      	str	r2, [sp, #4]
 8007d88:	9a02      	ldr	r2, [sp, #8]
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d80c      	bhi.n	8007daa <__multiply+0x9e>
 8007d90:	2e00      	cmp	r6, #0
 8007d92:	dd03      	ble.n	8007d9c <__multiply+0x90>
 8007d94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d05a      	beq.n	8007e52 <__multiply+0x146>
 8007d9c:	6106      	str	r6, [r0, #16]
 8007d9e:	b005      	add	sp, #20
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	f843 2b04 	str.w	r2, [r3], #4
 8007da8:	e7d8      	b.n	8007d5c <__multiply+0x50>
 8007daa:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dae:	f1ba 0f00 	cmp.w	sl, #0
 8007db2:	d024      	beq.n	8007dfe <__multiply+0xf2>
 8007db4:	f104 0e14 	add.w	lr, r4, #20
 8007db8:	46a9      	mov	r9, r5
 8007dba:	f04f 0c00 	mov.w	ip, #0
 8007dbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007dc2:	f8d9 1000 	ldr.w	r1, [r9]
 8007dc6:	fa1f fb82 	uxth.w	fp, r2
 8007dca:	b289      	uxth	r1, r1
 8007dcc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007dd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8007dd8:	4461      	add	r1, ip
 8007dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dde:	fb0a c20b 	mla	r2, sl, fp, ip
 8007de2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007de6:	b289      	uxth	r1, r1
 8007de8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007dec:	4577      	cmp	r7, lr
 8007dee:	f849 1b04 	str.w	r1, [r9], #4
 8007df2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007df6:	d8e2      	bhi.n	8007dbe <__multiply+0xb2>
 8007df8:	9a01      	ldr	r2, [sp, #4]
 8007dfa:	f845 c002 	str.w	ip, [r5, r2]
 8007dfe:	9a03      	ldr	r2, [sp, #12]
 8007e00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e04:	3304      	adds	r3, #4
 8007e06:	f1b9 0f00 	cmp.w	r9, #0
 8007e0a:	d020      	beq.n	8007e4e <__multiply+0x142>
 8007e0c:	6829      	ldr	r1, [r5, #0]
 8007e0e:	f104 0c14 	add.w	ip, r4, #20
 8007e12:	46ae      	mov	lr, r5
 8007e14:	f04f 0a00 	mov.w	sl, #0
 8007e18:	f8bc b000 	ldrh.w	fp, [ip]
 8007e1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e20:	fb09 220b 	mla	r2, r9, fp, r2
 8007e24:	4492      	add	sl, r2
 8007e26:	b289      	uxth	r1, r1
 8007e28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e2c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e34:	f8be 1000 	ldrh.w	r1, [lr]
 8007e38:	0c12      	lsrs	r2, r2, #16
 8007e3a:	fb09 1102 	mla	r1, r9, r2, r1
 8007e3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e42:	4567      	cmp	r7, ip
 8007e44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e48:	d8e6      	bhi.n	8007e18 <__multiply+0x10c>
 8007e4a:	9a01      	ldr	r2, [sp, #4]
 8007e4c:	50a9      	str	r1, [r5, r2]
 8007e4e:	3504      	adds	r5, #4
 8007e50:	e79a      	b.n	8007d88 <__multiply+0x7c>
 8007e52:	3e01      	subs	r6, #1
 8007e54:	e79c      	b.n	8007d90 <__multiply+0x84>
 8007e56:	bf00      	nop
 8007e58:	08008c07 	.word	0x08008c07
 8007e5c:	08008c78 	.word	0x08008c78

08007e60 <__pow5mult>:
 8007e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e64:	4615      	mov	r5, r2
 8007e66:	f012 0203 	ands.w	r2, r2, #3
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	d007      	beq.n	8007e80 <__pow5mult+0x20>
 8007e70:	4c25      	ldr	r4, [pc, #148]	; (8007f08 <__pow5mult+0xa8>)
 8007e72:	3a01      	subs	r2, #1
 8007e74:	2300      	movs	r3, #0
 8007e76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e7a:	f7ff fe9b 	bl	8007bb4 <__multadd>
 8007e7e:	4607      	mov	r7, r0
 8007e80:	10ad      	asrs	r5, r5, #2
 8007e82:	d03d      	beq.n	8007f00 <__pow5mult+0xa0>
 8007e84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e86:	b97c      	cbnz	r4, 8007ea8 <__pow5mult+0x48>
 8007e88:	2010      	movs	r0, #16
 8007e8a:	f7ff fe1b 	bl	8007ac4 <malloc>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	6270      	str	r0, [r6, #36]	; 0x24
 8007e92:	b928      	cbnz	r0, 8007ea0 <__pow5mult+0x40>
 8007e94:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <__pow5mult+0xac>)
 8007e96:	481e      	ldr	r0, [pc, #120]	; (8007f10 <__pow5mult+0xb0>)
 8007e98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e9c:	f000 fcaa 	bl	80087f4 <__assert_func>
 8007ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ea4:	6004      	str	r4, [r0, #0]
 8007ea6:	60c4      	str	r4, [r0, #12]
 8007ea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007eb0:	b94c      	cbnz	r4, 8007ec6 <__pow5mult+0x66>
 8007eb2:	f240 2171 	movw	r1, #625	; 0x271
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f7ff ff12 	bl	8007ce0 <__i2b>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	6003      	str	r3, [r0, #0]
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	07eb      	lsls	r3, r5, #31
 8007ecc:	d50a      	bpl.n	8007ee4 <__pow5mult+0x84>
 8007ece:	4639      	mov	r1, r7
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ff1a 	bl	8007d0c <__multiply>
 8007ed8:	4639      	mov	r1, r7
 8007eda:	4680      	mov	r8, r0
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff fe47 	bl	8007b70 <_Bfree>
 8007ee2:	4647      	mov	r7, r8
 8007ee4:	106d      	asrs	r5, r5, #1
 8007ee6:	d00b      	beq.n	8007f00 <__pow5mult+0xa0>
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	b938      	cbnz	r0, 8007efc <__pow5mult+0x9c>
 8007eec:	4622      	mov	r2, r4
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7ff ff0b 	bl	8007d0c <__multiply>
 8007ef6:	6020      	str	r0, [r4, #0]
 8007ef8:	f8c0 9000 	str.w	r9, [r0]
 8007efc:	4604      	mov	r4, r0
 8007efe:	e7e4      	b.n	8007eca <__pow5mult+0x6a>
 8007f00:	4638      	mov	r0, r7
 8007f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f06:	bf00      	nop
 8007f08:	08008dc8 	.word	0x08008dc8
 8007f0c:	08008b95 	.word	0x08008b95
 8007f10:	08008c78 	.word	0x08008c78

08007f14 <__lshift>:
 8007f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	460c      	mov	r4, r1
 8007f1a:	6849      	ldr	r1, [r1, #4]
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f22:	68a3      	ldr	r3, [r4, #8]
 8007f24:	4607      	mov	r7, r0
 8007f26:	4691      	mov	r9, r2
 8007f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f2c:	f108 0601 	add.w	r6, r8, #1
 8007f30:	42b3      	cmp	r3, r6
 8007f32:	db0b      	blt.n	8007f4c <__lshift+0x38>
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7ff fddb 	bl	8007af0 <_Balloc>
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	b948      	cbnz	r0, 8007f52 <__lshift+0x3e>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	4b2a      	ldr	r3, [pc, #168]	; (8007fec <__lshift+0xd8>)
 8007f42:	482b      	ldr	r0, [pc, #172]	; (8007ff0 <__lshift+0xdc>)
 8007f44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f48:	f000 fc54 	bl	80087f4 <__assert_func>
 8007f4c:	3101      	adds	r1, #1
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	e7ee      	b.n	8007f30 <__lshift+0x1c>
 8007f52:	2300      	movs	r3, #0
 8007f54:	f100 0114 	add.w	r1, r0, #20
 8007f58:	f100 0210 	add.w	r2, r0, #16
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	4553      	cmp	r3, sl
 8007f60:	db37      	blt.n	8007fd2 <__lshift+0xbe>
 8007f62:	6920      	ldr	r0, [r4, #16]
 8007f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f68:	f104 0314 	add.w	r3, r4, #20
 8007f6c:	f019 091f 	ands.w	r9, r9, #31
 8007f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f78:	d02f      	beq.n	8007fda <__lshift+0xc6>
 8007f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f7e:	468a      	mov	sl, r1
 8007f80:	f04f 0c00 	mov.w	ip, #0
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	fa02 f209 	lsl.w	r2, r2, r9
 8007f8a:	ea42 020c 	orr.w	r2, r2, ip
 8007f8e:	f84a 2b04 	str.w	r2, [sl], #4
 8007f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f96:	4298      	cmp	r0, r3
 8007f98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f9c:	d8f2      	bhi.n	8007f84 <__lshift+0x70>
 8007f9e:	1b03      	subs	r3, r0, r4
 8007fa0:	3b15      	subs	r3, #21
 8007fa2:	f023 0303 	bic.w	r3, r3, #3
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	f104 0215 	add.w	r2, r4, #21
 8007fac:	4290      	cmp	r0, r2
 8007fae:	bf38      	it	cc
 8007fb0:	2304      	movcc	r3, #4
 8007fb2:	f841 c003 	str.w	ip, [r1, r3]
 8007fb6:	f1bc 0f00 	cmp.w	ip, #0
 8007fba:	d001      	beq.n	8007fc0 <__lshift+0xac>
 8007fbc:	f108 0602 	add.w	r6, r8, #2
 8007fc0:	3e01      	subs	r6, #1
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	612e      	str	r6, [r5, #16]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	f7ff fdd2 	bl	8007b70 <_Bfree>
 8007fcc:	4628      	mov	r0, r5
 8007fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	e7c1      	b.n	8007f5e <__lshift+0x4a>
 8007fda:	3904      	subs	r1, #4
 8007fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fe4:	4298      	cmp	r0, r3
 8007fe6:	d8f9      	bhi.n	8007fdc <__lshift+0xc8>
 8007fe8:	e7ea      	b.n	8007fc0 <__lshift+0xac>
 8007fea:	bf00      	nop
 8007fec:	08008c07 	.word	0x08008c07
 8007ff0:	08008c78 	.word	0x08008c78

08007ff4 <__mcmp>:
 8007ff4:	b530      	push	{r4, r5, lr}
 8007ff6:	6902      	ldr	r2, [r0, #16]
 8007ff8:	690c      	ldr	r4, [r1, #16]
 8007ffa:	1b12      	subs	r2, r2, r4
 8007ffc:	d10e      	bne.n	800801c <__mcmp+0x28>
 8007ffe:	f100 0314 	add.w	r3, r0, #20
 8008002:	3114      	adds	r1, #20
 8008004:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008008:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800800c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008010:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008014:	42a5      	cmp	r5, r4
 8008016:	d003      	beq.n	8008020 <__mcmp+0x2c>
 8008018:	d305      	bcc.n	8008026 <__mcmp+0x32>
 800801a:	2201      	movs	r2, #1
 800801c:	4610      	mov	r0, r2
 800801e:	bd30      	pop	{r4, r5, pc}
 8008020:	4283      	cmp	r3, r0
 8008022:	d3f3      	bcc.n	800800c <__mcmp+0x18>
 8008024:	e7fa      	b.n	800801c <__mcmp+0x28>
 8008026:	f04f 32ff 	mov.w	r2, #4294967295
 800802a:	e7f7      	b.n	800801c <__mcmp+0x28>

0800802c <__mdiff>:
 800802c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	460c      	mov	r4, r1
 8008032:	4606      	mov	r6, r0
 8008034:	4611      	mov	r1, r2
 8008036:	4620      	mov	r0, r4
 8008038:	4690      	mov	r8, r2
 800803a:	f7ff ffdb 	bl	8007ff4 <__mcmp>
 800803e:	1e05      	subs	r5, r0, #0
 8008040:	d110      	bne.n	8008064 <__mdiff+0x38>
 8008042:	4629      	mov	r1, r5
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff fd53 	bl	8007af0 <_Balloc>
 800804a:	b930      	cbnz	r0, 800805a <__mdiff+0x2e>
 800804c:	4b3a      	ldr	r3, [pc, #232]	; (8008138 <__mdiff+0x10c>)
 800804e:	4602      	mov	r2, r0
 8008050:	f240 2132 	movw	r1, #562	; 0x232
 8008054:	4839      	ldr	r0, [pc, #228]	; (800813c <__mdiff+0x110>)
 8008056:	f000 fbcd 	bl	80087f4 <__assert_func>
 800805a:	2301      	movs	r3, #1
 800805c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	bfa4      	itt	ge
 8008066:	4643      	movge	r3, r8
 8008068:	46a0      	movge	r8, r4
 800806a:	4630      	mov	r0, r6
 800806c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008070:	bfa6      	itte	ge
 8008072:	461c      	movge	r4, r3
 8008074:	2500      	movge	r5, #0
 8008076:	2501      	movlt	r5, #1
 8008078:	f7ff fd3a 	bl	8007af0 <_Balloc>
 800807c:	b920      	cbnz	r0, 8008088 <__mdiff+0x5c>
 800807e:	4b2e      	ldr	r3, [pc, #184]	; (8008138 <__mdiff+0x10c>)
 8008080:	4602      	mov	r2, r0
 8008082:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008086:	e7e5      	b.n	8008054 <__mdiff+0x28>
 8008088:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800808c:	6926      	ldr	r6, [r4, #16]
 800808e:	60c5      	str	r5, [r0, #12]
 8008090:	f104 0914 	add.w	r9, r4, #20
 8008094:	f108 0514 	add.w	r5, r8, #20
 8008098:	f100 0e14 	add.w	lr, r0, #20
 800809c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080a4:	f108 0210 	add.w	r2, r8, #16
 80080a8:	46f2      	mov	sl, lr
 80080aa:	2100      	movs	r1, #0
 80080ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80080b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080b4:	fa1f f883 	uxth.w	r8, r3
 80080b8:	fa11 f18b 	uxtah	r1, r1, fp
 80080bc:	0c1b      	lsrs	r3, r3, #16
 80080be:	eba1 0808 	sub.w	r8, r1, r8
 80080c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080ca:	fa1f f888 	uxth.w	r8, r8
 80080ce:	1419      	asrs	r1, r3, #16
 80080d0:	454e      	cmp	r6, r9
 80080d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080d6:	f84a 3b04 	str.w	r3, [sl], #4
 80080da:	d8e7      	bhi.n	80080ac <__mdiff+0x80>
 80080dc:	1b33      	subs	r3, r6, r4
 80080de:	3b15      	subs	r3, #21
 80080e0:	f023 0303 	bic.w	r3, r3, #3
 80080e4:	3304      	adds	r3, #4
 80080e6:	3415      	adds	r4, #21
 80080e8:	42a6      	cmp	r6, r4
 80080ea:	bf38      	it	cc
 80080ec:	2304      	movcc	r3, #4
 80080ee:	441d      	add	r5, r3
 80080f0:	4473      	add	r3, lr
 80080f2:	469e      	mov	lr, r3
 80080f4:	462e      	mov	r6, r5
 80080f6:	4566      	cmp	r6, ip
 80080f8:	d30e      	bcc.n	8008118 <__mdiff+0xec>
 80080fa:	f10c 0203 	add.w	r2, ip, #3
 80080fe:	1b52      	subs	r2, r2, r5
 8008100:	f022 0203 	bic.w	r2, r2, #3
 8008104:	3d03      	subs	r5, #3
 8008106:	45ac      	cmp	ip, r5
 8008108:	bf38      	it	cc
 800810a:	2200      	movcc	r2, #0
 800810c:	441a      	add	r2, r3
 800810e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008112:	b17b      	cbz	r3, 8008134 <__mdiff+0x108>
 8008114:	6107      	str	r7, [r0, #16]
 8008116:	e7a3      	b.n	8008060 <__mdiff+0x34>
 8008118:	f856 8b04 	ldr.w	r8, [r6], #4
 800811c:	fa11 f288 	uxtah	r2, r1, r8
 8008120:	1414      	asrs	r4, r2, #16
 8008122:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008126:	b292      	uxth	r2, r2
 8008128:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800812c:	f84e 2b04 	str.w	r2, [lr], #4
 8008130:	1421      	asrs	r1, r4, #16
 8008132:	e7e0      	b.n	80080f6 <__mdiff+0xca>
 8008134:	3f01      	subs	r7, #1
 8008136:	e7ea      	b.n	800810e <__mdiff+0xe2>
 8008138:	08008c07 	.word	0x08008c07
 800813c:	08008c78 	.word	0x08008c78

08008140 <__d2b>:
 8008140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008144:	4689      	mov	r9, r1
 8008146:	2101      	movs	r1, #1
 8008148:	ec57 6b10 	vmov	r6, r7, d0
 800814c:	4690      	mov	r8, r2
 800814e:	f7ff fccf 	bl	8007af0 <_Balloc>
 8008152:	4604      	mov	r4, r0
 8008154:	b930      	cbnz	r0, 8008164 <__d2b+0x24>
 8008156:	4602      	mov	r2, r0
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <__d2b+0xb0>)
 800815a:	4826      	ldr	r0, [pc, #152]	; (80081f4 <__d2b+0xb4>)
 800815c:	f240 310a 	movw	r1, #778	; 0x30a
 8008160:	f000 fb48 	bl	80087f4 <__assert_func>
 8008164:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800816c:	bb35      	cbnz	r5, 80081bc <__d2b+0x7c>
 800816e:	2e00      	cmp	r6, #0
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	d028      	beq.n	80081c6 <__d2b+0x86>
 8008174:	4668      	mov	r0, sp
 8008176:	9600      	str	r6, [sp, #0]
 8008178:	f7ff fd82 	bl	8007c80 <__lo0bits>
 800817c:	9900      	ldr	r1, [sp, #0]
 800817e:	b300      	cbz	r0, 80081c2 <__d2b+0x82>
 8008180:	9a01      	ldr	r2, [sp, #4]
 8008182:	f1c0 0320 	rsb	r3, r0, #32
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	430b      	orrs	r3, r1
 800818c:	40c2      	lsrs	r2, r0
 800818e:	6163      	str	r3, [r4, #20]
 8008190:	9201      	str	r2, [sp, #4]
 8008192:	9b01      	ldr	r3, [sp, #4]
 8008194:	61a3      	str	r3, [r4, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	bf14      	ite	ne
 800819a:	2202      	movne	r2, #2
 800819c:	2201      	moveq	r2, #1
 800819e:	6122      	str	r2, [r4, #16]
 80081a0:	b1d5      	cbz	r5, 80081d8 <__d2b+0x98>
 80081a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081a6:	4405      	add	r5, r0
 80081a8:	f8c9 5000 	str.w	r5, [r9]
 80081ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081b0:	f8c8 0000 	str.w	r0, [r8]
 80081b4:	4620      	mov	r0, r4
 80081b6:	b003      	add	sp, #12
 80081b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081c0:	e7d5      	b.n	800816e <__d2b+0x2e>
 80081c2:	6161      	str	r1, [r4, #20]
 80081c4:	e7e5      	b.n	8008192 <__d2b+0x52>
 80081c6:	a801      	add	r0, sp, #4
 80081c8:	f7ff fd5a 	bl	8007c80 <__lo0bits>
 80081cc:	9b01      	ldr	r3, [sp, #4]
 80081ce:	6163      	str	r3, [r4, #20]
 80081d0:	2201      	movs	r2, #1
 80081d2:	6122      	str	r2, [r4, #16]
 80081d4:	3020      	adds	r0, #32
 80081d6:	e7e3      	b.n	80081a0 <__d2b+0x60>
 80081d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081e0:	f8c9 0000 	str.w	r0, [r9]
 80081e4:	6918      	ldr	r0, [r3, #16]
 80081e6:	f7ff fd2b 	bl	8007c40 <__hi0bits>
 80081ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081ee:	e7df      	b.n	80081b0 <__d2b+0x70>
 80081f0:	08008c07 	.word	0x08008c07
 80081f4:	08008c78 	.word	0x08008c78

080081f8 <_calloc_r>:
 80081f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081fa:	fba1 2402 	umull	r2, r4, r1, r2
 80081fe:	b94c      	cbnz	r4, 8008214 <_calloc_r+0x1c>
 8008200:	4611      	mov	r1, r2
 8008202:	9201      	str	r2, [sp, #4]
 8008204:	f000 f87a 	bl	80082fc <_malloc_r>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	4605      	mov	r5, r0
 800820c:	b930      	cbnz	r0, 800821c <_calloc_r+0x24>
 800820e:	4628      	mov	r0, r5
 8008210:	b003      	add	sp, #12
 8008212:	bd30      	pop	{r4, r5, pc}
 8008214:	220c      	movs	r2, #12
 8008216:	6002      	str	r2, [r0, #0]
 8008218:	2500      	movs	r5, #0
 800821a:	e7f8      	b.n	800820e <_calloc_r+0x16>
 800821c:	4621      	mov	r1, r4
 800821e:	f7fd fddb 	bl	8005dd8 <memset>
 8008222:	e7f4      	b.n	800820e <_calloc_r+0x16>

08008224 <_free_r>:
 8008224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008226:	2900      	cmp	r1, #0
 8008228:	d044      	beq.n	80082b4 <_free_r+0x90>
 800822a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800822e:	9001      	str	r0, [sp, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f1a1 0404 	sub.w	r4, r1, #4
 8008236:	bfb8      	it	lt
 8008238:	18e4      	addlt	r4, r4, r3
 800823a:	f000 fb61 	bl	8008900 <__malloc_lock>
 800823e:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <_free_r+0x94>)
 8008240:	9801      	ldr	r0, [sp, #4]
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	b933      	cbnz	r3, 8008254 <_free_r+0x30>
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	6014      	str	r4, [r2, #0]
 800824a:	b003      	add	sp, #12
 800824c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008250:	f000 bb5c 	b.w	800890c <__malloc_unlock>
 8008254:	42a3      	cmp	r3, r4
 8008256:	d908      	bls.n	800826a <_free_r+0x46>
 8008258:	6825      	ldr	r5, [r4, #0]
 800825a:	1961      	adds	r1, r4, r5
 800825c:	428b      	cmp	r3, r1
 800825e:	bf01      	itttt	eq
 8008260:	6819      	ldreq	r1, [r3, #0]
 8008262:	685b      	ldreq	r3, [r3, #4]
 8008264:	1949      	addeq	r1, r1, r5
 8008266:	6021      	streq	r1, [r4, #0]
 8008268:	e7ed      	b.n	8008246 <_free_r+0x22>
 800826a:	461a      	mov	r2, r3
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	b10b      	cbz	r3, 8008274 <_free_r+0x50>
 8008270:	42a3      	cmp	r3, r4
 8008272:	d9fa      	bls.n	800826a <_free_r+0x46>
 8008274:	6811      	ldr	r1, [r2, #0]
 8008276:	1855      	adds	r5, r2, r1
 8008278:	42a5      	cmp	r5, r4
 800827a:	d10b      	bne.n	8008294 <_free_r+0x70>
 800827c:	6824      	ldr	r4, [r4, #0]
 800827e:	4421      	add	r1, r4
 8008280:	1854      	adds	r4, r2, r1
 8008282:	42a3      	cmp	r3, r4
 8008284:	6011      	str	r1, [r2, #0]
 8008286:	d1e0      	bne.n	800824a <_free_r+0x26>
 8008288:	681c      	ldr	r4, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	6053      	str	r3, [r2, #4]
 800828e:	4421      	add	r1, r4
 8008290:	6011      	str	r1, [r2, #0]
 8008292:	e7da      	b.n	800824a <_free_r+0x26>
 8008294:	d902      	bls.n	800829c <_free_r+0x78>
 8008296:	230c      	movs	r3, #12
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	e7d6      	b.n	800824a <_free_r+0x26>
 800829c:	6825      	ldr	r5, [r4, #0]
 800829e:	1961      	adds	r1, r4, r5
 80082a0:	428b      	cmp	r3, r1
 80082a2:	bf04      	itt	eq
 80082a4:	6819      	ldreq	r1, [r3, #0]
 80082a6:	685b      	ldreq	r3, [r3, #4]
 80082a8:	6063      	str	r3, [r4, #4]
 80082aa:	bf04      	itt	eq
 80082ac:	1949      	addeq	r1, r1, r5
 80082ae:	6021      	streq	r1, [r4, #0]
 80082b0:	6054      	str	r4, [r2, #4]
 80082b2:	e7ca      	b.n	800824a <_free_r+0x26>
 80082b4:	b003      	add	sp, #12
 80082b6:	bd30      	pop	{r4, r5, pc}
 80082b8:	2000044c 	.word	0x2000044c

080082bc <sbrk_aligned>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4e0e      	ldr	r6, [pc, #56]	; (80082f8 <sbrk_aligned+0x3c>)
 80082c0:	460c      	mov	r4, r1
 80082c2:	6831      	ldr	r1, [r6, #0]
 80082c4:	4605      	mov	r5, r0
 80082c6:	b911      	cbnz	r1, 80082ce <sbrk_aligned+0x12>
 80082c8:	f000 fa2e 	bl	8008728 <_sbrk_r>
 80082cc:	6030      	str	r0, [r6, #0]
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 fa29 	bl	8008728 <_sbrk_r>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	d00a      	beq.n	80082f0 <sbrk_aligned+0x34>
 80082da:	1cc4      	adds	r4, r0, #3
 80082dc:	f024 0403 	bic.w	r4, r4, #3
 80082e0:	42a0      	cmp	r0, r4
 80082e2:	d007      	beq.n	80082f4 <sbrk_aligned+0x38>
 80082e4:	1a21      	subs	r1, r4, r0
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 fa1e 	bl	8008728 <_sbrk_r>
 80082ec:	3001      	adds	r0, #1
 80082ee:	d101      	bne.n	80082f4 <sbrk_aligned+0x38>
 80082f0:	f04f 34ff 	mov.w	r4, #4294967295
 80082f4:	4620      	mov	r0, r4
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	20000450 	.word	0x20000450

080082fc <_malloc_r>:
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	1ccd      	adds	r5, r1, #3
 8008302:	f025 0503 	bic.w	r5, r5, #3
 8008306:	3508      	adds	r5, #8
 8008308:	2d0c      	cmp	r5, #12
 800830a:	bf38      	it	cc
 800830c:	250c      	movcc	r5, #12
 800830e:	2d00      	cmp	r5, #0
 8008310:	4607      	mov	r7, r0
 8008312:	db01      	blt.n	8008318 <_malloc_r+0x1c>
 8008314:	42a9      	cmp	r1, r5
 8008316:	d905      	bls.n	8008324 <_malloc_r+0x28>
 8008318:	230c      	movs	r3, #12
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	2600      	movs	r6, #0
 800831e:	4630      	mov	r0, r6
 8008320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008324:	4e2e      	ldr	r6, [pc, #184]	; (80083e0 <_malloc_r+0xe4>)
 8008326:	f000 faeb 	bl	8008900 <__malloc_lock>
 800832a:	6833      	ldr	r3, [r6, #0]
 800832c:	461c      	mov	r4, r3
 800832e:	bb34      	cbnz	r4, 800837e <_malloc_r+0x82>
 8008330:	4629      	mov	r1, r5
 8008332:	4638      	mov	r0, r7
 8008334:	f7ff ffc2 	bl	80082bc <sbrk_aligned>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	4604      	mov	r4, r0
 800833c:	d14d      	bne.n	80083da <_malloc_r+0xde>
 800833e:	6834      	ldr	r4, [r6, #0]
 8008340:	4626      	mov	r6, r4
 8008342:	2e00      	cmp	r6, #0
 8008344:	d140      	bne.n	80083c8 <_malloc_r+0xcc>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	4631      	mov	r1, r6
 800834a:	4638      	mov	r0, r7
 800834c:	eb04 0803 	add.w	r8, r4, r3
 8008350:	f000 f9ea 	bl	8008728 <_sbrk_r>
 8008354:	4580      	cmp	r8, r0
 8008356:	d13a      	bne.n	80083ce <_malloc_r+0xd2>
 8008358:	6821      	ldr	r1, [r4, #0]
 800835a:	3503      	adds	r5, #3
 800835c:	1a6d      	subs	r5, r5, r1
 800835e:	f025 0503 	bic.w	r5, r5, #3
 8008362:	3508      	adds	r5, #8
 8008364:	2d0c      	cmp	r5, #12
 8008366:	bf38      	it	cc
 8008368:	250c      	movcc	r5, #12
 800836a:	4629      	mov	r1, r5
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff ffa5 	bl	80082bc <sbrk_aligned>
 8008372:	3001      	adds	r0, #1
 8008374:	d02b      	beq.n	80083ce <_malloc_r+0xd2>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	442b      	add	r3, r5
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	e00e      	b.n	800839c <_malloc_r+0xa0>
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	1b52      	subs	r2, r2, r5
 8008382:	d41e      	bmi.n	80083c2 <_malloc_r+0xc6>
 8008384:	2a0b      	cmp	r2, #11
 8008386:	d916      	bls.n	80083b6 <_malloc_r+0xba>
 8008388:	1961      	adds	r1, r4, r5
 800838a:	42a3      	cmp	r3, r4
 800838c:	6025      	str	r5, [r4, #0]
 800838e:	bf18      	it	ne
 8008390:	6059      	strne	r1, [r3, #4]
 8008392:	6863      	ldr	r3, [r4, #4]
 8008394:	bf08      	it	eq
 8008396:	6031      	streq	r1, [r6, #0]
 8008398:	5162      	str	r2, [r4, r5]
 800839a:	604b      	str	r3, [r1, #4]
 800839c:	4638      	mov	r0, r7
 800839e:	f104 060b 	add.w	r6, r4, #11
 80083a2:	f000 fab3 	bl	800890c <__malloc_unlock>
 80083a6:	f026 0607 	bic.w	r6, r6, #7
 80083aa:	1d23      	adds	r3, r4, #4
 80083ac:	1af2      	subs	r2, r6, r3
 80083ae:	d0b6      	beq.n	800831e <_malloc_r+0x22>
 80083b0:	1b9b      	subs	r3, r3, r6
 80083b2:	50a3      	str	r3, [r4, r2]
 80083b4:	e7b3      	b.n	800831e <_malloc_r+0x22>
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	bf0c      	ite	eq
 80083bc:	6032      	streq	r2, [r6, #0]
 80083be:	605a      	strne	r2, [r3, #4]
 80083c0:	e7ec      	b.n	800839c <_malloc_r+0xa0>
 80083c2:	4623      	mov	r3, r4
 80083c4:	6864      	ldr	r4, [r4, #4]
 80083c6:	e7b2      	b.n	800832e <_malloc_r+0x32>
 80083c8:	4634      	mov	r4, r6
 80083ca:	6876      	ldr	r6, [r6, #4]
 80083cc:	e7b9      	b.n	8008342 <_malloc_r+0x46>
 80083ce:	230c      	movs	r3, #12
 80083d0:	603b      	str	r3, [r7, #0]
 80083d2:	4638      	mov	r0, r7
 80083d4:	f000 fa9a 	bl	800890c <__malloc_unlock>
 80083d8:	e7a1      	b.n	800831e <_malloc_r+0x22>
 80083da:	6025      	str	r5, [r4, #0]
 80083dc:	e7de      	b.n	800839c <_malloc_r+0xa0>
 80083de:	bf00      	nop
 80083e0:	2000044c 	.word	0x2000044c

080083e4 <__sfputc_r>:
 80083e4:	6893      	ldr	r3, [r2, #8]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	b410      	push	{r4}
 80083ec:	6093      	str	r3, [r2, #8]
 80083ee:	da08      	bge.n	8008402 <__sfputc_r+0x1e>
 80083f0:	6994      	ldr	r4, [r2, #24]
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	db01      	blt.n	80083fa <__sfputc_r+0x16>
 80083f6:	290a      	cmp	r1, #10
 80083f8:	d103      	bne.n	8008402 <__sfputc_r+0x1e>
 80083fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fe:	f7fe ba01 	b.w	8006804 <__swbuf_r>
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	1c58      	adds	r0, r3, #1
 8008406:	6010      	str	r0, [r2, #0]
 8008408:	7019      	strb	r1, [r3, #0]
 800840a:	4608      	mov	r0, r1
 800840c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008410:	4770      	bx	lr

08008412 <__sfputs_r>:
 8008412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008414:	4606      	mov	r6, r0
 8008416:	460f      	mov	r7, r1
 8008418:	4614      	mov	r4, r2
 800841a:	18d5      	adds	r5, r2, r3
 800841c:	42ac      	cmp	r4, r5
 800841e:	d101      	bne.n	8008424 <__sfputs_r+0x12>
 8008420:	2000      	movs	r0, #0
 8008422:	e007      	b.n	8008434 <__sfputs_r+0x22>
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	463a      	mov	r2, r7
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffda 	bl	80083e4 <__sfputc_r>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d1f3      	bne.n	800841c <__sfputs_r+0xa>
 8008434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008438 <_vfiprintf_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	460d      	mov	r5, r1
 800843e:	b09d      	sub	sp, #116	; 0x74
 8008440:	4614      	mov	r4, r2
 8008442:	4698      	mov	r8, r3
 8008444:	4606      	mov	r6, r0
 8008446:	b118      	cbz	r0, 8008450 <_vfiprintf_r+0x18>
 8008448:	6983      	ldr	r3, [r0, #24]
 800844a:	b90b      	cbnz	r3, 8008450 <_vfiprintf_r+0x18>
 800844c:	f7ff fa30 	bl	80078b0 <__sinit>
 8008450:	4b89      	ldr	r3, [pc, #548]	; (8008678 <_vfiprintf_r+0x240>)
 8008452:	429d      	cmp	r5, r3
 8008454:	d11b      	bne.n	800848e <_vfiprintf_r+0x56>
 8008456:	6875      	ldr	r5, [r6, #4]
 8008458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800845a:	07d9      	lsls	r1, r3, #31
 800845c:	d405      	bmi.n	800846a <_vfiprintf_r+0x32>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	059a      	lsls	r2, r3, #22
 8008462:	d402      	bmi.n	800846a <_vfiprintf_r+0x32>
 8008464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008466:	f7ff fac6 	bl	80079f6 <__retarget_lock_acquire_recursive>
 800846a:	89ab      	ldrh	r3, [r5, #12]
 800846c:	071b      	lsls	r3, r3, #28
 800846e:	d501      	bpl.n	8008474 <_vfiprintf_r+0x3c>
 8008470:	692b      	ldr	r3, [r5, #16]
 8008472:	b9eb      	cbnz	r3, 80084b0 <_vfiprintf_r+0x78>
 8008474:	4629      	mov	r1, r5
 8008476:	4630      	mov	r0, r6
 8008478:	f7fe fa16 	bl	80068a8 <__swsetup_r>
 800847c:	b1c0      	cbz	r0, 80084b0 <_vfiprintf_r+0x78>
 800847e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008480:	07dc      	lsls	r4, r3, #31
 8008482:	d50e      	bpl.n	80084a2 <_vfiprintf_r+0x6a>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	b01d      	add	sp, #116	; 0x74
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	4b7b      	ldr	r3, [pc, #492]	; (800867c <_vfiprintf_r+0x244>)
 8008490:	429d      	cmp	r5, r3
 8008492:	d101      	bne.n	8008498 <_vfiprintf_r+0x60>
 8008494:	68b5      	ldr	r5, [r6, #8]
 8008496:	e7df      	b.n	8008458 <_vfiprintf_r+0x20>
 8008498:	4b79      	ldr	r3, [pc, #484]	; (8008680 <_vfiprintf_r+0x248>)
 800849a:	429d      	cmp	r5, r3
 800849c:	bf08      	it	eq
 800849e:	68f5      	ldreq	r5, [r6, #12]
 80084a0:	e7da      	b.n	8008458 <_vfiprintf_r+0x20>
 80084a2:	89ab      	ldrh	r3, [r5, #12]
 80084a4:	0598      	lsls	r0, r3, #22
 80084a6:	d4ed      	bmi.n	8008484 <_vfiprintf_r+0x4c>
 80084a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084aa:	f7ff faa5 	bl	80079f8 <__retarget_lock_release_recursive>
 80084ae:	e7e9      	b.n	8008484 <_vfiprintf_r+0x4c>
 80084b0:	2300      	movs	r3, #0
 80084b2:	9309      	str	r3, [sp, #36]	; 0x24
 80084b4:	2320      	movs	r3, #32
 80084b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80084be:	2330      	movs	r3, #48	; 0x30
 80084c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008684 <_vfiprintf_r+0x24c>
 80084c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084c8:	f04f 0901 	mov.w	r9, #1
 80084cc:	4623      	mov	r3, r4
 80084ce:	469a      	mov	sl, r3
 80084d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d4:	b10a      	cbz	r2, 80084da <_vfiprintf_r+0xa2>
 80084d6:	2a25      	cmp	r2, #37	; 0x25
 80084d8:	d1f9      	bne.n	80084ce <_vfiprintf_r+0x96>
 80084da:	ebba 0b04 	subs.w	fp, sl, r4
 80084de:	d00b      	beq.n	80084f8 <_vfiprintf_r+0xc0>
 80084e0:	465b      	mov	r3, fp
 80084e2:	4622      	mov	r2, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7ff ff93 	bl	8008412 <__sfputs_r>
 80084ec:	3001      	adds	r0, #1
 80084ee:	f000 80aa 	beq.w	8008646 <_vfiprintf_r+0x20e>
 80084f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f4:	445a      	add	r2, fp
 80084f6:	9209      	str	r2, [sp, #36]	; 0x24
 80084f8:	f89a 3000 	ldrb.w	r3, [sl]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80a2 	beq.w	8008646 <_vfiprintf_r+0x20e>
 8008502:	2300      	movs	r3, #0
 8008504:	f04f 32ff 	mov.w	r2, #4294967295
 8008508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800850c:	f10a 0a01 	add.w	sl, sl, #1
 8008510:	9304      	str	r3, [sp, #16]
 8008512:	9307      	str	r3, [sp, #28]
 8008514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008518:	931a      	str	r3, [sp, #104]	; 0x68
 800851a:	4654      	mov	r4, sl
 800851c:	2205      	movs	r2, #5
 800851e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008522:	4858      	ldr	r0, [pc, #352]	; (8008684 <_vfiprintf_r+0x24c>)
 8008524:	f7f7 fe5c 	bl	80001e0 <memchr>
 8008528:	9a04      	ldr	r2, [sp, #16]
 800852a:	b9d8      	cbnz	r0, 8008564 <_vfiprintf_r+0x12c>
 800852c:	06d1      	lsls	r1, r2, #27
 800852e:	bf44      	itt	mi
 8008530:	2320      	movmi	r3, #32
 8008532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008536:	0713      	lsls	r3, r2, #28
 8008538:	bf44      	itt	mi
 800853a:	232b      	movmi	r3, #43	; 0x2b
 800853c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008540:	f89a 3000 	ldrb.w	r3, [sl]
 8008544:	2b2a      	cmp	r3, #42	; 0x2a
 8008546:	d015      	beq.n	8008574 <_vfiprintf_r+0x13c>
 8008548:	9a07      	ldr	r2, [sp, #28]
 800854a:	4654      	mov	r4, sl
 800854c:	2000      	movs	r0, #0
 800854e:	f04f 0c0a 	mov.w	ip, #10
 8008552:	4621      	mov	r1, r4
 8008554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008558:	3b30      	subs	r3, #48	; 0x30
 800855a:	2b09      	cmp	r3, #9
 800855c:	d94e      	bls.n	80085fc <_vfiprintf_r+0x1c4>
 800855e:	b1b0      	cbz	r0, 800858e <_vfiprintf_r+0x156>
 8008560:	9207      	str	r2, [sp, #28]
 8008562:	e014      	b.n	800858e <_vfiprintf_r+0x156>
 8008564:	eba0 0308 	sub.w	r3, r0, r8
 8008568:	fa09 f303 	lsl.w	r3, r9, r3
 800856c:	4313      	orrs	r3, r2
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	46a2      	mov	sl, r4
 8008572:	e7d2      	b.n	800851a <_vfiprintf_r+0xe2>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	1d19      	adds	r1, r3, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	9103      	str	r1, [sp, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	bfbb      	ittet	lt
 8008580:	425b      	neglt	r3, r3
 8008582:	f042 0202 	orrlt.w	r2, r2, #2
 8008586:	9307      	strge	r3, [sp, #28]
 8008588:	9307      	strlt	r3, [sp, #28]
 800858a:	bfb8      	it	lt
 800858c:	9204      	strlt	r2, [sp, #16]
 800858e:	7823      	ldrb	r3, [r4, #0]
 8008590:	2b2e      	cmp	r3, #46	; 0x2e
 8008592:	d10c      	bne.n	80085ae <_vfiprintf_r+0x176>
 8008594:	7863      	ldrb	r3, [r4, #1]
 8008596:	2b2a      	cmp	r3, #42	; 0x2a
 8008598:	d135      	bne.n	8008606 <_vfiprintf_r+0x1ce>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	1d1a      	adds	r2, r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	9203      	str	r2, [sp, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfb8      	it	lt
 80085a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80085aa:	3402      	adds	r4, #2
 80085ac:	9305      	str	r3, [sp, #20]
 80085ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008694 <_vfiprintf_r+0x25c>
 80085b2:	7821      	ldrb	r1, [r4, #0]
 80085b4:	2203      	movs	r2, #3
 80085b6:	4650      	mov	r0, sl
 80085b8:	f7f7 fe12 	bl	80001e0 <memchr>
 80085bc:	b140      	cbz	r0, 80085d0 <_vfiprintf_r+0x198>
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	eba0 000a 	sub.w	r0, r0, sl
 80085c4:	fa03 f000 	lsl.w	r0, r3, r0
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	4303      	orrs	r3, r0
 80085cc:	3401      	adds	r4, #1
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d4:	482c      	ldr	r0, [pc, #176]	; (8008688 <_vfiprintf_r+0x250>)
 80085d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085da:	2206      	movs	r2, #6
 80085dc:	f7f7 fe00 	bl	80001e0 <memchr>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d03f      	beq.n	8008664 <_vfiprintf_r+0x22c>
 80085e4:	4b29      	ldr	r3, [pc, #164]	; (800868c <_vfiprintf_r+0x254>)
 80085e6:	bb1b      	cbnz	r3, 8008630 <_vfiprintf_r+0x1f8>
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	3307      	adds	r3, #7
 80085ec:	f023 0307 	bic.w	r3, r3, #7
 80085f0:	3308      	adds	r3, #8
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	443b      	add	r3, r7
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	e767      	b.n	80084cc <_vfiprintf_r+0x94>
 80085fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008600:	460c      	mov	r4, r1
 8008602:	2001      	movs	r0, #1
 8008604:	e7a5      	b.n	8008552 <_vfiprintf_r+0x11a>
 8008606:	2300      	movs	r3, #0
 8008608:	3401      	adds	r4, #1
 800860a:	9305      	str	r3, [sp, #20]
 800860c:	4619      	mov	r1, r3
 800860e:	f04f 0c0a 	mov.w	ip, #10
 8008612:	4620      	mov	r0, r4
 8008614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008618:	3a30      	subs	r2, #48	; 0x30
 800861a:	2a09      	cmp	r2, #9
 800861c:	d903      	bls.n	8008626 <_vfiprintf_r+0x1ee>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0c5      	beq.n	80085ae <_vfiprintf_r+0x176>
 8008622:	9105      	str	r1, [sp, #20]
 8008624:	e7c3      	b.n	80085ae <_vfiprintf_r+0x176>
 8008626:	fb0c 2101 	mla	r1, ip, r1, r2
 800862a:	4604      	mov	r4, r0
 800862c:	2301      	movs	r3, #1
 800862e:	e7f0      	b.n	8008612 <_vfiprintf_r+0x1da>
 8008630:	ab03      	add	r3, sp, #12
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	462a      	mov	r2, r5
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <_vfiprintf_r+0x258>)
 8008638:	a904      	add	r1, sp, #16
 800863a:	4630      	mov	r0, r6
 800863c:	f7fd fc74 	bl	8005f28 <_printf_float>
 8008640:	4607      	mov	r7, r0
 8008642:	1c78      	adds	r0, r7, #1
 8008644:	d1d6      	bne.n	80085f4 <_vfiprintf_r+0x1bc>
 8008646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008648:	07d9      	lsls	r1, r3, #31
 800864a:	d405      	bmi.n	8008658 <_vfiprintf_r+0x220>
 800864c:	89ab      	ldrh	r3, [r5, #12]
 800864e:	059a      	lsls	r2, r3, #22
 8008650:	d402      	bmi.n	8008658 <_vfiprintf_r+0x220>
 8008652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008654:	f7ff f9d0 	bl	80079f8 <__retarget_lock_release_recursive>
 8008658:	89ab      	ldrh	r3, [r5, #12]
 800865a:	065b      	lsls	r3, r3, #25
 800865c:	f53f af12 	bmi.w	8008484 <_vfiprintf_r+0x4c>
 8008660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008662:	e711      	b.n	8008488 <_vfiprintf_r+0x50>
 8008664:	ab03      	add	r3, sp, #12
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	462a      	mov	r2, r5
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <_vfiprintf_r+0x258>)
 800866c:	a904      	add	r1, sp, #16
 800866e:	4630      	mov	r0, r6
 8008670:	f7fd fefe 	bl	8006470 <_printf_i>
 8008674:	e7e4      	b.n	8008640 <_vfiprintf_r+0x208>
 8008676:	bf00      	nop
 8008678:	08008c38 	.word	0x08008c38
 800867c:	08008c58 	.word	0x08008c58
 8008680:	08008c18 	.word	0x08008c18
 8008684:	08008dd4 	.word	0x08008dd4
 8008688:	08008dde 	.word	0x08008dde
 800868c:	08005f29 	.word	0x08005f29
 8008690:	08008413 	.word	0x08008413
 8008694:	08008dda 	.word	0x08008dda

08008698 <_putc_r>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	460d      	mov	r5, r1
 800869c:	4614      	mov	r4, r2
 800869e:	4606      	mov	r6, r0
 80086a0:	b118      	cbz	r0, 80086aa <_putc_r+0x12>
 80086a2:	6983      	ldr	r3, [r0, #24]
 80086a4:	b90b      	cbnz	r3, 80086aa <_putc_r+0x12>
 80086a6:	f7ff f903 	bl	80078b0 <__sinit>
 80086aa:	4b1c      	ldr	r3, [pc, #112]	; (800871c <_putc_r+0x84>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	d124      	bne.n	80086fa <_putc_r+0x62>
 80086b0:	6874      	ldr	r4, [r6, #4]
 80086b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086b4:	07d8      	lsls	r0, r3, #31
 80086b6:	d405      	bmi.n	80086c4 <_putc_r+0x2c>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	0599      	lsls	r1, r3, #22
 80086bc:	d402      	bmi.n	80086c4 <_putc_r+0x2c>
 80086be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086c0:	f7ff f999 	bl	80079f6 <__retarget_lock_acquire_recursive>
 80086c4:	68a3      	ldr	r3, [r4, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	60a3      	str	r3, [r4, #8]
 80086cc:	da05      	bge.n	80086da <_putc_r+0x42>
 80086ce:	69a2      	ldr	r2, [r4, #24]
 80086d0:	4293      	cmp	r3, r2
 80086d2:	db1c      	blt.n	800870e <_putc_r+0x76>
 80086d4:	b2eb      	uxtb	r3, r5
 80086d6:	2b0a      	cmp	r3, #10
 80086d8:	d019      	beq.n	800870e <_putc_r+0x76>
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	701d      	strb	r5, [r3, #0]
 80086e2:	b2ed      	uxtb	r5, r5
 80086e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086e6:	07da      	lsls	r2, r3, #31
 80086e8:	d405      	bmi.n	80086f6 <_putc_r+0x5e>
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	059b      	lsls	r3, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_putc_r+0x5e>
 80086f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086f2:	f7ff f981 	bl	80079f8 <__retarget_lock_release_recursive>
 80086f6:	4628      	mov	r0, r5
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <_putc_r+0x88>)
 80086fc:	429c      	cmp	r4, r3
 80086fe:	d101      	bne.n	8008704 <_putc_r+0x6c>
 8008700:	68b4      	ldr	r4, [r6, #8]
 8008702:	e7d6      	b.n	80086b2 <_putc_r+0x1a>
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <_putc_r+0x8c>)
 8008706:	429c      	cmp	r4, r3
 8008708:	bf08      	it	eq
 800870a:	68f4      	ldreq	r4, [r6, #12]
 800870c:	e7d1      	b.n	80086b2 <_putc_r+0x1a>
 800870e:	4629      	mov	r1, r5
 8008710:	4622      	mov	r2, r4
 8008712:	4630      	mov	r0, r6
 8008714:	f7fe f876 	bl	8006804 <__swbuf_r>
 8008718:	4605      	mov	r5, r0
 800871a:	e7e3      	b.n	80086e4 <_putc_r+0x4c>
 800871c:	08008c38 	.word	0x08008c38
 8008720:	08008c58 	.word	0x08008c58
 8008724:	08008c18 	.word	0x08008c18

08008728 <_sbrk_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d06      	ldr	r5, [pc, #24]	; (8008744 <_sbrk_r+0x1c>)
 800872c:	2300      	movs	r3, #0
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	602b      	str	r3, [r5, #0]
 8008734:	f7f9 fb74 	bl	8001e20 <_sbrk>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_sbrk_r+0x1a>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_sbrk_r+0x1a>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	20000454 	.word	0x20000454

08008748 <__sread>:
 8008748:	b510      	push	{r4, lr}
 800874a:	460c      	mov	r4, r1
 800874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008750:	f000 f8e2 	bl	8008918 <_read_r>
 8008754:	2800      	cmp	r0, #0
 8008756:	bfab      	itete	ge
 8008758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800875a:	89a3      	ldrhlt	r3, [r4, #12]
 800875c:	181b      	addge	r3, r3, r0
 800875e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008762:	bfac      	ite	ge
 8008764:	6563      	strge	r3, [r4, #84]	; 0x54
 8008766:	81a3      	strhlt	r3, [r4, #12]
 8008768:	bd10      	pop	{r4, pc}

0800876a <__swrite>:
 800876a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876e:	461f      	mov	r7, r3
 8008770:	898b      	ldrh	r3, [r1, #12]
 8008772:	05db      	lsls	r3, r3, #23
 8008774:	4605      	mov	r5, r0
 8008776:	460c      	mov	r4, r1
 8008778:	4616      	mov	r6, r2
 800877a:	d505      	bpl.n	8008788 <__swrite+0x1e>
 800877c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008780:	2302      	movs	r3, #2
 8008782:	2200      	movs	r2, #0
 8008784:	f000 f898 	bl	80088b8 <_lseek_r>
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800878e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	4632      	mov	r2, r6
 8008796:	463b      	mov	r3, r7
 8008798:	4628      	mov	r0, r5
 800879a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800879e:	f000 b817 	b.w	80087d0 <_write_r>

080087a2 <__sseek>:
 80087a2:	b510      	push	{r4, lr}
 80087a4:	460c      	mov	r4, r1
 80087a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087aa:	f000 f885 	bl	80088b8 <_lseek_r>
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	bf15      	itete	ne
 80087b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80087b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087be:	81a3      	strheq	r3, [r4, #12]
 80087c0:	bf18      	it	ne
 80087c2:	81a3      	strhne	r3, [r4, #12]
 80087c4:	bd10      	pop	{r4, pc}

080087c6 <__sclose>:
 80087c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ca:	f000 b831 	b.w	8008830 <_close_r>
	...

080087d0 <_write_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d07      	ldr	r5, [pc, #28]	; (80087f0 <_write_r+0x20>)
 80087d4:	4604      	mov	r4, r0
 80087d6:	4608      	mov	r0, r1
 80087d8:	4611      	mov	r1, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	602a      	str	r2, [r5, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	f7f9 face 	bl	8001d80 <_write>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_write_r+0x1e>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_write_r+0x1e>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	20000454 	.word	0x20000454

080087f4 <__assert_func>:
 80087f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087f6:	4614      	mov	r4, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <__assert_func+0x2c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4605      	mov	r5, r0
 8008800:	68d8      	ldr	r0, [r3, #12]
 8008802:	b14c      	cbz	r4, 8008818 <__assert_func+0x24>
 8008804:	4b07      	ldr	r3, [pc, #28]	; (8008824 <__assert_func+0x30>)
 8008806:	9100      	str	r1, [sp, #0]
 8008808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800880c:	4906      	ldr	r1, [pc, #24]	; (8008828 <__assert_func+0x34>)
 800880e:	462b      	mov	r3, r5
 8008810:	f000 f81e 	bl	8008850 <fiprintf>
 8008814:	f000 f89f 	bl	8008956 <abort>
 8008818:	4b04      	ldr	r3, [pc, #16]	; (800882c <__assert_func+0x38>)
 800881a:	461c      	mov	r4, r3
 800881c:	e7f3      	b.n	8008806 <__assert_func+0x12>
 800881e:	bf00      	nop
 8008820:	2000000c 	.word	0x2000000c
 8008824:	08008de5 	.word	0x08008de5
 8008828:	08008df2 	.word	0x08008df2
 800882c:	08008e20 	.word	0x08008e20

08008830 <_close_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d06      	ldr	r5, [pc, #24]	; (800884c <_close_r+0x1c>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	f7f9 fabc 	bl	8001db8 <_close>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_close_r+0x1a>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_close_r+0x1a>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000454 	.word	0x20000454

08008850 <fiprintf>:
 8008850:	b40e      	push	{r1, r2, r3}
 8008852:	b503      	push	{r0, r1, lr}
 8008854:	4601      	mov	r1, r0
 8008856:	ab03      	add	r3, sp, #12
 8008858:	4805      	ldr	r0, [pc, #20]	; (8008870 <fiprintf+0x20>)
 800885a:	f853 2b04 	ldr.w	r2, [r3], #4
 800885e:	6800      	ldr	r0, [r0, #0]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	f7ff fde9 	bl	8008438 <_vfiprintf_r>
 8008866:	b002      	add	sp, #8
 8008868:	f85d eb04 	ldr.w	lr, [sp], #4
 800886c:	b003      	add	sp, #12
 800886e:	4770      	bx	lr
 8008870:	2000000c 	.word	0x2000000c

08008874 <_fstat_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d07      	ldr	r5, [pc, #28]	; (8008894 <_fstat_r+0x20>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	f7f9 faa5 	bl	8001dd0 <_fstat>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d102      	bne.n	8008890 <_fstat_r+0x1c>
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	b103      	cbz	r3, 8008890 <_fstat_r+0x1c>
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	20000454 	.word	0x20000454

08008898 <_isatty_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d06      	ldr	r5, [pc, #24]	; (80088b4 <_isatty_r+0x1c>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7f9 faa4 	bl	8001df0 <_isatty>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_isatty_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_isatty_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20000454 	.word	0x20000454

080088b8 <_lseek_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	; (80088d8 <_lseek_r+0x20>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	2200      	movs	r2, #0
 80088c4:	602a      	str	r2, [r5, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7f9 fa9d 	bl	8001e06 <_lseek>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_lseek_r+0x1e>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_lseek_r+0x1e>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000454 	.word	0x20000454

080088dc <__ascii_mbtowc>:
 80088dc:	b082      	sub	sp, #8
 80088de:	b901      	cbnz	r1, 80088e2 <__ascii_mbtowc+0x6>
 80088e0:	a901      	add	r1, sp, #4
 80088e2:	b142      	cbz	r2, 80088f6 <__ascii_mbtowc+0x1a>
 80088e4:	b14b      	cbz	r3, 80088fa <__ascii_mbtowc+0x1e>
 80088e6:	7813      	ldrb	r3, [r2, #0]
 80088e8:	600b      	str	r3, [r1, #0]
 80088ea:	7812      	ldrb	r2, [r2, #0]
 80088ec:	1e10      	subs	r0, r2, #0
 80088ee:	bf18      	it	ne
 80088f0:	2001      	movne	r0, #1
 80088f2:	b002      	add	sp, #8
 80088f4:	4770      	bx	lr
 80088f6:	4610      	mov	r0, r2
 80088f8:	e7fb      	b.n	80088f2 <__ascii_mbtowc+0x16>
 80088fa:	f06f 0001 	mvn.w	r0, #1
 80088fe:	e7f8      	b.n	80088f2 <__ascii_mbtowc+0x16>

08008900 <__malloc_lock>:
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <__malloc_lock+0x8>)
 8008902:	f7ff b878 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 8008906:	bf00      	nop
 8008908:	20000448 	.word	0x20000448

0800890c <__malloc_unlock>:
 800890c:	4801      	ldr	r0, [pc, #4]	; (8008914 <__malloc_unlock+0x8>)
 800890e:	f7ff b873 	b.w	80079f8 <__retarget_lock_release_recursive>
 8008912:	bf00      	nop
 8008914:	20000448 	.word	0x20000448

08008918 <_read_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d07      	ldr	r5, [pc, #28]	; (8008938 <_read_r+0x20>)
 800891c:	4604      	mov	r4, r0
 800891e:	4608      	mov	r0, r1
 8008920:	4611      	mov	r1, r2
 8008922:	2200      	movs	r2, #0
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	f7f9 fa0d 	bl	8001d46 <_read>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_read_r+0x1e>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_read_r+0x1e>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000454 	.word	0x20000454

0800893c <__ascii_wctomb>:
 800893c:	b149      	cbz	r1, 8008952 <__ascii_wctomb+0x16>
 800893e:	2aff      	cmp	r2, #255	; 0xff
 8008940:	bf85      	ittet	hi
 8008942:	238a      	movhi	r3, #138	; 0x8a
 8008944:	6003      	strhi	r3, [r0, #0]
 8008946:	700a      	strbls	r2, [r1, #0]
 8008948:	f04f 30ff 	movhi.w	r0, #4294967295
 800894c:	bf98      	it	ls
 800894e:	2001      	movls	r0, #1
 8008950:	4770      	bx	lr
 8008952:	4608      	mov	r0, r1
 8008954:	4770      	bx	lr

08008956 <abort>:
 8008956:	b508      	push	{r3, lr}
 8008958:	2006      	movs	r0, #6
 800895a:	f000 f82b 	bl	80089b4 <raise>
 800895e:	2001      	movs	r0, #1
 8008960:	f7f9 f9e7 	bl	8001d32 <_exit>

08008964 <_raise_r>:
 8008964:	291f      	cmp	r1, #31
 8008966:	b538      	push	{r3, r4, r5, lr}
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	d904      	bls.n	8008978 <_raise_r+0x14>
 800896e:	2316      	movs	r3, #22
 8008970:	6003      	str	r3, [r0, #0]
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800897a:	b112      	cbz	r2, 8008982 <_raise_r+0x1e>
 800897c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008980:	b94b      	cbnz	r3, 8008996 <_raise_r+0x32>
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f830 	bl	80089e8 <_getpid_r>
 8008988:	462a      	mov	r2, r5
 800898a:	4601      	mov	r1, r0
 800898c:	4620      	mov	r0, r4
 800898e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008992:	f000 b817 	b.w	80089c4 <_kill_r>
 8008996:	2b01      	cmp	r3, #1
 8008998:	d00a      	beq.n	80089b0 <_raise_r+0x4c>
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	d103      	bne.n	80089a6 <_raise_r+0x42>
 800899e:	2316      	movs	r3, #22
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	2001      	movs	r0, #1
 80089a4:	e7e7      	b.n	8008976 <_raise_r+0x12>
 80089a6:	2400      	movs	r4, #0
 80089a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089ac:	4628      	mov	r0, r5
 80089ae:	4798      	blx	r3
 80089b0:	2000      	movs	r0, #0
 80089b2:	e7e0      	b.n	8008976 <_raise_r+0x12>

080089b4 <raise>:
 80089b4:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <raise+0xc>)
 80089b6:	4601      	mov	r1, r0
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	f7ff bfd3 	b.w	8008964 <_raise_r>
 80089be:	bf00      	nop
 80089c0:	2000000c 	.word	0x2000000c

080089c4 <_kill_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	; (80089e4 <_kill_r+0x20>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	4611      	mov	r1, r2
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	f7f9 f99e 	bl	8001d12 <_kill>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d102      	bne.n	80089e0 <_kill_r+0x1c>
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	b103      	cbz	r3, 80089e0 <_kill_r+0x1c>
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	bd38      	pop	{r3, r4, r5, pc}
 80089e2:	bf00      	nop
 80089e4:	20000454 	.word	0x20000454

080089e8 <_getpid_r>:
 80089e8:	f7f9 b98b 	b.w	8001d02 <_getpid>

080089ec <_init>:
 80089ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ee:	bf00      	nop
 80089f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f2:	bc08      	pop	{r3}
 80089f4:	469e      	mov	lr, r3
 80089f6:	4770      	bx	lr

080089f8 <_fini>:
 80089f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fa:	bf00      	nop
 80089fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fe:	bc08      	pop	{r3}
 8008a00:	469e      	mov	lr, r3
 8008a02:	4770      	bx	lr
