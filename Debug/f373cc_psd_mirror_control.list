
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000790c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007aa0  08007aa0  00017aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec4  08007ec4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ec4  08007ec4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ec4  08007ec4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  080080a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080080a8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102e1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f66  00000000  00000000  000304ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  000332f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d069  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001187f  00000000  00000000  00051139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab417  00000000  00000000  000629b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ddcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  0010de20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a84 	.word	0x08007a84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007a84 	.word	0x08007a84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fef0 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f828 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fa8e 	bl	80010d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bb8:	f000 f87e 	bl	8000cb8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bbc:	f000 f8ba 	bl	8000d34 <MX_SPI2_Init>
  MX_TIM17_Init();
 8000bc0:	f000 f9e0 	bl	8000f84 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000bc4:	f000 fa56 	bl	8001074 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc8:	f000 f916 	bl	8000df8 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bcc:	f000 f962 	bl	8000e94 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000bd0:	f000 f8ee 	bl	8000db0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  printf("boink\n");
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <main+0x4c>)
 8000bd6:	f004 fea3 	bl	8005920 <puts>
  HAL_Delay(10);
  MCP3561_PrintRegisters(&hspi1);
  printf("\n");
  */

  setup_done = true;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <main+0x50>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //MCP3561_PrintRegisters();
	  //printf("\n");
	  HAL_Delay(100);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f000 ff3b 	bl	8001a5c <HAL_Delay>
	  printf("%d\n", (int)adc_val);  // updated in ISR
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <main+0x54>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <main+0x58>)
 8000bee:	f004 fe11 	bl	8005814 <iprintf>
	  HAL_Delay(100);
 8000bf2:	e7f5      	b.n	8000be0 <main+0x38>
 8000bf4:	08007aa0 	.word	0x08007aa0
 8000bf8:	20000478 	.word	0x20000478
 8000bfc:	20000474 	.word	0x20000474
 8000c00:	08007aa8 	.word	0x08007aa8

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b09a      	sub	sp, #104	; 0x68
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 f98c 	bl	8004f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	222c      	movs	r2, #44	; 0x2c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 f97e 	bl	8004f30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c34:	2301      	movs	r3, #1
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c42:	2301      	movs	r3, #1
 8000c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000c50:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000c54:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 f9de 	bl	800201c <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c66:	f000 fb65 	bl	8001334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c84:	2102      	movs	r1, #2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fa06 	bl	8003098 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c92:	f000 fb4f 	bl	8001334 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fc2f 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cac:	f000 fb42 	bl	8001334 <Error_Handler>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3768      	adds	r7, #104	; 0x68
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_SPI1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cee:	2210      	movs	r2, #16
 8000cf0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d12:	2208      	movs	r2, #8
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d18:	f002 fd68 	bl	80037ec <HAL_SPI_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fb07 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200001f8 	.word	0x200001f8
 8000d30:	40013000 	.word	0x40013000

08000d34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_SPI2_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d4c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d90:	2208      	movs	r2, #8
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d96:	f002 fd29 	bl	80037ec <HAL_SPI_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000da0:	f000 fac8 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000025c 	.word	0x2000025c
 8000dac:	40003800 	.word	0x40003800

08000db0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <MX_TIM13_Init+0x44>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dcc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000ddc:	f003 f928 	bl	8004030 <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000de6:	f000 faa5 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002c0 	.word	0x200002c0
 8000df4:	40001c00 	.word	0x40001c00

08000df8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <MX_TIM14_Init+0x98>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e28:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e36:	4815      	ldr	r0, [pc, #84]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e38:	f003 f8fa 	bl	8004030 <HAL_TIM_Base_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000e42:	f000 fa77 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e48:	f003 f941 	bl	80040ce <HAL_TIM_OC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000e52:	f000 fa6f 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e6e:	f003 f987 	bl	8004180 <HAL_TIM_OC_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000e78:	f000 fa5c 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e7e:	f000 fb8f 	bl	80015a0 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000030c 	.word	0x2000030c
 8000e90:	40002000 	.word	0x40002000

08000e94 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b090      	sub	sp, #64	; 0x40
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 f83b 	bl	8004f30 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ebc:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <MX_TIM16_Init+0xec>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ee6:	4825      	ldr	r0, [pc, #148]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ee8:	f003 f8a2 	bl	8004030 <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ef2:	f000 fa1f 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ef8:	f003 f8e9 	bl	80040ce <HAL_TIM_OC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000f02:	f000 fa17 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4814      	ldr	r0, [pc, #80]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000f2c:	f003 f928 	bl	8004180 <HAL_TIM_OC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000f36:	f000 f9fd 	bl	8001334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000f5e:	f003 fb5e 	bl	800461e <HAL_TIMEx_ConfigBreakDeadTime>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000f68:	f000 f9e4 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000f6e:	f000 fb17 	bl	80015a0 <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3740      	adds	r7, #64	; 0x40
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000358 	.word	0x20000358
 8000f80:	40014400 	.word	0x40014400

08000f84 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 ffc3 	bl	8004f30 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fac:	4a30      	ldr	r2, [pc, #192]	; (8001070 <MX_TIM17_Init+0xec>)
 8000fae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fd8:	f003 f82a 	bl	8004030 <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000fe2:	f000 f9a7 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000fe6:	4821      	ldr	r0, [pc, #132]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fe8:	f003 f871 	bl	80040ce <HAL_TIM_OC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000ff2:	f000 f99f 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <MX_TIM17_Init+0xe8>)
 800101c:	f003 f8b0 	bl	8004180 <HAL_TIM_OC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001026:	f000 f985 	bl	8001334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001042:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <MX_TIM17_Init+0xe8>)
 800104e:	f003 fae6 	bl	800461e <HAL_TIMEx_ConfigBreakDeadTime>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001058:	f000 f96c 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <MX_TIM17_Init+0xe8>)
 800105e:	f000 fa9f 	bl	80015a0 <HAL_TIM_MspPostInit>

}
 8001062:	bf00      	nop
 8001064:	3740      	adds	r7, #64	; 0x40
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200003a4 	.word	0x200003a4
 8001070:	40014800 	.word	0x40014800

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <MX_USART2_UART_Init+0x5c>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010b8:	f003 fb03 	bl	80046c2 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c2:	f000 f937 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200003f0 	.word	0x200003f0
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ea:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <MX_GPIO_Init+0x120>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a41      	ldr	r2, [pc, #260]	; (80011f4 <MX_GPIO_Init+0x120>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <MX_GPIO_Init+0x120>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	4a3b      	ldr	r2, [pc, #236]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	6153      	str	r3, [r2, #20]
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <MX_GPIO_Init+0x120>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a35      	ldr	r2, [pc, #212]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6153      	str	r3, [r2, #20]
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a2f      	ldr	r2, [pc, #188]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_EN_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f000 ff32 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <MX_GPIO_Init+0x124>)
 8001160:	f000 ff2c 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001164:	2310      	movs	r3, #16
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f000 fda3 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001182:	2302      	movs	r3, #2
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001186:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4818      	ldr	r0, [pc, #96]	; (80011f8 <MX_GPIO_Init+0x124>)
 8001198:	f000 fd96 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800119c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <MX_GPIO_Init+0x124>)
 80011b6:	f000 fd87 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_EN_Pin;
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_EN_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 fd77 	bl	8001cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2007      	movs	r0, #7
 80011e0:	f000 fd3b 	bl	8001c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011e4:	2007      	movs	r0, #7
 80011e6:	f000 fd54 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	48000400 	.word	0x48000400

080011fc <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001204:	1d39      	adds	r1, r7, #4
 8001206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120a:	2201      	movs	r2, #1
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <__io_putchar+0x20>)
 800120e:	f003 faa6 	bl	800475e <HAL_UART_Transmit>

    return ch;
 8001212:	687b      	ldr	r3, [r7, #4]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200003f0 	.word	0x200003f0

08001220 <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
	/* @todo correct EXTI pin */
    if ( GPIO_Pin == GPIO_PIN_6) {
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2b40      	cmp	r3, #64	; 0x40
 800122e:	d171      	bne.n	8001314 <HAL_GPIO_EXTI_Callback+0xf4>
    	if(setup_done){
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d06c      	beq.n	8001314 <HAL_GPIO_EXTI_Callback+0xf4>
    		uint8_t val[5] = {0,0,0,0,0};
 800123a:	4a39      	ldr	r2, [pc, #228]	; (8001320 <HAL_GPIO_EXTI_Callback+0x100>)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001244:	6018      	str	r0, [r3, #0]
 8001246:	3304      	adds	r3, #4
 8001248:	7019      	strb	r1, [r3, #0]
    		uint8_t cmd[5] = {0,0,0,0,0};
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <HAL_GPIO_EXTI_Callback+0x100>)
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001254:	6018      	str	r0, [r3, #0]
 8001256:	3304      	adds	r3, #4
 8001258:	7019      	strb	r1, [r3, #0]
    		cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 800125a:	2341      	movs	r3, #65	; 0x41
 800125c:	753b      	strb	r3, [r7, #20]
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2110      	movs	r1, #16
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f000 fea9 	bl	8001fbc <HAL_GPIO_WritePin>
    		// non-blocking "HAL_SPI_TransmitReceive_IT" does not work
    		// because we need to create CS signal manually
    		// the timout therefore must not be greater than 1/fs
    		// e.g. at 300 Hz --> 3ms
    		HAL_SPI_TransmitReceive(&hspi1, &cmd[0], &val[0], 5, 1);
 800126a:	f107 021c 	add.w	r2, r7, #28
 800126e:	f107 0114 	add.w	r1, r7, #20
 8001272:	2301      	movs	r3, #1
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2305      	movs	r3, #5
 8001278:	482a      	ldr	r0, [pc, #168]	; (8001324 <HAL_GPIO_EXTI_Callback+0x104>)
 800127a:	f002 fb62 	bl	8003942 <HAL_SPI_TransmitReceive>
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	2110      	movs	r1, #16
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f000 fe99 	bl	8001fbc <HAL_GPIO_WritePin>
    		adc_val = (val[1] << 16) | (val[2] << 8) | val[3];
 800128a:	7f7b      	ldrb	r3, [r7, #29]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	7fbb      	ldrb	r3, [r7, #30]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	4313      	orrs	r3, r2
 8001294:	7ffa      	ldrb	r2, [r7, #31]
 8001296:	4313      	orrs	r3, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_GPIO_EXTI_Callback+0x108>)
 800129c:	601a      	str	r2, [r3, #0]

    		float volts = (float)adc_val/(8388607.0f)*3.3f;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_GPIO_EXTI_Callback+0x108>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012aa:	eddf 6a20 	vldr	s13, [pc, #128]	; 800132c <HAL_GPIO_EXTI_Callback+0x10c>
 80012ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001330 <HAL_GPIO_EXTI_Callback+0x110>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    		uint8_t str[11];
    		for(int i=0; i<10; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c2:	e008      	b.n	80012d6 <HAL_GPIO_EXTI_Callback+0xb6>
    			str[i] = ' ';
 80012c4:	f107 0208 	add.w	r2, r7, #8
 80012c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ca:	4413      	add	r3, r2
 80012cc:	2220      	movs	r2, #32
 80012ce:	701a      	strb	r2, [r3, #0]
    		for(int i=0; i<10; i++)
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	3301      	adds	r3, #1
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	2b09      	cmp	r3, #9
 80012da:	ddf3      	ble.n	80012c4 <HAL_GPIO_EXTI_Callback+0xa4>
    		int i = (int)(volts*9.0f/3.3f);
 80012dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012e0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80012e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012e8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001330 <HAL_GPIO_EXTI_Callback+0x110>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	ee17 3a90 	vmov	r3, s15
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    		str[i] = '#';
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	4413      	add	r3, r2
 8001302:	2223      	movs	r2, #35	; 0x23
 8001304:	701a      	strb	r2, [r3, #0]
    		str[11] = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	74fb      	strb	r3, [r7, #19]
    		printf("%s\n", str);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f004 fb06 	bl	8005920 <puts>
    		//printf("%03f\n", volts);
    		//printf("%d\n", (int)adc_val);  // updated in ISR
    	}
    }
}
 8001314:	bf00      	nop
 8001316:	3730      	adds	r7, #48	; 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000478 	.word	0x20000478
 8001320:	08007aac 	.word	0x08007aac
 8001324:	200001f8 	.word	0x200001f8
 8001328:	20000474 	.word	0x20000474
 800132c:	4afffffe 	.word	0x4afffffe
 8001330:	40533333 	.word	0x40533333

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x44>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_MspInit+0x44>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x44>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x44>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x44>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x44>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_SPI_MspInit+0x14c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d145      	bne.n	8001436 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	623b      	str	r3, [r7, #32]
 80013c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	6153      	str	r3, [r2, #20]
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4a3e      	ldr	r2, [pc, #248]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6153      	str	r3, [r2, #20]
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013f2:	2360      	movs	r3, #96	; 0x60
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001402:	2305      	movs	r3, #5
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f000 fc5a 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001414:	2301      	movs	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001424:	2305      	movs	r3, #5
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <HAL_SPI_MspInit+0x154>)
 8001430:	f000 fc4a 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001434:	e04a      	b.n	80014cc <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <HAL_SPI_MspInit+0x158>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d145      	bne.n	80014cc <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144a:	61d3      	str	r3, [r2, #28]
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001462:	6153      	str	r3, [r2, #20]
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 8001476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800147a:	6153      	str	r3, [r2, #20]
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_SPI_MspInit+0x150>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149a:	2305      	movs	r3, #5
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <HAL_SPI_MspInit+0x154>)
 80014a6:	f000 fc0f 	bl	8001cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014bc:	2305      	movs	r3, #5
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <HAL_SPI_MspInit+0x15c>)
 80014c8:	f000 fbfe 	bl	8001cc8 <HAL_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	3738      	adds	r7, #56	; 0x38
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40013000 	.word	0x40013000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000400 	.word	0x48000400
 80014e0:	40003800 	.word	0x40003800
 80014e4:	48000c00 	.word	0x48000c00

080014e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a25      	ldr	r2, [pc, #148]	; (800158c <HAL_TIM_Base_MspInit+0xa4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10c      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a24      	ldr	r2, [pc, #144]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001512:	e034      	b.n	800157e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <HAL_TIM_Base_MspInit+0xac>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10c      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
}
 8001536:	e022      	b.n	800157e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_TIM_Base_MspInit+0xb0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10c      	bne.n	800155c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	e010      	b.n	800157e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_TIM_Base_MspInit+0xb4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10b      	bne.n	800157e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_TIM_Base_MspInit+0xa8>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40001c00 	.word	0x40001c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40002000 	.word	0x40002000
 8001598:	40014400 	.word	0x40014400
 800159c:	40014800 	.word	0x40014800

080015a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a35      	ldr	r2, [pc, #212]	; (8001694 <HAL_TIM_MspPostInit+0xf4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d11e      	bne.n	8001600 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4a34      	ldr	r2, [pc, #208]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	6153      	str	r3, [r2, #20]
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80015ec:	2309      	movs	r3, #9
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f000 fb65 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015fe:	e045      	b.n	800168c <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM16)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <HAL_TIM_MspPostInit+0xfc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11e      	bne.n	8001648 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4a22      	ldr	r2, [pc, #136]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	6153      	str	r3, [r2, #20]
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001634:	2301      	movs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f000 fb41 	bl	8001cc8 <HAL_GPIO_Init>
}
 8001646:	e021      	b.n	800168c <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM17)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_TIM_MspPostInit+0x100>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d11c      	bne.n	800168c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_TIM_MspPostInit+0xf8>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800166a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800167c:	2301      	movs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <HAL_TIM_MspPostInit+0x104>)
 8001688:	f000 fb1e 	bl	8001cc8 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40002000 	.word	0x40002000
 8001698:	40021000 	.word	0x40021000
 800169c:	40014400 	.word	0x40014400
 80016a0:	40014800 	.word	0x40014800
 80016a4:	48000400 	.word	0x48000400

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_UART_MspInit+0x7c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d128      	bne.n	800171c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_UART_MspInit+0x80>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_UART_MspInit+0x80>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_UART_MspInit+0x80>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_UART_MspInit+0x80>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_UART_MspInit+0x80>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_UART_MspInit+0x80>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016fa:	230c      	movs	r3, #12
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170a:	2307      	movs	r3, #7
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f000 fad6 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40004400 	.word	0x40004400
 8001728:	40021000 	.word	0x40021000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f950 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 8001784:	2002      	movs	r0, #2
 8001786:	f000 fc31 	bl	8001fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
	return 1;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_kill>:

int _kill(int pid, int sig)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017a8:	f003 fb98 	bl	8004edc <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2216      	movs	r2, #22
 80017b0:	601a      	str	r2, [r3, #0]
	return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_exit>:

void _exit (int status)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017c6:	f04f 31ff 	mov.w	r1, #4294967295
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffe7 	bl	800179e <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d0:	e7fe      	b.n	80017d0 <_exit+0x12>

080017d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e00a      	b.n	80017fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017e4:	f3af 8000 	nop.w
 80017e8:	4601      	mov	r1, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	60ba      	str	r2, [r7, #8]
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbf0      	blt.n	80017e4 <_read+0x12>
	}

return len;
 8001802:	687b      	ldr	r3, [r7, #4]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e009      	b.n	8001832 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fce8 	bl	80011fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbf1      	blt.n	800181e <_write+0x12>
	}
	return len;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_close>:

int _close(int file)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186c:	605a      	str	r2, [r3, #4]
	return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_isatty>:

int _isatty(int file)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
	return 0;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f003 fafe 	bl	8004edc <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20008000 	.word	0x20008000
 800190c:	00000400 	.word	0x00000400
 8001910:	2000047c 	.word	0x2000047c
 8001914:	20000498 	.word	0x20000498

08001918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <LoopForever+0x6>)
  ldr r1, =_edata
 8001942:	490e      	ldr	r1, [pc, #56]	; (800197c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <LoopForever+0xe>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001958:	4c0b      	ldr	r4, [pc, #44]	; (8001988 <LoopForever+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001966:	f7ff ffd7 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196a:	f003 fabd 	bl	8004ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800196e:	f7ff f91b 	bl	8000ba8 <main>

08001972 <LoopForever>:

LoopForever:
    b LoopForever
 8001972:	e7fe      	b.n	8001972 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001974:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001980:	08007ecc 	.word	0x08007ecc
  ldr r2, =_sbss
 8001984:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001988:	20000494 	.word	0x20000494

0800198c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_IRQHandler>
	...

08001990 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x28>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f94f 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fcc8 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f967 	bl	8001cae <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 f92f 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000480 	.word	0x20000480

08001a44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000480 	.word	0x20000480

08001a5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff3e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff8e 	bl	8001b98 <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff31 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	e154      	b.n	8001f82 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8146 	beq.w	8001f7c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d005      	beq.n	8001d08 <HAL_GPIO_Init+0x40>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d130      	bne.n	8001d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3e:	2201      	movs	r2, #1
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 0201 	and.w	r2, r3, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d017      	beq.n	8001da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d123      	bne.n	8001dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	6939      	ldr	r1, [r7, #16]
 8001df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0203 	and.w	r2, r3, #3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80a0 	beq.w	8001f7c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3c:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_GPIO_Init+0x2d8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a57      	ldr	r2, [pc, #348]	; (8001fa0 <HAL_GPIO_Init+0x2d8>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <HAL_GPIO_Init+0x2d8>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e54:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_GPIO_Init+0x2dc>)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e7e:	d019      	beq.n	8001eb4 <HAL_GPIO_Init+0x1ec>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x2e0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <HAL_GPIO_Init+0x1e8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x2e4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00d      	beq.n	8001eac <HAL_GPIO_Init+0x1e4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <HAL_GPIO_Init+0x2e8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <HAL_GPIO_Init+0x1e0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <HAL_GPIO_Init+0x2ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_GPIO_Init+0x1dc>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e008      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001ea4:	2305      	movs	r3, #5
 8001ea6:	e006      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e004      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	f002 0203 	and.w	r2, r2, #3
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	4093      	lsls	r3, r2
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec6:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_GPIO_Init+0x2dc>)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ef8:	4a2f      	ldr	r2, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f22:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f47f aea3 	bne.w	8001cd8 <HAL_GPIO_Init+0x10>
  }
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	48000400 	.word	0x48000400
 8001fac:	48000800 	.word	0x48000800
 8001fb0:	48000c00 	.word	0x48000c00
 8001fb4:	48001000 	.word	0x48001000
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f908 	bl	8001220 <HAL_GPIO_EXTI_Callback>
  }
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002022:	af00      	add	r7, sp, #0
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f001 b823 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 817d 	beq.w	8002352 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002058:	4bbc      	ldr	r3, [pc, #752]	; (800234c <HAL_RCC_OscConfig+0x330>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b04      	cmp	r3, #4
 8002062:	d00c      	beq.n	800207e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002064:	4bb9      	ldr	r3, [pc, #740]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d15c      	bne.n	800212a <HAL_RCC_OscConfig+0x10e>
 8002070:	4bb6      	ldr	r3, [pc, #728]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207c:	d155      	bne.n	800212a <HAL_RCC_OscConfig+0x10e>
 800207e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002082:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002092:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_OscConfig+0x94>
 80020aa:	4ba8      	ldr	r3, [pc, #672]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0xc0>
 80020b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020d8:	4b9c      	ldr	r3, [pc, #624]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020e8:	fa92 f2a2 	rbit	r2, r2
 80020ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	f042 0220 	orr.w	r2, r2, #32
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	f002 021f 	and.w	r2, r2, #31
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 811f 	beq.w	8002350 <HAL_RCC_OscConfig+0x334>
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 8116 	bne.w	8002350 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	f000 bfaf 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x12e>
 800213c:	4b83      	ldr	r3, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x330>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a82      	ldr	r2, [pc, #520]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	e036      	b.n	80021b8 <HAL_RCC_OscConfig+0x19c>
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x158>
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x330>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7b      	ldr	r2, [pc, #492]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b79      	ldr	r3, [pc, #484]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a78      	ldr	r2, [pc, #480]	; (800234c <HAL_RCC_OscConfig+0x330>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e021      	b.n	80021b8 <HAL_RCC_OscConfig+0x19c>
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x184>
 8002186:	4b71      	ldr	r3, [pc, #452]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a70      	ldr	r2, [pc, #448]	; (800234c <HAL_RCC_OscConfig+0x330>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6e      	ldr	r3, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6d      	ldr	r2, [pc, #436]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0x19c>
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a69      	ldr	r2, [pc, #420]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b67      	ldr	r3, [pc, #412]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a66      	ldr	r2, [pc, #408]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021b8:	4b64      	ldr	r3, [pc, #400]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f023 020f 	bic.w	r2, r3, #15
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	495f      	ldr	r1, [pc, #380]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d059      	beq.n	8002296 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fc2f 	bl	8001a44 <HAL_GetTick>
 80021e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fc2a 	bl	8001a44 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	; 0x64
 80021fa:	d902      	bls.n	8002202 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f000 bf43 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
 8002202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002206:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002216:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_RCC_OscConfig+0x218>
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e015      	b.n	8002260 <HAL_RCC_OscConfig+0x244>
 8002234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002238:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002250:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCC_OscConfig+0x330>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002264:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002268:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800226c:	fa92 f2a2 	rbit	r2, r2
 8002270:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002274:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 021f 	and.w	r2, r2, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ab      	beq.n	80021ec <HAL_RCC_OscConfig+0x1d0>
 8002294:	e05d      	b.n	8002352 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff fbd5 	bl	8001a44 <HAL_GetTick>
 800229a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fbd0 	bl	8001a44 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d902      	bls.n	80022b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f000 bee9 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
 80022b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0x2cc>
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e015      	b.n	8002314 <HAL_RCC_OscConfig+0x2f8>
 80022e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002304:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_RCC_OscConfig+0x330>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002318:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800231c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002328:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ab      	bne.n	80022a0 <HAL_RCC_OscConfig+0x284>
 8002348:	e003      	b.n	8002352 <HAL_RCC_OscConfig+0x336>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 817d 	beq.w	8002662 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002368:	4ba6      	ldr	r3, [pc, #664]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002374:	4ba3      	ldr	r3, [pc, #652]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d172      	bne.n	8002466 <HAL_RCC_OscConfig+0x44a>
 8002380:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d16c      	bne.n	8002466 <HAL_RCC_OscConfig+0x44a>
 800238c:	2302      	movs	r3, #2
 800238e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800239e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_OscConfig+0x3a0>
 80023b6:	4b93      	ldr	r3, [pc, #588]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e013      	b.n	80023e4 <HAL_RCC_OscConfig+0x3c8>
 80023bc:	2302      	movs	r3, #2
 80023be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023ce:	2302      	movs	r3, #2
 80023d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023e0:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2202      	movs	r2, #2
 80023e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023fa:	fab2 f282 	clz	r2, r2
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f042 0220 	orr.w	r2, r2, #32
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f002 021f 	and.w	r2, r2, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCC_OscConfig+0x410>
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d002      	beq.n	800242c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f000 be2e 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b75      	ldr	r3, [pc, #468]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	21f8      	movs	r1, #248	; 0xf8
 8002442:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800244a:	fa91 f1a1 	rbit	r1, r1
 800244e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002452:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002456:	fab1 f181 	clz	r1, r1
 800245a:	b2c9      	uxtb	r1, r1
 800245c:	408b      	lsls	r3, r1
 800245e:	4969      	ldr	r1, [pc, #420]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002464:	e0fd      	b.n	8002662 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8088 	beq.w	8002588 <HAL_RCC_OscConfig+0x56c>
 8002478:	2301      	movs	r3, #1
 800247a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800248a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	2301      	movs	r3, #1
 80024a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff face 	bl	8001a44 <HAL_GetTick>
 80024a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7ff fac9 	bl	8001a44 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d902      	bls.n	80024c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	f000 bde2 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4d8>
 80024ee:	4b45      	ldr	r3, [pc, #276]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x500>
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002506:	2302      	movs	r3, #2
 8002508:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800250c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2202      	movs	r2, #2
 800251e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002522:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800252e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002532:	fab2 f282 	clz	r2, r2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f042 0220 	orr.w	r2, r2, #32
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f002 021f 	and.w	r2, r2, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0af      	beq.n	80024ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	21f8      	movs	r1, #248	; 0xf8
 8002564:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800256c:	fa91 f1a1 	rbit	r1, r1
 8002570:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002574:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002578:	fab1 f181 	clz	r1, r1
 800257c:	b2c9      	uxtb	r1, r1
 800257e:	408b      	lsls	r3, r1
 8002580:	4920      	ldr	r1, [pc, #128]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
 8002586:	e06c      	b.n	8002662 <HAL_RCC_OscConfig+0x646>
 8002588:	2301      	movs	r3, #1
 800258a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800259a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	461a      	mov	r2, r3
 80025b0:	2300      	movs	r3, #0
 80025b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff fa46 	bl	8001a44 <HAL_GetTick>
 80025b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff fa41 	bl	8001a44 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d902      	bls.n	80025d4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	f000 bd5a 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
 80025d4:	2302      	movs	r3, #2
 80025d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d104      	bne.n	8002608 <HAL_RCC_OscConfig+0x5ec>
 80025fe:	4b01      	ldr	r3, [pc, #4]	; (8002604 <HAL_RCC_OscConfig+0x5e8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e015      	b.n	8002630 <HAL_RCC_OscConfig+0x614>
 8002604:	40021000 	.word	0x40021000
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002620:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800262c:	4bc8      	ldr	r3, [pc, #800]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2202      	movs	r2, #2
 8002632:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002636:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800263a:	fa92 f2a2 	rbit	r2, r2
 800263e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002642:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002646:	fab2 f282 	clz	r2, r2
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f042 0220 	orr.w	r2, r2, #32
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f002 021f 	and.w	r2, r2, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ad      	bne.n	80025be <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8110 	beq.w	8002898 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d079      	beq.n	800277c <HAL_RCC_OscConfig+0x760>
 8002688:	2301      	movs	r3, #1
 800268a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800269a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4bab      	ldr	r3, [pc, #684]	; (8002954 <HAL_RCC_OscConfig+0x938>)
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	461a      	mov	r2, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7ff f9c7 	bl	8001a44 <HAL_GetTick>
 80026b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff f9c2 	bl	8001a44 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d902      	bls.n	80026d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	f000 bcdb 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026ec:	2202      	movs	r2, #2
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002710:	2202      	movs	r2, #2
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800272a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 800272e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002738:	2102      	movs	r1, #2
 800273a:	6019      	str	r1, [r3, #0]
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fa93 f1a3 	rbit	r1, r3
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002752:	6019      	str	r1, [r3, #0]
  return result;
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0a0      	beq.n	80026bc <HAL_RCC_OscConfig+0x6a0>
 800277a:	e08d      	b.n	8002898 <HAL_RCC_OscConfig+0x87c>
 800277c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002780:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800279e:	601a      	str	r2, [r3, #0]
  return result;
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b68      	ldr	r3, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x938>)
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	461a      	mov	r2, r3
 80027ba:	2300      	movs	r3, #0
 80027bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7ff f941 	bl	8001a44 <HAL_GetTick>
 80027c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c8:	f7ff f93c 	bl	8001a44 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d902      	bls.n	80027de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	f000 bc55 	b.w	8003088 <HAL_RCC_OscConfig+0x106c>
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027e6:	2202      	movs	r2, #2
 80027e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fa93 f2a3 	rbit	r2, r3
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800280a:	2202      	movs	r2, #2
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002848:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 800284c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002856:	2102      	movs	r1, #2
 8002858:	6019      	str	r1, [r3, #0]
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f1a3 	rbit	r1, r3
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002870:	6019      	str	r1, [r3, #0]
  return result;
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d197      	bne.n	80027c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 81a1 	beq.w	8002bf0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	61d3      	str	r3, [r2, #28]
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <HAL_RCC_OscConfig+0x93c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11a      	bne.n	8002930 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_RCC_OscConfig+0x93c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_RCC_OscConfig+0x93c>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7ff f89d 	bl	8001a44 <HAL_GetTick>
 800290a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	e009      	b.n	8002924 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7ff f898 	bl	8001a44 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b64      	cmp	r3, #100	; 0x64
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e3b1      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <HAL_RCC_OscConfig+0x93c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10d      	bne.n	800295c <HAL_RCC_OscConfig+0x940>
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a02      	ldr	r2, [pc, #8]	; (8002950 <HAL_RCC_OscConfig+0x934>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	e03c      	b.n	80029c8 <HAL_RCC_OscConfig+0x9ac>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	10908120 	.word	0x10908120
 8002958:	40007000 	.word	0x40007000
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10c      	bne.n	8002986 <HAL_RCC_OscConfig+0x96a>
 800296c:	4bc1      	ldr	r3, [pc, #772]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4ac0      	ldr	r2, [pc, #768]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	4bbe      	ldr	r3, [pc, #760]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4abd      	ldr	r2, [pc, #756]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	e020      	b.n	80029c8 <HAL_RCC_OscConfig+0x9ac>
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x994>
 8002996:	4bb7      	ldr	r3, [pc, #732]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4ab6      	ldr	r2, [pc, #728]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	4bb4      	ldr	r3, [pc, #720]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4ab3      	ldr	r2, [pc, #716]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0x9ac>
 80029b0:	4bb0      	ldr	r3, [pc, #704]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4aaf      	ldr	r2, [pc, #700]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6213      	str	r3, [r2, #32]
 80029bc:	4bad      	ldr	r3, [pc, #692]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4aac      	ldr	r2, [pc, #688]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 80029c2:	f023 0304 	bic.w	r3, r3, #4
 80029c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8081 	beq.w	8002adc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7ff f833 	bl	8001a44 <HAL_GetTick>
 80029de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7ff f82e 	bl	8001a44 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e345      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a04:	2202      	movs	r2, #2
 8002a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a28:	2202      	movs	r2, #2
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a42:	601a      	str	r2, [r3, #0]
  return result;
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_OscConfig+0xa4c>
 8002a62:	4b84      	ldr	r3, [pc, #528]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	e013      	b.n	8002a90 <HAL_RCC_OscConfig+0xa74>
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a70:	2202      	movs	r2, #2
 8002a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	4b79      	ldr	r3, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a94:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a98:	2102      	movs	r1, #2
 8002a9a:	6011      	str	r1, [r2, #0]
 8002a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	fa92 f1a2 	rbit	r1, r2
 8002aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ab2:	6011      	str	r1, [r2, #0]
  return result;
 8002ab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d084      	beq.n	80029e4 <HAL_RCC_OscConfig+0x9c8>
 8002ada:	e07f      	b.n	8002bdc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe ffb2 	bl	8001a44 <HAL_GetTick>
 8002ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe ffad 	bl	8001a44 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e2c4      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b06:	2202      	movs	r2, #2
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b44:	601a      	str	r2, [r3, #0]
  return result;
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_OscConfig+0xb4e>
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	e013      	b.n	8002b92 <HAL_RCC_OscConfig+0xb76>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b72:	2202      	movs	r2, #2
 8002b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b96:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	6011      	str	r1, [r2, #0]
 8002b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	fa92 f1a2 	rbit	r1, r2
 8002bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bb4:	6011      	str	r1, [r2, #0]
  return result;
 8002bb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	fab2 f282 	clz	r2, r2
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	f002 021f 	and.w	r2, r2, #31
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d184      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bdc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8242 	beq.w	8003086 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0xc58>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	f000 8213 	beq.w	8003036 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	f040 8162 	bne.w	8002ee6 <HAL_RCC_OscConfig+0xeca>
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c50:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	461a      	mov	r2, r3
 8002c64:	2300      	movs	r3, #0
 8002c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe feec 	bl	8001a44 <HAL_GetTick>
 8002c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c70:	e00c      	b.n	8002c8c <HAL_RCC_OscConfig+0xc70>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fee4 	bl	8001a44 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1fd      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002cb0:	601a      	str	r2, [r3, #0]
  return result;
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002cba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_OscConfig+0xcba>
 8002cd0:	4bb0      	ldr	r3, [pc, #704]	; (8002f94 <HAL_RCC_OscConfig+0xf78>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	e027      	b.n	8002d26 <HAL_RCC_OscConfig+0xd0a>
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	4b9c      	ldr	r3, [pc, #624]	; (8002f94 <HAL_RCC_OscConfig+0xf78>)
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d32:	6011      	str	r1, [r2, #0]
 8002d34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d38:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	fa92 f1a2 	rbit	r1, r2
 8002d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d46:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d4a:	6011      	str	r1, [r2, #0]
  return result;
 8002d4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d50:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	fab2 f282 	clz	r2, r2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f042 0220 	orr.w	r2, r2, #32
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f002 021f 	and.w	r2, r2, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d182      	bne.n	8002c78 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d72:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <HAL_RCC_OscConfig+0xf78>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	430b      	orrs	r3, r1
 8002d94:	497f      	ldr	r1, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0xf78>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002da2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dc8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2301      	movs	r3, #1
 8002dde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fe30 	bl	8001a44 <HAL_GetTick>
 8002de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de8:	e009      	b.n	8002dfe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe fe2b 	bl	8001a44 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e144      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e22:	601a      	str	r2, [r3, #0]
  return result;
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_OscConfig+0xe2c>
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_RCC_OscConfig+0xf78>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e027      	b.n	8002e98 <HAL_RCC_OscConfig+0xe7c>
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f2a3 	rbit	r2, r3
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCC_OscConfig+0xf78>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ea0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ea4:	6011      	str	r1, [r2, #0]
 8002ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eaa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	fa92 f1a2 	rbit	r1, r2
 8002eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ebc:	6011      	str	r1, [r2, #0]
  return result;
 8002ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f002 021f 	and.w	r2, r2, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d082      	beq.n	8002dea <HAL_RCC_OscConfig+0xdce>
 8002ee4:	e0cf      	b.n	8003086 <HAL_RCC_OscConfig+0x106a>
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f0a:	601a      	str	r2, [r3, #0]
  return result;
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	461a      	mov	r2, r3
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fd8a 	bl	8001a44 <HAL_GetTick>
 8002f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe fd85 	bl	8001a44 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e09e      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f6e:	601a      	str	r2, [r3, #0]
  return result;
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d104      	bne.n	8002f98 <HAL_RCC_OscConfig+0xf7c>
 8002f8e:	4b01      	ldr	r3, [pc, #4]	; (8002f94 <HAL_RCC_OscConfig+0xf78>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	e029      	b.n	8002fe8 <HAL_RCC_OscConfig+0xfcc>
 8002f94:	40021000 	.word	0x40021000
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_OscConfig+0x1078>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ff4:	6011      	str	r1, [r2, #0]
 8002ff6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ffa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	fa92 f1a2 	rbit	r1, r2
 8003004:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003008:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800300c:	6011      	str	r1, [r2, #0]
  return result;
 800300e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003012:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	f002 021f 	and.w	r2, r2, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f202 	lsl.w	r2, r1, r2
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d180      	bne.n	8002f36 <HAL_RCC_OscConfig+0xf1a>
 8003034:	e027      	b.n	8003086 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e01e      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_OscConfig+0x1078>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003052:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003056:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	429a      	cmp	r2, r3
 8003068:	d10b      	bne.n	8003082 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800306a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800306e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800307e:	429a      	cmp	r2, r3
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b09e      	sub	sp, #120	; 0x78
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e162      	b.n	8003376 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b90      	ldr	r3, [pc, #576]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b8d      	ldr	r3, [pc, #564]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	498b      	ldr	r1, [pc, #556]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b89      	ldr	r3, [pc, #548]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e14a      	b.n	8003376 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b82      	ldr	r3, [pc, #520]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	497f      	ldr	r1, [pc, #508]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80dc 	beq.w	80032c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d13c      	bne.n	800318e <HAL_RCC_ClockConfig+0xf6>
 8003114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003118:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_RCC_ClockConfig+0xa6>
 8003138:	4b6f      	ldr	r3, [pc, #444]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	e00f      	b.n	800315e <HAL_RCC_ClockConfig+0xc6>
 800313e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003142:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	667b      	str	r3, [r7, #100]	; 0x64
 800314c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003150:	663b      	str	r3, [r7, #96]	; 0x60
 8003152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003162:	65ba      	str	r2, [r7, #88]	; 0x58
 8003164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003166:	fa92 f2a2 	rbit	r2, r2
 800316a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800316c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800316e:	fab2 f282 	clz	r2, r2
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	f042 0220 	orr.w	r2, r2, #32
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f002 021f 	and.w	r2, r2, #31
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f202 	lsl.w	r2, r1, r2
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d17b      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0f3      	b.n	8003376 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d13c      	bne.n	8003210 <HAL_RCC_ClockConfig+0x178>
 8003196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d102      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x128>
 80031ba:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	e00f      	b.n	80031e0 <HAL_RCC_ClockConfig+0x148>
 80031c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	647b      	str	r3, [r7, #68]	; 0x44
 80031ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
 80031d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031dc:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80031e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e8:	fa92 f2a2 	rbit	r2, r2
 80031ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f042 0220 	orr.w	r2, r2, #32
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f002 021f 	and.w	r2, r2, #31
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d13a      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b2      	b.n	8003376 <HAL_RCC_ClockConfig+0x2de>
 8003210:	2302      	movs	r3, #2
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_RCC_ClockConfig+0x1a0>
 8003232:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	e00d      	b.n	8003254 <HAL_RCC_ClockConfig+0x1bc>
 8003238:	2302      	movs	r3, #2
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
 8003244:	2302      	movs	r3, #2
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2202      	movs	r2, #2
 8003256:	61ba      	str	r2, [r7, #24]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	fa92 f2a2 	rbit	r2, r2
 800325e:	617a      	str	r2, [r7, #20]
  return result;
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	fab2 f282 	clz	r2, r2
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	f042 0220 	orr.w	r2, r2, #32
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f002 021f 	and.w	r2, r2, #31
 8003272:	2101      	movs	r1, #1
 8003274:	fa01 f202 	lsl.w	r2, r1, r2
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e079      	b.n	8003376 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	491a      	ldr	r1, [pc, #104]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003294:	f7fe fbd6 	bl	8001a44 <HAL_GetTick>
 8003298:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe fbd2 	bl	8001a44 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e061      	b.n	8003376 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d214      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4906      	ldr	r1, [pc, #24]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <HAL_RCC_ClockConfig+0x25c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e040      	b.n	8003376 <HAL_RCC_ClockConfig+0x2de>
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_RCC_ClockConfig+0x2e8>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	491a      	ldr	r1, [pc, #104]	; (8003380 <HAL_RCC_ClockConfig+0x2e8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_RCC_ClockConfig+0x2e8>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4912      	ldr	r1, [pc, #72]	; (8003380 <HAL_RCC_ClockConfig+0x2e8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800333a:	f000 f829 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800333e:	4601      	mov	r1, r0
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_RCC_ClockConfig+0x2e8>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003348:	22f0      	movs	r2, #240	; 0xf0
 800334a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	fa92 f2a2 	rbit	r2, r2
 8003352:	60fa      	str	r2, [r7, #12]
  return result;
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	fab2 f282 	clz	r2, r2
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	40d3      	lsrs	r3, r2
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_RCC_ClockConfig+0x2ec>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	fa21 f303 	lsr.w	r3, r1, r3
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <HAL_RCC_ClockConfig+0x2f0>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_RCC_ClockConfig+0x2f4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe fb24 	bl	80019bc <HAL_InitTick>
  
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3778      	adds	r7, #120	; 0x78
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	08007ab4 	.word	0x08007ab4
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	b08b      	sub	sp, #44	; 0x2c
 8003394:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033aa:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x30>
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x36>
 80033be:	e03c      	b.n	800343a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033c2:	623b      	str	r3, [r7, #32]
      break;
 80033c4:	e03c      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	fa92 f2a2 	rbit	r2, r2
 80033d8:	607a      	str	r2, [r7, #4]
  return result;
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	fab2 f282 	clz	r2, r2
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	40d3      	lsrs	r3, r2
 80033e4:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	220f      	movs	r2, #15
 80033f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	fa92 f2a2 	rbit	r2, r2
 80033fc:	60fa      	str	r2, [r7, #12]
  return result;
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	40d3      	lsrs	r3, r2
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_RCC_GetSysClockFreq+0xcc>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_RCC_GetSysClockFreq+0xc4>)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	e004      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <HAL_RCC_GetSysClockFreq+0xd0>)
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	623b      	str	r3, [r7, #32]
      break;
 8003438:	e002      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCC_GetSysClockFreq+0xc4>)
 800343c:	623b      	str	r3, [r7, #32]
      break;
 800343e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003440:	6a3b      	ldr	r3, [r7, #32]
}
 8003442:	4618      	mov	r0, r3
 8003444:	372c      	adds	r7, #44	; 0x2c
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	007a1200 	.word	0x007a1200
 8003458:	08007acc 	.word	0x08007acc
 800345c:	08007adc 	.word	0x08007adc
 8003460:	003d0900 	.word	0x003d0900

08003464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_RCC_GetHCLKFreq+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000

0800347c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003482:	f7ff ffef 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 8003486:	4601      	mov	r1, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003490:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003494:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	fa92 f2a2 	rbit	r2, r2
 800349c:	603a      	str	r2, [r7, #0]
  return result;
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	fab2 f282 	clz	r2, r2
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	40d3      	lsrs	r3, r2
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08007ac4 	.word	0x08007ac4

080034c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034c6:	f7ff ffcd 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 80034ca:	4601      	mov	r1, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	fa92 f2a2 	rbit	r2, r2
 80034e0:	603a      	str	r2, [r7, #0]
  return result;
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	fab2 f282 	clz	r2, r2
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	40d3      	lsrs	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	08007ac4 	.word	0x08007ac4

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b092      	sub	sp, #72	; 0x48
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80d4 	beq.w	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003528:	4b4e      	ldr	r3, [pc, #312]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10e      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	61d3      	str	r3, [r2, #28]
 8003540:	4b48      	ldr	r3, [pc, #288]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b45      	ldr	r3, [pc, #276]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b42      	ldr	r3, [pc, #264]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a41      	ldr	r2, [pc, #260]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7fe fa6b 	bl	8001a44 <HAL_GetTick>
 800356e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7fe fa67 	bl	8001a44 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b64      	cmp	r3, #100	; 0x64
 800357e:	d901      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e12d      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003590:	4b34      	ldr	r3, [pc, #208]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003598:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8084 	beq.w	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d07c      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b26      	ldr	r3, [pc, #152]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	461a      	mov	r2, r3
 80035da:	2301      	movs	r3, #1
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	461a      	mov	r2, r3
 80035fe:	2300      	movs	r3, #0
 8003600:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003606:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe fa17 	bl	8001a44 <HAL_GetTick>
 8003616:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe fa13 	bl	8001a44 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0d7      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003630:	2302      	movs	r3, #2
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	2302      	movs	r3, #2
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	61fb      	str	r3, [r7, #28]
  return result;
 8003648:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d108      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800365e:	4b01      	ldr	r3, [pc, #4]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	e00d      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	10908100 	.word	0x10908100
 8003670:	2302      	movs	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2202      	movs	r2, #2
 8003682:	613a      	str	r2, [r7, #16]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	fa92 f2a2 	rbit	r2, r2
 800368a:	60fa      	str	r2, [r7, #12]
  return result;
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f002 021f 	and.w	r2, r2, #31
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0b7      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036aa:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	494c      	ldr	r1, [pc, #304]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c4:	4b48      	ldr	r3, [pc, #288]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4a47      	ldr	r2, [pc, #284]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036dc:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f023 0203 	bic.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	493f      	ldr	r1, [pc, #252]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4938      	ldr	r1, [pc, #224]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003718:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	4930      	ldr	r1, [pc, #192]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f023 0210 	bic.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	4929      	ldr	r1, [pc, #164]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	4921      	ldr	r1, [pc, #132]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f023 0220 	bic.w	r2, r3, #32
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	491a      	ldr	r1, [pc, #104]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4912      	ldr	r1, [pc, #72]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	490b      	ldr	r1, [pc, #44]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	4903      	ldr	r1, [pc, #12]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3748      	adds	r7, #72	; 0x48
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e09d      	b.n	800393a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d108      	bne.n	8003818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380e:	d009      	beq.n	8003824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	61da      	str	r2, [r3, #28]
 8003816:	e005      	b.n	8003824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fda2 	bl	8001388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003864:	d902      	bls.n	800386c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	e002      	b.n	8003872 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800386c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003870:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800387a:	d007      	beq.n	800388c <HAL_SPI_Init+0xa0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003884:	d002      	beq.n	800388c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	ea42 0103 	orr.w	r1, r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	f003 0204 	and.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003908:	ea42 0103 	orr.w	r1, r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b08a      	sub	sp, #40	; 0x28
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x26>
 8003964:	2302      	movs	r3, #2
 8003966:	e1fb      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x41e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003970:	f7fe f868 	bl	8001a44 <HAL_GetTick>
 8003974:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800397c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800398c:	7efb      	ldrb	r3, [r7, #27]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d00e      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x6e>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003998:	d106      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x66>
 80039a2:	7efb      	ldrb	r3, [r7, #27]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d003      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039ae:	e1cd      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x80>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x80>
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039c8:	e1c0      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d003      	beq.n	80039de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2205      	movs	r2, #5
 80039da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	887a      	ldrh	r2, [r7, #2]
 80039f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	887a      	ldrh	r2, [r7, #2]
 8003a0a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a20:	d802      	bhi.n	8003a28 <HAL_SPI_TransmitReceive+0xe6>
 8003a22:	8a3b      	ldrh	r3, [r7, #16]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d908      	bls.n	8003a3a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	e007      	b.n	8003a4a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a48:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d007      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a70:	d97c      	bls.n	8003b6c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_TransmitReceive+0x13e>
 8003a7a:	8a7b      	ldrh	r3, [r7, #18]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d169      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	881a      	ldrh	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	1c9a      	adds	r2, r3, #2
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aa4:	e056      	b.n	8003b54 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d11b      	bne.n	8003aec <HAL_SPI_TransmitReceive+0x1aa>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x1aa>
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d113      	bne.n	8003aec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	881a      	ldrh	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	1c9a      	adds	r2, r3, #2
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11c      	bne.n	8003b34 <HAL_SPI_TransmitReceive+0x1f2>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	b292      	uxth	r2, r2
 8003b12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b34:	f7fd ff86 	bl	8001a44 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d807      	bhi.n	8003b54 <HAL_SPI_TransmitReceive+0x212>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d003      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b52:	e0fb      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1a3      	bne.n	8003aa6 <HAL_SPI_TransmitReceive+0x164>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d19d      	bne.n	8003aa6 <HAL_SPI_TransmitReceive+0x164>
 8003b6a:	e0df      	b.n	8003d2c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x23a>
 8003b74:	8a7b      	ldrh	r3, [r7, #18]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	f040 80cb 	bne.w	8003d12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d912      	bls.n	8003bac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b02      	subs	r3, #2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003baa:	e0b2      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	7812      	ldrb	r2, [r2, #0]
 8003bb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd2:	e09e      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d134      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x30a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d02f      	beq.n	8003c4c <HAL_SPI_TransmitReceive+0x30a>
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d12c      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d912      	bls.n	8003c22 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	881a      	ldrh	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	1c9a      	adds	r2, r3, #2
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b02      	subs	r3, #2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c20:	e012      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d148      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x3aa>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d042      	beq.n	8003cec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d923      	bls.n	8003cba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	1c9a      	adds	r2, r3, #2
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b02      	subs	r3, #2
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d81f      	bhi.n	8003ce8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	e016      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f103 020c 	add.w	r2, r3, #12
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	7812      	ldrb	r2, [r2, #0]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cec:	f7fd feaa 	bl	8001a44 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d803      	bhi.n	8003d04 <HAL_SPI_TransmitReceive+0x3c2>
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d102      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x3c8>
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d10:	e01c      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f af5b 	bne.w	8003bd4 <HAL_SPI_TransmitReceive+0x292>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f47f af54 	bne.w	8003bd4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f937 	bl	8003fa4 <SPI_EndRxTxTransaction>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	661a      	str	r2, [r3, #96]	; 0x60
 8003d48:	e000      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d78:	f7fd fe64 	bl	8001a44 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d88:	f7fd fe5c 	bl	8001a44 <HAL_GetTick>
 8003d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	015b      	lsls	r3, r3, #5
 8003d94:	0d1b      	lsrs	r3, r3, #20
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9e:	e054      	b.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d050      	beq.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da8:	f7fd fe4c 	bl	8001a44 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d902      	bls.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d13d      	bne.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd6:	d111      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d004      	beq.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d107      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d10f      	bne.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e017      	b.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d19b      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000000 	.word	0x20000000

08003e78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e8a:	f7fd fddb 	bl	8001a44 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e9a:	f7fd fdd3 	bl	8001a44 <HAL_GetTick>
 8003e9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ea8:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00da      	lsls	r2, r3, #3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	0d1b      	lsrs	r3, r3, #20
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ec0:	e060      	b.n	8003f84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ec8:	d107      	bne.n	8003eda <SPI_WaitFifoStateUntilTimeout+0x62>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d050      	beq.n	8003f84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ee2:	f7fd fdaf 	bl	8001a44 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d902      	bls.n	8003ef8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d13d      	bne.n	8003f74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f10:	d111      	bne.n	8003f36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1a:	d004      	beq.n	8003f26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d107      	bne.n	8003f36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	d10f      	bne.n	8003f60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e010      	b.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d196      	bne.n	8003ec2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff ff5b 	bl	8003e78 <SPI_WaitFifoStateUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e027      	b.n	8004028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff fec0 	bl	8003d68 <SPI_WaitFlagStateUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e014      	b.n	8004028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2200      	movs	r2, #0
 8004006:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff ff34 	bl	8003e78 <SPI_WaitFifoStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e000      	b.n	8004028 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e041      	b.n	80040c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd fa46 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 f8e2 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e041      	b.n	8004164 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f839 	bl	800416c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f000 f893 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_TIM_OC_ConfigChannel+0x1e>
 800419a:	2302      	movs	r3, #2
 800419c:	e048      	b.n	8004230 <HAL_TIM_OC_ConfigChannel+0xb0>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d839      	bhi.n	8004220 <HAL_TIM_OC_ConfigChannel+0xa0>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	08004221 	.word	0x08004221
 80041bc:	08004221 	.word	0x08004221
 80041c0:	08004221 	.word	0x08004221
 80041c4:	080041f7 	.word	0x080041f7
 80041c8:	08004221 	.word	0x08004221
 80041cc:	08004221 	.word	0x08004221
 80041d0:	08004221 	.word	0x08004221
 80041d4:	08004205 	.word	0x08004205
 80041d8:	08004221 	.word	0x08004221
 80041dc:	08004221 	.word	0x08004221
 80041e0:	08004221 	.word	0x08004221
 80041e4:	08004213 	.word	0x08004213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f8bc 	bl	800436c <TIM_OC1_SetConfig>
      break;
 80041f4:	e017      	b.n	8004226 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f92f 	bl	8004460 <TIM_OC2_SetConfig>
      break;
 8004202:	e010      	b.n	8004226 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f98a 	bl	8004524 <TIM_OC3_SetConfig>
      break;
 8004210:	e009      	b.n	8004226 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f9c1 	bl	80045a0 <TIM_OC4_SetConfig>
      break;
 800421e:	e002      	b.n	8004226 <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
      break;
 8004224:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800422e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3c      	ldr	r2, [pc, #240]	; (8004344 <TIM_Base_SetConfig+0x10c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <TIM_Base_SetConfig+0x110>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3a      	ldr	r2, [pc, #232]	; (800434c <TIM_Base_SetConfig+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a39      	ldr	r2, [pc, #228]	; (8004350 <TIM_Base_SetConfig+0x118>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d027      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <TIM_Base_SetConfig+0x10c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d023      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <TIM_Base_SetConfig+0x110>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01f      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2b      	ldr	r2, [pc, #172]	; (800434c <TIM_Base_SetConfig+0x114>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01b      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2b      	ldr	r2, [pc, #172]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d017      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <TIM_Base_SetConfig+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <TIM_Base_SetConfig+0x124>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a28      	ldr	r2, [pc, #160]	; (8004360 <TIM_Base_SetConfig+0x128>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <TIM_Base_SetConfig+0x12c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a26      	ldr	r2, [pc, #152]	; (8004368 <TIM_Base_SetConfig+0x130>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_Base_SetConfig+0x118>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <TIM_Base_SetConfig+0x128>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0xf0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <TIM_Base_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0xf0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a11      	ldr	r2, [pc, #68]	; (8004368 <TIM_Base_SetConfig+0x130>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40015c00 	.word	0x40015c00
 8004354:	40001800 	.word	0x40001800
 8004358:	40001c00 	.word	0x40001c00
 800435c:	40002000 	.word	0x40002000
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800

0800436c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f023 0201 	bic.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 0302 	bic.w	r3, r3, #2
 80043b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a24      	ldr	r2, [pc, #144]	; (8004454 <TIM_OC1_SetConfig+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <TIM_OC1_SetConfig+0x6c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a23      	ldr	r2, [pc, #140]	; (8004458 <TIM_OC1_SetConfig+0xec>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_OC1_SetConfig+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a22      	ldr	r2, [pc, #136]	; (800445c <TIM_OC1_SetConfig+0xf0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10c      	bne.n	80043f2 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0308 	bic.w	r3, r3, #8
 80043de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <TIM_OC1_SetConfig+0xe8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_OC1_SetConfig+0x9e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <TIM_OC1_SetConfig+0xec>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC1_SetConfig+0x9e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <TIM_OC1_SetConfig+0xf0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400
 800445c:	40014800 	.word	0x40014800

08004460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0210 	bic.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f023 0320 	bic.w	r3, r3, #32
 80044aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a17      	ldr	r2, [pc, #92]	; (8004518 <TIM_OC2_SetConfig+0xb8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_OC2_SetConfig+0x70>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a16      	ldr	r2, [pc, #88]	; (800451c <TIM_OC2_SetConfig+0xbc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_OC2_SetConfig+0x70>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC2_SetConfig+0xc0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10f      	bne.n	80044f0 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d6:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0303 	bic.w	r3, r3, #3
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800456c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004636:	2302      	movs	r3, #2
 8004638:	e03d      	b.n	80046b6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e040      	b.n	8004756 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fc ffdf 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2224      	movs	r2, #36	; 0x24
 80046ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8c1 	bl	8004888 <UART_SetConfig>
 8004706:	4603      	mov	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e022      	b.n	8004756 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fa2f 	bl	8004b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800472c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800473c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fab6 	bl	8004cc0 <UART_CheckIdleState>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08a      	sub	sp, #40	; 0x28
 8004762:	af02      	add	r7, sp, #8
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004772:	2b20      	cmp	r3, #32
 8004774:	f040 8082 	bne.w	800487c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_UART_Transmit+0x26>
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e07a      	b.n	800487e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UART_Transmit+0x38>
 8004792:	2302      	movs	r3, #2
 8004794:	e073      	b.n	800487e <HAL_UART_Transmit+0x120>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2221      	movs	r2, #33	; 0x21
 80047aa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ac:	f7fd f94a 	bl	8001a44 <HAL_GetTick>
 80047b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	88fa      	ldrh	r2, [r7, #6]
 80047b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	d108      	bne.n	80047de <HAL_UART_Transmit+0x80>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e003      	b.n	80047e6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047ee:	e02d      	b.n	800484c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 faa9 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e039      	b.n	800487e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	881a      	ldrh	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800481c:	b292      	uxth	r2, r2
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	3302      	adds	r3, #2
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e008      	b.n	800483a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	b292      	uxth	r2, r2
 8004832:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	3301      	adds	r3, #1
 8004838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1cb      	bne.n	80047f0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	2140      	movs	r1, #64	; 0x40
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa75 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e005      	b.n	800487e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048b6:	f023 030c 	bic.w	r3, r3, #12
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	6979      	ldr	r1, [r7, #20]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a99      	ldr	r2, [pc, #612]	; (8004b68 <UART_SetConfig+0x2e0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d120      	bne.n	800494a <UART_SetConfig+0xc2>
 8004908:	4b98      	ldr	r3, [pc, #608]	; (8004b6c <UART_SetConfig+0x2e4>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	2b03      	cmp	r3, #3
 8004912:	d817      	bhi.n	8004944 <UART_SetConfig+0xbc>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <UART_SetConfig+0x94>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	0800492d 	.word	0x0800492d
 8004920:	08004939 	.word	0x08004939
 8004924:	0800493f 	.word	0x0800493f
 8004928:	08004933 	.word	0x08004933
 800492c:	2301      	movs	r3, #1
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e061      	b.n	80049f6 <UART_SetConfig+0x16e>
 8004932:	2302      	movs	r3, #2
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e05e      	b.n	80049f6 <UART_SetConfig+0x16e>
 8004938:	2304      	movs	r3, #4
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e05b      	b.n	80049f6 <UART_SetConfig+0x16e>
 800493e:	2308      	movs	r3, #8
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e058      	b.n	80049f6 <UART_SetConfig+0x16e>
 8004944:	2310      	movs	r3, #16
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e055      	b.n	80049f6 <UART_SetConfig+0x16e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a88      	ldr	r2, [pc, #544]	; (8004b70 <UART_SetConfig+0x2e8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d124      	bne.n	800499e <UART_SetConfig+0x116>
 8004954:	4b85      	ldr	r3, [pc, #532]	; (8004b6c <UART_SetConfig+0x2e4>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800495c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004960:	d011      	beq.n	8004986 <UART_SetConfig+0xfe>
 8004962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004966:	d817      	bhi.n	8004998 <UART_SetConfig+0x110>
 8004968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800496c:	d011      	beq.n	8004992 <UART_SetConfig+0x10a>
 800496e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004972:	d811      	bhi.n	8004998 <UART_SetConfig+0x110>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <UART_SetConfig+0xf8>
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d006      	beq.n	800498c <UART_SetConfig+0x104>
 800497e:	e00b      	b.n	8004998 <UART_SetConfig+0x110>
 8004980:	2300      	movs	r3, #0
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e037      	b.n	80049f6 <UART_SetConfig+0x16e>
 8004986:	2302      	movs	r3, #2
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e034      	b.n	80049f6 <UART_SetConfig+0x16e>
 800498c:	2304      	movs	r3, #4
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e031      	b.n	80049f6 <UART_SetConfig+0x16e>
 8004992:	2308      	movs	r3, #8
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e02e      	b.n	80049f6 <UART_SetConfig+0x16e>
 8004998:	2310      	movs	r3, #16
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e02b      	b.n	80049f6 <UART_SetConfig+0x16e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a74      	ldr	r2, [pc, #464]	; (8004b74 <UART_SetConfig+0x2ec>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d124      	bne.n	80049f2 <UART_SetConfig+0x16a>
 80049a8:	4b70      	ldr	r3, [pc, #448]	; (8004b6c <UART_SetConfig+0x2e4>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80049b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049b4:	d011      	beq.n	80049da <UART_SetConfig+0x152>
 80049b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049ba:	d817      	bhi.n	80049ec <UART_SetConfig+0x164>
 80049bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049c0:	d011      	beq.n	80049e6 <UART_SetConfig+0x15e>
 80049c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049c6:	d811      	bhi.n	80049ec <UART_SetConfig+0x164>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <UART_SetConfig+0x14c>
 80049cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049d0:	d006      	beq.n	80049e0 <UART_SetConfig+0x158>
 80049d2:	e00b      	b.n	80049ec <UART_SetConfig+0x164>
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e00d      	b.n	80049f6 <UART_SetConfig+0x16e>
 80049da:	2302      	movs	r3, #2
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e00a      	b.n	80049f6 <UART_SetConfig+0x16e>
 80049e0:	2304      	movs	r3, #4
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e007      	b.n	80049f6 <UART_SetConfig+0x16e>
 80049e6:	2308      	movs	r3, #8
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e004      	b.n	80049f6 <UART_SetConfig+0x16e>
 80049ec:	2310      	movs	r3, #16
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e001      	b.n	80049f6 <UART_SetConfig+0x16e>
 80049f2:	2310      	movs	r3, #16
 80049f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fe:	d15b      	bne.n	8004ab8 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d827      	bhi.n	8004a56 <UART_SetConfig+0x1ce>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <UART_SetConfig+0x184>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a57 	.word	0x08004a57
 8004a1c:	08004a47 	.word	0x08004a47
 8004a20:	08004a57 	.word	0x08004a57
 8004a24:	08004a57 	.word	0x08004a57
 8004a28:	08004a57 	.word	0x08004a57
 8004a2c:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7fe fd24 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 8004a34:	61b8      	str	r0, [r7, #24]
        break;
 8004a36:	e013      	b.n	8004a60 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a38:	f7fe fd42 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 8004a3c:	61b8      	str	r0, [r7, #24]
        break;
 8004a3e:	e00f      	b.n	8004a60 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a40:	4b4d      	ldr	r3, [pc, #308]	; (8004b78 <UART_SetConfig+0x2f0>)
 8004a42:	61bb      	str	r3, [r7, #24]
        break;
 8004a44:	e00c      	b.n	8004a60 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a46:	f7fe fca3 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8004a4a:	61b8      	str	r0, [r7, #24]
        break;
 8004a4c:	e008      	b.n	8004a60 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a52:	61bb      	str	r3, [r7, #24]
        break;
 8004a54:	e004      	b.n	8004a60 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d074      	beq.n	8004b50 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	441a      	add	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b0f      	cmp	r3, #15
 8004a82:	d916      	bls.n	8004ab2 <UART_SetConfig+0x22a>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d212      	bcs.n	8004ab2 <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f023 030f 	bic.w	r3, r3, #15
 8004a94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	89fb      	ldrh	r3, [r7, #14]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	89fa      	ldrh	r2, [r7, #14]
 8004aae:	60da      	str	r2, [r3, #12]
 8004ab0:	e04e      	b.n	8004b50 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	77bb      	strb	r3, [r7, #30]
 8004ab6:	e04b      	b.n	8004b50 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab8:	7ffb      	ldrb	r3, [r7, #31]
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d827      	bhi.n	8004b0e <UART_SetConfig+0x286>
 8004abe:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <UART_SetConfig+0x23c>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004af1 	.word	0x08004af1
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004b0f 	.word	0x08004b0f
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004b0f 	.word	0x08004b0f
 8004ae0:	08004b0f 	.word	0x08004b0f
 8004ae4:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f7fe fcc8 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 8004aec:	61b8      	str	r0, [r7, #24]
        break;
 8004aee:	e013      	b.n	8004b18 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7fe fce6 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 8004af4:	61b8      	str	r0, [r7, #24]
        break;
 8004af6:	e00f      	b.n	8004b18 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <UART_SetConfig+0x2f0>)
 8004afa:	61bb      	str	r3, [r7, #24]
        break;
 8004afc:	e00c      	b.n	8004b18 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe fc47 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8004b02:	61b8      	str	r0, [r7, #24]
        break;
 8004b04:	e008      	b.n	8004b18 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0a:	61bb      	str	r3, [r7, #24]
        break;
 8004b0c:	e004      	b.n	8004b18 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	77bb      	strb	r3, [r7, #30]
        break;
 8004b16:	bf00      	nop
    }

    if (pclk != 0U)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	085a      	lsrs	r2, r3, #1
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	441a      	add	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d908      	bls.n	8004b4c <UART_SetConfig+0x2c4>
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d204      	bcs.n	8004b4c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	60da      	str	r2, [r3, #12]
 8004b4a:	e001      	b.n	8004b50 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40004400 	.word	0x40004400
 8004b74:	40004800 	.word	0x40004800
 8004b78:	007a1200 	.word	0x007a1200

08004b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7a:	d10a      	bne.n	8004c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cd0:	f7fc feb8 	bl	8001a44 <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d10e      	bne.n	8004d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f82d 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e023      	b.n	8004d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d10e      	bne.n	8004d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f817 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e00d      	b.n	8004d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b09c      	sub	sp, #112	; 0x70
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d62:	e0a5      	b.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	f000 80a1 	beq.w	8004eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fc fe69 	bl	8001a44 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d13e      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d98:	667b      	str	r3, [r7, #100]	; 0x64
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e6      	bne.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3308      	adds	r3, #8
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e5      	bne.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e067      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d04f      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	d147      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3308      	adds	r3, #8
 8004e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e7c:	623a      	str	r2, [r7, #32]
 8004e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69f9      	ldr	r1, [r7, #28]
 8004e82:	6a3a      	ldr	r2, [r7, #32]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e010      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	f43f af4a 	beq.w	8004d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3770      	adds	r7, #112	; 0x70
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <__errno>:
 8004edc:	4b01      	ldr	r3, [pc, #4]	; (8004ee4 <__errno+0x8>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	2000000c 	.word	0x2000000c

08004ee8 <__libc_init_array>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4d0d      	ldr	r5, [pc, #52]	; (8004f20 <__libc_init_array+0x38>)
 8004eec:	4c0d      	ldr	r4, [pc, #52]	; (8004f24 <__libc_init_array+0x3c>)
 8004eee:	1b64      	subs	r4, r4, r5
 8004ef0:	10a4      	asrs	r4, r4, #2
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	42a6      	cmp	r6, r4
 8004ef6:	d109      	bne.n	8004f0c <__libc_init_array+0x24>
 8004ef8:	4d0b      	ldr	r5, [pc, #44]	; (8004f28 <__libc_init_array+0x40>)
 8004efa:	4c0c      	ldr	r4, [pc, #48]	; (8004f2c <__libc_init_array+0x44>)
 8004efc:	f002 fdc2 	bl	8007a84 <_init>
 8004f00:	1b64      	subs	r4, r4, r5
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	2600      	movs	r6, #0
 8004f06:	42a6      	cmp	r6, r4
 8004f08:	d105      	bne.n	8004f16 <__libc_init_array+0x2e>
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f10:	4798      	blx	r3
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7ee      	b.n	8004ef4 <__libc_init_array+0xc>
 8004f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1a:	4798      	blx	r3
 8004f1c:	3601      	adds	r6, #1
 8004f1e:	e7f2      	b.n	8004f06 <__libc_init_array+0x1e>
 8004f20:	08007ec4 	.word	0x08007ec4
 8004f24:	08007ec4 	.word	0x08007ec4
 8004f28:	08007ec4 	.word	0x08007ec4
 8004f2c:	08007ec8 	.word	0x08007ec8

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <__cvt>:
 8004f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	ec55 4b10 	vmov	r4, r5, d0
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	460e      	mov	r6, r1
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	462b      	mov	r3, r5
 8004f50:	bfbb      	ittet	lt
 8004f52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f56:	461d      	movlt	r5, r3
 8004f58:	2300      	movge	r3, #0
 8004f5a:	232d      	movlt	r3, #45	; 0x2d
 8004f5c:	700b      	strb	r3, [r1, #0]
 8004f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f64:	4691      	mov	r9, r2
 8004f66:	f023 0820 	bic.w	r8, r3, #32
 8004f6a:	bfbc      	itt	lt
 8004f6c:	4622      	movlt	r2, r4
 8004f6e:	4614      	movlt	r4, r2
 8004f70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f74:	d005      	beq.n	8004f82 <__cvt+0x42>
 8004f76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f7a:	d100      	bne.n	8004f7e <__cvt+0x3e>
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	2102      	movs	r1, #2
 8004f80:	e000      	b.n	8004f84 <__cvt+0x44>
 8004f82:	2103      	movs	r1, #3
 8004f84:	ab03      	add	r3, sp, #12
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	ab02      	add	r3, sp, #8
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	ec45 4b10 	vmov	d0, r4, r5
 8004f90:	4653      	mov	r3, sl
 8004f92:	4632      	mov	r2, r6
 8004f94:	f000 fe18 	bl	8005bc8 <_dtoa_r>
 8004f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	d102      	bne.n	8004fa6 <__cvt+0x66>
 8004fa0:	f019 0f01 	tst.w	r9, #1
 8004fa4:	d022      	beq.n	8004fec <__cvt+0xac>
 8004fa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004faa:	eb07 0906 	add.w	r9, r7, r6
 8004fae:	d110      	bne.n	8004fd2 <__cvt+0x92>
 8004fb0:	783b      	ldrb	r3, [r7, #0]
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d10a      	bne.n	8004fcc <__cvt+0x8c>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f7fb fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fc2:	b918      	cbnz	r0, 8004fcc <__cvt+0x8c>
 8004fc4:	f1c6 0601 	rsb	r6, r6, #1
 8004fc8:	f8ca 6000 	str.w	r6, [sl]
 8004fcc:	f8da 3000 	ldr.w	r3, [sl]
 8004fd0:	4499      	add	r9, r3
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f7fb fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fde:	b108      	cbz	r0, 8004fe4 <__cvt+0xa4>
 8004fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fe4:	2230      	movs	r2, #48	; 0x30
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	454b      	cmp	r3, r9
 8004fea:	d307      	bcc.n	8004ffc <__cvt+0xbc>
 8004fec:	9b03      	ldr	r3, [sp, #12]
 8004fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ff0:	1bdb      	subs	r3, r3, r7
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	b004      	add	sp, #16
 8004ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffc:	1c59      	adds	r1, r3, #1
 8004ffe:	9103      	str	r1, [sp, #12]
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e7f0      	b.n	8004fe6 <__cvt+0xa6>

08005004 <__exponent>:
 8005004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005006:	4603      	mov	r3, r0
 8005008:	2900      	cmp	r1, #0
 800500a:	bfb8      	it	lt
 800500c:	4249      	neglt	r1, r1
 800500e:	f803 2b02 	strb.w	r2, [r3], #2
 8005012:	bfb4      	ite	lt
 8005014:	222d      	movlt	r2, #45	; 0x2d
 8005016:	222b      	movge	r2, #43	; 0x2b
 8005018:	2909      	cmp	r1, #9
 800501a:	7042      	strb	r2, [r0, #1]
 800501c:	dd2a      	ble.n	8005074 <__exponent+0x70>
 800501e:	f10d 0407 	add.w	r4, sp, #7
 8005022:	46a4      	mov	ip, r4
 8005024:	270a      	movs	r7, #10
 8005026:	46a6      	mov	lr, r4
 8005028:	460a      	mov	r2, r1
 800502a:	fb91 f6f7 	sdiv	r6, r1, r7
 800502e:	fb07 1516 	mls	r5, r7, r6, r1
 8005032:	3530      	adds	r5, #48	; 0x30
 8005034:	2a63      	cmp	r2, #99	; 0x63
 8005036:	f104 34ff 	add.w	r4, r4, #4294967295
 800503a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800503e:	4631      	mov	r1, r6
 8005040:	dcf1      	bgt.n	8005026 <__exponent+0x22>
 8005042:	3130      	adds	r1, #48	; 0x30
 8005044:	f1ae 0502 	sub.w	r5, lr, #2
 8005048:	f804 1c01 	strb.w	r1, [r4, #-1]
 800504c:	1c44      	adds	r4, r0, #1
 800504e:	4629      	mov	r1, r5
 8005050:	4561      	cmp	r1, ip
 8005052:	d30a      	bcc.n	800506a <__exponent+0x66>
 8005054:	f10d 0209 	add.w	r2, sp, #9
 8005058:	eba2 020e 	sub.w	r2, r2, lr
 800505c:	4565      	cmp	r5, ip
 800505e:	bf88      	it	hi
 8005060:	2200      	movhi	r2, #0
 8005062:	4413      	add	r3, r2
 8005064:	1a18      	subs	r0, r3, r0
 8005066:	b003      	add	sp, #12
 8005068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800506e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005072:	e7ed      	b.n	8005050 <__exponent+0x4c>
 8005074:	2330      	movs	r3, #48	; 0x30
 8005076:	3130      	adds	r1, #48	; 0x30
 8005078:	7083      	strb	r3, [r0, #2]
 800507a:	70c1      	strb	r1, [r0, #3]
 800507c:	1d03      	adds	r3, r0, #4
 800507e:	e7f1      	b.n	8005064 <__exponent+0x60>

08005080 <_printf_float>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	ed2d 8b02 	vpush	{d8}
 8005088:	b08d      	sub	sp, #52	; 0x34
 800508a:	460c      	mov	r4, r1
 800508c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005090:	4616      	mov	r6, r2
 8005092:	461f      	mov	r7, r3
 8005094:	4605      	mov	r5, r0
 8005096:	f001 fd3d 	bl	8006b14 <_localeconv_r>
 800509a:	f8d0 a000 	ldr.w	sl, [r0]
 800509e:	4650      	mov	r0, sl
 80050a0:	f7fb f896 	bl	80001d0 <strlen>
 80050a4:	2300      	movs	r3, #0
 80050a6:	930a      	str	r3, [sp, #40]	; 0x28
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	9305      	str	r3, [sp, #20]
 80050ac:	f8d8 3000 	ldr.w	r3, [r8]
 80050b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050b4:	3307      	adds	r3, #7
 80050b6:	f023 0307 	bic.w	r3, r3, #7
 80050ba:	f103 0208 	add.w	r2, r3, #8
 80050be:	f8c8 2000 	str.w	r2, [r8]
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80050ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050d2:	9307      	str	r3, [sp, #28]
 80050d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80050d8:	ee08 0a10 	vmov	s16, r0
 80050dc:	4b9f      	ldr	r3, [pc, #636]	; (800535c <_printf_float+0x2dc>)
 80050de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	f7fb fd21 	bl	8000b2c <__aeabi_dcmpun>
 80050ea:	bb88      	cbnz	r0, 8005150 <_printf_float+0xd0>
 80050ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050f0:	4b9a      	ldr	r3, [pc, #616]	; (800535c <_printf_float+0x2dc>)
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295
 80050f6:	f7fb fcfb 	bl	8000af0 <__aeabi_dcmple>
 80050fa:	bb48      	cbnz	r0, 8005150 <_printf_float+0xd0>
 80050fc:	2200      	movs	r2, #0
 80050fe:	2300      	movs	r3, #0
 8005100:	4640      	mov	r0, r8
 8005102:	4649      	mov	r1, r9
 8005104:	f7fb fcea 	bl	8000adc <__aeabi_dcmplt>
 8005108:	b110      	cbz	r0, 8005110 <_printf_float+0x90>
 800510a:	232d      	movs	r3, #45	; 0x2d
 800510c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005110:	4b93      	ldr	r3, [pc, #588]	; (8005360 <_printf_float+0x2e0>)
 8005112:	4894      	ldr	r0, [pc, #592]	; (8005364 <_printf_float+0x2e4>)
 8005114:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005118:	bf94      	ite	ls
 800511a:	4698      	movls	r8, r3
 800511c:	4680      	movhi	r8, r0
 800511e:	2303      	movs	r3, #3
 8005120:	6123      	str	r3, [r4, #16]
 8005122:	9b05      	ldr	r3, [sp, #20]
 8005124:	f023 0204 	bic.w	r2, r3, #4
 8005128:	6022      	str	r2, [r4, #0]
 800512a:	f04f 0900 	mov.w	r9, #0
 800512e:	9700      	str	r7, [sp, #0]
 8005130:	4633      	mov	r3, r6
 8005132:	aa0b      	add	r2, sp, #44	; 0x2c
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f000 f9d8 	bl	80054ec <_printf_common>
 800513c:	3001      	adds	r0, #1
 800513e:	f040 8090 	bne.w	8005262 <_printf_float+0x1e2>
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	b00d      	add	sp, #52	; 0x34
 8005148:	ecbd 8b02 	vpop	{d8}
 800514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	4640      	mov	r0, r8
 8005156:	4649      	mov	r1, r9
 8005158:	f7fb fce8 	bl	8000b2c <__aeabi_dcmpun>
 800515c:	b140      	cbz	r0, 8005170 <_printf_float+0xf0>
 800515e:	464b      	mov	r3, r9
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfbc      	itt	lt
 8005164:	232d      	movlt	r3, #45	; 0x2d
 8005166:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800516a:	487f      	ldr	r0, [pc, #508]	; (8005368 <_printf_float+0x2e8>)
 800516c:	4b7f      	ldr	r3, [pc, #508]	; (800536c <_printf_float+0x2ec>)
 800516e:	e7d1      	b.n	8005114 <_printf_float+0x94>
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005176:	9206      	str	r2, [sp, #24]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	d13f      	bne.n	80051fc <_printf_float+0x17c>
 800517c:	2306      	movs	r3, #6
 800517e:	6063      	str	r3, [r4, #4]
 8005180:	9b05      	ldr	r3, [sp, #20]
 8005182:	6861      	ldr	r1, [r4, #4]
 8005184:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005188:	2300      	movs	r3, #0
 800518a:	9303      	str	r3, [sp, #12]
 800518c:	ab0a      	add	r3, sp, #40	; 0x28
 800518e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005192:	ab09      	add	r3, sp, #36	; 0x24
 8005194:	ec49 8b10 	vmov	d0, r8, r9
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	6022      	str	r2, [r4, #0]
 800519c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051a0:	4628      	mov	r0, r5
 80051a2:	f7ff fecd 	bl	8004f40 <__cvt>
 80051a6:	9b06      	ldr	r3, [sp, #24]
 80051a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051aa:	2b47      	cmp	r3, #71	; 0x47
 80051ac:	4680      	mov	r8, r0
 80051ae:	d108      	bne.n	80051c2 <_printf_float+0x142>
 80051b0:	1cc8      	adds	r0, r1, #3
 80051b2:	db02      	blt.n	80051ba <_printf_float+0x13a>
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	4299      	cmp	r1, r3
 80051b8:	dd41      	ble.n	800523e <_printf_float+0x1be>
 80051ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80051be:	fa5f fb8b 	uxtb.w	fp, fp
 80051c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051c6:	d820      	bhi.n	800520a <_printf_float+0x18a>
 80051c8:	3901      	subs	r1, #1
 80051ca:	465a      	mov	r2, fp
 80051cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051d0:	9109      	str	r1, [sp, #36]	; 0x24
 80051d2:	f7ff ff17 	bl	8005004 <__exponent>
 80051d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051d8:	1813      	adds	r3, r2, r0
 80051da:	2a01      	cmp	r2, #1
 80051dc:	4681      	mov	r9, r0
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	dc02      	bgt.n	80051e8 <_printf_float+0x168>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	07d2      	lsls	r2, r2, #31
 80051e6:	d501      	bpl.n	80051ec <_printf_float+0x16c>
 80051e8:	3301      	adds	r3, #1
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d09c      	beq.n	800512e <_printf_float+0xae>
 80051f4:	232d      	movs	r3, #45	; 0x2d
 80051f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fa:	e798      	b.n	800512e <_printf_float+0xae>
 80051fc:	9a06      	ldr	r2, [sp, #24]
 80051fe:	2a47      	cmp	r2, #71	; 0x47
 8005200:	d1be      	bne.n	8005180 <_printf_float+0x100>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1bc      	bne.n	8005180 <_printf_float+0x100>
 8005206:	2301      	movs	r3, #1
 8005208:	e7b9      	b.n	800517e <_printf_float+0xfe>
 800520a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800520e:	d118      	bne.n	8005242 <_printf_float+0x1c2>
 8005210:	2900      	cmp	r1, #0
 8005212:	6863      	ldr	r3, [r4, #4]
 8005214:	dd0b      	ble.n	800522e <_printf_float+0x1ae>
 8005216:	6121      	str	r1, [r4, #16]
 8005218:	b913      	cbnz	r3, 8005220 <_printf_float+0x1a0>
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	07d0      	lsls	r0, r2, #31
 800521e:	d502      	bpl.n	8005226 <_printf_float+0x1a6>
 8005220:	3301      	adds	r3, #1
 8005222:	440b      	add	r3, r1
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	65a1      	str	r1, [r4, #88]	; 0x58
 8005228:	f04f 0900 	mov.w	r9, #0
 800522c:	e7de      	b.n	80051ec <_printf_float+0x16c>
 800522e:	b913      	cbnz	r3, 8005236 <_printf_float+0x1b6>
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	07d2      	lsls	r2, r2, #31
 8005234:	d501      	bpl.n	800523a <_printf_float+0x1ba>
 8005236:	3302      	adds	r3, #2
 8005238:	e7f4      	b.n	8005224 <_printf_float+0x1a4>
 800523a:	2301      	movs	r3, #1
 800523c:	e7f2      	b.n	8005224 <_printf_float+0x1a4>
 800523e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005244:	4299      	cmp	r1, r3
 8005246:	db05      	blt.n	8005254 <_printf_float+0x1d4>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	6121      	str	r1, [r4, #16]
 800524c:	07d8      	lsls	r0, r3, #31
 800524e:	d5ea      	bpl.n	8005226 <_printf_float+0x1a6>
 8005250:	1c4b      	adds	r3, r1, #1
 8005252:	e7e7      	b.n	8005224 <_printf_float+0x1a4>
 8005254:	2900      	cmp	r1, #0
 8005256:	bfd4      	ite	le
 8005258:	f1c1 0202 	rsble	r2, r1, #2
 800525c:	2201      	movgt	r2, #1
 800525e:	4413      	add	r3, r2
 8005260:	e7e0      	b.n	8005224 <_printf_float+0x1a4>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	055a      	lsls	r2, r3, #21
 8005266:	d407      	bmi.n	8005278 <_printf_float+0x1f8>
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	4642      	mov	r2, r8
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	d12c      	bne.n	80052d0 <_printf_float+0x250>
 8005276:	e764      	b.n	8005142 <_printf_float+0xc2>
 8005278:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800527c:	f240 80e0 	bls.w	8005440 <_printf_float+0x3c0>
 8005280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005284:	2200      	movs	r2, #0
 8005286:	2300      	movs	r3, #0
 8005288:	f7fb fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800528c:	2800      	cmp	r0, #0
 800528e:	d034      	beq.n	80052fa <_printf_float+0x27a>
 8005290:	4a37      	ldr	r2, [pc, #220]	; (8005370 <_printf_float+0x2f0>)
 8005292:	2301      	movs	r3, #1
 8005294:	4631      	mov	r1, r6
 8005296:	4628      	mov	r0, r5
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	f43f af51 	beq.w	8005142 <_printf_float+0xc2>
 80052a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052a4:	429a      	cmp	r2, r3
 80052a6:	db02      	blt.n	80052ae <_printf_float+0x22e>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	07d8      	lsls	r0, r3, #31
 80052ac:	d510      	bpl.n	80052d0 <_printf_float+0x250>
 80052ae:	ee18 3a10 	vmov	r3, s16
 80052b2:	4652      	mov	r2, sl
 80052b4:	4631      	mov	r1, r6
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	f43f af41 	beq.w	8005142 <_printf_float+0xc2>
 80052c0:	f04f 0800 	mov.w	r8, #0
 80052c4:	f104 091a 	add.w	r9, r4, #26
 80052c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ca:	3b01      	subs	r3, #1
 80052cc:	4543      	cmp	r3, r8
 80052ce:	dc09      	bgt.n	80052e4 <_printf_float+0x264>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	079b      	lsls	r3, r3, #30
 80052d4:	f100 8105 	bmi.w	80054e2 <_printf_float+0x462>
 80052d8:	68e0      	ldr	r0, [r4, #12]
 80052da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052dc:	4298      	cmp	r0, r3
 80052de:	bfb8      	it	lt
 80052e0:	4618      	movlt	r0, r3
 80052e2:	e730      	b.n	8005146 <_printf_float+0xc6>
 80052e4:	2301      	movs	r3, #1
 80052e6:	464a      	mov	r2, r9
 80052e8:	4631      	mov	r1, r6
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b8      	blx	r7
 80052ee:	3001      	adds	r0, #1
 80052f0:	f43f af27 	beq.w	8005142 <_printf_float+0xc2>
 80052f4:	f108 0801 	add.w	r8, r8, #1
 80052f8:	e7e6      	b.n	80052c8 <_printf_float+0x248>
 80052fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dc39      	bgt.n	8005374 <_printf_float+0x2f4>
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <_printf_float+0x2f0>)
 8005302:	2301      	movs	r3, #1
 8005304:	4631      	mov	r1, r6
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	f43f af19 	beq.w	8005142 <_printf_float+0xc2>
 8005310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005314:	4313      	orrs	r3, r2
 8005316:	d102      	bne.n	800531e <_printf_float+0x29e>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	07d9      	lsls	r1, r3, #31
 800531c:	d5d8      	bpl.n	80052d0 <_printf_float+0x250>
 800531e:	ee18 3a10 	vmov	r3, s16
 8005322:	4652      	mov	r2, sl
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	f43f af09 	beq.w	8005142 <_printf_float+0xc2>
 8005330:	f04f 0900 	mov.w	r9, #0
 8005334:	f104 0a1a 	add.w	sl, r4, #26
 8005338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533a:	425b      	negs	r3, r3
 800533c:	454b      	cmp	r3, r9
 800533e:	dc01      	bgt.n	8005344 <_printf_float+0x2c4>
 8005340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005342:	e792      	b.n	800526a <_printf_float+0x1ea>
 8005344:	2301      	movs	r3, #1
 8005346:	4652      	mov	r2, sl
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	f43f aef7 	beq.w	8005142 <_printf_float+0xc2>
 8005354:	f109 0901 	add.w	r9, r9, #1
 8005358:	e7ee      	b.n	8005338 <_printf_float+0x2b8>
 800535a:	bf00      	nop
 800535c:	7fefffff 	.word	0x7fefffff
 8005360:	08007af0 	.word	0x08007af0
 8005364:	08007af4 	.word	0x08007af4
 8005368:	08007afc 	.word	0x08007afc
 800536c:	08007af8 	.word	0x08007af8
 8005370:	08007b00 	.word	0x08007b00
 8005374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005376:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005378:	429a      	cmp	r2, r3
 800537a:	bfa8      	it	ge
 800537c:	461a      	movge	r2, r3
 800537e:	2a00      	cmp	r2, #0
 8005380:	4691      	mov	r9, r2
 8005382:	dc37      	bgt.n	80053f4 <_printf_float+0x374>
 8005384:	f04f 0b00 	mov.w	fp, #0
 8005388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800538c:	f104 021a 	add.w	r2, r4, #26
 8005390:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	eba3 0309 	sub.w	r3, r3, r9
 8005398:	455b      	cmp	r3, fp
 800539a:	dc33      	bgt.n	8005404 <_printf_float+0x384>
 800539c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053a0:	429a      	cmp	r2, r3
 80053a2:	db3b      	blt.n	800541c <_printf_float+0x39c>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	07da      	lsls	r2, r3, #31
 80053a8:	d438      	bmi.n	800541c <_printf_float+0x39c>
 80053aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ac:	9a05      	ldr	r2, [sp, #20]
 80053ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053b0:	1a9a      	subs	r2, r3, r2
 80053b2:	eba3 0901 	sub.w	r9, r3, r1
 80053b6:	4591      	cmp	r9, r2
 80053b8:	bfa8      	it	ge
 80053ba:	4691      	movge	r9, r2
 80053bc:	f1b9 0f00 	cmp.w	r9, #0
 80053c0:	dc35      	bgt.n	800542e <_printf_float+0x3ae>
 80053c2:	f04f 0800 	mov.w	r8, #0
 80053c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ca:	f104 0a1a 	add.w	sl, r4, #26
 80053ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	eba3 0309 	sub.w	r3, r3, r9
 80053d8:	4543      	cmp	r3, r8
 80053da:	f77f af79 	ble.w	80052d0 <_printf_float+0x250>
 80053de:	2301      	movs	r3, #1
 80053e0:	4652      	mov	r2, sl
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	f43f aeaa 	beq.w	8005142 <_printf_float+0xc2>
 80053ee:	f108 0801 	add.w	r8, r8, #1
 80053f2:	e7ec      	b.n	80053ce <_printf_float+0x34e>
 80053f4:	4613      	mov	r3, r2
 80053f6:	4631      	mov	r1, r6
 80053f8:	4642      	mov	r2, r8
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	d1c0      	bne.n	8005384 <_printf_float+0x304>
 8005402:	e69e      	b.n	8005142 <_printf_float+0xc2>
 8005404:	2301      	movs	r3, #1
 8005406:	4631      	mov	r1, r6
 8005408:	4628      	mov	r0, r5
 800540a:	9205      	str	r2, [sp, #20]
 800540c:	47b8      	blx	r7
 800540e:	3001      	adds	r0, #1
 8005410:	f43f ae97 	beq.w	8005142 <_printf_float+0xc2>
 8005414:	9a05      	ldr	r2, [sp, #20]
 8005416:	f10b 0b01 	add.w	fp, fp, #1
 800541a:	e7b9      	b.n	8005390 <_printf_float+0x310>
 800541c:	ee18 3a10 	vmov	r3, s16
 8005420:	4652      	mov	r2, sl
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	d1be      	bne.n	80053aa <_printf_float+0x32a>
 800542c:	e689      	b.n	8005142 <_printf_float+0xc2>
 800542e:	9a05      	ldr	r2, [sp, #20]
 8005430:	464b      	mov	r3, r9
 8005432:	4442      	add	r2, r8
 8005434:	4631      	mov	r1, r6
 8005436:	4628      	mov	r0, r5
 8005438:	47b8      	blx	r7
 800543a:	3001      	adds	r0, #1
 800543c:	d1c1      	bne.n	80053c2 <_printf_float+0x342>
 800543e:	e680      	b.n	8005142 <_printf_float+0xc2>
 8005440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005442:	2a01      	cmp	r2, #1
 8005444:	dc01      	bgt.n	800544a <_printf_float+0x3ca>
 8005446:	07db      	lsls	r3, r3, #31
 8005448:	d538      	bpl.n	80054bc <_printf_float+0x43c>
 800544a:	2301      	movs	r3, #1
 800544c:	4642      	mov	r2, r8
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	f43f ae74 	beq.w	8005142 <_printf_float+0xc2>
 800545a:	ee18 3a10 	vmov	r3, s16
 800545e:	4652      	mov	r2, sl
 8005460:	4631      	mov	r1, r6
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	f43f ae6b 	beq.w	8005142 <_printf_float+0xc2>
 800546c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005470:	2200      	movs	r2, #0
 8005472:	2300      	movs	r3, #0
 8005474:	f7fb fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8005478:	b9d8      	cbnz	r0, 80054b2 <_printf_float+0x432>
 800547a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800547c:	f108 0201 	add.w	r2, r8, #1
 8005480:	3b01      	subs	r3, #1
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	d10e      	bne.n	80054aa <_printf_float+0x42a>
 800548c:	e659      	b.n	8005142 <_printf_float+0xc2>
 800548e:	2301      	movs	r3, #1
 8005490:	4652      	mov	r2, sl
 8005492:	4631      	mov	r1, r6
 8005494:	4628      	mov	r0, r5
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	f43f ae52 	beq.w	8005142 <_printf_float+0xc2>
 800549e:	f108 0801 	add.w	r8, r8, #1
 80054a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a4:	3b01      	subs	r3, #1
 80054a6:	4543      	cmp	r3, r8
 80054a8:	dcf1      	bgt.n	800548e <_printf_float+0x40e>
 80054aa:	464b      	mov	r3, r9
 80054ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054b0:	e6dc      	b.n	800526c <_printf_float+0x1ec>
 80054b2:	f04f 0800 	mov.w	r8, #0
 80054b6:	f104 0a1a 	add.w	sl, r4, #26
 80054ba:	e7f2      	b.n	80054a2 <_printf_float+0x422>
 80054bc:	2301      	movs	r3, #1
 80054be:	4642      	mov	r2, r8
 80054c0:	e7df      	b.n	8005482 <_printf_float+0x402>
 80054c2:	2301      	movs	r3, #1
 80054c4:	464a      	mov	r2, r9
 80054c6:	4631      	mov	r1, r6
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b8      	blx	r7
 80054cc:	3001      	adds	r0, #1
 80054ce:	f43f ae38 	beq.w	8005142 <_printf_float+0xc2>
 80054d2:	f108 0801 	add.w	r8, r8, #1
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054da:	1a5b      	subs	r3, r3, r1
 80054dc:	4543      	cmp	r3, r8
 80054de:	dcf0      	bgt.n	80054c2 <_printf_float+0x442>
 80054e0:	e6fa      	b.n	80052d8 <_printf_float+0x258>
 80054e2:	f04f 0800 	mov.w	r8, #0
 80054e6:	f104 0919 	add.w	r9, r4, #25
 80054ea:	e7f4      	b.n	80054d6 <_printf_float+0x456>

080054ec <_printf_common>:
 80054ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	4616      	mov	r6, r2
 80054f2:	4699      	mov	r9, r3
 80054f4:	688a      	ldr	r2, [r1, #8]
 80054f6:	690b      	ldr	r3, [r1, #16]
 80054f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054fc:	4293      	cmp	r3, r2
 80054fe:	bfb8      	it	lt
 8005500:	4613      	movlt	r3, r2
 8005502:	6033      	str	r3, [r6, #0]
 8005504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005508:	4607      	mov	r7, r0
 800550a:	460c      	mov	r4, r1
 800550c:	b10a      	cbz	r2, 8005512 <_printf_common+0x26>
 800550e:	3301      	adds	r3, #1
 8005510:	6033      	str	r3, [r6, #0]
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	0699      	lsls	r1, r3, #26
 8005516:	bf42      	ittt	mi
 8005518:	6833      	ldrmi	r3, [r6, #0]
 800551a:	3302      	addmi	r3, #2
 800551c:	6033      	strmi	r3, [r6, #0]
 800551e:	6825      	ldr	r5, [r4, #0]
 8005520:	f015 0506 	ands.w	r5, r5, #6
 8005524:	d106      	bne.n	8005534 <_printf_common+0x48>
 8005526:	f104 0a19 	add.w	sl, r4, #25
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	6832      	ldr	r2, [r6, #0]
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	42ab      	cmp	r3, r5
 8005532:	dc26      	bgt.n	8005582 <_printf_common+0x96>
 8005534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005538:	1e13      	subs	r3, r2, #0
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	bf18      	it	ne
 800553e:	2301      	movne	r3, #1
 8005540:	0692      	lsls	r2, r2, #26
 8005542:	d42b      	bmi.n	800559c <_printf_common+0xb0>
 8005544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005548:	4649      	mov	r1, r9
 800554a:	4638      	mov	r0, r7
 800554c:	47c0      	blx	r8
 800554e:	3001      	adds	r0, #1
 8005550:	d01e      	beq.n	8005590 <_printf_common+0xa4>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	68e5      	ldr	r5, [r4, #12]
 8005556:	6832      	ldr	r2, [r6, #0]
 8005558:	f003 0306 	and.w	r3, r3, #6
 800555c:	2b04      	cmp	r3, #4
 800555e:	bf08      	it	eq
 8005560:	1aad      	subeq	r5, r5, r2
 8005562:	68a3      	ldr	r3, [r4, #8]
 8005564:	6922      	ldr	r2, [r4, #16]
 8005566:	bf0c      	ite	eq
 8005568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800556c:	2500      	movne	r5, #0
 800556e:	4293      	cmp	r3, r2
 8005570:	bfc4      	itt	gt
 8005572:	1a9b      	subgt	r3, r3, r2
 8005574:	18ed      	addgt	r5, r5, r3
 8005576:	2600      	movs	r6, #0
 8005578:	341a      	adds	r4, #26
 800557a:	42b5      	cmp	r5, r6
 800557c:	d11a      	bne.n	80055b4 <_printf_common+0xc8>
 800557e:	2000      	movs	r0, #0
 8005580:	e008      	b.n	8005594 <_printf_common+0xa8>
 8005582:	2301      	movs	r3, #1
 8005584:	4652      	mov	r2, sl
 8005586:	4649      	mov	r1, r9
 8005588:	4638      	mov	r0, r7
 800558a:	47c0      	blx	r8
 800558c:	3001      	adds	r0, #1
 800558e:	d103      	bne.n	8005598 <_printf_common+0xac>
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005598:	3501      	adds	r5, #1
 800559a:	e7c6      	b.n	800552a <_printf_common+0x3e>
 800559c:	18e1      	adds	r1, r4, r3
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	2030      	movs	r0, #48	; 0x30
 80055a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055a6:	4422      	add	r2, r4
 80055a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055b0:	3302      	adds	r3, #2
 80055b2:	e7c7      	b.n	8005544 <_printf_common+0x58>
 80055b4:	2301      	movs	r3, #1
 80055b6:	4622      	mov	r2, r4
 80055b8:	4649      	mov	r1, r9
 80055ba:	4638      	mov	r0, r7
 80055bc:	47c0      	blx	r8
 80055be:	3001      	adds	r0, #1
 80055c0:	d0e6      	beq.n	8005590 <_printf_common+0xa4>
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7d9      	b.n	800557a <_printf_common+0x8e>
	...

080055c8 <_printf_i>:
 80055c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	7e0f      	ldrb	r7, [r1, #24]
 80055ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055d0:	2f78      	cmp	r7, #120	; 0x78
 80055d2:	4691      	mov	r9, r2
 80055d4:	4680      	mov	r8, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	469a      	mov	sl, r3
 80055da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055de:	d807      	bhi.n	80055f0 <_printf_i+0x28>
 80055e0:	2f62      	cmp	r7, #98	; 0x62
 80055e2:	d80a      	bhi.n	80055fa <_printf_i+0x32>
 80055e4:	2f00      	cmp	r7, #0
 80055e6:	f000 80d8 	beq.w	800579a <_printf_i+0x1d2>
 80055ea:	2f58      	cmp	r7, #88	; 0x58
 80055ec:	f000 80a3 	beq.w	8005736 <_printf_i+0x16e>
 80055f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055f8:	e03a      	b.n	8005670 <_printf_i+0xa8>
 80055fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055fe:	2b15      	cmp	r3, #21
 8005600:	d8f6      	bhi.n	80055f0 <_printf_i+0x28>
 8005602:	a101      	add	r1, pc, #4	; (adr r1, 8005608 <_printf_i+0x40>)
 8005604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005608:	08005661 	.word	0x08005661
 800560c:	08005675 	.word	0x08005675
 8005610:	080055f1 	.word	0x080055f1
 8005614:	080055f1 	.word	0x080055f1
 8005618:	080055f1 	.word	0x080055f1
 800561c:	080055f1 	.word	0x080055f1
 8005620:	08005675 	.word	0x08005675
 8005624:	080055f1 	.word	0x080055f1
 8005628:	080055f1 	.word	0x080055f1
 800562c:	080055f1 	.word	0x080055f1
 8005630:	080055f1 	.word	0x080055f1
 8005634:	08005781 	.word	0x08005781
 8005638:	080056a5 	.word	0x080056a5
 800563c:	08005763 	.word	0x08005763
 8005640:	080055f1 	.word	0x080055f1
 8005644:	080055f1 	.word	0x080055f1
 8005648:	080057a3 	.word	0x080057a3
 800564c:	080055f1 	.word	0x080055f1
 8005650:	080056a5 	.word	0x080056a5
 8005654:	080055f1 	.word	0x080055f1
 8005658:	080055f1 	.word	0x080055f1
 800565c:	0800576b 	.word	0x0800576b
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	1d1a      	adds	r2, r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	602a      	str	r2, [r5, #0]
 8005668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800566c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005670:	2301      	movs	r3, #1
 8005672:	e0a3      	b.n	80057bc <_printf_i+0x1f4>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	6829      	ldr	r1, [r5, #0]
 8005678:	0606      	lsls	r6, r0, #24
 800567a:	f101 0304 	add.w	r3, r1, #4
 800567e:	d50a      	bpl.n	8005696 <_printf_i+0xce>
 8005680:	680e      	ldr	r6, [r1, #0]
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	2e00      	cmp	r6, #0
 8005686:	da03      	bge.n	8005690 <_printf_i+0xc8>
 8005688:	232d      	movs	r3, #45	; 0x2d
 800568a:	4276      	negs	r6, r6
 800568c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005690:	485e      	ldr	r0, [pc, #376]	; (800580c <_printf_i+0x244>)
 8005692:	230a      	movs	r3, #10
 8005694:	e019      	b.n	80056ca <_printf_i+0x102>
 8005696:	680e      	ldr	r6, [r1, #0]
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800569e:	bf18      	it	ne
 80056a0:	b236      	sxthne	r6, r6
 80056a2:	e7ef      	b.n	8005684 <_printf_i+0xbc>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	1d19      	adds	r1, r3, #4
 80056aa:	6029      	str	r1, [r5, #0]
 80056ac:	0601      	lsls	r1, r0, #24
 80056ae:	d501      	bpl.n	80056b4 <_printf_i+0xec>
 80056b0:	681e      	ldr	r6, [r3, #0]
 80056b2:	e002      	b.n	80056ba <_printf_i+0xf2>
 80056b4:	0646      	lsls	r6, r0, #25
 80056b6:	d5fb      	bpl.n	80056b0 <_printf_i+0xe8>
 80056b8:	881e      	ldrh	r6, [r3, #0]
 80056ba:	4854      	ldr	r0, [pc, #336]	; (800580c <_printf_i+0x244>)
 80056bc:	2f6f      	cmp	r7, #111	; 0x6f
 80056be:	bf0c      	ite	eq
 80056c0:	2308      	moveq	r3, #8
 80056c2:	230a      	movne	r3, #10
 80056c4:	2100      	movs	r1, #0
 80056c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ca:	6865      	ldr	r5, [r4, #4]
 80056cc:	60a5      	str	r5, [r4, #8]
 80056ce:	2d00      	cmp	r5, #0
 80056d0:	bfa2      	ittt	ge
 80056d2:	6821      	ldrge	r1, [r4, #0]
 80056d4:	f021 0104 	bicge.w	r1, r1, #4
 80056d8:	6021      	strge	r1, [r4, #0]
 80056da:	b90e      	cbnz	r6, 80056e0 <_printf_i+0x118>
 80056dc:	2d00      	cmp	r5, #0
 80056de:	d04d      	beq.n	800577c <_printf_i+0x1b4>
 80056e0:	4615      	mov	r5, r2
 80056e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056e6:	fb03 6711 	mls	r7, r3, r1, r6
 80056ea:	5dc7      	ldrb	r7, [r0, r7]
 80056ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056f0:	4637      	mov	r7, r6
 80056f2:	42bb      	cmp	r3, r7
 80056f4:	460e      	mov	r6, r1
 80056f6:	d9f4      	bls.n	80056e2 <_printf_i+0x11a>
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d10b      	bne.n	8005714 <_printf_i+0x14c>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	07de      	lsls	r6, r3, #31
 8005700:	d508      	bpl.n	8005714 <_printf_i+0x14c>
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	6861      	ldr	r1, [r4, #4]
 8005706:	4299      	cmp	r1, r3
 8005708:	bfde      	ittt	le
 800570a:	2330      	movle	r3, #48	; 0x30
 800570c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005714:	1b52      	subs	r2, r2, r5
 8005716:	6122      	str	r2, [r4, #16]
 8005718:	f8cd a000 	str.w	sl, [sp]
 800571c:	464b      	mov	r3, r9
 800571e:	aa03      	add	r2, sp, #12
 8005720:	4621      	mov	r1, r4
 8005722:	4640      	mov	r0, r8
 8005724:	f7ff fee2 	bl	80054ec <_printf_common>
 8005728:	3001      	adds	r0, #1
 800572a:	d14c      	bne.n	80057c6 <_printf_i+0x1fe>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	b004      	add	sp, #16
 8005732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005736:	4835      	ldr	r0, [pc, #212]	; (800580c <_printf_i+0x244>)
 8005738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800573c:	6829      	ldr	r1, [r5, #0]
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	f851 6b04 	ldr.w	r6, [r1], #4
 8005744:	6029      	str	r1, [r5, #0]
 8005746:	061d      	lsls	r5, r3, #24
 8005748:	d514      	bpl.n	8005774 <_printf_i+0x1ac>
 800574a:	07df      	lsls	r7, r3, #31
 800574c:	bf44      	itt	mi
 800574e:	f043 0320 	orrmi.w	r3, r3, #32
 8005752:	6023      	strmi	r3, [r4, #0]
 8005754:	b91e      	cbnz	r6, 800575e <_printf_i+0x196>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	f023 0320 	bic.w	r3, r3, #32
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	2310      	movs	r3, #16
 8005760:	e7b0      	b.n	80056c4 <_printf_i+0xfc>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	f043 0320 	orr.w	r3, r3, #32
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	2378      	movs	r3, #120	; 0x78
 800576c:	4828      	ldr	r0, [pc, #160]	; (8005810 <_printf_i+0x248>)
 800576e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005772:	e7e3      	b.n	800573c <_printf_i+0x174>
 8005774:	0659      	lsls	r1, r3, #25
 8005776:	bf48      	it	mi
 8005778:	b2b6      	uxthmi	r6, r6
 800577a:	e7e6      	b.n	800574a <_printf_i+0x182>
 800577c:	4615      	mov	r5, r2
 800577e:	e7bb      	b.n	80056f8 <_printf_i+0x130>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	6826      	ldr	r6, [r4, #0]
 8005784:	6961      	ldr	r1, [r4, #20]
 8005786:	1d18      	adds	r0, r3, #4
 8005788:	6028      	str	r0, [r5, #0]
 800578a:	0635      	lsls	r5, r6, #24
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	d501      	bpl.n	8005794 <_printf_i+0x1cc>
 8005790:	6019      	str	r1, [r3, #0]
 8005792:	e002      	b.n	800579a <_printf_i+0x1d2>
 8005794:	0670      	lsls	r0, r6, #25
 8005796:	d5fb      	bpl.n	8005790 <_printf_i+0x1c8>
 8005798:	8019      	strh	r1, [r3, #0]
 800579a:	2300      	movs	r3, #0
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	4615      	mov	r5, r2
 80057a0:	e7ba      	b.n	8005718 <_printf_i+0x150>
 80057a2:	682b      	ldr	r3, [r5, #0]
 80057a4:	1d1a      	adds	r2, r3, #4
 80057a6:	602a      	str	r2, [r5, #0]
 80057a8:	681d      	ldr	r5, [r3, #0]
 80057aa:	6862      	ldr	r2, [r4, #4]
 80057ac:	2100      	movs	r1, #0
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7fa fd16 	bl	80001e0 <memchr>
 80057b4:	b108      	cbz	r0, 80057ba <_printf_i+0x1f2>
 80057b6:	1b40      	subs	r0, r0, r5
 80057b8:	6060      	str	r0, [r4, #4]
 80057ba:	6863      	ldr	r3, [r4, #4]
 80057bc:	6123      	str	r3, [r4, #16]
 80057be:	2300      	movs	r3, #0
 80057c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c4:	e7a8      	b.n	8005718 <_printf_i+0x150>
 80057c6:	6923      	ldr	r3, [r4, #16]
 80057c8:	462a      	mov	r2, r5
 80057ca:	4649      	mov	r1, r9
 80057cc:	4640      	mov	r0, r8
 80057ce:	47d0      	blx	sl
 80057d0:	3001      	adds	r0, #1
 80057d2:	d0ab      	beq.n	800572c <_printf_i+0x164>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	079b      	lsls	r3, r3, #30
 80057d8:	d413      	bmi.n	8005802 <_printf_i+0x23a>
 80057da:	68e0      	ldr	r0, [r4, #12]
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	4298      	cmp	r0, r3
 80057e0:	bfb8      	it	lt
 80057e2:	4618      	movlt	r0, r3
 80057e4:	e7a4      	b.n	8005730 <_printf_i+0x168>
 80057e6:	2301      	movs	r3, #1
 80057e8:	4632      	mov	r2, r6
 80057ea:	4649      	mov	r1, r9
 80057ec:	4640      	mov	r0, r8
 80057ee:	47d0      	blx	sl
 80057f0:	3001      	adds	r0, #1
 80057f2:	d09b      	beq.n	800572c <_printf_i+0x164>
 80057f4:	3501      	adds	r5, #1
 80057f6:	68e3      	ldr	r3, [r4, #12]
 80057f8:	9903      	ldr	r1, [sp, #12]
 80057fa:	1a5b      	subs	r3, r3, r1
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	dcf2      	bgt.n	80057e6 <_printf_i+0x21e>
 8005800:	e7eb      	b.n	80057da <_printf_i+0x212>
 8005802:	2500      	movs	r5, #0
 8005804:	f104 0619 	add.w	r6, r4, #25
 8005808:	e7f5      	b.n	80057f6 <_printf_i+0x22e>
 800580a:	bf00      	nop
 800580c:	08007b02 	.word	0x08007b02
 8005810:	08007b13 	.word	0x08007b13

08005814 <iprintf>:
 8005814:	b40f      	push	{r0, r1, r2, r3}
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <iprintf+0x2c>)
 8005818:	b513      	push	{r0, r1, r4, lr}
 800581a:	681c      	ldr	r4, [r3, #0]
 800581c:	b124      	cbz	r4, 8005828 <iprintf+0x14>
 800581e:	69a3      	ldr	r3, [r4, #24]
 8005820:	b913      	cbnz	r3, 8005828 <iprintf+0x14>
 8005822:	4620      	mov	r0, r4
 8005824:	f001 f8d8 	bl	80069d8 <__sinit>
 8005828:	ab05      	add	r3, sp, #20
 800582a:	9a04      	ldr	r2, [sp, #16]
 800582c:	68a1      	ldr	r1, [r4, #8]
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	4620      	mov	r0, r4
 8005832:	f001 fe95 	bl	8007560 <_vfiprintf_r>
 8005836:	b002      	add	sp, #8
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	b004      	add	sp, #16
 800583e:	4770      	bx	lr
 8005840:	2000000c 	.word	0x2000000c

08005844 <_puts_r>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	460e      	mov	r6, r1
 8005848:	4605      	mov	r5, r0
 800584a:	b118      	cbz	r0, 8005854 <_puts_r+0x10>
 800584c:	6983      	ldr	r3, [r0, #24]
 800584e:	b90b      	cbnz	r3, 8005854 <_puts_r+0x10>
 8005850:	f001 f8c2 	bl	80069d8 <__sinit>
 8005854:	69ab      	ldr	r3, [r5, #24]
 8005856:	68ac      	ldr	r4, [r5, #8]
 8005858:	b913      	cbnz	r3, 8005860 <_puts_r+0x1c>
 800585a:	4628      	mov	r0, r5
 800585c:	f001 f8bc 	bl	80069d8 <__sinit>
 8005860:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <_puts_r+0xd0>)
 8005862:	429c      	cmp	r4, r3
 8005864:	d120      	bne.n	80058a8 <_puts_r+0x64>
 8005866:	686c      	ldr	r4, [r5, #4]
 8005868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800586a:	07db      	lsls	r3, r3, #31
 800586c:	d405      	bmi.n	800587a <_puts_r+0x36>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	0598      	lsls	r0, r3, #22
 8005872:	d402      	bmi.n	800587a <_puts_r+0x36>
 8005874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005876:	f001 f952 	bl	8006b1e <__retarget_lock_acquire_recursive>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	0719      	lsls	r1, r3, #28
 800587e:	d51d      	bpl.n	80058bc <_puts_r+0x78>
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	b1db      	cbz	r3, 80058bc <_puts_r+0x78>
 8005884:	3e01      	subs	r6, #1
 8005886:	68a3      	ldr	r3, [r4, #8]
 8005888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800588c:	3b01      	subs	r3, #1
 800588e:	60a3      	str	r3, [r4, #8]
 8005890:	bb39      	cbnz	r1, 80058e2 <_puts_r+0x9e>
 8005892:	2b00      	cmp	r3, #0
 8005894:	da38      	bge.n	8005908 <_puts_r+0xc4>
 8005896:	4622      	mov	r2, r4
 8005898:	210a      	movs	r1, #10
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f848 	bl	8005930 <__swbuf_r>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d011      	beq.n	80058c8 <_puts_r+0x84>
 80058a4:	250a      	movs	r5, #10
 80058a6:	e011      	b.n	80058cc <_puts_r+0x88>
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <_puts_r+0xd4>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d101      	bne.n	80058b2 <_puts_r+0x6e>
 80058ae:	68ac      	ldr	r4, [r5, #8]
 80058b0:	e7da      	b.n	8005868 <_puts_r+0x24>
 80058b2:	4b1a      	ldr	r3, [pc, #104]	; (800591c <_puts_r+0xd8>)
 80058b4:	429c      	cmp	r4, r3
 80058b6:	bf08      	it	eq
 80058b8:	68ec      	ldreq	r4, [r5, #12]
 80058ba:	e7d5      	b.n	8005868 <_puts_r+0x24>
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f888 	bl	80059d4 <__swsetup_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0dd      	beq.n	8005884 <_puts_r+0x40>
 80058c8:	f04f 35ff 	mov.w	r5, #4294967295
 80058cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ce:	07da      	lsls	r2, r3, #31
 80058d0:	d405      	bmi.n	80058de <_puts_r+0x9a>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	059b      	lsls	r3, r3, #22
 80058d6:	d402      	bmi.n	80058de <_puts_r+0x9a>
 80058d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058da:	f001 f921 	bl	8006b20 <__retarget_lock_release_recursive>
 80058de:	4628      	mov	r0, r5
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da04      	bge.n	80058f0 <_puts_r+0xac>
 80058e6:	69a2      	ldr	r2, [r4, #24]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	dc06      	bgt.n	80058fa <_puts_r+0xb6>
 80058ec:	290a      	cmp	r1, #10
 80058ee:	d004      	beq.n	80058fa <_puts_r+0xb6>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	7019      	strb	r1, [r3, #0]
 80058f8:	e7c5      	b.n	8005886 <_puts_r+0x42>
 80058fa:	4622      	mov	r2, r4
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 f817 	bl	8005930 <__swbuf_r>
 8005902:	3001      	adds	r0, #1
 8005904:	d1bf      	bne.n	8005886 <_puts_r+0x42>
 8005906:	e7df      	b.n	80058c8 <_puts_r+0x84>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	250a      	movs	r5, #10
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	701d      	strb	r5, [r3, #0]
 8005912:	e7db      	b.n	80058cc <_puts_r+0x88>
 8005914:	08007bd4 	.word	0x08007bd4
 8005918:	08007bf4 	.word	0x08007bf4
 800591c:	08007bb4 	.word	0x08007bb4

08005920 <puts>:
 8005920:	4b02      	ldr	r3, [pc, #8]	; (800592c <puts+0xc>)
 8005922:	4601      	mov	r1, r0
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	f7ff bf8d 	b.w	8005844 <_puts_r>
 800592a:	bf00      	nop
 800592c:	2000000c 	.word	0x2000000c

08005930 <__swbuf_r>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	460e      	mov	r6, r1
 8005934:	4614      	mov	r4, r2
 8005936:	4605      	mov	r5, r0
 8005938:	b118      	cbz	r0, 8005942 <__swbuf_r+0x12>
 800593a:	6983      	ldr	r3, [r0, #24]
 800593c:	b90b      	cbnz	r3, 8005942 <__swbuf_r+0x12>
 800593e:	f001 f84b 	bl	80069d8 <__sinit>
 8005942:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <__swbuf_r+0x98>)
 8005944:	429c      	cmp	r4, r3
 8005946:	d12b      	bne.n	80059a0 <__swbuf_r+0x70>
 8005948:	686c      	ldr	r4, [r5, #4]
 800594a:	69a3      	ldr	r3, [r4, #24]
 800594c:	60a3      	str	r3, [r4, #8]
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	071a      	lsls	r2, r3, #28
 8005952:	d52f      	bpl.n	80059b4 <__swbuf_r+0x84>
 8005954:	6923      	ldr	r3, [r4, #16]
 8005956:	b36b      	cbz	r3, 80059b4 <__swbuf_r+0x84>
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	6820      	ldr	r0, [r4, #0]
 800595c:	1ac0      	subs	r0, r0, r3
 800595e:	6963      	ldr	r3, [r4, #20]
 8005960:	b2f6      	uxtb	r6, r6
 8005962:	4283      	cmp	r3, r0
 8005964:	4637      	mov	r7, r6
 8005966:	dc04      	bgt.n	8005972 <__swbuf_r+0x42>
 8005968:	4621      	mov	r1, r4
 800596a:	4628      	mov	r0, r5
 800596c:	f000 ffa0 	bl	80068b0 <_fflush_r>
 8005970:	bb30      	cbnz	r0, 80059c0 <__swbuf_r+0x90>
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	3b01      	subs	r3, #1
 8005976:	60a3      	str	r3, [r4, #8]
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	6022      	str	r2, [r4, #0]
 800597e:	701e      	strb	r6, [r3, #0]
 8005980:	6963      	ldr	r3, [r4, #20]
 8005982:	3001      	adds	r0, #1
 8005984:	4283      	cmp	r3, r0
 8005986:	d004      	beq.n	8005992 <__swbuf_r+0x62>
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	07db      	lsls	r3, r3, #31
 800598c:	d506      	bpl.n	800599c <__swbuf_r+0x6c>
 800598e:	2e0a      	cmp	r6, #10
 8005990:	d104      	bne.n	800599c <__swbuf_r+0x6c>
 8005992:	4621      	mov	r1, r4
 8005994:	4628      	mov	r0, r5
 8005996:	f000 ff8b 	bl	80068b0 <_fflush_r>
 800599a:	b988      	cbnz	r0, 80059c0 <__swbuf_r+0x90>
 800599c:	4638      	mov	r0, r7
 800599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <__swbuf_r+0x9c>)
 80059a2:	429c      	cmp	r4, r3
 80059a4:	d101      	bne.n	80059aa <__swbuf_r+0x7a>
 80059a6:	68ac      	ldr	r4, [r5, #8]
 80059a8:	e7cf      	b.n	800594a <__swbuf_r+0x1a>
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <__swbuf_r+0xa0>)
 80059ac:	429c      	cmp	r4, r3
 80059ae:	bf08      	it	eq
 80059b0:	68ec      	ldreq	r4, [r5, #12]
 80059b2:	e7ca      	b.n	800594a <__swbuf_r+0x1a>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f80c 	bl	80059d4 <__swsetup_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0cb      	beq.n	8005958 <__swbuf_r+0x28>
 80059c0:	f04f 37ff 	mov.w	r7, #4294967295
 80059c4:	e7ea      	b.n	800599c <__swbuf_r+0x6c>
 80059c6:	bf00      	nop
 80059c8:	08007bd4 	.word	0x08007bd4
 80059cc:	08007bf4 	.word	0x08007bf4
 80059d0:	08007bb4 	.word	0x08007bb4

080059d4 <__swsetup_r>:
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <__swsetup_r+0xcc>)
 80059d6:	b570      	push	{r4, r5, r6, lr}
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	4606      	mov	r6, r0
 80059dc:	460c      	mov	r4, r1
 80059de:	b125      	cbz	r5, 80059ea <__swsetup_r+0x16>
 80059e0:	69ab      	ldr	r3, [r5, #24]
 80059e2:	b913      	cbnz	r3, 80059ea <__swsetup_r+0x16>
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 fff7 	bl	80069d8 <__sinit>
 80059ea:	4b2e      	ldr	r3, [pc, #184]	; (8005aa4 <__swsetup_r+0xd0>)
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d10f      	bne.n	8005a10 <__swsetup_r+0x3c>
 80059f0:	686c      	ldr	r4, [r5, #4]
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059f8:	0719      	lsls	r1, r3, #28
 80059fa:	d42c      	bmi.n	8005a56 <__swsetup_r+0x82>
 80059fc:	06dd      	lsls	r5, r3, #27
 80059fe:	d411      	bmi.n	8005a24 <__swsetup_r+0x50>
 8005a00:	2309      	movs	r3, #9
 8005a02:	6033      	str	r3, [r6, #0]
 8005a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a08:	81a3      	strh	r3, [r4, #12]
 8005a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0e:	e03e      	b.n	8005a8e <__swsetup_r+0xba>
 8005a10:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <__swsetup_r+0xd4>)
 8005a12:	429c      	cmp	r4, r3
 8005a14:	d101      	bne.n	8005a1a <__swsetup_r+0x46>
 8005a16:	68ac      	ldr	r4, [r5, #8]
 8005a18:	e7eb      	b.n	80059f2 <__swsetup_r+0x1e>
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <__swsetup_r+0xd8>)
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	bf08      	it	eq
 8005a20:	68ec      	ldreq	r4, [r5, #12]
 8005a22:	e7e6      	b.n	80059f2 <__swsetup_r+0x1e>
 8005a24:	0758      	lsls	r0, r3, #29
 8005a26:	d512      	bpl.n	8005a4e <__swsetup_r+0x7a>
 8005a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a2a:	b141      	cbz	r1, 8005a3e <__swsetup_r+0x6a>
 8005a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a30:	4299      	cmp	r1, r3
 8005a32:	d002      	beq.n	8005a3a <__swsetup_r+0x66>
 8005a34:	4630      	mov	r0, r6
 8005a36:	f001 fc89 	bl	800734c <_free_r>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	2300      	movs	r3, #0
 8005a48:	6063      	str	r3, [r4, #4]
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f043 0308 	orr.w	r3, r3, #8
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	b94b      	cbnz	r3, 8005a6e <__swsetup_r+0x9a>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d003      	beq.n	8005a6e <__swsetup_r+0x9a>
 8005a66:	4621      	mov	r1, r4
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f001 f87f 	bl	8006b6c <__smakebuf_r>
 8005a6e:	89a0      	ldrh	r0, [r4, #12]
 8005a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a74:	f010 0301 	ands.w	r3, r0, #1
 8005a78:	d00a      	beq.n	8005a90 <__swsetup_r+0xbc>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60a3      	str	r3, [r4, #8]
 8005a7e:	6963      	ldr	r3, [r4, #20]
 8005a80:	425b      	negs	r3, r3
 8005a82:	61a3      	str	r3, [r4, #24]
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	b943      	cbnz	r3, 8005a9a <__swsetup_r+0xc6>
 8005a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a8c:	d1ba      	bne.n	8005a04 <__swsetup_r+0x30>
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	0781      	lsls	r1, r0, #30
 8005a92:	bf58      	it	pl
 8005a94:	6963      	ldrpl	r3, [r4, #20]
 8005a96:	60a3      	str	r3, [r4, #8]
 8005a98:	e7f4      	b.n	8005a84 <__swsetup_r+0xb0>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e7f7      	b.n	8005a8e <__swsetup_r+0xba>
 8005a9e:	bf00      	nop
 8005aa0:	2000000c 	.word	0x2000000c
 8005aa4:	08007bd4 	.word	0x08007bd4
 8005aa8:	08007bf4 	.word	0x08007bf4
 8005aac:	08007bb4 	.word	0x08007bb4

08005ab0 <quorem>:
 8005ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	6903      	ldr	r3, [r0, #16]
 8005ab6:	690c      	ldr	r4, [r1, #16]
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	4607      	mov	r7, r0
 8005abc:	f2c0 8081 	blt.w	8005bc2 <quorem+0x112>
 8005ac0:	3c01      	subs	r4, #1
 8005ac2:	f101 0814 	add.w	r8, r1, #20
 8005ac6:	f100 0514 	add.w	r5, r0, #20
 8005aca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	429a      	cmp	r2, r3
 8005adc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ae0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ae4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ae8:	d331      	bcc.n	8005b4e <quorem+0x9e>
 8005aea:	f04f 0e00 	mov.w	lr, #0
 8005aee:	4640      	mov	r0, r8
 8005af0:	46ac      	mov	ip, r5
 8005af2:	46f2      	mov	sl, lr
 8005af4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005af8:	b293      	uxth	r3, r2
 8005afa:	fb06 e303 	mla	r3, r6, r3, lr
 8005afe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ebaa 0303 	sub.w	r3, sl, r3
 8005b08:	f8dc a000 	ldr.w	sl, [ip]
 8005b0c:	0c12      	lsrs	r2, r2, #16
 8005b0e:	fa13 f38a 	uxtah	r3, r3, sl
 8005b12:	fb06 e202 	mla	r2, r6, r2, lr
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b28:	f8bd 3000 	ldrh.w	r3, [sp]
 8005b2c:	4581      	cmp	r9, r0
 8005b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b32:	f84c 3b04 	str.w	r3, [ip], #4
 8005b36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b3a:	d2db      	bcs.n	8005af4 <quorem+0x44>
 8005b3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b40:	b92b      	cbnz	r3, 8005b4e <quorem+0x9e>
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	3b04      	subs	r3, #4
 8005b46:	429d      	cmp	r5, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	d32e      	bcc.n	8005baa <quorem+0xfa>
 8005b4c:	613c      	str	r4, [r7, #16]
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f001 fae4 	bl	800711c <__mcmp>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	db24      	blt.n	8005ba2 <quorem+0xf2>
 8005b58:	3601      	adds	r6, #1
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f04f 0c00 	mov.w	ip, #0
 8005b60:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b64:	f8d0 e000 	ldr.w	lr, [r0]
 8005b68:	b293      	uxth	r3, r2
 8005b6a:	ebac 0303 	sub.w	r3, ip, r3
 8005b6e:	0c12      	lsrs	r2, r2, #16
 8005b70:	fa13 f38e 	uxtah	r3, r3, lr
 8005b74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b82:	45c1      	cmp	r9, r8
 8005b84:	f840 3b04 	str.w	r3, [r0], #4
 8005b88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b8c:	d2e8      	bcs.n	8005b60 <quorem+0xb0>
 8005b8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b96:	b922      	cbnz	r2, 8005ba2 <quorem+0xf2>
 8005b98:	3b04      	subs	r3, #4
 8005b9a:	429d      	cmp	r5, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	d30a      	bcc.n	8005bb6 <quorem+0x106>
 8005ba0:	613c      	str	r4, [r7, #16]
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	b003      	add	sp, #12
 8005ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	3b04      	subs	r3, #4
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d1cc      	bne.n	8005b4c <quorem+0x9c>
 8005bb2:	3c01      	subs	r4, #1
 8005bb4:	e7c7      	b.n	8005b46 <quorem+0x96>
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	3b04      	subs	r3, #4
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <quorem+0xf0>
 8005bbe:	3c01      	subs	r4, #1
 8005bc0:	e7eb      	b.n	8005b9a <quorem+0xea>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e7ee      	b.n	8005ba4 <quorem+0xf4>
	...

08005bc8 <_dtoa_r>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	ed2d 8b04 	vpush	{d8-d9}
 8005bd0:	ec57 6b10 	vmov	r6, r7, d0
 8005bd4:	b093      	sub	sp, #76	; 0x4c
 8005bd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bdc:	9106      	str	r1, [sp, #24]
 8005bde:	ee10 aa10 	vmov	sl, s0
 8005be2:	4604      	mov	r4, r0
 8005be4:	9209      	str	r2, [sp, #36]	; 0x24
 8005be6:	930c      	str	r3, [sp, #48]	; 0x30
 8005be8:	46bb      	mov	fp, r7
 8005bea:	b975      	cbnz	r5, 8005c0a <_dtoa_r+0x42>
 8005bec:	2010      	movs	r0, #16
 8005bee:	f000 fffd 	bl	8006bec <malloc>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6260      	str	r0, [r4, #36]	; 0x24
 8005bf6:	b920      	cbnz	r0, 8005c02 <_dtoa_r+0x3a>
 8005bf8:	4ba7      	ldr	r3, [pc, #668]	; (8005e98 <_dtoa_r+0x2d0>)
 8005bfa:	21ea      	movs	r1, #234	; 0xea
 8005bfc:	48a7      	ldr	r0, [pc, #668]	; (8005e9c <_dtoa_r+0x2d4>)
 8005bfe:	f001 fe45 	bl	800788c <__assert_func>
 8005c02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c06:	6005      	str	r5, [r0, #0]
 8005c08:	60c5      	str	r5, [r0, #12]
 8005c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	b151      	cbz	r1, 8005c26 <_dtoa_r+0x5e>
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	604a      	str	r2, [r1, #4]
 8005c14:	2301      	movs	r3, #1
 8005c16:	4093      	lsls	r3, r2
 8005c18:	608b      	str	r3, [r1, #8]
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f001 f83c 	bl	8006c98 <_Bfree>
 8005c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	1e3b      	subs	r3, r7, #0
 8005c28:	bfaa      	itet	ge
 8005c2a:	2300      	movge	r3, #0
 8005c2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005c30:	f8c8 3000 	strge.w	r3, [r8]
 8005c34:	4b9a      	ldr	r3, [pc, #616]	; (8005ea0 <_dtoa_r+0x2d8>)
 8005c36:	bfbc      	itt	lt
 8005c38:	2201      	movlt	r2, #1
 8005c3a:	f8c8 2000 	strlt.w	r2, [r8]
 8005c3e:	ea33 030b 	bics.w	r3, r3, fp
 8005c42:	d11b      	bne.n	8005c7c <_dtoa_r+0xb4>
 8005c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c46:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c50:	4333      	orrs	r3, r6
 8005c52:	f000 8592 	beq.w	800677a <_dtoa_r+0xbb2>
 8005c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c58:	b963      	cbnz	r3, 8005c74 <_dtoa_r+0xac>
 8005c5a:	4b92      	ldr	r3, [pc, #584]	; (8005ea4 <_dtoa_r+0x2dc>)
 8005c5c:	e022      	b.n	8005ca4 <_dtoa_r+0xdc>
 8005c5e:	4b92      	ldr	r3, [pc, #584]	; (8005ea8 <_dtoa_r+0x2e0>)
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	3308      	adds	r3, #8
 8005c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	9801      	ldr	r0, [sp, #4]
 8005c6a:	b013      	add	sp, #76	; 0x4c
 8005c6c:	ecbd 8b04 	vpop	{d8-d9}
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c74:	4b8b      	ldr	r3, [pc, #556]	; (8005ea4 <_dtoa_r+0x2dc>)
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	e7f3      	b.n	8005c64 <_dtoa_r+0x9c>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4650      	mov	r0, sl
 8005c82:	4659      	mov	r1, fp
 8005c84:	f7fa ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c88:	ec4b ab19 	vmov	d9, sl, fp
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	b158      	cbz	r0, 8005ca8 <_dtoa_r+0xe0>
 8005c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c92:	2301      	movs	r3, #1
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 856b 	beq.w	8006774 <_dtoa_r+0xbac>
 8005c9e:	4883      	ldr	r0, [pc, #524]	; (8005eac <_dtoa_r+0x2e4>)
 8005ca0:	6018      	str	r0, [r3, #0]
 8005ca2:	1e43      	subs	r3, r0, #1
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	e7df      	b.n	8005c68 <_dtoa_r+0xa0>
 8005ca8:	ec4b ab10 	vmov	d0, sl, fp
 8005cac:	aa10      	add	r2, sp, #64	; 0x40
 8005cae:	a911      	add	r1, sp, #68	; 0x44
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f001 fad9 	bl	8007268 <__d2b>
 8005cb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005cba:	ee08 0a10 	vmov	s16, r0
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	f000 8084 	beq.w	8005dcc <_dtoa_r+0x204>
 8005cc4:	ee19 3a90 	vmov	r3, s19
 8005cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ccc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005cd0:	4656      	mov	r6, sl
 8005cd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005cd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005cde:	4b74      	ldr	r3, [pc, #464]	; (8005eb0 <_dtoa_r+0x2e8>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	f7fa facf 	bl	8000288 <__aeabi_dsub>
 8005cea:	a365      	add	r3, pc, #404	; (adr r3, 8005e80 <_dtoa_r+0x2b8>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fc82 	bl	80005f8 <__aeabi_dmul>
 8005cf4:	a364      	add	r3, pc, #400	; (adr r3, 8005e88 <_dtoa_r+0x2c0>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fac7 	bl	800028c <__adddf3>
 8005cfe:	4606      	mov	r6, r0
 8005d00:	4628      	mov	r0, r5
 8005d02:	460f      	mov	r7, r1
 8005d04:	f7fa fc0e 	bl	8000524 <__aeabi_i2d>
 8005d08:	a361      	add	r3, pc, #388	; (adr r3, 8005e90 <_dtoa_r+0x2c8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fc73 	bl	80005f8 <__aeabi_dmul>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4630      	mov	r0, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f7fa fab7 	bl	800028c <__adddf3>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	f7fa ff19 	bl	8000b58 <__aeabi_d2iz>
 8005d26:	2200      	movs	r2, #0
 8005d28:	9000      	str	r0, [sp, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa fed4 	bl	8000adc <__aeabi_dcmplt>
 8005d34:	b150      	cbz	r0, 8005d4c <_dtoa_r+0x184>
 8005d36:	9800      	ldr	r0, [sp, #0]
 8005d38:	f7fa fbf4 	bl	8000524 <__aeabi_i2d>
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	463b      	mov	r3, r7
 8005d40:	f7fa fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d44:	b910      	cbnz	r0, 8005d4c <_dtoa_r+0x184>
 8005d46:	9b00      	ldr	r3, [sp, #0]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	9b00      	ldr	r3, [sp, #0]
 8005d4e:	2b16      	cmp	r3, #22
 8005d50:	d85a      	bhi.n	8005e08 <_dtoa_r+0x240>
 8005d52:	9a00      	ldr	r2, [sp, #0]
 8005d54:	4b57      	ldr	r3, [pc, #348]	; (8005eb4 <_dtoa_r+0x2ec>)
 8005d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	ec51 0b19 	vmov	r0, r1, d9
 8005d62:	f7fa febb 	bl	8000adc <__aeabi_dcmplt>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d050      	beq.n	8005e0c <_dtoa_r+0x244>
 8005d6a:	9b00      	ldr	r3, [sp, #0]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2300      	movs	r3, #0
 8005d72:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d76:	1b5d      	subs	r5, r3, r5
 8005d78:	1e6b      	subs	r3, r5, #1
 8005d7a:	9305      	str	r3, [sp, #20]
 8005d7c:	bf45      	ittet	mi
 8005d7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d82:	9304      	strmi	r3, [sp, #16]
 8005d84:	2300      	movpl	r3, #0
 8005d86:	2300      	movmi	r3, #0
 8005d88:	bf4c      	ite	mi
 8005d8a:	9305      	strmi	r3, [sp, #20]
 8005d8c:	9304      	strpl	r3, [sp, #16]
 8005d8e:	9b00      	ldr	r3, [sp, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db3d      	blt.n	8005e10 <_dtoa_r+0x248>
 8005d94:	9b05      	ldr	r3, [sp, #20]
 8005d96:	9a00      	ldr	r2, [sp, #0]
 8005d98:	920a      	str	r2, [sp, #40]	; 0x28
 8005d9a:	4413      	add	r3, r2
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	9307      	str	r3, [sp, #28]
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	f200 8089 	bhi.w	8005ebc <_dtoa_r+0x2f4>
 8005daa:	2b05      	cmp	r3, #5
 8005dac:	bfc4      	itt	gt
 8005dae:	3b04      	subgt	r3, #4
 8005db0:	9306      	strgt	r3, [sp, #24]
 8005db2:	9b06      	ldr	r3, [sp, #24]
 8005db4:	f1a3 0302 	sub.w	r3, r3, #2
 8005db8:	bfcc      	ite	gt
 8005dba:	2500      	movgt	r5, #0
 8005dbc:	2501      	movle	r5, #1
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	f200 8087 	bhi.w	8005ed2 <_dtoa_r+0x30a>
 8005dc4:	e8df f003 	tbb	[pc, r3]
 8005dc8:	59383a2d 	.word	0x59383a2d
 8005dcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005dd0:	441d      	add	r5, r3
 8005dd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	bfc1      	itttt	gt
 8005dda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005dde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005de2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005de6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005dea:	bfda      	itte	le
 8005dec:	f1c3 0320 	rsble	r3, r3, #32
 8005df0:	fa06 f003 	lslle.w	r0, r6, r3
 8005df4:	4318      	orrgt	r0, r3
 8005df6:	f7fa fb85 	bl	8000504 <__aeabi_ui2d>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005e02:	3d01      	subs	r5, #1
 8005e04:	930e      	str	r3, [sp, #56]	; 0x38
 8005e06:	e76a      	b.n	8005cde <_dtoa_r+0x116>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e7b2      	b.n	8005d72 <_dtoa_r+0x1aa>
 8005e0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e0e:	e7b1      	b.n	8005d74 <_dtoa_r+0x1ac>
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	9a00      	ldr	r2, [sp, #0]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	9304      	str	r3, [sp, #16]
 8005e18:	4253      	negs	r3, r2
 8005e1a:	9307      	str	r3, [sp, #28]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e20:	e7bf      	b.n	8005da2 <_dtoa_r+0x1da>
 8005e22:	2300      	movs	r3, #0
 8005e24:	9308      	str	r3, [sp, #32]
 8005e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	dc55      	bgt.n	8005ed8 <_dtoa_r+0x310>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e32:	461a      	mov	r2, r3
 8005e34:	9209      	str	r2, [sp, #36]	; 0x24
 8005e36:	e00c      	b.n	8005e52 <_dtoa_r+0x28a>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e7f3      	b.n	8005e24 <_dtoa_r+0x25c>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e40:	9308      	str	r3, [sp, #32]
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	9302      	str	r3, [sp, #8]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	9303      	str	r3, [sp, #12]
 8005e4e:	bfb8      	it	lt
 8005e50:	2301      	movlt	r3, #1
 8005e52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e54:	2200      	movs	r2, #0
 8005e56:	6042      	str	r2, [r0, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	f102 0614 	add.w	r6, r2, #20
 8005e5e:	429e      	cmp	r6, r3
 8005e60:	6841      	ldr	r1, [r0, #4]
 8005e62:	d93d      	bls.n	8005ee0 <_dtoa_r+0x318>
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 fed7 	bl	8006c18 <_Balloc>
 8005e6a:	9001      	str	r0, [sp, #4]
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d13b      	bne.n	8005ee8 <_dtoa_r+0x320>
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <_dtoa_r+0x2f0>)
 8005e72:	4602      	mov	r2, r0
 8005e74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e78:	e6c0      	b.n	8005bfc <_dtoa_r+0x34>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e7df      	b.n	8005e3e <_dtoa_r+0x276>
 8005e7e:	bf00      	nop
 8005e80:	636f4361 	.word	0x636f4361
 8005e84:	3fd287a7 	.word	0x3fd287a7
 8005e88:	8b60c8b3 	.word	0x8b60c8b3
 8005e8c:	3fc68a28 	.word	0x3fc68a28
 8005e90:	509f79fb 	.word	0x509f79fb
 8005e94:	3fd34413 	.word	0x3fd34413
 8005e98:	08007b31 	.word	0x08007b31
 8005e9c:	08007b48 	.word	0x08007b48
 8005ea0:	7ff00000 	.word	0x7ff00000
 8005ea4:	08007b2d 	.word	0x08007b2d
 8005ea8:	08007b24 	.word	0x08007b24
 8005eac:	08007b01 	.word	0x08007b01
 8005eb0:	3ff80000 	.word	0x3ff80000
 8005eb4:	08007c98 	.word	0x08007c98
 8005eb8:	08007ba3 	.word	0x08007ba3
 8005ebc:	2501      	movs	r5, #1
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9306      	str	r3, [sp, #24]
 8005ec2:	9508      	str	r5, [sp, #32]
 8005ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2312      	movs	r3, #18
 8005ed0:	e7b0      	b.n	8005e34 <_dtoa_r+0x26c>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	9308      	str	r3, [sp, #32]
 8005ed6:	e7f5      	b.n	8005ec4 <_dtoa_r+0x2fc>
 8005ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ede:	e7b8      	b.n	8005e52 <_dtoa_r+0x28a>
 8005ee0:	3101      	adds	r1, #1
 8005ee2:	6041      	str	r1, [r0, #4]
 8005ee4:	0052      	lsls	r2, r2, #1
 8005ee6:	e7b8      	b.n	8005e5a <_dtoa_r+0x292>
 8005ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eea:	9a01      	ldr	r2, [sp, #4]
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	2b0e      	cmp	r3, #14
 8005ef2:	f200 809d 	bhi.w	8006030 <_dtoa_r+0x468>
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	f000 809a 	beq.w	8006030 <_dtoa_r+0x468>
 8005efc:	9b00      	ldr	r3, [sp, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd32      	ble.n	8005f68 <_dtoa_r+0x3a0>
 8005f02:	4ab7      	ldr	r2, [pc, #732]	; (80061e0 <_dtoa_r+0x618>)
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f10:	9b00      	ldr	r3, [sp, #0]
 8005f12:	05d8      	lsls	r0, r3, #23
 8005f14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005f18:	d516      	bpl.n	8005f48 <_dtoa_r+0x380>
 8005f1a:	4bb2      	ldr	r3, [pc, #712]	; (80061e4 <_dtoa_r+0x61c>)
 8005f1c:	ec51 0b19 	vmov	r0, r1, d9
 8005f20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f24:	f7fa fc92 	bl	800084c <__aeabi_ddiv>
 8005f28:	f007 070f 	and.w	r7, r7, #15
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	468b      	mov	fp, r1
 8005f30:	2503      	movs	r5, #3
 8005f32:	4eac      	ldr	r6, [pc, #688]	; (80061e4 <_dtoa_r+0x61c>)
 8005f34:	b957      	cbnz	r7, 8005f4c <_dtoa_r+0x384>
 8005f36:	4642      	mov	r2, r8
 8005f38:	464b      	mov	r3, r9
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	f7fa fc85 	bl	800084c <__aeabi_ddiv>
 8005f42:	4682      	mov	sl, r0
 8005f44:	468b      	mov	fp, r1
 8005f46:	e028      	b.n	8005f9a <_dtoa_r+0x3d2>
 8005f48:	2502      	movs	r5, #2
 8005f4a:	e7f2      	b.n	8005f32 <_dtoa_r+0x36a>
 8005f4c:	07f9      	lsls	r1, r7, #31
 8005f4e:	d508      	bpl.n	8005f62 <_dtoa_r+0x39a>
 8005f50:	4640      	mov	r0, r8
 8005f52:	4649      	mov	r1, r9
 8005f54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f58:	f7fa fb4e 	bl	80005f8 <__aeabi_dmul>
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	4680      	mov	r8, r0
 8005f60:	4689      	mov	r9, r1
 8005f62:	107f      	asrs	r7, r7, #1
 8005f64:	3608      	adds	r6, #8
 8005f66:	e7e5      	b.n	8005f34 <_dtoa_r+0x36c>
 8005f68:	f000 809b 	beq.w	80060a2 <_dtoa_r+0x4da>
 8005f6c:	9b00      	ldr	r3, [sp, #0]
 8005f6e:	4f9d      	ldr	r7, [pc, #628]	; (80061e4 <_dtoa_r+0x61c>)
 8005f70:	425e      	negs	r6, r3
 8005f72:	4b9b      	ldr	r3, [pc, #620]	; (80061e0 <_dtoa_r+0x618>)
 8005f74:	f006 020f 	and.w	r2, r6, #15
 8005f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	ec51 0b19 	vmov	r0, r1, d9
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	1136      	asrs	r6, r6, #4
 8005f8a:	4682      	mov	sl, r0
 8005f8c:	468b      	mov	fp, r1
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2502      	movs	r5, #2
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	d17a      	bne.n	800608c <_dtoa_r+0x4c4>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1d3      	bne.n	8005f42 <_dtoa_r+0x37a>
 8005f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8082 	beq.w	80060a6 <_dtoa_r+0x4de>
 8005fa2:	4b91      	ldr	r3, [pc, #580]	; (80061e8 <_dtoa_r+0x620>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	4659      	mov	r1, fp
 8005faa:	f7fa fd97 	bl	8000adc <__aeabi_dcmplt>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d079      	beq.n	80060a6 <_dtoa_r+0x4de>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d076      	beq.n	80060a6 <_dtoa_r+0x4de>
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dd36      	ble.n	800602c <_dtoa_r+0x464>
 8005fbe:	9b00      	ldr	r3, [sp, #0]
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	1e5f      	subs	r7, r3, #1
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4b88      	ldr	r3, [pc, #544]	; (80061ec <_dtoa_r+0x624>)
 8005fca:	f7fa fb15 	bl	80005f8 <__aeabi_dmul>
 8005fce:	9e02      	ldr	r6, [sp, #8]
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	468b      	mov	fp, r1
 8005fd4:	3501      	adds	r5, #1
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f7fa faa4 	bl	8000524 <__aeabi_i2d>
 8005fdc:	4652      	mov	r2, sl
 8005fde:	465b      	mov	r3, fp
 8005fe0:	f7fa fb0a 	bl	80005f8 <__aeabi_dmul>
 8005fe4:	4b82      	ldr	r3, [pc, #520]	; (80061f0 <_dtoa_r+0x628>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f7fa f950 	bl	800028c <__adddf3>
 8005fec:	46d0      	mov	r8, sl
 8005fee:	46d9      	mov	r9, fp
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005ff6:	2e00      	cmp	r6, #0
 8005ff8:	d158      	bne.n	80060ac <_dtoa_r+0x4e4>
 8005ffa:	4b7e      	ldr	r3, [pc, #504]	; (80061f4 <_dtoa_r+0x62c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa f941 	bl	8000288 <__aeabi_dsub>
 8006006:	4652      	mov	r2, sl
 8006008:	465b      	mov	r3, fp
 800600a:	4680      	mov	r8, r0
 800600c:	4689      	mov	r9, r1
 800600e:	f7fa fd83 	bl	8000b18 <__aeabi_dcmpgt>
 8006012:	2800      	cmp	r0, #0
 8006014:	f040 8295 	bne.w	8006542 <_dtoa_r+0x97a>
 8006018:	4652      	mov	r2, sl
 800601a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800601e:	4640      	mov	r0, r8
 8006020:	4649      	mov	r1, r9
 8006022:	f7fa fd5b 	bl	8000adc <__aeabi_dcmplt>
 8006026:	2800      	cmp	r0, #0
 8006028:	f040 8289 	bne.w	800653e <_dtoa_r+0x976>
 800602c:	ec5b ab19 	vmov	sl, fp, d9
 8006030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006032:	2b00      	cmp	r3, #0
 8006034:	f2c0 8148 	blt.w	80062c8 <_dtoa_r+0x700>
 8006038:	9a00      	ldr	r2, [sp, #0]
 800603a:	2a0e      	cmp	r2, #14
 800603c:	f300 8144 	bgt.w	80062c8 <_dtoa_r+0x700>
 8006040:	4b67      	ldr	r3, [pc, #412]	; (80061e0 <_dtoa_r+0x618>)
 8006042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006046:	e9d3 8900 	ldrd	r8, r9, [r3]
 800604a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	f280 80d5 	bge.w	80061fc <_dtoa_r+0x634>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f300 80d1 	bgt.w	80061fc <_dtoa_r+0x634>
 800605a:	f040 826f 	bne.w	800653c <_dtoa_r+0x974>
 800605e:	4b65      	ldr	r3, [pc, #404]	; (80061f4 <_dtoa_r+0x62c>)
 8006060:	2200      	movs	r2, #0
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	f7fa fac7 	bl	80005f8 <__aeabi_dmul>
 800606a:	4652      	mov	r2, sl
 800606c:	465b      	mov	r3, fp
 800606e:	f7fa fd49 	bl	8000b04 <__aeabi_dcmpge>
 8006072:	9e03      	ldr	r6, [sp, #12]
 8006074:	4637      	mov	r7, r6
 8006076:	2800      	cmp	r0, #0
 8006078:	f040 8245 	bne.w	8006506 <_dtoa_r+0x93e>
 800607c:	9d01      	ldr	r5, [sp, #4]
 800607e:	2331      	movs	r3, #49	; 0x31
 8006080:	f805 3b01 	strb.w	r3, [r5], #1
 8006084:	9b00      	ldr	r3, [sp, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	e240      	b.n	800650e <_dtoa_r+0x946>
 800608c:	07f2      	lsls	r2, r6, #31
 800608e:	d505      	bpl.n	800609c <_dtoa_r+0x4d4>
 8006090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	3501      	adds	r5, #1
 800609a:	2301      	movs	r3, #1
 800609c:	1076      	asrs	r6, r6, #1
 800609e:	3708      	adds	r7, #8
 80060a0:	e777      	b.n	8005f92 <_dtoa_r+0x3ca>
 80060a2:	2502      	movs	r5, #2
 80060a4:	e779      	b.n	8005f9a <_dtoa_r+0x3d2>
 80060a6:	9f00      	ldr	r7, [sp, #0]
 80060a8:	9e03      	ldr	r6, [sp, #12]
 80060aa:	e794      	b.n	8005fd6 <_dtoa_r+0x40e>
 80060ac:	9901      	ldr	r1, [sp, #4]
 80060ae:	4b4c      	ldr	r3, [pc, #304]	; (80061e0 <_dtoa_r+0x618>)
 80060b0:	4431      	add	r1, r6
 80060b2:	910d      	str	r1, [sp, #52]	; 0x34
 80060b4:	9908      	ldr	r1, [sp, #32]
 80060b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060be:	2900      	cmp	r1, #0
 80060c0:	d043      	beq.n	800614a <_dtoa_r+0x582>
 80060c2:	494d      	ldr	r1, [pc, #308]	; (80061f8 <_dtoa_r+0x630>)
 80060c4:	2000      	movs	r0, #0
 80060c6:	f7fa fbc1 	bl	800084c <__aeabi_ddiv>
 80060ca:	4652      	mov	r2, sl
 80060cc:	465b      	mov	r3, fp
 80060ce:	f7fa f8db 	bl	8000288 <__aeabi_dsub>
 80060d2:	9d01      	ldr	r5, [sp, #4]
 80060d4:	4682      	mov	sl, r0
 80060d6:	468b      	mov	fp, r1
 80060d8:	4649      	mov	r1, r9
 80060da:	4640      	mov	r0, r8
 80060dc:	f7fa fd3c 	bl	8000b58 <__aeabi_d2iz>
 80060e0:	4606      	mov	r6, r0
 80060e2:	f7fa fa1f 	bl	8000524 <__aeabi_i2d>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	f7fa f8cb 	bl	8000288 <__aeabi_dsub>
 80060f2:	3630      	adds	r6, #48	; 0x30
 80060f4:	f805 6b01 	strb.w	r6, [r5], #1
 80060f8:	4652      	mov	r2, sl
 80060fa:	465b      	mov	r3, fp
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	f7fa fcec 	bl	8000adc <__aeabi_dcmplt>
 8006104:	2800      	cmp	r0, #0
 8006106:	d163      	bne.n	80061d0 <_dtoa_r+0x608>
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	4936      	ldr	r1, [pc, #216]	; (80061e8 <_dtoa_r+0x620>)
 800610e:	2000      	movs	r0, #0
 8006110:	f7fa f8ba 	bl	8000288 <__aeabi_dsub>
 8006114:	4652      	mov	r2, sl
 8006116:	465b      	mov	r3, fp
 8006118:	f7fa fce0 	bl	8000adc <__aeabi_dcmplt>
 800611c:	2800      	cmp	r0, #0
 800611e:	f040 80b5 	bne.w	800628c <_dtoa_r+0x6c4>
 8006122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006124:	429d      	cmp	r5, r3
 8006126:	d081      	beq.n	800602c <_dtoa_r+0x464>
 8006128:	4b30      	ldr	r3, [pc, #192]	; (80061ec <_dtoa_r+0x624>)
 800612a:	2200      	movs	r2, #0
 800612c:	4650      	mov	r0, sl
 800612e:	4659      	mov	r1, fp
 8006130:	f7fa fa62 	bl	80005f8 <__aeabi_dmul>
 8006134:	4b2d      	ldr	r3, [pc, #180]	; (80061ec <_dtoa_r+0x624>)
 8006136:	4682      	mov	sl, r0
 8006138:	468b      	mov	fp, r1
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	2200      	movs	r2, #0
 8006140:	f7fa fa5a 	bl	80005f8 <__aeabi_dmul>
 8006144:	4680      	mov	r8, r0
 8006146:	4689      	mov	r9, r1
 8006148:	e7c6      	b.n	80060d8 <_dtoa_r+0x510>
 800614a:	4650      	mov	r0, sl
 800614c:	4659      	mov	r1, fp
 800614e:	f7fa fa53 	bl	80005f8 <__aeabi_dmul>
 8006152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006154:	9d01      	ldr	r5, [sp, #4]
 8006156:	930f      	str	r3, [sp, #60]	; 0x3c
 8006158:	4682      	mov	sl, r0
 800615a:	468b      	mov	fp, r1
 800615c:	4649      	mov	r1, r9
 800615e:	4640      	mov	r0, r8
 8006160:	f7fa fcfa 	bl	8000b58 <__aeabi_d2iz>
 8006164:	4606      	mov	r6, r0
 8006166:	f7fa f9dd 	bl	8000524 <__aeabi_i2d>
 800616a:	3630      	adds	r6, #48	; 0x30
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4640      	mov	r0, r8
 8006172:	4649      	mov	r1, r9
 8006174:	f7fa f888 	bl	8000288 <__aeabi_dsub>
 8006178:	f805 6b01 	strb.w	r6, [r5], #1
 800617c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800617e:	429d      	cmp	r5, r3
 8006180:	4680      	mov	r8, r0
 8006182:	4689      	mov	r9, r1
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	d124      	bne.n	80061d4 <_dtoa_r+0x60c>
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <_dtoa_r+0x630>)
 800618c:	4650      	mov	r0, sl
 800618e:	4659      	mov	r1, fp
 8006190:	f7fa f87c 	bl	800028c <__adddf3>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d173      	bne.n	800628c <_dtoa_r+0x6c4>
 80061a4:	4652      	mov	r2, sl
 80061a6:	465b      	mov	r3, fp
 80061a8:	4913      	ldr	r1, [pc, #76]	; (80061f8 <_dtoa_r+0x630>)
 80061aa:	2000      	movs	r0, #0
 80061ac:	f7fa f86c 	bl	8000288 <__aeabi_dsub>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4640      	mov	r0, r8
 80061b6:	4649      	mov	r1, r9
 80061b8:	f7fa fc90 	bl	8000adc <__aeabi_dcmplt>
 80061bc:	2800      	cmp	r0, #0
 80061be:	f43f af35 	beq.w	800602c <_dtoa_r+0x464>
 80061c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80061c4:	1e6b      	subs	r3, r5, #1
 80061c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061cc:	2b30      	cmp	r3, #48	; 0x30
 80061ce:	d0f8      	beq.n	80061c2 <_dtoa_r+0x5fa>
 80061d0:	9700      	str	r7, [sp, #0]
 80061d2:	e049      	b.n	8006268 <_dtoa_r+0x6a0>
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <_dtoa_r+0x624>)
 80061d6:	f7fa fa0f 	bl	80005f8 <__aeabi_dmul>
 80061da:	4680      	mov	r8, r0
 80061dc:	4689      	mov	r9, r1
 80061de:	e7bd      	b.n	800615c <_dtoa_r+0x594>
 80061e0:	08007c98 	.word	0x08007c98
 80061e4:	08007c70 	.word	0x08007c70
 80061e8:	3ff00000 	.word	0x3ff00000
 80061ec:	40240000 	.word	0x40240000
 80061f0:	401c0000 	.word	0x401c0000
 80061f4:	40140000 	.word	0x40140000
 80061f8:	3fe00000 	.word	0x3fe00000
 80061fc:	9d01      	ldr	r5, [sp, #4]
 80061fe:	4656      	mov	r6, sl
 8006200:	465f      	mov	r7, fp
 8006202:	4642      	mov	r2, r8
 8006204:	464b      	mov	r3, r9
 8006206:	4630      	mov	r0, r6
 8006208:	4639      	mov	r1, r7
 800620a:	f7fa fb1f 	bl	800084c <__aeabi_ddiv>
 800620e:	f7fa fca3 	bl	8000b58 <__aeabi_d2iz>
 8006212:	4682      	mov	sl, r0
 8006214:	f7fa f986 	bl	8000524 <__aeabi_i2d>
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	f7fa f9ec 	bl	80005f8 <__aeabi_dmul>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4630      	mov	r0, r6
 8006226:	4639      	mov	r1, r7
 8006228:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800622c:	f7fa f82c 	bl	8000288 <__aeabi_dsub>
 8006230:	f805 6b01 	strb.w	r6, [r5], #1
 8006234:	9e01      	ldr	r6, [sp, #4]
 8006236:	9f03      	ldr	r7, [sp, #12]
 8006238:	1bae      	subs	r6, r5, r6
 800623a:	42b7      	cmp	r7, r6
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	d135      	bne.n	80062ae <_dtoa_r+0x6e6>
 8006242:	f7fa f823 	bl	800028c <__adddf3>
 8006246:	4642      	mov	r2, r8
 8006248:	464b      	mov	r3, r9
 800624a:	4606      	mov	r6, r0
 800624c:	460f      	mov	r7, r1
 800624e:	f7fa fc63 	bl	8000b18 <__aeabi_dcmpgt>
 8006252:	b9d0      	cbnz	r0, 800628a <_dtoa_r+0x6c2>
 8006254:	4642      	mov	r2, r8
 8006256:	464b      	mov	r3, r9
 8006258:	4630      	mov	r0, r6
 800625a:	4639      	mov	r1, r7
 800625c:	f7fa fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006260:	b110      	cbz	r0, 8006268 <_dtoa_r+0x6a0>
 8006262:	f01a 0f01 	tst.w	sl, #1
 8006266:	d110      	bne.n	800628a <_dtoa_r+0x6c2>
 8006268:	4620      	mov	r0, r4
 800626a:	ee18 1a10 	vmov	r1, s16
 800626e:	f000 fd13 	bl	8006c98 <_Bfree>
 8006272:	2300      	movs	r3, #0
 8006274:	9800      	ldr	r0, [sp, #0]
 8006276:	702b      	strb	r3, [r5, #0]
 8006278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800627a:	3001      	adds	r0, #1
 800627c:	6018      	str	r0, [r3, #0]
 800627e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006280:	2b00      	cmp	r3, #0
 8006282:	f43f acf1 	beq.w	8005c68 <_dtoa_r+0xa0>
 8006286:	601d      	str	r5, [r3, #0]
 8006288:	e4ee      	b.n	8005c68 <_dtoa_r+0xa0>
 800628a:	9f00      	ldr	r7, [sp, #0]
 800628c:	462b      	mov	r3, r5
 800628e:	461d      	mov	r5, r3
 8006290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006294:	2a39      	cmp	r2, #57	; 0x39
 8006296:	d106      	bne.n	80062a6 <_dtoa_r+0x6de>
 8006298:	9a01      	ldr	r2, [sp, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d1f7      	bne.n	800628e <_dtoa_r+0x6c6>
 800629e:	9901      	ldr	r1, [sp, #4]
 80062a0:	2230      	movs	r2, #48	; 0x30
 80062a2:	3701      	adds	r7, #1
 80062a4:	700a      	strb	r2, [r1, #0]
 80062a6:	781a      	ldrb	r2, [r3, #0]
 80062a8:	3201      	adds	r2, #1
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e790      	b.n	80061d0 <_dtoa_r+0x608>
 80062ae:	4ba6      	ldr	r3, [pc, #664]	; (8006548 <_dtoa_r+0x980>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	f7fa f9a1 	bl	80005f8 <__aeabi_dmul>
 80062b6:	2200      	movs	r2, #0
 80062b8:	2300      	movs	r3, #0
 80062ba:	4606      	mov	r6, r0
 80062bc:	460f      	mov	r7, r1
 80062be:	f7fa fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d09d      	beq.n	8006202 <_dtoa_r+0x63a>
 80062c6:	e7cf      	b.n	8006268 <_dtoa_r+0x6a0>
 80062c8:	9a08      	ldr	r2, [sp, #32]
 80062ca:	2a00      	cmp	r2, #0
 80062cc:	f000 80d7 	beq.w	800647e <_dtoa_r+0x8b6>
 80062d0:	9a06      	ldr	r2, [sp, #24]
 80062d2:	2a01      	cmp	r2, #1
 80062d4:	f300 80ba 	bgt.w	800644c <_dtoa_r+0x884>
 80062d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062da:	2a00      	cmp	r2, #0
 80062dc:	f000 80b2 	beq.w	8006444 <_dtoa_r+0x87c>
 80062e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062e4:	9e07      	ldr	r6, [sp, #28]
 80062e6:	9d04      	ldr	r5, [sp, #16]
 80062e8:	9a04      	ldr	r2, [sp, #16]
 80062ea:	441a      	add	r2, r3
 80062ec:	9204      	str	r2, [sp, #16]
 80062ee:	9a05      	ldr	r2, [sp, #20]
 80062f0:	2101      	movs	r1, #1
 80062f2:	441a      	add	r2, r3
 80062f4:	4620      	mov	r0, r4
 80062f6:	9205      	str	r2, [sp, #20]
 80062f8:	f000 fd86 	bl	8006e08 <__i2b>
 80062fc:	4607      	mov	r7, r0
 80062fe:	2d00      	cmp	r5, #0
 8006300:	dd0c      	ble.n	800631c <_dtoa_r+0x754>
 8006302:	9b05      	ldr	r3, [sp, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dd09      	ble.n	800631c <_dtoa_r+0x754>
 8006308:	42ab      	cmp	r3, r5
 800630a:	9a04      	ldr	r2, [sp, #16]
 800630c:	bfa8      	it	ge
 800630e:	462b      	movge	r3, r5
 8006310:	1ad2      	subs	r2, r2, r3
 8006312:	9204      	str	r2, [sp, #16]
 8006314:	9a05      	ldr	r2, [sp, #20]
 8006316:	1aed      	subs	r5, r5, r3
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	b31b      	cbz	r3, 8006368 <_dtoa_r+0x7a0>
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80af 	beq.w	8006486 <_dtoa_r+0x8be>
 8006328:	2e00      	cmp	r6, #0
 800632a:	dd13      	ble.n	8006354 <_dtoa_r+0x78c>
 800632c:	4639      	mov	r1, r7
 800632e:	4632      	mov	r2, r6
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fe29 	bl	8006f88 <__pow5mult>
 8006336:	ee18 2a10 	vmov	r2, s16
 800633a:	4601      	mov	r1, r0
 800633c:	4607      	mov	r7, r0
 800633e:	4620      	mov	r0, r4
 8006340:	f000 fd78 	bl	8006e34 <__multiply>
 8006344:	ee18 1a10 	vmov	r1, s16
 8006348:	4680      	mov	r8, r0
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fca4 	bl	8006c98 <_Bfree>
 8006350:	ee08 8a10 	vmov	s16, r8
 8006354:	9b07      	ldr	r3, [sp, #28]
 8006356:	1b9a      	subs	r2, r3, r6
 8006358:	d006      	beq.n	8006368 <_dtoa_r+0x7a0>
 800635a:	ee18 1a10 	vmov	r1, s16
 800635e:	4620      	mov	r0, r4
 8006360:	f000 fe12 	bl	8006f88 <__pow5mult>
 8006364:	ee08 0a10 	vmov	s16, r0
 8006368:	2101      	movs	r1, #1
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fd4c 	bl	8006e08 <__i2b>
 8006370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	4606      	mov	r6, r0
 8006376:	f340 8088 	ble.w	800648a <_dtoa_r+0x8c2>
 800637a:	461a      	mov	r2, r3
 800637c:	4601      	mov	r1, r0
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fe02 	bl	8006f88 <__pow5mult>
 8006384:	9b06      	ldr	r3, [sp, #24]
 8006386:	2b01      	cmp	r3, #1
 8006388:	4606      	mov	r6, r0
 800638a:	f340 8081 	ble.w	8006490 <_dtoa_r+0x8c8>
 800638e:	f04f 0800 	mov.w	r8, #0
 8006392:	6933      	ldr	r3, [r6, #16]
 8006394:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006398:	6918      	ldr	r0, [r3, #16]
 800639a:	f000 fce5 	bl	8006d68 <__hi0bits>
 800639e:	f1c0 0020 	rsb	r0, r0, #32
 80063a2:	9b05      	ldr	r3, [sp, #20]
 80063a4:	4418      	add	r0, r3
 80063a6:	f010 001f 	ands.w	r0, r0, #31
 80063aa:	f000 8092 	beq.w	80064d2 <_dtoa_r+0x90a>
 80063ae:	f1c0 0320 	rsb	r3, r0, #32
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	f340 808a 	ble.w	80064cc <_dtoa_r+0x904>
 80063b8:	f1c0 001c 	rsb	r0, r0, #28
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	4403      	add	r3, r0
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	9b05      	ldr	r3, [sp, #20]
 80063c4:	4403      	add	r3, r0
 80063c6:	4405      	add	r5, r0
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	9b04      	ldr	r3, [sp, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dd07      	ble.n	80063e0 <_dtoa_r+0x818>
 80063d0:	ee18 1a10 	vmov	r1, s16
 80063d4:	461a      	mov	r2, r3
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fe30 	bl	800703c <__lshift>
 80063dc:	ee08 0a10 	vmov	s16, r0
 80063e0:	9b05      	ldr	r3, [sp, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	dd05      	ble.n	80063f2 <_dtoa_r+0x82a>
 80063e6:	4631      	mov	r1, r6
 80063e8:	461a      	mov	r2, r3
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 fe26 	bl	800703c <__lshift>
 80063f0:	4606      	mov	r6, r0
 80063f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d06e      	beq.n	80064d6 <_dtoa_r+0x90e>
 80063f8:	ee18 0a10 	vmov	r0, s16
 80063fc:	4631      	mov	r1, r6
 80063fe:	f000 fe8d 	bl	800711c <__mcmp>
 8006402:	2800      	cmp	r0, #0
 8006404:	da67      	bge.n	80064d6 <_dtoa_r+0x90e>
 8006406:	9b00      	ldr	r3, [sp, #0]
 8006408:	3b01      	subs	r3, #1
 800640a:	ee18 1a10 	vmov	r1, s16
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	220a      	movs	r2, #10
 8006412:	2300      	movs	r3, #0
 8006414:	4620      	mov	r0, r4
 8006416:	f000 fc61 	bl	8006cdc <__multadd>
 800641a:	9b08      	ldr	r3, [sp, #32]
 800641c:	ee08 0a10 	vmov	s16, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 81b1 	beq.w	8006788 <_dtoa_r+0xbc0>
 8006426:	2300      	movs	r3, #0
 8006428:	4639      	mov	r1, r7
 800642a:	220a      	movs	r2, #10
 800642c:	4620      	mov	r0, r4
 800642e:	f000 fc55 	bl	8006cdc <__multadd>
 8006432:	9b02      	ldr	r3, [sp, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	4607      	mov	r7, r0
 8006438:	f300 808e 	bgt.w	8006558 <_dtoa_r+0x990>
 800643c:	9b06      	ldr	r3, [sp, #24]
 800643e:	2b02      	cmp	r3, #2
 8006440:	dc51      	bgt.n	80064e6 <_dtoa_r+0x91e>
 8006442:	e089      	b.n	8006558 <_dtoa_r+0x990>
 8006444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006446:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800644a:	e74b      	b.n	80062e4 <_dtoa_r+0x71c>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	1e5e      	subs	r6, r3, #1
 8006450:	9b07      	ldr	r3, [sp, #28]
 8006452:	42b3      	cmp	r3, r6
 8006454:	bfbf      	itttt	lt
 8006456:	9b07      	ldrlt	r3, [sp, #28]
 8006458:	9607      	strlt	r6, [sp, #28]
 800645a:	1af2      	sublt	r2, r6, r3
 800645c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800645e:	bfb6      	itet	lt
 8006460:	189b      	addlt	r3, r3, r2
 8006462:	1b9e      	subge	r6, r3, r6
 8006464:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	bfb8      	it	lt
 800646a:	2600      	movlt	r6, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	bfb7      	itett	lt
 8006470:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006474:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006478:	1a9d      	sublt	r5, r3, r2
 800647a:	2300      	movlt	r3, #0
 800647c:	e734      	b.n	80062e8 <_dtoa_r+0x720>
 800647e:	9e07      	ldr	r6, [sp, #28]
 8006480:	9d04      	ldr	r5, [sp, #16]
 8006482:	9f08      	ldr	r7, [sp, #32]
 8006484:	e73b      	b.n	80062fe <_dtoa_r+0x736>
 8006486:	9a07      	ldr	r2, [sp, #28]
 8006488:	e767      	b.n	800635a <_dtoa_r+0x792>
 800648a:	9b06      	ldr	r3, [sp, #24]
 800648c:	2b01      	cmp	r3, #1
 800648e:	dc18      	bgt.n	80064c2 <_dtoa_r+0x8fa>
 8006490:	f1ba 0f00 	cmp.w	sl, #0
 8006494:	d115      	bne.n	80064c2 <_dtoa_r+0x8fa>
 8006496:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800649a:	b993      	cbnz	r3, 80064c2 <_dtoa_r+0x8fa>
 800649c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064a0:	0d1b      	lsrs	r3, r3, #20
 80064a2:	051b      	lsls	r3, r3, #20
 80064a4:	b183      	cbz	r3, 80064c8 <_dtoa_r+0x900>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	3301      	adds	r3, #1
 80064aa:	9304      	str	r3, [sp, #16]
 80064ac:	9b05      	ldr	r3, [sp, #20]
 80064ae:	3301      	adds	r3, #1
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	f04f 0801 	mov.w	r8, #1
 80064b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f af6a 	bne.w	8006392 <_dtoa_r+0x7ca>
 80064be:	2001      	movs	r0, #1
 80064c0:	e76f      	b.n	80063a2 <_dtoa_r+0x7da>
 80064c2:	f04f 0800 	mov.w	r8, #0
 80064c6:	e7f6      	b.n	80064b6 <_dtoa_r+0x8ee>
 80064c8:	4698      	mov	r8, r3
 80064ca:	e7f4      	b.n	80064b6 <_dtoa_r+0x8ee>
 80064cc:	f43f af7d 	beq.w	80063ca <_dtoa_r+0x802>
 80064d0:	4618      	mov	r0, r3
 80064d2:	301c      	adds	r0, #28
 80064d4:	e772      	b.n	80063bc <_dtoa_r+0x7f4>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dc37      	bgt.n	800654c <_dtoa_r+0x984>
 80064dc:	9b06      	ldr	r3, [sp, #24]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	dd34      	ble.n	800654c <_dtoa_r+0x984>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	9302      	str	r3, [sp, #8]
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	b96b      	cbnz	r3, 8006506 <_dtoa_r+0x93e>
 80064ea:	4631      	mov	r1, r6
 80064ec:	2205      	movs	r2, #5
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 fbf4 	bl	8006cdc <__multadd>
 80064f4:	4601      	mov	r1, r0
 80064f6:	4606      	mov	r6, r0
 80064f8:	ee18 0a10 	vmov	r0, s16
 80064fc:	f000 fe0e 	bl	800711c <__mcmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	f73f adbb 	bgt.w	800607c <_dtoa_r+0x4b4>
 8006506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006508:	9d01      	ldr	r5, [sp, #4]
 800650a:	43db      	mvns	r3, r3
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	4631      	mov	r1, r6
 8006514:	4620      	mov	r0, r4
 8006516:	f000 fbbf 	bl	8006c98 <_Bfree>
 800651a:	2f00      	cmp	r7, #0
 800651c:	f43f aea4 	beq.w	8006268 <_dtoa_r+0x6a0>
 8006520:	f1b8 0f00 	cmp.w	r8, #0
 8006524:	d005      	beq.n	8006532 <_dtoa_r+0x96a>
 8006526:	45b8      	cmp	r8, r7
 8006528:	d003      	beq.n	8006532 <_dtoa_r+0x96a>
 800652a:	4641      	mov	r1, r8
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fbb3 	bl	8006c98 <_Bfree>
 8006532:	4639      	mov	r1, r7
 8006534:	4620      	mov	r0, r4
 8006536:	f000 fbaf 	bl	8006c98 <_Bfree>
 800653a:	e695      	b.n	8006268 <_dtoa_r+0x6a0>
 800653c:	2600      	movs	r6, #0
 800653e:	4637      	mov	r7, r6
 8006540:	e7e1      	b.n	8006506 <_dtoa_r+0x93e>
 8006542:	9700      	str	r7, [sp, #0]
 8006544:	4637      	mov	r7, r6
 8006546:	e599      	b.n	800607c <_dtoa_r+0x4b4>
 8006548:	40240000 	.word	0x40240000
 800654c:	9b08      	ldr	r3, [sp, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80ca 	beq.w	80066e8 <_dtoa_r+0xb20>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	9302      	str	r3, [sp, #8]
 8006558:	2d00      	cmp	r5, #0
 800655a:	dd05      	ble.n	8006568 <_dtoa_r+0x9a0>
 800655c:	4639      	mov	r1, r7
 800655e:	462a      	mov	r2, r5
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fd6b 	bl	800703c <__lshift>
 8006566:	4607      	mov	r7, r0
 8006568:	f1b8 0f00 	cmp.w	r8, #0
 800656c:	d05b      	beq.n	8006626 <_dtoa_r+0xa5e>
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fb51 	bl	8006c18 <_Balloc>
 8006576:	4605      	mov	r5, r0
 8006578:	b928      	cbnz	r0, 8006586 <_dtoa_r+0x9be>
 800657a:	4b87      	ldr	r3, [pc, #540]	; (8006798 <_dtoa_r+0xbd0>)
 800657c:	4602      	mov	r2, r0
 800657e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006582:	f7ff bb3b 	b.w	8005bfc <_dtoa_r+0x34>
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	3202      	adds	r2, #2
 800658a:	0092      	lsls	r2, r2, #2
 800658c:	f107 010c 	add.w	r1, r7, #12
 8006590:	300c      	adds	r0, #12
 8006592:	f000 fb33 	bl	8006bfc <memcpy>
 8006596:	2201      	movs	r2, #1
 8006598:	4629      	mov	r1, r5
 800659a:	4620      	mov	r0, r4
 800659c:	f000 fd4e 	bl	800703c <__lshift>
 80065a0:	9b01      	ldr	r3, [sp, #4]
 80065a2:	f103 0901 	add.w	r9, r3, #1
 80065a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80065aa:	4413      	add	r3, r2
 80065ac:	9305      	str	r3, [sp, #20]
 80065ae:	f00a 0301 	and.w	r3, sl, #1
 80065b2:	46b8      	mov	r8, r7
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	4607      	mov	r7, r0
 80065b8:	4631      	mov	r1, r6
 80065ba:	ee18 0a10 	vmov	r0, s16
 80065be:	f7ff fa77 	bl	8005ab0 <quorem>
 80065c2:	4641      	mov	r1, r8
 80065c4:	9002      	str	r0, [sp, #8]
 80065c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80065ca:	ee18 0a10 	vmov	r0, s16
 80065ce:	f000 fda5 	bl	800711c <__mcmp>
 80065d2:	463a      	mov	r2, r7
 80065d4:	9003      	str	r0, [sp, #12]
 80065d6:	4631      	mov	r1, r6
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fdbb 	bl	8007154 <__mdiff>
 80065de:	68c2      	ldr	r2, [r0, #12]
 80065e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80065e4:	4605      	mov	r5, r0
 80065e6:	bb02      	cbnz	r2, 800662a <_dtoa_r+0xa62>
 80065e8:	4601      	mov	r1, r0
 80065ea:	ee18 0a10 	vmov	r0, s16
 80065ee:	f000 fd95 	bl	800711c <__mcmp>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4629      	mov	r1, r5
 80065f6:	4620      	mov	r0, r4
 80065f8:	9207      	str	r2, [sp, #28]
 80065fa:	f000 fb4d 	bl	8006c98 <_Bfree>
 80065fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006602:	ea43 0102 	orr.w	r1, r3, r2
 8006606:	9b04      	ldr	r3, [sp, #16]
 8006608:	430b      	orrs	r3, r1
 800660a:	464d      	mov	r5, r9
 800660c:	d10f      	bne.n	800662e <_dtoa_r+0xa66>
 800660e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006612:	d02a      	beq.n	800666a <_dtoa_r+0xaa2>
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	dd02      	ble.n	8006620 <_dtoa_r+0xa58>
 800661a:	9b02      	ldr	r3, [sp, #8]
 800661c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006620:	f88b a000 	strb.w	sl, [fp]
 8006624:	e775      	b.n	8006512 <_dtoa_r+0x94a>
 8006626:	4638      	mov	r0, r7
 8006628:	e7ba      	b.n	80065a0 <_dtoa_r+0x9d8>
 800662a:	2201      	movs	r2, #1
 800662c:	e7e2      	b.n	80065f4 <_dtoa_r+0xa2c>
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db04      	blt.n	800663e <_dtoa_r+0xa76>
 8006634:	9906      	ldr	r1, [sp, #24]
 8006636:	430b      	orrs	r3, r1
 8006638:	9904      	ldr	r1, [sp, #16]
 800663a:	430b      	orrs	r3, r1
 800663c:	d122      	bne.n	8006684 <_dtoa_r+0xabc>
 800663e:	2a00      	cmp	r2, #0
 8006640:	ddee      	ble.n	8006620 <_dtoa_r+0xa58>
 8006642:	ee18 1a10 	vmov	r1, s16
 8006646:	2201      	movs	r2, #1
 8006648:	4620      	mov	r0, r4
 800664a:	f000 fcf7 	bl	800703c <__lshift>
 800664e:	4631      	mov	r1, r6
 8006650:	ee08 0a10 	vmov	s16, r0
 8006654:	f000 fd62 	bl	800711c <__mcmp>
 8006658:	2800      	cmp	r0, #0
 800665a:	dc03      	bgt.n	8006664 <_dtoa_r+0xa9c>
 800665c:	d1e0      	bne.n	8006620 <_dtoa_r+0xa58>
 800665e:	f01a 0f01 	tst.w	sl, #1
 8006662:	d0dd      	beq.n	8006620 <_dtoa_r+0xa58>
 8006664:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006668:	d1d7      	bne.n	800661a <_dtoa_r+0xa52>
 800666a:	2339      	movs	r3, #57	; 0x39
 800666c:	f88b 3000 	strb.w	r3, [fp]
 8006670:	462b      	mov	r3, r5
 8006672:	461d      	mov	r5, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800667a:	2a39      	cmp	r2, #57	; 0x39
 800667c:	d071      	beq.n	8006762 <_dtoa_r+0xb9a>
 800667e:	3201      	adds	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e746      	b.n	8006512 <_dtoa_r+0x94a>
 8006684:	2a00      	cmp	r2, #0
 8006686:	dd07      	ble.n	8006698 <_dtoa_r+0xad0>
 8006688:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800668c:	d0ed      	beq.n	800666a <_dtoa_r+0xaa2>
 800668e:	f10a 0301 	add.w	r3, sl, #1
 8006692:	f88b 3000 	strb.w	r3, [fp]
 8006696:	e73c      	b.n	8006512 <_dtoa_r+0x94a>
 8006698:	9b05      	ldr	r3, [sp, #20]
 800669a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800669e:	4599      	cmp	r9, r3
 80066a0:	d047      	beq.n	8006732 <_dtoa_r+0xb6a>
 80066a2:	ee18 1a10 	vmov	r1, s16
 80066a6:	2300      	movs	r3, #0
 80066a8:	220a      	movs	r2, #10
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 fb16 	bl	8006cdc <__multadd>
 80066b0:	45b8      	cmp	r8, r7
 80066b2:	ee08 0a10 	vmov	s16, r0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	f04f 020a 	mov.w	r2, #10
 80066be:	4641      	mov	r1, r8
 80066c0:	4620      	mov	r0, r4
 80066c2:	d106      	bne.n	80066d2 <_dtoa_r+0xb0a>
 80066c4:	f000 fb0a 	bl	8006cdc <__multadd>
 80066c8:	4680      	mov	r8, r0
 80066ca:	4607      	mov	r7, r0
 80066cc:	f109 0901 	add.w	r9, r9, #1
 80066d0:	e772      	b.n	80065b8 <_dtoa_r+0x9f0>
 80066d2:	f000 fb03 	bl	8006cdc <__multadd>
 80066d6:	4639      	mov	r1, r7
 80066d8:	4680      	mov	r8, r0
 80066da:	2300      	movs	r3, #0
 80066dc:	220a      	movs	r2, #10
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 fafc 	bl	8006cdc <__multadd>
 80066e4:	4607      	mov	r7, r0
 80066e6:	e7f1      	b.n	80066cc <_dtoa_r+0xb04>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	9302      	str	r3, [sp, #8]
 80066ec:	9d01      	ldr	r5, [sp, #4]
 80066ee:	ee18 0a10 	vmov	r0, s16
 80066f2:	4631      	mov	r1, r6
 80066f4:	f7ff f9dc 	bl	8005ab0 <quorem>
 80066f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066fc:	9b01      	ldr	r3, [sp, #4]
 80066fe:	f805 ab01 	strb.w	sl, [r5], #1
 8006702:	1aea      	subs	r2, r5, r3
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	4293      	cmp	r3, r2
 8006708:	dd09      	ble.n	800671e <_dtoa_r+0xb56>
 800670a:	ee18 1a10 	vmov	r1, s16
 800670e:	2300      	movs	r3, #0
 8006710:	220a      	movs	r2, #10
 8006712:	4620      	mov	r0, r4
 8006714:	f000 fae2 	bl	8006cdc <__multadd>
 8006718:	ee08 0a10 	vmov	s16, r0
 800671c:	e7e7      	b.n	80066ee <_dtoa_r+0xb26>
 800671e:	9b02      	ldr	r3, [sp, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	bfc8      	it	gt
 8006724:	461d      	movgt	r5, r3
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	bfd8      	it	le
 800672a:	2501      	movle	r5, #1
 800672c:	441d      	add	r5, r3
 800672e:	f04f 0800 	mov.w	r8, #0
 8006732:	ee18 1a10 	vmov	r1, s16
 8006736:	2201      	movs	r2, #1
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fc7f 	bl	800703c <__lshift>
 800673e:	4631      	mov	r1, r6
 8006740:	ee08 0a10 	vmov	s16, r0
 8006744:	f000 fcea 	bl	800711c <__mcmp>
 8006748:	2800      	cmp	r0, #0
 800674a:	dc91      	bgt.n	8006670 <_dtoa_r+0xaa8>
 800674c:	d102      	bne.n	8006754 <_dtoa_r+0xb8c>
 800674e:	f01a 0f01 	tst.w	sl, #1
 8006752:	d18d      	bne.n	8006670 <_dtoa_r+0xaa8>
 8006754:	462b      	mov	r3, r5
 8006756:	461d      	mov	r5, r3
 8006758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800675c:	2a30      	cmp	r2, #48	; 0x30
 800675e:	d0fa      	beq.n	8006756 <_dtoa_r+0xb8e>
 8006760:	e6d7      	b.n	8006512 <_dtoa_r+0x94a>
 8006762:	9a01      	ldr	r2, [sp, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d184      	bne.n	8006672 <_dtoa_r+0xaaa>
 8006768:	9b00      	ldr	r3, [sp, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2331      	movs	r3, #49	; 0x31
 8006770:	7013      	strb	r3, [r2, #0]
 8006772:	e6ce      	b.n	8006512 <_dtoa_r+0x94a>
 8006774:	4b09      	ldr	r3, [pc, #36]	; (800679c <_dtoa_r+0xbd4>)
 8006776:	f7ff ba95 	b.w	8005ca4 <_dtoa_r+0xdc>
 800677a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800677c:	2b00      	cmp	r3, #0
 800677e:	f47f aa6e 	bne.w	8005c5e <_dtoa_r+0x96>
 8006782:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <_dtoa_r+0xbd8>)
 8006784:	f7ff ba8e 	b.w	8005ca4 <_dtoa_r+0xdc>
 8006788:	9b02      	ldr	r3, [sp, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	dcae      	bgt.n	80066ec <_dtoa_r+0xb24>
 800678e:	9b06      	ldr	r3, [sp, #24]
 8006790:	2b02      	cmp	r3, #2
 8006792:	f73f aea8 	bgt.w	80064e6 <_dtoa_r+0x91e>
 8006796:	e7a9      	b.n	80066ec <_dtoa_r+0xb24>
 8006798:	08007ba3 	.word	0x08007ba3
 800679c:	08007b00 	.word	0x08007b00
 80067a0:	08007b24 	.word	0x08007b24

080067a4 <__sflush_r>:
 80067a4:	898a      	ldrh	r2, [r1, #12]
 80067a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067aa:	4605      	mov	r5, r0
 80067ac:	0710      	lsls	r0, r2, #28
 80067ae:	460c      	mov	r4, r1
 80067b0:	d458      	bmi.n	8006864 <__sflush_r+0xc0>
 80067b2:	684b      	ldr	r3, [r1, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	dc05      	bgt.n	80067c4 <__sflush_r+0x20>
 80067b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dc02      	bgt.n	80067c4 <__sflush_r+0x20>
 80067be:	2000      	movs	r0, #0
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	d0f9      	beq.n	80067be <__sflush_r+0x1a>
 80067ca:	2300      	movs	r3, #0
 80067cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067d0:	682f      	ldr	r7, [r5, #0]
 80067d2:	602b      	str	r3, [r5, #0]
 80067d4:	d032      	beq.n	800683c <__sflush_r+0x98>
 80067d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	075a      	lsls	r2, r3, #29
 80067dc:	d505      	bpl.n	80067ea <__sflush_r+0x46>
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	1ac0      	subs	r0, r0, r3
 80067e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067e4:	b10b      	cbz	r3, 80067ea <__sflush_r+0x46>
 80067e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067e8:	1ac0      	subs	r0, r0, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	4602      	mov	r2, r0
 80067ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067f0:	6a21      	ldr	r1, [r4, #32]
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b0      	blx	r6
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	d106      	bne.n	800680a <__sflush_r+0x66>
 80067fc:	6829      	ldr	r1, [r5, #0]
 80067fe:	291d      	cmp	r1, #29
 8006800:	d82c      	bhi.n	800685c <__sflush_r+0xb8>
 8006802:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <__sflush_r+0x108>)
 8006804:	40ca      	lsrs	r2, r1
 8006806:	07d6      	lsls	r6, r2, #31
 8006808:	d528      	bpl.n	800685c <__sflush_r+0xb8>
 800680a:	2200      	movs	r2, #0
 800680c:	6062      	str	r2, [r4, #4]
 800680e:	04d9      	lsls	r1, r3, #19
 8006810:	6922      	ldr	r2, [r4, #16]
 8006812:	6022      	str	r2, [r4, #0]
 8006814:	d504      	bpl.n	8006820 <__sflush_r+0x7c>
 8006816:	1c42      	adds	r2, r0, #1
 8006818:	d101      	bne.n	800681e <__sflush_r+0x7a>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	b903      	cbnz	r3, 8006820 <__sflush_r+0x7c>
 800681e:	6560      	str	r0, [r4, #84]	; 0x54
 8006820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006822:	602f      	str	r7, [r5, #0]
 8006824:	2900      	cmp	r1, #0
 8006826:	d0ca      	beq.n	80067be <__sflush_r+0x1a>
 8006828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800682c:	4299      	cmp	r1, r3
 800682e:	d002      	beq.n	8006836 <__sflush_r+0x92>
 8006830:	4628      	mov	r0, r5
 8006832:	f000 fd8b 	bl	800734c <_free_r>
 8006836:	2000      	movs	r0, #0
 8006838:	6360      	str	r0, [r4, #52]	; 0x34
 800683a:	e7c1      	b.n	80067c0 <__sflush_r+0x1c>
 800683c:	6a21      	ldr	r1, [r4, #32]
 800683e:	2301      	movs	r3, #1
 8006840:	4628      	mov	r0, r5
 8006842:	47b0      	blx	r6
 8006844:	1c41      	adds	r1, r0, #1
 8006846:	d1c7      	bne.n	80067d8 <__sflush_r+0x34>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0c4      	beq.n	80067d8 <__sflush_r+0x34>
 800684e:	2b1d      	cmp	r3, #29
 8006850:	d001      	beq.n	8006856 <__sflush_r+0xb2>
 8006852:	2b16      	cmp	r3, #22
 8006854:	d101      	bne.n	800685a <__sflush_r+0xb6>
 8006856:	602f      	str	r7, [r5, #0]
 8006858:	e7b1      	b.n	80067be <__sflush_r+0x1a>
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	e7ad      	b.n	80067c0 <__sflush_r+0x1c>
 8006864:	690f      	ldr	r7, [r1, #16]
 8006866:	2f00      	cmp	r7, #0
 8006868:	d0a9      	beq.n	80067be <__sflush_r+0x1a>
 800686a:	0793      	lsls	r3, r2, #30
 800686c:	680e      	ldr	r6, [r1, #0]
 800686e:	bf08      	it	eq
 8006870:	694b      	ldreq	r3, [r1, #20]
 8006872:	600f      	str	r7, [r1, #0]
 8006874:	bf18      	it	ne
 8006876:	2300      	movne	r3, #0
 8006878:	eba6 0807 	sub.w	r8, r6, r7
 800687c:	608b      	str	r3, [r1, #8]
 800687e:	f1b8 0f00 	cmp.w	r8, #0
 8006882:	dd9c      	ble.n	80067be <__sflush_r+0x1a>
 8006884:	6a21      	ldr	r1, [r4, #32]
 8006886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006888:	4643      	mov	r3, r8
 800688a:	463a      	mov	r2, r7
 800688c:	4628      	mov	r0, r5
 800688e:	47b0      	blx	r6
 8006890:	2800      	cmp	r0, #0
 8006892:	dc06      	bgt.n	80068a2 <__sflush_r+0xfe>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800689a:	81a3      	strh	r3, [r4, #12]
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	e78e      	b.n	80067c0 <__sflush_r+0x1c>
 80068a2:	4407      	add	r7, r0
 80068a4:	eba8 0800 	sub.w	r8, r8, r0
 80068a8:	e7e9      	b.n	800687e <__sflush_r+0xda>
 80068aa:	bf00      	nop
 80068ac:	20400001 	.word	0x20400001

080068b0 <_fflush_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	690b      	ldr	r3, [r1, #16]
 80068b4:	4605      	mov	r5, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	b913      	cbnz	r3, 80068c0 <_fflush_r+0x10>
 80068ba:	2500      	movs	r5, #0
 80068bc:	4628      	mov	r0, r5
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	b118      	cbz	r0, 80068ca <_fflush_r+0x1a>
 80068c2:	6983      	ldr	r3, [r0, #24]
 80068c4:	b90b      	cbnz	r3, 80068ca <_fflush_r+0x1a>
 80068c6:	f000 f887 	bl	80069d8 <__sinit>
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <_fflush_r+0x6c>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	d11b      	bne.n	8006908 <_fflush_r+0x58>
 80068d0:	686c      	ldr	r4, [r5, #4]
 80068d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ef      	beq.n	80068ba <_fflush_r+0xa>
 80068da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068dc:	07d0      	lsls	r0, r2, #31
 80068de:	d404      	bmi.n	80068ea <_fflush_r+0x3a>
 80068e0:	0599      	lsls	r1, r3, #22
 80068e2:	d402      	bmi.n	80068ea <_fflush_r+0x3a>
 80068e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068e6:	f000 f91a 	bl	8006b1e <__retarget_lock_acquire_recursive>
 80068ea:	4628      	mov	r0, r5
 80068ec:	4621      	mov	r1, r4
 80068ee:	f7ff ff59 	bl	80067a4 <__sflush_r>
 80068f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068f4:	07da      	lsls	r2, r3, #31
 80068f6:	4605      	mov	r5, r0
 80068f8:	d4e0      	bmi.n	80068bc <_fflush_r+0xc>
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	059b      	lsls	r3, r3, #22
 80068fe:	d4dd      	bmi.n	80068bc <_fflush_r+0xc>
 8006900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006902:	f000 f90d 	bl	8006b20 <__retarget_lock_release_recursive>
 8006906:	e7d9      	b.n	80068bc <_fflush_r+0xc>
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <_fflush_r+0x70>)
 800690a:	429c      	cmp	r4, r3
 800690c:	d101      	bne.n	8006912 <_fflush_r+0x62>
 800690e:	68ac      	ldr	r4, [r5, #8]
 8006910:	e7df      	b.n	80068d2 <_fflush_r+0x22>
 8006912:	4b04      	ldr	r3, [pc, #16]	; (8006924 <_fflush_r+0x74>)
 8006914:	429c      	cmp	r4, r3
 8006916:	bf08      	it	eq
 8006918:	68ec      	ldreq	r4, [r5, #12]
 800691a:	e7da      	b.n	80068d2 <_fflush_r+0x22>
 800691c:	08007bd4 	.word	0x08007bd4
 8006920:	08007bf4 	.word	0x08007bf4
 8006924:	08007bb4 	.word	0x08007bb4

08006928 <std>:
 8006928:	2300      	movs	r3, #0
 800692a:	b510      	push	{r4, lr}
 800692c:	4604      	mov	r4, r0
 800692e:	e9c0 3300 	strd	r3, r3, [r0]
 8006932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006936:	6083      	str	r3, [r0, #8]
 8006938:	8181      	strh	r1, [r0, #12]
 800693a:	6643      	str	r3, [r0, #100]	; 0x64
 800693c:	81c2      	strh	r2, [r0, #14]
 800693e:	6183      	str	r3, [r0, #24]
 8006940:	4619      	mov	r1, r3
 8006942:	2208      	movs	r2, #8
 8006944:	305c      	adds	r0, #92	; 0x5c
 8006946:	f7fe faf3 	bl	8004f30 <memset>
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <std+0x38>)
 800694c:	6263      	str	r3, [r4, #36]	; 0x24
 800694e:	4b05      	ldr	r3, [pc, #20]	; (8006964 <std+0x3c>)
 8006950:	62a3      	str	r3, [r4, #40]	; 0x28
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <std+0x40>)
 8006954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <std+0x44>)
 8006958:	6224      	str	r4, [r4, #32]
 800695a:	6323      	str	r3, [r4, #48]	; 0x30
 800695c:	bd10      	pop	{r4, pc}
 800695e:	bf00      	nop
 8006960:	080077e1 	.word	0x080077e1
 8006964:	08007803 	.word	0x08007803
 8006968:	0800783b 	.word	0x0800783b
 800696c:	0800785f 	.word	0x0800785f

08006970 <_cleanup_r>:
 8006970:	4901      	ldr	r1, [pc, #4]	; (8006978 <_cleanup_r+0x8>)
 8006972:	f000 b8af 	b.w	8006ad4 <_fwalk_reent>
 8006976:	bf00      	nop
 8006978:	080068b1 	.word	0x080068b1

0800697c <__sfmoreglue>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	2268      	movs	r2, #104	; 0x68
 8006980:	1e4d      	subs	r5, r1, #1
 8006982:	4355      	muls	r5, r2
 8006984:	460e      	mov	r6, r1
 8006986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800698a:	f000 fd4b 	bl	8007424 <_malloc_r>
 800698e:	4604      	mov	r4, r0
 8006990:	b140      	cbz	r0, 80069a4 <__sfmoreglue+0x28>
 8006992:	2100      	movs	r1, #0
 8006994:	e9c0 1600 	strd	r1, r6, [r0]
 8006998:	300c      	adds	r0, #12
 800699a:	60a0      	str	r0, [r4, #8]
 800699c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069a0:	f7fe fac6 	bl	8004f30 <memset>
 80069a4:	4620      	mov	r0, r4
 80069a6:	bd70      	pop	{r4, r5, r6, pc}

080069a8 <__sfp_lock_acquire>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__sfp_lock_acquire+0x8>)
 80069aa:	f000 b8b8 	b.w	8006b1e <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	20000485 	.word	0x20000485

080069b4 <__sfp_lock_release>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__sfp_lock_release+0x8>)
 80069b6:	f000 b8b3 	b.w	8006b20 <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	20000485 	.word	0x20000485

080069c0 <__sinit_lock_acquire>:
 80069c0:	4801      	ldr	r0, [pc, #4]	; (80069c8 <__sinit_lock_acquire+0x8>)
 80069c2:	f000 b8ac 	b.w	8006b1e <__retarget_lock_acquire_recursive>
 80069c6:	bf00      	nop
 80069c8:	20000486 	.word	0x20000486

080069cc <__sinit_lock_release>:
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <__sinit_lock_release+0x8>)
 80069ce:	f000 b8a7 	b.w	8006b20 <__retarget_lock_release_recursive>
 80069d2:	bf00      	nop
 80069d4:	20000486 	.word	0x20000486

080069d8 <__sinit>:
 80069d8:	b510      	push	{r4, lr}
 80069da:	4604      	mov	r4, r0
 80069dc:	f7ff fff0 	bl	80069c0 <__sinit_lock_acquire>
 80069e0:	69a3      	ldr	r3, [r4, #24]
 80069e2:	b11b      	cbz	r3, 80069ec <__sinit+0x14>
 80069e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e8:	f7ff bff0 	b.w	80069cc <__sinit_lock_release>
 80069ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069f0:	6523      	str	r3, [r4, #80]	; 0x50
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <__sinit+0x68>)
 80069f4:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <__sinit+0x6c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	bf04      	itt	eq
 80069fe:	2301      	moveq	r3, #1
 8006a00:	61a3      	streq	r3, [r4, #24]
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 f820 	bl	8006a48 <__sfp>
 8006a08:	6060      	str	r0, [r4, #4]
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f81c 	bl	8006a48 <__sfp>
 8006a10:	60a0      	str	r0, [r4, #8]
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 f818 	bl	8006a48 <__sfp>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	60e0      	str	r0, [r4, #12]
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	6860      	ldr	r0, [r4, #4]
 8006a20:	f7ff ff82 	bl	8006928 <std>
 8006a24:	68a0      	ldr	r0, [r4, #8]
 8006a26:	2201      	movs	r2, #1
 8006a28:	2109      	movs	r1, #9
 8006a2a:	f7ff ff7d 	bl	8006928 <std>
 8006a2e:	68e0      	ldr	r0, [r4, #12]
 8006a30:	2202      	movs	r2, #2
 8006a32:	2112      	movs	r1, #18
 8006a34:	f7ff ff78 	bl	8006928 <std>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	61a3      	str	r3, [r4, #24]
 8006a3c:	e7d2      	b.n	80069e4 <__sinit+0xc>
 8006a3e:	bf00      	nop
 8006a40:	08007aec 	.word	0x08007aec
 8006a44:	08006971 	.word	0x08006971

08006a48 <__sfp>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	4607      	mov	r7, r0
 8006a4c:	f7ff ffac 	bl	80069a8 <__sfp_lock_acquire>
 8006a50:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <__sfp+0x84>)
 8006a52:	681e      	ldr	r6, [r3, #0]
 8006a54:	69b3      	ldr	r3, [r6, #24]
 8006a56:	b913      	cbnz	r3, 8006a5e <__sfp+0x16>
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff ffbd 	bl	80069d8 <__sinit>
 8006a5e:	3648      	adds	r6, #72	; 0x48
 8006a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	d503      	bpl.n	8006a70 <__sfp+0x28>
 8006a68:	6833      	ldr	r3, [r6, #0]
 8006a6a:	b30b      	cbz	r3, 8006ab0 <__sfp+0x68>
 8006a6c:	6836      	ldr	r6, [r6, #0]
 8006a6e:	e7f7      	b.n	8006a60 <__sfp+0x18>
 8006a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a74:	b9d5      	cbnz	r5, 8006aac <__sfp+0x64>
 8006a76:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <__sfp+0x88>)
 8006a78:	60e3      	str	r3, [r4, #12]
 8006a7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a7e:	6665      	str	r5, [r4, #100]	; 0x64
 8006a80:	f000 f84c 	bl	8006b1c <__retarget_lock_init_recursive>
 8006a84:	f7ff ff96 	bl	80069b4 <__sfp_lock_release>
 8006a88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a90:	6025      	str	r5, [r4, #0]
 8006a92:	61a5      	str	r5, [r4, #24]
 8006a94:	2208      	movs	r2, #8
 8006a96:	4629      	mov	r1, r5
 8006a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a9c:	f7fe fa48 	bl	8004f30 <memset>
 8006aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aac:	3468      	adds	r4, #104	; 0x68
 8006aae:	e7d9      	b.n	8006a64 <__sfp+0x1c>
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	f7ff ff62 	bl	800697c <__sfmoreglue>
 8006ab8:	4604      	mov	r4, r0
 8006aba:	6030      	str	r0, [r6, #0]
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d1d5      	bne.n	8006a6c <__sfp+0x24>
 8006ac0:	f7ff ff78 	bl	80069b4 <__sfp_lock_release>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	e7ee      	b.n	8006aa8 <__sfp+0x60>
 8006aca:	bf00      	nop
 8006acc:	08007aec 	.word	0x08007aec
 8006ad0:	ffff0001 	.word	0xffff0001

08006ad4 <_fwalk_reent>:
 8006ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad8:	4606      	mov	r6, r0
 8006ada:	4688      	mov	r8, r1
 8006adc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ae0:	2700      	movs	r7, #0
 8006ae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ae6:	f1b9 0901 	subs.w	r9, r9, #1
 8006aea:	d505      	bpl.n	8006af8 <_fwalk_reent+0x24>
 8006aec:	6824      	ldr	r4, [r4, #0]
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d1f7      	bne.n	8006ae2 <_fwalk_reent+0xe>
 8006af2:	4638      	mov	r0, r7
 8006af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af8:	89ab      	ldrh	r3, [r5, #12]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d907      	bls.n	8006b0e <_fwalk_reent+0x3a>
 8006afe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b02:	3301      	adds	r3, #1
 8006b04:	d003      	beq.n	8006b0e <_fwalk_reent+0x3a>
 8006b06:	4629      	mov	r1, r5
 8006b08:	4630      	mov	r0, r6
 8006b0a:	47c0      	blx	r8
 8006b0c:	4307      	orrs	r7, r0
 8006b0e:	3568      	adds	r5, #104	; 0x68
 8006b10:	e7e9      	b.n	8006ae6 <_fwalk_reent+0x12>
	...

08006b14 <_localeconv_r>:
 8006b14:	4800      	ldr	r0, [pc, #0]	; (8006b18 <_localeconv_r+0x4>)
 8006b16:	4770      	bx	lr
 8006b18:	20000160 	.word	0x20000160

08006b1c <__retarget_lock_init_recursive>:
 8006b1c:	4770      	bx	lr

08006b1e <__retarget_lock_acquire_recursive>:
 8006b1e:	4770      	bx	lr

08006b20 <__retarget_lock_release_recursive>:
 8006b20:	4770      	bx	lr

08006b22 <__swhatbuf_r>:
 8006b22:	b570      	push	{r4, r5, r6, lr}
 8006b24:	460e      	mov	r6, r1
 8006b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2a:	2900      	cmp	r1, #0
 8006b2c:	b096      	sub	sp, #88	; 0x58
 8006b2e:	4614      	mov	r4, r2
 8006b30:	461d      	mov	r5, r3
 8006b32:	da08      	bge.n	8006b46 <__swhatbuf_r+0x24>
 8006b34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	602a      	str	r2, [r5, #0]
 8006b3c:	061a      	lsls	r2, r3, #24
 8006b3e:	d410      	bmi.n	8006b62 <__swhatbuf_r+0x40>
 8006b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b44:	e00e      	b.n	8006b64 <__swhatbuf_r+0x42>
 8006b46:	466a      	mov	r2, sp
 8006b48:	f000 fee0 	bl	800790c <_fstat_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	dbf1      	blt.n	8006b34 <__swhatbuf_r+0x12>
 8006b50:	9a01      	ldr	r2, [sp, #4]
 8006b52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b5a:	425a      	negs	r2, r3
 8006b5c:	415a      	adcs	r2, r3
 8006b5e:	602a      	str	r2, [r5, #0]
 8006b60:	e7ee      	b.n	8006b40 <__swhatbuf_r+0x1e>
 8006b62:	2340      	movs	r3, #64	; 0x40
 8006b64:	2000      	movs	r0, #0
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	b016      	add	sp, #88	; 0x58
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}

08006b6c <__smakebuf_r>:
 8006b6c:	898b      	ldrh	r3, [r1, #12]
 8006b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b70:	079d      	lsls	r5, r3, #30
 8006b72:	4606      	mov	r6, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	d507      	bpl.n	8006b88 <__smakebuf_r+0x1c>
 8006b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	2301      	movs	r3, #1
 8006b82:	6163      	str	r3, [r4, #20]
 8006b84:	b002      	add	sp, #8
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	ab01      	add	r3, sp, #4
 8006b8a:	466a      	mov	r2, sp
 8006b8c:	f7ff ffc9 	bl	8006b22 <__swhatbuf_r>
 8006b90:	9900      	ldr	r1, [sp, #0]
 8006b92:	4605      	mov	r5, r0
 8006b94:	4630      	mov	r0, r6
 8006b96:	f000 fc45 	bl	8007424 <_malloc_r>
 8006b9a:	b948      	cbnz	r0, 8006bb0 <__smakebuf_r+0x44>
 8006b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba0:	059a      	lsls	r2, r3, #22
 8006ba2:	d4ef      	bmi.n	8006b84 <__smakebuf_r+0x18>
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e7e3      	b.n	8006b78 <__smakebuf_r+0xc>
 8006bb0:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <__smakebuf_r+0x7c>)
 8006bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	6020      	str	r0, [r4, #0]
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	6163      	str	r3, [r4, #20]
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	6120      	str	r0, [r4, #16]
 8006bc6:	b15b      	cbz	r3, 8006be0 <__smakebuf_r+0x74>
 8006bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f000 feaf 	bl	8007930 <_isatty_r>
 8006bd2:	b128      	cbz	r0, 8006be0 <__smakebuf_r+0x74>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	89a0      	ldrh	r0, [r4, #12]
 8006be2:	4305      	orrs	r5, r0
 8006be4:	81a5      	strh	r5, [r4, #12]
 8006be6:	e7cd      	b.n	8006b84 <__smakebuf_r+0x18>
 8006be8:	08006971 	.word	0x08006971

08006bec <malloc>:
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <malloc+0xc>)
 8006bee:	4601      	mov	r1, r0
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	f000 bc17 	b.w	8007424 <_malloc_r>
 8006bf6:	bf00      	nop
 8006bf8:	2000000c 	.word	0x2000000c

08006bfc <memcpy>:
 8006bfc:	440a      	add	r2, r1
 8006bfe:	4291      	cmp	r1, r2
 8006c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c04:	d100      	bne.n	8006c08 <memcpy+0xc>
 8006c06:	4770      	bx	lr
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c12:	4291      	cmp	r1, r2
 8006c14:	d1f9      	bne.n	8006c0a <memcpy+0xe>
 8006c16:	bd10      	pop	{r4, pc}

08006c18 <_Balloc>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	460d      	mov	r5, r1
 8006c20:	b976      	cbnz	r6, 8006c40 <_Balloc+0x28>
 8006c22:	2010      	movs	r0, #16
 8006c24:	f7ff ffe2 	bl	8006bec <malloc>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c2c:	b920      	cbnz	r0, 8006c38 <_Balloc+0x20>
 8006c2e:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <_Balloc+0x78>)
 8006c30:	4818      	ldr	r0, [pc, #96]	; (8006c94 <_Balloc+0x7c>)
 8006c32:	2166      	movs	r1, #102	; 0x66
 8006c34:	f000 fe2a 	bl	800788c <__assert_func>
 8006c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c3c:	6006      	str	r6, [r0, #0]
 8006c3e:	60c6      	str	r6, [r0, #12]
 8006c40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c42:	68f3      	ldr	r3, [r6, #12]
 8006c44:	b183      	cbz	r3, 8006c68 <_Balloc+0x50>
 8006c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c4e:	b9b8      	cbnz	r0, 8006c80 <_Balloc+0x68>
 8006c50:	2101      	movs	r1, #1
 8006c52:	fa01 f605 	lsl.w	r6, r1, r5
 8006c56:	1d72      	adds	r2, r6, #5
 8006c58:	0092      	lsls	r2, r2, #2
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fb60 	bl	8007320 <_calloc_r>
 8006c60:	b160      	cbz	r0, 8006c7c <_Balloc+0x64>
 8006c62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c66:	e00e      	b.n	8006c86 <_Balloc+0x6e>
 8006c68:	2221      	movs	r2, #33	; 0x21
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 fb57 	bl	8007320 <_calloc_r>
 8006c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c74:	60f0      	str	r0, [r6, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e4      	bne.n	8006c46 <_Balloc+0x2e>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	6802      	ldr	r2, [r0, #0]
 8006c82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c86:	2300      	movs	r3, #0
 8006c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c8c:	e7f7      	b.n	8006c7e <_Balloc+0x66>
 8006c8e:	bf00      	nop
 8006c90:	08007b31 	.word	0x08007b31
 8006c94:	08007c14 	.word	0x08007c14

08006c98 <_Bfree>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	b976      	cbnz	r6, 8006cc0 <_Bfree+0x28>
 8006ca2:	2010      	movs	r0, #16
 8006ca4:	f7ff ffa2 	bl	8006bec <malloc>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6268      	str	r0, [r5, #36]	; 0x24
 8006cac:	b920      	cbnz	r0, 8006cb8 <_Bfree+0x20>
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <_Bfree+0x3c>)
 8006cb0:	4809      	ldr	r0, [pc, #36]	; (8006cd8 <_Bfree+0x40>)
 8006cb2:	218a      	movs	r1, #138	; 0x8a
 8006cb4:	f000 fdea 	bl	800788c <__assert_func>
 8006cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cbc:	6006      	str	r6, [r0, #0]
 8006cbe:	60c6      	str	r6, [r0, #12]
 8006cc0:	b13c      	cbz	r4, 8006cd2 <_Bfree+0x3a>
 8006cc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cc4:	6862      	ldr	r2, [r4, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ccc:	6021      	str	r1, [r4, #0]
 8006cce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	08007b31 	.word	0x08007b31
 8006cd8:	08007c14 	.word	0x08007c14

08006cdc <__multadd>:
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	690d      	ldr	r5, [r1, #16]
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	461e      	mov	r6, r3
 8006ce8:	f101 0c14 	add.w	ip, r1, #20
 8006cec:	2000      	movs	r0, #0
 8006cee:	f8dc 3000 	ldr.w	r3, [ip]
 8006cf2:	b299      	uxth	r1, r3
 8006cf4:	fb02 6101 	mla	r1, r2, r1, r6
 8006cf8:	0c1e      	lsrs	r6, r3, #16
 8006cfa:	0c0b      	lsrs	r3, r1, #16
 8006cfc:	fb02 3306 	mla	r3, r2, r6, r3
 8006d00:	b289      	uxth	r1, r1
 8006d02:	3001      	adds	r0, #1
 8006d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d08:	4285      	cmp	r5, r0
 8006d0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d12:	dcec      	bgt.n	8006cee <__multadd+0x12>
 8006d14:	b30e      	cbz	r6, 8006d5a <__multadd+0x7e>
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dc19      	bgt.n	8006d50 <__multadd+0x74>
 8006d1c:	6861      	ldr	r1, [r4, #4]
 8006d1e:	4638      	mov	r0, r7
 8006d20:	3101      	adds	r1, #1
 8006d22:	f7ff ff79 	bl	8006c18 <_Balloc>
 8006d26:	4680      	mov	r8, r0
 8006d28:	b928      	cbnz	r0, 8006d36 <__multadd+0x5a>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <__multadd+0x84>)
 8006d2e:	480d      	ldr	r0, [pc, #52]	; (8006d64 <__multadd+0x88>)
 8006d30:	21b5      	movs	r1, #181	; 0xb5
 8006d32:	f000 fdab 	bl	800788c <__assert_func>
 8006d36:	6922      	ldr	r2, [r4, #16]
 8006d38:	3202      	adds	r2, #2
 8006d3a:	f104 010c 	add.w	r1, r4, #12
 8006d3e:	0092      	lsls	r2, r2, #2
 8006d40:	300c      	adds	r0, #12
 8006d42:	f7ff ff5b 	bl	8006bfc <memcpy>
 8006d46:	4621      	mov	r1, r4
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ffa5 	bl	8006c98 <_Bfree>
 8006d4e:	4644      	mov	r4, r8
 8006d50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d54:	3501      	adds	r5, #1
 8006d56:	615e      	str	r6, [r3, #20]
 8006d58:	6125      	str	r5, [r4, #16]
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	08007ba3 	.word	0x08007ba3
 8006d64:	08007c14 	.word	0x08007c14

08006d68 <__hi0bits>:
 8006d68:	0c03      	lsrs	r3, r0, #16
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	b9d3      	cbnz	r3, 8006da4 <__hi0bits+0x3c>
 8006d6e:	0400      	lsls	r0, r0, #16
 8006d70:	2310      	movs	r3, #16
 8006d72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d76:	bf04      	itt	eq
 8006d78:	0200      	lsleq	r0, r0, #8
 8006d7a:	3308      	addeq	r3, #8
 8006d7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d80:	bf04      	itt	eq
 8006d82:	0100      	lsleq	r0, r0, #4
 8006d84:	3304      	addeq	r3, #4
 8006d86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d8a:	bf04      	itt	eq
 8006d8c:	0080      	lsleq	r0, r0, #2
 8006d8e:	3302      	addeq	r3, #2
 8006d90:	2800      	cmp	r0, #0
 8006d92:	db05      	blt.n	8006da0 <__hi0bits+0x38>
 8006d94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d98:	f103 0301 	add.w	r3, r3, #1
 8006d9c:	bf08      	it	eq
 8006d9e:	2320      	moveq	r3, #32
 8006da0:	4618      	mov	r0, r3
 8006da2:	4770      	bx	lr
 8006da4:	2300      	movs	r3, #0
 8006da6:	e7e4      	b.n	8006d72 <__hi0bits+0xa>

08006da8 <__lo0bits>:
 8006da8:	6803      	ldr	r3, [r0, #0]
 8006daa:	f013 0207 	ands.w	r2, r3, #7
 8006dae:	4601      	mov	r1, r0
 8006db0:	d00b      	beq.n	8006dca <__lo0bits+0x22>
 8006db2:	07da      	lsls	r2, r3, #31
 8006db4:	d423      	bmi.n	8006dfe <__lo0bits+0x56>
 8006db6:	0798      	lsls	r0, r3, #30
 8006db8:	bf49      	itett	mi
 8006dba:	085b      	lsrmi	r3, r3, #1
 8006dbc:	089b      	lsrpl	r3, r3, #2
 8006dbe:	2001      	movmi	r0, #1
 8006dc0:	600b      	strmi	r3, [r1, #0]
 8006dc2:	bf5c      	itt	pl
 8006dc4:	600b      	strpl	r3, [r1, #0]
 8006dc6:	2002      	movpl	r0, #2
 8006dc8:	4770      	bx	lr
 8006dca:	b298      	uxth	r0, r3
 8006dcc:	b9a8      	cbnz	r0, 8006dfa <__lo0bits+0x52>
 8006dce:	0c1b      	lsrs	r3, r3, #16
 8006dd0:	2010      	movs	r0, #16
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	b90a      	cbnz	r2, 8006dda <__lo0bits+0x32>
 8006dd6:	3008      	adds	r0, #8
 8006dd8:	0a1b      	lsrs	r3, r3, #8
 8006dda:	071a      	lsls	r2, r3, #28
 8006ddc:	bf04      	itt	eq
 8006dde:	091b      	lsreq	r3, r3, #4
 8006de0:	3004      	addeq	r0, #4
 8006de2:	079a      	lsls	r2, r3, #30
 8006de4:	bf04      	itt	eq
 8006de6:	089b      	lsreq	r3, r3, #2
 8006de8:	3002      	addeq	r0, #2
 8006dea:	07da      	lsls	r2, r3, #31
 8006dec:	d403      	bmi.n	8006df6 <__lo0bits+0x4e>
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	f100 0001 	add.w	r0, r0, #1
 8006df4:	d005      	beq.n	8006e02 <__lo0bits+0x5a>
 8006df6:	600b      	str	r3, [r1, #0]
 8006df8:	4770      	bx	lr
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	e7e9      	b.n	8006dd2 <__lo0bits+0x2a>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	4770      	bx	lr
 8006e02:	2020      	movs	r0, #32
 8006e04:	4770      	bx	lr
	...

08006e08 <__i2b>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	f7ff ff03 	bl	8006c18 <_Balloc>
 8006e12:	4602      	mov	r2, r0
 8006e14:	b928      	cbnz	r0, 8006e22 <__i2b+0x1a>
 8006e16:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <__i2b+0x24>)
 8006e18:	4805      	ldr	r0, [pc, #20]	; (8006e30 <__i2b+0x28>)
 8006e1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e1e:	f000 fd35 	bl	800788c <__assert_func>
 8006e22:	2301      	movs	r3, #1
 8006e24:	6144      	str	r4, [r0, #20]
 8006e26:	6103      	str	r3, [r0, #16]
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08007ba3 	.word	0x08007ba3
 8006e30:	08007c14 	.word	0x08007c14

08006e34 <__multiply>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	4691      	mov	r9, r2
 8006e3a:	690a      	ldr	r2, [r1, #16]
 8006e3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	bfb8      	it	lt
 8006e44:	460b      	movlt	r3, r1
 8006e46:	460c      	mov	r4, r1
 8006e48:	bfbc      	itt	lt
 8006e4a:	464c      	movlt	r4, r9
 8006e4c:	4699      	movlt	r9, r3
 8006e4e:	6927      	ldr	r7, [r4, #16]
 8006e50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e54:	68a3      	ldr	r3, [r4, #8]
 8006e56:	6861      	ldr	r1, [r4, #4]
 8006e58:	eb07 060a 	add.w	r6, r7, sl
 8006e5c:	42b3      	cmp	r3, r6
 8006e5e:	b085      	sub	sp, #20
 8006e60:	bfb8      	it	lt
 8006e62:	3101      	addlt	r1, #1
 8006e64:	f7ff fed8 	bl	8006c18 <_Balloc>
 8006e68:	b930      	cbnz	r0, 8006e78 <__multiply+0x44>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b44      	ldr	r3, [pc, #272]	; (8006f80 <__multiply+0x14c>)
 8006e6e:	4845      	ldr	r0, [pc, #276]	; (8006f84 <__multiply+0x150>)
 8006e70:	f240 115d 	movw	r1, #349	; 0x15d
 8006e74:	f000 fd0a 	bl	800788c <__assert_func>
 8006e78:	f100 0514 	add.w	r5, r0, #20
 8006e7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e80:	462b      	mov	r3, r5
 8006e82:	2200      	movs	r2, #0
 8006e84:	4543      	cmp	r3, r8
 8006e86:	d321      	bcc.n	8006ecc <__multiply+0x98>
 8006e88:	f104 0314 	add.w	r3, r4, #20
 8006e8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e90:	f109 0314 	add.w	r3, r9, #20
 8006e94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e98:	9202      	str	r2, [sp, #8]
 8006e9a:	1b3a      	subs	r2, r7, r4
 8006e9c:	3a15      	subs	r2, #21
 8006e9e:	f022 0203 	bic.w	r2, r2, #3
 8006ea2:	3204      	adds	r2, #4
 8006ea4:	f104 0115 	add.w	r1, r4, #21
 8006ea8:	428f      	cmp	r7, r1
 8006eaa:	bf38      	it	cc
 8006eac:	2204      	movcc	r2, #4
 8006eae:	9201      	str	r2, [sp, #4]
 8006eb0:	9a02      	ldr	r2, [sp, #8]
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d80c      	bhi.n	8006ed2 <__multiply+0x9e>
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	dd03      	ble.n	8006ec4 <__multiply+0x90>
 8006ebc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d05a      	beq.n	8006f7a <__multiply+0x146>
 8006ec4:	6106      	str	r6, [r0, #16]
 8006ec6:	b005      	add	sp, #20
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	f843 2b04 	str.w	r2, [r3], #4
 8006ed0:	e7d8      	b.n	8006e84 <__multiply+0x50>
 8006ed2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ed6:	f1ba 0f00 	cmp.w	sl, #0
 8006eda:	d024      	beq.n	8006f26 <__multiply+0xf2>
 8006edc:	f104 0e14 	add.w	lr, r4, #20
 8006ee0:	46a9      	mov	r9, r5
 8006ee2:	f04f 0c00 	mov.w	ip, #0
 8006ee6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006eea:	f8d9 1000 	ldr.w	r1, [r9]
 8006eee:	fa1f fb82 	uxth.w	fp, r2
 8006ef2:	b289      	uxth	r1, r1
 8006ef4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ef8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006efc:	f8d9 2000 	ldr.w	r2, [r9]
 8006f00:	4461      	add	r1, ip
 8006f02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f06:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f0e:	b289      	uxth	r1, r1
 8006f10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f14:	4577      	cmp	r7, lr
 8006f16:	f849 1b04 	str.w	r1, [r9], #4
 8006f1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f1e:	d8e2      	bhi.n	8006ee6 <__multiply+0xb2>
 8006f20:	9a01      	ldr	r2, [sp, #4]
 8006f22:	f845 c002 	str.w	ip, [r5, r2]
 8006f26:	9a03      	ldr	r2, [sp, #12]
 8006f28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	f1b9 0f00 	cmp.w	r9, #0
 8006f32:	d020      	beq.n	8006f76 <__multiply+0x142>
 8006f34:	6829      	ldr	r1, [r5, #0]
 8006f36:	f104 0c14 	add.w	ip, r4, #20
 8006f3a:	46ae      	mov	lr, r5
 8006f3c:	f04f 0a00 	mov.w	sl, #0
 8006f40:	f8bc b000 	ldrh.w	fp, [ip]
 8006f44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f48:	fb09 220b 	mla	r2, r9, fp, r2
 8006f4c:	4492      	add	sl, r2
 8006f4e:	b289      	uxth	r1, r1
 8006f50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f54:	f84e 1b04 	str.w	r1, [lr], #4
 8006f58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f5c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f60:	0c12      	lsrs	r2, r2, #16
 8006f62:	fb09 1102 	mla	r1, r9, r2, r1
 8006f66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f6a:	4567      	cmp	r7, ip
 8006f6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f70:	d8e6      	bhi.n	8006f40 <__multiply+0x10c>
 8006f72:	9a01      	ldr	r2, [sp, #4]
 8006f74:	50a9      	str	r1, [r5, r2]
 8006f76:	3504      	adds	r5, #4
 8006f78:	e79a      	b.n	8006eb0 <__multiply+0x7c>
 8006f7a:	3e01      	subs	r6, #1
 8006f7c:	e79c      	b.n	8006eb8 <__multiply+0x84>
 8006f7e:	bf00      	nop
 8006f80:	08007ba3 	.word	0x08007ba3
 8006f84:	08007c14 	.word	0x08007c14

08006f88 <__pow5mult>:
 8006f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f8c:	4615      	mov	r5, r2
 8006f8e:	f012 0203 	ands.w	r2, r2, #3
 8006f92:	4606      	mov	r6, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	d007      	beq.n	8006fa8 <__pow5mult+0x20>
 8006f98:	4c25      	ldr	r4, [pc, #148]	; (8007030 <__pow5mult+0xa8>)
 8006f9a:	3a01      	subs	r2, #1
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fa2:	f7ff fe9b 	bl	8006cdc <__multadd>
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	10ad      	asrs	r5, r5, #2
 8006faa:	d03d      	beq.n	8007028 <__pow5mult+0xa0>
 8006fac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fae:	b97c      	cbnz	r4, 8006fd0 <__pow5mult+0x48>
 8006fb0:	2010      	movs	r0, #16
 8006fb2:	f7ff fe1b 	bl	8006bec <malloc>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6270      	str	r0, [r6, #36]	; 0x24
 8006fba:	b928      	cbnz	r0, 8006fc8 <__pow5mult+0x40>
 8006fbc:	4b1d      	ldr	r3, [pc, #116]	; (8007034 <__pow5mult+0xac>)
 8006fbe:	481e      	ldr	r0, [pc, #120]	; (8007038 <__pow5mult+0xb0>)
 8006fc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006fc4:	f000 fc62 	bl	800788c <__assert_func>
 8006fc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fcc:	6004      	str	r4, [r0, #0]
 8006fce:	60c4      	str	r4, [r0, #12]
 8006fd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fd8:	b94c      	cbnz	r4, 8006fee <__pow5mult+0x66>
 8006fda:	f240 2171 	movw	r1, #625	; 0x271
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff ff12 	bl	8006e08 <__i2b>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fea:	4604      	mov	r4, r0
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	f04f 0900 	mov.w	r9, #0
 8006ff2:	07eb      	lsls	r3, r5, #31
 8006ff4:	d50a      	bpl.n	800700c <__pow5mult+0x84>
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ff1a 	bl	8006e34 <__multiply>
 8007000:	4639      	mov	r1, r7
 8007002:	4680      	mov	r8, r0
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff fe47 	bl	8006c98 <_Bfree>
 800700a:	4647      	mov	r7, r8
 800700c:	106d      	asrs	r5, r5, #1
 800700e:	d00b      	beq.n	8007028 <__pow5mult+0xa0>
 8007010:	6820      	ldr	r0, [r4, #0]
 8007012:	b938      	cbnz	r0, 8007024 <__pow5mult+0x9c>
 8007014:	4622      	mov	r2, r4
 8007016:	4621      	mov	r1, r4
 8007018:	4630      	mov	r0, r6
 800701a:	f7ff ff0b 	bl	8006e34 <__multiply>
 800701e:	6020      	str	r0, [r4, #0]
 8007020:	f8c0 9000 	str.w	r9, [r0]
 8007024:	4604      	mov	r4, r0
 8007026:	e7e4      	b.n	8006ff2 <__pow5mult+0x6a>
 8007028:	4638      	mov	r0, r7
 800702a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800702e:	bf00      	nop
 8007030:	08007d60 	.word	0x08007d60
 8007034:	08007b31 	.word	0x08007b31
 8007038:	08007c14 	.word	0x08007c14

0800703c <__lshift>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	460c      	mov	r4, r1
 8007042:	6849      	ldr	r1, [r1, #4]
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	4607      	mov	r7, r0
 800704e:	4691      	mov	r9, r2
 8007050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007054:	f108 0601 	add.w	r6, r8, #1
 8007058:	42b3      	cmp	r3, r6
 800705a:	db0b      	blt.n	8007074 <__lshift+0x38>
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff fddb 	bl	8006c18 <_Balloc>
 8007062:	4605      	mov	r5, r0
 8007064:	b948      	cbnz	r0, 800707a <__lshift+0x3e>
 8007066:	4602      	mov	r2, r0
 8007068:	4b2a      	ldr	r3, [pc, #168]	; (8007114 <__lshift+0xd8>)
 800706a:	482b      	ldr	r0, [pc, #172]	; (8007118 <__lshift+0xdc>)
 800706c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007070:	f000 fc0c 	bl	800788c <__assert_func>
 8007074:	3101      	adds	r1, #1
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	e7ee      	b.n	8007058 <__lshift+0x1c>
 800707a:	2300      	movs	r3, #0
 800707c:	f100 0114 	add.w	r1, r0, #20
 8007080:	f100 0210 	add.w	r2, r0, #16
 8007084:	4618      	mov	r0, r3
 8007086:	4553      	cmp	r3, sl
 8007088:	db37      	blt.n	80070fa <__lshift+0xbe>
 800708a:	6920      	ldr	r0, [r4, #16]
 800708c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007090:	f104 0314 	add.w	r3, r4, #20
 8007094:	f019 091f 	ands.w	r9, r9, #31
 8007098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800709c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070a0:	d02f      	beq.n	8007102 <__lshift+0xc6>
 80070a2:	f1c9 0e20 	rsb	lr, r9, #32
 80070a6:	468a      	mov	sl, r1
 80070a8:	f04f 0c00 	mov.w	ip, #0
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	fa02 f209 	lsl.w	r2, r2, r9
 80070b2:	ea42 020c 	orr.w	r2, r2, ip
 80070b6:	f84a 2b04 	str.w	r2, [sl], #4
 80070ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80070be:	4298      	cmp	r0, r3
 80070c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80070c4:	d8f2      	bhi.n	80070ac <__lshift+0x70>
 80070c6:	1b03      	subs	r3, r0, r4
 80070c8:	3b15      	subs	r3, #21
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	3304      	adds	r3, #4
 80070d0:	f104 0215 	add.w	r2, r4, #21
 80070d4:	4290      	cmp	r0, r2
 80070d6:	bf38      	it	cc
 80070d8:	2304      	movcc	r3, #4
 80070da:	f841 c003 	str.w	ip, [r1, r3]
 80070de:	f1bc 0f00 	cmp.w	ip, #0
 80070e2:	d001      	beq.n	80070e8 <__lshift+0xac>
 80070e4:	f108 0602 	add.w	r6, r8, #2
 80070e8:	3e01      	subs	r6, #1
 80070ea:	4638      	mov	r0, r7
 80070ec:	612e      	str	r6, [r5, #16]
 80070ee:	4621      	mov	r1, r4
 80070f0:	f7ff fdd2 	bl	8006c98 <_Bfree>
 80070f4:	4628      	mov	r0, r5
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80070fe:	3301      	adds	r3, #1
 8007100:	e7c1      	b.n	8007086 <__lshift+0x4a>
 8007102:	3904      	subs	r1, #4
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	f841 2f04 	str.w	r2, [r1, #4]!
 800710c:	4298      	cmp	r0, r3
 800710e:	d8f9      	bhi.n	8007104 <__lshift+0xc8>
 8007110:	e7ea      	b.n	80070e8 <__lshift+0xac>
 8007112:	bf00      	nop
 8007114:	08007ba3 	.word	0x08007ba3
 8007118:	08007c14 	.word	0x08007c14

0800711c <__mcmp>:
 800711c:	b530      	push	{r4, r5, lr}
 800711e:	6902      	ldr	r2, [r0, #16]
 8007120:	690c      	ldr	r4, [r1, #16]
 8007122:	1b12      	subs	r2, r2, r4
 8007124:	d10e      	bne.n	8007144 <__mcmp+0x28>
 8007126:	f100 0314 	add.w	r3, r0, #20
 800712a:	3114      	adds	r1, #20
 800712c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007130:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007134:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007138:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800713c:	42a5      	cmp	r5, r4
 800713e:	d003      	beq.n	8007148 <__mcmp+0x2c>
 8007140:	d305      	bcc.n	800714e <__mcmp+0x32>
 8007142:	2201      	movs	r2, #1
 8007144:	4610      	mov	r0, r2
 8007146:	bd30      	pop	{r4, r5, pc}
 8007148:	4283      	cmp	r3, r0
 800714a:	d3f3      	bcc.n	8007134 <__mcmp+0x18>
 800714c:	e7fa      	b.n	8007144 <__mcmp+0x28>
 800714e:	f04f 32ff 	mov.w	r2, #4294967295
 8007152:	e7f7      	b.n	8007144 <__mcmp+0x28>

08007154 <__mdiff>:
 8007154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	460c      	mov	r4, r1
 800715a:	4606      	mov	r6, r0
 800715c:	4611      	mov	r1, r2
 800715e:	4620      	mov	r0, r4
 8007160:	4690      	mov	r8, r2
 8007162:	f7ff ffdb 	bl	800711c <__mcmp>
 8007166:	1e05      	subs	r5, r0, #0
 8007168:	d110      	bne.n	800718c <__mdiff+0x38>
 800716a:	4629      	mov	r1, r5
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff fd53 	bl	8006c18 <_Balloc>
 8007172:	b930      	cbnz	r0, 8007182 <__mdiff+0x2e>
 8007174:	4b3a      	ldr	r3, [pc, #232]	; (8007260 <__mdiff+0x10c>)
 8007176:	4602      	mov	r2, r0
 8007178:	f240 2132 	movw	r1, #562	; 0x232
 800717c:	4839      	ldr	r0, [pc, #228]	; (8007264 <__mdiff+0x110>)
 800717e:	f000 fb85 	bl	800788c <__assert_func>
 8007182:	2301      	movs	r3, #1
 8007184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718c:	bfa4      	itt	ge
 800718e:	4643      	movge	r3, r8
 8007190:	46a0      	movge	r8, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007198:	bfa6      	itte	ge
 800719a:	461c      	movge	r4, r3
 800719c:	2500      	movge	r5, #0
 800719e:	2501      	movlt	r5, #1
 80071a0:	f7ff fd3a 	bl	8006c18 <_Balloc>
 80071a4:	b920      	cbnz	r0, 80071b0 <__mdiff+0x5c>
 80071a6:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <__mdiff+0x10c>)
 80071a8:	4602      	mov	r2, r0
 80071aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071ae:	e7e5      	b.n	800717c <__mdiff+0x28>
 80071b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071b4:	6926      	ldr	r6, [r4, #16]
 80071b6:	60c5      	str	r5, [r0, #12]
 80071b8:	f104 0914 	add.w	r9, r4, #20
 80071bc:	f108 0514 	add.w	r5, r8, #20
 80071c0:	f100 0e14 	add.w	lr, r0, #20
 80071c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071cc:	f108 0210 	add.w	r2, r8, #16
 80071d0:	46f2      	mov	sl, lr
 80071d2:	2100      	movs	r1, #0
 80071d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80071d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071dc:	fa1f f883 	uxth.w	r8, r3
 80071e0:	fa11 f18b 	uxtah	r1, r1, fp
 80071e4:	0c1b      	lsrs	r3, r3, #16
 80071e6:	eba1 0808 	sub.w	r8, r1, r8
 80071ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071f2:	fa1f f888 	uxth.w	r8, r8
 80071f6:	1419      	asrs	r1, r3, #16
 80071f8:	454e      	cmp	r6, r9
 80071fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007202:	d8e7      	bhi.n	80071d4 <__mdiff+0x80>
 8007204:	1b33      	subs	r3, r6, r4
 8007206:	3b15      	subs	r3, #21
 8007208:	f023 0303 	bic.w	r3, r3, #3
 800720c:	3304      	adds	r3, #4
 800720e:	3415      	adds	r4, #21
 8007210:	42a6      	cmp	r6, r4
 8007212:	bf38      	it	cc
 8007214:	2304      	movcc	r3, #4
 8007216:	441d      	add	r5, r3
 8007218:	4473      	add	r3, lr
 800721a:	469e      	mov	lr, r3
 800721c:	462e      	mov	r6, r5
 800721e:	4566      	cmp	r6, ip
 8007220:	d30e      	bcc.n	8007240 <__mdiff+0xec>
 8007222:	f10c 0203 	add.w	r2, ip, #3
 8007226:	1b52      	subs	r2, r2, r5
 8007228:	f022 0203 	bic.w	r2, r2, #3
 800722c:	3d03      	subs	r5, #3
 800722e:	45ac      	cmp	ip, r5
 8007230:	bf38      	it	cc
 8007232:	2200      	movcc	r2, #0
 8007234:	441a      	add	r2, r3
 8007236:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800723a:	b17b      	cbz	r3, 800725c <__mdiff+0x108>
 800723c:	6107      	str	r7, [r0, #16]
 800723e:	e7a3      	b.n	8007188 <__mdiff+0x34>
 8007240:	f856 8b04 	ldr.w	r8, [r6], #4
 8007244:	fa11 f288 	uxtah	r2, r1, r8
 8007248:	1414      	asrs	r4, r2, #16
 800724a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800724e:	b292      	uxth	r2, r2
 8007250:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007254:	f84e 2b04 	str.w	r2, [lr], #4
 8007258:	1421      	asrs	r1, r4, #16
 800725a:	e7e0      	b.n	800721e <__mdiff+0xca>
 800725c:	3f01      	subs	r7, #1
 800725e:	e7ea      	b.n	8007236 <__mdiff+0xe2>
 8007260:	08007ba3 	.word	0x08007ba3
 8007264:	08007c14 	.word	0x08007c14

08007268 <__d2b>:
 8007268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800726c:	4689      	mov	r9, r1
 800726e:	2101      	movs	r1, #1
 8007270:	ec57 6b10 	vmov	r6, r7, d0
 8007274:	4690      	mov	r8, r2
 8007276:	f7ff fccf 	bl	8006c18 <_Balloc>
 800727a:	4604      	mov	r4, r0
 800727c:	b930      	cbnz	r0, 800728c <__d2b+0x24>
 800727e:	4602      	mov	r2, r0
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <__d2b+0xb0>)
 8007282:	4826      	ldr	r0, [pc, #152]	; (800731c <__d2b+0xb4>)
 8007284:	f240 310a 	movw	r1, #778	; 0x30a
 8007288:	f000 fb00 	bl	800788c <__assert_func>
 800728c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007294:	bb35      	cbnz	r5, 80072e4 <__d2b+0x7c>
 8007296:	2e00      	cmp	r6, #0
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	d028      	beq.n	80072ee <__d2b+0x86>
 800729c:	4668      	mov	r0, sp
 800729e:	9600      	str	r6, [sp, #0]
 80072a0:	f7ff fd82 	bl	8006da8 <__lo0bits>
 80072a4:	9900      	ldr	r1, [sp, #0]
 80072a6:	b300      	cbz	r0, 80072ea <__d2b+0x82>
 80072a8:	9a01      	ldr	r2, [sp, #4]
 80072aa:	f1c0 0320 	rsb	r3, r0, #32
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	430b      	orrs	r3, r1
 80072b4:	40c2      	lsrs	r2, r0
 80072b6:	6163      	str	r3, [r4, #20]
 80072b8:	9201      	str	r2, [sp, #4]
 80072ba:	9b01      	ldr	r3, [sp, #4]
 80072bc:	61a3      	str	r3, [r4, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bf14      	ite	ne
 80072c2:	2202      	movne	r2, #2
 80072c4:	2201      	moveq	r2, #1
 80072c6:	6122      	str	r2, [r4, #16]
 80072c8:	b1d5      	cbz	r5, 8007300 <__d2b+0x98>
 80072ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072ce:	4405      	add	r5, r0
 80072d0:	f8c9 5000 	str.w	r5, [r9]
 80072d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072d8:	f8c8 0000 	str.w	r0, [r8]
 80072dc:	4620      	mov	r0, r4
 80072de:	b003      	add	sp, #12
 80072e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072e8:	e7d5      	b.n	8007296 <__d2b+0x2e>
 80072ea:	6161      	str	r1, [r4, #20]
 80072ec:	e7e5      	b.n	80072ba <__d2b+0x52>
 80072ee:	a801      	add	r0, sp, #4
 80072f0:	f7ff fd5a 	bl	8006da8 <__lo0bits>
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	6163      	str	r3, [r4, #20]
 80072f8:	2201      	movs	r2, #1
 80072fa:	6122      	str	r2, [r4, #16]
 80072fc:	3020      	adds	r0, #32
 80072fe:	e7e3      	b.n	80072c8 <__d2b+0x60>
 8007300:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007304:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007308:	f8c9 0000 	str.w	r0, [r9]
 800730c:	6918      	ldr	r0, [r3, #16]
 800730e:	f7ff fd2b 	bl	8006d68 <__hi0bits>
 8007312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007316:	e7df      	b.n	80072d8 <__d2b+0x70>
 8007318:	08007ba3 	.word	0x08007ba3
 800731c:	08007c14 	.word	0x08007c14

08007320 <_calloc_r>:
 8007320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007322:	fba1 2402 	umull	r2, r4, r1, r2
 8007326:	b94c      	cbnz	r4, 800733c <_calloc_r+0x1c>
 8007328:	4611      	mov	r1, r2
 800732a:	9201      	str	r2, [sp, #4]
 800732c:	f000 f87a 	bl	8007424 <_malloc_r>
 8007330:	9a01      	ldr	r2, [sp, #4]
 8007332:	4605      	mov	r5, r0
 8007334:	b930      	cbnz	r0, 8007344 <_calloc_r+0x24>
 8007336:	4628      	mov	r0, r5
 8007338:	b003      	add	sp, #12
 800733a:	bd30      	pop	{r4, r5, pc}
 800733c:	220c      	movs	r2, #12
 800733e:	6002      	str	r2, [r0, #0]
 8007340:	2500      	movs	r5, #0
 8007342:	e7f8      	b.n	8007336 <_calloc_r+0x16>
 8007344:	4621      	mov	r1, r4
 8007346:	f7fd fdf3 	bl	8004f30 <memset>
 800734a:	e7f4      	b.n	8007336 <_calloc_r+0x16>

0800734c <_free_r>:
 800734c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800734e:	2900      	cmp	r1, #0
 8007350:	d044      	beq.n	80073dc <_free_r+0x90>
 8007352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007356:	9001      	str	r0, [sp, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f1a1 0404 	sub.w	r4, r1, #4
 800735e:	bfb8      	it	lt
 8007360:	18e4      	addlt	r4, r4, r3
 8007362:	f000 fb19 	bl	8007998 <__malloc_lock>
 8007366:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <_free_r+0x94>)
 8007368:	9801      	ldr	r0, [sp, #4]
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	b933      	cbnz	r3, 800737c <_free_r+0x30>
 800736e:	6063      	str	r3, [r4, #4]
 8007370:	6014      	str	r4, [r2, #0]
 8007372:	b003      	add	sp, #12
 8007374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007378:	f000 bb14 	b.w	80079a4 <__malloc_unlock>
 800737c:	42a3      	cmp	r3, r4
 800737e:	d908      	bls.n	8007392 <_free_r+0x46>
 8007380:	6825      	ldr	r5, [r4, #0]
 8007382:	1961      	adds	r1, r4, r5
 8007384:	428b      	cmp	r3, r1
 8007386:	bf01      	itttt	eq
 8007388:	6819      	ldreq	r1, [r3, #0]
 800738a:	685b      	ldreq	r3, [r3, #4]
 800738c:	1949      	addeq	r1, r1, r5
 800738e:	6021      	streq	r1, [r4, #0]
 8007390:	e7ed      	b.n	800736e <_free_r+0x22>
 8007392:	461a      	mov	r2, r3
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	b10b      	cbz	r3, 800739c <_free_r+0x50>
 8007398:	42a3      	cmp	r3, r4
 800739a:	d9fa      	bls.n	8007392 <_free_r+0x46>
 800739c:	6811      	ldr	r1, [r2, #0]
 800739e:	1855      	adds	r5, r2, r1
 80073a0:	42a5      	cmp	r5, r4
 80073a2:	d10b      	bne.n	80073bc <_free_r+0x70>
 80073a4:	6824      	ldr	r4, [r4, #0]
 80073a6:	4421      	add	r1, r4
 80073a8:	1854      	adds	r4, r2, r1
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	6011      	str	r1, [r2, #0]
 80073ae:	d1e0      	bne.n	8007372 <_free_r+0x26>
 80073b0:	681c      	ldr	r4, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	6053      	str	r3, [r2, #4]
 80073b6:	4421      	add	r1, r4
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	e7da      	b.n	8007372 <_free_r+0x26>
 80073bc:	d902      	bls.n	80073c4 <_free_r+0x78>
 80073be:	230c      	movs	r3, #12
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	e7d6      	b.n	8007372 <_free_r+0x26>
 80073c4:	6825      	ldr	r5, [r4, #0]
 80073c6:	1961      	adds	r1, r4, r5
 80073c8:	428b      	cmp	r3, r1
 80073ca:	bf04      	itt	eq
 80073cc:	6819      	ldreq	r1, [r3, #0]
 80073ce:	685b      	ldreq	r3, [r3, #4]
 80073d0:	6063      	str	r3, [r4, #4]
 80073d2:	bf04      	itt	eq
 80073d4:	1949      	addeq	r1, r1, r5
 80073d6:	6021      	streq	r1, [r4, #0]
 80073d8:	6054      	str	r4, [r2, #4]
 80073da:	e7ca      	b.n	8007372 <_free_r+0x26>
 80073dc:	b003      	add	sp, #12
 80073de:	bd30      	pop	{r4, r5, pc}
 80073e0:	20000488 	.word	0x20000488

080073e4 <sbrk_aligned>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	4e0e      	ldr	r6, [pc, #56]	; (8007420 <sbrk_aligned+0x3c>)
 80073e8:	460c      	mov	r4, r1
 80073ea:	6831      	ldr	r1, [r6, #0]
 80073ec:	4605      	mov	r5, r0
 80073ee:	b911      	cbnz	r1, 80073f6 <sbrk_aligned+0x12>
 80073f0:	f000 f9e6 	bl	80077c0 <_sbrk_r>
 80073f4:	6030      	str	r0, [r6, #0]
 80073f6:	4621      	mov	r1, r4
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 f9e1 	bl	80077c0 <_sbrk_r>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d00a      	beq.n	8007418 <sbrk_aligned+0x34>
 8007402:	1cc4      	adds	r4, r0, #3
 8007404:	f024 0403 	bic.w	r4, r4, #3
 8007408:	42a0      	cmp	r0, r4
 800740a:	d007      	beq.n	800741c <sbrk_aligned+0x38>
 800740c:	1a21      	subs	r1, r4, r0
 800740e:	4628      	mov	r0, r5
 8007410:	f000 f9d6 	bl	80077c0 <_sbrk_r>
 8007414:	3001      	adds	r0, #1
 8007416:	d101      	bne.n	800741c <sbrk_aligned+0x38>
 8007418:	f04f 34ff 	mov.w	r4, #4294967295
 800741c:	4620      	mov	r0, r4
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	2000048c 	.word	0x2000048c

08007424 <_malloc_r>:
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	1ccd      	adds	r5, r1, #3
 800742a:	f025 0503 	bic.w	r5, r5, #3
 800742e:	3508      	adds	r5, #8
 8007430:	2d0c      	cmp	r5, #12
 8007432:	bf38      	it	cc
 8007434:	250c      	movcc	r5, #12
 8007436:	2d00      	cmp	r5, #0
 8007438:	4607      	mov	r7, r0
 800743a:	db01      	blt.n	8007440 <_malloc_r+0x1c>
 800743c:	42a9      	cmp	r1, r5
 800743e:	d905      	bls.n	800744c <_malloc_r+0x28>
 8007440:	230c      	movs	r3, #12
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	2600      	movs	r6, #0
 8007446:	4630      	mov	r0, r6
 8007448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744c:	4e2e      	ldr	r6, [pc, #184]	; (8007508 <_malloc_r+0xe4>)
 800744e:	f000 faa3 	bl	8007998 <__malloc_lock>
 8007452:	6833      	ldr	r3, [r6, #0]
 8007454:	461c      	mov	r4, r3
 8007456:	bb34      	cbnz	r4, 80074a6 <_malloc_r+0x82>
 8007458:	4629      	mov	r1, r5
 800745a:	4638      	mov	r0, r7
 800745c:	f7ff ffc2 	bl	80073e4 <sbrk_aligned>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	4604      	mov	r4, r0
 8007464:	d14d      	bne.n	8007502 <_malloc_r+0xde>
 8007466:	6834      	ldr	r4, [r6, #0]
 8007468:	4626      	mov	r6, r4
 800746a:	2e00      	cmp	r6, #0
 800746c:	d140      	bne.n	80074f0 <_malloc_r+0xcc>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	4631      	mov	r1, r6
 8007472:	4638      	mov	r0, r7
 8007474:	eb04 0803 	add.w	r8, r4, r3
 8007478:	f000 f9a2 	bl	80077c0 <_sbrk_r>
 800747c:	4580      	cmp	r8, r0
 800747e:	d13a      	bne.n	80074f6 <_malloc_r+0xd2>
 8007480:	6821      	ldr	r1, [r4, #0]
 8007482:	3503      	adds	r5, #3
 8007484:	1a6d      	subs	r5, r5, r1
 8007486:	f025 0503 	bic.w	r5, r5, #3
 800748a:	3508      	adds	r5, #8
 800748c:	2d0c      	cmp	r5, #12
 800748e:	bf38      	it	cc
 8007490:	250c      	movcc	r5, #12
 8007492:	4629      	mov	r1, r5
 8007494:	4638      	mov	r0, r7
 8007496:	f7ff ffa5 	bl	80073e4 <sbrk_aligned>
 800749a:	3001      	adds	r0, #1
 800749c:	d02b      	beq.n	80074f6 <_malloc_r+0xd2>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	442b      	add	r3, r5
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	e00e      	b.n	80074c4 <_malloc_r+0xa0>
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	1b52      	subs	r2, r2, r5
 80074aa:	d41e      	bmi.n	80074ea <_malloc_r+0xc6>
 80074ac:	2a0b      	cmp	r2, #11
 80074ae:	d916      	bls.n	80074de <_malloc_r+0xba>
 80074b0:	1961      	adds	r1, r4, r5
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	6025      	str	r5, [r4, #0]
 80074b6:	bf18      	it	ne
 80074b8:	6059      	strne	r1, [r3, #4]
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	bf08      	it	eq
 80074be:	6031      	streq	r1, [r6, #0]
 80074c0:	5162      	str	r2, [r4, r5]
 80074c2:	604b      	str	r3, [r1, #4]
 80074c4:	4638      	mov	r0, r7
 80074c6:	f104 060b 	add.w	r6, r4, #11
 80074ca:	f000 fa6b 	bl	80079a4 <__malloc_unlock>
 80074ce:	f026 0607 	bic.w	r6, r6, #7
 80074d2:	1d23      	adds	r3, r4, #4
 80074d4:	1af2      	subs	r2, r6, r3
 80074d6:	d0b6      	beq.n	8007446 <_malloc_r+0x22>
 80074d8:	1b9b      	subs	r3, r3, r6
 80074da:	50a3      	str	r3, [r4, r2]
 80074dc:	e7b3      	b.n	8007446 <_malloc_r+0x22>
 80074de:	6862      	ldr	r2, [r4, #4]
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	bf0c      	ite	eq
 80074e4:	6032      	streq	r2, [r6, #0]
 80074e6:	605a      	strne	r2, [r3, #4]
 80074e8:	e7ec      	b.n	80074c4 <_malloc_r+0xa0>
 80074ea:	4623      	mov	r3, r4
 80074ec:	6864      	ldr	r4, [r4, #4]
 80074ee:	e7b2      	b.n	8007456 <_malloc_r+0x32>
 80074f0:	4634      	mov	r4, r6
 80074f2:	6876      	ldr	r6, [r6, #4]
 80074f4:	e7b9      	b.n	800746a <_malloc_r+0x46>
 80074f6:	230c      	movs	r3, #12
 80074f8:	603b      	str	r3, [r7, #0]
 80074fa:	4638      	mov	r0, r7
 80074fc:	f000 fa52 	bl	80079a4 <__malloc_unlock>
 8007500:	e7a1      	b.n	8007446 <_malloc_r+0x22>
 8007502:	6025      	str	r5, [r4, #0]
 8007504:	e7de      	b.n	80074c4 <_malloc_r+0xa0>
 8007506:	bf00      	nop
 8007508:	20000488 	.word	0x20000488

0800750c <__sfputc_r>:
 800750c:	6893      	ldr	r3, [r2, #8]
 800750e:	3b01      	subs	r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	b410      	push	{r4}
 8007514:	6093      	str	r3, [r2, #8]
 8007516:	da08      	bge.n	800752a <__sfputc_r+0x1e>
 8007518:	6994      	ldr	r4, [r2, #24]
 800751a:	42a3      	cmp	r3, r4
 800751c:	db01      	blt.n	8007522 <__sfputc_r+0x16>
 800751e:	290a      	cmp	r1, #10
 8007520:	d103      	bne.n	800752a <__sfputc_r+0x1e>
 8007522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007526:	f7fe ba03 	b.w	8005930 <__swbuf_r>
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	1c58      	adds	r0, r3, #1
 800752e:	6010      	str	r0, [r2, #0]
 8007530:	7019      	strb	r1, [r3, #0]
 8007532:	4608      	mov	r0, r1
 8007534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007538:	4770      	bx	lr

0800753a <__sfputs_r>:
 800753a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753c:	4606      	mov	r6, r0
 800753e:	460f      	mov	r7, r1
 8007540:	4614      	mov	r4, r2
 8007542:	18d5      	adds	r5, r2, r3
 8007544:	42ac      	cmp	r4, r5
 8007546:	d101      	bne.n	800754c <__sfputs_r+0x12>
 8007548:	2000      	movs	r0, #0
 800754a:	e007      	b.n	800755c <__sfputs_r+0x22>
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	463a      	mov	r2, r7
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ffda 	bl	800750c <__sfputc_r>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d1f3      	bne.n	8007544 <__sfputs_r+0xa>
 800755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007560 <_vfiprintf_r>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	460d      	mov	r5, r1
 8007566:	b09d      	sub	sp, #116	; 0x74
 8007568:	4614      	mov	r4, r2
 800756a:	4698      	mov	r8, r3
 800756c:	4606      	mov	r6, r0
 800756e:	b118      	cbz	r0, 8007578 <_vfiprintf_r+0x18>
 8007570:	6983      	ldr	r3, [r0, #24]
 8007572:	b90b      	cbnz	r3, 8007578 <_vfiprintf_r+0x18>
 8007574:	f7ff fa30 	bl	80069d8 <__sinit>
 8007578:	4b89      	ldr	r3, [pc, #548]	; (80077a0 <_vfiprintf_r+0x240>)
 800757a:	429d      	cmp	r5, r3
 800757c:	d11b      	bne.n	80075b6 <_vfiprintf_r+0x56>
 800757e:	6875      	ldr	r5, [r6, #4]
 8007580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007582:	07d9      	lsls	r1, r3, #31
 8007584:	d405      	bmi.n	8007592 <_vfiprintf_r+0x32>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	059a      	lsls	r2, r3, #22
 800758a:	d402      	bmi.n	8007592 <_vfiprintf_r+0x32>
 800758c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800758e:	f7ff fac6 	bl	8006b1e <__retarget_lock_acquire_recursive>
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	071b      	lsls	r3, r3, #28
 8007596:	d501      	bpl.n	800759c <_vfiprintf_r+0x3c>
 8007598:	692b      	ldr	r3, [r5, #16]
 800759a:	b9eb      	cbnz	r3, 80075d8 <_vfiprintf_r+0x78>
 800759c:	4629      	mov	r1, r5
 800759e:	4630      	mov	r0, r6
 80075a0:	f7fe fa18 	bl	80059d4 <__swsetup_r>
 80075a4:	b1c0      	cbz	r0, 80075d8 <_vfiprintf_r+0x78>
 80075a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075a8:	07dc      	lsls	r4, r3, #31
 80075aa:	d50e      	bpl.n	80075ca <_vfiprintf_r+0x6a>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	b01d      	add	sp, #116	; 0x74
 80075b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b6:	4b7b      	ldr	r3, [pc, #492]	; (80077a4 <_vfiprintf_r+0x244>)
 80075b8:	429d      	cmp	r5, r3
 80075ba:	d101      	bne.n	80075c0 <_vfiprintf_r+0x60>
 80075bc:	68b5      	ldr	r5, [r6, #8]
 80075be:	e7df      	b.n	8007580 <_vfiprintf_r+0x20>
 80075c0:	4b79      	ldr	r3, [pc, #484]	; (80077a8 <_vfiprintf_r+0x248>)
 80075c2:	429d      	cmp	r5, r3
 80075c4:	bf08      	it	eq
 80075c6:	68f5      	ldreq	r5, [r6, #12]
 80075c8:	e7da      	b.n	8007580 <_vfiprintf_r+0x20>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	0598      	lsls	r0, r3, #22
 80075ce:	d4ed      	bmi.n	80075ac <_vfiprintf_r+0x4c>
 80075d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075d2:	f7ff faa5 	bl	8006b20 <__retarget_lock_release_recursive>
 80075d6:	e7e9      	b.n	80075ac <_vfiprintf_r+0x4c>
 80075d8:	2300      	movs	r3, #0
 80075da:	9309      	str	r3, [sp, #36]	; 0x24
 80075dc:	2320      	movs	r3, #32
 80075de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e6:	2330      	movs	r3, #48	; 0x30
 80075e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077ac <_vfiprintf_r+0x24c>
 80075ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075f0:	f04f 0901 	mov.w	r9, #1
 80075f4:	4623      	mov	r3, r4
 80075f6:	469a      	mov	sl, r3
 80075f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075fc:	b10a      	cbz	r2, 8007602 <_vfiprintf_r+0xa2>
 80075fe:	2a25      	cmp	r2, #37	; 0x25
 8007600:	d1f9      	bne.n	80075f6 <_vfiprintf_r+0x96>
 8007602:	ebba 0b04 	subs.w	fp, sl, r4
 8007606:	d00b      	beq.n	8007620 <_vfiprintf_r+0xc0>
 8007608:	465b      	mov	r3, fp
 800760a:	4622      	mov	r2, r4
 800760c:	4629      	mov	r1, r5
 800760e:	4630      	mov	r0, r6
 8007610:	f7ff ff93 	bl	800753a <__sfputs_r>
 8007614:	3001      	adds	r0, #1
 8007616:	f000 80aa 	beq.w	800776e <_vfiprintf_r+0x20e>
 800761a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800761c:	445a      	add	r2, fp
 800761e:	9209      	str	r2, [sp, #36]	; 0x24
 8007620:	f89a 3000 	ldrb.w	r3, [sl]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80a2 	beq.w	800776e <_vfiprintf_r+0x20e>
 800762a:	2300      	movs	r3, #0
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007634:	f10a 0a01 	add.w	sl, sl, #1
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	9307      	str	r3, [sp, #28]
 800763c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007640:	931a      	str	r3, [sp, #104]	; 0x68
 8007642:	4654      	mov	r4, sl
 8007644:	2205      	movs	r2, #5
 8007646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764a:	4858      	ldr	r0, [pc, #352]	; (80077ac <_vfiprintf_r+0x24c>)
 800764c:	f7f8 fdc8 	bl	80001e0 <memchr>
 8007650:	9a04      	ldr	r2, [sp, #16]
 8007652:	b9d8      	cbnz	r0, 800768c <_vfiprintf_r+0x12c>
 8007654:	06d1      	lsls	r1, r2, #27
 8007656:	bf44      	itt	mi
 8007658:	2320      	movmi	r3, #32
 800765a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765e:	0713      	lsls	r3, r2, #28
 8007660:	bf44      	itt	mi
 8007662:	232b      	movmi	r3, #43	; 0x2b
 8007664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007668:	f89a 3000 	ldrb.w	r3, [sl]
 800766c:	2b2a      	cmp	r3, #42	; 0x2a
 800766e:	d015      	beq.n	800769c <_vfiprintf_r+0x13c>
 8007670:	9a07      	ldr	r2, [sp, #28]
 8007672:	4654      	mov	r4, sl
 8007674:	2000      	movs	r0, #0
 8007676:	f04f 0c0a 	mov.w	ip, #10
 800767a:	4621      	mov	r1, r4
 800767c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007680:	3b30      	subs	r3, #48	; 0x30
 8007682:	2b09      	cmp	r3, #9
 8007684:	d94e      	bls.n	8007724 <_vfiprintf_r+0x1c4>
 8007686:	b1b0      	cbz	r0, 80076b6 <_vfiprintf_r+0x156>
 8007688:	9207      	str	r2, [sp, #28]
 800768a:	e014      	b.n	80076b6 <_vfiprintf_r+0x156>
 800768c:	eba0 0308 	sub.w	r3, r0, r8
 8007690:	fa09 f303 	lsl.w	r3, r9, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	9304      	str	r3, [sp, #16]
 8007698:	46a2      	mov	sl, r4
 800769a:	e7d2      	b.n	8007642 <_vfiprintf_r+0xe2>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	1d19      	adds	r1, r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	9103      	str	r1, [sp, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bfbb      	ittet	lt
 80076a8:	425b      	neglt	r3, r3
 80076aa:	f042 0202 	orrlt.w	r2, r2, #2
 80076ae:	9307      	strge	r3, [sp, #28]
 80076b0:	9307      	strlt	r3, [sp, #28]
 80076b2:	bfb8      	it	lt
 80076b4:	9204      	strlt	r2, [sp, #16]
 80076b6:	7823      	ldrb	r3, [r4, #0]
 80076b8:	2b2e      	cmp	r3, #46	; 0x2e
 80076ba:	d10c      	bne.n	80076d6 <_vfiprintf_r+0x176>
 80076bc:	7863      	ldrb	r3, [r4, #1]
 80076be:	2b2a      	cmp	r3, #42	; 0x2a
 80076c0:	d135      	bne.n	800772e <_vfiprintf_r+0x1ce>
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	1d1a      	adds	r2, r3, #4
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	9203      	str	r2, [sp, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bfb8      	it	lt
 80076ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d2:	3402      	adds	r4, #2
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077bc <_vfiprintf_r+0x25c>
 80076da:	7821      	ldrb	r1, [r4, #0]
 80076dc:	2203      	movs	r2, #3
 80076de:	4650      	mov	r0, sl
 80076e0:	f7f8 fd7e 	bl	80001e0 <memchr>
 80076e4:	b140      	cbz	r0, 80076f8 <_vfiprintf_r+0x198>
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	eba0 000a 	sub.w	r0, r0, sl
 80076ec:	fa03 f000 	lsl.w	r0, r3, r0
 80076f0:	9b04      	ldr	r3, [sp, #16]
 80076f2:	4303      	orrs	r3, r0
 80076f4:	3401      	adds	r4, #1
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fc:	482c      	ldr	r0, [pc, #176]	; (80077b0 <_vfiprintf_r+0x250>)
 80076fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007702:	2206      	movs	r2, #6
 8007704:	f7f8 fd6c 	bl	80001e0 <memchr>
 8007708:	2800      	cmp	r0, #0
 800770a:	d03f      	beq.n	800778c <_vfiprintf_r+0x22c>
 800770c:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <_vfiprintf_r+0x254>)
 800770e:	bb1b      	cbnz	r3, 8007758 <_vfiprintf_r+0x1f8>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	3307      	adds	r3, #7
 8007714:	f023 0307 	bic.w	r3, r3, #7
 8007718:	3308      	adds	r3, #8
 800771a:	9303      	str	r3, [sp, #12]
 800771c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771e:	443b      	add	r3, r7
 8007720:	9309      	str	r3, [sp, #36]	; 0x24
 8007722:	e767      	b.n	80075f4 <_vfiprintf_r+0x94>
 8007724:	fb0c 3202 	mla	r2, ip, r2, r3
 8007728:	460c      	mov	r4, r1
 800772a:	2001      	movs	r0, #1
 800772c:	e7a5      	b.n	800767a <_vfiprintf_r+0x11a>
 800772e:	2300      	movs	r3, #0
 8007730:	3401      	adds	r4, #1
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	4619      	mov	r1, r3
 8007736:	f04f 0c0a 	mov.w	ip, #10
 800773a:	4620      	mov	r0, r4
 800773c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007740:	3a30      	subs	r2, #48	; 0x30
 8007742:	2a09      	cmp	r2, #9
 8007744:	d903      	bls.n	800774e <_vfiprintf_r+0x1ee>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0c5      	beq.n	80076d6 <_vfiprintf_r+0x176>
 800774a:	9105      	str	r1, [sp, #20]
 800774c:	e7c3      	b.n	80076d6 <_vfiprintf_r+0x176>
 800774e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007752:	4604      	mov	r4, r0
 8007754:	2301      	movs	r3, #1
 8007756:	e7f0      	b.n	800773a <_vfiprintf_r+0x1da>
 8007758:	ab03      	add	r3, sp, #12
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	462a      	mov	r2, r5
 800775e:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <_vfiprintf_r+0x258>)
 8007760:	a904      	add	r1, sp, #16
 8007762:	4630      	mov	r0, r6
 8007764:	f7fd fc8c 	bl	8005080 <_printf_float>
 8007768:	4607      	mov	r7, r0
 800776a:	1c78      	adds	r0, r7, #1
 800776c:	d1d6      	bne.n	800771c <_vfiprintf_r+0x1bc>
 800776e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007770:	07d9      	lsls	r1, r3, #31
 8007772:	d405      	bmi.n	8007780 <_vfiprintf_r+0x220>
 8007774:	89ab      	ldrh	r3, [r5, #12]
 8007776:	059a      	lsls	r2, r3, #22
 8007778:	d402      	bmi.n	8007780 <_vfiprintf_r+0x220>
 800777a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777c:	f7ff f9d0 	bl	8006b20 <__retarget_lock_release_recursive>
 8007780:	89ab      	ldrh	r3, [r5, #12]
 8007782:	065b      	lsls	r3, r3, #25
 8007784:	f53f af12 	bmi.w	80075ac <_vfiprintf_r+0x4c>
 8007788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800778a:	e711      	b.n	80075b0 <_vfiprintf_r+0x50>
 800778c:	ab03      	add	r3, sp, #12
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	462a      	mov	r2, r5
 8007792:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <_vfiprintf_r+0x258>)
 8007794:	a904      	add	r1, sp, #16
 8007796:	4630      	mov	r0, r6
 8007798:	f7fd ff16 	bl	80055c8 <_printf_i>
 800779c:	e7e4      	b.n	8007768 <_vfiprintf_r+0x208>
 800779e:	bf00      	nop
 80077a0:	08007bd4 	.word	0x08007bd4
 80077a4:	08007bf4 	.word	0x08007bf4
 80077a8:	08007bb4 	.word	0x08007bb4
 80077ac:	08007d6c 	.word	0x08007d6c
 80077b0:	08007d76 	.word	0x08007d76
 80077b4:	08005081 	.word	0x08005081
 80077b8:	0800753b 	.word	0x0800753b
 80077bc:	08007d72 	.word	0x08007d72

080077c0 <_sbrk_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d06      	ldr	r5, [pc, #24]	; (80077dc <_sbrk_r+0x1c>)
 80077c4:	2300      	movs	r3, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	602b      	str	r3, [r5, #0]
 80077cc:	f7fa f86e 	bl	80018ac <_sbrk>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_sbrk_r+0x1a>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_sbrk_r+0x1a>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20000490 	.word	0x20000490

080077e0 <__sread>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	460c      	mov	r4, r1
 80077e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e8:	f000 f8e2 	bl	80079b0 <_read_r>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	bfab      	itete	ge
 80077f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077f2:	89a3      	ldrhlt	r3, [r4, #12]
 80077f4:	181b      	addge	r3, r3, r0
 80077f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077fa:	bfac      	ite	ge
 80077fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80077fe:	81a3      	strhlt	r3, [r4, #12]
 8007800:	bd10      	pop	{r4, pc}

08007802 <__swrite>:
 8007802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007806:	461f      	mov	r7, r3
 8007808:	898b      	ldrh	r3, [r1, #12]
 800780a:	05db      	lsls	r3, r3, #23
 800780c:	4605      	mov	r5, r0
 800780e:	460c      	mov	r4, r1
 8007810:	4616      	mov	r6, r2
 8007812:	d505      	bpl.n	8007820 <__swrite+0x1e>
 8007814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007818:	2302      	movs	r3, #2
 800781a:	2200      	movs	r2, #0
 800781c:	f000 f898 	bl	8007950 <_lseek_r>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800782a:	81a3      	strh	r3, [r4, #12]
 800782c:	4632      	mov	r2, r6
 800782e:	463b      	mov	r3, r7
 8007830:	4628      	mov	r0, r5
 8007832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	f000 b817 	b.w	8007868 <_write_r>

0800783a <__sseek>:
 800783a:	b510      	push	{r4, lr}
 800783c:	460c      	mov	r4, r1
 800783e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007842:	f000 f885 	bl	8007950 <_lseek_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	bf15      	itete	ne
 800784c:	6560      	strne	r0, [r4, #84]	; 0x54
 800784e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007856:	81a3      	strheq	r3, [r4, #12]
 8007858:	bf18      	it	ne
 800785a:	81a3      	strhne	r3, [r4, #12]
 800785c:	bd10      	pop	{r4, pc}

0800785e <__sclose>:
 800785e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007862:	f000 b831 	b.w	80078c8 <_close_r>
	...

08007868 <_write_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	; (8007888 <_write_r+0x20>)
 800786c:	4604      	mov	r4, r0
 800786e:	4608      	mov	r0, r1
 8007870:	4611      	mov	r1, r2
 8007872:	2200      	movs	r2, #0
 8007874:	602a      	str	r2, [r5, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f7f9 ffc8 	bl	800180c <_write>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_write_r+0x1e>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_write_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	20000490 	.word	0x20000490

0800788c <__assert_func>:
 800788c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800788e:	4614      	mov	r4, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <__assert_func+0x2c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4605      	mov	r5, r0
 8007898:	68d8      	ldr	r0, [r3, #12]
 800789a:	b14c      	cbz	r4, 80078b0 <__assert_func+0x24>
 800789c:	4b07      	ldr	r3, [pc, #28]	; (80078bc <__assert_func+0x30>)
 800789e:	9100      	str	r1, [sp, #0]
 80078a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078a4:	4906      	ldr	r1, [pc, #24]	; (80078c0 <__assert_func+0x34>)
 80078a6:	462b      	mov	r3, r5
 80078a8:	f000 f81e 	bl	80078e8 <fiprintf>
 80078ac:	f000 f89f 	bl	80079ee <abort>
 80078b0:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <__assert_func+0x38>)
 80078b2:	461c      	mov	r4, r3
 80078b4:	e7f3      	b.n	800789e <__assert_func+0x12>
 80078b6:	bf00      	nop
 80078b8:	2000000c 	.word	0x2000000c
 80078bc:	08007d7d 	.word	0x08007d7d
 80078c0:	08007d8a 	.word	0x08007d8a
 80078c4:	08007db8 	.word	0x08007db8

080078c8 <_close_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <_close_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7f9 ffb6 	bl	8001844 <_close>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_close_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_close_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20000490 	.word	0x20000490

080078e8 <fiprintf>:
 80078e8:	b40e      	push	{r1, r2, r3}
 80078ea:	b503      	push	{r0, r1, lr}
 80078ec:	4601      	mov	r1, r0
 80078ee:	ab03      	add	r3, sp, #12
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <fiprintf+0x20>)
 80078f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f6:	6800      	ldr	r0, [r0, #0]
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	f7ff fe31 	bl	8007560 <_vfiprintf_r>
 80078fe:	b002      	add	sp, #8
 8007900:	f85d eb04 	ldr.w	lr, [sp], #4
 8007904:	b003      	add	sp, #12
 8007906:	4770      	bx	lr
 8007908:	2000000c 	.word	0x2000000c

0800790c <_fstat_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d07      	ldr	r5, [pc, #28]	; (800792c <_fstat_r+0x20>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	f7f9 ff9f 	bl	800185c <_fstat>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	d102      	bne.n	8007928 <_fstat_r+0x1c>
 8007922:	682b      	ldr	r3, [r5, #0]
 8007924:	b103      	cbz	r3, 8007928 <_fstat_r+0x1c>
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	bd38      	pop	{r3, r4, r5, pc}
 800792a:	bf00      	nop
 800792c:	20000490 	.word	0x20000490

08007930 <_isatty_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4d06      	ldr	r5, [pc, #24]	; (800794c <_isatty_r+0x1c>)
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	f7f9 ff9e 	bl	800187c <_isatty>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_isatty_r+0x1a>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_isatty_r+0x1a>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20000490 	.word	0x20000490

08007950 <_lseek_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d07      	ldr	r5, [pc, #28]	; (8007970 <_lseek_r+0x20>)
 8007954:	4604      	mov	r4, r0
 8007956:	4608      	mov	r0, r1
 8007958:	4611      	mov	r1, r2
 800795a:	2200      	movs	r2, #0
 800795c:	602a      	str	r2, [r5, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	f7f9 ff97 	bl	8001892 <_lseek>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_lseek_r+0x1e>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_lseek_r+0x1e>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20000490 	.word	0x20000490

08007974 <__ascii_mbtowc>:
 8007974:	b082      	sub	sp, #8
 8007976:	b901      	cbnz	r1, 800797a <__ascii_mbtowc+0x6>
 8007978:	a901      	add	r1, sp, #4
 800797a:	b142      	cbz	r2, 800798e <__ascii_mbtowc+0x1a>
 800797c:	b14b      	cbz	r3, 8007992 <__ascii_mbtowc+0x1e>
 800797e:	7813      	ldrb	r3, [r2, #0]
 8007980:	600b      	str	r3, [r1, #0]
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	1e10      	subs	r0, r2, #0
 8007986:	bf18      	it	ne
 8007988:	2001      	movne	r0, #1
 800798a:	b002      	add	sp, #8
 800798c:	4770      	bx	lr
 800798e:	4610      	mov	r0, r2
 8007990:	e7fb      	b.n	800798a <__ascii_mbtowc+0x16>
 8007992:	f06f 0001 	mvn.w	r0, #1
 8007996:	e7f8      	b.n	800798a <__ascii_mbtowc+0x16>

08007998 <__malloc_lock>:
 8007998:	4801      	ldr	r0, [pc, #4]	; (80079a0 <__malloc_lock+0x8>)
 800799a:	f7ff b8c0 	b.w	8006b1e <__retarget_lock_acquire_recursive>
 800799e:	bf00      	nop
 80079a0:	20000484 	.word	0x20000484

080079a4 <__malloc_unlock>:
 80079a4:	4801      	ldr	r0, [pc, #4]	; (80079ac <__malloc_unlock+0x8>)
 80079a6:	f7ff b8bb 	b.w	8006b20 <__retarget_lock_release_recursive>
 80079aa:	bf00      	nop
 80079ac:	20000484 	.word	0x20000484

080079b0 <_read_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d07      	ldr	r5, [pc, #28]	; (80079d0 <_read_r+0x20>)
 80079b4:	4604      	mov	r4, r0
 80079b6:	4608      	mov	r0, r1
 80079b8:	4611      	mov	r1, r2
 80079ba:	2200      	movs	r2, #0
 80079bc:	602a      	str	r2, [r5, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	f7f9 ff07 	bl	80017d2 <_read>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_read_r+0x1e>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_read_r+0x1e>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	20000490 	.word	0x20000490

080079d4 <__ascii_wctomb>:
 80079d4:	b149      	cbz	r1, 80079ea <__ascii_wctomb+0x16>
 80079d6:	2aff      	cmp	r2, #255	; 0xff
 80079d8:	bf85      	ittet	hi
 80079da:	238a      	movhi	r3, #138	; 0x8a
 80079dc:	6003      	strhi	r3, [r0, #0]
 80079de:	700a      	strbls	r2, [r1, #0]
 80079e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80079e4:	bf98      	it	ls
 80079e6:	2001      	movls	r0, #1
 80079e8:	4770      	bx	lr
 80079ea:	4608      	mov	r0, r1
 80079ec:	4770      	bx	lr

080079ee <abort>:
 80079ee:	b508      	push	{r3, lr}
 80079f0:	2006      	movs	r0, #6
 80079f2:	f000 f82b 	bl	8007a4c <raise>
 80079f6:	2001      	movs	r0, #1
 80079f8:	f7f9 fee1 	bl	80017be <_exit>

080079fc <_raise_r>:
 80079fc:	291f      	cmp	r1, #31
 80079fe:	b538      	push	{r3, r4, r5, lr}
 8007a00:	4604      	mov	r4, r0
 8007a02:	460d      	mov	r5, r1
 8007a04:	d904      	bls.n	8007a10 <_raise_r+0x14>
 8007a06:	2316      	movs	r3, #22
 8007a08:	6003      	str	r3, [r0, #0]
 8007a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a12:	b112      	cbz	r2, 8007a1a <_raise_r+0x1e>
 8007a14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a18:	b94b      	cbnz	r3, 8007a2e <_raise_r+0x32>
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 f830 	bl	8007a80 <_getpid_r>
 8007a20:	462a      	mov	r2, r5
 8007a22:	4601      	mov	r1, r0
 8007a24:	4620      	mov	r0, r4
 8007a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a2a:	f000 b817 	b.w	8007a5c <_kill_r>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d00a      	beq.n	8007a48 <_raise_r+0x4c>
 8007a32:	1c59      	adds	r1, r3, #1
 8007a34:	d103      	bne.n	8007a3e <_raise_r+0x42>
 8007a36:	2316      	movs	r3, #22
 8007a38:	6003      	str	r3, [r0, #0]
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	e7e7      	b.n	8007a0e <_raise_r+0x12>
 8007a3e:	2400      	movs	r4, #0
 8007a40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a44:	4628      	mov	r0, r5
 8007a46:	4798      	blx	r3
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e7e0      	b.n	8007a0e <_raise_r+0x12>

08007a4c <raise>:
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <raise+0xc>)
 8007a4e:	4601      	mov	r1, r0
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	f7ff bfd3 	b.w	80079fc <_raise_r>
 8007a56:	bf00      	nop
 8007a58:	2000000c 	.word	0x2000000c

08007a5c <_kill_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_kill_r+0x20>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	f7f9 fe98 	bl	800179e <_kill>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d102      	bne.n	8007a78 <_kill_r+0x1c>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	b103      	cbz	r3, 8007a78 <_kill_r+0x1c>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000490 	.word	0x20000490

08007a80 <_getpid_r>:
 8007a80:	f7f9 be85 	b.w	800178e <_getpid>

08007a84 <_init>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr

08007a90 <_fini>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	bf00      	nop
 8007a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a96:	bc08      	pop	{r3}
 8007a98:	469e      	mov	lr, r3
 8007a9a:	4770      	bx	lr
