
f373cc_psd_mirror_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000792c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007ac0  08007ac0  00017ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee4  08007ee4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ee4  08007ee4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ee4  08007ee4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee4  08007ee4  00017ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  080080c8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080080c8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102e1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f66  00000000  00000000  000304ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  000332f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0ad  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118a3  00000000  00000000  0005117d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab61a  00000000  00000000  00062a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e03a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  0010e08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007aa4 	.word	0x08007aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007aa4 	.word	0x08007aa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fefe 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f828 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fa8e 	bl	80010d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bb8:	f000 f87e 	bl	8000cb8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bbc:	f000 f8ba 	bl	8000d34 <MX_SPI2_Init>
  MX_TIM17_Init();
 8000bc0:	f000 f9e0 	bl	8000f84 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000bc4:	f000 fa56 	bl	8001074 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000bc8:	f000 f916 	bl	8000df8 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000bcc:	f000 f962 	bl	8000e94 <MX_TIM16_Init>
  MX_TIM13_Init();
 8000bd0:	f000 f8ee 	bl	8000db0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  printf("boink\n");
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <main+0x4c>)
 8000bd6:	f004 feb1 	bl	800593c <puts>
  HAL_Delay(10);
  MCP3561_PrintRegisters(&hspi1);
  printf("\n");
  */

  setup_done = true;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <main+0x50>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //MCP3561_PrintRegisters();
	  //printf("\n");
	  HAL_Delay(100);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f000 ff49 	bl	8001a78 <HAL_Delay>
	  printf("%d\n", (int)adc_val);  // updated in ISR
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <main+0x54>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <main+0x58>)
 8000bee:	f004 fe1f 	bl	8005830 <iprintf>
	  HAL_Delay(100);
 8000bf2:	e7f5      	b.n	8000be0 <main+0x38>
 8000bf4:	08007ac0 	.word	0x08007ac0
 8000bf8:	20000478 	.word	0x20000478
 8000bfc:	20000474 	.word	0x20000474
 8000c00:	08007ac8 	.word	0x08007ac8

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b09a      	sub	sp, #104	; 0x68
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 f99a 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	222c      	movs	r2, #44	; 0x2c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 f98c 	bl	8004f4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c34:	2301      	movs	r3, #1
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c42:	2301      	movs	r3, #1
 8000c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000c50:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000c54:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 f9ec 	bl	8002038 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c66:	f000 fb73 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c84:	2102      	movs	r1, #2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fa14 	bl	80030b4 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c92:	f000 fb5d 	bl	8001350 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fc3d 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cac:	f000 fb50 	bl	8001350 <Error_Handler>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3768      	adds	r7, #104	; 0x68
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_SPI1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cee:	2210      	movs	r2, #16
 8000cf0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d12:	2208      	movs	r2, #8
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_SPI1_Init+0x74>)
 8000d18:	f002 fd76 	bl	8003808 <HAL_SPI_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fb15 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200001f8 	.word	0x200001f8
 8000d30:	40013000 	.word	0x40013000

08000d34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_SPI2_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d4c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d90:	2208      	movs	r2, #8
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_SPI2_Init+0x74>)
 8000d96:	f002 fd37 	bl	8003808 <HAL_SPI_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000da0:	f000 fad6 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000025c 	.word	0x2000025c
 8000dac:	40003800 	.word	0x40003800

08000db0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <MX_TIM13_Init+0x44>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dcc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM13_Init+0x40>)
 8000ddc:	f003 f936 	bl	800404c <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000de6:	f000 fab3 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002c0 	.word	0x200002c0
 8000df4:	40001c00 	.word	0x40001c00

08000df8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <MX_TIM14_Init+0x98>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e28:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e36:	4815      	ldr	r0, [pc, #84]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e38:	f003 f908 	bl	800404c <HAL_TIM_Base_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000e42:	f000 fa85 	bl	8001350 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e48:	f003 f94f 	bl	80040ea <HAL_TIM_OC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000e52:	f000 fa7d 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e6e:	f003 f995 	bl	800419c <HAL_TIM_OC_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000e78:	f000 fa6a 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM14_Init+0x94>)
 8000e7e:	f000 fb9d 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000030c 	.word	0x2000030c
 8000e90:	40002000 	.word	0x40002000

08000e94 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b090      	sub	sp, #64	; 0x40
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 f849 	bl	8004f4c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ebc:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <MX_TIM16_Init+0xec>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ee6:	4825      	ldr	r0, [pc, #148]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ee8:	f003 f8b0 	bl	800404c <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ef2:	f000 fa2d 	bl	8001350 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000ef8:	f003 f8f7 	bl	80040ea <HAL_TIM_OC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000f02:	f000 fa25 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4814      	ldr	r0, [pc, #80]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000f2c:	f003 f936 	bl	800419c <HAL_TIM_OC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000f36:	f000 fa0b 	bl	8001350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000f5e:	f003 fb6c 	bl	800463a <HAL_TIMEx_ConfigBreakDeadTime>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000f68:	f000 f9f2 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM16_Init+0xe8>)
 8000f6e:	f000 fb25 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3740      	adds	r7, #64	; 0x40
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000358 	.word	0x20000358
 8000f80:	40014400 	.word	0x40014400

08000f84 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 ffd1 	bl	8004f4c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fac:	4a30      	ldr	r2, [pc, #192]	; (8001070 <MX_TIM17_Init+0xec>)
 8000fae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fd8:	f003 f838 	bl	800404c <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000fe2:	f000 f9b5 	bl	8001350 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000fe6:	4821      	ldr	r0, [pc, #132]	; (800106c <MX_TIM17_Init+0xe8>)
 8000fe8:	f003 f87f 	bl	80040ea <HAL_TIM_OC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000ff2:	f000 f9ad 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <MX_TIM17_Init+0xe8>)
 800101c:	f003 f8be 	bl	800419c <HAL_TIM_OC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001026:	f000 f993 	bl	8001350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001042:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <MX_TIM17_Init+0xe8>)
 800104e:	f003 faf4 	bl	800463a <HAL_TIMEx_ConfigBreakDeadTime>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001058:	f000 f97a 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <MX_TIM17_Init+0xe8>)
 800105e:	f000 faad 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8001062:	bf00      	nop
 8001064:	3740      	adds	r7, #64	; 0x40
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200003a4 	.word	0x200003a4
 8001070:	40014800 	.word	0x40014800

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <MX_USART2_UART_Init+0x5c>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010b8:	f003 fb11 	bl	80046de <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c2:	f000 f945 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200003f0 	.word	0x200003f0
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <MX_GPIO_Init+0x13c>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a48      	ldr	r2, [pc, #288]	; (8001210 <MX_GPIO_Init+0x13c>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <MX_GPIO_Init+0x13c>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b43      	ldr	r3, [pc, #268]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	4a42      	ldr	r2, [pc, #264]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	6153      	str	r3, [r2, #20]
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <MX_GPIO_Init+0x13c>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a3c      	ldr	r2, [pc, #240]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6153      	str	r3, [r2, #20]
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a36      	ldr	r2, [pc, #216]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <MX_GPIO_Init+0x13c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MEMS_HV_EN_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f000 ff40 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f244 01c0 	movw	r1, #16576	; 0x40c0
 800115e:	482d      	ldr	r0, [pc, #180]	; (8001214 <MX_GPIO_Init+0x140>)
 8001160:	f000 ff3a 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001164:	2310      	movs	r3, #16
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f000 fdb1 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001182:	2302      	movs	r3, #2
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001186:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	481f      	ldr	r0, [pc, #124]	; (8001214 <MX_GPIO_Init+0x140>)
 8001198:	f000 fda4 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800119c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4817      	ldr	r0, [pc, #92]	; (8001214 <MX_GPIO_Init+0x140>)
 80011b6:	f000 fd95 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_HV_EN_Pin */
  GPIO_InitStruct.Pin = MEMS_HV_EN_Pin;
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_HV_EN_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 fd85 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <MX_GPIO_Init+0x140>)
 80011f2:	f000 fd77 	bl	8001ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fd3b 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001200:	2007      	movs	r0, #7
 8001202:	f000 fd54 	bl	8001cae <HAL_NVIC_EnableIRQ>

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400

08001218 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001220:	1d39      	adds	r1, r7, #4
 8001222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001226:	2201      	movs	r2, #1
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <__io_putchar+0x20>)
 800122a:	f003 faa6 	bl	800477a <HAL_UART_Transmit>

    return ch;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200003f0 	.word	0x200003f0

0800123c <HAL_GPIO_EXTI_Callback>:

/**
* @brief Interrupt callback for GPIOs
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af02      	add	r7, sp, #8
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
	/* @todo correct EXTI pin */
    if ( GPIO_Pin == GPIO_PIN_6) {
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2b40      	cmp	r3, #64	; 0x40
 800124a:	d171      	bne.n	8001330 <HAL_GPIO_EXTI_Callback+0xf4>
    	if(setup_done){
 800124c:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <HAL_GPIO_EXTI_Callback+0xfc>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d06c      	beq.n	8001330 <HAL_GPIO_EXTI_Callback+0xf4>
    		uint8_t val[5] = {0,0,0,0,0};
 8001256:	4a39      	ldr	r2, [pc, #228]	; (800133c <HAL_GPIO_EXTI_Callback+0x100>)
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001260:	6018      	str	r0, [r3, #0]
 8001262:	3304      	adds	r3, #4
 8001264:	7019      	strb	r1, [r3, #0]
    		uint8_t cmd[5] = {0,0,0,0,0};
 8001266:	4a35      	ldr	r2, [pc, #212]	; (800133c <HAL_GPIO_EXTI_Callback+0x100>)
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001270:	6018      	str	r0, [r3, #0]
 8001272:	3304      	adds	r3, #4
 8001274:	7019      	strb	r1, [r3, #0]
    		cmd[0] = MCP3561_SREAD_DATA_COMMAND;
 8001276:	2341      	movs	r3, #65	; 0x41
 8001278:	753b      	strb	r3, [r7, #20]
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2110      	movs	r1, #16
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f000 fea9 	bl	8001fd8 <HAL_GPIO_WritePin>
    		// non-blocking "HAL_SPI_TransmitReceive_IT" does not work
    		// because we need to create CS signal manually
    		// the timout therefore must not be greater than 1/fs
    		// e.g. at 300 Hz --> 3ms
    		HAL_SPI_TransmitReceive(&hspi1, &cmd[0], &val[0], 5, 1);
 8001286:	f107 021c 	add.w	r2, r7, #28
 800128a:	f107 0114 	add.w	r1, r7, #20
 800128e:	2301      	movs	r3, #1
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2305      	movs	r3, #5
 8001294:	482a      	ldr	r0, [pc, #168]	; (8001340 <HAL_GPIO_EXTI_Callback+0x104>)
 8001296:	f002 fb62 	bl	800395e <HAL_SPI_TransmitReceive>
    		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 800129a:	2201      	movs	r2, #1
 800129c:	2110      	movs	r1, #16
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f000 fe99 	bl	8001fd8 <HAL_GPIO_WritePin>
    		adc_val = (val[1] << 16) | (val[2] << 8) | val[3];
 80012a6:	7f7b      	ldrb	r3, [r7, #29]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	4313      	orrs	r3, r2
 80012b0:	7ffa      	ldrb	r2, [r7, #31]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_GPIO_EXTI_Callback+0x108>)
 80012b8:	601a      	str	r2, [r3, #0]

    		float volts = (float)adc_val/(8388607.0f)*3.3f;
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_GPIO_EXTI_Callback+0x108>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001348 <HAL_GPIO_EXTI_Callback+0x10c>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800134c <HAL_GPIO_EXTI_Callback+0x110>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    		uint8_t str[11];
    		for(int i=0; i<10; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012de:	e008      	b.n	80012f2 <HAL_GPIO_EXTI_Callback+0xb6>
    			str[i] = ' ';
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e6:	4413      	add	r3, r2
 80012e8:	2220      	movs	r2, #32
 80012ea:	701a      	strb	r2, [r3, #0]
    		for(int i=0; i<10; i++)
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ee:	3301      	adds	r3, #1
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	ddf3      	ble.n	80012e0 <HAL_GPIO_EXTI_Callback+0xa4>
    		int i = (int)(volts*9.0f/3.3f);
 80012f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012fc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001304:	eddf 6a11 	vldr	s13, [pc, #68]	; 800134c <HAL_GPIO_EXTI_Callback+0x110>
 8001308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001310:	ee17 3a90 	vmov	r3, s15
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    		str[i] = '#';
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	4413      	add	r3, r2
 800131e:	2223      	movs	r2, #35	; 0x23
 8001320:	701a      	strb	r2, [r3, #0]
    		str[11] = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	74fb      	strb	r3, [r7, #19]
    		printf("%s\n", str);
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fb06 	bl	800593c <puts>
    		//printf("%03f\n", volts);
    		//printf("%d\n", (int)adc_val);  // updated in ISR
    	}
    }
}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000478 	.word	0x20000478
 800133c:	08007acc 	.word	0x08007acc
 8001340:	200001f8 	.word	0x200001f8
 8001344:	20000474 	.word	0x20000474
 8001348:	4afffffe 	.word	0x4afffffe
 800134c:	40533333 	.word	0x40533333

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x44>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_MspInit+0x44>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x44>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x44>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x44>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a4b      	ldr	r2, [pc, #300]	; (80014f0 <HAL_SPI_MspInit+0x14c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d145      	bne.n	8001452 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c6:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b48      	ldr	r3, [pc, #288]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	6153      	str	r3, [r2, #20]
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4a3e      	ldr	r2, [pc, #248]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6153      	str	r3, [r2, #20]
 8001402:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB0     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800141e:	2305      	movs	r3, #5
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f000 fc5a 	bl	8001ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001440:	2305      	movs	r3, #5
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	482b      	ldr	r0, [pc, #172]	; (80014f8 <HAL_SPI_MspInit+0x154>)
 800144c:	f000 fc4a 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001450:	e04a      	b.n	80014e8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a29      	ldr	r2, [pc, #164]	; (80014fc <HAL_SPI_MspInit+0x158>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d145      	bne.n	80014e8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	4a24      	ldr	r2, [pc, #144]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 8001462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001466:	61d3      	str	r3, [r2, #28]
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 800147a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147e:	6153      	str	r3, [r2, #20]
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 8001492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001496:	6153      	str	r3, [r2, #20]
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_SPI_MspInit+0x150>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b6:	2305      	movs	r3, #5
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <HAL_SPI_MspInit+0x154>)
 80014c2:	f000 fc0f 	bl	8001ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d8:	2305      	movs	r3, #5
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	; (8001500 <HAL_SPI_MspInit+0x15c>)
 80014e4:	f000 fbfe 	bl	8001ce4 <HAL_GPIO_Init>
}
 80014e8:	bf00      	nop
 80014ea:	3738      	adds	r7, #56	; 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013000 	.word	0x40013000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	40003800 	.word	0x40003800
 8001500:	48000c00 	.word	0x48000c00

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <HAL_TIM_Base_MspInit+0xa4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10c      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a24      	ldr	r2, [pc, #144]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800152e:	e034      	b.n	800159a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_TIM_Base_MspInit+0xac>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10c      	bne.n	8001554 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
}
 8001552:	e022      	b.n	800159a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <HAL_TIM_Base_MspInit+0xb0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10c      	bne.n	8001578 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
}
 8001576:	e010      	b.n	800159a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_TIM_Base_MspInit+0xb4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10b      	bne.n	800159a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_TIM_Base_MspInit+0xa8>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40001c00 	.word	0x40001c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40002000 	.word	0x40002000
 80015b4:	40014400 	.word	0x40014400
 80015b8:	40014800 	.word	0x40014800

080015bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a35      	ldr	r2, [pc, #212]	; (80016b0 <HAL_TIM_MspPostInit+0xf4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d11e      	bne.n	800161c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a34      	ldr	r2, [pc, #208]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA10     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001608:	2309      	movs	r3, #9
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f000 fb65 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800161a:	e045      	b.n	80016a8 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM16)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <HAL_TIM_MspPostInit+0xfc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d11e      	bne.n	8001664 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001650:	2301      	movs	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f000 fb41 	bl	8001ce4 <HAL_GPIO_Init>
}
 8001662:	e021      	b.n	80016a8 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM17)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_TIM_MspPostInit+0x100>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d11c      	bne.n	80016a8 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001698:	2301      	movs	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <HAL_TIM_MspPostInit+0x104>)
 80016a4:	f000 fb1e 	bl	8001ce4 <HAL_GPIO_Init>
}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40002000 	.word	0x40002000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40014400 	.word	0x40014400
 80016bc:	40014800 	.word	0x40014800
 80016c0:	48000400 	.word	0x48000400

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_UART_MspInit+0x7c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d128      	bne.n	8001738 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_UART_MspInit+0x80>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a16      	ldr	r2, [pc, #88]	; (8001744 <HAL_UART_MspInit+0x80>)
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_UART_MspInit+0x80>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_UART_MspInit+0x80>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_UART_MspInit+0x80>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	6153      	str	r3, [r2, #20]
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_UART_MspInit+0x80>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001716:	230c      	movs	r3, #12
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001726:	2307      	movs	r3, #7
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f000 fad6 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40004400 	.word	0x40004400
 8001744:	40021000 	.word	0x40021000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f950 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f000 fc31 	bl	8002008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
	return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_kill>:

int _kill(int pid, int sig)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c4:	f003 fb98 	bl	8004ef8 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2216      	movs	r2, #22
 80017cc:	601a      	str	r2, [r3, #0]
	return -1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_exit>:

void _exit (int status)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e2:	f04f 31ff 	mov.w	r1, #4294967295
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffe7 	bl	80017ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ec:	e7fe      	b.n	80017ec <_exit+0x12>

080017ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e00a      	b.n	8001816 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001800:	f3af 8000 	nop.w
 8001804:	4601      	mov	r1, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	60ba      	str	r2, [r7, #8]
 800180c:	b2ca      	uxtb	r2, r1
 800180e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3301      	adds	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	dbf0      	blt.n	8001800 <_read+0x12>
	}

return len;
 800181e:	687b      	ldr	r3, [r7, #4]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e009      	b.n	800184e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	60ba      	str	r2, [r7, #8]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fce8 	bl	8001218 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf1      	blt.n	800183a <_write+0x12>
	}
	return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_close>:

int _close(int file)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001888:	605a      	str	r2, [r3, #4]
	return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_isatty>:

int _isatty(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f003 fafe 	bl	8004ef8 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20008000 	.word	0x20008000
 8001928:	00000400 	.word	0x00000400
 800192c:	2000047c 	.word	0x2000047c
 8001930:	20000498 	.word	0x20000498

08001934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001990 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <LoopForever+0x6>)
  ldr r1, =_edata
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <LoopForever+0xe>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001974:	4c0b      	ldr	r4, [pc, #44]	; (80019a4 <LoopForever+0x16>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001982:	f7ff ffd7 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f003 fabd 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198a:	f7ff f90d 	bl	8000ba8 <main>

0800198e <LoopForever>:

LoopForever:
    b LoopForever
 800198e:	e7fe      	b.n	800198e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001990:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800199c:	08007eec 	.word	0x08007eec
  ldr r2, =_sbss
 80019a0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019a4:	20000494 	.word	0x20000494

080019a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_IRQHandler>
	...

080019ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_Init+0x28>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_Init+0x28>)
 80019b6:	f043 0310 	orr.w	r3, r3, #16
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f94f 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fcc8 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f967 	bl	8001cca <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 f92f 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000480 	.word	0x20000480

08001a60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000480 	.word	0x20000480

08001a78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff3e 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff8e 	bl	8001bb4 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff31 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e154      	b.n	8001f9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	4013      	ands	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8146 	beq.w	8001f98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d005      	beq.n	8001d24 <HAL_GPIO_Init+0x40>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d130      	bne.n	8001d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 0201 	and.w	r2, r3, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d017      	beq.n	8001dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d123      	bne.n	8001e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	6939      	ldr	r1, [r7, #16]
 8001e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0203 	and.w	r2, r3, #3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80a0 	beq.w	8001f98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e58:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <HAL_GPIO_Init+0x2d8>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_GPIO_Init+0x2d8>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <HAL_GPIO_Init+0x2d8>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e70:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e9a:	d019      	beq.n	8001ed0 <HAL_GPIO_Init+0x1ec>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <HAL_GPIO_Init+0x2e0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x1e8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_GPIO_Init+0x2e4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1dc>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e008      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	e006      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e004      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e002      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	f002 0203 	and.w	r2, r2, #3
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	4093      	lsls	r3, r2
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee2:	4937      	ldr	r1, [pc, #220]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef0:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f3e:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f92:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f aea3 	bne.w	8001cf4 <HAL_GPIO_Init+0x10>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	48000c00 	.word	0x48000c00
 8001fd0:	48001000 	.word	0x48001000
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f908 	bl	800123c <HAL_GPIO_EXTI_Callback>
  }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800203e:	af00      	add	r7, sp, #0
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002048:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	f001 b823 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 817d 	beq.w	800236e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002074:	4bbc      	ldr	r3, [pc, #752]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00c      	beq.n	800209a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002080:	4bb9      	ldr	r3, [pc, #740]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d15c      	bne.n	8002146 <HAL_RCC_OscConfig+0x10e>
 800208c:	4bb6      	ldr	r3, [pc, #728]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d155      	bne.n	8002146 <HAL_RCC_OscConfig+0x10e>
 800209a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_OscConfig+0x94>
 80020c6:	4ba8      	ldr	r3, [pc, #672]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e015      	b.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 80020cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020f4:	4b9c      	ldr	r3, [pc, #624]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002100:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002104:	fa92 f2a2 	rbit	r2, r2
 8002108:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800210c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f042 0220 	orr.w	r2, r2, #32
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f002 021f 	and.w	r2, r2, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 811f 	beq.w	800236c <HAL_RCC_OscConfig+0x334>
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 8116 	bne.w	800236c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	f000 bfaf 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x12e>
 8002158:	4b83      	ldr	r3, [pc, #524]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a82      	ldr	r2, [pc, #520]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e036      	b.n	80021d4 <HAL_RCC_OscConfig+0x19c>
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x158>
 8002176:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7b      	ldr	r2, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b79      	ldr	r3, [pc, #484]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a78      	ldr	r2, [pc, #480]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e021      	b.n	80021d4 <HAL_RCC_OscConfig+0x19c>
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x184>
 80021a2:	4b71      	ldr	r3, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a70      	ldr	r2, [pc, #448]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6e      	ldr	r3, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6d      	ldr	r2, [pc, #436]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0x19c>
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d4:	4b64      	ldr	r3, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	f023 020f 	bic.w	r2, r3, #15
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	495f      	ldr	r1, [pc, #380]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d059      	beq.n	80022b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fc2f 	bl	8001a60 <HAL_GetTick>
 8002202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff fc2a 	bl	8001a60 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d902      	bls.n	800221e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	f000 bf43 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
 800221e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002222:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002232:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d102      	bne.n	8002250 <HAL_RCC_OscConfig+0x218>
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	e015      	b.n	800227c <HAL_RCC_OscConfig+0x244>
 8002250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002254:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002268:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800226c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002280:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002284:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002290:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	f002 021f 	and.w	r2, r2, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f202 	lsl.w	r2, r1, r2
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ab      	beq.n	8002208 <HAL_RCC_OscConfig+0x1d0>
 80022b0:	e05d      	b.n	800236e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff fbd5 	bl	8001a60 <HAL_GetTick>
 80022b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fbd0 	bl	8001a60 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	; 0x64
 80022ca:	d902      	bls.n	80022d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	f000 bee9 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0x2cc>
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e015      	b.n	8002330 <HAL_RCC_OscConfig+0x2f8>
 8002304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002308:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002320:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_RCC_OscConfig+0x330>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002334:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002338:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800233c:	fa92 f2a2 	rbit	r2, r2
 8002340:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002344:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0220 	orr.w	r2, r2, #32
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ab      	bne.n	80022bc <HAL_RCC_OscConfig+0x284>
 8002364:	e003      	b.n	800236e <HAL_RCC_OscConfig+0x336>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 817d 	beq.w	800267e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002384:	4ba6      	ldr	r3, [pc, #664]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002390:	4ba3      	ldr	r3, [pc, #652]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d172      	bne.n	8002482 <HAL_RCC_OscConfig+0x44a>
 800239c:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d16c      	bne.n	8002482 <HAL_RCC_OscConfig+0x44a>
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d102      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3a0>
 80023d2:	4b93      	ldr	r3, [pc, #588]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	e013      	b.n	8002400 <HAL_RCC_OscConfig+0x3c8>
 80023d8:	2302      	movs	r3, #2
 80023da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023fc:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2202      	movs	r2, #2
 8002402:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002406:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800240a:	fa92 f2a2 	rbit	r2, r2
 800240e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002412:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002416:	fab2 f282 	clz	r2, r2
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f042 0220 	orr.w	r2, r2, #32
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f002 021f 	and.w	r2, r2, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCC_OscConfig+0x410>
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d002      	beq.n	8002448 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	f000 be2e 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b75      	ldr	r3, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	21f8      	movs	r1, #248	; 0xf8
 800245e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002466:	fa91 f1a1 	rbit	r1, r1
 800246a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800246e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002472:	fab1 f181 	clz	r1, r1
 8002476:	b2c9      	uxtb	r1, r1
 8002478:	408b      	lsls	r3, r1
 800247a:	4969      	ldr	r1, [pc, #420]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002480:	e0fd      	b.n	800267e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8088 	beq.w	80025a4 <HAL_RCC_OscConfig+0x56c>
 8002494:	2301      	movs	r3, #1
 8002496:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	2301      	movs	r3, #1
 80024be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff face 	bl	8001a60 <HAL_GetTick>
 80024c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ca:	f7ff fac9 	bl	8001a60 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d902      	bls.n	80024e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	f000 bde2 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d102      	bne.n	8002510 <HAL_RCC_OscConfig+0x4d8>
 800250a:	4b45      	ldr	r3, [pc, #276]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e013      	b.n	8002538 <HAL_RCC_OscConfig+0x500>
 8002510:	2302      	movs	r3, #2
 8002512:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002528:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2202      	movs	r2, #2
 800253a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800253e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002542:	fa92 f2a2 	rbit	r2, r2
 8002546:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800254a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0af      	beq.n	80024ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	21f8      	movs	r1, #248	; 0xf8
 8002580:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002588:	fa91 f1a1 	rbit	r1, r1
 800258c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002590:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002594:	fab1 f181 	clz	r1, r1
 8002598:	b2c9      	uxtb	r1, r1
 800259a:	408b      	lsls	r3, r1
 800259c:	4920      	ldr	r1, [pc, #128]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
 80025a2:	e06c      	b.n	800267e <HAL_RCC_OscConfig+0x646>
 80025a4:	2301      	movs	r3, #1
 80025a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80025b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	461a      	mov	r2, r3
 80025cc:	2300      	movs	r3, #0
 80025ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fa46 	bl	8001a60 <HAL_GetTick>
 80025d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025da:	f7ff fa41 	bl	8001a60 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f000 bd5a 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
 80025f0:	2302      	movs	r3, #2
 80025f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d104      	bne.n	8002624 <HAL_RCC_OscConfig+0x5ec>
 800261a:	4b01      	ldr	r3, [pc, #4]	; (8002620 <HAL_RCC_OscConfig+0x5e8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e015      	b.n	800264c <HAL_RCC_OscConfig+0x614>
 8002620:	40021000 	.word	0x40021000
 8002624:	2302      	movs	r3, #2
 8002626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002636:	2302      	movs	r3, #2
 8002638:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800263c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002648:	4bc8      	ldr	r3, [pc, #800]	; (800296c <HAL_RCC_OscConfig+0x934>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2202      	movs	r2, #2
 800264e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002652:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002656:	fa92 f2a2 	rbit	r2, r2
 800265a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800265e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f042 0220 	orr.w	r2, r2, #32
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f002 021f 	and.w	r2, r2, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ad      	bne.n	80025da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8110 	beq.w	80028b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d079      	beq.n	8002798 <HAL_RCC_OscConfig+0x760>
 80026a4:	2301      	movs	r3, #1
 80026a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80026b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4bab      	ldr	r3, [pc, #684]	; (8002970 <HAL_RCC_OscConfig+0x938>)
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	461a      	mov	r2, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7ff f9c7 	bl	8001a60 <HAL_GetTick>
 80026d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d8:	f7ff f9c2 	bl	8001a60 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d902      	bls.n	80026ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	f000 bcdb 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002708:	2202      	movs	r2, #2
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002746:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002748:	4b88      	ldr	r3, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x934>)
 800274a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002754:	2102      	movs	r1, #2
 8002756:	6019      	str	r1, [r3, #0]
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f1a3 	rbit	r1, r3
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800276e:	6019      	str	r1, [r3, #0]
  return result;
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0a0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x6a0>
 8002796:	e08d      	b.n	80028b4 <HAL_RCC_OscConfig+0x87c>
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027ba:	601a      	str	r2, [r3, #0]
  return result;
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b68      	ldr	r3, [pc, #416]	; (8002970 <HAL_RCC_OscConfig+0x938>)
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	2300      	movs	r3, #0
 80027d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7ff f941 	bl	8001a60 <HAL_GetTick>
 80027de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e4:	f7ff f93c 	bl	8001a60 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d902      	bls.n	80027fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	f000 bc55 	b.w	80030a4 <HAL_RCC_OscConfig+0x106c>
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002802:	2202      	movs	r2, #2
 8002804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002826:	2202      	movs	r2, #2
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002864:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x934>)
 8002868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002872:	2102      	movs	r1, #2
 8002874:	6019      	str	r1, [r3, #0]
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f1a3 	rbit	r1, r3
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800288c:	6019      	str	r1, [r3, #0]
  return result;
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d197      	bne.n	80027e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 81a1 	beq.w	8002c0c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_RCC_OscConfig+0x934>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d116      	bne.n	800290a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <HAL_RCC_OscConfig+0x934>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a22      	ldr	r2, [pc, #136]	; (800296c <HAL_RCC_OscConfig+0x934>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_OscConfig+0x934>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002902:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_RCC_OscConfig+0x93c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11a      	bne.n	800294c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_RCC_OscConfig+0x93c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_RCC_OscConfig+0x93c>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7ff f89d 	bl	8001a60 <HAL_GetTick>
 8002926:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	e009      	b.n	8002940 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7ff f898 	bl	8001a60 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e3b1      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_RCC_OscConfig+0x93c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ef      	beq.n	800292c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10d      	bne.n	8002978 <HAL_RCC_OscConfig+0x940>
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_OscConfig+0x934>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a02      	ldr	r2, [pc, #8]	; (800296c <HAL_RCC_OscConfig+0x934>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e03c      	b.n	80029e4 <HAL_RCC_OscConfig+0x9ac>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	10908120 	.word	0x10908120
 8002974:	40007000 	.word	0x40007000
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x96a>
 8002988:	4bc1      	ldr	r3, [pc, #772]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4ac0      	ldr	r2, [pc, #768]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4bbe      	ldr	r3, [pc, #760]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4abd      	ldr	r2, [pc, #756]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 800299a:	f023 0304 	bic.w	r3, r3, #4
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e020      	b.n	80029e4 <HAL_RCC_OscConfig+0x9ac>
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x994>
 80029b2:	4bb7      	ldr	r3, [pc, #732]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4ab6      	ldr	r2, [pc, #728]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	4bb4      	ldr	r3, [pc, #720]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4ab3      	ldr	r2, [pc, #716]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6213      	str	r3, [r2, #32]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0x9ac>
 80029cc:	4bb0      	ldr	r3, [pc, #704]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4aaf      	ldr	r2, [pc, #700]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	4bad      	ldr	r3, [pc, #692]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4aac      	ldr	r2, [pc, #688]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8081 	beq.w	8002af8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7ff f833 	bl	8001a60 <HAL_GetTick>
 80029fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7ff f82e 	bl	8001a60 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e345      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a20:	2202      	movs	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a44:	2202      	movs	r2, #2
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a5e:	601a      	str	r2, [r3, #0]
  return result;
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0xa4c>
 8002a7e:	4b84      	ldr	r3, [pc, #528]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	e013      	b.n	8002aac <HAL_RCC_OscConfig+0xa74>
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	6011      	str	r1, [r2, #0]
 8002ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002abc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	fa92 f1a2 	rbit	r1, r2
 8002ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ace:	6011      	str	r1, [r2, #0]
  return result;
 8002ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	fab2 f282 	clz	r2, r2
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f002 021f 	and.w	r2, r2, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d084      	beq.n	8002a00 <HAL_RCC_OscConfig+0x9c8>
 8002af6:	e07f      	b.n	8002bf8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe ffb2 	bl	8001a60 <HAL_GetTick>
 8002afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b00:	e00b      	b.n	8002b1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe ffad 	bl	8001a60 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e2c4      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b22:	2202      	movs	r2, #2
 8002b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	fa93 f2a3 	rbit	r2, r3
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b46:	2202      	movs	r2, #2
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fa93 f2a3 	rbit	r2, r3
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b60:	601a      	str	r2, [r3, #0]
  return result;
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_OscConfig+0xb4e>
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	e013      	b.n	8002bae <HAL_RCC_OscConfig+0xb76>
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b8e:	2202      	movs	r2, #2
 8002b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	6011      	str	r1, [r2, #0]
 8002bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	fa92 f1a2 	rbit	r1, r2
 8002bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bcc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bd0:	6011      	str	r1, [r2, #0]
  return result;
 8002bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f002 021f 	and.w	r2, r2, #31
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d184      	bne.n	8002b02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bf8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8242 	beq.w	80030a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_RCC_OscConfig+0xc58>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	f000 8213 	beq.w	8003052 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	f040 8162 	bne.w	8002f02 <HAL_RCC_OscConfig+0xeca>
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	fa93 f2a3 	rbit	r2, r3
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c62:	601a      	str	r2, [r3, #0]
  return result;
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2300      	movs	r3, #0
 8002c82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe feec 	bl	8001a60 <HAL_GetTick>
 8002c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8c:	e00c      	b.n	8002ca8 <HAL_RCC_OscConfig+0xc70>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe fee4 	bl	8001a60 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1fd      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ccc:	601a      	str	r2, [r3, #0]
  return result;
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002cd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0xcba>
 8002cec:	4bb0      	ldr	r3, [pc, #704]	; (8002fb0 <HAL_RCC_OscConfig+0xf78>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e027      	b.n	8002d42 <HAL_RCC_OscConfig+0xd0a>
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	fa93 f2a3 	rbit	r2, r3
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	4b9c      	ldr	r3, [pc, #624]	; (8002fb0 <HAL_RCC_OscConfig+0xf78>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d46:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d4e:	6011      	str	r1, [r2, #0]
 8002d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d54:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	fa92 f1a2 	rbit	r1, r2
 8002d5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d62:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d66:	6011      	str	r1, [r2, #0]
  return result;
 8002d68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d182      	bne.n	8002c94 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8e:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0xf78>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	430b      	orrs	r3, r1
 8002db0:	497f      	ldr	r1, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0xf78>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002dbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f2a3 	rbit	r2, r3
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dda:	601a      	str	r2, [r3, #0]
  return result;
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002de4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	461a      	mov	r2, r3
 8002df8:	2301      	movs	r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fe30 	bl	8001a60 <HAL_GetTick>
 8002e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e04:	e009      	b.n	8002e1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e06:	f7fe fe2b 	bl	8001a60 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e144      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e3e:	601a      	str	r2, [r3, #0]
  return result;
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_RCC_OscConfig+0xe2c>
 8002e5e:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <HAL_RCC_OscConfig+0xf78>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	e027      	b.n	8002eb4 <HAL_RCC_OscConfig+0xe7c>
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fa93 f2a3 	rbit	r2, r3
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	fa93 f2a3 	rbit	r2, r3
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <HAL_RCC_OscConfig+0xf78>)
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ec0:	6011      	str	r1, [r2, #0]
 8002ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	fa92 f1a2 	rbit	r1, r2
 8002ed0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ed4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ed8:	6011      	str	r1, [r2, #0]
  return result;
 8002eda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ede:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	fab2 f282 	clz	r2, r2
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f042 0220 	orr.w	r2, r2, #32
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f002 021f 	and.w	r2, r2, #31
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d082      	beq.n	8002e06 <HAL_RCC_OscConfig+0xdce>
 8002f00:	e0cf      	b.n	80030a2 <HAL_RCC_OscConfig+0x106a>
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f26:	601a      	str	r2, [r3, #0]
  return result;
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	461a      	mov	r2, r3
 8002f44:	2300      	movs	r3, #0
 8002f46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fd8a 	bl	8001a60 <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f50:	e009      	b.n	8002f66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fd85 	bl	8001a60 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e09e      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f8a:	601a      	str	r2, [r3, #0]
  return result;
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d104      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xf7c>
 8002faa:	4b01      	ldr	r3, [pc, #4]	; (8002fb0 <HAL_RCC_OscConfig+0xf78>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e029      	b.n	8003004 <HAL_RCC_OscConfig+0xfcc>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	fa93 f2a3 	rbit	r2, r3
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x1078>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003008:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800300c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003010:	6011      	str	r1, [r2, #0]
 8003012:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003016:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	fa92 f1a2 	rbit	r1, r2
 8003020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003024:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003028:	6011      	str	r1, [r2, #0]
  return result;
 800302a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800302e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	fab2 f282 	clz	r2, r2
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f042 0220 	orr.w	r2, r2, #32
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f002 021f 	and.w	r2, r2, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d180      	bne.n	8002f52 <HAL_RCC_OscConfig+0xf1a>
 8003050:	e027      	b.n	80030a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01e      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_OscConfig+0x1078>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800306e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003072:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	429a      	cmp	r2, r3
 8003084:	d10b      	bne.n	800309e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003086:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800308a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b09e      	sub	sp, #120	; 0x78
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e162      	b.n	8003392 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b90      	ldr	r3, [pc, #576]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b8d      	ldr	r3, [pc, #564]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	498b      	ldr	r1, [pc, #556]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b89      	ldr	r3, [pc, #548]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e14a      	b.n	8003392 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b82      	ldr	r3, [pc, #520]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	497f      	ldr	r1, [pc, #508]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80dc 	beq.w	80032e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d13c      	bne.n	80031aa <HAL_RCC_ClockConfig+0xf6>
 8003130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003134:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d102      	bne.n	800315a <HAL_RCC_ClockConfig+0xa6>
 8003154:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	e00f      	b.n	800317a <HAL_RCC_ClockConfig+0xc6>
 800315a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	667b      	str	r3, [r7, #100]	; 0x64
 8003168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800316c:	663b      	str	r3, [r7, #96]	; 0x60
 800316e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800317e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003182:	fa92 f2a2 	rbit	r2, r2
 8003186:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800318a:	fab2 f282 	clz	r2, r2
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f042 0220 	orr.w	r2, r2, #32
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f002 021f 	and.w	r2, r2, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d17b      	bne.n	800329e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0f3      	b.n	8003392 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d13c      	bne.n	800322c <HAL_RCC_ClockConfig+0x178>
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_RCC_ClockConfig+0x128>
 80031d6:	4b4f      	ldr	r3, [pc, #316]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	e00f      	b.n	80031fc <HAL_RCC_ClockConfig+0x148>
 80031dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ee:	643b      	str	r3, [r7, #64]	; 0x40
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003200:	63ba      	str	r2, [r7, #56]	; 0x38
 8003202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800320a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	f042 0220 	orr.w	r2, r2, #32
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f002 021f 	and.w	r2, r2, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f202 	lsl.w	r2, r1, r2
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d13a      	bne.n	800329e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b2      	b.n	8003392 <HAL_RCC_ClockConfig+0x2de>
 800322c:	2302      	movs	r3, #2
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1a0>
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e00d      	b.n	8003270 <HAL_RCC_ClockConfig+0x1bc>
 8003254:	2302      	movs	r3, #2
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
 8003260:	2302      	movs	r3, #2
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2202      	movs	r2, #2
 8003272:	61ba      	str	r2, [r7, #24]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	fa92 f2a2 	rbit	r2, r2
 800327a:	617a      	str	r2, [r7, #20]
  return result;
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	fab2 f282 	clz	r2, r2
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	f042 0220 	orr.w	r2, r2, #32
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	f002 021f 	and.w	r2, r2, #31
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f202 	lsl.w	r2, r1, r2
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e079      	b.n	8003392 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	491a      	ldr	r1, [pc, #104]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fbd6 	bl	8001a60 <HAL_GetTick>
 80032b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fbd2 	bl	8001a60 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e061      	b.n	8003392 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_RCC_ClockConfig+0x260>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d214      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	4906      	ldr	r1, [pc, #24]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_RCC_ClockConfig+0x25c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e040      	b.n	8003392 <HAL_RCC_ClockConfig+0x2de>
 8003310:	40022000 	.word	0x40022000
 8003314:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	491a      	ldr	r1, [pc, #104]	; (800339c <HAL_RCC_ClockConfig+0x2e8>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x2e8>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4912      	ldr	r1, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x2e8>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003356:	f000 f829 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800335a:	4601      	mov	r1, r0
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_RCC_ClockConfig+0x2e8>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003364:	22f0      	movs	r2, #240	; 0xf0
 8003366:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	fa92 f2a2 	rbit	r2, r2
 800336e:	60fa      	str	r2, [r7, #12]
  return result;
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	fab2 f282 	clz	r2, r2
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	40d3      	lsrs	r3, r2
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x2ec>)
 800337c:	5cd3      	ldrb	r3, [r2, r3]
 800337e:	fa21 f303 	lsr.w	r3, r1, r3
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <HAL_RCC_ClockConfig+0x2f0>)
 8003384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCC_ClockConfig+0x2f4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fb24 	bl	80019d8 <HAL_InitTick>
  
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3778      	adds	r7, #120	; 0x78
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	08007ad4 	.word	0x08007ad4
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b08b      	sub	sp, #44	; 0x2c
 80033b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x30>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x36>
 80033da:	e03c      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033de:	623b      	str	r3, [r7, #32]
      break;
 80033e0:	e03c      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	fa92 f2a2 	rbit	r2, r2
 80033f4:	607a      	str	r2, [r7, #4]
  return result;
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	fab2 f282 	clz	r2, r2
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	40d3      	lsrs	r3, r2
 8003400:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003402:	5cd3      	ldrb	r3, [r2, r3]
 8003404:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003406:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	220f      	movs	r2, #15
 8003410:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	fa92 f2a2 	rbit	r2, r2
 8003418:	60fa      	str	r2, [r7, #12]
  return result;
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	40d3      	lsrs	r3, r2
 8003424:	4a14      	ldr	r2, [pc, #80]	; (8003478 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003434:	4a0e      	ldr	r2, [pc, #56]	; (8003470 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	e004      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	4a0c      	ldr	r2, [pc, #48]	; (800347c <HAL_RCC_GetSysClockFreq+0xd0>)
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	623b      	str	r3, [r7, #32]
      break;
 8003454:	e002      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003458:	623b      	str	r3, [r7, #32]
      break;
 800345a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345c:	6a3b      	ldr	r3, [r7, #32]
}
 800345e:	4618      	mov	r0, r3
 8003460:	372c      	adds	r7, #44	; 0x2c
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	007a1200 	.word	0x007a1200
 8003474:	08007aec 	.word	0x08007aec
 8003478:	08007afc 	.word	0x08007afc
 800347c:	003d0900 	.word	0x003d0900

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800349e:	f7ff ffef 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a2:	4601      	mov	r1, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	fa92 f2a2 	rbit	r2, r2
 80034b8:	603a      	str	r2, [r7, #0]
  return result;
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	40d3      	lsrs	r3, r2
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08007ae4 	.word	0x08007ae4

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034e2:	f7ff ffcd 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034e6:	4601      	mov	r1, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	fa92 f2a2 	rbit	r2, r2
 80034fc:	603a      	str	r2, [r7, #0]
  return result;
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	40d3      	lsrs	r3, r2
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_RCC_GetPCLK2Freq+0x40>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08007ae4 	.word	0x08007ae4

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b092      	sub	sp, #72	; 0x48
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80d4 	beq.w	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003544:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10e      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4a4a      	ldr	r2, [pc, #296]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	61d3      	str	r3, [r2, #28]
 800355c:	4b48      	ldr	r3, [pc, #288]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b45      	ldr	r3, [pc, #276]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fe fa6b 	bl	8001a60 <HAL_GetTick>
 800358a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fe fa67 	bl	8001a60 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	; 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e12d      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b38      	ldr	r3, [pc, #224]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ac:	4b34      	ldr	r3, [pc, #208]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8084 	beq.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d07c      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	461a      	mov	r2, r3
 80035f6:	2301      	movs	r3, #1
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	461a      	mov	r2, r3
 800361a:	2300      	movs	r3, #0
 800361c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04b      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe fa17 	bl	8001a60 <HAL_GetTick>
 8003632:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fa13 	bl	8001a60 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e0d7      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800364c:	2302      	movs	r3, #2
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	61fb      	str	r3, [r7, #28]
  return result;
 8003664:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d108      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800367a:	4b01      	ldr	r3, [pc, #4]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	e00d      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	10908100 	.word	0x10908100
 800368c:	2302      	movs	r3, #2
 800368e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2202      	movs	r2, #2
 800369e:	613a      	str	r2, [r7, #16]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	fa92 f2a2 	rbit	r2, r2
 80036a6:	60fa      	str	r2, [r7, #12]
  return result;
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	fab2 f282 	clz	r2, r2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0b7      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036c6:	4b4f      	ldr	r3, [pc, #316]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	494c      	ldr	r1, [pc, #304]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e0:	4b48      	ldr	r3, [pc, #288]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4a47      	ldr	r2, [pc, #284]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f8:	4b42      	ldr	r3, [pc, #264]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f023 0203 	bic.w	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	493f      	ldr	r1, [pc, #252]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003716:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4938      	ldr	r1, [pc, #224]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	4930      	ldr	r1, [pc, #192]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003752:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f023 0210 	bic.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	4929      	ldr	r1, [pc, #164]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003770:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	4921      	ldr	r1, [pc, #132]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f023 0220 	bic.w	r2, r3, #32
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	491a      	ldr	r1, [pc, #104]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4912      	ldr	r1, [pc, #72]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	490b      	ldr	r1, [pc, #44]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3748      	adds	r7, #72	; 0x48
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000

08003808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e09d      	b.n	8003956 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382a:	d009      	beq.n	8003840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
 8003832:	e005      	b.n	8003840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd fda2 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003880:	d902      	bls.n	8003888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e002      	b.n	800388e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003896:	d007      	beq.n	80038a8 <HAL_SPI_Init+0xa0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a0:	d002      	beq.n	80038a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	ea42 0103 	orr.w	r1, r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f003 0204 	and.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003924:	ea42 0103 	orr.w	r1, r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b08a      	sub	sp, #40	; 0x28
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800396c:	2301      	movs	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x26>
 8003980:	2302      	movs	r3, #2
 8003982:	e1fb      	b.n	8003d7c <HAL_SPI_TransmitReceive+0x41e>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800398c:	f7fe f868 	bl	8001a60 <HAL_GetTick>
 8003990:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003998:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039a8:	7efb      	ldrb	r3, [r7, #27]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d00e      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x6e>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b4:	d106      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x66>
 80039be:	7efb      	ldrb	r3, [r7, #27]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d003      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039ca:	e1cd      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_SPI_TransmitReceive+0x80>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_SPI_TransmitReceive+0x80>
 80039d8:	887b      	ldrh	r3, [r7, #2]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039e4:	e1c0      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d003      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2205      	movs	r2, #5
 80039f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	887a      	ldrh	r2, [r7, #2]
 8003a0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	887a      	ldrh	r2, [r7, #2]
 8003a12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a3c:	d802      	bhi.n	8003a44 <HAL_SPI_TransmitReceive+0xe6>
 8003a3e:	8a3b      	ldrh	r3, [r7, #16]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d908      	bls.n	8003a56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e007      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d007      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a8c:	d97c      	bls.n	8003b88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x13e>
 8003a96:	8a7b      	ldrh	r3, [r7, #18]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d169      	bne.n	8003b70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac0:	e056      	b.n	8003b70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x1aa>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0x1aa>
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d113      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d11c      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x1f2>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d016      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b50:	f7fd ff86 	bl	8001a60 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d807      	bhi.n	8003b70 <HAL_SPI_TransmitReceive+0x212>
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d003      	beq.n	8003b70 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b6e:	e0fb      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1a3      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x164>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d19d      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x164>
 8003b86:	e0df      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x23a>
 8003b90:	8a7b      	ldrh	r3, [r7, #18]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	f040 80cb 	bne.w	8003d2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d912      	bls.n	8003bc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	1c9a      	adds	r2, r3, #2
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b02      	subs	r3, #2
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bc6:	e0b2      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bee:	e09e      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d134      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x30a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02f      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x30a>
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d12c      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d912      	bls.n	8003c3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b02      	subs	r3, #2
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c3c:	e012      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	7812      	ldrb	r2, [r2, #0]
 8003c4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d148      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x3aa>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d042      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d923      	bls.n	8003cd6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b02      	subs	r3, #2
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d81f      	bhi.n	8003d04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	e016      	b.n	8003d04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f103 020c 	add.w	r2, r3, #12
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d04:	2301      	movs	r3, #1
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d08:	f7fd feaa 	bl	8001a60 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d803      	bhi.n	8003d20 <HAL_SPI_TransmitReceive+0x3c2>
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d102      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x3c8>
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d2c:	e01c      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f47f af5b 	bne.w	8003bf0 <HAL_SPI_TransmitReceive+0x292>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f47f af54 	bne.w	8003bf0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f937 	bl	8003fc0 <SPI_EndRxTxTransaction>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60
 8003d64:	e000      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3728      	adds	r7, #40	; 0x28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d94:	f7fd fe64 	bl	8001a60 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003da4:	f7fd fe5c 	bl	8001a60 <HAL_GetTick>
 8003da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003daa:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	015b      	lsls	r3, r3, #5
 8003db0:	0d1b      	lsrs	r3, r3, #20
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	fb02 f303 	mul.w	r3, r2, r3
 8003db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dba:	e054      	b.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc2:	d050      	beq.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc4:	f7fd fe4c 	bl	8001a60 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d902      	bls.n	8003dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d13d      	bne.n	8003e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df2:	d111      	bne.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfc:	d004      	beq.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d107      	bne.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e20:	d10f      	bne.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e017      	b.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d19b      	bne.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000000 	.word	0x20000000

08003e94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ea6:	f7fd fddb 	bl	8001a60 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003eb6:	f7fd fdd3 	bl	8001a60 <HAL_GetTick>
 8003eba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ec4:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	00da      	lsls	r2, r3, #3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	0d1b      	lsrs	r3, r3, #20
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003edc:	e060      	b.n	8003fa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ee4:	d107      	bne.n	8003ef6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d050      	beq.n	8003fa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003efe:	f7fd fdaf 	bl	8001a60 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d902      	bls.n	8003f14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d13d      	bne.n	8003f90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2c:	d111      	bne.n	8003f52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f36:	d004      	beq.n	8003f42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d107      	bne.n	8003f52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5a:	d10f      	bne.n	8003f7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e010      	b.n	8003fb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d196      	bne.n	8003ede <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3728      	adds	r7, #40	; 0x28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000000 	.word	0x20000000

08003fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7ff ff5b 	bl	8003e94 <SPI_WaitFifoStateUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e027      	b.n	8004044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fec0 	bl	8003d84 <SPI_WaitFlagStateUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e014      	b.n	8004044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff ff34 	bl	8003e94 <SPI_WaitFifoStateUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e000      	b.n	8004044 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e041      	b.n	80040e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fd fa46 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f000 f8e2 	bl	8004254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e041      	b.n	8004180 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f839 	bl	8004188 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3304      	adds	r3, #4
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f000 f893 	bl	8004254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e048      	b.n	800424c <HAL_TIM_OC_ConfigChannel+0xb0>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d839      	bhi.n	800423c <HAL_TIM_OC_ConfigChannel+0xa0>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	08004205 	.word	0x08004205
 80041d4:	0800423d 	.word	0x0800423d
 80041d8:	0800423d 	.word	0x0800423d
 80041dc:	0800423d 	.word	0x0800423d
 80041e0:	08004213 	.word	0x08004213
 80041e4:	0800423d 	.word	0x0800423d
 80041e8:	0800423d 	.word	0x0800423d
 80041ec:	0800423d 	.word	0x0800423d
 80041f0:	08004221 	.word	0x08004221
 80041f4:	0800423d 	.word	0x0800423d
 80041f8:	0800423d 	.word	0x0800423d
 80041fc:	0800423d 	.word	0x0800423d
 8004200:	0800422f 	.word	0x0800422f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f8bc 	bl	8004388 <TIM_OC1_SetConfig>
      break;
 8004210:	e017      	b.n	8004242 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f92f 	bl	800447c <TIM_OC2_SetConfig>
      break;
 800421e:	e010      	b.n	8004242 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f98a 	bl	8004540 <TIM_OC3_SetConfig>
      break;
 800422c:	e009      	b.n	8004242 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f9c1 	bl	80045bc <TIM_OC4_SetConfig>
      break;
 800423a:	e002      	b.n	8004242 <HAL_TIM_OC_ConfigChannel+0xa6>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
      break;
 8004240:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d00f      	beq.n	800428c <TIM_Base_SetConfig+0x38>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3c      	ldr	r2, [pc, #240]	; (8004360 <TIM_Base_SetConfig+0x10c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_Base_SetConfig+0x38>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a3b      	ldr	r2, [pc, #236]	; (8004364 <TIM_Base_SetConfig+0x110>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <TIM_Base_SetConfig+0x38>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <TIM_Base_SetConfig+0x114>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_Base_SetConfig+0x38>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a39      	ldr	r2, [pc, #228]	; (800436c <TIM_Base_SetConfig+0x118>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d108      	bne.n	800429e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d027      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <TIM_Base_SetConfig+0x10c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d023      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2c      	ldr	r2, [pc, #176]	; (8004364 <TIM_Base_SetConfig+0x110>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2b      	ldr	r2, [pc, #172]	; (8004368 <TIM_Base_SetConfig+0x114>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a2b      	ldr	r2, [pc, #172]	; (8004370 <TIM_Base_SetConfig+0x11c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <TIM_Base_SetConfig+0x120>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a29      	ldr	r2, [pc, #164]	; (8004378 <TIM_Base_SetConfig+0x124>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a28      	ldr	r2, [pc, #160]	; (800437c <TIM_Base_SetConfig+0x128>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a27      	ldr	r2, [pc, #156]	; (8004380 <TIM_Base_SetConfig+0x12c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a26      	ldr	r2, [pc, #152]	; (8004384 <TIM_Base_SetConfig+0x130>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0xa2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1e      	ldr	r2, [pc, #120]	; (800436c <TIM_Base_SetConfig+0x118>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <TIM_Base_SetConfig+0x128>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_Base_SetConfig+0xf0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <TIM_Base_SetConfig+0x12c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_Base_SetConfig+0xf0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a11      	ldr	r2, [pc, #68]	; (8004384 <TIM_Base_SetConfig+0x130>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d103      	bne.n	800434c <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	615a      	str	r2, [r3, #20]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40015c00 	.word	0x40015c00
 8004370:	40001800 	.word	0x40001800
 8004374:	40001c00 	.word	0x40001c00
 8004378:	40002000 	.word	0x40002000
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0303 	bic.w	r3, r3, #3
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f023 0302 	bic.w	r3, r3, #2
 80043d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a24      	ldr	r2, [pc, #144]	; (8004470 <TIM_OC1_SetConfig+0xe8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_OC1_SetConfig+0x6c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a23      	ldr	r2, [pc, #140]	; (8004474 <TIM_OC1_SetConfig+0xec>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC1_SetConfig+0x6c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a22      	ldr	r2, [pc, #136]	; (8004478 <TIM_OC1_SetConfig+0xf0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <TIM_OC1_SetConfig+0xe8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_OC1_SetConfig+0x9e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a16      	ldr	r2, [pc, #88]	; (8004474 <TIM_OC1_SetConfig+0xec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_OC1_SetConfig+0x9e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <TIM_OC1_SetConfig+0xf0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d111      	bne.n	800444a <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800

0800447c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f023 0210 	bic.w	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 0320 	bic.w	r3, r3, #32
 80044c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a17      	ldr	r2, [pc, #92]	; (8004534 <TIM_OC2_SetConfig+0xb8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_OC2_SetConfig+0x70>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a16      	ldr	r2, [pc, #88]	; (8004538 <TIM_OC2_SetConfig+0xbc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_OC2_SetConfig+0x70>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <TIM_OC2_SetConfig+0xc0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10f      	bne.n	800450c <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f2:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40014000 	.word	0x40014000
 8004538:	40014400 	.word	0x40014400
 800453c:	40014800 	.word	0x40014800

08004540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	031b      	lsls	r3, r3, #12
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004652:	2302      	movs	r3, #2
 8004654:	e03d      	b.n	80046d2 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e040      	b.n	8004772 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fc ffdf 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2224      	movs	r2, #36	; 0x24
 800470a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f8c1 	bl	80048a4 <UART_SetConfig>
 8004722:	4603      	mov	r3, r0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e022      	b.n	8004772 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fa2f 	bl	8004b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004748:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004758:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fab6 	bl	8004cdc <UART_CheckIdleState>
 8004770:	4603      	mov	r3, r0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b08a      	sub	sp, #40	; 0x28
 800477e:	af02      	add	r7, sp, #8
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478e:	2b20      	cmp	r3, #32
 8004790:	f040 8082 	bne.w	8004898 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_UART_Transmit+0x26>
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e07a      	b.n	800489a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Transmit+0x38>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e073      	b.n	800489a <HAL_UART_Transmit+0x120>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2221      	movs	r2, #33	; 0x21
 80047c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c8:	f7fd f94a 	bl	8001a60 <HAL_GetTick>
 80047cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	d108      	bne.n	80047fa <HAL_UART_Transmit+0x80>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e003      	b.n	8004802 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800480a:	e02d      	b.n	8004868 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2200      	movs	r2, #0
 8004814:	2180      	movs	r1, #128	; 0x80
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 faa9 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e039      	b.n	800489a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	881a      	ldrh	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004838:	b292      	uxth	r2, r2
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	3302      	adds	r3, #2
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e008      	b.n	8004856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	781a      	ldrb	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b292      	uxth	r2, r2
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3301      	adds	r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1cb      	bne.n	800480c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2200      	movs	r2, #0
 800487c:	2140      	movs	r1, #64	; 0x40
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa75 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e005      	b.n	800489a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	e000      	b.n	800489a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004898:	2302      	movs	r3, #2
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048d2:	f023 030c 	bic.w	r3, r3, #12
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a99      	ldr	r2, [pc, #612]	; (8004b84 <UART_SetConfig+0x2e0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d120      	bne.n	8004966 <UART_SetConfig+0xc2>
 8004924:	4b98      	ldr	r3, [pc, #608]	; (8004b88 <UART_SetConfig+0x2e4>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b03      	cmp	r3, #3
 800492e:	d817      	bhi.n	8004960 <UART_SetConfig+0xbc>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x94>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	08004949 	.word	0x08004949
 800493c:	08004955 	.word	0x08004955
 8004940:	0800495b 	.word	0x0800495b
 8004944:	0800494f 	.word	0x0800494f
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e061      	b.n	8004a12 <UART_SetConfig+0x16e>
 800494e:	2302      	movs	r3, #2
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e05e      	b.n	8004a12 <UART_SetConfig+0x16e>
 8004954:	2304      	movs	r3, #4
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e05b      	b.n	8004a12 <UART_SetConfig+0x16e>
 800495a:	2308      	movs	r3, #8
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e058      	b.n	8004a12 <UART_SetConfig+0x16e>
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e055      	b.n	8004a12 <UART_SetConfig+0x16e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a88      	ldr	r2, [pc, #544]	; (8004b8c <UART_SetConfig+0x2e8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d124      	bne.n	80049ba <UART_SetConfig+0x116>
 8004970:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <UART_SetConfig+0x2e4>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004978:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800497c:	d011      	beq.n	80049a2 <UART_SetConfig+0xfe>
 800497e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004982:	d817      	bhi.n	80049b4 <UART_SetConfig+0x110>
 8004984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004988:	d011      	beq.n	80049ae <UART_SetConfig+0x10a>
 800498a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800498e:	d811      	bhi.n	80049b4 <UART_SetConfig+0x110>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <UART_SetConfig+0xf8>
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004998:	d006      	beq.n	80049a8 <UART_SetConfig+0x104>
 800499a:	e00b      	b.n	80049b4 <UART_SetConfig+0x110>
 800499c:	2300      	movs	r3, #0
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e037      	b.n	8004a12 <UART_SetConfig+0x16e>
 80049a2:	2302      	movs	r3, #2
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e034      	b.n	8004a12 <UART_SetConfig+0x16e>
 80049a8:	2304      	movs	r3, #4
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e031      	b.n	8004a12 <UART_SetConfig+0x16e>
 80049ae:	2308      	movs	r3, #8
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e02e      	b.n	8004a12 <UART_SetConfig+0x16e>
 80049b4:	2310      	movs	r3, #16
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e02b      	b.n	8004a12 <UART_SetConfig+0x16e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a74      	ldr	r2, [pc, #464]	; (8004b90 <UART_SetConfig+0x2ec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d124      	bne.n	8004a0e <UART_SetConfig+0x16a>
 80049c4:	4b70      	ldr	r3, [pc, #448]	; (8004b88 <UART_SetConfig+0x2e4>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80049cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049d0:	d011      	beq.n	80049f6 <UART_SetConfig+0x152>
 80049d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049d6:	d817      	bhi.n	8004a08 <UART_SetConfig+0x164>
 80049d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049dc:	d011      	beq.n	8004a02 <UART_SetConfig+0x15e>
 80049de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049e2:	d811      	bhi.n	8004a08 <UART_SetConfig+0x164>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <UART_SetConfig+0x14c>
 80049e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ec:	d006      	beq.n	80049fc <UART_SetConfig+0x158>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x164>
 80049f0:	2300      	movs	r3, #0
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e00d      	b.n	8004a12 <UART_SetConfig+0x16e>
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e00a      	b.n	8004a12 <UART_SetConfig+0x16e>
 80049fc:	2304      	movs	r3, #4
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e007      	b.n	8004a12 <UART_SetConfig+0x16e>
 8004a02:	2308      	movs	r3, #8
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e004      	b.n	8004a12 <UART_SetConfig+0x16e>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e001      	b.n	8004a12 <UART_SetConfig+0x16e>
 8004a0e:	2310      	movs	r3, #16
 8004a10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1a:	d15b      	bne.n	8004ad4 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8004a1c:	7ffb      	ldrb	r3, [r7, #31]
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d827      	bhi.n	8004a72 <UART_SetConfig+0x1ce>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0x184>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	08004a73 	.word	0x08004a73
 8004a38:	08004a63 	.word	0x08004a63
 8004a3c:	08004a73 	.word	0x08004a73
 8004a40:	08004a73 	.word	0x08004a73
 8004a44:	08004a73 	.word	0x08004a73
 8004a48:	08004a6b 	.word	0x08004a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f7fe fd24 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8004a50:	61b8      	str	r0, [r7, #24]
        break;
 8004a52:	e013      	b.n	8004a7c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a54:	f7fe fd42 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004a58:	61b8      	str	r0, [r7, #24]
        break;
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a5c:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <UART_SetConfig+0x2f0>)
 8004a5e:	61bb      	str	r3, [r7, #24]
        break;
 8004a60:	e00c      	b.n	8004a7c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a62:	f7fe fca3 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8004a66:	61b8      	str	r0, [r7, #24]
        break;
 8004a68:	e008      	b.n	8004a7c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6e:	61bb      	str	r3, [r7, #24]
        break;
 8004a70:	e004      	b.n	8004a7c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	77bb      	strb	r3, [r7, #30]
        break;
 8004a7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d074      	beq.n	8004b6c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	005a      	lsls	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b0f      	cmp	r3, #15
 8004a9e:	d916      	bls.n	8004ace <UART_SetConfig+0x22a>
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa6:	d212      	bcs.n	8004ace <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f023 030f 	bic.w	r3, r3, #15
 8004ab0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	89fb      	ldrh	r3, [r7, #14]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	89fa      	ldrh	r2, [r7, #14]
 8004aca:	60da      	str	r2, [r3, #12]
 8004acc:	e04e      	b.n	8004b6c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77bb      	strb	r3, [r7, #30]
 8004ad2:	e04b      	b.n	8004b6c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ad4:	7ffb      	ldrb	r3, [r7, #31]
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d827      	bhi.n	8004b2a <UART_SetConfig+0x286>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0x23c>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b0d 	.word	0x08004b0d
 8004ae8:	08004b15 	.word	0x08004b15
 8004aec:	08004b2b 	.word	0x08004b2b
 8004af0:	08004b1b 	.word	0x08004b1b
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b2b 	.word	0x08004b2b
 8004afc:	08004b2b 	.word	0x08004b2b
 8004b00:	08004b23 	.word	0x08004b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b04:	f7fe fcc8 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8004b08:	61b8      	str	r0, [r7, #24]
        break;
 8004b0a:	e013      	b.n	8004b34 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b0c:	f7fe fce6 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004b10:	61b8      	str	r0, [r7, #24]
        break;
 8004b12:	e00f      	b.n	8004b34 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b14:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <UART_SetConfig+0x2f0>)
 8004b16:	61bb      	str	r3, [r7, #24]
        break;
 8004b18:	e00c      	b.n	8004b34 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1a:	f7fe fc47 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8004b1e:	61b8      	str	r0, [r7, #24]
        break;
 8004b20:	e008      	b.n	8004b34 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b26:	61bb      	str	r3, [r7, #24]
        break;
 8004b28:	e004      	b.n	8004b34 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	77bb      	strb	r3, [r7, #30]
        break;
 8004b32:	bf00      	nop
    }

    if (pclk != 0U)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d018      	beq.n	8004b6c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	085a      	lsrs	r2, r3, #1
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	441a      	add	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	d908      	bls.n	8004b68 <UART_SetConfig+0x2c4>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d204      	bcs.n	8004b68 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e001      	b.n	8004b6c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b78:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40013800 	.word	0x40013800
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40004400 	.word	0x40004400
 8004b90:	40004800 	.word	0x40004800
 8004b94:	007a1200 	.word	0x007a1200

08004b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01a      	beq.n	8004cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c96:	d10a      	bne.n	8004cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cec:	f7fc feb8 	bl	8001a60 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d10e      	bne.n	8004d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f82d 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e023      	b.n	8004d66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d10e      	bne.n	8004d4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f817 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e00d      	b.n	8004d66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b09c      	sub	sp, #112	; 0x70
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7e:	e0a5      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	f000 80a1 	beq.w	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	f7fc fe69 	bl	8001a60 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d302      	bcc.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d13e      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db4:	667b      	str	r3, [r7, #100]	; 0x64
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004df2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004df4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e067      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d04f      	beq.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3a:	d147      	bne.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
 8004e66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e6      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	613b      	str	r3, [r7, #16]
   return(result);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3308      	adds	r3, #8
 8004e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e98:	623a      	str	r2, [r7, #32]
 8004e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e5      	bne.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e010      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	f43f af4a 	beq.w	8004d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3770      	adds	r7, #112	; 0x70
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <__errno>:
 8004ef8:	4b01      	ldr	r3, [pc, #4]	; (8004f00 <__errno+0x8>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	2000000c 	.word	0x2000000c

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4d0d      	ldr	r5, [pc, #52]	; (8004f3c <__libc_init_array+0x38>)
 8004f08:	4c0d      	ldr	r4, [pc, #52]	; (8004f40 <__libc_init_array+0x3c>)
 8004f0a:	1b64      	subs	r4, r4, r5
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	2600      	movs	r6, #0
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	4d0b      	ldr	r5, [pc, #44]	; (8004f44 <__libc_init_array+0x40>)
 8004f16:	4c0c      	ldr	r4, [pc, #48]	; (8004f48 <__libc_init_array+0x44>)
 8004f18:	f002 fdc4 	bl	8007aa4 <_init>
 8004f1c:	1b64      	subs	r4, r4, r5
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	2600      	movs	r6, #0
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	08007ee4 	.word	0x08007ee4
 8004f40:	08007ee4 	.word	0x08007ee4
 8004f44:	08007ee4 	.word	0x08007ee4
 8004f48:	08007ee8 	.word	0x08007ee8

08004f4c <memset>:
 8004f4c:	4402      	add	r2, r0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <__cvt>:
 8004f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	ec55 4b10 	vmov	r4, r5, d0
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	460e      	mov	r6, r1
 8004f68:	4619      	mov	r1, r3
 8004f6a:	462b      	mov	r3, r5
 8004f6c:	bfbb      	ittet	lt
 8004f6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f72:	461d      	movlt	r5, r3
 8004f74:	2300      	movge	r3, #0
 8004f76:	232d      	movlt	r3, #45	; 0x2d
 8004f78:	700b      	strb	r3, [r1, #0]
 8004f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f80:	4691      	mov	r9, r2
 8004f82:	f023 0820 	bic.w	r8, r3, #32
 8004f86:	bfbc      	itt	lt
 8004f88:	4622      	movlt	r2, r4
 8004f8a:	4614      	movlt	r4, r2
 8004f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f90:	d005      	beq.n	8004f9e <__cvt+0x42>
 8004f92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f96:	d100      	bne.n	8004f9a <__cvt+0x3e>
 8004f98:	3601      	adds	r6, #1
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	e000      	b.n	8004fa0 <__cvt+0x44>
 8004f9e:	2103      	movs	r1, #3
 8004fa0:	ab03      	add	r3, sp, #12
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	ab02      	add	r3, sp, #8
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	ec45 4b10 	vmov	d0, r4, r5
 8004fac:	4653      	mov	r3, sl
 8004fae:	4632      	mov	r2, r6
 8004fb0:	f000 fe1a 	bl	8005be8 <_dtoa_r>
 8004fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fb8:	4607      	mov	r7, r0
 8004fba:	d102      	bne.n	8004fc2 <__cvt+0x66>
 8004fbc:	f019 0f01 	tst.w	r9, #1
 8004fc0:	d022      	beq.n	8005008 <__cvt+0xac>
 8004fc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fc6:	eb07 0906 	add.w	r9, r7, r6
 8004fca:	d110      	bne.n	8004fee <__cvt+0x92>
 8004fcc:	783b      	ldrb	r3, [r7, #0]
 8004fce:	2b30      	cmp	r3, #48	; 0x30
 8004fd0:	d10a      	bne.n	8004fe8 <__cvt+0x8c>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f7fb fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fde:	b918      	cbnz	r0, 8004fe8 <__cvt+0x8c>
 8004fe0:	f1c6 0601 	rsb	r6, r6, #1
 8004fe4:	f8ca 6000 	str.w	r6, [sl]
 8004fe8:	f8da 3000 	ldr.w	r3, [sl]
 8004fec:	4499      	add	r9, r3
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ffa:	b108      	cbz	r0, 8005000 <__cvt+0xa4>
 8004ffc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005000:	2230      	movs	r2, #48	; 0x30
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	454b      	cmp	r3, r9
 8005006:	d307      	bcc.n	8005018 <__cvt+0xbc>
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800500c:	1bdb      	subs	r3, r3, r7
 800500e:	4638      	mov	r0, r7
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	b004      	add	sp, #16
 8005014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005018:	1c59      	adds	r1, r3, #1
 800501a:	9103      	str	r1, [sp, #12]
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e7f0      	b.n	8005002 <__cvt+0xa6>

08005020 <__exponent>:
 8005020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005022:	4603      	mov	r3, r0
 8005024:	2900      	cmp	r1, #0
 8005026:	bfb8      	it	lt
 8005028:	4249      	neglt	r1, r1
 800502a:	f803 2b02 	strb.w	r2, [r3], #2
 800502e:	bfb4      	ite	lt
 8005030:	222d      	movlt	r2, #45	; 0x2d
 8005032:	222b      	movge	r2, #43	; 0x2b
 8005034:	2909      	cmp	r1, #9
 8005036:	7042      	strb	r2, [r0, #1]
 8005038:	dd2a      	ble.n	8005090 <__exponent+0x70>
 800503a:	f10d 0407 	add.w	r4, sp, #7
 800503e:	46a4      	mov	ip, r4
 8005040:	270a      	movs	r7, #10
 8005042:	46a6      	mov	lr, r4
 8005044:	460a      	mov	r2, r1
 8005046:	fb91 f6f7 	sdiv	r6, r1, r7
 800504a:	fb07 1516 	mls	r5, r7, r6, r1
 800504e:	3530      	adds	r5, #48	; 0x30
 8005050:	2a63      	cmp	r2, #99	; 0x63
 8005052:	f104 34ff 	add.w	r4, r4, #4294967295
 8005056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800505a:	4631      	mov	r1, r6
 800505c:	dcf1      	bgt.n	8005042 <__exponent+0x22>
 800505e:	3130      	adds	r1, #48	; 0x30
 8005060:	f1ae 0502 	sub.w	r5, lr, #2
 8005064:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005068:	1c44      	adds	r4, r0, #1
 800506a:	4629      	mov	r1, r5
 800506c:	4561      	cmp	r1, ip
 800506e:	d30a      	bcc.n	8005086 <__exponent+0x66>
 8005070:	f10d 0209 	add.w	r2, sp, #9
 8005074:	eba2 020e 	sub.w	r2, r2, lr
 8005078:	4565      	cmp	r5, ip
 800507a:	bf88      	it	hi
 800507c:	2200      	movhi	r2, #0
 800507e:	4413      	add	r3, r2
 8005080:	1a18      	subs	r0, r3, r0
 8005082:	b003      	add	sp, #12
 8005084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800508a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800508e:	e7ed      	b.n	800506c <__exponent+0x4c>
 8005090:	2330      	movs	r3, #48	; 0x30
 8005092:	3130      	adds	r1, #48	; 0x30
 8005094:	7083      	strb	r3, [r0, #2]
 8005096:	70c1      	strb	r1, [r0, #3]
 8005098:	1d03      	adds	r3, r0, #4
 800509a:	e7f1      	b.n	8005080 <__exponent+0x60>

0800509c <_printf_float>:
 800509c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a0:	ed2d 8b02 	vpush	{d8}
 80050a4:	b08d      	sub	sp, #52	; 0x34
 80050a6:	460c      	mov	r4, r1
 80050a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050ac:	4616      	mov	r6, r2
 80050ae:	461f      	mov	r7, r3
 80050b0:	4605      	mov	r5, r0
 80050b2:	f001 fd3f 	bl	8006b34 <_localeconv_r>
 80050b6:	f8d0 a000 	ldr.w	sl, [r0]
 80050ba:	4650      	mov	r0, sl
 80050bc:	f7fb f888 	bl	80001d0 <strlen>
 80050c0:	2300      	movs	r3, #0
 80050c2:	930a      	str	r3, [sp, #40]	; 0x28
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	9305      	str	r3, [sp, #20]
 80050c8:	f8d8 3000 	ldr.w	r3, [r8]
 80050cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050d0:	3307      	adds	r3, #7
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	f103 0208 	add.w	r2, r3, #8
 80050da:	f8c8 2000 	str.w	r2, [r8]
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80050ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050ee:	9307      	str	r3, [sp, #28]
 80050f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80050f4:	ee08 0a10 	vmov	s16, r0
 80050f8:	4b9f      	ldr	r3, [pc, #636]	; (8005378 <_printf_float+0x2dc>)
 80050fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005102:	f7fb fd13 	bl	8000b2c <__aeabi_dcmpun>
 8005106:	bb88      	cbnz	r0, 800516c <_printf_float+0xd0>
 8005108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800510c:	4b9a      	ldr	r3, [pc, #616]	; (8005378 <_printf_float+0x2dc>)
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	f7fb fced 	bl	8000af0 <__aeabi_dcmple>
 8005116:	bb48      	cbnz	r0, 800516c <_printf_float+0xd0>
 8005118:	2200      	movs	r2, #0
 800511a:	2300      	movs	r3, #0
 800511c:	4640      	mov	r0, r8
 800511e:	4649      	mov	r1, r9
 8005120:	f7fb fcdc 	bl	8000adc <__aeabi_dcmplt>
 8005124:	b110      	cbz	r0, 800512c <_printf_float+0x90>
 8005126:	232d      	movs	r3, #45	; 0x2d
 8005128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512c:	4b93      	ldr	r3, [pc, #588]	; (800537c <_printf_float+0x2e0>)
 800512e:	4894      	ldr	r0, [pc, #592]	; (8005380 <_printf_float+0x2e4>)
 8005130:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005134:	bf94      	ite	ls
 8005136:	4698      	movls	r8, r3
 8005138:	4680      	movhi	r8, r0
 800513a:	2303      	movs	r3, #3
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	9b05      	ldr	r3, [sp, #20]
 8005140:	f023 0204 	bic.w	r2, r3, #4
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	f04f 0900 	mov.w	r9, #0
 800514a:	9700      	str	r7, [sp, #0]
 800514c:	4633      	mov	r3, r6
 800514e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005150:	4621      	mov	r1, r4
 8005152:	4628      	mov	r0, r5
 8005154:	f000 f9d8 	bl	8005508 <_printf_common>
 8005158:	3001      	adds	r0, #1
 800515a:	f040 8090 	bne.w	800527e <_printf_float+0x1e2>
 800515e:	f04f 30ff 	mov.w	r0, #4294967295
 8005162:	b00d      	add	sp, #52	; 0x34
 8005164:	ecbd 8b02 	vpop	{d8}
 8005168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fb fcda 	bl	8000b2c <__aeabi_dcmpun>
 8005178:	b140      	cbz	r0, 800518c <_printf_float+0xf0>
 800517a:	464b      	mov	r3, r9
 800517c:	2b00      	cmp	r3, #0
 800517e:	bfbc      	itt	lt
 8005180:	232d      	movlt	r3, #45	; 0x2d
 8005182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005186:	487f      	ldr	r0, [pc, #508]	; (8005384 <_printf_float+0x2e8>)
 8005188:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <_printf_float+0x2ec>)
 800518a:	e7d1      	b.n	8005130 <_printf_float+0x94>
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005192:	9206      	str	r2, [sp, #24]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	d13f      	bne.n	8005218 <_printf_float+0x17c>
 8005198:	2306      	movs	r3, #6
 800519a:	6063      	str	r3, [r4, #4]
 800519c:	9b05      	ldr	r3, [sp, #20]
 800519e:	6861      	ldr	r1, [r4, #4]
 80051a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051a4:	2300      	movs	r3, #0
 80051a6:	9303      	str	r3, [sp, #12]
 80051a8:	ab0a      	add	r3, sp, #40	; 0x28
 80051aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051ae:	ab09      	add	r3, sp, #36	; 0x24
 80051b0:	ec49 8b10 	vmov	d0, r8, r9
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	6022      	str	r2, [r4, #0]
 80051b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051bc:	4628      	mov	r0, r5
 80051be:	f7ff fecd 	bl	8004f5c <__cvt>
 80051c2:	9b06      	ldr	r3, [sp, #24]
 80051c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051c6:	2b47      	cmp	r3, #71	; 0x47
 80051c8:	4680      	mov	r8, r0
 80051ca:	d108      	bne.n	80051de <_printf_float+0x142>
 80051cc:	1cc8      	adds	r0, r1, #3
 80051ce:	db02      	blt.n	80051d6 <_printf_float+0x13a>
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	4299      	cmp	r1, r3
 80051d4:	dd41      	ble.n	800525a <_printf_float+0x1be>
 80051d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80051da:	fa5f fb8b 	uxtb.w	fp, fp
 80051de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051e2:	d820      	bhi.n	8005226 <_printf_float+0x18a>
 80051e4:	3901      	subs	r1, #1
 80051e6:	465a      	mov	r2, fp
 80051e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051ec:	9109      	str	r1, [sp, #36]	; 0x24
 80051ee:	f7ff ff17 	bl	8005020 <__exponent>
 80051f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051f4:	1813      	adds	r3, r2, r0
 80051f6:	2a01      	cmp	r2, #1
 80051f8:	4681      	mov	r9, r0
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	dc02      	bgt.n	8005204 <_printf_float+0x168>
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	07d2      	lsls	r2, r2, #31
 8005202:	d501      	bpl.n	8005208 <_printf_float+0x16c>
 8005204:	3301      	adds	r3, #1
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800520c:	2b00      	cmp	r3, #0
 800520e:	d09c      	beq.n	800514a <_printf_float+0xae>
 8005210:	232d      	movs	r3, #45	; 0x2d
 8005212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005216:	e798      	b.n	800514a <_printf_float+0xae>
 8005218:	9a06      	ldr	r2, [sp, #24]
 800521a:	2a47      	cmp	r2, #71	; 0x47
 800521c:	d1be      	bne.n	800519c <_printf_float+0x100>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1bc      	bne.n	800519c <_printf_float+0x100>
 8005222:	2301      	movs	r3, #1
 8005224:	e7b9      	b.n	800519a <_printf_float+0xfe>
 8005226:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800522a:	d118      	bne.n	800525e <_printf_float+0x1c2>
 800522c:	2900      	cmp	r1, #0
 800522e:	6863      	ldr	r3, [r4, #4]
 8005230:	dd0b      	ble.n	800524a <_printf_float+0x1ae>
 8005232:	6121      	str	r1, [r4, #16]
 8005234:	b913      	cbnz	r3, 800523c <_printf_float+0x1a0>
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	07d0      	lsls	r0, r2, #31
 800523a:	d502      	bpl.n	8005242 <_printf_float+0x1a6>
 800523c:	3301      	adds	r3, #1
 800523e:	440b      	add	r3, r1
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	65a1      	str	r1, [r4, #88]	; 0x58
 8005244:	f04f 0900 	mov.w	r9, #0
 8005248:	e7de      	b.n	8005208 <_printf_float+0x16c>
 800524a:	b913      	cbnz	r3, 8005252 <_printf_float+0x1b6>
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	07d2      	lsls	r2, r2, #31
 8005250:	d501      	bpl.n	8005256 <_printf_float+0x1ba>
 8005252:	3302      	adds	r3, #2
 8005254:	e7f4      	b.n	8005240 <_printf_float+0x1a4>
 8005256:	2301      	movs	r3, #1
 8005258:	e7f2      	b.n	8005240 <_printf_float+0x1a4>
 800525a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800525e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005260:	4299      	cmp	r1, r3
 8005262:	db05      	blt.n	8005270 <_printf_float+0x1d4>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	6121      	str	r1, [r4, #16]
 8005268:	07d8      	lsls	r0, r3, #31
 800526a:	d5ea      	bpl.n	8005242 <_printf_float+0x1a6>
 800526c:	1c4b      	adds	r3, r1, #1
 800526e:	e7e7      	b.n	8005240 <_printf_float+0x1a4>
 8005270:	2900      	cmp	r1, #0
 8005272:	bfd4      	ite	le
 8005274:	f1c1 0202 	rsble	r2, r1, #2
 8005278:	2201      	movgt	r2, #1
 800527a:	4413      	add	r3, r2
 800527c:	e7e0      	b.n	8005240 <_printf_float+0x1a4>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	055a      	lsls	r2, r3, #21
 8005282:	d407      	bmi.n	8005294 <_printf_float+0x1f8>
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	4642      	mov	r2, r8
 8005288:	4631      	mov	r1, r6
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	d12c      	bne.n	80052ec <_printf_float+0x250>
 8005292:	e764      	b.n	800515e <_printf_float+0xc2>
 8005294:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005298:	f240 80e0 	bls.w	800545c <_printf_float+0x3c0>
 800529c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052a0:	2200      	movs	r2, #0
 80052a2:	2300      	movs	r3, #0
 80052a4:	f7fb fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d034      	beq.n	8005316 <_printf_float+0x27a>
 80052ac:	4a37      	ldr	r2, [pc, #220]	; (800538c <_printf_float+0x2f0>)
 80052ae:	2301      	movs	r3, #1
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f af51 	beq.w	800515e <_printf_float+0xc2>
 80052bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052c0:	429a      	cmp	r2, r3
 80052c2:	db02      	blt.n	80052ca <_printf_float+0x22e>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	07d8      	lsls	r0, r3, #31
 80052c8:	d510      	bpl.n	80052ec <_printf_float+0x250>
 80052ca:	ee18 3a10 	vmov	r3, s16
 80052ce:	4652      	mov	r2, sl
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f af41 	beq.w	800515e <_printf_float+0xc2>
 80052dc:	f04f 0800 	mov.w	r8, #0
 80052e0:	f104 091a 	add.w	r9, r4, #26
 80052e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e6:	3b01      	subs	r3, #1
 80052e8:	4543      	cmp	r3, r8
 80052ea:	dc09      	bgt.n	8005300 <_printf_float+0x264>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	079b      	lsls	r3, r3, #30
 80052f0:	f100 8105 	bmi.w	80054fe <_printf_float+0x462>
 80052f4:	68e0      	ldr	r0, [r4, #12]
 80052f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f8:	4298      	cmp	r0, r3
 80052fa:	bfb8      	it	lt
 80052fc:	4618      	movlt	r0, r3
 80052fe:	e730      	b.n	8005162 <_printf_float+0xc6>
 8005300:	2301      	movs	r3, #1
 8005302:	464a      	mov	r2, r9
 8005304:	4631      	mov	r1, r6
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	f43f af27 	beq.w	800515e <_printf_float+0xc2>
 8005310:	f108 0801 	add.w	r8, r8, #1
 8005314:	e7e6      	b.n	80052e4 <_printf_float+0x248>
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	dc39      	bgt.n	8005390 <_printf_float+0x2f4>
 800531c:	4a1b      	ldr	r2, [pc, #108]	; (800538c <_printf_float+0x2f0>)
 800531e:	2301      	movs	r3, #1
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f af19 	beq.w	800515e <_printf_float+0xc2>
 800532c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005330:	4313      	orrs	r3, r2
 8005332:	d102      	bne.n	800533a <_printf_float+0x29e>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	07d9      	lsls	r1, r3, #31
 8005338:	d5d8      	bpl.n	80052ec <_printf_float+0x250>
 800533a:	ee18 3a10 	vmov	r3, s16
 800533e:	4652      	mov	r2, sl
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	f43f af09 	beq.w	800515e <_printf_float+0xc2>
 800534c:	f04f 0900 	mov.w	r9, #0
 8005350:	f104 0a1a 	add.w	sl, r4, #26
 8005354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005356:	425b      	negs	r3, r3
 8005358:	454b      	cmp	r3, r9
 800535a:	dc01      	bgt.n	8005360 <_printf_float+0x2c4>
 800535c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800535e:	e792      	b.n	8005286 <_printf_float+0x1ea>
 8005360:	2301      	movs	r3, #1
 8005362:	4652      	mov	r2, sl
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f aef7 	beq.w	800515e <_printf_float+0xc2>
 8005370:	f109 0901 	add.w	r9, r9, #1
 8005374:	e7ee      	b.n	8005354 <_printf_float+0x2b8>
 8005376:	bf00      	nop
 8005378:	7fefffff 	.word	0x7fefffff
 800537c:	08007b10 	.word	0x08007b10
 8005380:	08007b14 	.word	0x08007b14
 8005384:	08007b1c 	.word	0x08007b1c
 8005388:	08007b18 	.word	0x08007b18
 800538c:	08007b20 	.word	0x08007b20
 8005390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005394:	429a      	cmp	r2, r3
 8005396:	bfa8      	it	ge
 8005398:	461a      	movge	r2, r3
 800539a:	2a00      	cmp	r2, #0
 800539c:	4691      	mov	r9, r2
 800539e:	dc37      	bgt.n	8005410 <_printf_float+0x374>
 80053a0:	f04f 0b00 	mov.w	fp, #0
 80053a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053a8:	f104 021a 	add.w	r2, r4, #26
 80053ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053ae:	9305      	str	r3, [sp, #20]
 80053b0:	eba3 0309 	sub.w	r3, r3, r9
 80053b4:	455b      	cmp	r3, fp
 80053b6:	dc33      	bgt.n	8005420 <_printf_float+0x384>
 80053b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053bc:	429a      	cmp	r2, r3
 80053be:	db3b      	blt.n	8005438 <_printf_float+0x39c>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	07da      	lsls	r2, r3, #31
 80053c4:	d438      	bmi.n	8005438 <_printf_float+0x39c>
 80053c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c8:	9a05      	ldr	r2, [sp, #20]
 80053ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053cc:	1a9a      	subs	r2, r3, r2
 80053ce:	eba3 0901 	sub.w	r9, r3, r1
 80053d2:	4591      	cmp	r9, r2
 80053d4:	bfa8      	it	ge
 80053d6:	4691      	movge	r9, r2
 80053d8:	f1b9 0f00 	cmp.w	r9, #0
 80053dc:	dc35      	bgt.n	800544a <_printf_float+0x3ae>
 80053de:	f04f 0800 	mov.w	r8, #0
 80053e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053e6:	f104 0a1a 	add.w	sl, r4, #26
 80053ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	eba3 0309 	sub.w	r3, r3, r9
 80053f4:	4543      	cmp	r3, r8
 80053f6:	f77f af79 	ble.w	80052ec <_printf_float+0x250>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f aeaa 	beq.w	800515e <_printf_float+0xc2>
 800540a:	f108 0801 	add.w	r8, r8, #1
 800540e:	e7ec      	b.n	80053ea <_printf_float+0x34e>
 8005410:	4613      	mov	r3, r2
 8005412:	4631      	mov	r1, r6
 8005414:	4642      	mov	r2, r8
 8005416:	4628      	mov	r0, r5
 8005418:	47b8      	blx	r7
 800541a:	3001      	adds	r0, #1
 800541c:	d1c0      	bne.n	80053a0 <_printf_float+0x304>
 800541e:	e69e      	b.n	800515e <_printf_float+0xc2>
 8005420:	2301      	movs	r3, #1
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	9205      	str	r2, [sp, #20]
 8005428:	47b8      	blx	r7
 800542a:	3001      	adds	r0, #1
 800542c:	f43f ae97 	beq.w	800515e <_printf_float+0xc2>
 8005430:	9a05      	ldr	r2, [sp, #20]
 8005432:	f10b 0b01 	add.w	fp, fp, #1
 8005436:	e7b9      	b.n	80053ac <_printf_float+0x310>
 8005438:	ee18 3a10 	vmov	r3, s16
 800543c:	4652      	mov	r2, sl
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	d1be      	bne.n	80053c6 <_printf_float+0x32a>
 8005448:	e689      	b.n	800515e <_printf_float+0xc2>
 800544a:	9a05      	ldr	r2, [sp, #20]
 800544c:	464b      	mov	r3, r9
 800544e:	4442      	add	r2, r8
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	d1c1      	bne.n	80053de <_printf_float+0x342>
 800545a:	e680      	b.n	800515e <_printf_float+0xc2>
 800545c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800545e:	2a01      	cmp	r2, #1
 8005460:	dc01      	bgt.n	8005466 <_printf_float+0x3ca>
 8005462:	07db      	lsls	r3, r3, #31
 8005464:	d538      	bpl.n	80054d8 <_printf_float+0x43c>
 8005466:	2301      	movs	r3, #1
 8005468:	4642      	mov	r2, r8
 800546a:	4631      	mov	r1, r6
 800546c:	4628      	mov	r0, r5
 800546e:	47b8      	blx	r7
 8005470:	3001      	adds	r0, #1
 8005472:	f43f ae74 	beq.w	800515e <_printf_float+0xc2>
 8005476:	ee18 3a10 	vmov	r3, s16
 800547a:	4652      	mov	r2, sl
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f ae6b 	beq.w	800515e <_printf_float+0xc2>
 8005488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800548c:	2200      	movs	r2, #0
 800548e:	2300      	movs	r3, #0
 8005490:	f7fb fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005494:	b9d8      	cbnz	r0, 80054ce <_printf_float+0x432>
 8005496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005498:	f108 0201 	add.w	r2, r8, #1
 800549c:	3b01      	subs	r3, #1
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b8      	blx	r7
 80054a4:	3001      	adds	r0, #1
 80054a6:	d10e      	bne.n	80054c6 <_printf_float+0x42a>
 80054a8:	e659      	b.n	800515e <_printf_float+0xc2>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4652      	mov	r2, sl
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f ae52 	beq.w	800515e <_printf_float+0xc2>
 80054ba:	f108 0801 	add.w	r8, r8, #1
 80054be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c0:	3b01      	subs	r3, #1
 80054c2:	4543      	cmp	r3, r8
 80054c4:	dcf1      	bgt.n	80054aa <_printf_float+0x40e>
 80054c6:	464b      	mov	r3, r9
 80054c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054cc:	e6dc      	b.n	8005288 <_printf_float+0x1ec>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	f104 0a1a 	add.w	sl, r4, #26
 80054d6:	e7f2      	b.n	80054be <_printf_float+0x422>
 80054d8:	2301      	movs	r3, #1
 80054da:	4642      	mov	r2, r8
 80054dc:	e7df      	b.n	800549e <_printf_float+0x402>
 80054de:	2301      	movs	r3, #1
 80054e0:	464a      	mov	r2, r9
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae38 	beq.w	800515e <_printf_float+0xc2>
 80054ee:	f108 0801 	add.w	r8, r8, #1
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	4543      	cmp	r3, r8
 80054fa:	dcf0      	bgt.n	80054de <_printf_float+0x442>
 80054fc:	e6fa      	b.n	80052f4 <_printf_float+0x258>
 80054fe:	f04f 0800 	mov.w	r8, #0
 8005502:	f104 0919 	add.w	r9, r4, #25
 8005506:	e7f4      	b.n	80054f2 <_printf_float+0x456>

08005508 <_printf_common>:
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	4616      	mov	r6, r2
 800550e:	4699      	mov	r9, r3
 8005510:	688a      	ldr	r2, [r1, #8]
 8005512:	690b      	ldr	r3, [r1, #16]
 8005514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005518:	4293      	cmp	r3, r2
 800551a:	bfb8      	it	lt
 800551c:	4613      	movlt	r3, r2
 800551e:	6033      	str	r3, [r6, #0]
 8005520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005524:	4607      	mov	r7, r0
 8005526:	460c      	mov	r4, r1
 8005528:	b10a      	cbz	r2, 800552e <_printf_common+0x26>
 800552a:	3301      	adds	r3, #1
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	0699      	lsls	r1, r3, #26
 8005532:	bf42      	ittt	mi
 8005534:	6833      	ldrmi	r3, [r6, #0]
 8005536:	3302      	addmi	r3, #2
 8005538:	6033      	strmi	r3, [r6, #0]
 800553a:	6825      	ldr	r5, [r4, #0]
 800553c:	f015 0506 	ands.w	r5, r5, #6
 8005540:	d106      	bne.n	8005550 <_printf_common+0x48>
 8005542:	f104 0a19 	add.w	sl, r4, #25
 8005546:	68e3      	ldr	r3, [r4, #12]
 8005548:	6832      	ldr	r2, [r6, #0]
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	42ab      	cmp	r3, r5
 800554e:	dc26      	bgt.n	800559e <_printf_common+0x96>
 8005550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005554:	1e13      	subs	r3, r2, #0
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	bf18      	it	ne
 800555a:	2301      	movne	r3, #1
 800555c:	0692      	lsls	r2, r2, #26
 800555e:	d42b      	bmi.n	80055b8 <_printf_common+0xb0>
 8005560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005564:	4649      	mov	r1, r9
 8005566:	4638      	mov	r0, r7
 8005568:	47c0      	blx	r8
 800556a:	3001      	adds	r0, #1
 800556c:	d01e      	beq.n	80055ac <_printf_common+0xa4>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	68e5      	ldr	r5, [r4, #12]
 8005572:	6832      	ldr	r2, [r6, #0]
 8005574:	f003 0306 	and.w	r3, r3, #6
 8005578:	2b04      	cmp	r3, #4
 800557a:	bf08      	it	eq
 800557c:	1aad      	subeq	r5, r5, r2
 800557e:	68a3      	ldr	r3, [r4, #8]
 8005580:	6922      	ldr	r2, [r4, #16]
 8005582:	bf0c      	ite	eq
 8005584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005588:	2500      	movne	r5, #0
 800558a:	4293      	cmp	r3, r2
 800558c:	bfc4      	itt	gt
 800558e:	1a9b      	subgt	r3, r3, r2
 8005590:	18ed      	addgt	r5, r5, r3
 8005592:	2600      	movs	r6, #0
 8005594:	341a      	adds	r4, #26
 8005596:	42b5      	cmp	r5, r6
 8005598:	d11a      	bne.n	80055d0 <_printf_common+0xc8>
 800559a:	2000      	movs	r0, #0
 800559c:	e008      	b.n	80055b0 <_printf_common+0xa8>
 800559e:	2301      	movs	r3, #1
 80055a0:	4652      	mov	r2, sl
 80055a2:	4649      	mov	r1, r9
 80055a4:	4638      	mov	r0, r7
 80055a6:	47c0      	blx	r8
 80055a8:	3001      	adds	r0, #1
 80055aa:	d103      	bne.n	80055b4 <_printf_common+0xac>
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	3501      	adds	r5, #1
 80055b6:	e7c6      	b.n	8005546 <_printf_common+0x3e>
 80055b8:	18e1      	adds	r1, r4, r3
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	2030      	movs	r0, #48	; 0x30
 80055be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055c2:	4422      	add	r2, r4
 80055c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055cc:	3302      	adds	r3, #2
 80055ce:	e7c7      	b.n	8005560 <_printf_common+0x58>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4622      	mov	r2, r4
 80055d4:	4649      	mov	r1, r9
 80055d6:	4638      	mov	r0, r7
 80055d8:	47c0      	blx	r8
 80055da:	3001      	adds	r0, #1
 80055dc:	d0e6      	beq.n	80055ac <_printf_common+0xa4>
 80055de:	3601      	adds	r6, #1
 80055e0:	e7d9      	b.n	8005596 <_printf_common+0x8e>
	...

080055e4 <_printf_i>:
 80055e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	7e0f      	ldrb	r7, [r1, #24]
 80055ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055ec:	2f78      	cmp	r7, #120	; 0x78
 80055ee:	4691      	mov	r9, r2
 80055f0:	4680      	mov	r8, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	469a      	mov	sl, r3
 80055f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055fa:	d807      	bhi.n	800560c <_printf_i+0x28>
 80055fc:	2f62      	cmp	r7, #98	; 0x62
 80055fe:	d80a      	bhi.n	8005616 <_printf_i+0x32>
 8005600:	2f00      	cmp	r7, #0
 8005602:	f000 80d8 	beq.w	80057b6 <_printf_i+0x1d2>
 8005606:	2f58      	cmp	r7, #88	; 0x58
 8005608:	f000 80a3 	beq.w	8005752 <_printf_i+0x16e>
 800560c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005614:	e03a      	b.n	800568c <_printf_i+0xa8>
 8005616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800561a:	2b15      	cmp	r3, #21
 800561c:	d8f6      	bhi.n	800560c <_printf_i+0x28>
 800561e:	a101      	add	r1, pc, #4	; (adr r1, 8005624 <_printf_i+0x40>)
 8005620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005624:	0800567d 	.word	0x0800567d
 8005628:	08005691 	.word	0x08005691
 800562c:	0800560d 	.word	0x0800560d
 8005630:	0800560d 	.word	0x0800560d
 8005634:	0800560d 	.word	0x0800560d
 8005638:	0800560d 	.word	0x0800560d
 800563c:	08005691 	.word	0x08005691
 8005640:	0800560d 	.word	0x0800560d
 8005644:	0800560d 	.word	0x0800560d
 8005648:	0800560d 	.word	0x0800560d
 800564c:	0800560d 	.word	0x0800560d
 8005650:	0800579d 	.word	0x0800579d
 8005654:	080056c1 	.word	0x080056c1
 8005658:	0800577f 	.word	0x0800577f
 800565c:	0800560d 	.word	0x0800560d
 8005660:	0800560d 	.word	0x0800560d
 8005664:	080057bf 	.word	0x080057bf
 8005668:	0800560d 	.word	0x0800560d
 800566c:	080056c1 	.word	0x080056c1
 8005670:	0800560d 	.word	0x0800560d
 8005674:	0800560d 	.word	0x0800560d
 8005678:	08005787 	.word	0x08005787
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	1d1a      	adds	r2, r3, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	602a      	str	r2, [r5, #0]
 8005684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800568c:	2301      	movs	r3, #1
 800568e:	e0a3      	b.n	80057d8 <_printf_i+0x1f4>
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	6829      	ldr	r1, [r5, #0]
 8005694:	0606      	lsls	r6, r0, #24
 8005696:	f101 0304 	add.w	r3, r1, #4
 800569a:	d50a      	bpl.n	80056b2 <_printf_i+0xce>
 800569c:	680e      	ldr	r6, [r1, #0]
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	da03      	bge.n	80056ac <_printf_i+0xc8>
 80056a4:	232d      	movs	r3, #45	; 0x2d
 80056a6:	4276      	negs	r6, r6
 80056a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ac:	485e      	ldr	r0, [pc, #376]	; (8005828 <_printf_i+0x244>)
 80056ae:	230a      	movs	r3, #10
 80056b0:	e019      	b.n	80056e6 <_printf_i+0x102>
 80056b2:	680e      	ldr	r6, [r1, #0]
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056ba:	bf18      	it	ne
 80056bc:	b236      	sxthne	r6, r6
 80056be:	e7ef      	b.n	80056a0 <_printf_i+0xbc>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	6820      	ldr	r0, [r4, #0]
 80056c4:	1d19      	adds	r1, r3, #4
 80056c6:	6029      	str	r1, [r5, #0]
 80056c8:	0601      	lsls	r1, r0, #24
 80056ca:	d501      	bpl.n	80056d0 <_printf_i+0xec>
 80056cc:	681e      	ldr	r6, [r3, #0]
 80056ce:	e002      	b.n	80056d6 <_printf_i+0xf2>
 80056d0:	0646      	lsls	r6, r0, #25
 80056d2:	d5fb      	bpl.n	80056cc <_printf_i+0xe8>
 80056d4:	881e      	ldrh	r6, [r3, #0]
 80056d6:	4854      	ldr	r0, [pc, #336]	; (8005828 <_printf_i+0x244>)
 80056d8:	2f6f      	cmp	r7, #111	; 0x6f
 80056da:	bf0c      	ite	eq
 80056dc:	2308      	moveq	r3, #8
 80056de:	230a      	movne	r3, #10
 80056e0:	2100      	movs	r1, #0
 80056e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056e6:	6865      	ldr	r5, [r4, #4]
 80056e8:	60a5      	str	r5, [r4, #8]
 80056ea:	2d00      	cmp	r5, #0
 80056ec:	bfa2      	ittt	ge
 80056ee:	6821      	ldrge	r1, [r4, #0]
 80056f0:	f021 0104 	bicge.w	r1, r1, #4
 80056f4:	6021      	strge	r1, [r4, #0]
 80056f6:	b90e      	cbnz	r6, 80056fc <_printf_i+0x118>
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	d04d      	beq.n	8005798 <_printf_i+0x1b4>
 80056fc:	4615      	mov	r5, r2
 80056fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005702:	fb03 6711 	mls	r7, r3, r1, r6
 8005706:	5dc7      	ldrb	r7, [r0, r7]
 8005708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800570c:	4637      	mov	r7, r6
 800570e:	42bb      	cmp	r3, r7
 8005710:	460e      	mov	r6, r1
 8005712:	d9f4      	bls.n	80056fe <_printf_i+0x11a>
 8005714:	2b08      	cmp	r3, #8
 8005716:	d10b      	bne.n	8005730 <_printf_i+0x14c>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07de      	lsls	r6, r3, #31
 800571c:	d508      	bpl.n	8005730 <_printf_i+0x14c>
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6861      	ldr	r1, [r4, #4]
 8005722:	4299      	cmp	r1, r3
 8005724:	bfde      	ittt	le
 8005726:	2330      	movle	r3, #48	; 0x30
 8005728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800572c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005730:	1b52      	subs	r2, r2, r5
 8005732:	6122      	str	r2, [r4, #16]
 8005734:	f8cd a000 	str.w	sl, [sp]
 8005738:	464b      	mov	r3, r9
 800573a:	aa03      	add	r2, sp, #12
 800573c:	4621      	mov	r1, r4
 800573e:	4640      	mov	r0, r8
 8005740:	f7ff fee2 	bl	8005508 <_printf_common>
 8005744:	3001      	adds	r0, #1
 8005746:	d14c      	bne.n	80057e2 <_printf_i+0x1fe>
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	b004      	add	sp, #16
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	4835      	ldr	r0, [pc, #212]	; (8005828 <_printf_i+0x244>)
 8005754:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005758:	6829      	ldr	r1, [r5, #0]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005760:	6029      	str	r1, [r5, #0]
 8005762:	061d      	lsls	r5, r3, #24
 8005764:	d514      	bpl.n	8005790 <_printf_i+0x1ac>
 8005766:	07df      	lsls	r7, r3, #31
 8005768:	bf44      	itt	mi
 800576a:	f043 0320 	orrmi.w	r3, r3, #32
 800576e:	6023      	strmi	r3, [r4, #0]
 8005770:	b91e      	cbnz	r6, 800577a <_printf_i+0x196>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f023 0320 	bic.w	r3, r3, #32
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	2310      	movs	r3, #16
 800577c:	e7b0      	b.n	80056e0 <_printf_i+0xfc>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	f043 0320 	orr.w	r3, r3, #32
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	2378      	movs	r3, #120	; 0x78
 8005788:	4828      	ldr	r0, [pc, #160]	; (800582c <_printf_i+0x248>)
 800578a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800578e:	e7e3      	b.n	8005758 <_printf_i+0x174>
 8005790:	0659      	lsls	r1, r3, #25
 8005792:	bf48      	it	mi
 8005794:	b2b6      	uxthmi	r6, r6
 8005796:	e7e6      	b.n	8005766 <_printf_i+0x182>
 8005798:	4615      	mov	r5, r2
 800579a:	e7bb      	b.n	8005714 <_printf_i+0x130>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	6826      	ldr	r6, [r4, #0]
 80057a0:	6961      	ldr	r1, [r4, #20]
 80057a2:	1d18      	adds	r0, r3, #4
 80057a4:	6028      	str	r0, [r5, #0]
 80057a6:	0635      	lsls	r5, r6, #24
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	d501      	bpl.n	80057b0 <_printf_i+0x1cc>
 80057ac:	6019      	str	r1, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <_printf_i+0x1d2>
 80057b0:	0670      	lsls	r0, r6, #25
 80057b2:	d5fb      	bpl.n	80057ac <_printf_i+0x1c8>
 80057b4:	8019      	strh	r1, [r3, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	6123      	str	r3, [r4, #16]
 80057ba:	4615      	mov	r5, r2
 80057bc:	e7ba      	b.n	8005734 <_printf_i+0x150>
 80057be:	682b      	ldr	r3, [r5, #0]
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	602a      	str	r2, [r5, #0]
 80057c4:	681d      	ldr	r5, [r3, #0]
 80057c6:	6862      	ldr	r2, [r4, #4]
 80057c8:	2100      	movs	r1, #0
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7fa fd08 	bl	80001e0 <memchr>
 80057d0:	b108      	cbz	r0, 80057d6 <_printf_i+0x1f2>
 80057d2:	1b40      	subs	r0, r0, r5
 80057d4:	6060      	str	r0, [r4, #4]
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	6123      	str	r3, [r4, #16]
 80057da:	2300      	movs	r3, #0
 80057dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e0:	e7a8      	b.n	8005734 <_printf_i+0x150>
 80057e2:	6923      	ldr	r3, [r4, #16]
 80057e4:	462a      	mov	r2, r5
 80057e6:	4649      	mov	r1, r9
 80057e8:	4640      	mov	r0, r8
 80057ea:	47d0      	blx	sl
 80057ec:	3001      	adds	r0, #1
 80057ee:	d0ab      	beq.n	8005748 <_printf_i+0x164>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	079b      	lsls	r3, r3, #30
 80057f4:	d413      	bmi.n	800581e <_printf_i+0x23a>
 80057f6:	68e0      	ldr	r0, [r4, #12]
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	4298      	cmp	r0, r3
 80057fc:	bfb8      	it	lt
 80057fe:	4618      	movlt	r0, r3
 8005800:	e7a4      	b.n	800574c <_printf_i+0x168>
 8005802:	2301      	movs	r3, #1
 8005804:	4632      	mov	r2, r6
 8005806:	4649      	mov	r1, r9
 8005808:	4640      	mov	r0, r8
 800580a:	47d0      	blx	sl
 800580c:	3001      	adds	r0, #1
 800580e:	d09b      	beq.n	8005748 <_printf_i+0x164>
 8005810:	3501      	adds	r5, #1
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	9903      	ldr	r1, [sp, #12]
 8005816:	1a5b      	subs	r3, r3, r1
 8005818:	42ab      	cmp	r3, r5
 800581a:	dcf2      	bgt.n	8005802 <_printf_i+0x21e>
 800581c:	e7eb      	b.n	80057f6 <_printf_i+0x212>
 800581e:	2500      	movs	r5, #0
 8005820:	f104 0619 	add.w	r6, r4, #25
 8005824:	e7f5      	b.n	8005812 <_printf_i+0x22e>
 8005826:	bf00      	nop
 8005828:	08007b22 	.word	0x08007b22
 800582c:	08007b33 	.word	0x08007b33

08005830 <iprintf>:
 8005830:	b40f      	push	{r0, r1, r2, r3}
 8005832:	4b0a      	ldr	r3, [pc, #40]	; (800585c <iprintf+0x2c>)
 8005834:	b513      	push	{r0, r1, r4, lr}
 8005836:	681c      	ldr	r4, [r3, #0]
 8005838:	b124      	cbz	r4, 8005844 <iprintf+0x14>
 800583a:	69a3      	ldr	r3, [r4, #24]
 800583c:	b913      	cbnz	r3, 8005844 <iprintf+0x14>
 800583e:	4620      	mov	r0, r4
 8005840:	f001 f8da 	bl	80069f8 <__sinit>
 8005844:	ab05      	add	r3, sp, #20
 8005846:	9a04      	ldr	r2, [sp, #16]
 8005848:	68a1      	ldr	r1, [r4, #8]
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	4620      	mov	r0, r4
 800584e:	f001 fe97 	bl	8007580 <_vfiprintf_r>
 8005852:	b002      	add	sp, #8
 8005854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005858:	b004      	add	sp, #16
 800585a:	4770      	bx	lr
 800585c:	2000000c 	.word	0x2000000c

08005860 <_puts_r>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	460e      	mov	r6, r1
 8005864:	4605      	mov	r5, r0
 8005866:	b118      	cbz	r0, 8005870 <_puts_r+0x10>
 8005868:	6983      	ldr	r3, [r0, #24]
 800586a:	b90b      	cbnz	r3, 8005870 <_puts_r+0x10>
 800586c:	f001 f8c4 	bl	80069f8 <__sinit>
 8005870:	69ab      	ldr	r3, [r5, #24]
 8005872:	68ac      	ldr	r4, [r5, #8]
 8005874:	b913      	cbnz	r3, 800587c <_puts_r+0x1c>
 8005876:	4628      	mov	r0, r5
 8005878:	f001 f8be 	bl	80069f8 <__sinit>
 800587c:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <_puts_r+0xd0>)
 800587e:	429c      	cmp	r4, r3
 8005880:	d120      	bne.n	80058c4 <_puts_r+0x64>
 8005882:	686c      	ldr	r4, [r5, #4]
 8005884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005886:	07db      	lsls	r3, r3, #31
 8005888:	d405      	bmi.n	8005896 <_puts_r+0x36>
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	0598      	lsls	r0, r3, #22
 800588e:	d402      	bmi.n	8005896 <_puts_r+0x36>
 8005890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005892:	f001 f954 	bl	8006b3e <__retarget_lock_acquire_recursive>
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	0719      	lsls	r1, r3, #28
 800589a:	d51d      	bpl.n	80058d8 <_puts_r+0x78>
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	b1db      	cbz	r3, 80058d8 <_puts_r+0x78>
 80058a0:	3e01      	subs	r6, #1
 80058a2:	68a3      	ldr	r3, [r4, #8]
 80058a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058a8:	3b01      	subs	r3, #1
 80058aa:	60a3      	str	r3, [r4, #8]
 80058ac:	bb39      	cbnz	r1, 80058fe <_puts_r+0x9e>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da38      	bge.n	8005924 <_puts_r+0xc4>
 80058b2:	4622      	mov	r2, r4
 80058b4:	210a      	movs	r1, #10
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 f848 	bl	800594c <__swbuf_r>
 80058bc:	3001      	adds	r0, #1
 80058be:	d011      	beq.n	80058e4 <_puts_r+0x84>
 80058c0:	250a      	movs	r5, #10
 80058c2:	e011      	b.n	80058e8 <_puts_r+0x88>
 80058c4:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <_puts_r+0xd4>)
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d101      	bne.n	80058ce <_puts_r+0x6e>
 80058ca:	68ac      	ldr	r4, [r5, #8]
 80058cc:	e7da      	b.n	8005884 <_puts_r+0x24>
 80058ce:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <_puts_r+0xd8>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	bf08      	it	eq
 80058d4:	68ec      	ldreq	r4, [r5, #12]
 80058d6:	e7d5      	b.n	8005884 <_puts_r+0x24>
 80058d8:	4621      	mov	r1, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 f888 	bl	80059f0 <__swsetup_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d0dd      	beq.n	80058a0 <_puts_r+0x40>
 80058e4:	f04f 35ff 	mov.w	r5, #4294967295
 80058e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ea:	07da      	lsls	r2, r3, #31
 80058ec:	d405      	bmi.n	80058fa <_puts_r+0x9a>
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	d402      	bmi.n	80058fa <_puts_r+0x9a>
 80058f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058f6:	f001 f923 	bl	8006b40 <__retarget_lock_release_recursive>
 80058fa:	4628      	mov	r0, r5
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da04      	bge.n	800590c <_puts_r+0xac>
 8005902:	69a2      	ldr	r2, [r4, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	dc06      	bgt.n	8005916 <_puts_r+0xb6>
 8005908:	290a      	cmp	r1, #10
 800590a:	d004      	beq.n	8005916 <_puts_r+0xb6>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	6022      	str	r2, [r4, #0]
 8005912:	7019      	strb	r1, [r3, #0]
 8005914:	e7c5      	b.n	80058a2 <_puts_r+0x42>
 8005916:	4622      	mov	r2, r4
 8005918:	4628      	mov	r0, r5
 800591a:	f000 f817 	bl	800594c <__swbuf_r>
 800591e:	3001      	adds	r0, #1
 8005920:	d1bf      	bne.n	80058a2 <_puts_r+0x42>
 8005922:	e7df      	b.n	80058e4 <_puts_r+0x84>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	250a      	movs	r5, #10
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	6022      	str	r2, [r4, #0]
 800592c:	701d      	strb	r5, [r3, #0]
 800592e:	e7db      	b.n	80058e8 <_puts_r+0x88>
 8005930:	08007bf4 	.word	0x08007bf4
 8005934:	08007c14 	.word	0x08007c14
 8005938:	08007bd4 	.word	0x08007bd4

0800593c <puts>:
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <puts+0xc>)
 800593e:	4601      	mov	r1, r0
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	f7ff bf8d 	b.w	8005860 <_puts_r>
 8005946:	bf00      	nop
 8005948:	2000000c 	.word	0x2000000c

0800594c <__swbuf_r>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	460e      	mov	r6, r1
 8005950:	4614      	mov	r4, r2
 8005952:	4605      	mov	r5, r0
 8005954:	b118      	cbz	r0, 800595e <__swbuf_r+0x12>
 8005956:	6983      	ldr	r3, [r0, #24]
 8005958:	b90b      	cbnz	r3, 800595e <__swbuf_r+0x12>
 800595a:	f001 f84d 	bl	80069f8 <__sinit>
 800595e:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <__swbuf_r+0x98>)
 8005960:	429c      	cmp	r4, r3
 8005962:	d12b      	bne.n	80059bc <__swbuf_r+0x70>
 8005964:	686c      	ldr	r4, [r5, #4]
 8005966:	69a3      	ldr	r3, [r4, #24]
 8005968:	60a3      	str	r3, [r4, #8]
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	071a      	lsls	r2, r3, #28
 800596e:	d52f      	bpl.n	80059d0 <__swbuf_r+0x84>
 8005970:	6923      	ldr	r3, [r4, #16]
 8005972:	b36b      	cbz	r3, 80059d0 <__swbuf_r+0x84>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	1ac0      	subs	r0, r0, r3
 800597a:	6963      	ldr	r3, [r4, #20]
 800597c:	b2f6      	uxtb	r6, r6
 800597e:	4283      	cmp	r3, r0
 8005980:	4637      	mov	r7, r6
 8005982:	dc04      	bgt.n	800598e <__swbuf_r+0x42>
 8005984:	4621      	mov	r1, r4
 8005986:	4628      	mov	r0, r5
 8005988:	f000 ffa2 	bl	80068d0 <_fflush_r>
 800598c:	bb30      	cbnz	r0, 80059dc <__swbuf_r+0x90>
 800598e:	68a3      	ldr	r3, [r4, #8]
 8005990:	3b01      	subs	r3, #1
 8005992:	60a3      	str	r3, [r4, #8]
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	6022      	str	r2, [r4, #0]
 800599a:	701e      	strb	r6, [r3, #0]
 800599c:	6963      	ldr	r3, [r4, #20]
 800599e:	3001      	adds	r0, #1
 80059a0:	4283      	cmp	r3, r0
 80059a2:	d004      	beq.n	80059ae <__swbuf_r+0x62>
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	07db      	lsls	r3, r3, #31
 80059a8:	d506      	bpl.n	80059b8 <__swbuf_r+0x6c>
 80059aa:	2e0a      	cmp	r6, #10
 80059ac:	d104      	bne.n	80059b8 <__swbuf_r+0x6c>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 ff8d 	bl	80068d0 <_fflush_r>
 80059b6:	b988      	cbnz	r0, 80059dc <__swbuf_r+0x90>
 80059b8:	4638      	mov	r0, r7
 80059ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <__swbuf_r+0x9c>)
 80059be:	429c      	cmp	r4, r3
 80059c0:	d101      	bne.n	80059c6 <__swbuf_r+0x7a>
 80059c2:	68ac      	ldr	r4, [r5, #8]
 80059c4:	e7cf      	b.n	8005966 <__swbuf_r+0x1a>
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <__swbuf_r+0xa0>)
 80059c8:	429c      	cmp	r4, r3
 80059ca:	bf08      	it	eq
 80059cc:	68ec      	ldreq	r4, [r5, #12]
 80059ce:	e7ca      	b.n	8005966 <__swbuf_r+0x1a>
 80059d0:	4621      	mov	r1, r4
 80059d2:	4628      	mov	r0, r5
 80059d4:	f000 f80c 	bl	80059f0 <__swsetup_r>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d0cb      	beq.n	8005974 <__swbuf_r+0x28>
 80059dc:	f04f 37ff 	mov.w	r7, #4294967295
 80059e0:	e7ea      	b.n	80059b8 <__swbuf_r+0x6c>
 80059e2:	bf00      	nop
 80059e4:	08007bf4 	.word	0x08007bf4
 80059e8:	08007c14 	.word	0x08007c14
 80059ec:	08007bd4 	.word	0x08007bd4

080059f0 <__swsetup_r>:
 80059f0:	4b32      	ldr	r3, [pc, #200]	; (8005abc <__swsetup_r+0xcc>)
 80059f2:	b570      	push	{r4, r5, r6, lr}
 80059f4:	681d      	ldr	r5, [r3, #0]
 80059f6:	4606      	mov	r6, r0
 80059f8:	460c      	mov	r4, r1
 80059fa:	b125      	cbz	r5, 8005a06 <__swsetup_r+0x16>
 80059fc:	69ab      	ldr	r3, [r5, #24]
 80059fe:	b913      	cbnz	r3, 8005a06 <__swsetup_r+0x16>
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 fff9 	bl	80069f8 <__sinit>
 8005a06:	4b2e      	ldr	r3, [pc, #184]	; (8005ac0 <__swsetup_r+0xd0>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	d10f      	bne.n	8005a2c <__swsetup_r+0x3c>
 8005a0c:	686c      	ldr	r4, [r5, #4]
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a14:	0719      	lsls	r1, r3, #28
 8005a16:	d42c      	bmi.n	8005a72 <__swsetup_r+0x82>
 8005a18:	06dd      	lsls	r5, r3, #27
 8005a1a:	d411      	bmi.n	8005a40 <__swsetup_r+0x50>
 8005a1c:	2309      	movs	r3, #9
 8005a1e:	6033      	str	r3, [r6, #0]
 8005a20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2a:	e03e      	b.n	8005aaa <__swsetup_r+0xba>
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <__swsetup_r+0xd4>)
 8005a2e:	429c      	cmp	r4, r3
 8005a30:	d101      	bne.n	8005a36 <__swsetup_r+0x46>
 8005a32:	68ac      	ldr	r4, [r5, #8]
 8005a34:	e7eb      	b.n	8005a0e <__swsetup_r+0x1e>
 8005a36:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <__swsetup_r+0xd8>)
 8005a38:	429c      	cmp	r4, r3
 8005a3a:	bf08      	it	eq
 8005a3c:	68ec      	ldreq	r4, [r5, #12]
 8005a3e:	e7e6      	b.n	8005a0e <__swsetup_r+0x1e>
 8005a40:	0758      	lsls	r0, r3, #29
 8005a42:	d512      	bpl.n	8005a6a <__swsetup_r+0x7a>
 8005a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a46:	b141      	cbz	r1, 8005a5a <__swsetup_r+0x6a>
 8005a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	d002      	beq.n	8005a56 <__swsetup_r+0x66>
 8005a50:	4630      	mov	r0, r6
 8005a52:	f001 fc8b 	bl	800736c <_free_r>
 8005a56:	2300      	movs	r3, #0
 8005a58:	6363      	str	r3, [r4, #52]	; 0x34
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	2300      	movs	r3, #0
 8005a64:	6063      	str	r3, [r4, #4]
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f043 0308 	orr.w	r3, r3, #8
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	b94b      	cbnz	r3, 8005a8a <__swsetup_r+0x9a>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a80:	d003      	beq.n	8005a8a <__swsetup_r+0x9a>
 8005a82:	4621      	mov	r1, r4
 8005a84:	4630      	mov	r0, r6
 8005a86:	f001 f881 	bl	8006b8c <__smakebuf_r>
 8005a8a:	89a0      	ldrh	r0, [r4, #12]
 8005a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a90:	f010 0301 	ands.w	r3, r0, #1
 8005a94:	d00a      	beq.n	8005aac <__swsetup_r+0xbc>
 8005a96:	2300      	movs	r3, #0
 8005a98:	60a3      	str	r3, [r4, #8]
 8005a9a:	6963      	ldr	r3, [r4, #20]
 8005a9c:	425b      	negs	r3, r3
 8005a9e:	61a3      	str	r3, [r4, #24]
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	b943      	cbnz	r3, 8005ab6 <__swsetup_r+0xc6>
 8005aa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005aa8:	d1ba      	bne.n	8005a20 <__swsetup_r+0x30>
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	0781      	lsls	r1, r0, #30
 8005aae:	bf58      	it	pl
 8005ab0:	6963      	ldrpl	r3, [r4, #20]
 8005ab2:	60a3      	str	r3, [r4, #8]
 8005ab4:	e7f4      	b.n	8005aa0 <__swsetup_r+0xb0>
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	e7f7      	b.n	8005aaa <__swsetup_r+0xba>
 8005aba:	bf00      	nop
 8005abc:	2000000c 	.word	0x2000000c
 8005ac0:	08007bf4 	.word	0x08007bf4
 8005ac4:	08007c14 	.word	0x08007c14
 8005ac8:	08007bd4 	.word	0x08007bd4

08005acc <quorem>:
 8005acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	6903      	ldr	r3, [r0, #16]
 8005ad2:	690c      	ldr	r4, [r1, #16]
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	4607      	mov	r7, r0
 8005ad8:	f2c0 8081 	blt.w	8005bde <quorem+0x112>
 8005adc:	3c01      	subs	r4, #1
 8005ade:	f101 0814 	add.w	r8, r1, #20
 8005ae2:	f100 0514 	add.w	r5, r0, #20
 8005ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005af4:	3301      	adds	r3, #1
 8005af6:	429a      	cmp	r2, r3
 8005af8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005afc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b00:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b04:	d331      	bcc.n	8005b6a <quorem+0x9e>
 8005b06:	f04f 0e00 	mov.w	lr, #0
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	46ac      	mov	ip, r5
 8005b0e:	46f2      	mov	sl, lr
 8005b10:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b14:	b293      	uxth	r3, r2
 8005b16:	fb06 e303 	mla	r3, r6, r3, lr
 8005b1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	ebaa 0303 	sub.w	r3, sl, r3
 8005b24:	f8dc a000 	ldr.w	sl, [ip]
 8005b28:	0c12      	lsrs	r2, r2, #16
 8005b2a:	fa13 f38a 	uxtah	r3, r3, sl
 8005b2e:	fb06 e202 	mla	r2, r6, r2, lr
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	9b00      	ldr	r3, [sp, #0]
 8005b36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b3a:	b292      	uxth	r2, r2
 8005b3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b44:	f8bd 3000 	ldrh.w	r3, [sp]
 8005b48:	4581      	cmp	r9, r0
 8005b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b4e:	f84c 3b04 	str.w	r3, [ip], #4
 8005b52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b56:	d2db      	bcs.n	8005b10 <quorem+0x44>
 8005b58:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b5c:	b92b      	cbnz	r3, 8005b6a <quorem+0x9e>
 8005b5e:	9b01      	ldr	r3, [sp, #4]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	429d      	cmp	r5, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	d32e      	bcc.n	8005bc6 <quorem+0xfa>
 8005b68:	613c      	str	r4, [r7, #16]
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f001 fae6 	bl	800713c <__mcmp>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	db24      	blt.n	8005bbe <quorem+0xf2>
 8005b74:	3601      	adds	r6, #1
 8005b76:	4628      	mov	r0, r5
 8005b78:	f04f 0c00 	mov.w	ip, #0
 8005b7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b80:	f8d0 e000 	ldr.w	lr, [r0]
 8005b84:	b293      	uxth	r3, r2
 8005b86:	ebac 0303 	sub.w	r3, ip, r3
 8005b8a:	0c12      	lsrs	r2, r2, #16
 8005b8c:	fa13 f38e 	uxtah	r3, r3, lr
 8005b90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b9e:	45c1      	cmp	r9, r8
 8005ba0:	f840 3b04 	str.w	r3, [r0], #4
 8005ba4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ba8:	d2e8      	bcs.n	8005b7c <quorem+0xb0>
 8005baa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bb2:	b922      	cbnz	r2, 8005bbe <quorem+0xf2>
 8005bb4:	3b04      	subs	r3, #4
 8005bb6:	429d      	cmp	r5, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	d30a      	bcc.n	8005bd2 <quorem+0x106>
 8005bbc:	613c      	str	r4, [r7, #16]
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	b003      	add	sp, #12
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	d1cc      	bne.n	8005b68 <quorem+0x9c>
 8005bce:	3c01      	subs	r4, #1
 8005bd0:	e7c7      	b.n	8005b62 <quorem+0x96>
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	3b04      	subs	r3, #4
 8005bd6:	2a00      	cmp	r2, #0
 8005bd8:	d1f0      	bne.n	8005bbc <quorem+0xf0>
 8005bda:	3c01      	subs	r4, #1
 8005bdc:	e7eb      	b.n	8005bb6 <quorem+0xea>
 8005bde:	2000      	movs	r0, #0
 8005be0:	e7ee      	b.n	8005bc0 <quorem+0xf4>
 8005be2:	0000      	movs	r0, r0
 8005be4:	0000      	movs	r0, r0
	...

08005be8 <_dtoa_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	ed2d 8b04 	vpush	{d8-d9}
 8005bf0:	ec57 6b10 	vmov	r6, r7, d0
 8005bf4:	b093      	sub	sp, #76	; 0x4c
 8005bf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bfc:	9106      	str	r1, [sp, #24]
 8005bfe:	ee10 aa10 	vmov	sl, s0
 8005c02:	4604      	mov	r4, r0
 8005c04:	9209      	str	r2, [sp, #36]	; 0x24
 8005c06:	930c      	str	r3, [sp, #48]	; 0x30
 8005c08:	46bb      	mov	fp, r7
 8005c0a:	b975      	cbnz	r5, 8005c2a <_dtoa_r+0x42>
 8005c0c:	2010      	movs	r0, #16
 8005c0e:	f000 fffd 	bl	8006c0c <malloc>
 8005c12:	4602      	mov	r2, r0
 8005c14:	6260      	str	r0, [r4, #36]	; 0x24
 8005c16:	b920      	cbnz	r0, 8005c22 <_dtoa_r+0x3a>
 8005c18:	4ba7      	ldr	r3, [pc, #668]	; (8005eb8 <_dtoa_r+0x2d0>)
 8005c1a:	21ea      	movs	r1, #234	; 0xea
 8005c1c:	48a7      	ldr	r0, [pc, #668]	; (8005ebc <_dtoa_r+0x2d4>)
 8005c1e:	f001 fe45 	bl	80078ac <__assert_func>
 8005c22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c26:	6005      	str	r5, [r0, #0]
 8005c28:	60c5      	str	r5, [r0, #12]
 8005c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	b151      	cbz	r1, 8005c46 <_dtoa_r+0x5e>
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	604a      	str	r2, [r1, #4]
 8005c34:	2301      	movs	r3, #1
 8005c36:	4093      	lsls	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f001 f83c 	bl	8006cb8 <_Bfree>
 8005c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	1e3b      	subs	r3, r7, #0
 8005c48:	bfaa      	itet	ge
 8005c4a:	2300      	movge	r3, #0
 8005c4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005c50:	f8c8 3000 	strge.w	r3, [r8]
 8005c54:	4b9a      	ldr	r3, [pc, #616]	; (8005ec0 <_dtoa_r+0x2d8>)
 8005c56:	bfbc      	itt	lt
 8005c58:	2201      	movlt	r2, #1
 8005c5a:	f8c8 2000 	strlt.w	r2, [r8]
 8005c5e:	ea33 030b 	bics.w	r3, r3, fp
 8005c62:	d11b      	bne.n	8005c9c <_dtoa_r+0xb4>
 8005c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c66:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c70:	4333      	orrs	r3, r6
 8005c72:	f000 8592 	beq.w	800679a <_dtoa_r+0xbb2>
 8005c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c78:	b963      	cbnz	r3, 8005c94 <_dtoa_r+0xac>
 8005c7a:	4b92      	ldr	r3, [pc, #584]	; (8005ec4 <_dtoa_r+0x2dc>)
 8005c7c:	e022      	b.n	8005cc4 <_dtoa_r+0xdc>
 8005c7e:	4b92      	ldr	r3, [pc, #584]	; (8005ec8 <_dtoa_r+0x2e0>)
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	3308      	adds	r3, #8
 8005c84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	9801      	ldr	r0, [sp, #4]
 8005c8a:	b013      	add	sp, #76	; 0x4c
 8005c8c:	ecbd 8b04 	vpop	{d8-d9}
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	4b8b      	ldr	r3, [pc, #556]	; (8005ec4 <_dtoa_r+0x2dc>)
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	3303      	adds	r3, #3
 8005c9a:	e7f3      	b.n	8005c84 <_dtoa_r+0x9c>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	f7fa ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca8:	ec4b ab19 	vmov	d9, sl, fp
 8005cac:	4680      	mov	r8, r0
 8005cae:	b158      	cbz	r0, 8005cc8 <_dtoa_r+0xe0>
 8005cb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 856b 	beq.w	8006794 <_dtoa_r+0xbac>
 8005cbe:	4883      	ldr	r0, [pc, #524]	; (8005ecc <_dtoa_r+0x2e4>)
 8005cc0:	6018      	str	r0, [r3, #0]
 8005cc2:	1e43      	subs	r3, r0, #1
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	e7df      	b.n	8005c88 <_dtoa_r+0xa0>
 8005cc8:	ec4b ab10 	vmov	d0, sl, fp
 8005ccc:	aa10      	add	r2, sp, #64	; 0x40
 8005cce:	a911      	add	r1, sp, #68	; 0x44
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f001 fad9 	bl	8007288 <__d2b>
 8005cd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005cda:	ee08 0a10 	vmov	s16, r0
 8005cde:	2d00      	cmp	r5, #0
 8005ce0:	f000 8084 	beq.w	8005dec <_dtoa_r+0x204>
 8005ce4:	ee19 3a90 	vmov	r3, s19
 8005ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005cf0:	4656      	mov	r6, sl
 8005cf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005cfe:	4b74      	ldr	r3, [pc, #464]	; (8005ed0 <_dtoa_r+0x2e8>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	4630      	mov	r0, r6
 8005d04:	4639      	mov	r1, r7
 8005d06:	f7fa fabf 	bl	8000288 <__aeabi_dsub>
 8005d0a:	a365      	add	r3, pc, #404	; (adr r3, 8005ea0 <_dtoa_r+0x2b8>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fc72 	bl	80005f8 <__aeabi_dmul>
 8005d14:	a364      	add	r3, pc, #400	; (adr r3, 8005ea8 <_dtoa_r+0x2c0>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f7fa fab7 	bl	800028c <__adddf3>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	4628      	mov	r0, r5
 8005d22:	460f      	mov	r7, r1
 8005d24:	f7fa fbfe 	bl	8000524 <__aeabi_i2d>
 8005d28:	a361      	add	r3, pc, #388	; (adr r3, 8005eb0 <_dtoa_r+0x2c8>)
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f7fa fc63 	bl	80005f8 <__aeabi_dmul>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	f7fa faa7 	bl	800028c <__adddf3>
 8005d3e:	4606      	mov	r6, r0
 8005d40:	460f      	mov	r7, r1
 8005d42:	f7fa ff09 	bl	8000b58 <__aeabi_d2iz>
 8005d46:	2200      	movs	r2, #0
 8005d48:	9000      	str	r0, [sp, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa fec4 	bl	8000adc <__aeabi_dcmplt>
 8005d54:	b150      	cbz	r0, 8005d6c <_dtoa_r+0x184>
 8005d56:	9800      	ldr	r0, [sp, #0]
 8005d58:	f7fa fbe4 	bl	8000524 <__aeabi_i2d>
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	463b      	mov	r3, r7
 8005d60:	f7fa feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d64:	b910      	cbnz	r0, 8005d6c <_dtoa_r+0x184>
 8005d66:	9b00      	ldr	r3, [sp, #0]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	9b00      	ldr	r3, [sp, #0]
 8005d6e:	2b16      	cmp	r3, #22
 8005d70:	d85a      	bhi.n	8005e28 <_dtoa_r+0x240>
 8005d72:	9a00      	ldr	r2, [sp, #0]
 8005d74:	4b57      	ldr	r3, [pc, #348]	; (8005ed4 <_dtoa_r+0x2ec>)
 8005d76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	ec51 0b19 	vmov	r0, r1, d9
 8005d82:	f7fa feab 	bl	8000adc <__aeabi_dcmplt>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d050      	beq.n	8005e2c <_dtoa_r+0x244>
 8005d8a:	9b00      	ldr	r3, [sp, #0]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2300      	movs	r3, #0
 8005d92:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d96:	1b5d      	subs	r5, r3, r5
 8005d98:	1e6b      	subs	r3, r5, #1
 8005d9a:	9305      	str	r3, [sp, #20]
 8005d9c:	bf45      	ittet	mi
 8005d9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005da2:	9304      	strmi	r3, [sp, #16]
 8005da4:	2300      	movpl	r3, #0
 8005da6:	2300      	movmi	r3, #0
 8005da8:	bf4c      	ite	mi
 8005daa:	9305      	strmi	r3, [sp, #20]
 8005dac:	9304      	strpl	r3, [sp, #16]
 8005dae:	9b00      	ldr	r3, [sp, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	db3d      	blt.n	8005e30 <_dtoa_r+0x248>
 8005db4:	9b05      	ldr	r3, [sp, #20]
 8005db6:	9a00      	ldr	r2, [sp, #0]
 8005db8:	920a      	str	r2, [sp, #40]	; 0x28
 8005dba:	4413      	add	r3, r2
 8005dbc:	9305      	str	r3, [sp, #20]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9307      	str	r3, [sp, #28]
 8005dc2:	9b06      	ldr	r3, [sp, #24]
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	f200 8089 	bhi.w	8005edc <_dtoa_r+0x2f4>
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	bfc4      	itt	gt
 8005dce:	3b04      	subgt	r3, #4
 8005dd0:	9306      	strgt	r3, [sp, #24]
 8005dd2:	9b06      	ldr	r3, [sp, #24]
 8005dd4:	f1a3 0302 	sub.w	r3, r3, #2
 8005dd8:	bfcc      	ite	gt
 8005dda:	2500      	movgt	r5, #0
 8005ddc:	2501      	movle	r5, #1
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	f200 8087 	bhi.w	8005ef2 <_dtoa_r+0x30a>
 8005de4:	e8df f003 	tbb	[pc, r3]
 8005de8:	59383a2d 	.word	0x59383a2d
 8005dec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005df0:	441d      	add	r5, r3
 8005df2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	bfc1      	itttt	gt
 8005dfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005dfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e02:	fa0b f303 	lslgt.w	r3, fp, r3
 8005e06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e0a:	bfda      	itte	le
 8005e0c:	f1c3 0320 	rsble	r3, r3, #32
 8005e10:	fa06 f003 	lslle.w	r0, r6, r3
 8005e14:	4318      	orrgt	r0, r3
 8005e16:	f7fa fb75 	bl	8000504 <__aeabi_ui2d>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005e22:	3d01      	subs	r5, #1
 8005e24:	930e      	str	r3, [sp, #56]	; 0x38
 8005e26:	e76a      	b.n	8005cfe <_dtoa_r+0x116>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e7b2      	b.n	8005d92 <_dtoa_r+0x1aa>
 8005e2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e2e:	e7b1      	b.n	8005d94 <_dtoa_r+0x1ac>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	9a00      	ldr	r2, [sp, #0]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	4253      	negs	r3, r2
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e40:	e7bf      	b.n	8005dc2 <_dtoa_r+0x1da>
 8005e42:	2300      	movs	r3, #0
 8005e44:	9308      	str	r3, [sp, #32]
 8005e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dc55      	bgt.n	8005ef8 <_dtoa_r+0x310>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e52:	461a      	mov	r2, r3
 8005e54:	9209      	str	r2, [sp, #36]	; 0x24
 8005e56:	e00c      	b.n	8005e72 <_dtoa_r+0x28a>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e7f3      	b.n	8005e44 <_dtoa_r+0x25c>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e60:	9308      	str	r3, [sp, #32]
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	9302      	str	r3, [sp, #8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	9303      	str	r3, [sp, #12]
 8005e6e:	bfb8      	it	lt
 8005e70:	2301      	movlt	r3, #1
 8005e72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e74:	2200      	movs	r2, #0
 8005e76:	6042      	str	r2, [r0, #4]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	f102 0614 	add.w	r6, r2, #20
 8005e7e:	429e      	cmp	r6, r3
 8005e80:	6841      	ldr	r1, [r0, #4]
 8005e82:	d93d      	bls.n	8005f00 <_dtoa_r+0x318>
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 fed7 	bl	8006c38 <_Balloc>
 8005e8a:	9001      	str	r0, [sp, #4]
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d13b      	bne.n	8005f08 <_dtoa_r+0x320>
 8005e90:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <_dtoa_r+0x2f0>)
 8005e92:	4602      	mov	r2, r0
 8005e94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e98:	e6c0      	b.n	8005c1c <_dtoa_r+0x34>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e7df      	b.n	8005e5e <_dtoa_r+0x276>
 8005e9e:	bf00      	nop
 8005ea0:	636f4361 	.word	0x636f4361
 8005ea4:	3fd287a7 	.word	0x3fd287a7
 8005ea8:	8b60c8b3 	.word	0x8b60c8b3
 8005eac:	3fc68a28 	.word	0x3fc68a28
 8005eb0:	509f79fb 	.word	0x509f79fb
 8005eb4:	3fd34413 	.word	0x3fd34413
 8005eb8:	08007b51 	.word	0x08007b51
 8005ebc:	08007b68 	.word	0x08007b68
 8005ec0:	7ff00000 	.word	0x7ff00000
 8005ec4:	08007b4d 	.word	0x08007b4d
 8005ec8:	08007b44 	.word	0x08007b44
 8005ecc:	08007b21 	.word	0x08007b21
 8005ed0:	3ff80000 	.word	0x3ff80000
 8005ed4:	08007cb8 	.word	0x08007cb8
 8005ed8:	08007bc3 	.word	0x08007bc3
 8005edc:	2501      	movs	r5, #1
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9306      	str	r3, [sp, #24]
 8005ee2:	9508      	str	r5, [sp, #32]
 8005ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005eec:	2200      	movs	r2, #0
 8005eee:	2312      	movs	r3, #18
 8005ef0:	e7b0      	b.n	8005e54 <_dtoa_r+0x26c>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	9308      	str	r3, [sp, #32]
 8005ef6:	e7f5      	b.n	8005ee4 <_dtoa_r+0x2fc>
 8005ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005efe:	e7b8      	b.n	8005e72 <_dtoa_r+0x28a>
 8005f00:	3101      	adds	r1, #1
 8005f02:	6041      	str	r1, [r0, #4]
 8005f04:	0052      	lsls	r2, r2, #1
 8005f06:	e7b8      	b.n	8005e7a <_dtoa_r+0x292>
 8005f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	2b0e      	cmp	r3, #14
 8005f12:	f200 809d 	bhi.w	8006050 <_dtoa_r+0x468>
 8005f16:	2d00      	cmp	r5, #0
 8005f18:	f000 809a 	beq.w	8006050 <_dtoa_r+0x468>
 8005f1c:	9b00      	ldr	r3, [sp, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dd32      	ble.n	8005f88 <_dtoa_r+0x3a0>
 8005f22:	4ab7      	ldr	r2, [pc, #732]	; (8006200 <_dtoa_r+0x618>)
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f30:	9b00      	ldr	r3, [sp, #0]
 8005f32:	05d8      	lsls	r0, r3, #23
 8005f34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005f38:	d516      	bpl.n	8005f68 <_dtoa_r+0x380>
 8005f3a:	4bb2      	ldr	r3, [pc, #712]	; (8006204 <_dtoa_r+0x61c>)
 8005f3c:	ec51 0b19 	vmov	r0, r1, d9
 8005f40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f44:	f7fa fc82 	bl	800084c <__aeabi_ddiv>
 8005f48:	f007 070f 	and.w	r7, r7, #15
 8005f4c:	4682      	mov	sl, r0
 8005f4e:	468b      	mov	fp, r1
 8005f50:	2503      	movs	r5, #3
 8005f52:	4eac      	ldr	r6, [pc, #688]	; (8006204 <_dtoa_r+0x61c>)
 8005f54:	b957      	cbnz	r7, 8005f6c <_dtoa_r+0x384>
 8005f56:	4642      	mov	r2, r8
 8005f58:	464b      	mov	r3, r9
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	f7fa fc75 	bl	800084c <__aeabi_ddiv>
 8005f62:	4682      	mov	sl, r0
 8005f64:	468b      	mov	fp, r1
 8005f66:	e028      	b.n	8005fba <_dtoa_r+0x3d2>
 8005f68:	2502      	movs	r5, #2
 8005f6a:	e7f2      	b.n	8005f52 <_dtoa_r+0x36a>
 8005f6c:	07f9      	lsls	r1, r7, #31
 8005f6e:	d508      	bpl.n	8005f82 <_dtoa_r+0x39a>
 8005f70:	4640      	mov	r0, r8
 8005f72:	4649      	mov	r1, r9
 8005f74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f78:	f7fa fb3e 	bl	80005f8 <__aeabi_dmul>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	4680      	mov	r8, r0
 8005f80:	4689      	mov	r9, r1
 8005f82:	107f      	asrs	r7, r7, #1
 8005f84:	3608      	adds	r6, #8
 8005f86:	e7e5      	b.n	8005f54 <_dtoa_r+0x36c>
 8005f88:	f000 809b 	beq.w	80060c2 <_dtoa_r+0x4da>
 8005f8c:	9b00      	ldr	r3, [sp, #0]
 8005f8e:	4f9d      	ldr	r7, [pc, #628]	; (8006204 <_dtoa_r+0x61c>)
 8005f90:	425e      	negs	r6, r3
 8005f92:	4b9b      	ldr	r3, [pc, #620]	; (8006200 <_dtoa_r+0x618>)
 8005f94:	f006 020f 	and.w	r2, r6, #15
 8005f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	ec51 0b19 	vmov	r0, r1, d9
 8005fa4:	f7fa fb28 	bl	80005f8 <__aeabi_dmul>
 8005fa8:	1136      	asrs	r6, r6, #4
 8005faa:	4682      	mov	sl, r0
 8005fac:	468b      	mov	fp, r1
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2502      	movs	r5, #2
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d17a      	bne.n	80060ac <_dtoa_r+0x4c4>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1d3      	bne.n	8005f62 <_dtoa_r+0x37a>
 8005fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8082 	beq.w	80060c6 <_dtoa_r+0x4de>
 8005fc2:	4b91      	ldr	r3, [pc, #580]	; (8006208 <_dtoa_r+0x620>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	4659      	mov	r1, fp
 8005fca:	f7fa fd87 	bl	8000adc <__aeabi_dcmplt>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d079      	beq.n	80060c6 <_dtoa_r+0x4de>
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d076      	beq.n	80060c6 <_dtoa_r+0x4de>
 8005fd8:	9b02      	ldr	r3, [sp, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dd36      	ble.n	800604c <_dtoa_r+0x464>
 8005fde:	9b00      	ldr	r3, [sp, #0]
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	1e5f      	subs	r7, r3, #1
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4b88      	ldr	r3, [pc, #544]	; (800620c <_dtoa_r+0x624>)
 8005fea:	f7fa fb05 	bl	80005f8 <__aeabi_dmul>
 8005fee:	9e02      	ldr	r6, [sp, #8]
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	468b      	mov	fp, r1
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f7fa fa94 	bl	8000524 <__aeabi_i2d>
 8005ffc:	4652      	mov	r2, sl
 8005ffe:	465b      	mov	r3, fp
 8006000:	f7fa fafa 	bl	80005f8 <__aeabi_dmul>
 8006004:	4b82      	ldr	r3, [pc, #520]	; (8006210 <_dtoa_r+0x628>)
 8006006:	2200      	movs	r2, #0
 8006008:	f7fa f940 	bl	800028c <__adddf3>
 800600c:	46d0      	mov	r8, sl
 800600e:	46d9      	mov	r9, fp
 8006010:	4682      	mov	sl, r0
 8006012:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006016:	2e00      	cmp	r6, #0
 8006018:	d158      	bne.n	80060cc <_dtoa_r+0x4e4>
 800601a:	4b7e      	ldr	r3, [pc, #504]	; (8006214 <_dtoa_r+0x62c>)
 800601c:	2200      	movs	r2, #0
 800601e:	4640      	mov	r0, r8
 8006020:	4649      	mov	r1, r9
 8006022:	f7fa f931 	bl	8000288 <__aeabi_dsub>
 8006026:	4652      	mov	r2, sl
 8006028:	465b      	mov	r3, fp
 800602a:	4680      	mov	r8, r0
 800602c:	4689      	mov	r9, r1
 800602e:	f7fa fd73 	bl	8000b18 <__aeabi_dcmpgt>
 8006032:	2800      	cmp	r0, #0
 8006034:	f040 8295 	bne.w	8006562 <_dtoa_r+0x97a>
 8006038:	4652      	mov	r2, sl
 800603a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800603e:	4640      	mov	r0, r8
 8006040:	4649      	mov	r1, r9
 8006042:	f7fa fd4b 	bl	8000adc <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	f040 8289 	bne.w	800655e <_dtoa_r+0x976>
 800604c:	ec5b ab19 	vmov	sl, fp, d9
 8006050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006052:	2b00      	cmp	r3, #0
 8006054:	f2c0 8148 	blt.w	80062e8 <_dtoa_r+0x700>
 8006058:	9a00      	ldr	r2, [sp, #0]
 800605a:	2a0e      	cmp	r2, #14
 800605c:	f300 8144 	bgt.w	80062e8 <_dtoa_r+0x700>
 8006060:	4b67      	ldr	r3, [pc, #412]	; (8006200 <_dtoa_r+0x618>)
 8006062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800606a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606c:	2b00      	cmp	r3, #0
 800606e:	f280 80d5 	bge.w	800621c <_dtoa_r+0x634>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f300 80d1 	bgt.w	800621c <_dtoa_r+0x634>
 800607a:	f040 826f 	bne.w	800655c <_dtoa_r+0x974>
 800607e:	4b65      	ldr	r3, [pc, #404]	; (8006214 <_dtoa_r+0x62c>)
 8006080:	2200      	movs	r2, #0
 8006082:	4640      	mov	r0, r8
 8006084:	4649      	mov	r1, r9
 8006086:	f7fa fab7 	bl	80005f8 <__aeabi_dmul>
 800608a:	4652      	mov	r2, sl
 800608c:	465b      	mov	r3, fp
 800608e:	f7fa fd39 	bl	8000b04 <__aeabi_dcmpge>
 8006092:	9e03      	ldr	r6, [sp, #12]
 8006094:	4637      	mov	r7, r6
 8006096:	2800      	cmp	r0, #0
 8006098:	f040 8245 	bne.w	8006526 <_dtoa_r+0x93e>
 800609c:	9d01      	ldr	r5, [sp, #4]
 800609e:	2331      	movs	r3, #49	; 0x31
 80060a0:	f805 3b01 	strb.w	r3, [r5], #1
 80060a4:	9b00      	ldr	r3, [sp, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	e240      	b.n	800652e <_dtoa_r+0x946>
 80060ac:	07f2      	lsls	r2, r6, #31
 80060ae:	d505      	bpl.n	80060bc <_dtoa_r+0x4d4>
 80060b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b4:	f7fa faa0 	bl	80005f8 <__aeabi_dmul>
 80060b8:	3501      	adds	r5, #1
 80060ba:	2301      	movs	r3, #1
 80060bc:	1076      	asrs	r6, r6, #1
 80060be:	3708      	adds	r7, #8
 80060c0:	e777      	b.n	8005fb2 <_dtoa_r+0x3ca>
 80060c2:	2502      	movs	r5, #2
 80060c4:	e779      	b.n	8005fba <_dtoa_r+0x3d2>
 80060c6:	9f00      	ldr	r7, [sp, #0]
 80060c8:	9e03      	ldr	r6, [sp, #12]
 80060ca:	e794      	b.n	8005ff6 <_dtoa_r+0x40e>
 80060cc:	9901      	ldr	r1, [sp, #4]
 80060ce:	4b4c      	ldr	r3, [pc, #304]	; (8006200 <_dtoa_r+0x618>)
 80060d0:	4431      	add	r1, r6
 80060d2:	910d      	str	r1, [sp, #52]	; 0x34
 80060d4:	9908      	ldr	r1, [sp, #32]
 80060d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060de:	2900      	cmp	r1, #0
 80060e0:	d043      	beq.n	800616a <_dtoa_r+0x582>
 80060e2:	494d      	ldr	r1, [pc, #308]	; (8006218 <_dtoa_r+0x630>)
 80060e4:	2000      	movs	r0, #0
 80060e6:	f7fa fbb1 	bl	800084c <__aeabi_ddiv>
 80060ea:	4652      	mov	r2, sl
 80060ec:	465b      	mov	r3, fp
 80060ee:	f7fa f8cb 	bl	8000288 <__aeabi_dsub>
 80060f2:	9d01      	ldr	r5, [sp, #4]
 80060f4:	4682      	mov	sl, r0
 80060f6:	468b      	mov	fp, r1
 80060f8:	4649      	mov	r1, r9
 80060fa:	4640      	mov	r0, r8
 80060fc:	f7fa fd2c 	bl	8000b58 <__aeabi_d2iz>
 8006100:	4606      	mov	r6, r0
 8006102:	f7fa fa0f 	bl	8000524 <__aeabi_i2d>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	f7fa f8bb 	bl	8000288 <__aeabi_dsub>
 8006112:	3630      	adds	r6, #48	; 0x30
 8006114:	f805 6b01 	strb.w	r6, [r5], #1
 8006118:	4652      	mov	r2, sl
 800611a:	465b      	mov	r3, fp
 800611c:	4680      	mov	r8, r0
 800611e:	4689      	mov	r9, r1
 8006120:	f7fa fcdc 	bl	8000adc <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	d163      	bne.n	80061f0 <_dtoa_r+0x608>
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	4936      	ldr	r1, [pc, #216]	; (8006208 <_dtoa_r+0x620>)
 800612e:	2000      	movs	r0, #0
 8006130:	f7fa f8aa 	bl	8000288 <__aeabi_dsub>
 8006134:	4652      	mov	r2, sl
 8006136:	465b      	mov	r3, fp
 8006138:	f7fa fcd0 	bl	8000adc <__aeabi_dcmplt>
 800613c:	2800      	cmp	r0, #0
 800613e:	f040 80b5 	bne.w	80062ac <_dtoa_r+0x6c4>
 8006142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006144:	429d      	cmp	r5, r3
 8006146:	d081      	beq.n	800604c <_dtoa_r+0x464>
 8006148:	4b30      	ldr	r3, [pc, #192]	; (800620c <_dtoa_r+0x624>)
 800614a:	2200      	movs	r2, #0
 800614c:	4650      	mov	r0, sl
 800614e:	4659      	mov	r1, fp
 8006150:	f7fa fa52 	bl	80005f8 <__aeabi_dmul>
 8006154:	4b2d      	ldr	r3, [pc, #180]	; (800620c <_dtoa_r+0x624>)
 8006156:	4682      	mov	sl, r0
 8006158:	468b      	mov	fp, r1
 800615a:	4640      	mov	r0, r8
 800615c:	4649      	mov	r1, r9
 800615e:	2200      	movs	r2, #0
 8006160:	f7fa fa4a 	bl	80005f8 <__aeabi_dmul>
 8006164:	4680      	mov	r8, r0
 8006166:	4689      	mov	r9, r1
 8006168:	e7c6      	b.n	80060f8 <_dtoa_r+0x510>
 800616a:	4650      	mov	r0, sl
 800616c:	4659      	mov	r1, fp
 800616e:	f7fa fa43 	bl	80005f8 <__aeabi_dmul>
 8006172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006174:	9d01      	ldr	r5, [sp, #4]
 8006176:	930f      	str	r3, [sp, #60]	; 0x3c
 8006178:	4682      	mov	sl, r0
 800617a:	468b      	mov	fp, r1
 800617c:	4649      	mov	r1, r9
 800617e:	4640      	mov	r0, r8
 8006180:	f7fa fcea 	bl	8000b58 <__aeabi_d2iz>
 8006184:	4606      	mov	r6, r0
 8006186:	f7fa f9cd 	bl	8000524 <__aeabi_i2d>
 800618a:	3630      	adds	r6, #48	; 0x30
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7fa f878 	bl	8000288 <__aeabi_dsub>
 8006198:	f805 6b01 	strb.w	r6, [r5], #1
 800619c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800619e:	429d      	cmp	r5, r3
 80061a0:	4680      	mov	r8, r0
 80061a2:	4689      	mov	r9, r1
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	d124      	bne.n	80061f4 <_dtoa_r+0x60c>
 80061aa:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <_dtoa_r+0x630>)
 80061ac:	4650      	mov	r0, sl
 80061ae:	4659      	mov	r1, fp
 80061b0:	f7fa f86c 	bl	800028c <__adddf3>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4640      	mov	r0, r8
 80061ba:	4649      	mov	r1, r9
 80061bc:	f7fa fcac 	bl	8000b18 <__aeabi_dcmpgt>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d173      	bne.n	80062ac <_dtoa_r+0x6c4>
 80061c4:	4652      	mov	r2, sl
 80061c6:	465b      	mov	r3, fp
 80061c8:	4913      	ldr	r1, [pc, #76]	; (8006218 <_dtoa_r+0x630>)
 80061ca:	2000      	movs	r0, #0
 80061cc:	f7fa f85c 	bl	8000288 <__aeabi_dsub>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4640      	mov	r0, r8
 80061d6:	4649      	mov	r1, r9
 80061d8:	f7fa fc80 	bl	8000adc <__aeabi_dcmplt>
 80061dc:	2800      	cmp	r0, #0
 80061de:	f43f af35 	beq.w	800604c <_dtoa_r+0x464>
 80061e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80061e4:	1e6b      	subs	r3, r5, #1
 80061e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061ec:	2b30      	cmp	r3, #48	; 0x30
 80061ee:	d0f8      	beq.n	80061e2 <_dtoa_r+0x5fa>
 80061f0:	9700      	str	r7, [sp, #0]
 80061f2:	e049      	b.n	8006288 <_dtoa_r+0x6a0>
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <_dtoa_r+0x624>)
 80061f6:	f7fa f9ff 	bl	80005f8 <__aeabi_dmul>
 80061fa:	4680      	mov	r8, r0
 80061fc:	4689      	mov	r9, r1
 80061fe:	e7bd      	b.n	800617c <_dtoa_r+0x594>
 8006200:	08007cb8 	.word	0x08007cb8
 8006204:	08007c90 	.word	0x08007c90
 8006208:	3ff00000 	.word	0x3ff00000
 800620c:	40240000 	.word	0x40240000
 8006210:	401c0000 	.word	0x401c0000
 8006214:	40140000 	.word	0x40140000
 8006218:	3fe00000 	.word	0x3fe00000
 800621c:	9d01      	ldr	r5, [sp, #4]
 800621e:	4656      	mov	r6, sl
 8006220:	465f      	mov	r7, fp
 8006222:	4642      	mov	r2, r8
 8006224:	464b      	mov	r3, r9
 8006226:	4630      	mov	r0, r6
 8006228:	4639      	mov	r1, r7
 800622a:	f7fa fb0f 	bl	800084c <__aeabi_ddiv>
 800622e:	f7fa fc93 	bl	8000b58 <__aeabi_d2iz>
 8006232:	4682      	mov	sl, r0
 8006234:	f7fa f976 	bl	8000524 <__aeabi_i2d>
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4630      	mov	r0, r6
 8006246:	4639      	mov	r1, r7
 8006248:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800624c:	f7fa f81c 	bl	8000288 <__aeabi_dsub>
 8006250:	f805 6b01 	strb.w	r6, [r5], #1
 8006254:	9e01      	ldr	r6, [sp, #4]
 8006256:	9f03      	ldr	r7, [sp, #12]
 8006258:	1bae      	subs	r6, r5, r6
 800625a:	42b7      	cmp	r7, r6
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	d135      	bne.n	80062ce <_dtoa_r+0x6e6>
 8006262:	f7fa f813 	bl	800028c <__adddf3>
 8006266:	4642      	mov	r2, r8
 8006268:	464b      	mov	r3, r9
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	f7fa fc53 	bl	8000b18 <__aeabi_dcmpgt>
 8006272:	b9d0      	cbnz	r0, 80062aa <_dtoa_r+0x6c2>
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006280:	b110      	cbz	r0, 8006288 <_dtoa_r+0x6a0>
 8006282:	f01a 0f01 	tst.w	sl, #1
 8006286:	d110      	bne.n	80062aa <_dtoa_r+0x6c2>
 8006288:	4620      	mov	r0, r4
 800628a:	ee18 1a10 	vmov	r1, s16
 800628e:	f000 fd13 	bl	8006cb8 <_Bfree>
 8006292:	2300      	movs	r3, #0
 8006294:	9800      	ldr	r0, [sp, #0]
 8006296:	702b      	strb	r3, [r5, #0]
 8006298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800629a:	3001      	adds	r0, #1
 800629c:	6018      	str	r0, [r3, #0]
 800629e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f43f acf1 	beq.w	8005c88 <_dtoa_r+0xa0>
 80062a6:	601d      	str	r5, [r3, #0]
 80062a8:	e4ee      	b.n	8005c88 <_dtoa_r+0xa0>
 80062aa:	9f00      	ldr	r7, [sp, #0]
 80062ac:	462b      	mov	r3, r5
 80062ae:	461d      	mov	r5, r3
 80062b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062b4:	2a39      	cmp	r2, #57	; 0x39
 80062b6:	d106      	bne.n	80062c6 <_dtoa_r+0x6de>
 80062b8:	9a01      	ldr	r2, [sp, #4]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d1f7      	bne.n	80062ae <_dtoa_r+0x6c6>
 80062be:	9901      	ldr	r1, [sp, #4]
 80062c0:	2230      	movs	r2, #48	; 0x30
 80062c2:	3701      	adds	r7, #1
 80062c4:	700a      	strb	r2, [r1, #0]
 80062c6:	781a      	ldrb	r2, [r3, #0]
 80062c8:	3201      	adds	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e790      	b.n	80061f0 <_dtoa_r+0x608>
 80062ce:	4ba6      	ldr	r3, [pc, #664]	; (8006568 <_dtoa_r+0x980>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	f7fa f991 	bl	80005f8 <__aeabi_dmul>
 80062d6:	2200      	movs	r2, #0
 80062d8:	2300      	movs	r3, #0
 80062da:	4606      	mov	r6, r0
 80062dc:	460f      	mov	r7, r1
 80062de:	f7fa fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d09d      	beq.n	8006222 <_dtoa_r+0x63a>
 80062e6:	e7cf      	b.n	8006288 <_dtoa_r+0x6a0>
 80062e8:	9a08      	ldr	r2, [sp, #32]
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	f000 80d7 	beq.w	800649e <_dtoa_r+0x8b6>
 80062f0:	9a06      	ldr	r2, [sp, #24]
 80062f2:	2a01      	cmp	r2, #1
 80062f4:	f300 80ba 	bgt.w	800646c <_dtoa_r+0x884>
 80062f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	f000 80b2 	beq.w	8006464 <_dtoa_r+0x87c>
 8006300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006304:	9e07      	ldr	r6, [sp, #28]
 8006306:	9d04      	ldr	r5, [sp, #16]
 8006308:	9a04      	ldr	r2, [sp, #16]
 800630a:	441a      	add	r2, r3
 800630c:	9204      	str	r2, [sp, #16]
 800630e:	9a05      	ldr	r2, [sp, #20]
 8006310:	2101      	movs	r1, #1
 8006312:	441a      	add	r2, r3
 8006314:	4620      	mov	r0, r4
 8006316:	9205      	str	r2, [sp, #20]
 8006318:	f000 fd86 	bl	8006e28 <__i2b>
 800631c:	4607      	mov	r7, r0
 800631e:	2d00      	cmp	r5, #0
 8006320:	dd0c      	ble.n	800633c <_dtoa_r+0x754>
 8006322:	9b05      	ldr	r3, [sp, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	dd09      	ble.n	800633c <_dtoa_r+0x754>
 8006328:	42ab      	cmp	r3, r5
 800632a:	9a04      	ldr	r2, [sp, #16]
 800632c:	bfa8      	it	ge
 800632e:	462b      	movge	r3, r5
 8006330:	1ad2      	subs	r2, r2, r3
 8006332:	9204      	str	r2, [sp, #16]
 8006334:	9a05      	ldr	r2, [sp, #20]
 8006336:	1aed      	subs	r5, r5, r3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	9b07      	ldr	r3, [sp, #28]
 800633e:	b31b      	cbz	r3, 8006388 <_dtoa_r+0x7a0>
 8006340:	9b08      	ldr	r3, [sp, #32]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 80af 	beq.w	80064a6 <_dtoa_r+0x8be>
 8006348:	2e00      	cmp	r6, #0
 800634a:	dd13      	ble.n	8006374 <_dtoa_r+0x78c>
 800634c:	4639      	mov	r1, r7
 800634e:	4632      	mov	r2, r6
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fe29 	bl	8006fa8 <__pow5mult>
 8006356:	ee18 2a10 	vmov	r2, s16
 800635a:	4601      	mov	r1, r0
 800635c:	4607      	mov	r7, r0
 800635e:	4620      	mov	r0, r4
 8006360:	f000 fd78 	bl	8006e54 <__multiply>
 8006364:	ee18 1a10 	vmov	r1, s16
 8006368:	4680      	mov	r8, r0
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fca4 	bl	8006cb8 <_Bfree>
 8006370:	ee08 8a10 	vmov	s16, r8
 8006374:	9b07      	ldr	r3, [sp, #28]
 8006376:	1b9a      	subs	r2, r3, r6
 8006378:	d006      	beq.n	8006388 <_dtoa_r+0x7a0>
 800637a:	ee18 1a10 	vmov	r1, s16
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fe12 	bl	8006fa8 <__pow5mult>
 8006384:	ee08 0a10 	vmov	s16, r0
 8006388:	2101      	movs	r1, #1
 800638a:	4620      	mov	r0, r4
 800638c:	f000 fd4c 	bl	8006e28 <__i2b>
 8006390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	4606      	mov	r6, r0
 8006396:	f340 8088 	ble.w	80064aa <_dtoa_r+0x8c2>
 800639a:	461a      	mov	r2, r3
 800639c:	4601      	mov	r1, r0
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fe02 	bl	8006fa8 <__pow5mult>
 80063a4:	9b06      	ldr	r3, [sp, #24]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	4606      	mov	r6, r0
 80063aa:	f340 8081 	ble.w	80064b0 <_dtoa_r+0x8c8>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	6933      	ldr	r3, [r6, #16]
 80063b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80063b8:	6918      	ldr	r0, [r3, #16]
 80063ba:	f000 fce5 	bl	8006d88 <__hi0bits>
 80063be:	f1c0 0020 	rsb	r0, r0, #32
 80063c2:	9b05      	ldr	r3, [sp, #20]
 80063c4:	4418      	add	r0, r3
 80063c6:	f010 001f 	ands.w	r0, r0, #31
 80063ca:	f000 8092 	beq.w	80064f2 <_dtoa_r+0x90a>
 80063ce:	f1c0 0320 	rsb	r3, r0, #32
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	f340 808a 	ble.w	80064ec <_dtoa_r+0x904>
 80063d8:	f1c0 001c 	rsb	r0, r0, #28
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	4403      	add	r3, r0
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	9b05      	ldr	r3, [sp, #20]
 80063e4:	4403      	add	r3, r0
 80063e6:	4405      	add	r5, r0
 80063e8:	9305      	str	r3, [sp, #20]
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd07      	ble.n	8006400 <_dtoa_r+0x818>
 80063f0:	ee18 1a10 	vmov	r1, s16
 80063f4:	461a      	mov	r2, r3
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 fe30 	bl	800705c <__lshift>
 80063fc:	ee08 0a10 	vmov	s16, r0
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	dd05      	ble.n	8006412 <_dtoa_r+0x82a>
 8006406:	4631      	mov	r1, r6
 8006408:	461a      	mov	r2, r3
 800640a:	4620      	mov	r0, r4
 800640c:	f000 fe26 	bl	800705c <__lshift>
 8006410:	4606      	mov	r6, r0
 8006412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d06e      	beq.n	80064f6 <_dtoa_r+0x90e>
 8006418:	ee18 0a10 	vmov	r0, s16
 800641c:	4631      	mov	r1, r6
 800641e:	f000 fe8d 	bl	800713c <__mcmp>
 8006422:	2800      	cmp	r0, #0
 8006424:	da67      	bge.n	80064f6 <_dtoa_r+0x90e>
 8006426:	9b00      	ldr	r3, [sp, #0]
 8006428:	3b01      	subs	r3, #1
 800642a:	ee18 1a10 	vmov	r1, s16
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	220a      	movs	r2, #10
 8006432:	2300      	movs	r3, #0
 8006434:	4620      	mov	r0, r4
 8006436:	f000 fc61 	bl	8006cfc <__multadd>
 800643a:	9b08      	ldr	r3, [sp, #32]
 800643c:	ee08 0a10 	vmov	s16, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 81b1 	beq.w	80067a8 <_dtoa_r+0xbc0>
 8006446:	2300      	movs	r3, #0
 8006448:	4639      	mov	r1, r7
 800644a:	220a      	movs	r2, #10
 800644c:	4620      	mov	r0, r4
 800644e:	f000 fc55 	bl	8006cfc <__multadd>
 8006452:	9b02      	ldr	r3, [sp, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	4607      	mov	r7, r0
 8006458:	f300 808e 	bgt.w	8006578 <_dtoa_r+0x990>
 800645c:	9b06      	ldr	r3, [sp, #24]
 800645e:	2b02      	cmp	r3, #2
 8006460:	dc51      	bgt.n	8006506 <_dtoa_r+0x91e>
 8006462:	e089      	b.n	8006578 <_dtoa_r+0x990>
 8006464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800646a:	e74b      	b.n	8006304 <_dtoa_r+0x71c>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	1e5e      	subs	r6, r3, #1
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	42b3      	cmp	r3, r6
 8006474:	bfbf      	itttt	lt
 8006476:	9b07      	ldrlt	r3, [sp, #28]
 8006478:	9607      	strlt	r6, [sp, #28]
 800647a:	1af2      	sublt	r2, r6, r3
 800647c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800647e:	bfb6      	itet	lt
 8006480:	189b      	addlt	r3, r3, r2
 8006482:	1b9e      	subge	r6, r3, r6
 8006484:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	bfb8      	it	lt
 800648a:	2600      	movlt	r6, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	bfb7      	itett	lt
 8006490:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006494:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006498:	1a9d      	sublt	r5, r3, r2
 800649a:	2300      	movlt	r3, #0
 800649c:	e734      	b.n	8006308 <_dtoa_r+0x720>
 800649e:	9e07      	ldr	r6, [sp, #28]
 80064a0:	9d04      	ldr	r5, [sp, #16]
 80064a2:	9f08      	ldr	r7, [sp, #32]
 80064a4:	e73b      	b.n	800631e <_dtoa_r+0x736>
 80064a6:	9a07      	ldr	r2, [sp, #28]
 80064a8:	e767      	b.n	800637a <_dtoa_r+0x792>
 80064aa:	9b06      	ldr	r3, [sp, #24]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	dc18      	bgt.n	80064e2 <_dtoa_r+0x8fa>
 80064b0:	f1ba 0f00 	cmp.w	sl, #0
 80064b4:	d115      	bne.n	80064e2 <_dtoa_r+0x8fa>
 80064b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064ba:	b993      	cbnz	r3, 80064e2 <_dtoa_r+0x8fa>
 80064bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064c0:	0d1b      	lsrs	r3, r3, #20
 80064c2:	051b      	lsls	r3, r3, #20
 80064c4:	b183      	cbz	r3, 80064e8 <_dtoa_r+0x900>
 80064c6:	9b04      	ldr	r3, [sp, #16]
 80064c8:	3301      	adds	r3, #1
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	9b05      	ldr	r3, [sp, #20]
 80064ce:	3301      	adds	r3, #1
 80064d0:	9305      	str	r3, [sp, #20]
 80064d2:	f04f 0801 	mov.w	r8, #1
 80064d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f af6a 	bne.w	80063b2 <_dtoa_r+0x7ca>
 80064de:	2001      	movs	r0, #1
 80064e0:	e76f      	b.n	80063c2 <_dtoa_r+0x7da>
 80064e2:	f04f 0800 	mov.w	r8, #0
 80064e6:	e7f6      	b.n	80064d6 <_dtoa_r+0x8ee>
 80064e8:	4698      	mov	r8, r3
 80064ea:	e7f4      	b.n	80064d6 <_dtoa_r+0x8ee>
 80064ec:	f43f af7d 	beq.w	80063ea <_dtoa_r+0x802>
 80064f0:	4618      	mov	r0, r3
 80064f2:	301c      	adds	r0, #28
 80064f4:	e772      	b.n	80063dc <_dtoa_r+0x7f4>
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dc37      	bgt.n	800656c <_dtoa_r+0x984>
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	dd34      	ble.n	800656c <_dtoa_r+0x984>
 8006502:	9b03      	ldr	r3, [sp, #12]
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	9b02      	ldr	r3, [sp, #8]
 8006508:	b96b      	cbnz	r3, 8006526 <_dtoa_r+0x93e>
 800650a:	4631      	mov	r1, r6
 800650c:	2205      	movs	r2, #5
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fbf4 	bl	8006cfc <__multadd>
 8006514:	4601      	mov	r1, r0
 8006516:	4606      	mov	r6, r0
 8006518:	ee18 0a10 	vmov	r0, s16
 800651c:	f000 fe0e 	bl	800713c <__mcmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	f73f adbb 	bgt.w	800609c <_dtoa_r+0x4b4>
 8006526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006528:	9d01      	ldr	r5, [sp, #4]
 800652a:	43db      	mvns	r3, r3
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	f04f 0800 	mov.w	r8, #0
 8006532:	4631      	mov	r1, r6
 8006534:	4620      	mov	r0, r4
 8006536:	f000 fbbf 	bl	8006cb8 <_Bfree>
 800653a:	2f00      	cmp	r7, #0
 800653c:	f43f aea4 	beq.w	8006288 <_dtoa_r+0x6a0>
 8006540:	f1b8 0f00 	cmp.w	r8, #0
 8006544:	d005      	beq.n	8006552 <_dtoa_r+0x96a>
 8006546:	45b8      	cmp	r8, r7
 8006548:	d003      	beq.n	8006552 <_dtoa_r+0x96a>
 800654a:	4641      	mov	r1, r8
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fbb3 	bl	8006cb8 <_Bfree>
 8006552:	4639      	mov	r1, r7
 8006554:	4620      	mov	r0, r4
 8006556:	f000 fbaf 	bl	8006cb8 <_Bfree>
 800655a:	e695      	b.n	8006288 <_dtoa_r+0x6a0>
 800655c:	2600      	movs	r6, #0
 800655e:	4637      	mov	r7, r6
 8006560:	e7e1      	b.n	8006526 <_dtoa_r+0x93e>
 8006562:	9700      	str	r7, [sp, #0]
 8006564:	4637      	mov	r7, r6
 8006566:	e599      	b.n	800609c <_dtoa_r+0x4b4>
 8006568:	40240000 	.word	0x40240000
 800656c:	9b08      	ldr	r3, [sp, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80ca 	beq.w	8006708 <_dtoa_r+0xb20>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	9302      	str	r3, [sp, #8]
 8006578:	2d00      	cmp	r5, #0
 800657a:	dd05      	ble.n	8006588 <_dtoa_r+0x9a0>
 800657c:	4639      	mov	r1, r7
 800657e:	462a      	mov	r2, r5
 8006580:	4620      	mov	r0, r4
 8006582:	f000 fd6b 	bl	800705c <__lshift>
 8006586:	4607      	mov	r7, r0
 8006588:	f1b8 0f00 	cmp.w	r8, #0
 800658c:	d05b      	beq.n	8006646 <_dtoa_r+0xa5e>
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fb51 	bl	8006c38 <_Balloc>
 8006596:	4605      	mov	r5, r0
 8006598:	b928      	cbnz	r0, 80065a6 <_dtoa_r+0x9be>
 800659a:	4b87      	ldr	r3, [pc, #540]	; (80067b8 <_dtoa_r+0xbd0>)
 800659c:	4602      	mov	r2, r0
 800659e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80065a2:	f7ff bb3b 	b.w	8005c1c <_dtoa_r+0x34>
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	3202      	adds	r2, #2
 80065aa:	0092      	lsls	r2, r2, #2
 80065ac:	f107 010c 	add.w	r1, r7, #12
 80065b0:	300c      	adds	r0, #12
 80065b2:	f000 fb33 	bl	8006c1c <memcpy>
 80065b6:	2201      	movs	r2, #1
 80065b8:	4629      	mov	r1, r5
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 fd4e 	bl	800705c <__lshift>
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	f103 0901 	add.w	r9, r3, #1
 80065c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80065ca:	4413      	add	r3, r2
 80065cc:	9305      	str	r3, [sp, #20]
 80065ce:	f00a 0301 	and.w	r3, sl, #1
 80065d2:	46b8      	mov	r8, r7
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	4607      	mov	r7, r0
 80065d8:	4631      	mov	r1, r6
 80065da:	ee18 0a10 	vmov	r0, s16
 80065de:	f7ff fa75 	bl	8005acc <quorem>
 80065e2:	4641      	mov	r1, r8
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80065ea:	ee18 0a10 	vmov	r0, s16
 80065ee:	f000 fda5 	bl	800713c <__mcmp>
 80065f2:	463a      	mov	r2, r7
 80065f4:	9003      	str	r0, [sp, #12]
 80065f6:	4631      	mov	r1, r6
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fdbb 	bl	8007174 <__mdiff>
 80065fe:	68c2      	ldr	r2, [r0, #12]
 8006600:	f109 3bff 	add.w	fp, r9, #4294967295
 8006604:	4605      	mov	r5, r0
 8006606:	bb02      	cbnz	r2, 800664a <_dtoa_r+0xa62>
 8006608:	4601      	mov	r1, r0
 800660a:	ee18 0a10 	vmov	r0, s16
 800660e:	f000 fd95 	bl	800713c <__mcmp>
 8006612:	4602      	mov	r2, r0
 8006614:	4629      	mov	r1, r5
 8006616:	4620      	mov	r0, r4
 8006618:	9207      	str	r2, [sp, #28]
 800661a:	f000 fb4d 	bl	8006cb8 <_Bfree>
 800661e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006622:	ea43 0102 	orr.w	r1, r3, r2
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	430b      	orrs	r3, r1
 800662a:	464d      	mov	r5, r9
 800662c:	d10f      	bne.n	800664e <_dtoa_r+0xa66>
 800662e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006632:	d02a      	beq.n	800668a <_dtoa_r+0xaa2>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dd02      	ble.n	8006640 <_dtoa_r+0xa58>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006640:	f88b a000 	strb.w	sl, [fp]
 8006644:	e775      	b.n	8006532 <_dtoa_r+0x94a>
 8006646:	4638      	mov	r0, r7
 8006648:	e7ba      	b.n	80065c0 <_dtoa_r+0x9d8>
 800664a:	2201      	movs	r2, #1
 800664c:	e7e2      	b.n	8006614 <_dtoa_r+0xa2c>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	db04      	blt.n	800665e <_dtoa_r+0xa76>
 8006654:	9906      	ldr	r1, [sp, #24]
 8006656:	430b      	orrs	r3, r1
 8006658:	9904      	ldr	r1, [sp, #16]
 800665a:	430b      	orrs	r3, r1
 800665c:	d122      	bne.n	80066a4 <_dtoa_r+0xabc>
 800665e:	2a00      	cmp	r2, #0
 8006660:	ddee      	ble.n	8006640 <_dtoa_r+0xa58>
 8006662:	ee18 1a10 	vmov	r1, s16
 8006666:	2201      	movs	r2, #1
 8006668:	4620      	mov	r0, r4
 800666a:	f000 fcf7 	bl	800705c <__lshift>
 800666e:	4631      	mov	r1, r6
 8006670:	ee08 0a10 	vmov	s16, r0
 8006674:	f000 fd62 	bl	800713c <__mcmp>
 8006678:	2800      	cmp	r0, #0
 800667a:	dc03      	bgt.n	8006684 <_dtoa_r+0xa9c>
 800667c:	d1e0      	bne.n	8006640 <_dtoa_r+0xa58>
 800667e:	f01a 0f01 	tst.w	sl, #1
 8006682:	d0dd      	beq.n	8006640 <_dtoa_r+0xa58>
 8006684:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006688:	d1d7      	bne.n	800663a <_dtoa_r+0xa52>
 800668a:	2339      	movs	r3, #57	; 0x39
 800668c:	f88b 3000 	strb.w	r3, [fp]
 8006690:	462b      	mov	r3, r5
 8006692:	461d      	mov	r5, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800669a:	2a39      	cmp	r2, #57	; 0x39
 800669c:	d071      	beq.n	8006782 <_dtoa_r+0xb9a>
 800669e:	3201      	adds	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e746      	b.n	8006532 <_dtoa_r+0x94a>
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	dd07      	ble.n	80066b8 <_dtoa_r+0xad0>
 80066a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066ac:	d0ed      	beq.n	800668a <_dtoa_r+0xaa2>
 80066ae:	f10a 0301 	add.w	r3, sl, #1
 80066b2:	f88b 3000 	strb.w	r3, [fp]
 80066b6:	e73c      	b.n	8006532 <_dtoa_r+0x94a>
 80066b8:	9b05      	ldr	r3, [sp, #20]
 80066ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80066be:	4599      	cmp	r9, r3
 80066c0:	d047      	beq.n	8006752 <_dtoa_r+0xb6a>
 80066c2:	ee18 1a10 	vmov	r1, s16
 80066c6:	2300      	movs	r3, #0
 80066c8:	220a      	movs	r2, #10
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fb16 	bl	8006cfc <__multadd>
 80066d0:	45b8      	cmp	r8, r7
 80066d2:	ee08 0a10 	vmov	s16, r0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	f04f 020a 	mov.w	r2, #10
 80066de:	4641      	mov	r1, r8
 80066e0:	4620      	mov	r0, r4
 80066e2:	d106      	bne.n	80066f2 <_dtoa_r+0xb0a>
 80066e4:	f000 fb0a 	bl	8006cfc <__multadd>
 80066e8:	4680      	mov	r8, r0
 80066ea:	4607      	mov	r7, r0
 80066ec:	f109 0901 	add.w	r9, r9, #1
 80066f0:	e772      	b.n	80065d8 <_dtoa_r+0x9f0>
 80066f2:	f000 fb03 	bl	8006cfc <__multadd>
 80066f6:	4639      	mov	r1, r7
 80066f8:	4680      	mov	r8, r0
 80066fa:	2300      	movs	r3, #0
 80066fc:	220a      	movs	r2, #10
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 fafc 	bl	8006cfc <__multadd>
 8006704:	4607      	mov	r7, r0
 8006706:	e7f1      	b.n	80066ec <_dtoa_r+0xb04>
 8006708:	9b03      	ldr	r3, [sp, #12]
 800670a:	9302      	str	r3, [sp, #8]
 800670c:	9d01      	ldr	r5, [sp, #4]
 800670e:	ee18 0a10 	vmov	r0, s16
 8006712:	4631      	mov	r1, r6
 8006714:	f7ff f9da 	bl	8005acc <quorem>
 8006718:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	f805 ab01 	strb.w	sl, [r5], #1
 8006722:	1aea      	subs	r2, r5, r3
 8006724:	9b02      	ldr	r3, [sp, #8]
 8006726:	4293      	cmp	r3, r2
 8006728:	dd09      	ble.n	800673e <_dtoa_r+0xb56>
 800672a:	ee18 1a10 	vmov	r1, s16
 800672e:	2300      	movs	r3, #0
 8006730:	220a      	movs	r2, #10
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fae2 	bl	8006cfc <__multadd>
 8006738:	ee08 0a10 	vmov	s16, r0
 800673c:	e7e7      	b.n	800670e <_dtoa_r+0xb26>
 800673e:	9b02      	ldr	r3, [sp, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	bfc8      	it	gt
 8006744:	461d      	movgt	r5, r3
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	bfd8      	it	le
 800674a:	2501      	movle	r5, #1
 800674c:	441d      	add	r5, r3
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	ee18 1a10 	vmov	r1, s16
 8006756:	2201      	movs	r2, #1
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fc7f 	bl	800705c <__lshift>
 800675e:	4631      	mov	r1, r6
 8006760:	ee08 0a10 	vmov	s16, r0
 8006764:	f000 fcea 	bl	800713c <__mcmp>
 8006768:	2800      	cmp	r0, #0
 800676a:	dc91      	bgt.n	8006690 <_dtoa_r+0xaa8>
 800676c:	d102      	bne.n	8006774 <_dtoa_r+0xb8c>
 800676e:	f01a 0f01 	tst.w	sl, #1
 8006772:	d18d      	bne.n	8006690 <_dtoa_r+0xaa8>
 8006774:	462b      	mov	r3, r5
 8006776:	461d      	mov	r5, r3
 8006778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800677c:	2a30      	cmp	r2, #48	; 0x30
 800677e:	d0fa      	beq.n	8006776 <_dtoa_r+0xb8e>
 8006780:	e6d7      	b.n	8006532 <_dtoa_r+0x94a>
 8006782:	9a01      	ldr	r2, [sp, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d184      	bne.n	8006692 <_dtoa_r+0xaaa>
 8006788:	9b00      	ldr	r3, [sp, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	2331      	movs	r3, #49	; 0x31
 8006790:	7013      	strb	r3, [r2, #0]
 8006792:	e6ce      	b.n	8006532 <_dtoa_r+0x94a>
 8006794:	4b09      	ldr	r3, [pc, #36]	; (80067bc <_dtoa_r+0xbd4>)
 8006796:	f7ff ba95 	b.w	8005cc4 <_dtoa_r+0xdc>
 800679a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800679c:	2b00      	cmp	r3, #0
 800679e:	f47f aa6e 	bne.w	8005c7e <_dtoa_r+0x96>
 80067a2:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <_dtoa_r+0xbd8>)
 80067a4:	f7ff ba8e 	b.w	8005cc4 <_dtoa_r+0xdc>
 80067a8:	9b02      	ldr	r3, [sp, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dcae      	bgt.n	800670c <_dtoa_r+0xb24>
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	f73f aea8 	bgt.w	8006506 <_dtoa_r+0x91e>
 80067b6:	e7a9      	b.n	800670c <_dtoa_r+0xb24>
 80067b8:	08007bc3 	.word	0x08007bc3
 80067bc:	08007b20 	.word	0x08007b20
 80067c0:	08007b44 	.word	0x08007b44

080067c4 <__sflush_r>:
 80067c4:	898a      	ldrh	r2, [r1, #12]
 80067c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ca:	4605      	mov	r5, r0
 80067cc:	0710      	lsls	r0, r2, #28
 80067ce:	460c      	mov	r4, r1
 80067d0:	d458      	bmi.n	8006884 <__sflush_r+0xc0>
 80067d2:	684b      	ldr	r3, [r1, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dc05      	bgt.n	80067e4 <__sflush_r+0x20>
 80067d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dc02      	bgt.n	80067e4 <__sflush_r+0x20>
 80067de:	2000      	movs	r0, #0
 80067e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	d0f9      	beq.n	80067de <__sflush_r+0x1a>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067f0:	682f      	ldr	r7, [r5, #0]
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	d032      	beq.n	800685c <__sflush_r+0x98>
 80067f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	075a      	lsls	r2, r3, #29
 80067fc:	d505      	bpl.n	800680a <__sflush_r+0x46>
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	1ac0      	subs	r0, r0, r3
 8006802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006804:	b10b      	cbz	r3, 800680a <__sflush_r+0x46>
 8006806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006808:	1ac0      	subs	r0, r0, r3
 800680a:	2300      	movs	r3, #0
 800680c:	4602      	mov	r2, r0
 800680e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006810:	6a21      	ldr	r1, [r4, #32]
 8006812:	4628      	mov	r0, r5
 8006814:	47b0      	blx	r6
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	d106      	bne.n	800682a <__sflush_r+0x66>
 800681c:	6829      	ldr	r1, [r5, #0]
 800681e:	291d      	cmp	r1, #29
 8006820:	d82c      	bhi.n	800687c <__sflush_r+0xb8>
 8006822:	4a2a      	ldr	r2, [pc, #168]	; (80068cc <__sflush_r+0x108>)
 8006824:	40ca      	lsrs	r2, r1
 8006826:	07d6      	lsls	r6, r2, #31
 8006828:	d528      	bpl.n	800687c <__sflush_r+0xb8>
 800682a:	2200      	movs	r2, #0
 800682c:	6062      	str	r2, [r4, #4]
 800682e:	04d9      	lsls	r1, r3, #19
 8006830:	6922      	ldr	r2, [r4, #16]
 8006832:	6022      	str	r2, [r4, #0]
 8006834:	d504      	bpl.n	8006840 <__sflush_r+0x7c>
 8006836:	1c42      	adds	r2, r0, #1
 8006838:	d101      	bne.n	800683e <__sflush_r+0x7a>
 800683a:	682b      	ldr	r3, [r5, #0]
 800683c:	b903      	cbnz	r3, 8006840 <__sflush_r+0x7c>
 800683e:	6560      	str	r0, [r4, #84]	; 0x54
 8006840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006842:	602f      	str	r7, [r5, #0]
 8006844:	2900      	cmp	r1, #0
 8006846:	d0ca      	beq.n	80067de <__sflush_r+0x1a>
 8006848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800684c:	4299      	cmp	r1, r3
 800684e:	d002      	beq.n	8006856 <__sflush_r+0x92>
 8006850:	4628      	mov	r0, r5
 8006852:	f000 fd8b 	bl	800736c <_free_r>
 8006856:	2000      	movs	r0, #0
 8006858:	6360      	str	r0, [r4, #52]	; 0x34
 800685a:	e7c1      	b.n	80067e0 <__sflush_r+0x1c>
 800685c:	6a21      	ldr	r1, [r4, #32]
 800685e:	2301      	movs	r3, #1
 8006860:	4628      	mov	r0, r5
 8006862:	47b0      	blx	r6
 8006864:	1c41      	adds	r1, r0, #1
 8006866:	d1c7      	bne.n	80067f8 <__sflush_r+0x34>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0c4      	beq.n	80067f8 <__sflush_r+0x34>
 800686e:	2b1d      	cmp	r3, #29
 8006870:	d001      	beq.n	8006876 <__sflush_r+0xb2>
 8006872:	2b16      	cmp	r3, #22
 8006874:	d101      	bne.n	800687a <__sflush_r+0xb6>
 8006876:	602f      	str	r7, [r5, #0]
 8006878:	e7b1      	b.n	80067de <__sflush_r+0x1a>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	e7ad      	b.n	80067e0 <__sflush_r+0x1c>
 8006884:	690f      	ldr	r7, [r1, #16]
 8006886:	2f00      	cmp	r7, #0
 8006888:	d0a9      	beq.n	80067de <__sflush_r+0x1a>
 800688a:	0793      	lsls	r3, r2, #30
 800688c:	680e      	ldr	r6, [r1, #0]
 800688e:	bf08      	it	eq
 8006890:	694b      	ldreq	r3, [r1, #20]
 8006892:	600f      	str	r7, [r1, #0]
 8006894:	bf18      	it	ne
 8006896:	2300      	movne	r3, #0
 8006898:	eba6 0807 	sub.w	r8, r6, r7
 800689c:	608b      	str	r3, [r1, #8]
 800689e:	f1b8 0f00 	cmp.w	r8, #0
 80068a2:	dd9c      	ble.n	80067de <__sflush_r+0x1a>
 80068a4:	6a21      	ldr	r1, [r4, #32]
 80068a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068a8:	4643      	mov	r3, r8
 80068aa:	463a      	mov	r2, r7
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b0      	blx	r6
 80068b0:	2800      	cmp	r0, #0
 80068b2:	dc06      	bgt.n	80068c2 <__sflush_r+0xfe>
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ba:	81a3      	strh	r3, [r4, #12]
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	e78e      	b.n	80067e0 <__sflush_r+0x1c>
 80068c2:	4407      	add	r7, r0
 80068c4:	eba8 0800 	sub.w	r8, r8, r0
 80068c8:	e7e9      	b.n	800689e <__sflush_r+0xda>
 80068ca:	bf00      	nop
 80068cc:	20400001 	.word	0x20400001

080068d0 <_fflush_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	690b      	ldr	r3, [r1, #16]
 80068d4:	4605      	mov	r5, r0
 80068d6:	460c      	mov	r4, r1
 80068d8:	b913      	cbnz	r3, 80068e0 <_fflush_r+0x10>
 80068da:	2500      	movs	r5, #0
 80068dc:	4628      	mov	r0, r5
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	b118      	cbz	r0, 80068ea <_fflush_r+0x1a>
 80068e2:	6983      	ldr	r3, [r0, #24]
 80068e4:	b90b      	cbnz	r3, 80068ea <_fflush_r+0x1a>
 80068e6:	f000 f887 	bl	80069f8 <__sinit>
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <_fflush_r+0x6c>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	d11b      	bne.n	8006928 <_fflush_r+0x58>
 80068f0:	686c      	ldr	r4, [r5, #4]
 80068f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0ef      	beq.n	80068da <_fflush_r+0xa>
 80068fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068fc:	07d0      	lsls	r0, r2, #31
 80068fe:	d404      	bmi.n	800690a <_fflush_r+0x3a>
 8006900:	0599      	lsls	r1, r3, #22
 8006902:	d402      	bmi.n	800690a <_fflush_r+0x3a>
 8006904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006906:	f000 f91a 	bl	8006b3e <__retarget_lock_acquire_recursive>
 800690a:	4628      	mov	r0, r5
 800690c:	4621      	mov	r1, r4
 800690e:	f7ff ff59 	bl	80067c4 <__sflush_r>
 8006912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006914:	07da      	lsls	r2, r3, #31
 8006916:	4605      	mov	r5, r0
 8006918:	d4e0      	bmi.n	80068dc <_fflush_r+0xc>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	059b      	lsls	r3, r3, #22
 800691e:	d4dd      	bmi.n	80068dc <_fflush_r+0xc>
 8006920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006922:	f000 f90d 	bl	8006b40 <__retarget_lock_release_recursive>
 8006926:	e7d9      	b.n	80068dc <_fflush_r+0xc>
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <_fflush_r+0x70>)
 800692a:	429c      	cmp	r4, r3
 800692c:	d101      	bne.n	8006932 <_fflush_r+0x62>
 800692e:	68ac      	ldr	r4, [r5, #8]
 8006930:	e7df      	b.n	80068f2 <_fflush_r+0x22>
 8006932:	4b04      	ldr	r3, [pc, #16]	; (8006944 <_fflush_r+0x74>)
 8006934:	429c      	cmp	r4, r3
 8006936:	bf08      	it	eq
 8006938:	68ec      	ldreq	r4, [r5, #12]
 800693a:	e7da      	b.n	80068f2 <_fflush_r+0x22>
 800693c:	08007bf4 	.word	0x08007bf4
 8006940:	08007c14 	.word	0x08007c14
 8006944:	08007bd4 	.word	0x08007bd4

08006948 <std>:
 8006948:	2300      	movs	r3, #0
 800694a:	b510      	push	{r4, lr}
 800694c:	4604      	mov	r4, r0
 800694e:	e9c0 3300 	strd	r3, r3, [r0]
 8006952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006956:	6083      	str	r3, [r0, #8]
 8006958:	8181      	strh	r1, [r0, #12]
 800695a:	6643      	str	r3, [r0, #100]	; 0x64
 800695c:	81c2      	strh	r2, [r0, #14]
 800695e:	6183      	str	r3, [r0, #24]
 8006960:	4619      	mov	r1, r3
 8006962:	2208      	movs	r2, #8
 8006964:	305c      	adds	r0, #92	; 0x5c
 8006966:	f7fe faf1 	bl	8004f4c <memset>
 800696a:	4b05      	ldr	r3, [pc, #20]	; (8006980 <std+0x38>)
 800696c:	6263      	str	r3, [r4, #36]	; 0x24
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <std+0x3c>)
 8006970:	62a3      	str	r3, [r4, #40]	; 0x28
 8006972:	4b05      	ldr	r3, [pc, #20]	; (8006988 <std+0x40>)
 8006974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <std+0x44>)
 8006978:	6224      	str	r4, [r4, #32]
 800697a:	6323      	str	r3, [r4, #48]	; 0x30
 800697c:	bd10      	pop	{r4, pc}
 800697e:	bf00      	nop
 8006980:	08007801 	.word	0x08007801
 8006984:	08007823 	.word	0x08007823
 8006988:	0800785b 	.word	0x0800785b
 800698c:	0800787f 	.word	0x0800787f

08006990 <_cleanup_r>:
 8006990:	4901      	ldr	r1, [pc, #4]	; (8006998 <_cleanup_r+0x8>)
 8006992:	f000 b8af 	b.w	8006af4 <_fwalk_reent>
 8006996:	bf00      	nop
 8006998:	080068d1 	.word	0x080068d1

0800699c <__sfmoreglue>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	2268      	movs	r2, #104	; 0x68
 80069a0:	1e4d      	subs	r5, r1, #1
 80069a2:	4355      	muls	r5, r2
 80069a4:	460e      	mov	r6, r1
 80069a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069aa:	f000 fd4b 	bl	8007444 <_malloc_r>
 80069ae:	4604      	mov	r4, r0
 80069b0:	b140      	cbz	r0, 80069c4 <__sfmoreglue+0x28>
 80069b2:	2100      	movs	r1, #0
 80069b4:	e9c0 1600 	strd	r1, r6, [r0]
 80069b8:	300c      	adds	r0, #12
 80069ba:	60a0      	str	r0, [r4, #8]
 80069bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069c0:	f7fe fac4 	bl	8004f4c <memset>
 80069c4:	4620      	mov	r0, r4
 80069c6:	bd70      	pop	{r4, r5, r6, pc}

080069c8 <__sfp_lock_acquire>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__sfp_lock_acquire+0x8>)
 80069ca:	f000 b8b8 	b.w	8006b3e <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	20000485 	.word	0x20000485

080069d4 <__sfp_lock_release>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__sfp_lock_release+0x8>)
 80069d6:	f000 b8b3 	b.w	8006b40 <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	20000485 	.word	0x20000485

080069e0 <__sinit_lock_acquire>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__sinit_lock_acquire+0x8>)
 80069e2:	f000 b8ac 	b.w	8006b3e <__retarget_lock_acquire_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000486 	.word	0x20000486

080069ec <__sinit_lock_release>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__sinit_lock_release+0x8>)
 80069ee:	f000 b8a7 	b.w	8006b40 <__retarget_lock_release_recursive>
 80069f2:	bf00      	nop
 80069f4:	20000486 	.word	0x20000486

080069f8 <__sinit>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	4604      	mov	r4, r0
 80069fc:	f7ff fff0 	bl	80069e0 <__sinit_lock_acquire>
 8006a00:	69a3      	ldr	r3, [r4, #24]
 8006a02:	b11b      	cbz	r3, 8006a0c <__sinit+0x14>
 8006a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a08:	f7ff bff0 	b.w	80069ec <__sinit_lock_release>
 8006a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a10:	6523      	str	r3, [r4, #80]	; 0x50
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <__sinit+0x68>)
 8006a14:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <__sinit+0x6c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a1a:	42a3      	cmp	r3, r4
 8006a1c:	bf04      	itt	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	61a3      	streq	r3, [r4, #24]
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 f820 	bl	8006a68 <__sfp>
 8006a28:	6060      	str	r0, [r4, #4]
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 f81c 	bl	8006a68 <__sfp>
 8006a30:	60a0      	str	r0, [r4, #8]
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 f818 	bl	8006a68 <__sfp>
 8006a38:	2200      	movs	r2, #0
 8006a3a:	60e0      	str	r0, [r4, #12]
 8006a3c:	2104      	movs	r1, #4
 8006a3e:	6860      	ldr	r0, [r4, #4]
 8006a40:	f7ff ff82 	bl	8006948 <std>
 8006a44:	68a0      	ldr	r0, [r4, #8]
 8006a46:	2201      	movs	r2, #1
 8006a48:	2109      	movs	r1, #9
 8006a4a:	f7ff ff7d 	bl	8006948 <std>
 8006a4e:	68e0      	ldr	r0, [r4, #12]
 8006a50:	2202      	movs	r2, #2
 8006a52:	2112      	movs	r1, #18
 8006a54:	f7ff ff78 	bl	8006948 <std>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	61a3      	str	r3, [r4, #24]
 8006a5c:	e7d2      	b.n	8006a04 <__sinit+0xc>
 8006a5e:	bf00      	nop
 8006a60:	08007b0c 	.word	0x08007b0c
 8006a64:	08006991 	.word	0x08006991

08006a68 <__sfp>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	4607      	mov	r7, r0
 8006a6c:	f7ff ffac 	bl	80069c8 <__sfp_lock_acquire>
 8006a70:	4b1e      	ldr	r3, [pc, #120]	; (8006aec <__sfp+0x84>)
 8006a72:	681e      	ldr	r6, [r3, #0]
 8006a74:	69b3      	ldr	r3, [r6, #24]
 8006a76:	b913      	cbnz	r3, 8006a7e <__sfp+0x16>
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff ffbd 	bl	80069f8 <__sinit>
 8006a7e:	3648      	adds	r6, #72	; 0x48
 8006a80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	d503      	bpl.n	8006a90 <__sfp+0x28>
 8006a88:	6833      	ldr	r3, [r6, #0]
 8006a8a:	b30b      	cbz	r3, 8006ad0 <__sfp+0x68>
 8006a8c:	6836      	ldr	r6, [r6, #0]
 8006a8e:	e7f7      	b.n	8006a80 <__sfp+0x18>
 8006a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a94:	b9d5      	cbnz	r5, 8006acc <__sfp+0x64>
 8006a96:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <__sfp+0x88>)
 8006a98:	60e3      	str	r3, [r4, #12]
 8006a9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a9e:	6665      	str	r5, [r4, #100]	; 0x64
 8006aa0:	f000 f84c 	bl	8006b3c <__retarget_lock_init_recursive>
 8006aa4:	f7ff ff96 	bl	80069d4 <__sfp_lock_release>
 8006aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ab0:	6025      	str	r5, [r4, #0]
 8006ab2:	61a5      	str	r5, [r4, #24]
 8006ab4:	2208      	movs	r2, #8
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006abc:	f7fe fa46 	bl	8004f4c <memset>
 8006ac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006acc:	3468      	adds	r4, #104	; 0x68
 8006ace:	e7d9      	b.n	8006a84 <__sfp+0x1c>
 8006ad0:	2104      	movs	r1, #4
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7ff ff62 	bl	800699c <__sfmoreglue>
 8006ad8:	4604      	mov	r4, r0
 8006ada:	6030      	str	r0, [r6, #0]
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d1d5      	bne.n	8006a8c <__sfp+0x24>
 8006ae0:	f7ff ff78 	bl	80069d4 <__sfp_lock_release>
 8006ae4:	230c      	movs	r3, #12
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	e7ee      	b.n	8006ac8 <__sfp+0x60>
 8006aea:	bf00      	nop
 8006aec:	08007b0c 	.word	0x08007b0c
 8006af0:	ffff0001 	.word	0xffff0001

08006af4 <_fwalk_reent>:
 8006af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af8:	4606      	mov	r6, r0
 8006afa:	4688      	mov	r8, r1
 8006afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b00:	2700      	movs	r7, #0
 8006b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b06:	f1b9 0901 	subs.w	r9, r9, #1
 8006b0a:	d505      	bpl.n	8006b18 <_fwalk_reent+0x24>
 8006b0c:	6824      	ldr	r4, [r4, #0]
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	d1f7      	bne.n	8006b02 <_fwalk_reent+0xe>
 8006b12:	4638      	mov	r0, r7
 8006b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b18:	89ab      	ldrh	r3, [r5, #12]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d907      	bls.n	8006b2e <_fwalk_reent+0x3a>
 8006b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b22:	3301      	adds	r3, #1
 8006b24:	d003      	beq.n	8006b2e <_fwalk_reent+0x3a>
 8006b26:	4629      	mov	r1, r5
 8006b28:	4630      	mov	r0, r6
 8006b2a:	47c0      	blx	r8
 8006b2c:	4307      	orrs	r7, r0
 8006b2e:	3568      	adds	r5, #104	; 0x68
 8006b30:	e7e9      	b.n	8006b06 <_fwalk_reent+0x12>
	...

08006b34 <_localeconv_r>:
 8006b34:	4800      	ldr	r0, [pc, #0]	; (8006b38 <_localeconv_r+0x4>)
 8006b36:	4770      	bx	lr
 8006b38:	20000160 	.word	0x20000160

08006b3c <__retarget_lock_init_recursive>:
 8006b3c:	4770      	bx	lr

08006b3e <__retarget_lock_acquire_recursive>:
 8006b3e:	4770      	bx	lr

08006b40 <__retarget_lock_release_recursive>:
 8006b40:	4770      	bx	lr

08006b42 <__swhatbuf_r>:
 8006b42:	b570      	push	{r4, r5, r6, lr}
 8006b44:	460e      	mov	r6, r1
 8006b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	b096      	sub	sp, #88	; 0x58
 8006b4e:	4614      	mov	r4, r2
 8006b50:	461d      	mov	r5, r3
 8006b52:	da08      	bge.n	8006b66 <__swhatbuf_r+0x24>
 8006b54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	602a      	str	r2, [r5, #0]
 8006b5c:	061a      	lsls	r2, r3, #24
 8006b5e:	d410      	bmi.n	8006b82 <__swhatbuf_r+0x40>
 8006b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b64:	e00e      	b.n	8006b84 <__swhatbuf_r+0x42>
 8006b66:	466a      	mov	r2, sp
 8006b68:	f000 fee0 	bl	800792c <_fstat_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	dbf1      	blt.n	8006b54 <__swhatbuf_r+0x12>
 8006b70:	9a01      	ldr	r2, [sp, #4]
 8006b72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b7a:	425a      	negs	r2, r3
 8006b7c:	415a      	adcs	r2, r3
 8006b7e:	602a      	str	r2, [r5, #0]
 8006b80:	e7ee      	b.n	8006b60 <__swhatbuf_r+0x1e>
 8006b82:	2340      	movs	r3, #64	; 0x40
 8006b84:	2000      	movs	r0, #0
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	b016      	add	sp, #88	; 0x58
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}

08006b8c <__smakebuf_r>:
 8006b8c:	898b      	ldrh	r3, [r1, #12]
 8006b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b90:	079d      	lsls	r5, r3, #30
 8006b92:	4606      	mov	r6, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	d507      	bpl.n	8006ba8 <__smakebuf_r+0x1c>
 8006b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	6163      	str	r3, [r4, #20]
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	ab01      	add	r3, sp, #4
 8006baa:	466a      	mov	r2, sp
 8006bac:	f7ff ffc9 	bl	8006b42 <__swhatbuf_r>
 8006bb0:	9900      	ldr	r1, [sp, #0]
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f000 fc45 	bl	8007444 <_malloc_r>
 8006bba:	b948      	cbnz	r0, 8006bd0 <__smakebuf_r+0x44>
 8006bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc0:	059a      	lsls	r2, r3, #22
 8006bc2:	d4ef      	bmi.n	8006ba4 <__smakebuf_r+0x18>
 8006bc4:	f023 0303 	bic.w	r3, r3, #3
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	e7e3      	b.n	8006b98 <__smakebuf_r+0xc>
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <__smakebuf_r+0x7c>)
 8006bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	6020      	str	r0, [r4, #0]
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	81a3      	strh	r3, [r4, #12]
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	6163      	str	r3, [r4, #20]
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	6120      	str	r0, [r4, #16]
 8006be6:	b15b      	cbz	r3, 8006c00 <__smakebuf_r+0x74>
 8006be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bec:	4630      	mov	r0, r6
 8006bee:	f000 feaf 	bl	8007950 <_isatty_r>
 8006bf2:	b128      	cbz	r0, 8006c00 <__smakebuf_r+0x74>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	89a0      	ldrh	r0, [r4, #12]
 8006c02:	4305      	orrs	r5, r0
 8006c04:	81a5      	strh	r5, [r4, #12]
 8006c06:	e7cd      	b.n	8006ba4 <__smakebuf_r+0x18>
 8006c08:	08006991 	.word	0x08006991

08006c0c <malloc>:
 8006c0c:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <malloc+0xc>)
 8006c0e:	4601      	mov	r1, r0
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	f000 bc17 	b.w	8007444 <_malloc_r>
 8006c16:	bf00      	nop
 8006c18:	2000000c 	.word	0x2000000c

08006c1c <memcpy>:
 8006c1c:	440a      	add	r2, r1
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c24:	d100      	bne.n	8006c28 <memcpy+0xc>
 8006c26:	4770      	bx	lr
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c32:	4291      	cmp	r1, r2
 8006c34:	d1f9      	bne.n	8006c2a <memcpy+0xe>
 8006c36:	bd10      	pop	{r4, pc}

08006c38 <_Balloc>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	b976      	cbnz	r6, 8006c60 <_Balloc+0x28>
 8006c42:	2010      	movs	r0, #16
 8006c44:	f7ff ffe2 	bl	8006c0c <malloc>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c4c:	b920      	cbnz	r0, 8006c58 <_Balloc+0x20>
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <_Balloc+0x78>)
 8006c50:	4818      	ldr	r0, [pc, #96]	; (8006cb4 <_Balloc+0x7c>)
 8006c52:	2166      	movs	r1, #102	; 0x66
 8006c54:	f000 fe2a 	bl	80078ac <__assert_func>
 8006c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c5c:	6006      	str	r6, [r0, #0]
 8006c5e:	60c6      	str	r6, [r0, #12]
 8006c60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c62:	68f3      	ldr	r3, [r6, #12]
 8006c64:	b183      	cbz	r3, 8006c88 <_Balloc+0x50>
 8006c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c6e:	b9b8      	cbnz	r0, 8006ca0 <_Balloc+0x68>
 8006c70:	2101      	movs	r1, #1
 8006c72:	fa01 f605 	lsl.w	r6, r1, r5
 8006c76:	1d72      	adds	r2, r6, #5
 8006c78:	0092      	lsls	r2, r2, #2
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fb60 	bl	8007340 <_calloc_r>
 8006c80:	b160      	cbz	r0, 8006c9c <_Balloc+0x64>
 8006c82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c86:	e00e      	b.n	8006ca6 <_Balloc+0x6e>
 8006c88:	2221      	movs	r2, #33	; 0x21
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fb57 	bl	8007340 <_calloc_r>
 8006c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c94:	60f0      	str	r0, [r6, #12]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e4      	bne.n	8006c66 <_Balloc+0x2e>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	6802      	ldr	r2, [r0, #0]
 8006ca2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cac:	e7f7      	b.n	8006c9e <_Balloc+0x66>
 8006cae:	bf00      	nop
 8006cb0:	08007b51 	.word	0x08007b51
 8006cb4:	08007c34 	.word	0x08007c34

08006cb8 <_Bfree>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	b976      	cbnz	r6, 8006ce0 <_Bfree+0x28>
 8006cc2:	2010      	movs	r0, #16
 8006cc4:	f7ff ffa2 	bl	8006c0c <malloc>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6268      	str	r0, [r5, #36]	; 0x24
 8006ccc:	b920      	cbnz	r0, 8006cd8 <_Bfree+0x20>
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <_Bfree+0x3c>)
 8006cd0:	4809      	ldr	r0, [pc, #36]	; (8006cf8 <_Bfree+0x40>)
 8006cd2:	218a      	movs	r1, #138	; 0x8a
 8006cd4:	f000 fdea 	bl	80078ac <__assert_func>
 8006cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cdc:	6006      	str	r6, [r0, #0]
 8006cde:	60c6      	str	r6, [r0, #12]
 8006ce0:	b13c      	cbz	r4, 8006cf2 <_Bfree+0x3a>
 8006ce2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ce4:	6862      	ldr	r2, [r4, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cec:	6021      	str	r1, [r4, #0]
 8006cee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	08007b51 	.word	0x08007b51
 8006cf8:	08007c34 	.word	0x08007c34

08006cfc <__multadd>:
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	690d      	ldr	r5, [r1, #16]
 8006d02:	4607      	mov	r7, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	461e      	mov	r6, r3
 8006d08:	f101 0c14 	add.w	ip, r1, #20
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d12:	b299      	uxth	r1, r3
 8006d14:	fb02 6101 	mla	r1, r2, r1, r6
 8006d18:	0c1e      	lsrs	r6, r3, #16
 8006d1a:	0c0b      	lsrs	r3, r1, #16
 8006d1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d20:	b289      	uxth	r1, r1
 8006d22:	3001      	adds	r0, #1
 8006d24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d28:	4285      	cmp	r5, r0
 8006d2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d32:	dcec      	bgt.n	8006d0e <__multadd+0x12>
 8006d34:	b30e      	cbz	r6, 8006d7a <__multadd+0x7e>
 8006d36:	68a3      	ldr	r3, [r4, #8]
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dc19      	bgt.n	8006d70 <__multadd+0x74>
 8006d3c:	6861      	ldr	r1, [r4, #4]
 8006d3e:	4638      	mov	r0, r7
 8006d40:	3101      	adds	r1, #1
 8006d42:	f7ff ff79 	bl	8006c38 <_Balloc>
 8006d46:	4680      	mov	r8, r0
 8006d48:	b928      	cbnz	r0, 8006d56 <__multadd+0x5a>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <__multadd+0x84>)
 8006d4e:	480d      	ldr	r0, [pc, #52]	; (8006d84 <__multadd+0x88>)
 8006d50:	21b5      	movs	r1, #181	; 0xb5
 8006d52:	f000 fdab 	bl	80078ac <__assert_func>
 8006d56:	6922      	ldr	r2, [r4, #16]
 8006d58:	3202      	adds	r2, #2
 8006d5a:	f104 010c 	add.w	r1, r4, #12
 8006d5e:	0092      	lsls	r2, r2, #2
 8006d60:	300c      	adds	r0, #12
 8006d62:	f7ff ff5b 	bl	8006c1c <memcpy>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff ffa5 	bl	8006cb8 <_Bfree>
 8006d6e:	4644      	mov	r4, r8
 8006d70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d74:	3501      	adds	r5, #1
 8006d76:	615e      	str	r6, [r3, #20]
 8006d78:	6125      	str	r5, [r4, #16]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d80:	08007bc3 	.word	0x08007bc3
 8006d84:	08007c34 	.word	0x08007c34

08006d88 <__hi0bits>:
 8006d88:	0c03      	lsrs	r3, r0, #16
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	b9d3      	cbnz	r3, 8006dc4 <__hi0bits+0x3c>
 8006d8e:	0400      	lsls	r0, r0, #16
 8006d90:	2310      	movs	r3, #16
 8006d92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d96:	bf04      	itt	eq
 8006d98:	0200      	lsleq	r0, r0, #8
 8006d9a:	3308      	addeq	r3, #8
 8006d9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006da0:	bf04      	itt	eq
 8006da2:	0100      	lsleq	r0, r0, #4
 8006da4:	3304      	addeq	r3, #4
 8006da6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006daa:	bf04      	itt	eq
 8006dac:	0080      	lsleq	r0, r0, #2
 8006dae:	3302      	addeq	r3, #2
 8006db0:	2800      	cmp	r0, #0
 8006db2:	db05      	blt.n	8006dc0 <__hi0bits+0x38>
 8006db4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006db8:	f103 0301 	add.w	r3, r3, #1
 8006dbc:	bf08      	it	eq
 8006dbe:	2320      	moveq	r3, #32
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	4770      	bx	lr
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e7e4      	b.n	8006d92 <__hi0bits+0xa>

08006dc8 <__lo0bits>:
 8006dc8:	6803      	ldr	r3, [r0, #0]
 8006dca:	f013 0207 	ands.w	r2, r3, #7
 8006dce:	4601      	mov	r1, r0
 8006dd0:	d00b      	beq.n	8006dea <__lo0bits+0x22>
 8006dd2:	07da      	lsls	r2, r3, #31
 8006dd4:	d423      	bmi.n	8006e1e <__lo0bits+0x56>
 8006dd6:	0798      	lsls	r0, r3, #30
 8006dd8:	bf49      	itett	mi
 8006dda:	085b      	lsrmi	r3, r3, #1
 8006ddc:	089b      	lsrpl	r3, r3, #2
 8006dde:	2001      	movmi	r0, #1
 8006de0:	600b      	strmi	r3, [r1, #0]
 8006de2:	bf5c      	itt	pl
 8006de4:	600b      	strpl	r3, [r1, #0]
 8006de6:	2002      	movpl	r0, #2
 8006de8:	4770      	bx	lr
 8006dea:	b298      	uxth	r0, r3
 8006dec:	b9a8      	cbnz	r0, 8006e1a <__lo0bits+0x52>
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	2010      	movs	r0, #16
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	b90a      	cbnz	r2, 8006dfa <__lo0bits+0x32>
 8006df6:	3008      	adds	r0, #8
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	071a      	lsls	r2, r3, #28
 8006dfc:	bf04      	itt	eq
 8006dfe:	091b      	lsreq	r3, r3, #4
 8006e00:	3004      	addeq	r0, #4
 8006e02:	079a      	lsls	r2, r3, #30
 8006e04:	bf04      	itt	eq
 8006e06:	089b      	lsreq	r3, r3, #2
 8006e08:	3002      	addeq	r0, #2
 8006e0a:	07da      	lsls	r2, r3, #31
 8006e0c:	d403      	bmi.n	8006e16 <__lo0bits+0x4e>
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	f100 0001 	add.w	r0, r0, #1
 8006e14:	d005      	beq.n	8006e22 <__lo0bits+0x5a>
 8006e16:	600b      	str	r3, [r1, #0]
 8006e18:	4770      	bx	lr
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	e7e9      	b.n	8006df2 <__lo0bits+0x2a>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4770      	bx	lr
 8006e22:	2020      	movs	r0, #32
 8006e24:	4770      	bx	lr
	...

08006e28 <__i2b>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	f7ff ff03 	bl	8006c38 <_Balloc>
 8006e32:	4602      	mov	r2, r0
 8006e34:	b928      	cbnz	r0, 8006e42 <__i2b+0x1a>
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <__i2b+0x24>)
 8006e38:	4805      	ldr	r0, [pc, #20]	; (8006e50 <__i2b+0x28>)
 8006e3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e3e:	f000 fd35 	bl	80078ac <__assert_func>
 8006e42:	2301      	movs	r3, #1
 8006e44:	6144      	str	r4, [r0, #20]
 8006e46:	6103      	str	r3, [r0, #16]
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08007bc3 	.word	0x08007bc3
 8006e50:	08007c34 	.word	0x08007c34

08006e54 <__multiply>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4691      	mov	r9, r2
 8006e5a:	690a      	ldr	r2, [r1, #16]
 8006e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bfb8      	it	lt
 8006e64:	460b      	movlt	r3, r1
 8006e66:	460c      	mov	r4, r1
 8006e68:	bfbc      	itt	lt
 8006e6a:	464c      	movlt	r4, r9
 8006e6c:	4699      	movlt	r9, r3
 8006e6e:	6927      	ldr	r7, [r4, #16]
 8006e70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	6861      	ldr	r1, [r4, #4]
 8006e78:	eb07 060a 	add.w	r6, r7, sl
 8006e7c:	42b3      	cmp	r3, r6
 8006e7e:	b085      	sub	sp, #20
 8006e80:	bfb8      	it	lt
 8006e82:	3101      	addlt	r1, #1
 8006e84:	f7ff fed8 	bl	8006c38 <_Balloc>
 8006e88:	b930      	cbnz	r0, 8006e98 <__multiply+0x44>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4b44      	ldr	r3, [pc, #272]	; (8006fa0 <__multiply+0x14c>)
 8006e8e:	4845      	ldr	r0, [pc, #276]	; (8006fa4 <__multiply+0x150>)
 8006e90:	f240 115d 	movw	r1, #349	; 0x15d
 8006e94:	f000 fd0a 	bl	80078ac <__assert_func>
 8006e98:	f100 0514 	add.w	r5, r0, #20
 8006e9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	d321      	bcc.n	8006eec <__multiply+0x98>
 8006ea8:	f104 0314 	add.w	r3, r4, #20
 8006eac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006eb0:	f109 0314 	add.w	r3, r9, #20
 8006eb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006eb8:	9202      	str	r2, [sp, #8]
 8006eba:	1b3a      	subs	r2, r7, r4
 8006ebc:	3a15      	subs	r2, #21
 8006ebe:	f022 0203 	bic.w	r2, r2, #3
 8006ec2:	3204      	adds	r2, #4
 8006ec4:	f104 0115 	add.w	r1, r4, #21
 8006ec8:	428f      	cmp	r7, r1
 8006eca:	bf38      	it	cc
 8006ecc:	2204      	movcc	r2, #4
 8006ece:	9201      	str	r2, [sp, #4]
 8006ed0:	9a02      	ldr	r2, [sp, #8]
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d80c      	bhi.n	8006ef2 <__multiply+0x9e>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	dd03      	ble.n	8006ee4 <__multiply+0x90>
 8006edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d05a      	beq.n	8006f9a <__multiply+0x146>
 8006ee4:	6106      	str	r6, [r0, #16]
 8006ee6:	b005      	add	sp, #20
 8006ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	f843 2b04 	str.w	r2, [r3], #4
 8006ef0:	e7d8      	b.n	8006ea4 <__multiply+0x50>
 8006ef2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ef6:	f1ba 0f00 	cmp.w	sl, #0
 8006efa:	d024      	beq.n	8006f46 <__multiply+0xf2>
 8006efc:	f104 0e14 	add.w	lr, r4, #20
 8006f00:	46a9      	mov	r9, r5
 8006f02:	f04f 0c00 	mov.w	ip, #0
 8006f06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f0a:	f8d9 1000 	ldr.w	r1, [r9]
 8006f0e:	fa1f fb82 	uxth.w	fp, r2
 8006f12:	b289      	uxth	r1, r1
 8006f14:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f20:	4461      	add	r1, ip
 8006f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f26:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f2e:	b289      	uxth	r1, r1
 8006f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f34:	4577      	cmp	r7, lr
 8006f36:	f849 1b04 	str.w	r1, [r9], #4
 8006f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f3e:	d8e2      	bhi.n	8006f06 <__multiply+0xb2>
 8006f40:	9a01      	ldr	r2, [sp, #4]
 8006f42:	f845 c002 	str.w	ip, [r5, r2]
 8006f46:	9a03      	ldr	r2, [sp, #12]
 8006f48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	f1b9 0f00 	cmp.w	r9, #0
 8006f52:	d020      	beq.n	8006f96 <__multiply+0x142>
 8006f54:	6829      	ldr	r1, [r5, #0]
 8006f56:	f104 0c14 	add.w	ip, r4, #20
 8006f5a:	46ae      	mov	lr, r5
 8006f5c:	f04f 0a00 	mov.w	sl, #0
 8006f60:	f8bc b000 	ldrh.w	fp, [ip]
 8006f64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f68:	fb09 220b 	mla	r2, r9, fp, r2
 8006f6c:	4492      	add	sl, r2
 8006f6e:	b289      	uxth	r1, r1
 8006f70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f74:	f84e 1b04 	str.w	r1, [lr], #4
 8006f78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f7c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f80:	0c12      	lsrs	r2, r2, #16
 8006f82:	fb09 1102 	mla	r1, r9, r2, r1
 8006f86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f8a:	4567      	cmp	r7, ip
 8006f8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f90:	d8e6      	bhi.n	8006f60 <__multiply+0x10c>
 8006f92:	9a01      	ldr	r2, [sp, #4]
 8006f94:	50a9      	str	r1, [r5, r2]
 8006f96:	3504      	adds	r5, #4
 8006f98:	e79a      	b.n	8006ed0 <__multiply+0x7c>
 8006f9a:	3e01      	subs	r6, #1
 8006f9c:	e79c      	b.n	8006ed8 <__multiply+0x84>
 8006f9e:	bf00      	nop
 8006fa0:	08007bc3 	.word	0x08007bc3
 8006fa4:	08007c34 	.word	0x08007c34

08006fa8 <__pow5mult>:
 8006fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	4615      	mov	r5, r2
 8006fae:	f012 0203 	ands.w	r2, r2, #3
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	d007      	beq.n	8006fc8 <__pow5mult+0x20>
 8006fb8:	4c25      	ldr	r4, [pc, #148]	; (8007050 <__pow5mult+0xa8>)
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fc2:	f7ff fe9b 	bl	8006cfc <__multadd>
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	10ad      	asrs	r5, r5, #2
 8006fca:	d03d      	beq.n	8007048 <__pow5mult+0xa0>
 8006fcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fce:	b97c      	cbnz	r4, 8006ff0 <__pow5mult+0x48>
 8006fd0:	2010      	movs	r0, #16
 8006fd2:	f7ff fe1b 	bl	8006c0c <malloc>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	6270      	str	r0, [r6, #36]	; 0x24
 8006fda:	b928      	cbnz	r0, 8006fe8 <__pow5mult+0x40>
 8006fdc:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <__pow5mult+0xac>)
 8006fde:	481e      	ldr	r0, [pc, #120]	; (8007058 <__pow5mult+0xb0>)
 8006fe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006fe4:	f000 fc62 	bl	80078ac <__assert_func>
 8006fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fec:	6004      	str	r4, [r0, #0]
 8006fee:	60c4      	str	r4, [r0, #12]
 8006ff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ff8:	b94c      	cbnz	r4, 800700e <__pow5mult+0x66>
 8006ffa:	f240 2171 	movw	r1, #625	; 0x271
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7ff ff12 	bl	8006e28 <__i2b>
 8007004:	2300      	movs	r3, #0
 8007006:	f8c8 0008 	str.w	r0, [r8, #8]
 800700a:	4604      	mov	r4, r0
 800700c:	6003      	str	r3, [r0, #0]
 800700e:	f04f 0900 	mov.w	r9, #0
 8007012:	07eb      	lsls	r3, r5, #31
 8007014:	d50a      	bpl.n	800702c <__pow5mult+0x84>
 8007016:	4639      	mov	r1, r7
 8007018:	4622      	mov	r2, r4
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff ff1a 	bl	8006e54 <__multiply>
 8007020:	4639      	mov	r1, r7
 8007022:	4680      	mov	r8, r0
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff fe47 	bl	8006cb8 <_Bfree>
 800702a:	4647      	mov	r7, r8
 800702c:	106d      	asrs	r5, r5, #1
 800702e:	d00b      	beq.n	8007048 <__pow5mult+0xa0>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	b938      	cbnz	r0, 8007044 <__pow5mult+0x9c>
 8007034:	4622      	mov	r2, r4
 8007036:	4621      	mov	r1, r4
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ff0b 	bl	8006e54 <__multiply>
 800703e:	6020      	str	r0, [r4, #0]
 8007040:	f8c0 9000 	str.w	r9, [r0]
 8007044:	4604      	mov	r4, r0
 8007046:	e7e4      	b.n	8007012 <__pow5mult+0x6a>
 8007048:	4638      	mov	r0, r7
 800704a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704e:	bf00      	nop
 8007050:	08007d80 	.word	0x08007d80
 8007054:	08007b51 	.word	0x08007b51
 8007058:	08007c34 	.word	0x08007c34

0800705c <__lshift>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	460c      	mov	r4, r1
 8007062:	6849      	ldr	r1, [r1, #4]
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	4607      	mov	r7, r0
 800706e:	4691      	mov	r9, r2
 8007070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007074:	f108 0601 	add.w	r6, r8, #1
 8007078:	42b3      	cmp	r3, r6
 800707a:	db0b      	blt.n	8007094 <__lshift+0x38>
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff fddb 	bl	8006c38 <_Balloc>
 8007082:	4605      	mov	r5, r0
 8007084:	b948      	cbnz	r0, 800709a <__lshift+0x3e>
 8007086:	4602      	mov	r2, r0
 8007088:	4b2a      	ldr	r3, [pc, #168]	; (8007134 <__lshift+0xd8>)
 800708a:	482b      	ldr	r0, [pc, #172]	; (8007138 <__lshift+0xdc>)
 800708c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007090:	f000 fc0c 	bl	80078ac <__assert_func>
 8007094:	3101      	adds	r1, #1
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	e7ee      	b.n	8007078 <__lshift+0x1c>
 800709a:	2300      	movs	r3, #0
 800709c:	f100 0114 	add.w	r1, r0, #20
 80070a0:	f100 0210 	add.w	r2, r0, #16
 80070a4:	4618      	mov	r0, r3
 80070a6:	4553      	cmp	r3, sl
 80070a8:	db37      	blt.n	800711a <__lshift+0xbe>
 80070aa:	6920      	ldr	r0, [r4, #16]
 80070ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070b0:	f104 0314 	add.w	r3, r4, #20
 80070b4:	f019 091f 	ands.w	r9, r9, #31
 80070b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070c0:	d02f      	beq.n	8007122 <__lshift+0xc6>
 80070c2:	f1c9 0e20 	rsb	lr, r9, #32
 80070c6:	468a      	mov	sl, r1
 80070c8:	f04f 0c00 	mov.w	ip, #0
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	fa02 f209 	lsl.w	r2, r2, r9
 80070d2:	ea42 020c 	orr.w	r2, r2, ip
 80070d6:	f84a 2b04 	str.w	r2, [sl], #4
 80070da:	f853 2b04 	ldr.w	r2, [r3], #4
 80070de:	4298      	cmp	r0, r3
 80070e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80070e4:	d8f2      	bhi.n	80070cc <__lshift+0x70>
 80070e6:	1b03      	subs	r3, r0, r4
 80070e8:	3b15      	subs	r3, #21
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	3304      	adds	r3, #4
 80070f0:	f104 0215 	add.w	r2, r4, #21
 80070f4:	4290      	cmp	r0, r2
 80070f6:	bf38      	it	cc
 80070f8:	2304      	movcc	r3, #4
 80070fa:	f841 c003 	str.w	ip, [r1, r3]
 80070fe:	f1bc 0f00 	cmp.w	ip, #0
 8007102:	d001      	beq.n	8007108 <__lshift+0xac>
 8007104:	f108 0602 	add.w	r6, r8, #2
 8007108:	3e01      	subs	r6, #1
 800710a:	4638      	mov	r0, r7
 800710c:	612e      	str	r6, [r5, #16]
 800710e:	4621      	mov	r1, r4
 8007110:	f7ff fdd2 	bl	8006cb8 <_Bfree>
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711a:	f842 0f04 	str.w	r0, [r2, #4]!
 800711e:	3301      	adds	r3, #1
 8007120:	e7c1      	b.n	80070a6 <__lshift+0x4a>
 8007122:	3904      	subs	r1, #4
 8007124:	f853 2b04 	ldr.w	r2, [r3], #4
 8007128:	f841 2f04 	str.w	r2, [r1, #4]!
 800712c:	4298      	cmp	r0, r3
 800712e:	d8f9      	bhi.n	8007124 <__lshift+0xc8>
 8007130:	e7ea      	b.n	8007108 <__lshift+0xac>
 8007132:	bf00      	nop
 8007134:	08007bc3 	.word	0x08007bc3
 8007138:	08007c34 	.word	0x08007c34

0800713c <__mcmp>:
 800713c:	b530      	push	{r4, r5, lr}
 800713e:	6902      	ldr	r2, [r0, #16]
 8007140:	690c      	ldr	r4, [r1, #16]
 8007142:	1b12      	subs	r2, r2, r4
 8007144:	d10e      	bne.n	8007164 <__mcmp+0x28>
 8007146:	f100 0314 	add.w	r3, r0, #20
 800714a:	3114      	adds	r1, #20
 800714c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800715c:	42a5      	cmp	r5, r4
 800715e:	d003      	beq.n	8007168 <__mcmp+0x2c>
 8007160:	d305      	bcc.n	800716e <__mcmp+0x32>
 8007162:	2201      	movs	r2, #1
 8007164:	4610      	mov	r0, r2
 8007166:	bd30      	pop	{r4, r5, pc}
 8007168:	4283      	cmp	r3, r0
 800716a:	d3f3      	bcc.n	8007154 <__mcmp+0x18>
 800716c:	e7fa      	b.n	8007164 <__mcmp+0x28>
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	e7f7      	b.n	8007164 <__mcmp+0x28>

08007174 <__mdiff>:
 8007174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	460c      	mov	r4, r1
 800717a:	4606      	mov	r6, r0
 800717c:	4611      	mov	r1, r2
 800717e:	4620      	mov	r0, r4
 8007180:	4690      	mov	r8, r2
 8007182:	f7ff ffdb 	bl	800713c <__mcmp>
 8007186:	1e05      	subs	r5, r0, #0
 8007188:	d110      	bne.n	80071ac <__mdiff+0x38>
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fd53 	bl	8006c38 <_Balloc>
 8007192:	b930      	cbnz	r0, 80071a2 <__mdiff+0x2e>
 8007194:	4b3a      	ldr	r3, [pc, #232]	; (8007280 <__mdiff+0x10c>)
 8007196:	4602      	mov	r2, r0
 8007198:	f240 2132 	movw	r1, #562	; 0x232
 800719c:	4839      	ldr	r0, [pc, #228]	; (8007284 <__mdiff+0x110>)
 800719e:	f000 fb85 	bl	80078ac <__assert_func>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ac:	bfa4      	itt	ge
 80071ae:	4643      	movge	r3, r8
 80071b0:	46a0      	movge	r8, r4
 80071b2:	4630      	mov	r0, r6
 80071b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071b8:	bfa6      	itte	ge
 80071ba:	461c      	movge	r4, r3
 80071bc:	2500      	movge	r5, #0
 80071be:	2501      	movlt	r5, #1
 80071c0:	f7ff fd3a 	bl	8006c38 <_Balloc>
 80071c4:	b920      	cbnz	r0, 80071d0 <__mdiff+0x5c>
 80071c6:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <__mdiff+0x10c>)
 80071c8:	4602      	mov	r2, r0
 80071ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071ce:	e7e5      	b.n	800719c <__mdiff+0x28>
 80071d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071d4:	6926      	ldr	r6, [r4, #16]
 80071d6:	60c5      	str	r5, [r0, #12]
 80071d8:	f104 0914 	add.w	r9, r4, #20
 80071dc:	f108 0514 	add.w	r5, r8, #20
 80071e0:	f100 0e14 	add.w	lr, r0, #20
 80071e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071ec:	f108 0210 	add.w	r2, r8, #16
 80071f0:	46f2      	mov	sl, lr
 80071f2:	2100      	movs	r1, #0
 80071f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80071f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071fc:	fa1f f883 	uxth.w	r8, r3
 8007200:	fa11 f18b 	uxtah	r1, r1, fp
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	eba1 0808 	sub.w	r8, r1, r8
 800720a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800720e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007212:	fa1f f888 	uxth.w	r8, r8
 8007216:	1419      	asrs	r1, r3, #16
 8007218:	454e      	cmp	r6, r9
 800721a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800721e:	f84a 3b04 	str.w	r3, [sl], #4
 8007222:	d8e7      	bhi.n	80071f4 <__mdiff+0x80>
 8007224:	1b33      	subs	r3, r6, r4
 8007226:	3b15      	subs	r3, #21
 8007228:	f023 0303 	bic.w	r3, r3, #3
 800722c:	3304      	adds	r3, #4
 800722e:	3415      	adds	r4, #21
 8007230:	42a6      	cmp	r6, r4
 8007232:	bf38      	it	cc
 8007234:	2304      	movcc	r3, #4
 8007236:	441d      	add	r5, r3
 8007238:	4473      	add	r3, lr
 800723a:	469e      	mov	lr, r3
 800723c:	462e      	mov	r6, r5
 800723e:	4566      	cmp	r6, ip
 8007240:	d30e      	bcc.n	8007260 <__mdiff+0xec>
 8007242:	f10c 0203 	add.w	r2, ip, #3
 8007246:	1b52      	subs	r2, r2, r5
 8007248:	f022 0203 	bic.w	r2, r2, #3
 800724c:	3d03      	subs	r5, #3
 800724e:	45ac      	cmp	ip, r5
 8007250:	bf38      	it	cc
 8007252:	2200      	movcc	r2, #0
 8007254:	441a      	add	r2, r3
 8007256:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800725a:	b17b      	cbz	r3, 800727c <__mdiff+0x108>
 800725c:	6107      	str	r7, [r0, #16]
 800725e:	e7a3      	b.n	80071a8 <__mdiff+0x34>
 8007260:	f856 8b04 	ldr.w	r8, [r6], #4
 8007264:	fa11 f288 	uxtah	r2, r1, r8
 8007268:	1414      	asrs	r4, r2, #16
 800726a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800726e:	b292      	uxth	r2, r2
 8007270:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007274:	f84e 2b04 	str.w	r2, [lr], #4
 8007278:	1421      	asrs	r1, r4, #16
 800727a:	e7e0      	b.n	800723e <__mdiff+0xca>
 800727c:	3f01      	subs	r7, #1
 800727e:	e7ea      	b.n	8007256 <__mdiff+0xe2>
 8007280:	08007bc3 	.word	0x08007bc3
 8007284:	08007c34 	.word	0x08007c34

08007288 <__d2b>:
 8007288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800728c:	4689      	mov	r9, r1
 800728e:	2101      	movs	r1, #1
 8007290:	ec57 6b10 	vmov	r6, r7, d0
 8007294:	4690      	mov	r8, r2
 8007296:	f7ff fccf 	bl	8006c38 <_Balloc>
 800729a:	4604      	mov	r4, r0
 800729c:	b930      	cbnz	r0, 80072ac <__d2b+0x24>
 800729e:	4602      	mov	r2, r0
 80072a0:	4b25      	ldr	r3, [pc, #148]	; (8007338 <__d2b+0xb0>)
 80072a2:	4826      	ldr	r0, [pc, #152]	; (800733c <__d2b+0xb4>)
 80072a4:	f240 310a 	movw	r1, #778	; 0x30a
 80072a8:	f000 fb00 	bl	80078ac <__assert_func>
 80072ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072b4:	bb35      	cbnz	r5, 8007304 <__d2b+0x7c>
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	d028      	beq.n	800730e <__d2b+0x86>
 80072bc:	4668      	mov	r0, sp
 80072be:	9600      	str	r6, [sp, #0]
 80072c0:	f7ff fd82 	bl	8006dc8 <__lo0bits>
 80072c4:	9900      	ldr	r1, [sp, #0]
 80072c6:	b300      	cbz	r0, 800730a <__d2b+0x82>
 80072c8:	9a01      	ldr	r2, [sp, #4]
 80072ca:	f1c0 0320 	rsb	r3, r0, #32
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	430b      	orrs	r3, r1
 80072d4:	40c2      	lsrs	r2, r0
 80072d6:	6163      	str	r3, [r4, #20]
 80072d8:	9201      	str	r2, [sp, #4]
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	61a3      	str	r3, [r4, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bf14      	ite	ne
 80072e2:	2202      	movne	r2, #2
 80072e4:	2201      	moveq	r2, #1
 80072e6:	6122      	str	r2, [r4, #16]
 80072e8:	b1d5      	cbz	r5, 8007320 <__d2b+0x98>
 80072ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072ee:	4405      	add	r5, r0
 80072f0:	f8c9 5000 	str.w	r5, [r9]
 80072f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072f8:	f8c8 0000 	str.w	r0, [r8]
 80072fc:	4620      	mov	r0, r4
 80072fe:	b003      	add	sp, #12
 8007300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007308:	e7d5      	b.n	80072b6 <__d2b+0x2e>
 800730a:	6161      	str	r1, [r4, #20]
 800730c:	e7e5      	b.n	80072da <__d2b+0x52>
 800730e:	a801      	add	r0, sp, #4
 8007310:	f7ff fd5a 	bl	8006dc8 <__lo0bits>
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	6163      	str	r3, [r4, #20]
 8007318:	2201      	movs	r2, #1
 800731a:	6122      	str	r2, [r4, #16]
 800731c:	3020      	adds	r0, #32
 800731e:	e7e3      	b.n	80072e8 <__d2b+0x60>
 8007320:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007328:	f8c9 0000 	str.w	r0, [r9]
 800732c:	6918      	ldr	r0, [r3, #16]
 800732e:	f7ff fd2b 	bl	8006d88 <__hi0bits>
 8007332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007336:	e7df      	b.n	80072f8 <__d2b+0x70>
 8007338:	08007bc3 	.word	0x08007bc3
 800733c:	08007c34 	.word	0x08007c34

08007340 <_calloc_r>:
 8007340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007342:	fba1 2402 	umull	r2, r4, r1, r2
 8007346:	b94c      	cbnz	r4, 800735c <_calloc_r+0x1c>
 8007348:	4611      	mov	r1, r2
 800734a:	9201      	str	r2, [sp, #4]
 800734c:	f000 f87a 	bl	8007444 <_malloc_r>
 8007350:	9a01      	ldr	r2, [sp, #4]
 8007352:	4605      	mov	r5, r0
 8007354:	b930      	cbnz	r0, 8007364 <_calloc_r+0x24>
 8007356:	4628      	mov	r0, r5
 8007358:	b003      	add	sp, #12
 800735a:	bd30      	pop	{r4, r5, pc}
 800735c:	220c      	movs	r2, #12
 800735e:	6002      	str	r2, [r0, #0]
 8007360:	2500      	movs	r5, #0
 8007362:	e7f8      	b.n	8007356 <_calloc_r+0x16>
 8007364:	4621      	mov	r1, r4
 8007366:	f7fd fdf1 	bl	8004f4c <memset>
 800736a:	e7f4      	b.n	8007356 <_calloc_r+0x16>

0800736c <_free_r>:
 800736c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800736e:	2900      	cmp	r1, #0
 8007370:	d044      	beq.n	80073fc <_free_r+0x90>
 8007372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007376:	9001      	str	r0, [sp, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f1a1 0404 	sub.w	r4, r1, #4
 800737e:	bfb8      	it	lt
 8007380:	18e4      	addlt	r4, r4, r3
 8007382:	f000 fb19 	bl	80079b8 <__malloc_lock>
 8007386:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <_free_r+0x94>)
 8007388:	9801      	ldr	r0, [sp, #4]
 800738a:	6813      	ldr	r3, [r2, #0]
 800738c:	b933      	cbnz	r3, 800739c <_free_r+0x30>
 800738e:	6063      	str	r3, [r4, #4]
 8007390:	6014      	str	r4, [r2, #0]
 8007392:	b003      	add	sp, #12
 8007394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007398:	f000 bb14 	b.w	80079c4 <__malloc_unlock>
 800739c:	42a3      	cmp	r3, r4
 800739e:	d908      	bls.n	80073b2 <_free_r+0x46>
 80073a0:	6825      	ldr	r5, [r4, #0]
 80073a2:	1961      	adds	r1, r4, r5
 80073a4:	428b      	cmp	r3, r1
 80073a6:	bf01      	itttt	eq
 80073a8:	6819      	ldreq	r1, [r3, #0]
 80073aa:	685b      	ldreq	r3, [r3, #4]
 80073ac:	1949      	addeq	r1, r1, r5
 80073ae:	6021      	streq	r1, [r4, #0]
 80073b0:	e7ed      	b.n	800738e <_free_r+0x22>
 80073b2:	461a      	mov	r2, r3
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	b10b      	cbz	r3, 80073bc <_free_r+0x50>
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d9fa      	bls.n	80073b2 <_free_r+0x46>
 80073bc:	6811      	ldr	r1, [r2, #0]
 80073be:	1855      	adds	r5, r2, r1
 80073c0:	42a5      	cmp	r5, r4
 80073c2:	d10b      	bne.n	80073dc <_free_r+0x70>
 80073c4:	6824      	ldr	r4, [r4, #0]
 80073c6:	4421      	add	r1, r4
 80073c8:	1854      	adds	r4, r2, r1
 80073ca:	42a3      	cmp	r3, r4
 80073cc:	6011      	str	r1, [r2, #0]
 80073ce:	d1e0      	bne.n	8007392 <_free_r+0x26>
 80073d0:	681c      	ldr	r4, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	6053      	str	r3, [r2, #4]
 80073d6:	4421      	add	r1, r4
 80073d8:	6011      	str	r1, [r2, #0]
 80073da:	e7da      	b.n	8007392 <_free_r+0x26>
 80073dc:	d902      	bls.n	80073e4 <_free_r+0x78>
 80073de:	230c      	movs	r3, #12
 80073e0:	6003      	str	r3, [r0, #0]
 80073e2:	e7d6      	b.n	8007392 <_free_r+0x26>
 80073e4:	6825      	ldr	r5, [r4, #0]
 80073e6:	1961      	adds	r1, r4, r5
 80073e8:	428b      	cmp	r3, r1
 80073ea:	bf04      	itt	eq
 80073ec:	6819      	ldreq	r1, [r3, #0]
 80073ee:	685b      	ldreq	r3, [r3, #4]
 80073f0:	6063      	str	r3, [r4, #4]
 80073f2:	bf04      	itt	eq
 80073f4:	1949      	addeq	r1, r1, r5
 80073f6:	6021      	streq	r1, [r4, #0]
 80073f8:	6054      	str	r4, [r2, #4]
 80073fa:	e7ca      	b.n	8007392 <_free_r+0x26>
 80073fc:	b003      	add	sp, #12
 80073fe:	bd30      	pop	{r4, r5, pc}
 8007400:	20000488 	.word	0x20000488

08007404 <sbrk_aligned>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4e0e      	ldr	r6, [pc, #56]	; (8007440 <sbrk_aligned+0x3c>)
 8007408:	460c      	mov	r4, r1
 800740a:	6831      	ldr	r1, [r6, #0]
 800740c:	4605      	mov	r5, r0
 800740e:	b911      	cbnz	r1, 8007416 <sbrk_aligned+0x12>
 8007410:	f000 f9e6 	bl	80077e0 <_sbrk_r>
 8007414:	6030      	str	r0, [r6, #0]
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f9e1 	bl	80077e0 <_sbrk_r>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d00a      	beq.n	8007438 <sbrk_aligned+0x34>
 8007422:	1cc4      	adds	r4, r0, #3
 8007424:	f024 0403 	bic.w	r4, r4, #3
 8007428:	42a0      	cmp	r0, r4
 800742a:	d007      	beq.n	800743c <sbrk_aligned+0x38>
 800742c:	1a21      	subs	r1, r4, r0
 800742e:	4628      	mov	r0, r5
 8007430:	f000 f9d6 	bl	80077e0 <_sbrk_r>
 8007434:	3001      	adds	r0, #1
 8007436:	d101      	bne.n	800743c <sbrk_aligned+0x38>
 8007438:	f04f 34ff 	mov.w	r4, #4294967295
 800743c:	4620      	mov	r0, r4
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	2000048c 	.word	0x2000048c

08007444 <_malloc_r>:
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	1ccd      	adds	r5, r1, #3
 800744a:	f025 0503 	bic.w	r5, r5, #3
 800744e:	3508      	adds	r5, #8
 8007450:	2d0c      	cmp	r5, #12
 8007452:	bf38      	it	cc
 8007454:	250c      	movcc	r5, #12
 8007456:	2d00      	cmp	r5, #0
 8007458:	4607      	mov	r7, r0
 800745a:	db01      	blt.n	8007460 <_malloc_r+0x1c>
 800745c:	42a9      	cmp	r1, r5
 800745e:	d905      	bls.n	800746c <_malloc_r+0x28>
 8007460:	230c      	movs	r3, #12
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	2600      	movs	r6, #0
 8007466:	4630      	mov	r0, r6
 8007468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746c:	4e2e      	ldr	r6, [pc, #184]	; (8007528 <_malloc_r+0xe4>)
 800746e:	f000 faa3 	bl	80079b8 <__malloc_lock>
 8007472:	6833      	ldr	r3, [r6, #0]
 8007474:	461c      	mov	r4, r3
 8007476:	bb34      	cbnz	r4, 80074c6 <_malloc_r+0x82>
 8007478:	4629      	mov	r1, r5
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff ffc2 	bl	8007404 <sbrk_aligned>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	4604      	mov	r4, r0
 8007484:	d14d      	bne.n	8007522 <_malloc_r+0xde>
 8007486:	6834      	ldr	r4, [r6, #0]
 8007488:	4626      	mov	r6, r4
 800748a:	2e00      	cmp	r6, #0
 800748c:	d140      	bne.n	8007510 <_malloc_r+0xcc>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	4631      	mov	r1, r6
 8007492:	4638      	mov	r0, r7
 8007494:	eb04 0803 	add.w	r8, r4, r3
 8007498:	f000 f9a2 	bl	80077e0 <_sbrk_r>
 800749c:	4580      	cmp	r8, r0
 800749e:	d13a      	bne.n	8007516 <_malloc_r+0xd2>
 80074a0:	6821      	ldr	r1, [r4, #0]
 80074a2:	3503      	adds	r5, #3
 80074a4:	1a6d      	subs	r5, r5, r1
 80074a6:	f025 0503 	bic.w	r5, r5, #3
 80074aa:	3508      	adds	r5, #8
 80074ac:	2d0c      	cmp	r5, #12
 80074ae:	bf38      	it	cc
 80074b0:	250c      	movcc	r5, #12
 80074b2:	4629      	mov	r1, r5
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ffa5 	bl	8007404 <sbrk_aligned>
 80074ba:	3001      	adds	r0, #1
 80074bc:	d02b      	beq.n	8007516 <_malloc_r+0xd2>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	442b      	add	r3, r5
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	e00e      	b.n	80074e4 <_malloc_r+0xa0>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	1b52      	subs	r2, r2, r5
 80074ca:	d41e      	bmi.n	800750a <_malloc_r+0xc6>
 80074cc:	2a0b      	cmp	r2, #11
 80074ce:	d916      	bls.n	80074fe <_malloc_r+0xba>
 80074d0:	1961      	adds	r1, r4, r5
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	6025      	str	r5, [r4, #0]
 80074d6:	bf18      	it	ne
 80074d8:	6059      	strne	r1, [r3, #4]
 80074da:	6863      	ldr	r3, [r4, #4]
 80074dc:	bf08      	it	eq
 80074de:	6031      	streq	r1, [r6, #0]
 80074e0:	5162      	str	r2, [r4, r5]
 80074e2:	604b      	str	r3, [r1, #4]
 80074e4:	4638      	mov	r0, r7
 80074e6:	f104 060b 	add.w	r6, r4, #11
 80074ea:	f000 fa6b 	bl	80079c4 <__malloc_unlock>
 80074ee:	f026 0607 	bic.w	r6, r6, #7
 80074f2:	1d23      	adds	r3, r4, #4
 80074f4:	1af2      	subs	r2, r6, r3
 80074f6:	d0b6      	beq.n	8007466 <_malloc_r+0x22>
 80074f8:	1b9b      	subs	r3, r3, r6
 80074fa:	50a3      	str	r3, [r4, r2]
 80074fc:	e7b3      	b.n	8007466 <_malloc_r+0x22>
 80074fe:	6862      	ldr	r2, [r4, #4]
 8007500:	42a3      	cmp	r3, r4
 8007502:	bf0c      	ite	eq
 8007504:	6032      	streq	r2, [r6, #0]
 8007506:	605a      	strne	r2, [r3, #4]
 8007508:	e7ec      	b.n	80074e4 <_malloc_r+0xa0>
 800750a:	4623      	mov	r3, r4
 800750c:	6864      	ldr	r4, [r4, #4]
 800750e:	e7b2      	b.n	8007476 <_malloc_r+0x32>
 8007510:	4634      	mov	r4, r6
 8007512:	6876      	ldr	r6, [r6, #4]
 8007514:	e7b9      	b.n	800748a <_malloc_r+0x46>
 8007516:	230c      	movs	r3, #12
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4638      	mov	r0, r7
 800751c:	f000 fa52 	bl	80079c4 <__malloc_unlock>
 8007520:	e7a1      	b.n	8007466 <_malloc_r+0x22>
 8007522:	6025      	str	r5, [r4, #0]
 8007524:	e7de      	b.n	80074e4 <_malloc_r+0xa0>
 8007526:	bf00      	nop
 8007528:	20000488 	.word	0x20000488

0800752c <__sfputc_r>:
 800752c:	6893      	ldr	r3, [r2, #8]
 800752e:	3b01      	subs	r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	b410      	push	{r4}
 8007534:	6093      	str	r3, [r2, #8]
 8007536:	da08      	bge.n	800754a <__sfputc_r+0x1e>
 8007538:	6994      	ldr	r4, [r2, #24]
 800753a:	42a3      	cmp	r3, r4
 800753c:	db01      	blt.n	8007542 <__sfputc_r+0x16>
 800753e:	290a      	cmp	r1, #10
 8007540:	d103      	bne.n	800754a <__sfputc_r+0x1e>
 8007542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007546:	f7fe ba01 	b.w	800594c <__swbuf_r>
 800754a:	6813      	ldr	r3, [r2, #0]
 800754c:	1c58      	adds	r0, r3, #1
 800754e:	6010      	str	r0, [r2, #0]
 8007550:	7019      	strb	r1, [r3, #0]
 8007552:	4608      	mov	r0, r1
 8007554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007558:	4770      	bx	lr

0800755a <__sfputs_r>:
 800755a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	4614      	mov	r4, r2
 8007562:	18d5      	adds	r5, r2, r3
 8007564:	42ac      	cmp	r4, r5
 8007566:	d101      	bne.n	800756c <__sfputs_r+0x12>
 8007568:	2000      	movs	r0, #0
 800756a:	e007      	b.n	800757c <__sfputs_r+0x22>
 800756c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007570:	463a      	mov	r2, r7
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ffda 	bl	800752c <__sfputc_r>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d1f3      	bne.n	8007564 <__sfputs_r+0xa>
 800757c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007580 <_vfiprintf_r>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	460d      	mov	r5, r1
 8007586:	b09d      	sub	sp, #116	; 0x74
 8007588:	4614      	mov	r4, r2
 800758a:	4698      	mov	r8, r3
 800758c:	4606      	mov	r6, r0
 800758e:	b118      	cbz	r0, 8007598 <_vfiprintf_r+0x18>
 8007590:	6983      	ldr	r3, [r0, #24]
 8007592:	b90b      	cbnz	r3, 8007598 <_vfiprintf_r+0x18>
 8007594:	f7ff fa30 	bl	80069f8 <__sinit>
 8007598:	4b89      	ldr	r3, [pc, #548]	; (80077c0 <_vfiprintf_r+0x240>)
 800759a:	429d      	cmp	r5, r3
 800759c:	d11b      	bne.n	80075d6 <_vfiprintf_r+0x56>
 800759e:	6875      	ldr	r5, [r6, #4]
 80075a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075a2:	07d9      	lsls	r1, r3, #31
 80075a4:	d405      	bmi.n	80075b2 <_vfiprintf_r+0x32>
 80075a6:	89ab      	ldrh	r3, [r5, #12]
 80075a8:	059a      	lsls	r2, r3, #22
 80075aa:	d402      	bmi.n	80075b2 <_vfiprintf_r+0x32>
 80075ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ae:	f7ff fac6 	bl	8006b3e <__retarget_lock_acquire_recursive>
 80075b2:	89ab      	ldrh	r3, [r5, #12]
 80075b4:	071b      	lsls	r3, r3, #28
 80075b6:	d501      	bpl.n	80075bc <_vfiprintf_r+0x3c>
 80075b8:	692b      	ldr	r3, [r5, #16]
 80075ba:	b9eb      	cbnz	r3, 80075f8 <_vfiprintf_r+0x78>
 80075bc:	4629      	mov	r1, r5
 80075be:	4630      	mov	r0, r6
 80075c0:	f7fe fa16 	bl	80059f0 <__swsetup_r>
 80075c4:	b1c0      	cbz	r0, 80075f8 <_vfiprintf_r+0x78>
 80075c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c8:	07dc      	lsls	r4, r3, #31
 80075ca:	d50e      	bpl.n	80075ea <_vfiprintf_r+0x6a>
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	b01d      	add	sp, #116	; 0x74
 80075d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d6:	4b7b      	ldr	r3, [pc, #492]	; (80077c4 <_vfiprintf_r+0x244>)
 80075d8:	429d      	cmp	r5, r3
 80075da:	d101      	bne.n	80075e0 <_vfiprintf_r+0x60>
 80075dc:	68b5      	ldr	r5, [r6, #8]
 80075de:	e7df      	b.n	80075a0 <_vfiprintf_r+0x20>
 80075e0:	4b79      	ldr	r3, [pc, #484]	; (80077c8 <_vfiprintf_r+0x248>)
 80075e2:	429d      	cmp	r5, r3
 80075e4:	bf08      	it	eq
 80075e6:	68f5      	ldreq	r5, [r6, #12]
 80075e8:	e7da      	b.n	80075a0 <_vfiprintf_r+0x20>
 80075ea:	89ab      	ldrh	r3, [r5, #12]
 80075ec:	0598      	lsls	r0, r3, #22
 80075ee:	d4ed      	bmi.n	80075cc <_vfiprintf_r+0x4c>
 80075f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075f2:	f7ff faa5 	bl	8006b40 <__retarget_lock_release_recursive>
 80075f6:	e7e9      	b.n	80075cc <_vfiprintf_r+0x4c>
 80075f8:	2300      	movs	r3, #0
 80075fa:	9309      	str	r3, [sp, #36]	; 0x24
 80075fc:	2320      	movs	r3, #32
 80075fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007602:	f8cd 800c 	str.w	r8, [sp, #12]
 8007606:	2330      	movs	r3, #48	; 0x30
 8007608:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077cc <_vfiprintf_r+0x24c>
 800760c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007610:	f04f 0901 	mov.w	r9, #1
 8007614:	4623      	mov	r3, r4
 8007616:	469a      	mov	sl, r3
 8007618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800761c:	b10a      	cbz	r2, 8007622 <_vfiprintf_r+0xa2>
 800761e:	2a25      	cmp	r2, #37	; 0x25
 8007620:	d1f9      	bne.n	8007616 <_vfiprintf_r+0x96>
 8007622:	ebba 0b04 	subs.w	fp, sl, r4
 8007626:	d00b      	beq.n	8007640 <_vfiprintf_r+0xc0>
 8007628:	465b      	mov	r3, fp
 800762a:	4622      	mov	r2, r4
 800762c:	4629      	mov	r1, r5
 800762e:	4630      	mov	r0, r6
 8007630:	f7ff ff93 	bl	800755a <__sfputs_r>
 8007634:	3001      	adds	r0, #1
 8007636:	f000 80aa 	beq.w	800778e <_vfiprintf_r+0x20e>
 800763a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800763c:	445a      	add	r2, fp
 800763e:	9209      	str	r2, [sp, #36]	; 0x24
 8007640:	f89a 3000 	ldrb.w	r3, [sl]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80a2 	beq.w	800778e <_vfiprintf_r+0x20e>
 800764a:	2300      	movs	r3, #0
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007654:	f10a 0a01 	add.w	sl, sl, #1
 8007658:	9304      	str	r3, [sp, #16]
 800765a:	9307      	str	r3, [sp, #28]
 800765c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007660:	931a      	str	r3, [sp, #104]	; 0x68
 8007662:	4654      	mov	r4, sl
 8007664:	2205      	movs	r2, #5
 8007666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766a:	4858      	ldr	r0, [pc, #352]	; (80077cc <_vfiprintf_r+0x24c>)
 800766c:	f7f8 fdb8 	bl	80001e0 <memchr>
 8007670:	9a04      	ldr	r2, [sp, #16]
 8007672:	b9d8      	cbnz	r0, 80076ac <_vfiprintf_r+0x12c>
 8007674:	06d1      	lsls	r1, r2, #27
 8007676:	bf44      	itt	mi
 8007678:	2320      	movmi	r3, #32
 800767a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800767e:	0713      	lsls	r3, r2, #28
 8007680:	bf44      	itt	mi
 8007682:	232b      	movmi	r3, #43	; 0x2b
 8007684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007688:	f89a 3000 	ldrb.w	r3, [sl]
 800768c:	2b2a      	cmp	r3, #42	; 0x2a
 800768e:	d015      	beq.n	80076bc <_vfiprintf_r+0x13c>
 8007690:	9a07      	ldr	r2, [sp, #28]
 8007692:	4654      	mov	r4, sl
 8007694:	2000      	movs	r0, #0
 8007696:	f04f 0c0a 	mov.w	ip, #10
 800769a:	4621      	mov	r1, r4
 800769c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a0:	3b30      	subs	r3, #48	; 0x30
 80076a2:	2b09      	cmp	r3, #9
 80076a4:	d94e      	bls.n	8007744 <_vfiprintf_r+0x1c4>
 80076a6:	b1b0      	cbz	r0, 80076d6 <_vfiprintf_r+0x156>
 80076a8:	9207      	str	r2, [sp, #28]
 80076aa:	e014      	b.n	80076d6 <_vfiprintf_r+0x156>
 80076ac:	eba0 0308 	sub.w	r3, r0, r8
 80076b0:	fa09 f303 	lsl.w	r3, r9, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	9304      	str	r3, [sp, #16]
 80076b8:	46a2      	mov	sl, r4
 80076ba:	e7d2      	b.n	8007662 <_vfiprintf_r+0xe2>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	1d19      	adds	r1, r3, #4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	9103      	str	r1, [sp, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bfbb      	ittet	lt
 80076c8:	425b      	neglt	r3, r3
 80076ca:	f042 0202 	orrlt.w	r2, r2, #2
 80076ce:	9307      	strge	r3, [sp, #28]
 80076d0:	9307      	strlt	r3, [sp, #28]
 80076d2:	bfb8      	it	lt
 80076d4:	9204      	strlt	r2, [sp, #16]
 80076d6:	7823      	ldrb	r3, [r4, #0]
 80076d8:	2b2e      	cmp	r3, #46	; 0x2e
 80076da:	d10c      	bne.n	80076f6 <_vfiprintf_r+0x176>
 80076dc:	7863      	ldrb	r3, [r4, #1]
 80076de:	2b2a      	cmp	r3, #42	; 0x2a
 80076e0:	d135      	bne.n	800774e <_vfiprintf_r+0x1ce>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	1d1a      	adds	r2, r3, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9203      	str	r2, [sp, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfb8      	it	lt
 80076ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80076f2:	3402      	adds	r4, #2
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077dc <_vfiprintf_r+0x25c>
 80076fa:	7821      	ldrb	r1, [r4, #0]
 80076fc:	2203      	movs	r2, #3
 80076fe:	4650      	mov	r0, sl
 8007700:	f7f8 fd6e 	bl	80001e0 <memchr>
 8007704:	b140      	cbz	r0, 8007718 <_vfiprintf_r+0x198>
 8007706:	2340      	movs	r3, #64	; 0x40
 8007708:	eba0 000a 	sub.w	r0, r0, sl
 800770c:	fa03 f000 	lsl.w	r0, r3, r0
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	4303      	orrs	r3, r0
 8007714:	3401      	adds	r4, #1
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771c:	482c      	ldr	r0, [pc, #176]	; (80077d0 <_vfiprintf_r+0x250>)
 800771e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007722:	2206      	movs	r2, #6
 8007724:	f7f8 fd5c 	bl	80001e0 <memchr>
 8007728:	2800      	cmp	r0, #0
 800772a:	d03f      	beq.n	80077ac <_vfiprintf_r+0x22c>
 800772c:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <_vfiprintf_r+0x254>)
 800772e:	bb1b      	cbnz	r3, 8007778 <_vfiprintf_r+0x1f8>
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	3307      	adds	r3, #7
 8007734:	f023 0307 	bic.w	r3, r3, #7
 8007738:	3308      	adds	r3, #8
 800773a:	9303      	str	r3, [sp, #12]
 800773c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773e:	443b      	add	r3, r7
 8007740:	9309      	str	r3, [sp, #36]	; 0x24
 8007742:	e767      	b.n	8007614 <_vfiprintf_r+0x94>
 8007744:	fb0c 3202 	mla	r2, ip, r2, r3
 8007748:	460c      	mov	r4, r1
 800774a:	2001      	movs	r0, #1
 800774c:	e7a5      	b.n	800769a <_vfiprintf_r+0x11a>
 800774e:	2300      	movs	r3, #0
 8007750:	3401      	adds	r4, #1
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	4619      	mov	r1, r3
 8007756:	f04f 0c0a 	mov.w	ip, #10
 800775a:	4620      	mov	r0, r4
 800775c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007760:	3a30      	subs	r2, #48	; 0x30
 8007762:	2a09      	cmp	r2, #9
 8007764:	d903      	bls.n	800776e <_vfiprintf_r+0x1ee>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0c5      	beq.n	80076f6 <_vfiprintf_r+0x176>
 800776a:	9105      	str	r1, [sp, #20]
 800776c:	e7c3      	b.n	80076f6 <_vfiprintf_r+0x176>
 800776e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007772:	4604      	mov	r4, r0
 8007774:	2301      	movs	r3, #1
 8007776:	e7f0      	b.n	800775a <_vfiprintf_r+0x1da>
 8007778:	ab03      	add	r3, sp, #12
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	462a      	mov	r2, r5
 800777e:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <_vfiprintf_r+0x258>)
 8007780:	a904      	add	r1, sp, #16
 8007782:	4630      	mov	r0, r6
 8007784:	f7fd fc8a 	bl	800509c <_printf_float>
 8007788:	4607      	mov	r7, r0
 800778a:	1c78      	adds	r0, r7, #1
 800778c:	d1d6      	bne.n	800773c <_vfiprintf_r+0x1bc>
 800778e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007790:	07d9      	lsls	r1, r3, #31
 8007792:	d405      	bmi.n	80077a0 <_vfiprintf_r+0x220>
 8007794:	89ab      	ldrh	r3, [r5, #12]
 8007796:	059a      	lsls	r2, r3, #22
 8007798:	d402      	bmi.n	80077a0 <_vfiprintf_r+0x220>
 800779a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800779c:	f7ff f9d0 	bl	8006b40 <__retarget_lock_release_recursive>
 80077a0:	89ab      	ldrh	r3, [r5, #12]
 80077a2:	065b      	lsls	r3, r3, #25
 80077a4:	f53f af12 	bmi.w	80075cc <_vfiprintf_r+0x4c>
 80077a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077aa:	e711      	b.n	80075d0 <_vfiprintf_r+0x50>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <_vfiprintf_r+0x258>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7fd ff14 	bl	80055e4 <_printf_i>
 80077bc:	e7e4      	b.n	8007788 <_vfiprintf_r+0x208>
 80077be:	bf00      	nop
 80077c0:	08007bf4 	.word	0x08007bf4
 80077c4:	08007c14 	.word	0x08007c14
 80077c8:	08007bd4 	.word	0x08007bd4
 80077cc:	08007d8c 	.word	0x08007d8c
 80077d0:	08007d96 	.word	0x08007d96
 80077d4:	0800509d 	.word	0x0800509d
 80077d8:	0800755b 	.word	0x0800755b
 80077dc:	08007d92 	.word	0x08007d92

080077e0 <_sbrk_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	; (80077fc <_sbrk_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7fa f86c 	bl	80018c8 <_sbrk>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_sbrk_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_sbrk_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	20000490 	.word	0x20000490

08007800 <__sread>:
 8007800:	b510      	push	{r4, lr}
 8007802:	460c      	mov	r4, r1
 8007804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007808:	f000 f8e2 	bl	80079d0 <_read_r>
 800780c:	2800      	cmp	r0, #0
 800780e:	bfab      	itete	ge
 8007810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007812:	89a3      	ldrhlt	r3, [r4, #12]
 8007814:	181b      	addge	r3, r3, r0
 8007816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800781a:	bfac      	ite	ge
 800781c:	6563      	strge	r3, [r4, #84]	; 0x54
 800781e:	81a3      	strhlt	r3, [r4, #12]
 8007820:	bd10      	pop	{r4, pc}

08007822 <__swrite>:
 8007822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	461f      	mov	r7, r3
 8007828:	898b      	ldrh	r3, [r1, #12]
 800782a:	05db      	lsls	r3, r3, #23
 800782c:	4605      	mov	r5, r0
 800782e:	460c      	mov	r4, r1
 8007830:	4616      	mov	r6, r2
 8007832:	d505      	bpl.n	8007840 <__swrite+0x1e>
 8007834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007838:	2302      	movs	r3, #2
 800783a:	2200      	movs	r2, #0
 800783c:	f000 f898 	bl	8007970 <_lseek_r>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800784a:	81a3      	strh	r3, [r4, #12]
 800784c:	4632      	mov	r2, r6
 800784e:	463b      	mov	r3, r7
 8007850:	4628      	mov	r0, r5
 8007852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007856:	f000 b817 	b.w	8007888 <_write_r>

0800785a <__sseek>:
 800785a:	b510      	push	{r4, lr}
 800785c:	460c      	mov	r4, r1
 800785e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007862:	f000 f885 	bl	8007970 <_lseek_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	bf15      	itete	ne
 800786c:	6560      	strne	r0, [r4, #84]	; 0x54
 800786e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007876:	81a3      	strheq	r3, [r4, #12]
 8007878:	bf18      	it	ne
 800787a:	81a3      	strhne	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__sclose>:
 800787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007882:	f000 b831 	b.w	80078e8 <_close_r>
	...

08007888 <_write_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d07      	ldr	r5, [pc, #28]	; (80078a8 <_write_r+0x20>)
 800788c:	4604      	mov	r4, r0
 800788e:	4608      	mov	r0, r1
 8007890:	4611      	mov	r1, r2
 8007892:	2200      	movs	r2, #0
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7f9 ffc6 	bl	8001828 <_write>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_write_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_write_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	20000490 	.word	0x20000490

080078ac <__assert_func>:
 80078ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ae:	4614      	mov	r4, r2
 80078b0:	461a      	mov	r2, r3
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <__assert_func+0x2c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4605      	mov	r5, r0
 80078b8:	68d8      	ldr	r0, [r3, #12]
 80078ba:	b14c      	cbz	r4, 80078d0 <__assert_func+0x24>
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <__assert_func+0x30>)
 80078be:	9100      	str	r1, [sp, #0]
 80078c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078c4:	4906      	ldr	r1, [pc, #24]	; (80078e0 <__assert_func+0x34>)
 80078c6:	462b      	mov	r3, r5
 80078c8:	f000 f81e 	bl	8007908 <fiprintf>
 80078cc:	f000 f89f 	bl	8007a0e <abort>
 80078d0:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <__assert_func+0x38>)
 80078d2:	461c      	mov	r4, r3
 80078d4:	e7f3      	b.n	80078be <__assert_func+0x12>
 80078d6:	bf00      	nop
 80078d8:	2000000c 	.word	0x2000000c
 80078dc:	08007d9d 	.word	0x08007d9d
 80078e0:	08007daa 	.word	0x08007daa
 80078e4:	08007dd8 	.word	0x08007dd8

080078e8 <_close_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d06      	ldr	r5, [pc, #24]	; (8007904 <_close_r+0x1c>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7f9 ffb4 	bl	8001860 <_close>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_close_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_close_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20000490 	.word	0x20000490

08007908 <fiprintf>:
 8007908:	b40e      	push	{r1, r2, r3}
 800790a:	b503      	push	{r0, r1, lr}
 800790c:	4601      	mov	r1, r0
 800790e:	ab03      	add	r3, sp, #12
 8007910:	4805      	ldr	r0, [pc, #20]	; (8007928 <fiprintf+0x20>)
 8007912:	f853 2b04 	ldr.w	r2, [r3], #4
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f7ff fe31 	bl	8007580 <_vfiprintf_r>
 800791e:	b002      	add	sp, #8
 8007920:	f85d eb04 	ldr.w	lr, [sp], #4
 8007924:	b003      	add	sp, #12
 8007926:	4770      	bx	lr
 8007928:	2000000c 	.word	0x2000000c

0800792c <_fstat_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d07      	ldr	r5, [pc, #28]	; (800794c <_fstat_r+0x20>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	4611      	mov	r1, r2
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	f7f9 ff9d 	bl	8001878 <_fstat>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d102      	bne.n	8007948 <_fstat_r+0x1c>
 8007942:	682b      	ldr	r3, [r5, #0]
 8007944:	b103      	cbz	r3, 8007948 <_fstat_r+0x1c>
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	bd38      	pop	{r3, r4, r5, pc}
 800794a:	bf00      	nop
 800794c:	20000490 	.word	0x20000490

08007950 <_isatty_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d06      	ldr	r5, [pc, #24]	; (800796c <_isatty_r+0x1c>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	f7f9 ff9c 	bl	8001898 <_isatty>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_isatty_r+0x1a>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_isatty_r+0x1a>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20000490 	.word	0x20000490

08007970 <_lseek_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_lseek_r+0x20>)
 8007974:	4604      	mov	r4, r0
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7f9 ff95 	bl	80018ae <_lseek>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_lseek_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_lseek_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	20000490 	.word	0x20000490

08007994 <__ascii_mbtowc>:
 8007994:	b082      	sub	sp, #8
 8007996:	b901      	cbnz	r1, 800799a <__ascii_mbtowc+0x6>
 8007998:	a901      	add	r1, sp, #4
 800799a:	b142      	cbz	r2, 80079ae <__ascii_mbtowc+0x1a>
 800799c:	b14b      	cbz	r3, 80079b2 <__ascii_mbtowc+0x1e>
 800799e:	7813      	ldrb	r3, [r2, #0]
 80079a0:	600b      	str	r3, [r1, #0]
 80079a2:	7812      	ldrb	r2, [r2, #0]
 80079a4:	1e10      	subs	r0, r2, #0
 80079a6:	bf18      	it	ne
 80079a8:	2001      	movne	r0, #1
 80079aa:	b002      	add	sp, #8
 80079ac:	4770      	bx	lr
 80079ae:	4610      	mov	r0, r2
 80079b0:	e7fb      	b.n	80079aa <__ascii_mbtowc+0x16>
 80079b2:	f06f 0001 	mvn.w	r0, #1
 80079b6:	e7f8      	b.n	80079aa <__ascii_mbtowc+0x16>

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_lock+0x8>)
 80079ba:	f7ff b8c0 	b.w	8006b3e <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	20000484 	.word	0x20000484

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__malloc_unlock+0x8>)
 80079c6:	f7ff b8bb 	b.w	8006b40 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	20000484 	.word	0x20000484

080079d0 <_read_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	; (80079f0 <_read_r+0x20>)
 80079d4:	4604      	mov	r4, r0
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	2200      	movs	r2, #0
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7f9 ff05 	bl	80017ee <_read>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_read_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_read_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	20000490 	.word	0x20000490

080079f4 <__ascii_wctomb>:
 80079f4:	b149      	cbz	r1, 8007a0a <__ascii_wctomb+0x16>
 80079f6:	2aff      	cmp	r2, #255	; 0xff
 80079f8:	bf85      	ittet	hi
 80079fa:	238a      	movhi	r3, #138	; 0x8a
 80079fc:	6003      	strhi	r3, [r0, #0]
 80079fe:	700a      	strbls	r2, [r1, #0]
 8007a00:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a04:	bf98      	it	ls
 8007a06:	2001      	movls	r0, #1
 8007a08:	4770      	bx	lr
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4770      	bx	lr

08007a0e <abort>:
 8007a0e:	b508      	push	{r3, lr}
 8007a10:	2006      	movs	r0, #6
 8007a12:	f000 f82b 	bl	8007a6c <raise>
 8007a16:	2001      	movs	r0, #1
 8007a18:	f7f9 fedf 	bl	80017da <_exit>

08007a1c <_raise_r>:
 8007a1c:	291f      	cmp	r1, #31
 8007a1e:	b538      	push	{r3, r4, r5, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	d904      	bls.n	8007a30 <_raise_r+0x14>
 8007a26:	2316      	movs	r3, #22
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a32:	b112      	cbz	r2, 8007a3a <_raise_r+0x1e>
 8007a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a38:	b94b      	cbnz	r3, 8007a4e <_raise_r+0x32>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f830 	bl	8007aa0 <_getpid_r>
 8007a40:	462a      	mov	r2, r5
 8007a42:	4601      	mov	r1, r0
 8007a44:	4620      	mov	r0, r4
 8007a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4a:	f000 b817 	b.w	8007a7c <_kill_r>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d00a      	beq.n	8007a68 <_raise_r+0x4c>
 8007a52:	1c59      	adds	r1, r3, #1
 8007a54:	d103      	bne.n	8007a5e <_raise_r+0x42>
 8007a56:	2316      	movs	r3, #22
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	e7e7      	b.n	8007a2e <_raise_r+0x12>
 8007a5e:	2400      	movs	r4, #0
 8007a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a64:	4628      	mov	r0, r5
 8007a66:	4798      	blx	r3
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7e0      	b.n	8007a2e <_raise_r+0x12>

08007a6c <raise>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <raise+0xc>)
 8007a6e:	4601      	mov	r1, r0
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f7ff bfd3 	b.w	8007a1c <_raise_r>
 8007a76:	bf00      	nop
 8007a78:	2000000c 	.word	0x2000000c

08007a7c <_kill_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d07      	ldr	r5, [pc, #28]	; (8007a9c <_kill_r+0x20>)
 8007a80:	2300      	movs	r3, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	f7f9 fe96 	bl	80017ba <_kill>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d102      	bne.n	8007a98 <_kill_r+0x1c>
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	b103      	cbz	r3, 8007a98 <_kill_r+0x1c>
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	bd38      	pop	{r3, r4, r5, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000490 	.word	0x20000490

08007aa0 <_getpid_r>:
 8007aa0:	f7f9 be83 	b.w	80017aa <_getpid>

08007aa4 <_init>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	bf00      	nop
 8007aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aaa:	bc08      	pop	{r3}
 8007aac:	469e      	mov	lr, r3
 8007aae:	4770      	bx	lr

08007ab0 <_fini>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr
